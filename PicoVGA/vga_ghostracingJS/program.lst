
build/program.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <__boot2_start__>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592102 	.word	0x61592102
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	7a4eb274 	.word	0x7a4eb274

Disassembly of section .text:

10000100 <__logical_binary_start>:
10000100:	20042000 	.word	0x20042000
10000104:	100001f7 	.word	0x100001f7
10000108:	100001c3 	.word	0x100001c3
1000010c:	100001c5 	.word	0x100001c5
10000110:	100001c1 	.word	0x100001c1
10000114:	100001c1 	.word	0x100001c1
10000118:	100001c1 	.word	0x100001c1
1000011c:	100001c1 	.word	0x100001c1
10000120:	100001c1 	.word	0x100001c1
10000124:	100001c1 	.word	0x100001c1
10000128:	100001c1 	.word	0x100001c1
1000012c:	100001c7 	.word	0x100001c7
10000130:	100001c1 	.word	0x100001c1
10000134:	100001c1 	.word	0x100001c1
10000138:	100001c9 	.word	0x100001c9
1000013c:	100001cb 	.word	0x100001cb
10000140:	100001cd 	.word	0x100001cd
10000144:	100001cd 	.word	0x100001cd
10000148:	100001cd 	.word	0x100001cd
1000014c:	100001cd 	.word	0x100001cd
10000150:	100001cd 	.word	0x100001cd
10000154:	100001cd 	.word	0x100001cd
10000158:	100001cd 	.word	0x100001cd
1000015c:	100001cd 	.word	0x100001cd
10000160:	100001cd 	.word	0x100001cd
10000164:	100001cd 	.word	0x100001cd
10000168:	100001cd 	.word	0x100001cd
1000016c:	100001cd 	.word	0x100001cd
10000170:	100001cd 	.word	0x100001cd
10000174:	100001cd 	.word	0x100001cd
10000178:	100001cd 	.word	0x100001cd
1000017c:	100001cd 	.word	0x100001cd
10000180:	100001cd 	.word	0x100001cd
10000184:	100001cd 	.word	0x100001cd
10000188:	100001cd 	.word	0x100001cd
1000018c:	100001cd 	.word	0x100001cd
10000190:	100001cd 	.word	0x100001cd
10000194:	100001cd 	.word	0x100001cd
10000198:	100001cd 	.word	0x100001cd
1000019c:	100001cd 	.word	0x100001cd
100001a0:	100001cd 	.word	0x100001cd
100001a4:	100001cd 	.word	0x100001cd
100001a8:	100001cd 	.word	0x100001cd
100001ac:	100001cd 	.word	0x100001cd
100001b0:	100001cd 	.word	0x100001cd
100001b4:	100001cd 	.word	0x100001cd
100001b8:	100001cd 	.word	0x100001cd
100001bc:	100001cd 	.word	0x100001cd

100001c0 <isr_invalid>:
100001c0:	be00      	bkpt	0x0000

100001c2 <isr_nmi>:
100001c2:	be00      	bkpt	0x0000

100001c4 <isr_hardfault>:
100001c4:	be00      	bkpt	0x0000

100001c6 <isr_svcall>:
100001c6:	be00      	bkpt	0x0000

100001c8 <isr_pendsv>:
100001c8:	be00      	bkpt	0x0000

100001ca <isr_systick>:
100001ca:	be00      	bkpt	0x0000

100001cc <__unhandled_user_irq>:
100001cc:	f000 f84b 	bl	10000266 <__get_current_exception>
100001d0:	3810      	subs	r0, #16

100001d2 <unhandled_user_irq_num_in_r0>:
100001d2:	be00      	bkpt	0x0000

100001d4 <binary_info_header>:
100001d4:	7188ebf2 	.word	0x7188ebf2
100001d8:	100413a4 	.word	0x100413a4
100001dc:	100413c4 	.word	0x100413c4
100001e0:	10000234 	.word	0x10000234
100001e4:	e71aa390 	.word	0xe71aa390

100001e8 <_entry_point>:
100001e8:	2000      	movs	r0, #0
100001ea:	4921      	ldr	r1, [pc, #132]	; (10000270 <__get_current_exception+0xa>)
100001ec:	6008      	str	r0, [r1, #0]
100001ee:	c806      	ldmia	r0!, {r1, r2}
100001f0:	f381 8808 	msr	MSP, r1
100001f4:	4710      	bx	r2

100001f6 <_reset_handler>:
100001f6:	481f      	ldr	r0, [pc, #124]	; (10000274 <__get_current_exception+0xe>)
100001f8:	6800      	ldr	r0, [r0, #0]
100001fa:	2800      	cmp	r0, #0
100001fc:	d12f      	bne.n	1000025e <hold_non_core0_in_bootrom>
100001fe:	a40d      	add	r4, pc, #52	; (adr r4, 10000234 <data_cpy_table>)
10000200:	cc0e      	ldmia	r4!, {r1, r2, r3}
10000202:	2900      	cmp	r1, #0
10000204:	d002      	beq.n	1000020c <_reset_handler+0x16>
10000206:	f000 f812 	bl	1000022e <data_cpy>
1000020a:	e7f9      	b.n	10000200 <_reset_handler+0xa>
1000020c:	491a      	ldr	r1, [pc, #104]	; (10000278 <__get_current_exception+0x12>)
1000020e:	4a1b      	ldr	r2, [pc, #108]	; (1000027c <__get_current_exception+0x16>)
10000210:	2000      	movs	r0, #0
10000212:	e000      	b.n	10000216 <bss_fill_test>

10000214 <bss_fill_loop>:
10000214:	c101      	stmia	r1!, {r0}

10000216 <bss_fill_test>:
10000216:	4291      	cmp	r1, r2
10000218:	d1fc      	bne.n	10000214 <bss_fill_loop>

1000021a <platform_entry>:
1000021a:	4919      	ldr	r1, [pc, #100]	; (10000280 <__get_current_exception+0x1a>)
1000021c:	4788      	blx	r1
1000021e:	4919      	ldr	r1, [pc, #100]	; (10000284 <__get_current_exception+0x1e>)
10000220:	4788      	blx	r1
10000222:	4919      	ldr	r1, [pc, #100]	; (10000288 <__get_current_exception+0x22>)
10000224:	4788      	blx	r1
10000226:	be00      	bkpt	0x0000
10000228:	e7fd      	b.n	10000226 <platform_entry+0xc>

1000022a <data_cpy_loop>:
1000022a:	c901      	ldmia	r1!, {r0}
1000022c:	c201      	stmia	r2!, {r0}

1000022e <data_cpy>:
1000022e:	429a      	cmp	r2, r3
10000230:	d3fb      	bcc.n	1000022a <data_cpy_loop>
10000232:	4770      	bx	lr

10000234 <data_cpy_table>:
10000234:	100413c4 	.word	0x100413c4
10000238:	200000c0 	.word	0x200000c0
1000023c:	20003408 	.word	0x20003408
10000240:	1004470c 	.word	0x1004470c
10000244:	20040000 	.word	0x20040000
10000248:	20040000 	.word	0x20040000
1000024c:	1004470c 	.word	0x1004470c
10000250:	20041000 	.word	0x20041000
10000254:	20041000 	.word	0x20041000
10000258:	00000000 	.word	0x00000000
1000025c:	4770      	bx	lr

1000025e <hold_non_core0_in_bootrom>:
1000025e:	480b      	ldr	r0, [pc, #44]	; (1000028c <__get_current_exception+0x26>)
10000260:	f000 ffce 	bl	10001200 <rom_func_lookup>
10000264:	4700      	bx	r0

10000266 <__get_current_exception>:
10000266:	f3ef 8005 	mrs	r0, IPSR
1000026a:	b2c0      	uxtb	r0, r0
1000026c:	4770      	bx	lr
1000026e:	0000      	.short	0x0000
10000270:	e000ed08 	.word	0xe000ed08
10000274:	d0000000 	.word	0xd0000000
10000278:	20003408 	.word	0x20003408
1000027c:	2003e348 	.word	0x2003e348
10000280:	100025a9 	.word	0x100025a9
10000284:	10006fe1 	.word	0x10006fe1
10000288:	100026c9 	.word	0x100026c9
1000028c:	00005657 	.word	0x00005657

10000290 <__bi_46>:
10000290:	50520006 5360b3ab 1000a348              ..RP..`SH...

1000029c <__bi_34>:
1000029c:	50520006 02031c86 1000a350              ..RP....P...

100002a8 <__bi_26>:
100002a8:	50520006 9da22254 1000a358              ..RPT"..X...

100002b4 <__bi_18>:
100002b4:	50520005 68f465de 1004470c              ..RP.e.h.G..

100002c0 <_init>:
100002c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100002c2:	46c0      	nop			; (mov r8, r8)

100002c4 <__do_global_dtors_aux>:
100002c4:	b510      	push	{r4, lr}
100002c6:	4c06      	ldr	r4, [pc, #24]	; (100002e0 <__do_global_dtors_aux+0x1c>)
100002c8:	7823      	ldrb	r3, [r4, #0]
100002ca:	2b00      	cmp	r3, #0
100002cc:	d107      	bne.n	100002de <__do_global_dtors_aux+0x1a>
100002ce:	4b05      	ldr	r3, [pc, #20]	; (100002e4 <__do_global_dtors_aux+0x20>)
100002d0:	2b00      	cmp	r3, #0
100002d2:	d002      	beq.n	100002da <__do_global_dtors_aux+0x16>
100002d4:	4804      	ldr	r0, [pc, #16]	; (100002e8 <__do_global_dtors_aux+0x24>)
100002d6:	e000      	b.n	100002da <__do_global_dtors_aux+0x16>
100002d8:	bf00      	nop
100002da:	2301      	movs	r3, #1
100002dc:	7023      	strb	r3, [r4, #0]
100002de:	bd10      	pop	{r4, pc}
100002e0:	20003618 	.word	0x20003618
100002e4:	00000000 	.word	0x00000000
100002e8:	1000a310 	.word	0x1000a310

100002ec <frame_dummy>:
100002ec:	4b04      	ldr	r3, [pc, #16]	; (10000300 <frame_dummy+0x14>)
100002ee:	b510      	push	{r4, lr}
100002f0:	2b00      	cmp	r3, #0
100002f2:	d003      	beq.n	100002fc <frame_dummy+0x10>
100002f4:	4903      	ldr	r1, [pc, #12]	; (10000304 <frame_dummy+0x18>)
100002f6:	4804      	ldr	r0, [pc, #16]	; (10000308 <frame_dummy+0x1c>)
100002f8:	e000      	b.n	100002fc <frame_dummy+0x10>
100002fa:	bf00      	nop
100002fc:	bd10      	pop	{r4, pc}
100002fe:	46c0      	nop			; (mov r8, r8)
10000300:	00000000 	.word	0x00000000
10000304:	2000361c 	.word	0x2000361c
10000308:	1000a310 	.word	0x1000a310

1000030c <__aeabi_bits_init>:
1000030c:	4801      	ldr	r0, [pc, #4]	; (10000314 <__aeabi_bits_init+0x8>)
1000030e:	2104      	movs	r1, #4
10000310:	4b01      	ldr	r3, [pc, #4]	; (10000318 <__aeabi_bits_init+0xc>)
10000312:	4718      	bx	r3
10000314:	200026b0 	.word	0x200026b0
10000318:	10001221 	.word	0x10001221

1000031c <__wrap___aeabi_idiv>:
1000031c:	4a14      	ldr	r2, [pc, #80]	; (10000370 <divmod_s32s32_savestate+0x20>)
1000031e:	6f93      	ldr	r3, [r2, #120]	; 0x78
10000320:	089b      	lsrs	r3, r3, #2
10000322:	d215      	bcs.n	10000350 <divmod_s32s32_savestate>

10000324 <divmod_s32s32_unsafe>:
10000324:	6690      	str	r0, [r2, #104]	; 0x68
10000326:	66d1      	str	r1, [r2, #108]	; 0x6c
10000328:	2900      	cmp	r1, #0
1000032a:	d005      	beq.n	10000338 <divmod_s32s32_unsafe+0x14>
1000032c:	e7ff      	b.n	1000032e <divmod_s32s32_unsafe+0xa>
1000032e:	e7ff      	b.n	10000330 <divmod_s32s32_unsafe+0xc>
10000330:	e7ff      	b.n	10000332 <divmod_s32s32_unsafe+0xe>
10000332:	6f51      	ldr	r1, [r2, #116]	; 0x74
10000334:	6f10      	ldr	r0, [r2, #112]	; 0x70
10000336:	4770      	bx	lr
10000338:	b504      	push	{r2, lr}
1000033a:	2180      	movs	r1, #128	; 0x80
1000033c:	0609      	lsls	r1, r1, #24
1000033e:	17c2      	asrs	r2, r0, #31
10000340:	4051      	eors	r1, r2
10000342:	2800      	cmp	r0, #0
10000344:	d000      	beq.n	10000348 <divmod_s32s32_unsafe+0x24>
10000346:	43c8      	mvns	r0, r1
10000348:	f009 ffba 	bl	1000a2c0 <____aeabi_idiv0_veneer>
1000034c:	2100      	movs	r1, #0
1000034e:	bd04      	pop	{r2, pc}

10000350 <divmod_s32s32_savestate>:
10000350:	6f93      	ldr	r3, [r2, #120]	; 0x78
10000352:	085b      	lsrs	r3, r3, #1
10000354:	d3fd      	bcc.n	10000352 <divmod_s32s32_savestate+0x2>
10000356:	b5f0      	push	{r4, r5, r6, r7, lr}
10000358:	6e94      	ldr	r4, [r2, #104]	; 0x68
1000035a:	6ed5      	ldr	r5, [r2, #108]	; 0x6c
1000035c:	6f57      	ldr	r7, [r2, #116]	; 0x74
1000035e:	6f16      	ldr	r6, [r2, #112]	; 0x70
10000360:	f7ff ffe0 	bl	10000324 <divmod_s32s32_unsafe>
10000364:	6694      	str	r4, [r2, #104]	; 0x68
10000366:	66d5      	str	r5, [r2, #108]	; 0x6c
10000368:	6757      	str	r7, [r2, #116]	; 0x74
1000036a:	6716      	str	r6, [r2, #112]	; 0x70
1000036c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000036e:	0000      	.short	0x0000
10000370:	d0000000 	.word	0xd0000000

10000374 <__wrap___aeabi_uidiv>:
10000374:	4a13      	ldr	r2, [pc, #76]	; (100003c4 <divmod_u32u32_savestate+0x20>)
10000376:	6f93      	ldr	r3, [r2, #120]	; 0x78
10000378:	089b      	lsrs	r3, r3, #2
1000037a:	d213      	bcs.n	100003a4 <divmod_u32u32_savestate>

1000037c <divmod_u32u32_unsafe>:
1000037c:	6610      	str	r0, [r2, #96]	; 0x60
1000037e:	6651      	str	r1, [r2, #100]	; 0x64
10000380:	2900      	cmp	r1, #0
10000382:	d005      	beq.n	10000390 <divmod_u32u32_unsafe+0x14>
10000384:	e7ff      	b.n	10000386 <divmod_u32u32_unsafe+0xa>
10000386:	e7ff      	b.n	10000388 <divmod_u32u32_unsafe+0xc>
10000388:	e7ff      	b.n	1000038a <divmod_u32u32_unsafe+0xe>
1000038a:	6f51      	ldr	r1, [r2, #116]	; 0x74
1000038c:	6f10      	ldr	r0, [r2, #112]	; 0x70
1000038e:	4770      	bx	lr
10000390:	b504      	push	{r2, lr}
10000392:	2800      	cmp	r0, #0
10000394:	d001      	beq.n	1000039a <divmod_u32u32_unsafe+0x1e>
10000396:	2000      	movs	r0, #0
10000398:	43c0      	mvns	r0, r0
1000039a:	f009 ff91 	bl	1000a2c0 <____aeabi_idiv0_veneer>
1000039e:	2100      	movs	r1, #0
100003a0:	bd04      	pop	{r2, pc}
100003a2:	46c0      	nop			; (mov r8, r8)

100003a4 <divmod_u32u32_savestate>:
100003a4:	6f93      	ldr	r3, [r2, #120]	; 0x78
100003a6:	085b      	lsrs	r3, r3, #1
100003a8:	d3fd      	bcc.n	100003a6 <divmod_u32u32_savestate+0x2>
100003aa:	b5f0      	push	{r4, r5, r6, r7, lr}
100003ac:	6e94      	ldr	r4, [r2, #104]	; 0x68
100003ae:	6ed5      	ldr	r5, [r2, #108]	; 0x6c
100003b0:	6f57      	ldr	r7, [r2, #116]	; 0x74
100003b2:	6f16      	ldr	r6, [r2, #112]	; 0x70
100003b4:	f7ff ffe2 	bl	1000037c <divmod_u32u32_unsafe>
100003b8:	6694      	str	r4, [r2, #104]	; 0x68
100003ba:	66d5      	str	r5, [r2, #108]	; 0x6c
100003bc:	6757      	str	r7, [r2, #116]	; 0x74
100003be:	6716      	str	r6, [r2, #112]	; 0x70
100003c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100003c2:	0000      	.short	0x0000
100003c4:	d0000000 	.word	0xd0000000

100003c8 <__wrap___aeabi_ldivmod>:
100003c8:	4694      	mov	ip, r2
100003ca:	4a4e      	ldr	r2, [pc, #312]	; (10000504 <udiv0+0x1a>)
100003cc:	6f92      	ldr	r2, [r2, #120]	; 0x78
100003ce:	0892      	lsrs	r2, r2, #2
100003d0:	4662      	mov	r2, ip
100003d2:	d201      	bcs.n	100003d8 <divmod_s64s64_savestate>
100003d4:	e030      	b.n	10000438 <divmod_s64s64_unsafe>
100003d6:	46c0      	nop			; (mov r8, r8)

100003d8 <divmod_s64s64_savestate>:
100003d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100003da:	4e4a      	ldr	r6, [pc, #296]	; (10000504 <udiv0+0x1a>)
100003dc:	6fb5      	ldr	r5, [r6, #120]	; 0x78
100003de:	086d      	lsrs	r5, r5, #1
100003e0:	d3fc      	bcc.n	100003dc <divmod_s64s64_savestate+0x4>
100003e2:	6e34      	ldr	r4, [r6, #96]	; 0x60
100003e4:	6e75      	ldr	r5, [r6, #100]	; 0x64
100003e6:	6f77      	ldr	r7, [r6, #116]	; 0x74
100003e8:	6f36      	ldr	r6, [r6, #112]	; 0x70
100003ea:	f000 f825 	bl	10000438 <divmod_s64s64_unsafe>
100003ee:	4694      	mov	ip, r2
100003f0:	4a44      	ldr	r2, [pc, #272]	; (10000504 <udiv0+0x1a>)
100003f2:	6614      	str	r4, [r2, #96]	; 0x60
100003f4:	6655      	str	r5, [r2, #100]	; 0x64
100003f6:	6757      	str	r7, [r2, #116]	; 0x74
100003f8:	6716      	str	r6, [r2, #112]	; 0x70
100003fa:	4662      	mov	r2, ip
100003fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100003fe:	46c0      	nop			; (mov r8, r8)

10000400 <__wrap___aeabi_uldivmod>:
10000400:	4694      	mov	ip, r2
10000402:	4a40      	ldr	r2, [pc, #256]	; (10000504 <udiv0+0x1a>)
10000404:	6f92      	ldr	r2, [r2, #120]	; 0x78
10000406:	0892      	lsrs	r2, r2, #2
10000408:	4662      	mov	r2, ip
1000040a:	d201      	bcs.n	10000410 <divmod_u64u64_savestate>
1000040c:	e058      	b.n	100004c0 <divmod_u64u64_unsafe>
1000040e:	46c0      	nop			; (mov r8, r8)

10000410 <divmod_u64u64_savestate>:
10000410:	b5f0      	push	{r4, r5, r6, r7, lr}
10000412:	4e3c      	ldr	r6, [pc, #240]	; (10000504 <udiv0+0x1a>)
10000414:	6fb5      	ldr	r5, [r6, #120]	; 0x78
10000416:	086d      	lsrs	r5, r5, #1
10000418:	d3fc      	bcc.n	10000414 <divmod_u64u64_savestate+0x4>
1000041a:	6e34      	ldr	r4, [r6, #96]	; 0x60
1000041c:	6e75      	ldr	r5, [r6, #100]	; 0x64
1000041e:	6f77      	ldr	r7, [r6, #116]	; 0x74
10000420:	6f36      	ldr	r6, [r6, #112]	; 0x70
10000422:	f000 f84d 	bl	100004c0 <divmod_u64u64_unsafe>
10000426:	4694      	mov	ip, r2
10000428:	4a36      	ldr	r2, [pc, #216]	; (10000504 <udiv0+0x1a>)
1000042a:	6614      	str	r4, [r2, #96]	; 0x60
1000042c:	6655      	str	r5, [r2, #100]	; 0x64
1000042e:	6757      	str	r7, [r2, #116]	; 0x74
10000430:	6716      	str	r6, [r2, #112]	; 0x70
10000432:	4662      	mov	r2, ip
10000434:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000436:	46c0      	nop			; (mov r8, r8)

10000438 <divmod_s64s64_unsafe>:
10000438:	2b00      	cmp	r3, #0
1000043a:	db24      	blt.n	10000486 <l41_1+0x26>
1000043c:	d011      	beq.n	10000462 <l41_1+0x2>
1000043e:	2900      	cmp	r1, #0
10000440:	da3e      	bge.n	100004c0 <divmod_u64u64_unsafe>
10000442:	b500      	push	{lr}
10000444:	43c9      	mvns	r1, r1
10000446:	4240      	negs	r0, r0
10000448:	d100      	bne.n	1000044c <l39_1>
1000044a:	3101      	adds	r1, #1

1000044c <l39_1>:
1000044c:	f000 f838 	bl	100004c0 <divmod_u64u64_unsafe>
10000450:	43c9      	mvns	r1, r1
10000452:	4240      	negs	r0, r0
10000454:	d100      	bne.n	10000458 <l40_1>
10000456:	3101      	adds	r1, #1

10000458 <l40_1>:
10000458:	43db      	mvns	r3, r3
1000045a:	4252      	negs	r2, r2
1000045c:	d100      	bne.n	10000460 <l41_1>
1000045e:	3301      	adds	r3, #1

10000460 <l41_1>:
10000460:	bd00      	pop	{pc}
10000462:	2a00      	cmp	r2, #0
10000464:	d1eb      	bne.n	1000043e <divmod_s64s64_unsafe+0x6>
10000466:	2800      	cmp	r0, #0
10000468:	d101      	bne.n	1000046e <l41_1+0xe>
1000046a:	2900      	cmp	r1, #0
1000046c:	d005      	beq.n	1000047a <l41_1+0x1a>
1000046e:	2000      	movs	r0, #0
10000470:	0fc9      	lsrs	r1, r1, #31
10000472:	07c9      	lsls	r1, r1, #31
10000474:	d101      	bne.n	1000047a <l41_1+0x1a>
10000476:	43c0      	mvns	r0, r0
10000478:	0841      	lsrs	r1, r0, #1
1000047a:	b500      	push	{lr}
1000047c:	f009 ff18 	bl	1000a2b0 <____aeabi_ldiv0_veneer>
10000480:	2200      	movs	r2, #0
10000482:	2300      	movs	r3, #0
10000484:	bd00      	pop	{pc}
10000486:	b500      	push	{lr}
10000488:	2900      	cmp	r1, #0
1000048a:	db0a      	blt.n	100004a2 <l43_1+0x2>
1000048c:	43db      	mvns	r3, r3
1000048e:	4252      	negs	r2, r2
10000490:	d100      	bne.n	10000494 <l42_1>
10000492:	3301      	adds	r3, #1

10000494 <l42_1>:
10000494:	f000 f814 	bl	100004c0 <divmod_u64u64_unsafe>
10000498:	43c9      	mvns	r1, r1
1000049a:	4240      	negs	r0, r0
1000049c:	d100      	bne.n	100004a0 <l43_1>
1000049e:	3101      	adds	r1, #1

100004a0 <l43_1>:
100004a0:	bd00      	pop	{pc}
100004a2:	43c9      	mvns	r1, r1
100004a4:	4240      	negs	r0, r0
100004a6:	d100      	bne.n	100004aa <l44_1>
100004a8:	3101      	adds	r1, #1

100004aa <l44_1>:
100004aa:	43db      	mvns	r3, r3
100004ac:	4252      	negs	r2, r2
100004ae:	d100      	bne.n	100004b2 <l45_1>
100004b0:	3301      	adds	r3, #1

100004b2 <l45_1>:
100004b2:	f000 f805 	bl	100004c0 <divmod_u64u64_unsafe>
100004b6:	43db      	mvns	r3, r3
100004b8:	4252      	negs	r2, r2
100004ba:	d100      	bne.n	100004be <l46_1>
100004bc:	3301      	adds	r3, #1

100004be <l46_1>:
100004be:	bd00      	pop	{pc}

100004c0 <divmod_u64u64_unsafe>:
100004c0:	2900      	cmp	r1, #0
100004c2:	d123      	bne.n	1000050c <y64>
100004c4:	2b00      	cmp	r3, #0
100004c6:	d118      	bne.n	100004fa <udiv0+0x10>
100004c8:	2a00      	cmp	r2, #0
100004ca:	d00c      	beq.n	100004e6 <divmod_u64u64_unsafe+0x26>
100004cc:	46bc      	mov	ip, r7
100004ce:	4f0d      	ldr	r7, [pc, #52]	; (10000504 <udiv0+0x1a>)
100004d0:	6638      	str	r0, [r7, #96]	; 0x60
100004d2:	667a      	str	r2, [r7, #100]	; 0x64
100004d4:	2100      	movs	r1, #0
100004d6:	2300      	movs	r3, #0
100004d8:	e7ff      	b.n	100004da <divmod_u64u64_unsafe+0x1a>
100004da:	e7ff      	b.n	100004dc <divmod_u64u64_unsafe+0x1c>
100004dc:	e7ff      	b.n	100004de <divmod_u64u64_unsafe+0x1e>
100004de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
100004e0:	6f38      	ldr	r0, [r7, #112]	; 0x70
100004e2:	4667      	mov	r7, ip
100004e4:	4770      	bx	lr
100004e6:	2800      	cmp	r0, #0
100004e8:	d001      	beq.n	100004ee <udiv0+0x4>

100004ea <udiv0>:
100004ea:	4807      	ldr	r0, [pc, #28]	; (10000508 <udiv0+0x1e>)
100004ec:	0001      	movs	r1, r0
100004ee:	b500      	push	{lr}
100004f0:	f009 fede 	bl	1000a2b0 <____aeabi_ldiv0_veneer>
100004f4:	2200      	movs	r2, #0
100004f6:	2300      	movs	r3, #0
100004f8:	bd00      	pop	{pc}
100004fa:	0002      	movs	r2, r0
100004fc:	000b      	movs	r3, r1
100004fe:	2000      	movs	r0, #0
10000500:	2100      	movs	r1, #0
10000502:	4770      	bx	lr
10000504:	d0000000 	.word	0xd0000000
10000508:	ffffffff 	.word	0xffffffff

1000050c <y64>:
1000050c:	2b00      	cmp	r3, #0
1000050e:	d000      	beq.n	10000512 <y64+0x6>
10000510:	e0bd      	b.n	1000068e <y64_x48>
10000512:	0c13      	lsrs	r3, r2, #16
10000514:	d126      	bne.n	10000564 <y64_x32>
10000516:	2a00      	cmp	r2, #0
10000518:	d0e7      	beq.n	100004ea <udiv0>
1000051a:	b480      	push	{r7}
1000051c:	4f10      	ldr	r7, [pc, #64]	; (10000560 <y64+0x54>)
1000051e:	6639      	str	r1, [r7, #96]	; 0x60
10000520:	667a      	str	r2, [r7, #100]	; 0x64
10000522:	e7ff      	b.n	10000524 <y64+0x18>
10000524:	e7ff      	b.n	10000526 <y64+0x1a>
10000526:	b430      	push	{r4, r5}
10000528:	0c04      	lsrs	r4, r0, #16
1000052a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
1000052c:	6f39      	ldr	r1, [r7, #112]	; 0x70
1000052e:	041b      	lsls	r3, r3, #16
10000530:	4323      	orrs	r3, r4
10000532:	663b      	str	r3, [r7, #96]	; 0x60
10000534:	e7ff      	b.n	10000536 <y64+0x2a>
10000536:	e7ff      	b.n	10000538 <y64+0x2c>
10000538:	e7ff      	b.n	1000053a <y64+0x2e>
1000053a:	46c0      	nop			; (mov r8, r8)
1000053c:	b284      	uxth	r4, r0
1000053e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
10000540:	6f3d      	ldr	r5, [r7, #112]	; 0x70
10000542:	041b      	lsls	r3, r3, #16
10000544:	4323      	orrs	r3, r4
10000546:	663b      	str	r3, [r7, #96]	; 0x60
10000548:	e7ff      	b.n	1000054a <y64+0x3e>
1000054a:	e7ff      	b.n	1000054c <y64+0x40>
1000054c:	46c0      	nop			; (mov r8, r8)
1000054e:	2300      	movs	r3, #0
10000550:	042c      	lsls	r4, r5, #16
10000552:	0c2d      	lsrs	r5, r5, #16
10000554:	6f7a      	ldr	r2, [r7, #116]	; 0x74
10000556:	6f38      	ldr	r0, [r7, #112]	; 0x70
10000558:	1900      	adds	r0, r0, r4
1000055a:	4169      	adcs	r1, r5
1000055c:	bcb0      	pop	{r4, r5, r7}
1000055e:	4770      	bx	lr
10000560:	d0000000 	.word	0xd0000000

10000564 <y64_x32>:
10000564:	b5f0      	push	{r4, r5, r6, r7, lr}
10000566:	4694      	mov	ip, r2
10000568:	2500      	movs	r5, #0
1000056a:	0e14      	lsrs	r4, r2, #24
1000056c:	d101      	bne.n	10000572 <y64_x32+0xe>
1000056e:	0212      	lsls	r2, r2, #8
10000570:	3508      	adds	r5, #8
10000572:	0f14      	lsrs	r4, r2, #28
10000574:	d101      	bne.n	1000057a <y64_x32+0x16>
10000576:	0112      	lsls	r2, r2, #4
10000578:	3504      	adds	r5, #4
1000057a:	0f94      	lsrs	r4, r2, #30
1000057c:	d101      	bne.n	10000582 <y64_x32+0x1e>
1000057e:	0092      	lsls	r2, r2, #2
10000580:	3502      	adds	r5, #2
10000582:	0fd4      	lsrs	r4, r2, #31
10000584:	d101      	bne.n	1000058a <y64_x32+0x26>
10000586:	0052      	lsls	r2, r2, #1
10000588:	3501      	adds	r5, #1
1000058a:	0bd4      	lsrs	r4, r2, #15
1000058c:	3401      	adds	r4, #1
1000058e:	4f25      	ldr	r7, [pc, #148]	; (10000624 <y64_x32+0xc0>)
10000590:	667c      	str	r4, [r7, #100]	; 0x64
10000592:	4c25      	ldr	r4, [pc, #148]	; (10000628 <y64_x32+0xc4>)
10000594:	663c      	str	r4, [r7, #96]	; 0x60
10000596:	0c0e      	lsrs	r6, r1, #16
10000598:	b293      	uxth	r3, r2
1000059a:	e7ff      	b.n	1000059c <y64_x32+0x38>
1000059c:	e7ff      	b.n	1000059e <y64_x32+0x3a>
1000059e:	e7ff      	b.n	100005a0 <y64_x32+0x3c>
100005a0:	6f3c      	ldr	r4, [r7, #112]	; 0x70
100005a2:	4366      	muls	r6, r4
100005a4:	0c36      	lsrs	r6, r6, #16
100005a6:	0377      	lsls	r7, r6, #13
100005a8:	46be      	mov	lr, r7
100005aa:	4373      	muls	r3, r6
100005ac:	0bdf      	lsrs	r7, r3, #15
100005ae:	045b      	lsls	r3, r3, #17
100005b0:	1ac0      	subs	r0, r0, r3
100005b2:	41b9      	sbcs	r1, r7
100005b4:	0c13      	lsrs	r3, r2, #16
100005b6:	4373      	muls	r3, r6
100005b8:	18db      	adds	r3, r3, r3
100005ba:	1ac9      	subs	r1, r1, r3
100005bc:	08ce      	lsrs	r6, r1, #3
100005be:	4366      	muls	r6, r4
100005c0:	0c36      	lsrs	r6, r6, #16
100005c2:	44b6      	add	lr, r6
100005c4:	b293      	uxth	r3, r2
100005c6:	4373      	muls	r3, r6
100005c8:	0f1f      	lsrs	r7, r3, #28
100005ca:	011b      	lsls	r3, r3, #4
100005cc:	1ac0      	subs	r0, r0, r3
100005ce:	41b9      	sbcs	r1, r7
100005d0:	0c13      	lsrs	r3, r2, #16
100005d2:	4373      	muls	r3, r6
100005d4:	0b1f      	lsrs	r7, r3, #12
100005d6:	051b      	lsls	r3, r3, #20
100005d8:	1ac0      	subs	r0, r0, r3
100005da:	41b9      	sbcs	r1, r7
100005dc:	0d86      	lsrs	r6, r0, #22
100005de:	028f      	lsls	r7, r1, #10
100005e0:	433e      	orrs	r6, r7
100005e2:	4366      	muls	r6, r4
100005e4:	0c36      	lsrs	r6, r6, #16
100005e6:	2d09      	cmp	r5, #9
100005e8:	db24      	blt.n	10000634 <last0>
100005ea:	0a52      	lsrs	r2, r2, #9
100005ec:	4372      	muls	r2, r6
100005ee:	1a80      	subs	r0, r0, r2
100005f0:	0377      	lsls	r7, r6, #13
100005f2:	0a46      	lsrs	r6, r0, #9
100005f4:	4366      	muls	r6, r4
100005f6:	0c36      	lsrs	r6, r6, #16
100005f8:	2316      	movs	r3, #22
100005fa:	1b5b      	subs	r3, r3, r5
100005fc:	40de      	lsrs	r6, r3
100005fe:	40df      	lsrs	r7, r3
10000600:	19bf      	adds	r7, r7, r6
10000602:	4664      	mov	r4, ip
10000604:	4366      	muls	r6, r4
10000606:	1b82      	subs	r2, r0, r6
10000608:	4670      	mov	r0, lr
1000060a:	3504      	adds	r5, #4
1000060c:	3306      	adds	r3, #6
1000060e:	0001      	movs	r1, r0
10000610:	40d9      	lsrs	r1, r3
10000612:	40a8      	lsls	r0, r5
10000614:	19c0      	adds	r0, r0, r7
10000616:	d300      	bcc.n	1000061a <y64_x32+0xb6>
10000618:	3101      	adds	r1, #1
1000061a:	42a2      	cmp	r2, r4
1000061c:	d206      	bcs.n	1000062c <y64_x32+0xc8>
1000061e:	2300      	movs	r3, #0
10000620:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000622:	0000      	.short	0x0000
10000624:	d0000000 	.word	0xd0000000
10000628:	ffffffff 	.word	0xffffffff
1000062c:	1b12      	subs	r2, r2, r4
1000062e:	3001      	adds	r0, #1
10000630:	d3f3      	bcc.n	1000061a <y64_x32+0xb6>
10000632:	e7f1      	b.n	10000618 <y64_x32+0xb4>

10000634 <last0>:
10000634:	2709      	movs	r7, #9
10000636:	1b7f      	subs	r7, r7, r5
10000638:	40fe      	lsrs	r6, r7
1000063a:	4664      	mov	r4, ip
1000063c:	b2a2      	uxth	r2, r4
1000063e:	4372      	muls	r2, r6
10000640:	1a80      	subs	r0, r0, r2
10000642:	d200      	bcs.n	10000646 <last0+0x12>
10000644:	3901      	subs	r1, #1
10000646:	0c22      	lsrs	r2, r4, #16
10000648:	4372      	muls	r2, r6
1000064a:	0c13      	lsrs	r3, r2, #16
1000064c:	0412      	lsls	r2, r2, #16
1000064e:	1a82      	subs	r2, r0, r2
10000650:	4199      	sbcs	r1, r3
10000652:	000b      	movs	r3, r1
10000654:	4670      	mov	r0, lr
10000656:	3504      	adds	r5, #4
10000658:	3713      	adds	r7, #19
1000065a:	0001      	movs	r1, r0
1000065c:	40f9      	lsrs	r1, r7
1000065e:	40a8      	lsls	r0, r5
10000660:	1980      	adds	r0, r0, r6
10000662:	d300      	bcc.n	10000666 <last0+0x32>
10000664:	3101      	adds	r1, #1
10000666:	2b00      	cmp	r3, #0
10000668:	d102      	bne.n	10000670 <last0+0x3c>
1000066a:	42a2      	cmp	r2, r4
1000066c:	d20a      	bcs.n	10000684 <last0+0x50>
1000066e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000670:	3001      	adds	r0, #1
10000672:	d300      	bcc.n	10000676 <last0+0x42>
10000674:	3101      	adds	r1, #1
10000676:	1b12      	subs	r2, r2, r4
10000678:	d2fa      	bcs.n	10000670 <last0+0x3c>
1000067a:	3b01      	subs	r3, #1
1000067c:	d1f8      	bne.n	10000670 <last0+0x3c>
1000067e:	42a2      	cmp	r2, r4
10000680:	d200      	bcs.n	10000684 <last0+0x50>
10000682:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000684:	3001      	adds	r0, #1
10000686:	d300      	bcc.n	1000068a <last0+0x56>
10000688:	3101      	adds	r1, #1
1000068a:	1b12      	subs	r2, r2, r4
1000068c:	e7f7      	b.n	1000067e <last0+0x4a>

1000068e <y64_x48>:
1000068e:	b5f0      	push	{r4, r5, r6, r7, lr}
10000690:	0c1c      	lsrs	r4, r3, #16
10000692:	d000      	beq.n	10000696 <y64_x48+0x8>
10000694:	e080      	b.n	10000798 <y64_x64>
10000696:	b40c      	push	{r2, r3}
10000698:	2500      	movs	r5, #0
1000069a:	0a1c      	lsrs	r4, r3, #8
1000069c:	d104      	bne.n	100006a8 <y64_x48+0x1a>
1000069e:	021b      	lsls	r3, r3, #8
100006a0:	0e16      	lsrs	r6, r2, #24
100006a2:	4333      	orrs	r3, r6
100006a4:	0212      	lsls	r2, r2, #8
100006a6:	3508      	adds	r5, #8
100006a8:	0b1c      	lsrs	r4, r3, #12
100006aa:	d104      	bne.n	100006b6 <y64_x48+0x28>
100006ac:	011b      	lsls	r3, r3, #4
100006ae:	0f16      	lsrs	r6, r2, #28
100006b0:	4333      	orrs	r3, r6
100006b2:	0112      	lsls	r2, r2, #4
100006b4:	3504      	adds	r5, #4
100006b6:	0b9c      	lsrs	r4, r3, #14
100006b8:	d104      	bne.n	100006c4 <y64_x48+0x36>
100006ba:	009b      	lsls	r3, r3, #2
100006bc:	0f96      	lsrs	r6, r2, #30
100006be:	4333      	orrs	r3, r6
100006c0:	0092      	lsls	r2, r2, #2
100006c2:	3502      	adds	r5, #2
100006c4:	0bdc      	lsrs	r4, r3, #15
100006c6:	d102      	bne.n	100006ce <y64_x48+0x40>
100006c8:	1892      	adds	r2, r2, r2
100006ca:	415b      	adcs	r3, r3
100006cc:	3501      	adds	r5, #1
100006ce:	001c      	movs	r4, r3
100006d0:	1897      	adds	r7, r2, r2
100006d2:	4164      	adcs	r4, r4
100006d4:	3401      	adds	r4, #1
100006d6:	4f46      	ldr	r7, [pc, #280]	; (100007f0 <y64_x64+0x58>)
100006d8:	667c      	str	r4, [r7, #100]	; 0x64
100006da:	4c46      	ldr	r4, [pc, #280]	; (100007f4 <y64_x64+0x5c>)
100006dc:	663c      	str	r4, [r7, #96]	; 0x60
100006de:	0c0e      	lsrs	r6, r1, #16
100006e0:	e7ff      	b.n	100006e2 <y64_x48+0x54>
100006e2:	e7ff      	b.n	100006e4 <y64_x48+0x56>
100006e4:	e7ff      	b.n	100006e6 <y64_x48+0x58>
100006e6:	46c0      	nop			; (mov r8, r8)
100006e8:	6f3c      	ldr	r4, [r7, #112]	; 0x70
100006ea:	4366      	muls	r6, r4
100006ec:	0c36      	lsrs	r6, r6, #16
100006ee:	0377      	lsls	r7, r6, #13
100006f0:	46be      	mov	lr, r7
100006f2:	b297      	uxth	r7, r2
100006f4:	4377      	muls	r7, r6
100006f6:	1bc0      	subs	r0, r0, r7
100006f8:	d200      	bcs.n	100006fc <y64_x48+0x6e>
100006fa:	3901      	subs	r1, #1
100006fc:	1bc0      	subs	r0, r0, r7
100006fe:	d200      	bcs.n	10000702 <y64_x48+0x74>
10000700:	3901      	subs	r1, #1
10000702:	b29f      	uxth	r7, r3
10000704:	4377      	muls	r7, r6
10000706:	1bc9      	subs	r1, r1, r7
10000708:	1bc9      	subs	r1, r1, r7
1000070a:	0c17      	lsrs	r7, r2, #16
1000070c:	4377      	muls	r7, r6
1000070e:	047e      	lsls	r6, r7, #17
10000710:	0bff      	lsrs	r7, r7, #15
10000712:	1b80      	subs	r0, r0, r6
10000714:	41b9      	sbcs	r1, r7
10000716:	08ce      	lsrs	r6, r1, #3
10000718:	4366      	muls	r6, r4
1000071a:	0c36      	lsrs	r6, r6, #16
1000071c:	2d0c      	cmp	r5, #12
1000071e:	db33      	blt.n	10000788 <last1>
10000720:	44b6      	add	lr, r6
10000722:	0b12      	lsrs	r2, r2, #12
10000724:	051f      	lsls	r7, r3, #20
10000726:	433a      	orrs	r2, r7
10000728:	0b1b      	lsrs	r3, r3, #12
1000072a:	b297      	uxth	r7, r2
1000072c:	4377      	muls	r7, r6
1000072e:	1bc0      	subs	r0, r0, r7
10000730:	d200      	bcs.n	10000734 <y64_x48+0xa6>
10000732:	3901      	subs	r1, #1
10000734:	b29f      	uxth	r7, r3
10000736:	4377      	muls	r7, r6
10000738:	1bc9      	subs	r1, r1, r7
1000073a:	0c17      	lsrs	r7, r2, #16
1000073c:	4377      	muls	r7, r6
1000073e:	043e      	lsls	r6, r7, #16
10000740:	0c3f      	lsrs	r7, r7, #16
10000742:	1b80      	subs	r0, r0, r6
10000744:	41b9      	sbcs	r1, r7
10000746:	0d86      	lsrs	r6, r0, #22
10000748:	028f      	lsls	r7, r1, #10
1000074a:	433e      	orrs	r6, r7
1000074c:	4366      	muls	r6, r4
1000074e:	2729      	movs	r7, #41	; 0x29
10000750:	1b7f      	subs	r7, r7, r5
10000752:	40fe      	lsrs	r6, r7
10000754:	3d0c      	subs	r5, #12
10000756:	4677      	mov	r7, lr
10000758:	40af      	lsls	r7, r5
1000075a:	19bf      	adds	r7, r7, r6
1000075c:	bc30      	pop	{r4, r5}
1000075e:	b2a2      	uxth	r2, r4
10000760:	b2ab      	uxth	r3, r5
10000762:	4372      	muls	r2, r6
10000764:	4373      	muls	r3, r6
10000766:	1a80      	subs	r0, r0, r2
10000768:	4199      	sbcs	r1, r3
1000076a:	0c22      	lsrs	r2, r4, #16
1000076c:	4372      	muls	r2, r6
1000076e:	0c13      	lsrs	r3, r2, #16
10000770:	0412      	lsls	r2, r2, #16
10000772:	1a80      	subs	r0, r0, r2
10000774:	4199      	sbcs	r1, r3
10000776:	0002      	movs	r2, r0
10000778:	000b      	movs	r3, r1
1000077a:	3701      	adds	r7, #1
1000077c:	1b00      	subs	r0, r0, r4
1000077e:	41a9      	sbcs	r1, r5
10000780:	d2f9      	bcs.n	10000776 <y64_x48+0xe8>
10000782:	1e78      	subs	r0, r7, #1
10000784:	2100      	movs	r1, #0
10000786:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000788 <last1>:
10000788:	270c      	movs	r7, #12
1000078a:	1b7f      	subs	r7, r7, r5
1000078c:	40fe      	lsrs	r6, r7
1000078e:	4677      	mov	r7, lr
10000790:	0b7f      	lsrs	r7, r7, #13
10000792:	40af      	lsls	r7, r5
10000794:	19ff      	adds	r7, r7, r7
10000796:	e7e0      	b.n	1000075a <y64_x48+0xcc>

10000798 <y64_x64>:
10000798:	2400      	movs	r4, #0
1000079a:	1c5d      	adds	r5, r3, #1
1000079c:	d007      	beq.n	100007ae <y64_x64+0x16>
1000079e:	4f14      	ldr	r7, [pc, #80]	; (100007f0 <y64_x64+0x58>)
100007a0:	667d      	str	r5, [r7, #100]	; 0x64
100007a2:	6639      	str	r1, [r7, #96]	; 0x60
100007a4:	e7ff      	b.n	100007a6 <y64_x64+0xe>
100007a6:	e7ff      	b.n	100007a8 <y64_x64+0x10>
100007a8:	e7ff      	b.n	100007aa <y64_x64+0x12>
100007aa:	e7ff      	b.n	100007ac <y64_x64+0x14>
100007ac:	6f3c      	ldr	r4, [r7, #112]	; 0x70
100007ae:	b295      	uxth	r5, r2
100007b0:	b29e      	uxth	r6, r3
100007b2:	4365      	muls	r5, r4
100007b4:	4366      	muls	r6, r4
100007b6:	1b40      	subs	r0, r0, r5
100007b8:	41b1      	sbcs	r1, r6
100007ba:	0c15      	lsrs	r5, r2, #16
100007bc:	0c1e      	lsrs	r6, r3, #16
100007be:	4365      	muls	r5, r4
100007c0:	4366      	muls	r6, r4
100007c2:	0436      	lsls	r6, r6, #16
100007c4:	0c2f      	lsrs	r7, r5, #16
100007c6:	433e      	orrs	r6, r7
100007c8:	042d      	lsls	r5, r5, #16
100007ca:	1b40      	subs	r0, r0, r5
100007cc:	41b1      	sbcs	r1, r6
100007ce:	4299      	cmp	r1, r3
100007d0:	d204      	bcs.n	100007dc <y64_x64+0x44>
100007d2:	0002      	movs	r2, r0
100007d4:	000b      	movs	r3, r1
100007d6:	0020      	movs	r0, r4
100007d8:	2100      	movs	r1, #0
100007da:	bdf0      	pop	{r4, r5, r6, r7, pc}
100007dc:	d101      	bne.n	100007e2 <y64_x64+0x4a>
100007de:	4290      	cmp	r0, r2
100007e0:	d3f7      	bcc.n	100007d2 <y64_x64+0x3a>
100007e2:	1a80      	subs	r0, r0, r2
100007e4:	4199      	sbcs	r1, r3
100007e6:	3401      	adds	r4, #1
100007e8:	4299      	cmp	r1, r3
100007ea:	d3f2      	bcc.n	100007d2 <y64_x64+0x3a>
100007ec:	e7f6      	b.n	100007dc <y64_x64+0x44>
100007ee:	0000      	.short	0x0000
100007f0:	d0000000 	.word	0xd0000000
100007f4:	ffffffff 	.word	0xffffffff

100007f8 <hw_divider_save_state>:
100007f8:	b530      	push	{r4, r5, lr}
100007fa:	4d05      	ldr	r5, [pc, #20]	; (10000810 <hw_divider_save_state+0x18>)
100007fc:	6fac      	ldr	r4, [r5, #120]	; 0x78
100007fe:	0864      	lsrs	r4, r4, #1
10000800:	d3fd      	bcc.n	100007fe <hw_divider_save_state+0x6>
10000802:	6e29      	ldr	r1, [r5, #96]	; 0x60
10000804:	6e6a      	ldr	r2, [r5, #100]	; 0x64
10000806:	6f6b      	ldr	r3, [r5, #116]	; 0x74
10000808:	6f2c      	ldr	r4, [r5, #112]	; 0x70
1000080a:	c01e      	stmia	r0!, {r1, r2, r3, r4}
1000080c:	bd30      	pop	{r4, r5, pc}
1000080e:	0000      	.short	0x0000
10000810:	d0000000 	.word	0xd0000000

10000814 <hw_divider_restore_state>:
10000814:	b530      	push	{r4, r5, lr}
10000816:	4d03      	ldr	r5, [pc, #12]	; (10000824 <hw_divider_restore_state+0x10>)
10000818:	c81e      	ldmia	r0!, {r1, r2, r3, r4}
1000081a:	6629      	str	r1, [r5, #96]	; 0x60
1000081c:	666a      	str	r2, [r5, #100]	; 0x64
1000081e:	676b      	str	r3, [r5, #116]	; 0x74
10000820:	672c      	str	r4, [r5, #112]	; 0x70
10000822:	bd30      	pop	{r4, r5, pc}
10000824:	d0000000 	.word	0xd0000000

10000828 <__wrap___aeabi_drsub>:
10000828:	4048      	eors	r0, r1
1000082a:	4041      	eors	r1, r0
1000082c:	4048      	eors	r0, r1

1000082e <__wrap___aeabi_dsub>:
1000082e:	b418      	push	{r3, r4}
10000830:	4b11      	ldr	r3, [pc, #68]	; (10000878 <__wrap___aeabi_dmul+0x14>)
10000832:	685b      	ldr	r3, [r3, #4]
10000834:	46fc      	mov	ip, pc
10000836:	9301      	str	r3, [sp, #4]
10000838:	bd08      	pop	{r3, pc}
1000083a:	df04      	.short	0xdf04
1000083c:	100009a3 	.word	0x100009a3

10000840 <__wrap___aeabi_dadd>:
10000840:	b418      	push	{r3, r4}
10000842:	4b0d      	ldr	r3, [pc, #52]	; (10000878 <__wrap___aeabi_dmul+0x14>)
10000844:	681b      	ldr	r3, [r3, #0]
10000846:	46fc      	mov	ip, pc
10000848:	9301      	str	r3, [sp, #4]
1000084a:	bd08      	pop	{r3, pc}
1000084c:	09addf00 	.word	0x09addf00
10000850:	1000      	.short	0x1000

10000852 <__wrap___aeabi_ddiv>:
10000852:	b418      	push	{r3, r4}
10000854:	4b08      	ldr	r3, [pc, #32]	; (10000878 <__wrap___aeabi_dmul+0x14>)
10000856:	68db      	ldr	r3, [r3, #12]
10000858:	46fc      	mov	ip, pc
1000085a:	9301      	str	r3, [sp, #4]
1000085c:	bd08      	pop	{r3, pc}
1000085e:	df0c      	.short	0xdf0c
10000860:	10000c65 	.word	0x10000c65

10000864 <__wrap___aeabi_dmul>:
10000864:	b418      	push	{r3, r4}
10000866:	4b04      	ldr	r3, [pc, #16]	; (10000878 <__wrap___aeabi_dmul+0x14>)
10000868:	689b      	ldr	r3, [r3, #8]
1000086a:	46fc      	mov	ip, pc
1000086c:	9301      	str	r3, [sp, #4]
1000086e:	bd08      	pop	{r3, pc}
10000870:	0b09df08 	.word	0x0b09df08
10000874:	00001000 	.word	0x00001000
10000878:	20003418 	.word	0x20003418

1000087c <__wrap___aeabi_cdrcmple>:
1000087c:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
1000087e:	4050      	eors	r0, r2
10000880:	4042      	eors	r2, r0
10000882:	4050      	eors	r0, r2
10000884:	4059      	eors	r1, r3
10000886:	404b      	eors	r3, r1
10000888:	4059      	eors	r1, r3
1000088a:	e000      	b.n	1000088e <__aeabi_dfcmple_guts>

1000088c <__wrap___aeabi_cdcmpeq>:
1000088c:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}

1000088e <__aeabi_dfcmple_guts>:
1000088e:	4f15      	ldr	r7, [pc, #84]	; (100008e4 <__aeabi_dfcmple_guts+0x56>)
10000890:	004c      	lsls	r4, r1, #1
10000892:	0d64      	lsrs	r4, r4, #21
10000894:	d003      	beq.n	1000089e <__aeabi_dfcmple_guts+0x10>
10000896:	42bc      	cmp	r4, r7
10000898:	d104      	bne.n	100008a4 <__aeabi_dfcmple_guts+0x16>
1000089a:	030c      	lsls	r4, r1, #12
1000089c:	d814      	bhi.n	100008c8 <__aeabi_dfcmple_guts+0x3a>
1000089e:	2000      	movs	r0, #0
100008a0:	0d09      	lsrs	r1, r1, #20
100008a2:	0509      	lsls	r1, r1, #20
100008a4:	005c      	lsls	r4, r3, #1
100008a6:	0d64      	lsrs	r4, r4, #21
100008a8:	d003      	beq.n	100008b2 <__aeabi_dfcmple_guts+0x24>
100008aa:	42bc      	cmp	r4, r7
100008ac:	d104      	bne.n	100008b8 <__aeabi_dfcmple_guts+0x2a>
100008ae:	031c      	lsls	r4, r3, #12
100008b0:	d80a      	bhi.n	100008c8 <__aeabi_dfcmple_guts+0x3a>
100008b2:	2200      	movs	r2, #0
100008b4:	0d1b      	lsrs	r3, r3, #20
100008b6:	051b      	lsls	r3, r3, #20
100008b8:	2601      	movs	r6, #1
100008ba:	404b      	eors	r3, r1
100008bc:	d409      	bmi.n	100008d2 <__aeabi_dfcmple_guts+0x44>
100008be:	404b      	eors	r3, r1
100008c0:	d503      	bpl.n	100008ca <__aeabi_dfcmple_guts+0x3c>
100008c2:	428b      	cmp	r3, r1
100008c4:	d100      	bne.n	100008c8 <__aeabi_dfcmple_guts+0x3a>
100008c6:	4282      	cmp	r2, r0
100008c8:	bdff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7, pc}
100008ca:	4299      	cmp	r1, r3
100008cc:	d1fc      	bne.n	100008c8 <__aeabi_dfcmple_guts+0x3a>
100008ce:	4290      	cmp	r0, r2
100008d0:	bdff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7, pc}
100008d2:	430b      	orrs	r3, r1
100008d4:	18db      	adds	r3, r3, r3
100008d6:	4303      	orrs	r3, r0
100008d8:	4313      	orrs	r3, r2
100008da:	d0f5      	beq.n	100008c8 <__aeabi_dfcmple_guts+0x3a>
100008dc:	43c9      	mvns	r1, r1
100008de:	1849      	adds	r1, r1, r1
100008e0:	bdff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7, pc}
100008e2:	0000      	.short	0x0000
100008e4:	000007ff 	.word	0x000007ff

100008e8 <__wrap___aeabi_dcmplt>:
100008e8:	b500      	push	{lr}
100008ea:	f7ff ffcf 	bl	1000088c <__wrap___aeabi_cdcmpeq>
100008ee:	4180      	sbcs	r0, r0
100008f0:	bd00      	pop	{pc}
100008f2:	46c0      	nop			; (mov r8, r8)

100008f4 <__wrap___aeabi_dcmpge>:
100008f4:	b500      	push	{lr}
100008f6:	f7ff ffc1 	bl	1000087c <__wrap___aeabi_cdrcmple>
100008fa:	d901      	bls.n	10000900 <__wrap___aeabi_dcmpge+0xc>
100008fc:	2000      	movs	r0, #0
100008fe:	bd00      	pop	{pc}
10000900:	2001      	movs	r0, #1
10000902:	bd00      	pop	{pc}

10000904 <__wrap___aeabi_dcmpgt>:
10000904:	b500      	push	{lr}
10000906:	f7ff ffb9 	bl	1000087c <__wrap___aeabi_cdrcmple>
1000090a:	4180      	sbcs	r0, r0
1000090c:	bd00      	pop	{pc}

1000090e <__wrap___aeabi_d2iz>:
1000090e:	b510      	push	{r4, lr}
10000910:	004c      	lsls	r4, r1, #1
10000912:	0d62      	lsrs	r2, r4, #21
10000914:	2380      	movs	r3, #128	; 0x80
10000916:	18d2      	adds	r2, r2, r3
10000918:	00db      	lsls	r3, r3, #3
1000091a:	1ad2      	subs	r2, r2, r3
1000091c:	055b      	lsls	r3, r3, #21
1000091e:	2a7e      	cmp	r2, #126	; 0x7e
10000920:	dd10      	ble.n	10000944 <__wrap___aeabi_d2iz+0x36>
10000922:	3a9e      	subs	r2, #158	; 0x9e
10000924:	da13      	bge.n	1000094e <__wrap___aeabi_d2iz+0x40>
10000926:	17cc      	asrs	r4, r1, #31
10000928:	0309      	lsls	r1, r1, #12
1000092a:	0849      	lsrs	r1, r1, #1
1000092c:	4319      	orrs	r1, r3
1000092e:	4252      	negs	r2, r2
10000930:	40d1      	lsrs	r1, r2
10000932:	0064      	lsls	r4, r4, #1
10000934:	3401      	adds	r4, #1
10000936:	3215      	adds	r2, #21
10000938:	2a20      	cmp	r2, #32
1000093a:	da05      	bge.n	10000948 <__wrap___aeabi_d2iz+0x3a>
1000093c:	40d0      	lsrs	r0, r2
1000093e:	4308      	orrs	r0, r1
10000940:	4360      	muls	r0, r4
10000942:	bd10      	pop	{r4, pc}
10000944:	2000      	movs	r0, #0
10000946:	bd10      	pop	{r4, pc}
10000948:	4608      	mov	r0, r1
1000094a:	4360      	muls	r0, r4
1000094c:	bd10      	pop	{r4, pc}
1000094e:	0fc8      	lsrs	r0, r1, #31
10000950:	18c0      	adds	r0, r0, r3
10000952:	3801      	subs	r0, #1
10000954:	bd10      	pop	{r4, pc}
	...

10000958 <__wrap___aeabi_d2f>:
10000958:	b418      	push	{r3, r4}
1000095a:	4b04      	ldr	r3, [pc, #16]	; (1000096c <__wrap___aeabi_d2f+0x14>)
1000095c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1000095e:	46fc      	mov	ip, pc
10000960:	9301      	str	r3, [sp, #4]
10000962:	bd08      	pop	{r3, pc}
10000964:	0e15df7c 	.word	0x0e15df7c
10000968:	00001000 	.word	0x00001000
1000096c:	20003418 	.word	0x20003418

10000970 <double_table_shim_on_use_helper>:
10000970:	b507      	push	{r0, r1, r2, lr}
10000972:	4660      	mov	r0, ip
10000974:	8801      	ldrh	r1, [r0, #0]
10000976:	0a0a      	lsrs	r2, r1, #8
10000978:	3002      	adds	r0, #2
1000097a:	2adf      	cmp	r2, #223	; 0xdf
1000097c:	d1fa      	bne.n	10000974 <double_table_shim_on_use_helper+0x4>
1000097e:	b2c9      	uxtb	r1, r1
10000980:	0882      	lsrs	r2, r0, #2
10000982:	d304      	bcc.n	1000098e <double_table_shim_on_use_helper+0x1e>
10000984:	8802      	ldrh	r2, [r0, #0]
10000986:	8840      	ldrh	r0, [r0, #2]
10000988:	0400      	lsls	r0, r0, #16
1000098a:	4310      	orrs	r0, r2
1000098c:	e000      	b.n	10000990 <double_table_shim_on_use_helper+0x20>
1000098e:	6800      	ldr	r0, [r0, #0]
10000990:	4a01      	ldr	r2, [pc, #4]	; (10000998 <double_table_shim_on_use_helper+0x28>)
10000992:	5050      	str	r0, [r2, r1]
10000994:	9003      	str	r0, [sp, #12]
10000996:	bd07      	pop	{r0, r1, r2, pc}
10000998:	20003418 	.word	0x20003418

1000099c <drsub_shim>:
1000099c:	b40f      	push	{r0, r1, r2, r3}
1000099e:	bc03      	pop	{r0, r1}
100009a0:	bc0c      	pop	{r2, r3}

100009a2 <dsub_shim>:
100009a2:	b5f0      	push	{r4, r5, r6, r7, lr}
100009a4:	2401      	movs	r4, #1
100009a6:	07e4      	lsls	r4, r4, #31
100009a8:	4063      	eors	r3, r4
100009aa:	e000      	b.n	100009ae <da_entry>

100009ac <dadd_shim>:
100009ac:	b5f0      	push	{r4, r5, r6, r7, lr}

100009ae <da_entry>:
100009ae:	0d0c      	lsrs	r4, r1, #20
100009b0:	0fcf      	lsrs	r7, r1, #31
100009b2:	1e66      	subs	r6, r4, #1
100009b4:	0536      	lsls	r6, r6, #20
100009b6:	1b89      	subs	r1, r1, r6
100009b8:	0564      	lsls	r4, r4, #21
100009ba:	d303      	bcc.n	100009c4 <l7_1>
100009bc:	43c9      	mvns	r1, r1
100009be:	4240      	negs	r0, r0
100009c0:	d300      	bcc.n	100009c4 <l7_1>
100009c2:	3101      	adds	r1, #1

100009c4 <l7_1>:
100009c4:	0d64      	lsrs	r4, r4, #21
100009c6:	d003      	beq.n	100009d0 <l7_2>
100009c8:	1c66      	adds	r6, r4, #1
100009ca:	0af6      	lsrs	r6, r6, #11
100009cc:	d007      	beq.n	100009de <l7_3>
100009ce:	1be4      	subs	r4, r4, r7

100009d0 <l7_2>:
100009d0:	2000      	movs	r0, #0
100009d2:	007f      	lsls	r7, r7, #1
100009d4:	1c79      	adds	r1, r7, #1
100009d6:	0789      	lsls	r1, r1, #30
100009d8:	1289      	asrs	r1, r1, #10
100009da:	3c80      	subs	r4, #128	; 0x80
100009dc:	0324      	lsls	r4, r4, #12

100009de <l7_3>:
100009de:	0d1d      	lsrs	r5, r3, #20
100009e0:	0fdf      	lsrs	r7, r3, #31
100009e2:	1e6e      	subs	r6, r5, #1
100009e4:	0536      	lsls	r6, r6, #20
100009e6:	1b9b      	subs	r3, r3, r6
100009e8:	056d      	lsls	r5, r5, #21
100009ea:	d303      	bcc.n	100009f4 <l8_1>
100009ec:	43db      	mvns	r3, r3
100009ee:	4252      	negs	r2, r2
100009f0:	d300      	bcc.n	100009f4 <l8_1>
100009f2:	3301      	adds	r3, #1

100009f4 <l8_1>:
100009f4:	0d6d      	lsrs	r5, r5, #21
100009f6:	d003      	beq.n	10000a00 <l8_2>
100009f8:	1c6e      	adds	r6, r5, #1
100009fa:	0af6      	lsrs	r6, r6, #11
100009fc:	d007      	beq.n	10000a0e <l8_3>
100009fe:	1bed      	subs	r5, r5, r7

10000a00 <l8_2>:
10000a00:	2200      	movs	r2, #0
10000a02:	007f      	lsls	r7, r7, #1
10000a04:	1c7b      	adds	r3, r7, #1
10000a06:	079b      	lsls	r3, r3, #30
10000a08:	129b      	asrs	r3, r3, #10
10000a0a:	3d80      	subs	r5, #128	; 0x80
10000a0c:	032d      	lsls	r5, r5, #12

10000a0e <l8_3>:
10000a0e:	1b2f      	subs	r7, r5, r4
10000a10:	1b66      	subs	r6, r4, r5
10000a12:	d458      	bmi.n	10000ac6 <da_ygtx>
10000a14:	46a4      	mov	ip, r4
10000a16:	2e20      	cmp	r6, #32
10000a18:	da46      	bge.n	10000aa8 <da_xrgty>
10000a1a:	3720      	adds	r7, #32
10000a1c:	0014      	movs	r4, r2
10000a1e:	40bc      	lsls	r4, r7

10000a20 <da_xgty0>:
10000a20:	001d      	movs	r5, r3
10000a22:	40bd      	lsls	r5, r7
10000a24:	40f2      	lsrs	r2, r6
10000a26:	4133      	asrs	r3, r6
10000a28:	432a      	orrs	r2, r5

10000a2a <da_add>:
10000a2a:	1880      	adds	r0, r0, r2
10000a2c:	4159      	adcs	r1, r3

10000a2e <da_pack>:
10000a2e:	0fcb      	lsrs	r3, r1, #31
10000a30:	d005      	beq.n	10000a3e <da_pack+0x10>
10000a32:	43c9      	mvns	r1, r1
10000a34:	43c0      	mvns	r0, r0
10000a36:	2200      	movs	r2, #0
10000a38:	4264      	negs	r4, r4
10000a3a:	4150      	adcs	r0, r2
10000a3c:	4151      	adcs	r1, r2
10000a3e:	4662      	mov	r2, ip
10000a40:	0d4d      	lsrs	r5, r1, #21
10000a42:	d128      	bne.n	10000a96 <da_0>
10000a44:	0d0d      	lsrs	r5, r1, #20
10000a46:	d107      	bne.n	10000a58 <da_1>
10000a48:	2800      	cmp	r0, #0
10000a4a:	d01f      	beq.n	10000a8c <da_5>

10000a4c <da_2>:
10000a4c:	1924      	adds	r4, r4, r4
10000a4e:	4140      	adcs	r0, r0
10000a50:	4149      	adcs	r1, r1
10000a52:	3a01      	subs	r2, #1
10000a54:	0d0d      	lsrs	r5, r1, #20
10000a56:	d0f9      	beq.n	10000a4c <da_2>

10000a58 <da_1>:
10000a58:	0064      	lsls	r4, r4, #1
10000a5a:	d306      	bcc.n	10000a6a <da_3>

10000a5c <da_4>:
10000a5c:	3001      	adds	r0, #1
10000a5e:	d300      	bcc.n	10000a62 <da_4+0x6>
10000a60:	3101      	adds	r1, #1
10000a62:	2c00      	cmp	r4, #0
10000a64:	d101      	bne.n	10000a6a <da_3>
10000a66:	0840      	lsrs	r0, r0, #1
10000a68:	0040      	lsls	r0, r0, #1

10000a6a <da_3>:
10000a6a:	3a01      	subs	r2, #1
10000a6c:	d40b      	bmi.n	10000a86 <da_6>
10000a6e:	1c94      	adds	r4, r2, #2
10000a70:	0ae4      	lsrs	r4, r4, #11
10000a72:	d104      	bne.n	10000a7e <da_7>
10000a74:	0512      	lsls	r2, r2, #20
10000a76:	4411      	add	r1, r2
10000a78:	07db      	lsls	r3, r3, #31
10000a7a:	4419      	add	r1, r3
10000a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000a7e <da_7>:
10000a7e:	07d9      	lsls	r1, r3, #31
10000a80:	4b20      	ldr	r3, [pc, #128]	; (10000b04 <da_xmgty+0x4>)
10000a82:	4319      	orrs	r1, r3
10000a84:	e000      	b.n	10000a88 <da_6+0x2>

10000a86 <da_6>:
10000a86:	07d9      	lsls	r1, r3, #31
10000a88:	2000      	movs	r0, #0
10000a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000a8c <da_5>:
10000a8c:	2900      	cmp	r1, #0
10000a8e:	d1dd      	bne.n	10000a4c <da_2>
10000a90:	2c00      	cmp	r4, #0
10000a92:	d1db      	bne.n	10000a4c <da_2>
10000a94:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000a96 <da_0>:
10000a96:	3201      	adds	r2, #1
10000a98:	07c6      	lsls	r6, r0, #31
10000a9a:	0840      	lsrs	r0, r0, #1
10000a9c:	07cd      	lsls	r5, r1, #31
10000a9e:	4328      	orrs	r0, r5
10000aa0:	0849      	lsrs	r1, r1, #1
10000aa2:	2e00      	cmp	r6, #0
10000aa4:	d0e1      	beq.n	10000a6a <da_3>
10000aa6:	e7d9      	b.n	10000a5c <da_4>

10000aa8 <da_xrgty>:
10000aa8:	2e3c      	cmp	r6, #60	; 0x3c
10000aaa:	da29      	bge.n	10000b00 <da_xmgty>
10000aac:	3e20      	subs	r6, #32
10000aae:	3740      	adds	r7, #64	; 0x40
10000ab0:	0014      	movs	r4, r2
10000ab2:	40bc      	lsls	r4, r7
10000ab4:	d000      	beq.n	10000ab8 <da_xrgty+0x10>
10000ab6:	2401      	movs	r4, #1
10000ab8:	40f2      	lsrs	r2, r6
10000aba:	4314      	orrs	r4, r2
10000abc:	001a      	movs	r2, r3
10000abe:	40bb      	lsls	r3, r7
10000ac0:	431c      	orrs	r4, r3
10000ac2:	17d3      	asrs	r3, r2, #31
10000ac4:	e7ac      	b.n	10000a20 <da_xgty0>

10000ac6 <da_ygtx>:
10000ac6:	46ac      	mov	ip, r5
10000ac8:	2f20      	cmp	r7, #32
10000aca:	da08      	bge.n	10000ade <da_yrgtx>
10000acc:	3620      	adds	r6, #32
10000ace:	0004      	movs	r4, r0
10000ad0:	40b4      	lsls	r4, r6

10000ad2 <da_ygtx0>:
10000ad2:	000d      	movs	r5, r1
10000ad4:	40b5      	lsls	r5, r6
10000ad6:	40f8      	lsrs	r0, r7
10000ad8:	4139      	asrs	r1, r7
10000ada:	4328      	orrs	r0, r5
10000adc:	e7a5      	b.n	10000a2a <da_add>

10000ade <da_yrgtx>:
10000ade:	2f3c      	cmp	r7, #60	; 0x3c
10000ae0:	da0c      	bge.n	10000afc <da_ymgtx>
10000ae2:	3f20      	subs	r7, #32
10000ae4:	3640      	adds	r6, #64	; 0x40
10000ae6:	0004      	movs	r4, r0
10000ae8:	40b4      	lsls	r4, r6
10000aea:	d000      	beq.n	10000aee <da_yrgtx+0x10>
10000aec:	2401      	movs	r4, #1
10000aee:	40f8      	lsrs	r0, r7
10000af0:	4304      	orrs	r4, r0
10000af2:	0008      	movs	r0, r1
10000af4:	40b1      	lsls	r1, r6
10000af6:	430c      	orrs	r4, r1
10000af8:	17c1      	asrs	r1, r0, #31
10000afa:	e7ea      	b.n	10000ad2 <da_ygtx0>

10000afc <da_ymgtx>:
10000afc:	0010      	movs	r0, r2
10000afe:	0019      	movs	r1, r3

10000b00 <da_xmgty>:
10000b00:	2400      	movs	r4, #0
10000b02:	e794      	b.n	10000a2e <da_pack>
10000b04:	7ff00000 	.word	0x7ff00000

10000b08 <dmul_shim>:
10000b08:	b5f0      	push	{r4, r5, r6, r7, lr}
10000b0a:	0d0c      	lsrs	r4, r1, #20
10000b0c:	1e66      	subs	r6, r4, #1
10000b0e:	0536      	lsls	r6, r6, #20
10000b10:	1b89      	subs	r1, r1, r6
10000b12:	0ae6      	lsrs	r6, r4, #11
10000b14:	0564      	lsls	r4, r4, #21
10000b16:	0d64      	lsrs	r4, r4, #21
10000b18:	d002      	beq.n	10000b20 <l11_1>
10000b1a:	1c65      	adds	r5, r4, #1
10000b1c:	0aed      	lsrs	r5, r5, #11
10000b1e:	d004      	beq.n	10000b2a <l11_2>

10000b20 <l11_1>:
10000b20:	2000      	movs	r0, #0
10000b22:	2101      	movs	r1, #1
10000b24:	0509      	lsls	r1, r1, #20
10000b26:	3c80      	subs	r4, #128	; 0x80
10000b28:	0324      	lsls	r4, r4, #12

10000b2a <l11_2>:
10000b2a:	46a4      	mov	ip, r4
10000b2c:	0d1c      	lsrs	r4, r3, #20
10000b2e:	1e67      	subs	r7, r4, #1
10000b30:	053f      	lsls	r7, r7, #20
10000b32:	1bdb      	subs	r3, r3, r7
10000b34:	0ae7      	lsrs	r7, r4, #11
10000b36:	0564      	lsls	r4, r4, #21
10000b38:	0d64      	lsrs	r4, r4, #21
10000b3a:	d002      	beq.n	10000b42 <l12_1>
10000b3c:	1c65      	adds	r5, r4, #1
10000b3e:	0aed      	lsrs	r5, r5, #11
10000b40:	d004      	beq.n	10000b4c <l12_2>

10000b42 <l12_1>:
10000b42:	2200      	movs	r2, #0
10000b44:	2301      	movs	r3, #1
10000b46:	051b      	lsls	r3, r3, #20
10000b48:	3c80      	subs	r4, #128	; 0x80
10000b4a:	0324      	lsls	r4, r4, #12

10000b4c <l12_2>:
10000b4c:	4077      	eors	r7, r6
10000b4e:	4464      	add	r4, ip
10000b50:	b497      	push	{r0, r1, r2, r4, r7}
10000b52:	b284      	uxth	r4, r0
10000b54:	b296      	uxth	r6, r2
10000b56:	4374      	muls	r4, r6
10000b58:	0c07      	lsrs	r7, r0, #16
10000b5a:	437e      	muls	r6, r7
10000b5c:	0c15      	lsrs	r5, r2, #16
10000b5e:	436f      	muls	r7, r5
10000b60:	b280      	uxth	r0, r0
10000b62:	4368      	muls	r0, r5
10000b64:	1836      	adds	r6, r6, r0
10000b66:	d302      	bcc.n	10000b6e <l13_1>
10000b68:	2001      	movs	r0, #1
10000b6a:	0400      	lsls	r0, r0, #16
10000b6c:	183f      	adds	r7, r7, r0

10000b6e <l13_1>:
10000b6e:	0430      	lsls	r0, r6, #16
10000b70:	0c35      	lsrs	r5, r6, #16
10000b72:	1900      	adds	r0, r0, r4
10000b74:	417d      	adcs	r5, r7
10000b76:	4684      	mov	ip, r0
10000b78:	b288      	uxth	r0, r1
10000b7a:	b29a      	uxth	r2, r3
10000b7c:	4350      	muls	r0, r2
10000b7e:	0c0c      	lsrs	r4, r1, #16
10000b80:	4362      	muls	r2, r4
10000b82:	0c1f      	lsrs	r7, r3, #16
10000b84:	437c      	muls	r4, r7
10000b86:	b28e      	uxth	r6, r1
10000b88:	437e      	muls	r6, r7
10000b8a:	1992      	adds	r2, r2, r6
10000b8c:	d302      	bcc.n	10000b94 <l14_1>
10000b8e:	2601      	movs	r6, #1
10000b90:	0436      	lsls	r6, r6, #16
10000b92:	19a4      	adds	r4, r4, r6

10000b94 <l14_1>:
10000b94:	0416      	lsls	r6, r2, #16
10000b96:	0c17      	lsrs	r7, r2, #16
10000b98:	1836      	adds	r6, r6, r0
10000b9a:	4167      	adcs	r7, r4
10000b9c:	bc01      	pop	{r0}
10000b9e:	b281      	uxth	r1, r0
10000ba0:	b29a      	uxth	r2, r3
10000ba2:	4351      	muls	r1, r2
10000ba4:	0c04      	lsrs	r4, r0, #16
10000ba6:	4362      	muls	r2, r4
10000ba8:	0c1b      	lsrs	r3, r3, #16
10000baa:	435c      	muls	r4, r3
10000bac:	b280      	uxth	r0, r0
10000bae:	4358      	muls	r0, r3
10000bb0:	1812      	adds	r2, r2, r0
10000bb2:	d302      	bcc.n	10000bba <l15_1>
10000bb4:	2001      	movs	r0, #1
10000bb6:	0400      	lsls	r0, r0, #16
10000bb8:	1824      	adds	r4, r4, r0

10000bba <l15_1>:
10000bba:	0410      	lsls	r0, r2, #16
10000bbc:	0c13      	lsrs	r3, r2, #16
10000bbe:	1840      	adds	r0, r0, r1
10000bc0:	4163      	adcs	r3, r4
10000bc2:	182d      	adds	r5, r5, r0
10000bc4:	415e      	adcs	r6, r3
10000bc6:	2000      	movs	r0, #0
10000bc8:	4147      	adcs	r7, r0
10000bca:	bc06      	pop	{r1, r2}
10000bcc:	b288      	uxth	r0, r1
10000bce:	b293      	uxth	r3, r2
10000bd0:	4358      	muls	r0, r3
10000bd2:	0c0c      	lsrs	r4, r1, #16
10000bd4:	4363      	muls	r3, r4
10000bd6:	0c12      	lsrs	r2, r2, #16
10000bd8:	4354      	muls	r4, r2
10000bda:	b289      	uxth	r1, r1
10000bdc:	4351      	muls	r1, r2
10000bde:	185b      	adds	r3, r3, r1
10000be0:	d302      	bcc.n	10000be8 <l16_1>
10000be2:	2101      	movs	r1, #1
10000be4:	0409      	lsls	r1, r1, #16
10000be6:	1864      	adds	r4, r4, r1

10000be8 <l16_1>:
10000be8:	0419      	lsls	r1, r3, #16
10000bea:	0c1a      	lsrs	r2, r3, #16
10000bec:	1809      	adds	r1, r1, r0
10000bee:	4162      	adcs	r2, r4
10000bf0:	186d      	adds	r5, r5, r1
10000bf2:	4156      	adcs	r6, r2
10000bf4:	2000      	movs	r0, #0
10000bf6:	4147      	adcs	r7, r0
10000bf8:	bc18      	pop	{r3, r4}
10000bfa:	02f9      	lsls	r1, r7, #11
10000bfc:	0d72      	lsrs	r2, r6, #21
10000bfe:	4311      	orrs	r1, r2
10000c00:	02f0      	lsls	r0, r6, #11
10000c02:	0d6a      	lsrs	r2, r5, #21
10000c04:	4310      	orrs	r0, r2
10000c06:	02ed      	lsls	r5, r5, #11
10000c08:	0d0a      	lsrs	r2, r1, #20
10000c0a:	d103      	bne.n	10000c14 <l16_1+0x2c>
10000c0c:	196d      	adds	r5, r5, r5
10000c0e:	4140      	adcs	r0, r0
10000c10:	4149      	adcs	r1, r1
10000c12:	3b01      	subs	r3, #1
10000c14:	4e12      	ldr	r6, [pc, #72]	; (10000c60 <dm_1+0xa>)
10000c16:	1b9b      	subs	r3, r3, r6
10000c18:	0076      	lsls	r6, r6, #1
10000c1a:	42b3      	cmp	r3, r6
10000c1c:	d20e      	bcs.n	10000c3c <dm_0>
10000c1e:	006d      	lsls	r5, r5, #1
10000c20:	d307      	bcc.n	10000c32 <l16_1+0x4a>
10000c22:	3001      	adds	r0, #1
10000c24:	2600      	movs	r6, #0
10000c26:	4171      	adcs	r1, r6
10000c28:	4666      	mov	r6, ip
10000c2a:	4335      	orrs	r5, r6
10000c2c:	d101      	bne.n	10000c32 <l16_1+0x4a>
10000c2e:	0840      	lsrs	r0, r0, #1
10000c30:	0040      	lsls	r0, r0, #1
10000c32:	051b      	lsls	r3, r3, #20
10000c34:	18c9      	adds	r1, r1, r3

10000c36 <dm_2>:
10000c36:	07e4      	lsls	r4, r4, #31
10000c38:	4421      	add	r1, r4
10000c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000c3c <dm_0>:
10000c3c:	da0b      	bge.n	10000c56 <dm_1>
10000c3e:	3301      	adds	r3, #1
10000c40:	d106      	bne.n	10000c50 <dm_0+0x14>
10000c42:	3001      	adds	r0, #1
10000c44:	d104      	bne.n	10000c50 <dm_0+0x14>
10000c46:	3101      	adds	r1, #1
10000c48:	0d4f      	lsrs	r7, r1, #21
10000c4a:	d001      	beq.n	10000c50 <dm_0+0x14>
10000c4c:	0849      	lsrs	r1, r1, #1
10000c4e:	e7f2      	b.n	10000c36 <dm_2>
10000c50:	07e1      	lsls	r1, r4, #31
10000c52:	2000      	movs	r0, #0
10000c54:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000c56 <dm_1>:
10000c56:	3601      	adds	r6, #1
10000c58:	0531      	lsls	r1, r6, #20
10000c5a:	2000      	movs	r0, #0
10000c5c:	e7eb      	b.n	10000c36 <dm_2>
10000c5e:	0000      	.short	0x0000
10000c60:	000003ff 	.word	0x000003ff

10000c64 <ddiv_shim>:
10000c64:	b5f0      	push	{r4, r5, r6, r7, lr}

10000c66 <ddiv0>:
10000c66:	0d1c      	lsrs	r4, r3, #20
10000c68:	1e67      	subs	r7, r4, #1
10000c6a:	053f      	lsls	r7, r7, #20
10000c6c:	1bdb      	subs	r3, r3, r7
10000c6e:	0ae7      	lsrs	r7, r4, #11
10000c70:	0564      	lsls	r4, r4, #21
10000c72:	0d64      	lsrs	r4, r4, #21
10000c74:	d002      	beq.n	10000c7c <l19_1>
10000c76:	1c66      	adds	r6, r4, #1
10000c78:	0af6      	lsrs	r6, r6, #11
10000c7a:	d004      	beq.n	10000c86 <l19_2>

10000c7c <l19_1>:
10000c7c:	2200      	movs	r2, #0
10000c7e:	2301      	movs	r3, #1
10000c80:	051b      	lsls	r3, r3, #20
10000c82:	3c80      	subs	r4, #128	; 0x80
10000c84:	0324      	lsls	r4, r4, #12

10000c86 <l19_2>:
10000c86:	25d0      	movs	r5, #208	; 0xd0
10000c88:	062d      	lsls	r5, r5, #24
10000c8a:	2600      	movs	r6, #0
10000c8c:	43f6      	mvns	r6, r6
10000c8e:	662e      	str	r6, [r5, #96]	; 0x60
10000c90:	091e      	lsrs	r6, r3, #4
10000c92:	666e      	str	r6, [r5, #100]	; 0x64
10000c94:	0fce      	lsrs	r6, r1, #31
10000c96:	19f6      	adds	r6, r6, r7
10000c98:	46b4      	mov	ip, r6
10000c9a:	0049      	lsls	r1, r1, #1
10000c9c:	0d4f      	lsrs	r7, r1, #21
10000c9e:	d002      	beq.n	10000ca6 <l19_2+0x20>
10000ca0:	1c7e      	adds	r6, r7, #1
10000ca2:	0af6      	lsrs	r6, r6, #11
10000ca4:	d003      	beq.n	10000cae <l19_2+0x28>
10000ca6:	2000      	movs	r0, #0
10000ca8:	2100      	movs	r1, #0
10000caa:	3f40      	subs	r7, #64	; 0x40
10000cac:	033f      	lsls	r7, r7, #12
10000cae:	1b3e      	subs	r6, r7, r4
10000cb0:	00b6      	lsls	r6, r6, #2
10000cb2:	44b4      	add	ip, r6
10000cb4:	3f01      	subs	r7, #1
10000cb6:	057f      	lsls	r7, r7, #21
10000cb8:	1bc9      	subs	r1, r1, r7
10000cba:	0849      	lsrs	r1, r1, #1
10000cbc:	6f2e      	ldr	r6, [r5, #112]	; 0x70
10000cbe:	3601      	adds	r6, #1
10000cc0:	0876      	lsrs	r6, r6, #1
10000cc2:	029c      	lsls	r4, r3, #10
10000cc4:	0d95      	lsrs	r5, r2, #22
10000cc6:	4325      	orrs	r5, r4
10000cc8:	4375      	muls	r5, r6
10000cca:	13ed      	asrs	r5, r5, #15
10000ccc:	4375      	muls	r5, r6
10000cce:	13ad      	asrs	r5, r5, #14
10000cd0:	3501      	adds	r5, #1
10000cd2:	106d      	asrs	r5, r5, #1
10000cd4:	03f6      	lsls	r6, r6, #15
10000cd6:	1b76      	subs	r6, r6, r5
10000cd8:	b40c      	push	{r2, r3}
10000cda:	02cc      	lsls	r4, r1, #11
10000cdc:	0d45      	lsrs	r5, r0, #21
10000cde:	432c      	orrs	r4, r5
10000ce0:	b2a2      	uxth	r2, r4
10000ce2:	b2b3      	uxth	r3, r6
10000ce4:	435a      	muls	r2, r3
10000ce6:	0c27      	lsrs	r7, r4, #16
10000ce8:	437b      	muls	r3, r7
10000cea:	0c35      	lsrs	r5, r6, #16
10000cec:	436f      	muls	r7, r5
10000cee:	b2a4      	uxth	r4, r4
10000cf0:	436c      	muls	r4, r5
10000cf2:	191b      	adds	r3, r3, r4
10000cf4:	d302      	bcc.n	10000cfc <l20_1>
10000cf6:	2401      	movs	r4, #1
10000cf8:	0424      	lsls	r4, r4, #16
10000cfa:	193f      	adds	r7, r7, r4

10000cfc <l20_1>:
10000cfc:	041c      	lsls	r4, r3, #16
10000cfe:	0c1d      	lsrs	r5, r3, #16
10000d00:	18a4      	adds	r4, r4, r2
10000d02:	417d      	adcs	r5, r7
10000d04:	1924      	adds	r4, r4, r4
10000d06:	416d      	adcs	r5, r5
10000d08:	9a00      	ldr	r2, [sp, #0]
10000d0a:	b291      	uxth	r1, r2
10000d0c:	b2ac      	uxth	r4, r5
10000d0e:	4361      	muls	r1, r4
10000d10:	0c17      	lsrs	r7, r2, #16
10000d12:	437c      	muls	r4, r7
10000d14:	0c2b      	lsrs	r3, r5, #16
10000d16:	435f      	muls	r7, r3
10000d18:	b292      	uxth	r2, r2
10000d1a:	435a      	muls	r2, r3
10000d1c:	18a4      	adds	r4, r4, r2
10000d1e:	d302      	bcc.n	10000d26 <l21_1>
10000d20:	2201      	movs	r2, #1
10000d22:	0412      	lsls	r2, r2, #16
10000d24:	18bf      	adds	r7, r7, r2

10000d26 <l21_1>:
10000d26:	0422      	lsls	r2, r4, #16
10000d28:	0c23      	lsrs	r3, r4, #16
10000d2a:	1852      	adds	r2, r2, r1
10000d2c:	417b      	adcs	r3, r7
10000d2e:	9c01      	ldr	r4, [sp, #4]
10000d30:	436c      	muls	r4, r5
10000d32:	191b      	adds	r3, r3, r4
10000d34:	0e52      	lsrs	r2, r2, #25
10000d36:	01d9      	lsls	r1, r3, #7
10000d38:	430a      	orrs	r2, r1
10000d3a:	0144      	lsls	r4, r0, #5
10000d3c:	1aa0      	subs	r0, r4, r2
10000d3e:	b281      	uxth	r1, r0
10000d40:	b2b2      	uxth	r2, r6
10000d42:	4351      	muls	r1, r2
10000d44:	1403      	asrs	r3, r0, #16
10000d46:	435a      	muls	r2, r3
10000d48:	0c36      	lsrs	r6, r6, #16
10000d4a:	4373      	muls	r3, r6
10000d4c:	b287      	uxth	r7, r0
10000d4e:	4377      	muls	r7, r6
10000d50:	17d6      	asrs	r6, r2, #31
10000d52:	19d2      	adds	r2, r2, r7
10000d54:	2700      	movs	r7, #0
10000d56:	417e      	adcs	r6, r7
10000d58:	0436      	lsls	r6, r6, #16
10000d5a:	199b      	adds	r3, r3, r6
10000d5c:	0417      	lsls	r7, r2, #16
10000d5e:	0c16      	lsrs	r6, r2, #16
10000d60:	187f      	adds	r7, r7, r1
10000d62:	415e      	adcs	r6, r3
10000d64:	1673      	asrs	r3, r6, #25
10000d66:	18ed      	adds	r5, r5, r3
10000d68:	01f3      	lsls	r3, r6, #7
10000d6a:	2600      	movs	r6, #0
10000d6c:	3380      	adds	r3, #128	; 0x80
10000d6e:	4175      	adcs	r5, r6
10000d70:	0fa9      	lsrs	r1, r5, #30
10000d72:	d106      	bne.n	10000d82 <dd_0>
10000d74:	0064      	lsls	r4, r4, #1
10000d76:	0a69      	lsrs	r1, r5, #9
10000d78:	05e8      	lsls	r0, r5, #23
10000d7a:	0a5b      	lsrs	r3, r3, #9
10000d7c:	4318      	orrs	r0, r3
10000d7e:	d209      	bcs.n	10000d94 <dd_1>
10000d80:	e02f      	b.n	10000de2 <dd_2>

10000d82 <dd_0>:
10000d82:	2204      	movs	r2, #4
10000d84:	4494      	add	ip, r2
10000d86:	3380      	adds	r3, #128	; 0x80
10000d88:	4175      	adcs	r5, r6
10000d8a:	0aa9      	lsrs	r1, r5, #10
10000d8c:	05a8      	lsls	r0, r5, #22
10000d8e:	0a9b      	lsrs	r3, r3, #10
10000d90:	4318      	orrs	r0, r3
10000d92:	d326      	bcc.n	10000de2 <dd_2>

10000d94 <dd_1>:
10000d94:	4140      	adcs	r0, r0
10000d96:	4149      	adcs	r1, r1
10000d98:	0424      	lsls	r4, r4, #16
10000d9a:	9a00      	ldr	r2, [sp, #0]
10000d9c:	9b01      	ldr	r3, [sp, #4]
10000d9e:	000d      	movs	r5, r1
10000da0:	4355      	muls	r5, r2
10000da2:	1b64      	subs	r4, r4, r5
10000da4:	4343      	muls	r3, r0
10000da6:	1ae4      	subs	r4, r4, r3
10000da8:	b295      	uxth	r5, r2
10000daa:	b286      	uxth	r6, r0
10000dac:	4375      	muls	r5, r6
10000dae:	0c17      	lsrs	r7, r2, #16
10000db0:	437e      	muls	r6, r7
10000db2:	0c03      	lsrs	r3, r0, #16
10000db4:	435f      	muls	r7, r3
10000db6:	b292      	uxth	r2, r2
10000db8:	435a      	muls	r2, r3
10000dba:	18b6      	adds	r6, r6, r2
10000dbc:	d302      	bcc.n	10000dc4 <l23_1>
10000dbe:	2201      	movs	r2, #1
10000dc0:	0412      	lsls	r2, r2, #16
10000dc2:	18bf      	adds	r7, r7, r2

10000dc4 <l23_1>:
10000dc4:	0432      	lsls	r2, r6, #16
10000dc6:	0c33      	lsrs	r3, r6, #16
10000dc8:	1952      	adds	r2, r2, r5
10000dca:	417b      	adcs	r3, r7
10000dcc:	4252      	negs	r2, r2
10000dce:	419c      	sbcs	r4, r3
10000dd0:	2c00      	cmp	r4, #0
10000dd2:	d402      	bmi.n	10000dda <l23_1+0x16>
10000dd4:	2200      	movs	r2, #0
10000dd6:	3001      	adds	r0, #1
10000dd8:	4151      	adcs	r1, r2
10000dda:	0840      	lsrs	r0, r0, #1
10000ddc:	07ca      	lsls	r2, r1, #31
10000dde:	4310      	orrs	r0, r2
10000de0:	0849      	lsrs	r1, r1, #1

10000de2 <dd_2>:
10000de2:	b002      	add	sp, #8
10000de4:	4662      	mov	r2, ip
10000de6:	07d7      	lsls	r7, r2, #31
10000de8:	1092      	asrs	r2, r2, #2
10000dea:	4b08      	ldr	r3, [pc, #32]	; (10000e0c <dd_4+0x6>)
10000dec:	18d2      	adds	r2, r2, r3
10000dee:	4b08      	ldr	r3, [pc, #32]	; (10000e10 <dd_4+0xa>)
10000df0:	429a      	cmp	r2, r3
10000df2:	d203      	bcs.n	10000dfc <dd_3>
10000df4:	0512      	lsls	r2, r2, #20
10000df6:	1889      	adds	r1, r1, r2

10000df8 <dd_5>:
10000df8:	19c9      	adds	r1, r1, r7
10000dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000dfc <dd_3>:
10000dfc:	2000      	movs	r0, #0
10000dfe:	2a00      	cmp	r2, #0
10000e00:	dc01      	bgt.n	10000e06 <dd_4>
10000e02:	0039      	movs	r1, r7
10000e04:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000e06 <dd_4>:
10000e06:	3301      	adds	r3, #1
10000e08:	0519      	lsls	r1, r3, #20
10000e0a:	e7f5      	b.n	10000df8 <dd_5>
10000e0c:	000003fd 	.word	0x000003fd
10000e10:	000007fe 	.word	0x000007fe

10000e14 <double2float_shim>:
10000e14:	004a      	lsls	r2, r1, #1
10000e16:	0d52      	lsrs	r2, r2, #21
10000e18:	4b14      	ldr	r3, [pc, #80]	; (10000e6c <double2float_shim+0x58>)
10000e1a:	1ad2      	subs	r2, r2, r3
10000e1c:	dd13      	ble.n	10000e46 <double2float_shim+0x32>
10000e1e:	2aff      	cmp	r2, #255	; 0xff
10000e20:	da1e      	bge.n	10000e60 <double2float_shim+0x4c>
10000e22:	05d2      	lsls	r2, r2, #23
10000e24:	0fcb      	lsrs	r3, r1, #31
10000e26:	07db      	lsls	r3, r3, #31
10000e28:	431a      	orrs	r2, r3
10000e2a:	00c3      	lsls	r3, r0, #3
10000e2c:	0f40      	lsrs	r0, r0, #29
10000e2e:	0309      	lsls	r1, r1, #12
10000e30:	0a49      	lsrs	r1, r1, #9
10000e32:	4308      	orrs	r0, r1
10000e34:	4310      	orrs	r0, r2
10000e36:	005b      	lsls	r3, r3, #1
10000e38:	d301      	bcc.n	10000e3e <double2float_shim+0x2a>
10000e3a:	d001      	beq.n	10000e40 <double2float_shim+0x2c>
10000e3c:	3001      	adds	r0, #1
10000e3e:	4770      	bx	lr
10000e40:	0843      	lsrs	r3, r0, #1
10000e42:	d2fb      	bcs.n	10000e3c <double2float_shim+0x28>
10000e44:	4770      	bx	lr
10000e46:	d002      	beq.n	10000e4e <double2float_shim+0x3a>
10000e48:	0fc8      	lsrs	r0, r1, #31
10000e4a:	07c0      	lsls	r0, r0, #31
10000e4c:	4770      	bx	lr
10000e4e:	030a      	lsls	r2, r1, #12
10000e50:	1312      	asrs	r2, r2, #12
10000e52:	3201      	adds	r2, #1
10000e54:	d1f8      	bne.n	10000e48 <double2float_shim+0x34>
10000e56:	0f42      	lsrs	r2, r0, #29
10000e58:	2a07      	cmp	r2, #7
10000e5a:	d1f5      	bne.n	10000e48 <double2float_shim+0x34>
10000e5c:	2201      	movs	r2, #1
10000e5e:	e000      	b.n	10000e62 <double2float_shim+0x4e>
10000e60:	22ff      	movs	r2, #255	; 0xff
10000e62:	0fc8      	lsrs	r0, r1, #31
10000e64:	0200      	lsls	r0, r0, #8
10000e66:	1880      	adds	r0, r0, r2
10000e68:	05c0      	lsls	r0, r0, #23
10000e6a:	4770      	bx	lr
10000e6c:	00000380 	.word	0x00000380

10000e70 <__wrap___aeabi_frsub>:
10000e70:	4048      	eors	r0, r1
10000e72:	4041      	eors	r1, r0
10000e74:	4048      	eors	r0, r1

10000e76 <__wrap___aeabi_fsub>:
10000e76:	4b06      	ldr	r3, [pc, #24]	; (10000e90 <__wrap___aeabi_fmul+0x8>)
10000e78:	685b      	ldr	r3, [r3, #4]
10000e7a:	4718      	bx	r3

10000e7c <__wrap___aeabi_fadd>:
10000e7c:	4b04      	ldr	r3, [pc, #16]	; (10000e90 <__wrap___aeabi_fmul+0x8>)
10000e7e:	681b      	ldr	r3, [r3, #0]
10000e80:	4718      	bx	r3

10000e82 <__wrap___aeabi_fdiv>:
10000e82:	4b03      	ldr	r3, [pc, #12]	; (10000e90 <__wrap___aeabi_fmul+0x8>)
10000e84:	68db      	ldr	r3, [r3, #12]
10000e86:	4718      	bx	r3

10000e88 <__wrap___aeabi_fmul>:
10000e88:	4b01      	ldr	r3, [pc, #4]	; (10000e90 <__wrap___aeabi_fmul+0x8>)
10000e8a:	689b      	ldr	r3, [r3, #8]
10000e8c:	4718      	bx	r3
10000e8e:	0000      	.short	0x0000
10000e90:	20003518 	.word	0x20003518

10000e94 <__wrap___aeabi_cfrcmple>:
10000e94:	b507      	push	{r0, r1, r2, lr}
10000e96:	4048      	eors	r0, r1
10000e98:	4041      	eors	r1, r0
10000e9a:	4048      	eors	r0, r1
10000e9c:	e001      	b.n	10000ea2 <__aeabi_cfcmple_guts>
10000e9e:	46c0      	nop			; (mov r8, r8)

10000ea0 <__wrap___aeabi_cfcmpeq>:
10000ea0:	b507      	push	{r0, r1, r2, lr}

10000ea2 <__aeabi_cfcmple_guts>:
10000ea2:	0042      	lsls	r2, r0, #1
10000ea4:	0e12      	lsrs	r2, r2, #24
10000ea6:	d003      	beq.n	10000eb0 <__aeabi_cfcmple_guts+0xe>
10000ea8:	2aff      	cmp	r2, #255	; 0xff
10000eaa:	d103      	bne.n	10000eb4 <__aeabi_cfcmple_guts+0x12>
10000eac:	0242      	lsls	r2, r0, #9
10000eae:	d818      	bhi.n	10000ee2 <__aeabi_cfcmple_guts+0x40>
10000eb0:	0dc0      	lsrs	r0, r0, #23
10000eb2:	05c0      	lsls	r0, r0, #23
10000eb4:	004a      	lsls	r2, r1, #1
10000eb6:	0e12      	lsrs	r2, r2, #24
10000eb8:	d003      	beq.n	10000ec2 <__aeabi_cfcmple_guts+0x20>
10000eba:	2aff      	cmp	r2, #255	; 0xff
10000ebc:	d103      	bne.n	10000ec6 <__aeabi_cfcmple_guts+0x24>
10000ebe:	024a      	lsls	r2, r1, #9
10000ec0:	d80f      	bhi.n	10000ee2 <__aeabi_cfcmple_guts+0x40>
10000ec2:	0dc9      	lsrs	r1, r1, #23
10000ec4:	05c9      	lsls	r1, r1, #23
10000ec6:	2201      	movs	r2, #1
10000ec8:	4041      	eors	r1, r0
10000eca:	d405      	bmi.n	10000ed8 <__aeabi_cfcmple_guts+0x36>
10000ecc:	4041      	eors	r1, r0
10000ece:	d501      	bpl.n	10000ed4 <__aeabi_cfcmple_guts+0x32>
10000ed0:	4281      	cmp	r1, r0
10000ed2:	bd07      	pop	{r0, r1, r2, pc}
10000ed4:	4288      	cmp	r0, r1
10000ed6:	bd07      	pop	{r0, r1, r2, pc}
10000ed8:	4301      	orrs	r1, r0
10000eda:	1849      	adds	r1, r1, r1
10000edc:	d001      	beq.n	10000ee2 <__aeabi_cfcmple_guts+0x40>
10000ede:	43c0      	mvns	r0, r0
10000ee0:	1800      	adds	r0, r0, r0
10000ee2:	bd07      	pop	{r0, r1, r2, pc}

10000ee4 <__wrap___aeabi_fcmpeq>:
10000ee4:	b500      	push	{lr}
10000ee6:	f7ff ffdb 	bl	10000ea0 <__wrap___aeabi_cfcmpeq>
10000eea:	d001      	beq.n	10000ef0 <__wrap___aeabi_fcmpeq+0xc>
10000eec:	2000      	movs	r0, #0
10000eee:	bd00      	pop	{pc}
10000ef0:	2001      	movs	r0, #1
10000ef2:	bd00      	pop	{pc}

10000ef4 <__wrap___aeabi_fcmplt>:
10000ef4:	b500      	push	{lr}
10000ef6:	f7ff ffd3 	bl	10000ea0 <__wrap___aeabi_cfcmpeq>
10000efa:	4180      	sbcs	r0, r0
10000efc:	bd00      	pop	{pc}
10000efe:	46c0      	nop			; (mov r8, r8)

10000f00 <__wrap___aeabi_fcmple>:
10000f00:	b500      	push	{lr}
10000f02:	f7ff ffcd 	bl	10000ea0 <__wrap___aeabi_cfcmpeq>
10000f06:	d901      	bls.n	10000f0c <__wrap___aeabi_fcmple+0xc>
10000f08:	2000      	movs	r0, #0
10000f0a:	bd00      	pop	{pc}
10000f0c:	2001      	movs	r0, #1
10000f0e:	bd00      	pop	{pc}

10000f10 <__wrap___aeabi_fcmpge>:
10000f10:	b500      	push	{lr}
10000f12:	f7ff ffbf 	bl	10000e94 <__wrap___aeabi_cfrcmple>
10000f16:	d901      	bls.n	10000f1c <__wrap___aeabi_fcmpge+0xc>
10000f18:	2000      	movs	r0, #0
10000f1a:	bd00      	pop	{pc}
10000f1c:	2001      	movs	r0, #1
10000f1e:	bd00      	pop	{pc}

10000f20 <__wrap___aeabi_fcmpgt>:
10000f20:	b500      	push	{lr}
10000f22:	f7ff ffb7 	bl	10000e94 <__wrap___aeabi_cfrcmple>
10000f26:	4180      	sbcs	r0, r0
10000f28:	bd00      	pop	{pc}

10000f2a <__wrap___aeabi_ui2f>:
10000f2a:	1a49      	subs	r1, r1, r1
10000f2c:	2800      	cmp	r0, #0
10000f2e:	d107      	bne.n	10000f40 <__aeabi_i2f_main>
10000f30:	4608      	mov	r0, r1
10000f32:	4770      	bx	lr

10000f34 <__wrap___aeabi_i2f>:
10000f34:	0fc1      	lsrs	r1, r0, #31
10000f36:	07c9      	lsls	r1, r1, #31
10000f38:	d500      	bpl.n	10000f3c <__wrap___aeabi_i2f+0x8>
10000f3a:	4240      	negs	r0, r0
10000f3c:	2800      	cmp	r0, #0
10000f3e:	d017      	beq.n	10000f70 <__aeabi_i2f_main+0x30>

10000f40 <__aeabi_i2f_main>:
10000f40:	46f4      	mov	ip, lr
10000f42:	b403      	push	{r0, r1}
10000f44:	4b0b      	ldr	r3, [pc, #44]	; (10000f74 <__aeabi_i2f_main+0x34>)
10000f46:	681b      	ldr	r3, [r3, #0]
10000f48:	4798      	blx	r3
10000f4a:	bc06      	pop	{r1, r2}
10000f4c:	4081      	lsls	r1, r0
10000f4e:	389e      	subs	r0, #158	; 0x9e
10000f50:	4240      	negs	r0, r0
10000f52:	3180      	adds	r1, #128	; 0x80
10000f54:	d207      	bcs.n	10000f66 <__aeabi_i2f_main+0x26>
10000f56:	060b      	lsls	r3, r1, #24
10000f58:	d007      	beq.n	10000f6a <__aeabi_i2f_main+0x2a>
10000f5a:	0049      	lsls	r1, r1, #1
10000f5c:	0a49      	lsrs	r1, r1, #9
10000f5e:	05c0      	lsls	r0, r0, #23
10000f60:	4310      	orrs	r0, r2
10000f62:	4308      	orrs	r0, r1
10000f64:	4760      	bx	ip
10000f66:	3001      	adds	r0, #1
10000f68:	e7f8      	b.n	10000f5c <__aeabi_i2f_main+0x1c>
10000f6a:	0a49      	lsrs	r1, r1, #9
10000f6c:	0289      	lsls	r1, r1, #10
10000f6e:	e7f5      	b.n	10000f5c <__aeabi_i2f_main+0x1c>
10000f70:	4770      	bx	lr
10000f72:	0000      	.short	0x0000
10000f74:	2003e320 	.word	0x2003e320

10000f78 <__wrap___aeabi_f2iz>:
10000f78:	0041      	lsls	r1, r0, #1
10000f7a:	0e0a      	lsrs	r2, r1, #24
10000f7c:	2380      	movs	r3, #128	; 0x80
10000f7e:	061b      	lsls	r3, r3, #24
10000f80:	2a7e      	cmp	r2, #126	; 0x7e
10000f82:	dd0b      	ble.n	10000f9c <__wrap___aeabi_f2iz+0x24>
10000f84:	3a9e      	subs	r2, #158	; 0x9e
10000f86:	da0b      	bge.n	10000fa0 <__wrap___aeabi_f2iz+0x28>
10000f88:	17c1      	asrs	r1, r0, #31
10000f8a:	0240      	lsls	r0, r0, #9
10000f8c:	0840      	lsrs	r0, r0, #1
10000f8e:	4318      	orrs	r0, r3
10000f90:	4252      	negs	r2, r2
10000f92:	40d0      	lsrs	r0, r2
10000f94:	0049      	lsls	r1, r1, #1
10000f96:	3101      	adds	r1, #1
10000f98:	4348      	muls	r0, r1
10000f9a:	4770      	bx	lr
10000f9c:	2000      	movs	r0, #0
10000f9e:	4770      	bx	lr
10000fa0:	0fc0      	lsrs	r0, r0, #31
10000fa2:	18c0      	adds	r0, r0, r3
10000fa4:	3801      	subs	r0, #1
10000fa6:	4770      	bx	lr
10000fa8:	42c0      	cmn	r0, r0
10000faa:	d30d      	bcc.n	10000fc8 <float2int>
10000fac:	b500      	push	{lr}
10000fae:	0040      	lsls	r0, r0, #1
10000fb0:	0840      	lsrs	r0, r0, #1
10000fb2:	2100      	movs	r1, #0
10000fb4:	f000 f812 	bl	10000fdc <__wrap___aeabi_f2uiz>
10000fb8:	2800      	cmp	r0, #0
10000fba:	d401      	bmi.n	10000fc0 <__wrap___aeabi_f2iz+0x48>
10000fbc:	4240      	negs	r0, r0
10000fbe:	bd00      	pop	{pc}
10000fc0:	2080      	movs	r0, #128	; 0x80
10000fc2:	0600      	lsls	r0, r0, #24
10000fc4:	bd00      	pop	{pc}
	...

10000fc8 <float2int>:
10000fc8:	4b03      	ldr	r3, [pc, #12]	; (10000fd8 <float2int+0x10>)
10000fca:	69db      	ldr	r3, [r3, #28]
10000fcc:	46fc      	mov	ip, pc
10000fce:	4718      	bx	r3
10000fd0:	115ddf1c 	.word	0x115ddf1c
10000fd4:	00001000 	.word	0x00001000
10000fd8:	20003518 	.word	0x20003518

10000fdc <__wrap___aeabi_f2uiz>:
10000fdc:	4b01      	ldr	r3, [pc, #4]	; (10000fe4 <__wrap___aeabi_f2uiz+0x8>)
10000fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000fe0:	4718      	bx	r3
10000fe2:	0000      	.short	0x0000
10000fe4:	20003518 	.word	0x20003518

10000fe8 <fix2float>:
10000fe8:	4b01      	ldr	r3, [pc, #4]	; (10000ff0 <fix2float+0x8>)
10000fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10000fec:	4718      	bx	r3
10000fee:	0000      	.short	0x0000
10000ff0:	20003518 	.word	0x20003518

10000ff4 <__wrap___aeabi_f2d>:
10000ff4:	4b03      	ldr	r3, [pc, #12]	; (10001004 <__wrap___aeabi_f2d+0x10>)
10000ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
10000ff8:	46fc      	mov	ip, pc
10000ffa:	4718      	bx	r3
10000ffc:	1175df7c 	.word	0x1175df7c
10001000:	00001000 	.word	0x00001000
10001004:	20003518 	.word	0x20003518

10001008 <__wrap_sqrtf>:
10001008:	15c1      	asrs	r1, r0, #23
1000100a:	d402      	bmi.n	10001012 <__wrap_sqrtf+0xa>
1000100c:	4b05      	ldr	r3, [pc, #20]	; (10001024 <__wrap_sqrtf+0x1c>)
1000100e:	699b      	ldr	r3, [r3, #24]
10001010:	4718      	bx	r3
10001012:	43c8      	mvns	r0, r1
10001014:	28ff      	cmp	r0, #255	; 0xff
10001016:	d101      	bne.n	1000101c <__wrap_sqrtf+0x14>
10001018:	07c0      	lsls	r0, r0, #31
1000101a:	4770      	bx	lr
1000101c:	17c8      	asrs	r0, r1, #31
1000101e:	05c0      	lsls	r0, r0, #23
10001020:	4770      	bx	lr
10001022:	0000      	.short	0x0000
10001024:	20003518 	.word	0x20003518

10001028 <__wrap_cosf>:
10001028:	0041      	lsls	r1, r0, #1
1000102a:	0e09      	lsrs	r1, r1, #24
1000102c:	2986      	cmp	r1, #134	; 0x86
1000102e:	da02      	bge.n	10001036 <__wrap_cosf+0xe>
10001030:	4b04      	ldr	r3, [pc, #16]	; (10001044 <__wrap_cosf+0x1c>)
10001032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001034:	4718      	bx	r3
10001036:	4904      	ldr	r1, [pc, #16]	; (10001048 <__wrap_cosf+0x20>)
10001038:	b500      	push	{lr}
1000103a:	f000 fcd5 	bl	100019e8 <__wrap_remainderf>
1000103e:	bc02      	pop	{r1}
10001040:	468e      	mov	lr, r1
10001042:	e7f5      	b.n	10001030 <__wrap_cosf+0x8>
10001044:	20003518 	.word	0x20003518
10001048:	40c90fdb 	.word	0x40c90fdb

1000104c <__wrap_sinf>:
1000104c:	0041      	lsls	r1, r0, #1
1000104e:	0e09      	lsrs	r1, r1, #24
10001050:	2986      	cmp	r1, #134	; 0x86
10001052:	da02      	bge.n	1000105a <__wrap_sinf+0xe>
10001054:	4b04      	ldr	r3, [pc, #16]	; (10001068 <__wrap_sinf+0x1c>)
10001056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001058:	4718      	bx	r3
1000105a:	4904      	ldr	r1, [pc, #16]	; (1000106c <__wrap_sinf+0x20>)
1000105c:	b500      	push	{lr}
1000105e:	f000 fcc3 	bl	100019e8 <__wrap_remainderf>
10001062:	bc02      	pop	{r1}
10001064:	468e      	mov	lr, r1
10001066:	e7f5      	b.n	10001054 <__wrap_sinf+0x8>
10001068:	20003518 	.word	0x20003518
1000106c:	40c90fdb 	.word	0x40c90fdb

10001070 <__wrap_tanf>:
10001070:	0041      	lsls	r1, r0, #1
10001072:	0e09      	lsrs	r1, r1, #24
10001074:	2986      	cmp	r1, #134	; 0x86
10001076:	da02      	bge.n	1000107e <__wrap_tanf+0xe>
10001078:	4b04      	ldr	r3, [pc, #16]	; (1000108c <__wrap_tanf+0x1c>)
1000107a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1000107c:	4718      	bx	r3
1000107e:	4904      	ldr	r1, [pc, #16]	; (10001090 <__wrap_tanf+0x20>)
10001080:	b500      	push	{lr}
10001082:	f000 fcb1 	bl	100019e8 <__wrap_remainderf>
10001086:	bc02      	pop	{r1}
10001088:	468e      	mov	lr, r1
1000108a:	e7f5      	b.n	10001078 <__wrap_tanf+0x8>
1000108c:	20003518 	.word	0x20003518
10001090:	40c90fdb 	.word	0x40c90fdb

10001094 <__wrap_atan2f>:
10001094:	4b03      	ldr	r3, [pc, #12]	; (100010a4 <__wrap_atan2f+0x10>)
10001096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10001098:	46fc      	mov	ip, pc
1000109a:	4718      	bx	r3
1000109c:	10d5df58 	.word	0x10d5df58
100010a0:	00001000 	.word	0x00001000
100010a4:	20003518 	.word	0x20003518

100010a8 <float_table_shim_on_use_helper>:
100010a8:	b507      	push	{r0, r1, r2, lr}
100010aa:	4660      	mov	r0, ip
100010ac:	8801      	ldrh	r1, [r0, #0]
100010ae:	0a0a      	lsrs	r2, r1, #8
100010b0:	3002      	adds	r0, #2
100010b2:	2adf      	cmp	r2, #223	; 0xdf
100010b4:	d1fa      	bne.n	100010ac <float_table_shim_on_use_helper+0x4>
100010b6:	b2c9      	uxtb	r1, r1
100010b8:	0882      	lsrs	r2, r0, #2
100010ba:	d304      	bcc.n	100010c6 <float_table_shim_on_use_helper+0x1e>
100010bc:	8802      	ldrh	r2, [r0, #0]
100010be:	8840      	ldrh	r0, [r0, #2]
100010c0:	0400      	lsls	r0, r0, #16
100010c2:	4310      	orrs	r0, r2
100010c4:	e000      	b.n	100010c8 <float_table_shim_on_use_helper+0x20>
100010c6:	6800      	ldr	r0, [r0, #0]
100010c8:	4a01      	ldr	r2, [pc, #4]	; (100010d0 <float_table_shim_on_use_helper+0x28>)
100010ca:	5050      	str	r0, [r2, r1]
100010cc:	9003      	str	r0, [sp, #12]
100010ce:	bd07      	pop	{r0, r1, r2, pc}
100010d0:	20003518 	.word	0x20003518

100010d4 <fatan2_shim>:
100010d4:	b530      	push	{r4, r5, lr}
100010d6:	4c1d      	ldr	r4, [pc, #116]	; (1000114c <fatan2_shim+0x78>)
100010d8:	46a4      	mov	ip, r4
100010da:	47e0      	blx	ip
100010dc:	4604      	mov	r4, r0
100010de:	4608      	mov	r0, r1
100010e0:	4621      	mov	r1, r4
100010e2:	4614      	mov	r4, r2
100010e4:	461a      	mov	r2, r3
100010e6:	4623      	mov	r3, r4
100010e8:	47e0      	blx	ip
100010ea:	0140      	lsls	r0, r0, #5
100010ec:	0149      	lsls	r1, r1, #5
100010ee:	18d4      	adds	r4, r2, r3
100010f0:	1264      	asrs	r4, r4, #9
100010f2:	3401      	adds	r4, #1
100010f4:	d40a      	bmi.n	1000110c <fatan2_shim+0x38>
100010f6:	1ad4      	subs	r4, r2, r3
100010f8:	da05      	bge.n	10001106 <fatan2_shim+0x32>
100010fa:	4264      	negs	r4, r4
100010fc:	4120      	asrs	r0, r4
100010fe:	2c1c      	cmp	r4, #28
10001100:	d30d      	bcc.n	1000111e <fatan2_shim+0x4a>
10001102:	17c0      	asrs	r0, r0, #31
10001104:	e00b      	b.n	1000111e <fatan2_shim+0x4a>
10001106:	4121      	asrs	r1, r4
10001108:	2c1c      	cmp	r4, #28
1000110a:	d308      	bcc.n	1000111e <fatan2_shim+0x4a>
1000110c:	2800      	cmp	r0, #0
1000110e:	da04      	bge.n	1000111a <fatan2_shim+0x46>
10001110:	4b0f      	ldr	r3, [pc, #60]	; (10001150 <fatan2_shim+0x7c>)
10001112:	6818      	ldr	r0, [r3, #0]
10001114:	17c9      	asrs	r1, r1, #31
10001116:	4048      	eors	r0, r1
10001118:	e014      	b.n	10001144 <fatan2_shim+0x70>
1000111a:	17c8      	asrs	r0, r1, #31
1000111c:	e012      	b.n	10001144 <fatan2_shim+0x70>
1000111e:	2200      	movs	r2, #0
10001120:	4b0b      	ldr	r3, [pc, #44]	; (10001150 <fatan2_shim+0x7c>)
10001122:	2800      	cmp	r0, #0
10001124:	da02      	bge.n	1000112c <fatan2_shim+0x58>
10001126:	4240      	negs	r0, r0
10001128:	4249      	negs	r1, r1
1000112a:	681a      	ldr	r2, [r3, #0]
1000112c:	2401      	movs	r4, #1
1000112e:	4d09      	ldr	r5, [pc, #36]	; (10001154 <fatan2_shim+0x80>)
10001130:	47a8      	blx	r5
10001132:	4610      	mov	r0, r2
10001134:	4b06      	ldr	r3, [pc, #24]	; (10001150 <fatan2_shim+0x7c>)
10001136:	681a      	ldr	r2, [r3, #0]
10001138:	1884      	adds	r4, r0, r2
1000113a:	d202      	bcs.n	10001142 <fatan2_shim+0x6e>
1000113c:	1a84      	subs	r4, r0, r2
1000113e:	d400      	bmi.n	10001142 <fatan2_shim+0x6e>
10001140:	1aa0      	subs	r0, r4, r2
10001142:	3801      	subs	r0, #1
10001144:	2200      	movs	r2, #0
10001146:	4b04      	ldr	r3, [pc, #16]	; (10001158 <fatan2_shim+0x84>)
10001148:	4718      	bx	r3
1000114a:	0000      	.short	0x0000
1000114c:	000029c1 	.word	0x000029c1
10001150:	00002cfc 	.word	0x00002cfc
10001154:	00002b97 	.word	0x00002b97
10001158:	00002b19 	.word	0x00002b19

1000115c <float2int_shim>:
1000115c:	2100      	movs	r1, #0

1000115e <float2fix_shim>:
1000115e:	15c2      	asrs	r2, r0, #23
10001160:	3280      	adds	r2, #128	; 0x80
10001162:	3280      	adds	r2, #128	; 0x80
10001164:	d001      	beq.n	1000116a <float2fix_shim+0xc>
10001166:	4a02      	ldr	r2, [pc, #8]	; (10001170 <float2fix_shim+0x12>)
10001168:	4710      	bx	r2
1000116a:	2000      	movs	r0, #0
1000116c:	4770      	bx	lr
1000116e:	0000      	.short	0x0000
10001170:	00002acd 	.word	0x00002acd

10001174 <float2double_shim>:
10001174:	0fc3      	lsrs	r3, r0, #31
10001176:	07db      	lsls	r3, r3, #31
10001178:	0041      	lsls	r1, r0, #1
1000117a:	0e0a      	lsrs	r2, r1, #24
1000117c:	d007      	beq.n	1000118e <float2double_shim+0x1a>
1000117e:	2aff      	cmp	r2, #255	; 0xff
10001180:	d008      	beq.n	10001194 <float2double_shim+0x20>
10001182:	0909      	lsrs	r1, r1, #4
10001184:	4a05      	ldr	r2, [pc, #20]	; (1000119c <float2double_shim+0x28>)
10001186:	1889      	adds	r1, r1, r2
10001188:	4319      	orrs	r1, r3
1000118a:	0740      	lsls	r0, r0, #29
1000118c:	4770      	bx	lr
1000118e:	0019      	movs	r1, r3
10001190:	2000      	movs	r0, #0
10001192:	4770      	bx	lr
10001194:	4902      	ldr	r1, [pc, #8]	; (100011a0 <float2double_shim+0x2c>)
10001196:	18c9      	adds	r1, r1, r3
10001198:	e7fa      	b.n	10001190 <float2double_shim+0x1c>
1000119a:	0000      	.short	0x0000
1000119c:	38000000 	.word	0x38000000
100011a0:	7ff00000 	.word	0x7ff00000

100011a4 <__aeabi_mem_init>:
100011a4:	4801      	ldr	r0, [pc, #4]	; (100011ac <__aeabi_mem_init+0x8>)
100011a6:	2104      	movs	r1, #4
100011a8:	4b01      	ldr	r3, [pc, #4]	; (100011b0 <__aeabi_mem_init+0xc>)
100011aa:	4718      	bx	r3
100011ac:	20002708 	.word	0x20002708
100011b0:	10001221 	.word	0x10001221

100011b4 <__wrap_memset>:
100011b4:	4b01      	ldr	r3, [pc, #4]	; (100011bc <__wrap_memset+0x8>)
100011b6:	681b      	ldr	r3, [r3, #0]
100011b8:	4718      	bx	r3
100011ba:	0000      	.short	0x0000
100011bc:	20002708 	.word	0x20002708

100011c0 <__wrap___aeabi_memcpy>:
100011c0:	4b01      	ldr	r3, [pc, #4]	; (100011c8 <__wrap___aeabi_memcpy+0x8>)
100011c2:	685b      	ldr	r3, [r3, #4]
100011c4:	4718      	bx	r3
100011c6:	0000      	.short	0x0000
100011c8:	20002708 	.word	0x20002708

100011cc <__wrap___aeabi_lmul>:
100011cc:	4351      	muls	r1, r2
100011ce:	4343      	muls	r3, r0
100011d0:	18c9      	adds	r1, r1, r3
100011d2:	468c      	mov	ip, r1
100011d4:	0c11      	lsrs	r1, r2, #16
100011d6:	b283      	uxth	r3, r0
100011d8:	434b      	muls	r3, r1
100011da:	b410      	push	{r4}
100011dc:	0c04      	lsrs	r4, r0, #16
100011de:	4361      	muls	r1, r4
100011e0:	b292      	uxth	r2, r2
100011e2:	b280      	uxth	r0, r0
100011e4:	4350      	muls	r0, r2
100011e6:	4362      	muls	r2, r4
100011e8:	041c      	lsls	r4, r3, #16
100011ea:	0c1b      	lsrs	r3, r3, #16
100011ec:	1900      	adds	r0, r0, r4
100011ee:	bc10      	pop	{r4}
100011f0:	4159      	adcs	r1, r3
100011f2:	0413      	lsls	r3, r2, #16
100011f4:	0c12      	lsrs	r2, r2, #16
100011f6:	18c0      	adds	r0, r0, r3
100011f8:	4151      	adcs	r1, r2
100011fa:	4461      	add	r1, ip
100011fc:	4770      	bx	lr
	...

10001200 <rom_func_lookup>:
// Convert a 16 bit pointer stored at the given rom address into a 32 bit pointer
#define rom_hword_as_ptr(rom_address) (void *)(uintptr_t)(*(uint16_t *)rom_address)

void *rom_func_lookup(uint32_t code) {
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
10001200:	2314      	movs	r3, #20
void *rom_func_lookup(uint32_t code) {
10001202:	b510      	push	{r4, lr}
10001204:	0001      	movs	r1, r0
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
10001206:	8818      	ldrh	r0, [r3, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10001208:	3304      	adds	r3, #4
1000120a:	881b      	ldrh	r3, [r3, #0]
    return rom_table_lookup(func_table, code);
1000120c:	4798      	blx	r3
}
1000120e:	bd10      	pop	{r4, pc}

10001210 <rom_data_lookup>:

void *rom_data_lookup(uint32_t code) {
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
    uint16_t *data_table = (uint16_t *) rom_hword_as_ptr(0x16);
10001210:	2316      	movs	r3, #22
void *rom_data_lookup(uint32_t code) {
10001212:	b510      	push	{r4, lr}
10001214:	0001      	movs	r1, r0
    uint16_t *data_table = (uint16_t *) rom_hword_as_ptr(0x16);
10001216:	8818      	ldrh	r0, [r3, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10001218:	3302      	adds	r3, #2
1000121a:	881b      	ldrh	r3, [r3, #0]
    return rom_table_lookup(data_table, code);
1000121c:	4798      	blx	r3
}
1000121e:	bd10      	pop	{r4, pc}

10001220 <rom_funcs_lookup>:
/// \end::table_lookup[]

bool rom_funcs_lookup(uint32_t *table, unsigned int count) {
10001220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10001222:	4647      	mov	r7, r8
10001224:	46ce      	mov	lr, r9
10001226:	b580      	push	{r7, lr}
10001228:	1e0f      	subs	r7, r1, #0
    bool ok = true;
    for (unsigned int i = 0; i < count; i++) {
1000122a:	d019      	beq.n	10001260 <rom_funcs_lookup+0x40>
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
1000122c:	2314      	movs	r3, #20
1000122e:	4699      	mov	r9, r3
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10001230:	3304      	adds	r3, #4
10001232:	0004      	movs	r4, r0
    for (unsigned int i = 0; i < count; i++) {
10001234:	2500      	movs	r5, #0
    bool ok = true;
10001236:	2601      	movs	r6, #1
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10001238:	4698      	mov	r8, r3
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
1000123a:	464b      	mov	r3, r9
1000123c:	8818      	ldrh	r0, [r3, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
1000123e:	4643      	mov	r3, r8
    return rom_table_lookup(func_table, code);
10001240:	6821      	ldr	r1, [r4, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10001242:	881b      	ldrh	r3, [r3, #0]
    return rom_table_lookup(func_table, code);
10001244:	4798      	blx	r3
        table[i] = (uintptr_t) rom_func_lookup(table[i]);
10001246:	c401      	stmia	r4!, {r0}
        if (!table[i]) ok = false;
10001248:	1e43      	subs	r3, r0, #1
1000124a:	4198      	sbcs	r0, r3
    for (unsigned int i = 0; i < count; i++) {
1000124c:	3501      	adds	r5, #1
        if (!table[i]) ok = false;
1000124e:	4240      	negs	r0, r0
10001250:	4006      	ands	r6, r0
    for (unsigned int i = 0; i < count; i++) {
10001252:	42af      	cmp	r7, r5
10001254:	d1f1      	bne.n	1000123a <rom_funcs_lookup+0x1a>
    }
    return ok;
}
10001256:	0030      	movs	r0, r6
10001258:	bcc0      	pop	{r6, r7}
1000125a:	46b9      	mov	r9, r7
1000125c:	46b0      	mov	r8, r6
1000125e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool ok = true;
10001260:	2601      	movs	r6, #1
10001262:	e7f8      	b.n	10001256 <rom_funcs_lookup+0x36>

10001264 <hw_claim_lock>:
 *
 * \return The prior interrupt enable status for restoration later via restore_interrupts()
 */
inline static uint32_t save_and_disable_interrupts() {
    uint32_t status;
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001264:	f3ef 8010 	mrs	r0, PRIMASK
    __asm volatile ("cpsid i");
10001268:	b672      	cpsid	i
 */
inline static void spin_lock_unsafe_blocking(spin_lock_t *lock) {
    // Note we don't do a wfe or anything, because by convention these spin_locks are VERY SHORT LIVED and NEVER BLOCK and run
    // with INTERRUPTS disabled (to ensure that)... therefore nothing on our core could be blocking us, so we just need to wait on another core
    // anyway which should be finished soon
    while (__builtin_expect(!*lock, 0));
1000126a:	4a03      	ldr	r2, [pc, #12]	; (10001278 <hw_claim_lock+0x14>)
1000126c:	6813      	ldr	r3, [r2, #0]
1000126e:	2b00      	cmp	r3, #0
10001270:	d0fc      	beq.n	1000126c <hw_claim_lock+0x8>
    __asm volatile ("dmb");
10001272:	f3bf 8f5f 	dmb	sy

#include "hardware/claim.h"

uint32_t hw_claim_lock() {
    return spin_lock_blocking(spin_lock_instance(PICO_SPINLOCK_ID_HARDWARE_CLAIM));
}
10001276:	4770      	bx	lr
10001278:	d000012c 	.word	0xd000012c

1000127c <hw_claim_unlock>:
1000127c:	f3bf 8f5f 	dmb	sy
 *
 * \param lock Spinlock instance
 */
inline static void spin_unlock_unsafe(spin_lock_t *lock) {
    __mem_fence_release();
    *lock = 0;
10001280:	2200      	movs	r2, #0
10001282:	4b02      	ldr	r3, [pc, #8]	; (1000128c <hw_claim_unlock+0x10>)
10001284:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001286:	f380 8810 	msr	PRIMASK, r0

void hw_claim_unlock(uint32_t save) {
    spin_unlock(spin_lock_instance(PICO_SPINLOCK_ID_HARDWARE_CLAIM), save);
}
1000128a:	4770      	bx	lr
1000128c:	d000012c 	.word	0xd000012c

10001290 <hw_claim_or_assert>:
    }
    hw_claim_unlock(save);
    return rc;
}

void hw_claim_or_assert(uint8_t *bits, uint bit_index, const char *message) {
10001290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10001292:	46ce      	mov	lr, r9
10001294:	4647      	mov	r7, r8
10001296:	4691      	mov	r9, r2
10001298:	b580      	push	{r7, lr}
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
1000129a:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
1000129e:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100012a0:	4d10      	ldr	r5, [pc, #64]	; (100012e4 <hw_claim_or_assert+0x54>)
100012a2:	682b      	ldr	r3, [r5, #0]
100012a4:	2b00      	cmp	r3, #0
100012a6:	d0fc      	beq.n	100012a2 <hw_claim_or_assert+0x12>
    __asm volatile ("dmb");
100012a8:	f3bf 8f5f 	dmb	sy
    uint32_t save = hw_claim_lock();
    if (bits[bit_index >> 3u] & (1u << (bit_index & 7u))) {
100012ac:	08cb      	lsrs	r3, r1, #3
100012ae:	5cc4      	ldrb	r4, [r0, r3]
100012b0:	18c7      	adds	r7, r0, r3
100012b2:	2007      	movs	r0, #7
100012b4:	0026      	movs	r6, r4
100012b6:	2301      	movs	r3, #1
100012b8:	4008      	ands	r0, r1
100012ba:	40c6      	lsrs	r6, r0
100012bc:	001a      	movs	r2, r3
100012be:	4032      	ands	r2, r6
100012c0:	4233      	tst	r3, r6
100012c2:	d10b      	bne.n	100012dc <hw_claim_or_assert+0x4c>
        panic(message, bit_index);
    } else {
        bits[bit_index >> 3u] |= (1u << (bit_index & 7u));
100012c4:	4083      	lsls	r3, r0
100012c6:	4323      	orrs	r3, r4
100012c8:	703b      	strb	r3, [r7, #0]
100012ca:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100012ce:	602a      	str	r2, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100012d0:	f38c 8810 	msr	PRIMASK, ip
    }
    hw_claim_unlock(save);
}
100012d4:	bcc0      	pop	{r6, r7}
100012d6:	46b9      	mov	r9, r7
100012d8:	46b0      	mov	r8, r6
100012da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        panic(message, bit_index);
100012dc:	4648      	mov	r0, r9
100012de:	f001 f9f5 	bl	100026cc <panic>
100012e2:	46c0      	nop			; (mov r8, r8)
100012e4:	d000012c 	.word	0xd000012c

100012e8 <hw_claim_unused_from_range>:

int hw_claim_unused_from_range(uint8_t *bits, bool required, uint bit_lsb, uint bit_msb, const char *message) {
100012e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100012ea:	4647      	mov	r7, r8
100012ec:	46ce      	mov	lr, r9
100012ee:	4688      	mov	r8, r1
100012f0:	b580      	push	{r7, lr}
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100012f2:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
100012f6:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100012f8:	4d21      	ldr	r5, [pc, #132]	; (10001380 <hw_claim_unused_from_range+0x98>)
100012fa:	682c      	ldr	r4, [r5, #0]
100012fc:	2c00      	cmp	r4, #0
100012fe:	d0fc      	beq.n	100012fa <hw_claim_unused_from_range+0x12>
    __asm volatile ("dmb");
10001300:	f3bf 8f5f 	dmb	sy
    // don't bother check lsb / msb order as if wrong, then it'll fail anyway
    uint32_t save = hw_claim_lock();
    int found_bit = -1;
    for(uint bit=bit_lsb; bit <= bit_msb; bit++) {
10001304:	429a      	cmp	r2, r3
10001306:	d82d      	bhi.n	10001364 <hw_claim_unused_from_range+0x7c>
        if (!(bits[bit >> 3u] & (1u << (bit & 7u)))) {
10001308:	08d4      	lsrs	r4, r2, #3
1000130a:	5d05      	ldrb	r5, [r0, r4]
1000130c:	1907      	adds	r7, r0, r4
1000130e:	2407      	movs	r4, #7
10001310:	002e      	movs	r6, r5
10001312:	4014      	ands	r4, r2
10001314:	40e6      	lsrs	r6, r4
10001316:	07f1      	lsls	r1, r6, #31
10001318:	d51e      	bpl.n	10001358 <hw_claim_unused_from_range+0x70>
1000131a:	2107      	movs	r1, #7
1000131c:	4689      	mov	r9, r1
1000131e:	3906      	subs	r1, #6
10001320:	e008      	b.n	10001334 <hw_claim_unused_from_range+0x4c>
10001322:	08d4      	lsrs	r4, r2, #3
10001324:	5d05      	ldrb	r5, [r0, r4]
10001326:	1907      	adds	r7, r0, r4
10001328:	464c      	mov	r4, r9
1000132a:	002e      	movs	r6, r5
1000132c:	4014      	ands	r4, r2
1000132e:	40e6      	lsrs	r6, r4
10001330:	4231      	tst	r1, r6
10001332:	d011      	beq.n	10001358 <hw_claim_unused_from_range+0x70>
    for(uint bit=bit_lsb; bit <= bit_msb; bit++) {
10001334:	3201      	adds	r2, #1
10001336:	4293      	cmp	r3, r2
10001338:	d2f3      	bcs.n	10001322 <hw_claim_unused_from_range+0x3a>
    int found_bit = -1;
1000133a:	2001      	movs	r0, #1
1000133c:	4240      	negs	r0, r0
1000133e:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001342:	2200      	movs	r2, #0
10001344:	4b0e      	ldr	r3, [pc, #56]	; (10001380 <hw_claim_unused_from_range+0x98>)
10001346:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001348:	f38c 8810 	msr	PRIMASK, ip
            found_bit = bit;
            break;
        }
    }
    hw_claim_unlock(save);
    if (found_bit < 0 && required) {
1000134c:	2800      	cmp	r0, #0
1000134e:	db11      	blt.n	10001374 <hw_claim_unused_from_range+0x8c>
        panic(message);
    }
    return found_bit;
}
10001350:	bcc0      	pop	{r6, r7}
10001352:	46b9      	mov	r9, r7
10001354:	46b0      	mov	r8, r6
10001356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            bits[bit >> 3u] |= (1u << (bit & 7u));
10001358:	2301      	movs	r3, #1
1000135a:	40a3      	lsls	r3, r4
1000135c:	431d      	orrs	r5, r3
            found_bit = bit;
1000135e:	0010      	movs	r0, r2
            bits[bit >> 3u] |= (1u << (bit & 7u));
10001360:	703d      	strb	r5, [r7, #0]
            break;
10001362:	e7ec      	b.n	1000133e <hw_claim_unused_from_range+0x56>
    __asm volatile ("dmb");
10001364:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001368:	2300      	movs	r3, #0
1000136a:	602b      	str	r3, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000136c:	f38c 8810 	msr	PRIMASK, ip
    int found_bit = -1;
10001370:	2001      	movs	r0, #1
10001372:	4240      	negs	r0, r0
    if (found_bit < 0 && required) {
10001374:	4643      	mov	r3, r8
10001376:	2b00      	cmp	r3, #0
10001378:	d0ea      	beq.n	10001350 <hw_claim_unused_from_range+0x68>
        panic(message);
1000137a:	9808      	ldr	r0, [sp, #32]
1000137c:	f001 f9a6 	bl	100026cc <panic>
10001380:	d000012c 	.word	0xd000012c

10001384 <clock_configure>:
    hw_clear_bits(&clock->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clk_index] = 0;
}

/// \tag::clock_configure[]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10001384:	b5f0      	push	{r4, r5, r6, r7, lr}
10001386:	464f      	mov	r7, r9
10001388:	4646      	mov	r6, r8
1000138a:	46d6      	mov	lr, sl
1000138c:	b5c0      	push	{r6, r7, lr}
1000138e:	0017      	movs	r7, r2
    uint32_t div;

    assert(src_freq >= freq);

    if (freq > src_freq)
10001390:	9a08      	ldr	r2, [sp, #32]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10001392:	0005      	movs	r5, r0
10001394:	4688      	mov	r8, r1
    if (freq > src_freq)
10001396:	429a      	cmp	r2, r3
10001398:	d865      	bhi.n	10001466 <clock_configure+0xe2>
        return false;

    // Div register is 24.8 int.frac divider so multiply by 2^8 (left shift by 8)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
1000139a:	0e19      	lsrs	r1, r3, #24
1000139c:	0218      	lsls	r0, r3, #8
1000139e:	2300      	movs	r3, #0
100013a0:	f7ff f82e 	bl	10000400 <__wrap___aeabi_uldivmod>

    clock_hw_t *clock = &clocks_hw->clk[clk_index];
100013a4:	4b31      	ldr	r3, [pc, #196]	; (1000146c <clock_configure+0xe8>)
100013a6:	006c      	lsls	r4, r5, #1
100013a8:	469c      	mov	ip, r3
100013aa:	1964      	adds	r4, r4, r5
100013ac:	00a4      	lsls	r4, r4, #2
100013ae:	4464      	add	r4, ip

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock->div)
100013b0:	6863      	ldr	r3, [r4, #4]
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
100013b2:	4681      	mov	r9, r0
    if (div > clock->div)
100013b4:	4298      	cmp	r0, r3
100013b6:	d900      	bls.n	100013ba <clock_configure+0x36>
        clock->div = div;
100013b8:	6060      	str	r0, [r4, #4]
    return clk_index == clk_sys || clk_index == clk_ref;
100013ba:	1f2b      	subs	r3, r5, #4
100013bc:	b2db      	uxtb	r3, r3
100013be:	469a      	mov	sl, r3

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
100013c0:	2b01      	cmp	r3, #1
100013c2:	d92c      	bls.n	1000141e <clock_configure+0x9a>
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100013c4:	23c0      	movs	r3, #192	; 0xc0
100013c6:	2280      	movs	r2, #128	; 0x80
    // If no glitchless mux, cleanly stop the clock to avoid glitches
    // propagating when changing aux mux. Note it would be a really bad idea
    // to do this on one of the glitchless clocks (clk_sys, clk_ref).
    else {
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_GPOUT0_CTRL_ENABLE_BITS);
        if (configured_freq[clk_index] > 0) {
100013c8:	4e29      	ldr	r6, [pc, #164]	; (10001470 <clock_configure+0xec>)
100013ca:	00ad      	lsls	r5, r5, #2
100013cc:	019b      	lsls	r3, r3, #6
100013ce:	5971      	ldr	r1, [r6, r5]
100013d0:	4323      	orrs	r3, r4
100013d2:	0112      	lsls	r2, r2, #4
100013d4:	601a      	str	r2, [r3, #0]
100013d6:	2900      	cmp	r1, #0
100013d8:	d005      	beq.n	100013e6 <clock_configure+0x62>
            // Delay for 3 cycles of the target clock, for ENABLE propagation.
            // Note XOSC_COUNT is not helpful here because XOSC is not
            // necessarily running, nor is timer... so, 3 cycles per loop:
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
100013da:	6970      	ldr	r0, [r6, #20]
100013dc:	f7fe ffca 	bl	10000374 <__wrap___aeabi_uidiv>
100013e0:	3001      	adds	r0, #1
            asm volatile (
100013e2:	3801      	subs	r0, #1
100013e4:	d1fd      	bne.n	100013e2 <clock_configure+0x5e>
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100013e6:	6822      	ldr	r2, [r4, #0]
            );
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock->ctrl,
100013e8:	017f      	lsls	r7, r7, #5
100013ea:	407a      	eors	r2, r7
100013ec:	27e0      	movs	r7, #224	; 0xe0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100013ee:	2380      	movs	r3, #128	; 0x80
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100013f0:	4017      	ands	r7, r2
        (auxsrc << CLOCKS_CLK_SYS_CTRL_AUXSRC_LSB),
        CLOCKS_CLK_SYS_CTRL_AUXSRC_BITS
    );

    if (has_glitchless_mux(clk_index)) {
100013f2:	4652      	mov	r2, sl
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100013f4:	015b      	lsls	r3, r3, #5
100013f6:	4323      	orrs	r3, r4
100013f8:	601f      	str	r7, [r3, #0]
100013fa:	2a01      	cmp	r2, #1
100013fc:	d926      	bls.n	1000144c <clock_configure+0xc8>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100013fe:	2380      	movs	r3, #128	; 0x80
10001400:	2280      	movs	r2, #128	; 0x80
10001402:	019b      	lsls	r3, r3, #6
10001404:	4323      	orrs	r3, r4
10001406:	0112      	lsls	r2, r2, #4
10001408:	601a      	str	r2, [r3, #0]

    hw_set_bits(&clock->ctrl, CLOCKS_CLK_GPOUT0_CTRL_ENABLE_BITS);

    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock->div = div;
1000140a:	464b      	mov	r3, r9

    // Store the configured frequency
    configured_freq[clk_index] = freq;
1000140c:	2001      	movs	r0, #1
    clock->div = div;
1000140e:	6063      	str	r3, [r4, #4]
    configured_freq[clk_index] = freq;
10001410:	9b08      	ldr	r3, [sp, #32]
10001412:	5173      	str	r3, [r6, r5]

    return true;
}
10001414:	bce0      	pop	{r5, r6, r7}
10001416:	46ba      	mov	sl, r7
10001418:	46b1      	mov	r9, r6
1000141a:	46a8      	mov	r8, r5
1000141c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
1000141e:	4643      	mov	r3, r8
10001420:	2b01      	cmp	r3, #1
10001422:	d1cf      	bne.n	100013c4 <clock_configure+0x40>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001424:	23c0      	movs	r3, #192	; 0xc0
10001426:	2203      	movs	r2, #3
10001428:	019b      	lsls	r3, r3, #6
1000142a:	4323      	orrs	r3, r4
1000142c:	601a      	str	r2, [r3, #0]
        while (!(clock->selected & 1u))
1000142e:	3a02      	subs	r2, #2
10001430:	68a3      	ldr	r3, [r4, #8]
10001432:	421a      	tst	r2, r3
10001434:	d0fc      	beq.n	10001430 <clock_configure+0xac>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001436:	23e0      	movs	r3, #224	; 0xe0
10001438:	6822      	ldr	r2, [r4, #0]
    hw_write_masked(&clock->ctrl,
1000143a:	017f      	lsls	r7, r7, #5
1000143c:	4057      	eors	r7, r2
1000143e:	401f      	ands	r7, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001440:	2380      	movs	r3, #128	; 0x80
10001442:	015b      	lsls	r3, r3, #5
10001444:	4323      	orrs	r3, r4
10001446:	4e0a      	ldr	r6, [pc, #40]	; (10001470 <clock_configure+0xec>)
10001448:	601f      	str	r7, [r3, #0]
    return clk_index == clk_sys || clk_index == clk_ref;
1000144a:	00ad      	lsls	r5, r5, #2
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000144c:	4642      	mov	r2, r8
1000144e:	6821      	ldr	r1, [r4, #0]
10001450:	4051      	eors	r1, r2
10001452:	2203      	movs	r2, #3
10001454:	400a      	ands	r2, r1
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001456:	601a      	str	r2, [r3, #0]
        while (!(clock->selected & (1u << src)))
10001458:	2201      	movs	r2, #1
1000145a:	4643      	mov	r3, r8
1000145c:	409a      	lsls	r2, r3
1000145e:	68a3      	ldr	r3, [r4, #8]
10001460:	421a      	tst	r2, r3
10001462:	d0fc      	beq.n	1000145e <clock_configure+0xda>
10001464:	e7cb      	b.n	100013fe <clock_configure+0x7a>
        return false;
10001466:	2000      	movs	r0, #0
10001468:	e7d4      	b.n	10001414 <clock_configure+0x90>
1000146a:	46c0      	nop			; (mov r8, r8)
1000146c:	40008000 	.word	0x40008000
10001470:	2003dc1c 	.word	0x2003dc1c

10001474 <clocks_init>:
/// \end::clock_configure[]

void clocks_init(void) {
10001474:	b530      	push	{r4, r5, lr}
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
10001476:	200c      	movs	r0, #12
void clocks_init(void) {
10001478:	b083      	sub	sp, #12
    watchdog_start_tick(XOSC_MHZ);
1000147a:	f002 f9a9 	bl	100037d0 <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
1000147e:	f001 f83d 	bl	100024fc <running_on_fpga>
10001482:	2800      	cmp	r0, #0
10001484:	d00e      	beq.n	100014a4 <clocks_init+0x30>
        for (uint i = 0; i < CLK_COUNT; i++) {
            configured_freq[i] = 48 * MHZ;
10001486:	4b9a      	ldr	r3, [pc, #616]	; (100016f0 <clocks_init+0x27c>)
10001488:	4a9a      	ldr	r2, [pc, #616]	; (100016f4 <clocks_init+0x280>)
1000148a:	601a      	str	r2, [r3, #0]
1000148c:	605a      	str	r2, [r3, #4]
1000148e:	609a      	str	r2, [r3, #8]
10001490:	60da      	str	r2, [r3, #12]
10001492:	611a      	str	r2, [r3, #16]
10001494:	615a      	str	r2, [r3, #20]
10001496:	619a      	str	r2, [r3, #24]
10001498:	61da      	str	r2, [r3, #28]
1000149a:	621a      	str	r2, [r3, #32]
        }
        configured_freq[clk_rtc] = 46875;
1000149c:	4a96      	ldr	r2, [pc, #600]	; (100016f8 <clocks_init+0x284>)
1000149e:	625a      	str	r2, [r3, #36]	; 0x24
    clock_configure(clk_peri,
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * MHZ,
                    125 * MHZ);
}
100014a0:	b003      	add	sp, #12
100014a2:	bd30      	pop	{r4, r5, pc}
    clocks_hw->resus.ctrl = 0;
100014a4:	4c95      	ldr	r4, [pc, #596]	; (100016fc <clocks_init+0x288>)
100014a6:	67a0      	str	r0, [r4, #120]	; 0x78
    xosc_init();
100014a8:	f002 f99a 	bl	100037e0 <xosc_init>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100014ac:	2201      	movs	r2, #1
100014ae:	4b94      	ldr	r3, [pc, #592]	; (10001700 <clocks_init+0x28c>)
100014b0:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_sys].selected != 0x1)
100014b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
100014b4:	2b01      	cmp	r3, #1
100014b6:	d1fc      	bne.n	100014b2 <clocks_init+0x3e>
100014b8:	2203      	movs	r2, #3
100014ba:	4b92      	ldr	r3, [pc, #584]	; (10001704 <clocks_init+0x290>)
100014bc:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_ref].selected != 0x1)
100014be:	4a8f      	ldr	r2, [pc, #572]	; (100016fc <clocks_init+0x288>)
100014c0:	6b93      	ldr	r3, [r2, #56]	; 0x38
100014c2:	2b01      	cmp	r3, #1
100014c4:	d1fc      	bne.n	100014c0 <clocks_init+0x4c>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100014c6:	22c0      	movs	r2, #192	; 0xc0
100014c8:	4b8f      	ldr	r3, [pc, #572]	; (10001708 <clocks_init+0x294>)
100014ca:	0192      	lsls	r2, r2, #6
100014cc:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100014ce:	4b8f      	ldr	r3, [pc, #572]	; (1000170c <clocks_init+0x298>)
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
100014d0:	498f      	ldr	r1, [pc, #572]	; (10001710 <clocks_init+0x29c>)
100014d2:	601a      	str	r2, [r3, #0]
100014d4:	0010      	movs	r0, r2
100014d6:	688b      	ldr	r3, [r1, #8]
100014d8:	4398      	bics	r0, r3
100014da:	1e03      	subs	r3, r0, #0
100014dc:	d1fa      	bne.n	100014d4 <clocks_init+0x60>
    pll_init(pll_sys, 1, 1500 * MHZ, 6, 2);
100014de:	2402      	movs	r4, #2
100014e0:	2101      	movs	r1, #1
100014e2:	4a8c      	ldr	r2, [pc, #560]	; (10001714 <clocks_init+0x2a0>)
100014e4:	488c      	ldr	r0, [pc, #560]	; (10001718 <clocks_init+0x2a4>)
100014e6:	3306      	adds	r3, #6
100014e8:	9400      	str	r4, [sp, #0]
100014ea:	f001 f80f 	bl	1000250c <pll_init>
    pll_init(pll_usb, 1, 480 * MHZ, 5, 2);
100014ee:	2305      	movs	r3, #5
100014f0:	4a8a      	ldr	r2, [pc, #552]	; (1000171c <clocks_init+0x2a8>)
100014f2:	2101      	movs	r1, #1
100014f4:	488a      	ldr	r0, [pc, #552]	; (10001720 <clocks_init+0x2ac>)
100014f6:	9400      	str	r4, [sp, #0]
100014f8:	f001 f808 	bl	1000250c <pll_init>
    if (div > clock->div)
100014fc:	4b89      	ldr	r3, [pc, #548]	; (10001724 <clocks_init+0x2b0>)
100014fe:	685a      	ldr	r2, [r3, #4]
10001500:	2aff      	cmp	r2, #255	; 0xff
10001502:	d802      	bhi.n	1000150a <clocks_init+0x96>
        clock->div = div;
10001504:	2280      	movs	r2, #128	; 0x80
10001506:	0052      	lsls	r2, r2, #1
10001508:	605a      	str	r2, [r3, #4]
1000150a:	2280      	movs	r2, #128	; 0x80
        if (configured_freq[clk_index] > 0) {
1000150c:	4c78      	ldr	r4, [pc, #480]	; (100016f0 <clocks_init+0x27c>)
1000150e:	4b7d      	ldr	r3, [pc, #500]	; (10001704 <clocks_init+0x290>)
10001510:	6921      	ldr	r1, [r4, #16]
10001512:	0112      	lsls	r2, r2, #4
10001514:	4d83      	ldr	r5, [pc, #524]	; (10001724 <clocks_init+0x2b0>)
10001516:	601a      	str	r2, [r3, #0]
10001518:	2900      	cmp	r1, #0
1000151a:	d005      	beq.n	10001528 <clocks_init+0xb4>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
1000151c:	6960      	ldr	r0, [r4, #20]
1000151e:	f7fe ff29 	bl	10000374 <__wrap___aeabi_uidiv>
10001522:	3001      	adds	r0, #1
            asm volatile (
10001524:	3801      	subs	r0, #1
10001526:	d1fd      	bne.n	10001524 <clocks_init+0xb0>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001528:	21e0      	movs	r1, #224	; 0xe0
1000152a:	4b7e      	ldr	r3, [pc, #504]	; (10001724 <clocks_init+0x2b0>)
1000152c:	2002      	movs	r0, #2
1000152e:	681a      	ldr	r2, [r3, #0]
10001530:	4011      	ands	r1, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001532:	2280      	movs	r2, #128	; 0x80
10001534:	0152      	lsls	r2, r2, #5
10001536:	432a      	orrs	r2, r5
10001538:	6011      	str	r1, [r2, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000153a:	6819      	ldr	r1, [r3, #0]
1000153c:	4048      	eors	r0, r1
1000153e:	2103      	movs	r1, #3
10001540:	4001      	ands	r1, r0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001542:	6011      	str	r1, [r2, #0]
        while (!(clock->selected & (1u << src)))
10001544:	2104      	movs	r1, #4
10001546:	689a      	ldr	r2, [r3, #8]
10001548:	4211      	tst	r1, r2
1000154a:	d0fc      	beq.n	10001546 <clocks_init+0xd2>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000154c:	2280      	movs	r2, #128	; 0x80
1000154e:	2180      	movs	r1, #128	; 0x80
10001550:	0192      	lsls	r2, r2, #6
10001552:	432a      	orrs	r2, r5
10001554:	0109      	lsls	r1, r1, #4
10001556:	6011      	str	r1, [r2, #0]
    clock->div = div;
10001558:	2280      	movs	r2, #128	; 0x80
1000155a:	0052      	lsls	r2, r2, #1
1000155c:	605a      	str	r2, [r3, #4]
    configured_freq[clk_index] = freq;
1000155e:	4b72      	ldr	r3, [pc, #456]	; (10001728 <clocks_init+0x2b4>)
10001560:	6123      	str	r3, [r4, #16]
    if (div > clock->div)
10001562:	4b72      	ldr	r3, [pc, #456]	; (1000172c <clocks_init+0x2b8>)
10001564:	6859      	ldr	r1, [r3, #4]
10001566:	29ff      	cmp	r1, #255	; 0xff
10001568:	d800      	bhi.n	1000156c <clocks_init+0xf8>
        clock->div = div;
1000156a:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000156c:	2103      	movs	r1, #3
1000156e:	4a64      	ldr	r2, [pc, #400]	; (10001700 <clocks_init+0x28c>)
10001570:	4b6e      	ldr	r3, [pc, #440]	; (1000172c <clocks_init+0x2b8>)
10001572:	6011      	str	r1, [r2, #0]
        while (!(clock->selected & 1u))
10001574:	3902      	subs	r1, #2
10001576:	689a      	ldr	r2, [r3, #8]
10001578:	4211      	tst	r1, r2
1000157a:	d0fc      	beq.n	10001576 <clocks_init+0x102>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000157c:	20e0      	movs	r0, #224	; 0xe0
1000157e:	681a      	ldr	r2, [r3, #0]
10001580:	4010      	ands	r0, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001582:	2280      	movs	r2, #128	; 0x80
10001584:	0152      	lsls	r2, r2, #5
10001586:	431a      	orrs	r2, r3
10001588:	6010      	str	r0, [r2, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000158a:	6818      	ldr	r0, [r3, #0]
1000158c:	4048      	eors	r0, r1
1000158e:	2103      	movs	r1, #3
10001590:	4001      	ands	r1, r0
        while (!(clock->selected & (1u << src)))
10001592:	2002      	movs	r0, #2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001594:	6011      	str	r1, [r2, #0]
10001596:	4965      	ldr	r1, [pc, #404]	; (1000172c <clocks_init+0x2b8>)
10001598:	688a      	ldr	r2, [r1, #8]
1000159a:	4210      	tst	r0, r2
1000159c:	d0fc      	beq.n	10001598 <clocks_init+0x124>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000159e:	2280      	movs	r2, #128	; 0x80
100015a0:	0192      	lsls	r2, r2, #6
100015a2:	4313      	orrs	r3, r2
100015a4:	2280      	movs	r2, #128	; 0x80
100015a6:	0112      	lsls	r2, r2, #4
100015a8:	601a      	str	r2, [r3, #0]
    clock->div = div;
100015aa:	2280      	movs	r2, #128	; 0x80
    configured_freq[clk_index] = freq;
100015ac:	4b60      	ldr	r3, [pc, #384]	; (10001730 <clocks_init+0x2bc>)
    clock->div = div;
100015ae:	0052      	lsls	r2, r2, #1
100015b0:	604a      	str	r2, [r1, #4]
    configured_freq[clk_index] = freq;
100015b2:	6163      	str	r3, [r4, #20]
    if (div > clock->div)
100015b4:	4b5f      	ldr	r3, [pc, #380]	; (10001734 <clocks_init+0x2c0>)
100015b6:	6859      	ldr	r1, [r3, #4]
100015b8:	29ff      	cmp	r1, #255	; 0xff
100015ba:	d800      	bhi.n	100015be <clocks_init+0x14a>
        clock->div = div;
100015bc:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100015be:	2280      	movs	r2, #128	; 0x80
100015c0:	4b5d      	ldr	r3, [pc, #372]	; (10001738 <clocks_init+0x2c4>)
        if (configured_freq[clk_index] > 0) {
100015c2:	69e1      	ldr	r1, [r4, #28]
100015c4:	0112      	lsls	r2, r2, #4
100015c6:	4d5b      	ldr	r5, [pc, #364]	; (10001734 <clocks_init+0x2c0>)
100015c8:	601a      	str	r2, [r3, #0]
100015ca:	2900      	cmp	r1, #0
100015cc:	d005      	beq.n	100015da <clocks_init+0x166>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
100015ce:	6960      	ldr	r0, [r4, #20]
100015d0:	f7fe fed0 	bl	10000374 <__wrap___aeabi_uidiv>
100015d4:	3001      	adds	r0, #1
            asm volatile (
100015d6:	3801      	subs	r0, #1
100015d8:	d1fd      	bne.n	100015d6 <clocks_init+0x162>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100015da:	22e0      	movs	r2, #224	; 0xe0
100015dc:	4955      	ldr	r1, [pc, #340]	; (10001734 <clocks_init+0x2c0>)
100015de:	680b      	ldr	r3, [r1, #0]
100015e0:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100015e2:	2380      	movs	r3, #128	; 0x80
100015e4:	015b      	lsls	r3, r3, #5
100015e6:	432b      	orrs	r3, r5
100015e8:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100015ea:	2380      	movs	r3, #128	; 0x80
100015ec:	2280      	movs	r2, #128	; 0x80
100015ee:	019b      	lsls	r3, r3, #6
100015f0:	432b      	orrs	r3, r5
100015f2:	0112      	lsls	r2, r2, #4
100015f4:	601a      	str	r2, [r3, #0]
    clock->div = div;
100015f6:	2280      	movs	r2, #128	; 0x80
    configured_freq[clk_index] = freq;
100015f8:	4b3e      	ldr	r3, [pc, #248]	; (100016f4 <clocks_init+0x280>)
    clock->div = div;
100015fa:	0052      	lsls	r2, r2, #1
100015fc:	604a      	str	r2, [r1, #4]
    configured_freq[clk_index] = freq;
100015fe:	61e3      	str	r3, [r4, #28]
    if (div > clock->div)
10001600:	4b4e      	ldr	r3, [pc, #312]	; (1000173c <clocks_init+0x2c8>)
10001602:	6859      	ldr	r1, [r3, #4]
10001604:	29ff      	cmp	r1, #255	; 0xff
10001606:	d800      	bhi.n	1000160a <clocks_init+0x196>
        clock->div = div;
10001608:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000160a:	2280      	movs	r2, #128	; 0x80
1000160c:	4b4c      	ldr	r3, [pc, #304]	; (10001740 <clocks_init+0x2cc>)
        if (configured_freq[clk_index] > 0) {
1000160e:	6a21      	ldr	r1, [r4, #32]
10001610:	0112      	lsls	r2, r2, #4
10001612:	4d4a      	ldr	r5, [pc, #296]	; (1000173c <clocks_init+0x2c8>)
10001614:	601a      	str	r2, [r3, #0]
10001616:	2900      	cmp	r1, #0
10001618:	d005      	beq.n	10001626 <clocks_init+0x1b2>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
1000161a:	6960      	ldr	r0, [r4, #20]
1000161c:	f7fe feaa 	bl	10000374 <__wrap___aeabi_uidiv>
10001620:	3001      	adds	r0, #1
            asm volatile (
10001622:	3801      	subs	r0, #1
10001624:	d1fd      	bne.n	10001622 <clocks_init+0x1ae>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001626:	22e0      	movs	r2, #224	; 0xe0
10001628:	4944      	ldr	r1, [pc, #272]	; (1000173c <clocks_init+0x2c8>)
1000162a:	680b      	ldr	r3, [r1, #0]
1000162c:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000162e:	2380      	movs	r3, #128	; 0x80
10001630:	015b      	lsls	r3, r3, #5
10001632:	432b      	orrs	r3, r5
10001634:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001636:	2380      	movs	r3, #128	; 0x80
10001638:	2280      	movs	r2, #128	; 0x80
1000163a:	019b      	lsls	r3, r3, #6
1000163c:	432b      	orrs	r3, r5
1000163e:	0112      	lsls	r2, r2, #4
10001640:	601a      	str	r2, [r3, #0]
    clock->div = div;
10001642:	2380      	movs	r3, #128	; 0x80
    if (div > clock->div)
10001644:	2280      	movs	r2, #128	; 0x80
    clock->div = div;
10001646:	005b      	lsls	r3, r3, #1
10001648:	604b      	str	r3, [r1, #4]
    configured_freq[clk_index] = freq;
1000164a:	4b2a      	ldr	r3, [pc, #168]	; (100016f4 <clocks_init+0x280>)
    if (div > clock->div)
1000164c:	02d2      	lsls	r2, r2, #11
    configured_freq[clk_index] = freq;
1000164e:	6223      	str	r3, [r4, #32]
    if (div > clock->div)
10001650:	4b3c      	ldr	r3, [pc, #240]	; (10001744 <clocks_init+0x2d0>)
10001652:	6859      	ldr	r1, [r3, #4]
10001654:	4291      	cmp	r1, r2
10001656:	d200      	bcs.n	1000165a <clocks_init+0x1e6>
        clock->div = div;
10001658:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000165a:	2280      	movs	r2, #128	; 0x80
1000165c:	4b3a      	ldr	r3, [pc, #232]	; (10001748 <clocks_init+0x2d4>)
        if (configured_freq[clk_index] > 0) {
1000165e:	6a61      	ldr	r1, [r4, #36]	; 0x24
10001660:	0112      	lsls	r2, r2, #4
10001662:	4d38      	ldr	r5, [pc, #224]	; (10001744 <clocks_init+0x2d0>)
10001664:	601a      	str	r2, [r3, #0]
10001666:	2900      	cmp	r1, #0
10001668:	d005      	beq.n	10001676 <clocks_init+0x202>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
1000166a:	6960      	ldr	r0, [r4, #20]
1000166c:	f7fe fe82 	bl	10000374 <__wrap___aeabi_uidiv>
10001670:	3001      	adds	r0, #1
            asm volatile (
10001672:	3801      	subs	r0, #1
10001674:	d1fd      	bne.n	10001672 <clocks_init+0x1fe>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001676:	22e0      	movs	r2, #224	; 0xe0
10001678:	4932      	ldr	r1, [pc, #200]	; (10001744 <clocks_init+0x2d0>)
1000167a:	680b      	ldr	r3, [r1, #0]
1000167c:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000167e:	2380      	movs	r3, #128	; 0x80
10001680:	015b      	lsls	r3, r3, #5
10001682:	432b      	orrs	r3, r5
10001684:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001686:	2380      	movs	r3, #128	; 0x80
10001688:	2280      	movs	r2, #128	; 0x80
1000168a:	019b      	lsls	r3, r3, #6
1000168c:	432b      	orrs	r3, r5
1000168e:	0112      	lsls	r2, r2, #4
10001690:	601a      	str	r2, [r3, #0]
    clock->div = div;
10001692:	2380      	movs	r3, #128	; 0x80
10001694:	02db      	lsls	r3, r3, #11
10001696:	604b      	str	r3, [r1, #4]
    configured_freq[clk_index] = freq;
10001698:	4b17      	ldr	r3, [pc, #92]	; (100016f8 <clocks_init+0x284>)
1000169a:	6263      	str	r3, [r4, #36]	; 0x24
    if (div > clock->div)
1000169c:	4b2b      	ldr	r3, [pc, #172]	; (1000174c <clocks_init+0x2d8>)
1000169e:	685a      	ldr	r2, [r3, #4]
100016a0:	2aff      	cmp	r2, #255	; 0xff
100016a2:	d802      	bhi.n	100016aa <clocks_init+0x236>
        clock->div = div;
100016a4:	2280      	movs	r2, #128	; 0x80
100016a6:	0052      	lsls	r2, r2, #1
100016a8:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100016aa:	2280      	movs	r2, #128	; 0x80
100016ac:	4b28      	ldr	r3, [pc, #160]	; (10001750 <clocks_init+0x2dc>)
        if (configured_freq[clk_index] > 0) {
100016ae:	69a1      	ldr	r1, [r4, #24]
100016b0:	0112      	lsls	r2, r2, #4
100016b2:	4d26      	ldr	r5, [pc, #152]	; (1000174c <clocks_init+0x2d8>)
100016b4:	601a      	str	r2, [r3, #0]
100016b6:	2900      	cmp	r1, #0
100016b8:	d005      	beq.n	100016c6 <clocks_init+0x252>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
100016ba:	6960      	ldr	r0, [r4, #20]
100016bc:	f7fe fe5a 	bl	10000374 <__wrap___aeabi_uidiv>
100016c0:	3001      	adds	r0, #1
            asm volatile (
100016c2:	3801      	subs	r0, #1
100016c4:	d1fd      	bne.n	100016c2 <clocks_init+0x24e>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100016c6:	22e0      	movs	r2, #224	; 0xe0
100016c8:	4920      	ldr	r1, [pc, #128]	; (1000174c <clocks_init+0x2d8>)
100016ca:	680b      	ldr	r3, [r1, #0]
100016cc:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100016ce:	2380      	movs	r3, #128	; 0x80
100016d0:	015b      	lsls	r3, r3, #5
100016d2:	432b      	orrs	r3, r5
100016d4:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100016d6:	2380      	movs	r3, #128	; 0x80
100016d8:	2280      	movs	r2, #128	; 0x80
100016da:	019b      	lsls	r3, r3, #6
100016dc:	432b      	orrs	r3, r5
100016de:	0112      	lsls	r2, r2, #4
100016e0:	601a      	str	r2, [r3, #0]
    clock->div = div;
100016e2:	2380      	movs	r3, #128	; 0x80
100016e4:	005b      	lsls	r3, r3, #1
100016e6:	604b      	str	r3, [r1, #4]
    configured_freq[clk_index] = freq;
100016e8:	4b11      	ldr	r3, [pc, #68]	; (10001730 <clocks_init+0x2bc>)
100016ea:	61a3      	str	r3, [r4, #24]
    return true;
100016ec:	e6d8      	b.n	100014a0 <clocks_init+0x2c>
100016ee:	46c0      	nop			; (mov r8, r8)
100016f0:	2003dc1c 	.word	0x2003dc1c
100016f4:	02dc6c00 	.word	0x02dc6c00
100016f8:	0000b71b 	.word	0x0000b71b
100016fc:	40008000 	.word	0x40008000
10001700:	4000b03c 	.word	0x4000b03c
10001704:	4000b030 	.word	0x4000b030
10001708:	4000e000 	.word	0x4000e000
1000170c:	4000f000 	.word	0x4000f000
10001710:	4000c000 	.word	0x4000c000
10001714:	59682f00 	.word	0x59682f00
10001718:	40028000 	.word	0x40028000
1000171c:	1c9c3800 	.word	0x1c9c3800
10001720:	4002c000 	.word	0x4002c000
10001724:	40008030 	.word	0x40008030
10001728:	00b71b00 	.word	0x00b71b00
1000172c:	4000803c 	.word	0x4000803c
10001730:	07735940 	.word	0x07735940
10001734:	40008054 	.word	0x40008054
10001738:	4000b054 	.word	0x4000b054
1000173c:	40008060 	.word	0x40008060
10001740:	4000b060 	.word	0x4000b060
10001744:	4000806c 	.word	0x4000806c
10001748:	4000b06c 	.word	0x4000b06c
1000174c:	40008048 	.word	0x40008048
10001750:	4000b048 	.word	0x4000b048

10001754 <clock_get_hz>:

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(enum clock_index clk_index) {
    return configured_freq[clk_index];
10001754:	4b01      	ldr	r3, [pc, #4]	; (1000175c <clock_get_hz+0x8>)
10001756:	0080      	lsls	r0, r0, #2
10001758:	58c0      	ldr	r0, [r0, r3]
}
1000175a:	4770      	bx	lr
1000175c:	2003dc1c 	.word	0x2003dc1c

10001760 <critical_section_init>:

#if !PICO_NO_HARDWARE
static_assert(sizeof(critical_section_t) == 8, "");
#endif

void critical_section_init(critical_section_t *critsec) {
10001760:	b510      	push	{r4, lr}
10001762:	0004      	movs	r4, r0
    critical_section_init_with_lock_num(critsec, spin_lock_claim_unused(true));
10001764:	2001      	movs	r0, #1
10001766:	f001 fae3 	bl	10002d30 <spin_lock_claim_unused>
1000176a:	0001      	movs	r1, r0
}

void critical_section_init_with_lock_num(critical_section_t *critsec, uint lock_num) {
    lock_init(&critsec->core, lock_num);
1000176c:	0020      	movs	r0, r4
1000176e:	f000 fb5b 	bl	10001e28 <lock_init>
    __asm volatile ("dmb");
10001772:	f3bf 8f5f 	dmb	sy
}
10001776:	bd10      	pop	{r4, pc}

10001778 <__aeabi_double_init>:

bool running_on_fpga();
uint8_t rp2040_chip_version();

static inline uint8_t rp2040_rom_version() {
    return *(uint8_t*)0x13;
10001778:	2313      	movs	r3, #19
    panic("missing double function");
}
#endif
extern void double_table_shim_on_use_helper();

void __aeabi_double_init() {
1000177a:	b570      	push	{r4, r5, r6, lr}
    int rom_version = rp2040_rom_version();
1000177c:	781d      	ldrb	r5, [r3, #0]
#if PICO_DOUBLE_SUPPORT_ROM_V1
    if (rom_version == 1) {
1000177e:	2d01      	cmp	r5, #1
10001780:	d010      	beq.n	100017a4 <__aeabi_double_init+0x2c>
        for(uint i=0;i<SF_TABLE_V2_SIZE/4;i++) {
            sd_table[i] = (uintptr_t)missing_double_func_shim;
        }
    }
#endif
    if (rom_version >= 2) {
10001782:	dd0b      	ble.n	1000179c <__aeabi_double_init+0x24>
        void *rom_table = rom_data_lookup(rom_table_code('S', 'D'));
10001784:	4819      	ldr	r0, [pc, #100]	; (100017ec <__aeabi_double_init+0x74>)
10001786:	f7ff fd43 	bl	10001210 <rom_data_lookup>
        assert(*((uint8_t *)(((void *)rom_data_lookup(rom_table_code('S', 'F')))-2)) * 4 >= SF_TABLE_V2_SIZE);
        memcpy(&sd_table, rom_table, SF_TABLE_V2_SIZE);
1000178a:	4c19      	ldr	r4, [pc, #100]	; (100017f0 <__aeabi_double_init+0x78>)
        void *rom_table = rom_data_lookup(rom_table_code('S', 'D'));
1000178c:	0001      	movs	r1, r0
        memcpy(&sd_table, rom_table, SF_TABLE_V2_SIZE);
1000178e:	2280      	movs	r2, #128	; 0x80
10001790:	0020      	movs	r0, r4
10001792:	f7ff fd15 	bl	100011c0 <__wrap___aeabi_memcpy>
                panic(NULL);
            }
#endif
        }
    }
    if (rom_version < 3) {
10001796:	2d02      	cmp	r5, #2
10001798:	d001      	beq.n	1000179e <__aeabi_double_init+0x26>
        // we use the unused entry for SINCOS
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
    }
}
1000179a:	bd70      	pop	{r4, r5, r6, pc}
1000179c:	4c14      	ldr	r4, [pc, #80]	; (100017f0 <__aeabi_double_init+0x78>)
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
1000179e:	4b15      	ldr	r3, [pc, #84]	; (100017f4 <__aeabi_double_init+0x7c>)
100017a0:	64a3      	str	r3, [r4, #72]	; 0x48
}
100017a2:	e7fa      	b.n	1000179a <__aeabi_double_init+0x22>
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
100017a4:	4b13      	ldr	r3, [pc, #76]	; (100017f4 <__aeabi_double_init+0x7c>)
            sd_table[i] = (uintptr_t)double_table_shim_on_use_helper;
100017a6:	4c12      	ldr	r4, [pc, #72]	; (100017f0 <__aeabi_double_init+0x78>)
100017a8:	6023      	str	r3, [r4, #0]
100017aa:	6063      	str	r3, [r4, #4]
100017ac:	60a3      	str	r3, [r4, #8]
100017ae:	60e3      	str	r3, [r4, #12]
100017b0:	6123      	str	r3, [r4, #16]
100017b2:	6163      	str	r3, [r4, #20]
100017b4:	61a3      	str	r3, [r4, #24]
100017b6:	61e3      	str	r3, [r4, #28]
100017b8:	6223      	str	r3, [r4, #32]
100017ba:	6263      	str	r3, [r4, #36]	; 0x24
100017bc:	62a3      	str	r3, [r4, #40]	; 0x28
100017be:	62e3      	str	r3, [r4, #44]	; 0x2c
100017c0:	6323      	str	r3, [r4, #48]	; 0x30
100017c2:	6363      	str	r3, [r4, #52]	; 0x34
100017c4:	63a3      	str	r3, [r4, #56]	; 0x38
100017c6:	63e3      	str	r3, [r4, #60]	; 0x3c
100017c8:	6423      	str	r3, [r4, #64]	; 0x40
100017ca:	6463      	str	r3, [r4, #68]	; 0x44
100017cc:	64a3      	str	r3, [r4, #72]	; 0x48
100017ce:	64e3      	str	r3, [r4, #76]	; 0x4c
100017d0:	6523      	str	r3, [r4, #80]	; 0x50
100017d2:	6563      	str	r3, [r4, #84]	; 0x54
100017d4:	65a3      	str	r3, [r4, #88]	; 0x58
100017d6:	65e3      	str	r3, [r4, #92]	; 0x5c
100017d8:	6623      	str	r3, [r4, #96]	; 0x60
100017da:	6663      	str	r3, [r4, #100]	; 0x64
100017dc:	66a3      	str	r3, [r4, #104]	; 0x68
100017de:	66e3      	str	r3, [r4, #108]	; 0x6c
100017e0:	6723      	str	r3, [r4, #112]	; 0x70
100017e2:	6763      	str	r3, [r4, #116]	; 0x74
100017e4:	67a3      	str	r3, [r4, #120]	; 0x78
100017e6:	67e3      	str	r3, [r4, #124]	; 0x7c
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
100017e8:	64a3      	str	r3, [r4, #72]	; 0x48
100017ea:	e7d6      	b.n	1000179a <__aeabi_double_init+0x22>
100017ec:	00004453 	.word	0x00004453
100017f0:	20003418 	.word	0x20003418
100017f4:	10000971 	.word	0x10000971

100017f8 <flash_get_unique_id>:
// Use standard RUID command to get a unique identifier for the flash (and
// hence the board)

static_assert(FLASH_UNIQUE_ID_SIZE_BYTES == FLASH_RUID_DATA_BYTES, "");

void flash_get_unique_id(uint8_t *id_out) {
100017f8:	b530      	push	{r4, r5, lr}
#if PICO_NO_FLASH
    panic_unsupported();
#else
    uint8_t txbuf[FLASH_RUID_TOTAL_BYTES] = {0};
100017fa:	2500      	movs	r5, #0
void flash_get_unique_id(uint8_t *id_out) {
100017fc:	b089      	sub	sp, #36	; 0x24
100017fe:	0004      	movs	r4, r0
    uint8_t txbuf[FLASH_RUID_TOTAL_BYTES] = {0};
10001800:	2209      	movs	r2, #9
10001802:	2100      	movs	r1, #0
10001804:	a801      	add	r0, sp, #4
10001806:	9500      	str	r5, [sp, #0]
10001808:	f7ff fcd4 	bl	100011b4 <__wrap_memset>
    uint8_t rxbuf[FLASH_RUID_TOTAL_BYTES] = {0};
1000180c:	2209      	movs	r2, #9
1000180e:	2100      	movs	r1, #0
10001810:	a805      	add	r0, sp, #20
10001812:	9504      	str	r5, [sp, #16]
10001814:	f7ff fcce 	bl	100011b4 <__wrap_memset>
    txbuf[0] = FLASH_RUID_CMD;
10001818:	234b      	movs	r3, #75	; 0x4b
1000181a:	466a      	mov	r2, sp
    flash_do_cmd(txbuf, rxbuf, FLASH_RUID_TOTAL_BYTES);
1000181c:	4668      	mov	r0, sp
    txbuf[0] = FLASH_RUID_CMD;
1000181e:	7013      	strb	r3, [r2, #0]
    flash_do_cmd(txbuf, rxbuf, FLASH_RUID_TOTAL_BYTES);
10001820:	a904      	add	r1, sp, #16
10001822:	f008 fd65 	bl	1000a2f0 <__flash_do_cmd.constprop.0_veneer>
    for (int i = 0; i < FLASH_RUID_DATA_BYTES; i++)
        id_out[i] = rxbuf[i + 1 + FLASH_RUID_DUMMY_BYTES];
10001826:	2115      	movs	r1, #21
10001828:	2208      	movs	r2, #8
1000182a:	0020      	movs	r0, r4
1000182c:	4469      	add	r1, sp
1000182e:	f7ff fcc7 	bl	100011c0 <__wrap___aeabi_memcpy>
#endif
}
10001832:	b009      	add	sp, #36	; 0x24
10001834:	bd30      	pop	{r4, r5, pc}
10001836:	46c0      	nop			; (mov r8, r8)

10001838 <__aeabi_float_init>:
10001838:	2313      	movs	r3, #19
static __attribute__((noreturn)) void missing_float_func_shim() {
    panic("");
}
#endif

void __aeabi_float_init() {
1000183a:	b510      	push	{r4, lr}
    int rom_version = rp2040_rom_version();
    void *rom_table = rom_data_lookup(rom_table_code('S', 'F'));
1000183c:	4812      	ldr	r0, [pc, #72]	; (10001888 <__aeabi_float_init+0x50>)
    int rom_version = rp2040_rom_version();
1000183e:	781c      	ldrb	r4, [r3, #0]
    void *rom_table = rom_data_lookup(rom_table_code('S', 'F'));
10001840:	f7ff fce6 	bl	10001210 <rom_data_lookup>
10001844:	0001      	movs	r1, r0
#if PICO_FLOAT_SUPPORT_ROM_V1
    if (rom_version == 1) {
10001846:	2c01      	cmp	r4, #1
10001848:	d00a      	beq.n	10001860 <__aeabi_float_init+0x28>
        for(uint i=0;i<SF_TABLE_V2_SIZE/4;i++) {
            if (!sf_table[i]) sf_table[i] = (uintptr_t)missing_float_func_shim;
        }
    }
#endif
    if (rom_version >= 2) {
1000184a:	dd03      	ble.n	10001854 <__aeabi_float_init+0x1c>
        assert(*((uint8_t *)(rom_table-2)) * 4 >= SF_TABLE_V2_SIZE);
        memcpy(&sf_table, rom_table, SF_TABLE_V2_SIZE);
1000184c:	2280      	movs	r2, #128	; 0x80
1000184e:	480f      	ldr	r0, [pc, #60]	; (1000188c <__aeabi_float_init+0x54>)
10001850:	f7ff fcb6 	bl	100011c0 <__wrap___aeabi_memcpy>
    }
    sf_clz_func = rom_func_lookup(rom_table_code('L', '3'));
10001854:	480e      	ldr	r0, [pc, #56]	; (10001890 <__aeabi_float_init+0x58>)
10001856:	f7ff fcd3 	bl	10001200 <rom_func_lookup>
1000185a:	4b0e      	ldr	r3, [pc, #56]	; (10001894 <__aeabi_float_init+0x5c>)
1000185c:	6018      	str	r0, [r3, #0]
}
1000185e:	bd10      	pop	{r4, pc}
        memcpy(&sf_table, rom_table, SF_TABLE_V1_SIZE);
10001860:	4c0a      	ldr	r4, [pc, #40]	; (1000188c <__aeabi_float_init+0x54>)
10001862:	2254      	movs	r2, #84	; 0x54
10001864:	0020      	movs	r0, r4
10001866:	f7ff fcab 	bl	100011c0 <__wrap___aeabi_memcpy>
            sf_table[i] = (uintptr_t)float_table_shim_on_use_helper;
1000186a:	4b0b      	ldr	r3, [pc, #44]	; (10001898 <__aeabi_float_init+0x60>)
1000186c:	6563      	str	r3, [r4, #84]	; 0x54
1000186e:	65a3      	str	r3, [r4, #88]	; 0x58
10001870:	65e3      	str	r3, [r4, #92]	; 0x5c
10001872:	6623      	str	r3, [r4, #96]	; 0x60
10001874:	6663      	str	r3, [r4, #100]	; 0x64
10001876:	66a3      	str	r3, [r4, #104]	; 0x68
10001878:	66e3      	str	r3, [r4, #108]	; 0x6c
1000187a:	6723      	str	r3, [r4, #112]	; 0x70
1000187c:	6763      	str	r3, [r4, #116]	; 0x74
1000187e:	67a3      	str	r3, [r4, #120]	; 0x78
10001880:	67e3      	str	r3, [r4, #124]	; 0x7c
        sf_table[SF_TABLE_FLOAT2INT/4] = sf_table[SF_TABLE_FLOAT2FIX/4] = (uintptr_t)float_table_shim_on_use_helper;
10001882:	6223      	str	r3, [r4, #32]
10001884:	61e3      	str	r3, [r4, #28]
    if (rom_version >= 2) {
10001886:	e7e5      	b.n	10001854 <__aeabi_float_init+0x1c>
10001888:	00004653 	.word	0x00004653
1000188c:	20003518 	.word	0x20003518
10001890:	0000334c 	.word	0x0000334c
10001894:	2003e320 	.word	0x2003e320
10001898:	100010a9 	.word	0x100010a9

1000189c <__wrap_remquof>:
    mx=frem_0(mx,my,ex-ey,0);
    if(sx) mx=-mx;
    return fix2float(mx,0x7f-ey+23);
}

float WRAPPER_FUNC(remquof)(float x,float y,int*quo) {
1000189c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000189e:	4645      	mov	r5, r8
100018a0:	4657      	mov	r7, sl
100018a2:	464e      	mov	r6, r9
100018a4:	46de      	mov	lr, fp
100018a6:	b5e0      	push	{r5, r6, r7, lr}
    check_nan_f2(x,y);
    ui32 ix=*(ui32*)&x,iy=*(ui32*)&y;
    int sx,sy,ex,ey,q;
    i32 mx,my;
    FUNPACKS(ix,sx,ex,mx);
100018a8:	26ff      	movs	r6, #255	; 0xff
float WRAPPER_FUNC(remquof)(float x,float y,int*quo) {
100018aa:	4688      	mov	r8, r1
    FUNPACKS(ix,sx,ex,mx);
100018ac:	0dc5      	lsrs	r5, r0, #23
    FUNPACKS(iy,sy,ey,my);
100018ae:	0dc9      	lsrs	r1, r1, #23
    FUNPACKS(ix,sx,ex,mx);
100018b0:	4035      	ands	r5, r6
float WRAPPER_FUNC(remquof)(float x,float y,int*quo) {
100018b2:	0017      	movs	r7, r2
100018b4:	1c04      	adds	r4, r0, #0
    FUNPACKS(iy,sy,ey,my);
100018b6:	400e      	ands	r6, r1
    if(quo) *quo=0;
100018b8:	2a00      	cmp	r2, #0
100018ba:	d001      	beq.n	100018c0 <__wrap_remquof+0x24>
100018bc:	2300      	movs	r3, #0
100018be:	6013      	str	r3, [r2, #0]
    if(ex==0xff) return PINF;
100018c0:	2dff      	cmp	r5, #255	; 0xff
100018c2:	d060      	beq.n	10001986 <__wrap_remquof+0xea>
    if(ey==0)    return PINF;
100018c4:	2e00      	cmp	r6, #0
100018c6:	d05e      	beq.n	10001986 <__wrap_remquof+0xea>
    if(ex==0)    return PZERO;
100018c8:	2d00      	cmp	r5, #0
100018ca:	d05f      	beq.n	1000198c <__wrap_remquof+0xf0>
    if(ey==0xff) return x;
100018cc:	1c20      	adds	r0, r4, #0
100018ce:	2eff      	cmp	r6, #255	; 0xff
100018d0:	d053      	beq.n	1000197a <__wrap_remquof+0xde>
    if(ex<ey-1)  return x;  // |x|<|y|/2
100018d2:	1e73      	subs	r3, r6, #1
100018d4:	42ab      	cmp	r3, r5
100018d6:	dc50      	bgt.n	1000197a <__wrap_remquof+0xde>
    FUNPACKS(ix,sx,ex,mx);
100018d8:	0fe2      	lsrs	r2, r4, #31
100018da:	4694      	mov	ip, r2
100018dc:	2280      	movs	r2, #128	; 0x80
100018de:	0412      	lsls	r2, r2, #16
100018e0:	4691      	mov	r9, r2
100018e2:	0264      	lsls	r4, r4, #9
100018e4:	0a64      	lsrs	r4, r4, #9
100018e6:	4314      	orrs	r4, r2
    FUNPACKS(iy,sy,ey,my);
100018e8:	4642      	mov	r2, r8
100018ea:	4649      	mov	r1, r9
100018ec:	0252      	lsls	r2, r2, #9
100018ee:	0a52      	lsrs	r2, r2, #9
100018f0:	4311      	orrs	r1, r2
100018f2:	4689      	mov	r9, r1
    if(ex==ey-1) {
100018f4:	42ab      	cmp	r3, r5
100018f6:	d051      	beq.n	1000199c <__wrap_remquof+0x100>
            ey--;
            q=-1;
        }
    }
    else {
        if(sx) mx=-mx;
100018f8:	4663      	mov	r3, ip
100018fa:	2b00      	cmp	r3, #0
100018fc:	d058      	beq.n	100019b0 <__wrap_remquof+0x114>
    if(e>0) {
100018fe:	2100      	movs	r1, #0
        if(sx) mx=-mx;
10001900:	4264      	negs	r4, r4
        mx=frem_0(mx,my,ex-ey,&q);
10001902:	1bad      	subs	r5, r5, r6
    if(e>0) {
10001904:	2d00      	cmp	r5, #0
10001906:	dd5c      	ble.n	100019c2 <__wrap_remquof+0x126>
        r=0xffffffffU/(ui32)(my>>7);  // reciprocal estimate Q16
10001908:	464b      	mov	r3, r9
1000190a:	2001      	movs	r0, #1
1000190c:	11d9      	asrs	r1, r3, #7
1000190e:	4240      	negs	r0, r0
10001910:	f7fe fd30 	bl	10000374 <__wrap___aeabi_uidiv>
        q=((q>>(29-s))+1)>>1;  // Q(s), rounded
10001914:	231d      	movs	r3, #29
        r=0xffffffffU/(ui32)(my>>7);  // reciprocal estimate Q16
10001916:	4683      	mov	fp, r0
10001918:	2100      	movs	r1, #0
        q=((q>>(29-s))+1)>>1;  // Q(s), rounded
1000191a:	469c      	mov	ip, r3
        s=e; if(s>12) s=12;    // gain up to 12 bits on each iteration
1000191c:	002a      	movs	r2, r5
1000191e:	2d0c      	cmp	r5, #12
10001920:	dd00      	ble.n	10001924 <__wrap_remquof+0x88>
10001922:	220c      	movs	r2, #12
        q=(mx>>9)*r;           // Q30
10001924:	4658      	mov	r0, fp
10001926:	1263      	asrs	r3, r4, #9
        mx=(mx<<s)-my*q;
10001928:	4094      	lsls	r4, r2
        q=(mx>>9)*r;           // Q30
1000192a:	4343      	muls	r3, r0
        q=((q>>(29-s))+1)>>1;  // Q(s), rounded
1000192c:	4660      	mov	r0, ip
        mx=(mx<<s)-my*q;
1000192e:	46a2      	mov	sl, r4
        q=((q>>(29-s))+1)>>1;  // Q(s), rounded
10001930:	1a80      	subs	r0, r0, r2
10001932:	4103      	asrs	r3, r0
        mx=(mx<<s)-my*q;
10001934:	464c      	mov	r4, r9
10001936:	4650      	mov	r0, sl
        quo=(quo<<s)+q;
10001938:	4091      	lsls	r1, r2
        q=((q>>(29-s))+1)>>1;  // Q(s), rounded
1000193a:	3301      	adds	r3, #1
1000193c:	105b      	asrs	r3, r3, #1
        mx=(mx<<s)-my*q;
1000193e:	435c      	muls	r4, r3
        quo=(quo<<s)+q;
10001940:	1859      	adds	r1, r3, r1
        mx=(mx<<s)-my*q;
10001942:	1b04      	subs	r4, r0, r4
        e-=s;
10001944:	1aad      	subs	r5, r5, r2
    while(e>0) {
10001946:	2d00      	cmp	r5, #0
10001948:	dce8      	bgt.n	1000191c <__wrap_remquof+0x80>
    if(mx>=my) mx-=my,quo++; // when e==0 mx can be nearly as big as 2my
1000194a:	45a1      	cmp	r9, r4
1000194c:	dc37      	bgt.n	100019be <__wrap_remquof+0x122>
1000194e:	464b      	mov	r3, r9
10001950:	1ae4      	subs	r4, r4, r3
    if(mx>=my) mx-=my,quo++;
10001952:	45a1      	cmp	r9, r4
10001954:	dc46      	bgt.n	100019e4 <__wrap_remquof+0x148>
10001956:	1ae4      	subs	r4, r4, r3
10001958:	3102      	adds	r1, #2
        if(mx+mx>my || (mx+mx==my&&(q&1)) ) { // |x|>|y|/2, or equality and an odd quotient?
1000195a:	0063      	lsls	r3, r4, #1
1000195c:	454b      	cmp	r3, r9
1000195e:	dc19      	bgt.n	10001994 <__wrap_remquof+0xf8>
10001960:	d016      	beq.n	10001990 <__wrap_remquof+0xf4>
            mx-=my;
            q++;
        }
    }
    if(sy) q=-q;
10001962:	4643      	mov	r3, r8
10001964:	2b00      	cmp	r3, #0
10001966:	da00      	bge.n	1000196a <__wrap_remquof+0xce>
10001968:	4249      	negs	r1, r1
    if(quo) *quo=q;
1000196a:	2f00      	cmp	r7, #0
1000196c:	d000      	beq.n	10001970 <__wrap_remquof+0xd4>
1000196e:	6039      	str	r1, [r7, #0]
    return fix2float(mx,0x7f-ey+23);
10001970:	2196      	movs	r1, #150	; 0x96
10001972:	0020      	movs	r0, r4
10001974:	1b89      	subs	r1, r1, r6
10001976:	f7ff fb37 	bl	10000fe8 <fix2float>
}
1000197a:	bcf0      	pop	{r4, r5, r6, r7}
1000197c:	46bb      	mov	fp, r7
1000197e:	46b2      	mov	sl, r6
10001980:	46a9      	mov	r9, r5
10001982:	46a0      	mov	r8, r4
10001984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ex==0xff) return PINF;
10001986:	20ff      	movs	r0, #255	; 0xff
10001988:	05c0      	lsls	r0, r0, #23
1000198a:	e7f6      	b.n	1000197a <__wrap_remquof+0xde>
    if(ex==0)    return PZERO;
1000198c:	2000      	movs	r0, #0
1000198e:	e7f4      	b.n	1000197a <__wrap_remquof+0xde>
        if(mx+mx>my || (mx+mx==my&&(q&1)) ) { // |x|>|y|/2, or equality and an odd quotient?
10001990:	07cb      	lsls	r3, r1, #31
10001992:	d5e6      	bpl.n	10001962 <__wrap_remquof+0xc6>
            mx-=my;
10001994:	464b      	mov	r3, r9
            q++;
10001996:	3101      	adds	r1, #1
            mx-=my;
10001998:	1ae4      	subs	r4, r4, r3
            q++;
1000199a:	e7e2      	b.n	10001962 <__wrap_remquof+0xc6>
        if(mx<=my) return x;  // |x|<=|y|/2, even quotient
1000199c:	428c      	cmp	r4, r1
1000199e:	ddec      	ble.n	1000197a <__wrap_remquof+0xde>
        if(!sx) { // x>|y|/2
100019a0:	4663      	mov	r3, ip
100019a2:	2b00      	cmp	r3, #0
100019a4:	d113      	bne.n	100019ce <__wrap_remquof+0x132>
            mx-=my+my;
100019a6:	004b      	lsls	r3, r1, #1
100019a8:	002e      	movs	r6, r5
            q=1;
100019aa:	2101      	movs	r1, #1
            mx-=my+my;
100019ac:	1ae4      	subs	r4, r4, r3
            q=1;
100019ae:	e7d8      	b.n	10001962 <__wrap_remquof+0xc6>
        mx=frem_0(mx,my,ex-ey,&q);
100019b0:	1bad      	subs	r5, r5, r6
    if(e>0) {
100019b2:	2d00      	cmp	r5, #0
100019b4:	dca8      	bgt.n	10001908 <__wrap_remquof+0x6c>
    if(mx>=my) mx-=my,quo++; // when e==0 mx can be nearly as big as 2my
100019b6:	428c      	cmp	r4, r1
100019b8:	da11      	bge.n	100019de <__wrap_remquof+0x142>
100019ba:	2100      	movs	r1, #0
100019bc:	e7cd      	b.n	1000195a <__wrap_remquof+0xbe>
    if(mx<0) mx+=my,quo--;
100019be:	2c00      	cmp	r4, #0
100019c0:	dacb      	bge.n	1000195a <__wrap_remquof+0xbe>
    if(mx<0) mx+=my,quo--;
100019c2:	464b      	mov	r3, r9
100019c4:	18e4      	adds	r4, r4, r3
100019c6:	d508      	bpl.n	100019da <__wrap_remquof+0x13e>
100019c8:	444c      	add	r4, r9
100019ca:	3902      	subs	r1, #2
100019cc:	e7c5      	b.n	1000195a <__wrap_remquof+0xbe>
            mx=my+my-mx;
100019ce:	004b      	lsls	r3, r1, #1
            q=-1;
100019d0:	2101      	movs	r1, #1
            mx=my+my-mx;
100019d2:	002e      	movs	r6, r5
100019d4:	1b1c      	subs	r4, r3, r4
            q=-1;
100019d6:	4249      	negs	r1, r1
100019d8:	e7c3      	b.n	10001962 <__wrap_remquof+0xc6>
    if(mx<0) mx+=my,quo--;
100019da:	3901      	subs	r1, #1
100019dc:	e7bd      	b.n	1000195a <__wrap_remquof+0xbe>
    if(mx>=my) mx-=my,quo++; // when e==0 mx can be nearly as big as 2my
100019de:	464b      	mov	r3, r9
100019e0:	2100      	movs	r1, #0
100019e2:	1ae4      	subs	r4, r4, r3
100019e4:	3101      	adds	r1, #1
100019e6:	e7b8      	b.n	1000195a <__wrap_remquof+0xbe>

100019e8 <__wrap_remainderf>:
100019e8:	b510      	push	{r4, lr}
100019ea:	2200      	movs	r2, #0
100019ec:	f7ff ff56 	bl	1000189c <__wrap_remquof>
100019f0:	bd10      	pop	{r4, pc}
100019f2:	46c0      	nop			; (mov r8, r8)

100019f4 <gpio_set_function>:
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, enum gpio_function fn) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    invalid_params_if(GPIO, fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&padsbank0_hw->io[gpio],
100019f4:	4a09      	ldr	r2, [pc, #36]	; (10001a1c <gpio_set_function+0x28>)
100019f6:	0083      	lsls	r3, r0, #2
100019f8:	4694      	mov	ip, r2
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100019fa:	2240      	movs	r2, #64	; 0x40
100019fc:	4463      	add	r3, ip
void gpio_set_function(uint gpio, enum gpio_function fn) {
100019fe:	b510      	push	{r4, lr}
10001a00:	681c      	ldr	r4, [r3, #0]
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
10001a02:	00c0      	lsls	r0, r0, #3
10001a04:	4062      	eors	r2, r4
10001a06:	24c0      	movs	r4, #192	; 0xc0
10001a08:	4014      	ands	r4, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001a0a:	2280      	movs	r2, #128	; 0x80
10001a0c:	0152      	lsls	r2, r2, #5
10001a0e:	4313      	orrs	r3, r2
10001a10:	601c      	str	r4, [r3, #0]
10001a12:	4b03      	ldr	r3, [pc, #12]	; (10001a20 <gpio_set_function+0x2c>)
10001a14:	469c      	mov	ip, r3
10001a16:	4460      	add	r0, ip
10001a18:	6041      	str	r1, [r0, #4]
}
10001a1a:	bd10      	pop	{r4, pc}
10001a1c:	4001c004 	.word	0x4001c004
10001a20:	40014000 	.word	0x40014000

10001a24 <gpio_set_pulls>:

// Note that, on RP2040, setting both pulls enables a "bus keep" function,
// i.e. weak pull to whatever is current high/low state of GPIO.
void gpio_set_pulls(uint gpio, bool up, bool down) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(
10001a24:	4b0a      	ldr	r3, [pc, #40]	; (10001a50 <gpio_set_pulls+0x2c>)
10001a26:	0080      	lsls	r0, r0, #2
10001a28:	469c      	mov	ip, r3
            &padsbank0_hw->io[gpio],
            (!!up << PADS_BANK0_GPIO0_PUE_LSB) | (!!down << PADS_BANK0_GPIO0_PDE_LSB),
10001a2a:	2304      	movs	r3, #4
    hw_write_masked(
10001a2c:	4460      	add	r0, ip
            (!!up << PADS_BANK0_GPIO0_PUE_LSB) | (!!down << PADS_BANK0_GPIO0_PDE_LSB),
10001a2e:	2900      	cmp	r1, #0
10001a30:	d001      	beq.n	10001a36 <gpio_set_pulls+0x12>
10001a32:	2108      	movs	r1, #8
10001a34:	230c      	movs	r3, #12
10001a36:	2a00      	cmp	r2, #0
10001a38:	d100      	bne.n	10001a3c <gpio_set_pulls+0x18>
10001a3a:	000b      	movs	r3, r1
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001a3c:	6802      	ldr	r2, [r0, #0]
10001a3e:	4053      	eors	r3, r2
10001a40:	220c      	movs	r2, #12
10001a42:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001a44:	2380      	movs	r3, #128	; 0x80
10001a46:	015b      	lsls	r3, r3, #5
10001a48:	4318      	orrs	r0, r3
10001a4a:	6002      	str	r2, [r0, #0]
            PADS_BANK0_GPIO0_PUE_BITS | PADS_BANK0_GPIO0_PDE_BITS
    );
}
10001a4c:	4770      	bx	lr
10001a4e:	46c0      	nop			; (mov r8, r8)
10001a50:	4001c004 	.word	0x4001c004

10001a54 <gpio_set_outover>:
    );
}

void gpio_set_outover(uint gpio, uint value) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(&iobank0_hw->io[gpio].ctrl,
10001a54:	4b07      	ldr	r3, [pc, #28]	; (10001a74 <gpio_set_outover+0x20>)
10001a56:	00c0      	lsls	r0, r0, #3
10001a58:	469c      	mov	ip, r3
10001a5a:	4460      	add	r0, ip
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001a5c:	6803      	ldr	r3, [r0, #0]
                   value << IO_BANK0_GPIO0_CTRL_OUTOVER_LSB,
10001a5e:	0209      	lsls	r1, r1, #8
10001a60:	4059      	eors	r1, r3
10001a62:	23c0      	movs	r3, #192	; 0xc0
10001a64:	009b      	lsls	r3, r3, #2
10001a66:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001a68:	2380      	movs	r3, #128	; 0x80
10001a6a:	015b      	lsls	r3, r3, #5
10001a6c:	4318      	orrs	r0, r3
10001a6e:	6001      	str	r1, [r0, #0]
                   IO_BANK0_GPIO0_CTRL_OUTOVER_BITS
    );
}
10001a70:	4770      	bx	lr
10001a72:	46c0      	nop			; (mov r8, r8)
10001a74:	40014004 	.word	0x40014004

10001a78 <gpio_init>:
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
}

void gpio_init(uint gpio) {
    sio_hw->gpio_oe_clr = 1ul << gpio;
10001a78:	2301      	movs	r3, #1
10001a7a:	22d0      	movs	r2, #208	; 0xd0
10001a7c:	4083      	lsls	r3, r0
10001a7e:	0612      	lsls	r2, r2, #24
10001a80:	6293      	str	r3, [r2, #40]	; 0x28
    sio_hw->gpio_clr = 1ul << gpio;
10001a82:	6193      	str	r3, [r2, #24]
    hw_write_masked(&padsbank0_hw->io[gpio],
10001a84:	4a09      	ldr	r2, [pc, #36]	; (10001aac <gpio_init+0x34>)
10001a86:	0083      	lsls	r3, r0, #2
10001a88:	4694      	mov	ip, r2
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001a8a:	2240      	movs	r2, #64	; 0x40
10001a8c:	4463      	add	r3, ip
10001a8e:	6819      	ldr	r1, [r3, #0]
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
10001a90:	00c0      	lsls	r0, r0, #3
10001a92:	404a      	eors	r2, r1
10001a94:	21c0      	movs	r1, #192	; 0xc0
10001a96:	4011      	ands	r1, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001a98:	2280      	movs	r2, #128	; 0x80
10001a9a:	0152      	lsls	r2, r2, #5
10001a9c:	4313      	orrs	r3, r2
10001a9e:	6019      	str	r1, [r3, #0]
10001aa0:	4b03      	ldr	r3, [pc, #12]	; (10001ab0 <gpio_init+0x38>)
10001aa2:	469c      	mov	ip, r3
10001aa4:	2305      	movs	r3, #5
10001aa6:	4460      	add	r0, ip
10001aa8:	6043      	str	r3, [r0, #4]
    gpio_set_function(gpio, GPIO_FUNC_SIO);
}
10001aaa:	4770      	bx	lr
10001aac:	4001c004 	.word	0x4001c004
10001ab0:	40014000 	.word	0x40014000

10001ab4 <irq_set_enabled>:
    invalid_params_if(IRQ, num >= NUM_IRQS);
}

void irq_set_enabled(uint num, bool enabled) {
    check_irq_param(num);
    irq_set_mask_enabled(1u << num, enabled);
10001ab4:	2301      	movs	r3, #1
10001ab6:	4083      	lsls	r3, r0
    check_irq_param(num);
    return 0 != ((1u << num) & *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)));
}

void irq_set_mask_enabled(uint32_t mask, bool enabled) {
    if (enabled) {
10001ab8:	2900      	cmp	r1, #0
10001aba:	d004      	beq.n	10001ac6 <irq_set_enabled+0x12>
        // Clear pending before enable
        // (if IRQ is actually asserted, it will immediately re-pend)
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICPR_OFFSET)) = mask;
10001abc:	4a03      	ldr	r2, [pc, #12]	; (10001acc <irq_set_enabled+0x18>)
10001abe:	6013      	str	r3, [r2, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)) = mask;
10001ac0:	4a03      	ldr	r2, [pc, #12]	; (10001ad0 <irq_set_enabled+0x1c>)
10001ac2:	6013      	str	r3, [r2, #0]
}
10001ac4:	4770      	bx	lr
    } else {
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
10001ac6:	4a03      	ldr	r2, [pc, #12]	; (10001ad4 <irq_set_enabled+0x20>)
10001ac8:	6013      	str	r3, [r2, #0]
}
10001aca:	e7fb      	b.n	10001ac4 <irq_set_enabled+0x10>
10001acc:	e000e280 	.word	0xe000e280
10001ad0:	e000e100 	.word	0xe000e100
10001ad4:	e000e180 	.word	0xe000e180

10001ad8 <irq_set_pending>:
    }
}

void irq_set_pending(uint num) {
    check_irq_param(num);
    *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISPR_OFFSET)) = 1u << num;
10001ad8:	2301      	movs	r3, #1
10001ada:	4083      	lsls	r3, r0
10001adc:	4a01      	ldr	r2, [pc, #4]	; (10001ae4 <irq_set_pending+0xc>)
10001ade:	6013      	str	r3, [r2, #0]
}
10001ae0:	4770      	bx	lr
10001ae2:	46c0      	nop			; (mov r8, r8)
10001ae4:	e000e200 	.word	0xe000e200

10001ae8 <irq_get_vtable_handler>:
    return (irq_handler_t *) scb_hw->vtor;
10001ae8:	4b02      	ldr	r3, [pc, #8]	; (10001af4 <irq_get_vtable_handler+0xc>)
    return (uintptr_t)raw_handler - (uintptr_t)irq_handler_chain_slots < sizeof(irq_handler_chain_slots);
}

irq_handler_t irq_get_vtable_handler(uint num) {
    check_irq_param(num);
    return get_vtable()[16 + num];
10001aea:	3010      	adds	r0, #16
    return (irq_handler_t *) scb_hw->vtor;
10001aec:	689b      	ldr	r3, [r3, #8]
    return get_vtable()[16 + num];
10001aee:	0080      	lsls	r0, r0, #2
10001af0:	58c0      	ldr	r0, [r0, r3]
}
10001af2:	4770      	bx	lr
10001af4:	e000ed00 	.word	0xe000ed00

10001af8 <irq_set_exclusive_handler>:

void irq_set_exclusive_handler(uint num, irq_handler_t handler) {
10001af8:	b570      	push	{r4, r5, r6, lr}
10001afa:	000d      	movs	r5, r1
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001afc:	f3ef 8610 	mrs	r6, PRIMASK
    __asm volatile ("cpsid i");
10001b00:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10001b02:	4a0f      	ldr	r2, [pc, #60]	; (10001b40 <irq_set_exclusive_handler+0x48>)
10001b04:	6813      	ldr	r3, [r2, #0]
10001b06:	2b00      	cmp	r3, #0
10001b08:	d0fc      	beq.n	10001b04 <irq_set_exclusive_handler+0xc>
    __asm volatile ("dmb");
10001b0a:	f3bf 8f5f 	dmb	sy
    return (irq_handler_t *) scb_hw->vtor;
10001b0e:	4b0d      	ldr	r3, [pc, #52]	; (10001b44 <irq_set_exclusive_handler+0x4c>)
    return get_vtable()[16 + num];
10001b10:	3010      	adds	r0, #16
    return (irq_handler_t *) scb_hw->vtor;
10001b12:	689b      	ldr	r3, [r3, #8]
    return get_vtable()[16 + num];
10001b14:	0084      	lsls	r4, r0, #2
10001b16:	591b      	ldr	r3, [r3, r4]
    check_irq_param(num);
#if !PICO_NO_RAM_VECTOR_TABLE
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
    uint32_t save = spin_lock_blocking(lock);
    __unused irq_handler_t current = irq_get_vtable_handler(num);
    hard_assert(current == __unhandled_user_irq || current == handler);
10001b18:	4a0b      	ldr	r2, [pc, #44]	; (10001b48 <irq_set_exclusive_handler+0x50>)
10001b1a:	4293      	cmp	r3, r2
10001b1c:	d003      	beq.n	10001b26 <irq_set_exclusive_handler+0x2e>
10001b1e:	429d      	cmp	r5, r3
10001b20:	d001      	beq.n	10001b26 <irq_set_exclusive_handler+0x2e>

#ifdef NDEBUG
extern void hard_assertion_failure();
static inline void hard_assert(bool condition, ...) {
    if (!condition)
        hard_assertion_failure();
10001b22:	f000 fdeb 	bl	100026fc <hard_assertion_failure>
    return (irq_handler_t *) scb_hw->vtor;
10001b26:	4b07      	ldr	r3, [pc, #28]	; (10001b44 <irq_set_exclusive_handler+0x4c>)
10001b28:	689b      	ldr	r3, [r3, #8]
    get_vtable()[16 + num] = handler;
10001b2a:	511d      	str	r5, [r3, r4]
10001b2c:	f3bf 8f5f 	dmb	sy
10001b30:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001b34:	2200      	movs	r2, #0
10001b36:	4b02      	ldr	r3, [pc, #8]	; (10001b40 <irq_set_exclusive_handler+0x48>)
10001b38:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001b3a:	f386 8810 	msr	PRIMASK, r6
    set_raw_irq_handler_and_unlock(num, handler, save);
#else
    panic_unsupported();
#endif
}
10001b3e:	bd70      	pop	{r4, r5, r6, pc}
10001b40:	d0000124 	.word	0xd0000124
10001b44:	e000ed00 	.word	0xe000ed00
10001b48:	100001cd 	.word	0x100001cd

10001b4c <irq_remove_handler>:
    }
    set_raw_irq_handler_and_unlock(num, vtable_handler, save);
#endif
}

void irq_remove_handler(uint num, irq_handler_t handler) {
10001b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10001b4e:	46de      	mov	lr, fp
10001b50:	4657      	mov	r7, sl
10001b52:	464e      	mov	r6, r9
10001b54:	4645      	mov	r5, r8
10001b56:	b5e0      	push	{r5, r6, r7, lr}
10001b58:	000c      	movs	r4, r1
10001b5a:	b083      	sub	sp, #12
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001b5c:	f3ef 8a10 	mrs	sl, PRIMASK
    __asm volatile ("cpsid i");
10001b60:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10001b62:	4a5e      	ldr	r2, [pc, #376]	; (10001cdc <irq_remove_handler+0x190>)
10001b64:	6813      	ldr	r3, [r2, #0]
10001b66:	2b00      	cmp	r3, #0
10001b68:	d0fc      	beq.n	10001b64 <irq_remove_handler+0x18>
    __asm volatile ("dmb");
10001b6a:	f3bf 8f5f 	dmb	sy
#if !PICO_NO_RAM_VECTOR_TABLE
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
    uint32_t save = spin_lock_blocking(lock);
    irq_handler_t vtable_handler = get_vtable()[16 + num];
10001b6e:	2210      	movs	r2, #16
10001b70:	4691      	mov	r9, r2
10001b72:	4481      	add	r9, r0
10001b74:	464a      	mov	r2, r9
    return (irq_handler_t *) scb_hw->vtor;
10001b76:	4b5a      	ldr	r3, [pc, #360]	; (10001ce0 <irq_remove_handler+0x194>)
    irq_handler_t vtable_handler = get_vtable()[16 + num];
10001b78:	0096      	lsls	r6, r2, #2
    return (irq_handler_t *) scb_hw->vtor;
10001b7a:	689b      	ldr	r3, [r3, #8]
    irq_handler_t vtable_handler = get_vtable()[16 + num];
10001b7c:	599d      	ldr	r5, [r3, r6]
    if (vtable_handler != __unhandled_user_irq && vtable_handler != handler) {
10001b7e:	4b59      	ldr	r3, [pc, #356]	; (10001ce4 <irq_remove_handler+0x198>)
10001b80:	4698      	mov	r8, r3
10001b82:	429d      	cmp	r5, r3
10001b84:	d005      	beq.n	10001b92 <irq_remove_handler+0x46>
10001b86:	42a5      	cmp	r5, r4
10001b88:	d016      	beq.n	10001bb8 <irq_remove_handler+0x6c>
    return (uintptr_t)raw_handler - (uintptr_t)irq_handler_chain_slots < sizeof(irq_handler_chain_slots);
10001b8a:	4f57      	ldr	r7, [pc, #348]	; (10001ce8 <irq_remove_handler+0x19c>)
10001b8c:	1beb      	subs	r3, r5, r7
#if !PICO_DISABLE_SHARED_IRQ_HANDLERS && PICO_MAX_SHARED_IRQ_HANDLERS
        if (is_shared_irq_raw_handler(vtable_handler)) {
10001b8e:	2b2f      	cmp	r3, #47	; 0x2f
10001b90:	d914      	bls.n	10001bbc <irq_remove_handler+0x70>
    return (irq_handler_t *) scb_hw->vtor;
10001b92:	4b53      	ldr	r3, [pc, #332]	; (10001ce0 <irq_remove_handler+0x194>)
10001b94:	689b      	ldr	r3, [r3, #8]
    get_vtable()[16 + num] = handler;
10001b96:	519d      	str	r5, [r3, r6]
10001b98:	f3bf 8f5f 	dmb	sy
10001b9c:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001ba0:	2200      	movs	r2, #0
10001ba2:	4b4e      	ldr	r3, [pc, #312]	; (10001cdc <irq_remove_handler+0x190>)
10001ba4:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001ba6:	f38a 8810 	msr	PRIMASK, sl
    }
    set_raw_irq_handler_and_unlock(num, vtable_handler, save);
#else
    panic_unsupported();
#endif
}
10001baa:	b003      	add	sp, #12
10001bac:	bcf0      	pop	{r4, r5, r6, r7}
10001bae:	46bb      	mov	fp, r7
10001bb0:	46b2      	mov	sl, r6
10001bb2:	46a9      	mov	r9, r5
10001bb4:	46a0      	mov	r8, r4
10001bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vtable_handler = __unhandled_user_irq;
10001bb8:	001d      	movs	r5, r3
10001bba:	e7ea      	b.n	10001b92 <irq_remove_handler+0x46>
    return 0 != ((1u << num) & *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)));
10001bbc:	2301      	movs	r3, #1
10001bbe:	4083      	lsls	r3, r0
10001bc0:	469b      	mov	fp, r3
10001bc2:	465a      	mov	r2, fp
10001bc4:	4b49      	ldr	r3, [pc, #292]	; (10001cec <irq_remove_handler+0x1a0>)
10001bc6:	681b      	ldr	r3, [r3, #0]
10001bc8:	401a      	ands	r2, r3
10001bca:	9200      	str	r2, [sp, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
10001bcc:	465a      	mov	r2, fp
10001bce:	4b48      	ldr	r3, [pc, #288]	; (10001cf0 <irq_remove_handler+0x1a4>)
10001bd0:	601a      	str	r2, [r3, #0]
    __asm volatile ("dmb");
10001bd2:	f3bf 8f5f 	dmb	sy
            uint exception = __get_current_exception();
10001bd6:	f7fe fb46 	bl	10000266 <__get_current_exception>
10001bda:	9001      	str	r0, [sp, #4]
            hard_assert(!exception || exception == num + 16);
10001bdc:	2800      	cmp	r0, #0
10001bde:	d003      	beq.n	10001be8 <irq_remove_handler+0x9c>
10001be0:	4581      	cmp	r9, r0
10001be2:	d001      	beq.n	10001be8 <irq_remove_handler+0x9c>
10001be4:	f000 fd8a 	bl	100026fc <hard_assertion_failure>
    return (void *) (((uintptr_t) addr) & ~0x1);
10001be8:	2301      	movs	r3, #1
10001bea:	0029      	movs	r1, r5
10001bec:	4399      	bics	r1, r3
            while (to_free_slot->handler != handler) {
10001bee:	688b      	ldr	r3, [r1, #8]
10001bf0:	42a3      	cmp	r3, r4
10001bf2:	d068      	beq.n	10001cc6 <irq_remove_handler+0x17a>
10001bf4:	000a      	movs	r2, r1
10001bf6:	e007      	b.n	10001c08 <irq_remove_handler+0xbc>
                to_free_slot = &irq_handler_chain_slots[to_free_slot->link];
10001bf8:	0043      	lsls	r3, r0, #1
10001bfa:	181b      	adds	r3, r3, r0
10001bfc:	009b      	lsls	r3, r3, #2
10001bfe:	18fb      	adds	r3, r7, r3
            while (to_free_slot->handler != handler) {
10001c00:	6898      	ldr	r0, [r3, #8]
10001c02:	42a0      	cmp	r0, r4
10001c04:	d011      	beq.n	10001c2a <irq_remove_handler+0xde>
                to_free_slot = &irq_handler_chain_slots[to_free_slot->link];
10001c06:	001a      	movs	r2, r3
                if (to_free_slot->link < 0) break;
10001c08:	2006      	movs	r0, #6
10001c0a:	5610      	ldrsb	r0, [r2, r0]
10001c0c:	2800      	cmp	r0, #0
10001c0e:	daf3      	bge.n	10001bf8 <irq_remove_handler+0xac>
    if (enabled) {
10001c10:	9b00      	ldr	r3, [sp, #0]
10001c12:	2b00      	cmp	r3, #0
10001c14:	d005      	beq.n	10001c22 <irq_remove_handler+0xd6>
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICPR_OFFSET)) = mask;
10001c16:	465a      	mov	r2, fp
10001c18:	4b36      	ldr	r3, [pc, #216]	; (10001cf4 <irq_remove_handler+0x1a8>)
10001c1a:	601a      	str	r2, [r3, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)) = mask;
10001c1c:	4b33      	ldr	r3, [pc, #204]	; (10001cec <irq_remove_handler+0x1a0>)
10001c1e:	601a      	str	r2, [r3, #0]
10001c20:	e7b7      	b.n	10001b92 <irq_remove_handler+0x46>
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
10001c22:	465a      	mov	r2, fp
10001c24:	4b32      	ldr	r3, [pc, #200]	; (10001cf0 <irq_remove_handler+0x1a4>)
10001c26:	601a      	str	r2, [r3, #0]
10001c28:	e7b3      	b.n	10001b92 <irq_remove_handler+0x46>
                int next_slot_index = to_free_slot->link;
10001c2a:	2006      	movs	r0, #6
10001c2c:	5618      	ldrsb	r0, [r3, r0]
                if (next_slot_index >= 0) {
10001c2e:	2800      	cmp	r0, #0
10001c30:	db21      	blt.n	10001c76 <irq_remove_handler+0x12a>
                    to_free_slot->handler = next_slot->handler;
10001c32:	0042      	lsls	r2, r0, #1
10001c34:	1811      	adds	r1, r2, r0
10001c36:	0089      	lsls	r1, r1, #2
10001c38:	187c      	adds	r4, r7, r1
10001c3a:	4688      	mov	r8, r1
10001c3c:	68a1      	ldr	r1, [r4, #8]
10001c3e:	6099      	str	r1, [r3, #8]
                    to_free_slot->priority = next_slot->priority;
10001c40:	79e1      	ldrb	r1, [r4, #7]
10001c42:	71d9      	strb	r1, [r3, #7]
                    to_free_slot->link = next_slot->link;
10001c44:	2106      	movs	r1, #6
10001c46:	5661      	ldrsb	r1, [r4, r1]
10001c48:	7199      	strb	r1, [r3, #6]
                    to_free_slot->inst3 = next_slot->link >= 0 ?
10001c4a:	2900      	cmp	r1, #0
10001c4c:	db2b      	blt.n	10001ca6 <irq_remove_handler+0x15a>
    int32_t i_addr = (*inst) << 21u;
10001c4e:	88a4      	ldrh	r4, [r4, #4]
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10001c50:	1af9      	subs	r1, r7, r3
    int32_t i_addr = (*inst) << 21u;
10001c52:	0564      	lsls	r4, r4, #21
    return inst + 2 + i_addr;
10001c54:	1524      	asrs	r4, r4, #20
10001c56:	4444      	add	r4, r8
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10001c58:	1909      	adds	r1, r1, r4
    return 0xe000 | (delta & 0x7ff);
10001c5a:	24e0      	movs	r4, #224	; 0xe0
10001c5c:	0509      	lsls	r1, r1, #20
10001c5e:	0d49      	lsrs	r1, r1, #21
10001c60:	0224      	lsls	r4, r4, #8
10001c62:	4321      	orrs	r1, r4
                    to_free_slot->inst3 = next_slot->link >= 0 ?
10001c64:	8099      	strh	r1, [r3, #4]
                    next_slot->link = irq_hander_chain_free_slot_head;
10001c66:	1812      	adds	r2, r2, r0
10001c68:	4b23      	ldr	r3, [pc, #140]	; (10001cf8 <irq_remove_handler+0x1ac>)
10001c6a:	0092      	lsls	r2, r2, #2
10001c6c:	18bf      	adds	r7, r7, r2
10001c6e:	781a      	ldrb	r2, [r3, #0]
                    irq_hander_chain_free_slot_head = next_slot_index;
10001c70:	7018      	strb	r0, [r3, #0]
                    next_slot->link = irq_hander_chain_free_slot_head;
10001c72:	71ba      	strb	r2, [r7, #6]
                    irq_hander_chain_free_slot_head = next_slot_index;
10001c74:	e7cc      	b.n	10001c10 <irq_remove_handler+0xc4>
                    if (!exception) {
10001c76:	9801      	ldr	r0, [sp, #4]
10001c78:	2800      	cmp	r0, #0
10001c7a:	d117      	bne.n	10001cac <irq_remove_handler+0x160>
                            prev_slot->link = -1;
10001c7c:	30ff      	adds	r0, #255	; 0xff
10001c7e:	7190      	strb	r0, [r2, #6]
                            prev_slot->inst3 = 0xbd00; // pop {pc}
10001c80:	481e      	ldr	r0, [pc, #120]	; (10001cfc <irq_remove_handler+0x1b0>)
10001c82:	8090      	strh	r0, [r2, #4]
                        to_free_slot->link = irq_hander_chain_free_slot_head;
10001c84:	4a1c      	ldr	r2, [pc, #112]	; (10001cf8 <irq_remove_handler+0x1ac>)
            int to_free_slot_index = to_free_slot - irq_handler_chain_slots;
10001c86:	1bc9      	subs	r1, r1, r7
                        to_free_slot->link = irq_hander_chain_free_slot_head;
10001c88:	7810      	ldrb	r0, [r2, #0]
            int to_free_slot_index = to_free_slot - irq_handler_chain_slots;
10001c8a:	1089      	asrs	r1, r1, #2
                        to_free_slot->link = irq_hander_chain_free_slot_head;
10001c8c:	7198      	strb	r0, [r3, #6]
            int to_free_slot_index = to_free_slot - irq_handler_chain_slots;
10001c8e:	008b      	lsls	r3, r1, #2
10001c90:	185b      	adds	r3, r3, r1
10001c92:	0118      	lsls	r0, r3, #4
10001c94:	181b      	adds	r3, r3, r0
10001c96:	0218      	lsls	r0, r3, #8
10001c98:	181b      	adds	r3, r3, r0
10001c9a:	0418      	lsls	r0, r3, #16
10001c9c:	181b      	adds	r3, r3, r0
10001c9e:	005b      	lsls	r3, r3, #1
10001ca0:	185b      	adds	r3, r3, r1
                        irq_hander_chain_free_slot_head = to_free_slot_index;
10001ca2:	7013      	strb	r3, [r2, #0]
10001ca4:	e7b4      	b.n	10001c10 <irq_remove_handler+0xc4>
                    to_free_slot->inst3 = next_slot->link >= 0 ?
10001ca6:	21bd      	movs	r1, #189	; 0xbd
10001ca8:	0209      	lsls	r1, r1, #8
10001caa:	e7db      	b.n	10001c64 <irq_remove_handler+0x118>
                        insert_branch_and_link(&to_free_slot->inst3, irq_handler_chain_remove_tail);
10001cac:	4a14      	ldr	r2, [pc, #80]	; (10001d00 <irq_remove_handler+0x1b4>)
    from[0] = 0xf000 | ((delta >> 11u) & 0x7ffu);
10001cae:	4915      	ldr	r1, [pc, #84]	; (10001d04 <irq_remove_handler+0x1b8>)
                        insert_branch_and_link(&to_free_slot->inst3, irq_handler_chain_remove_tail);
10001cb0:	1ad2      	subs	r2, r2, r3
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10001cb2:	3a08      	subs	r2, #8
    from[0] = 0xf000 | ((delta >> 11u) & 0x7ffu);
10001cb4:	0250      	lsls	r0, r2, #9
10001cb6:	0d40      	lsrs	r0, r0, #21
10001cb8:	4301      	orrs	r1, r0
10001cba:	8099      	strh	r1, [r3, #4]
    from[1] = 0xf800 | (delta & 0x7ffu);
10001cbc:	4912      	ldr	r1, [pc, #72]	; (10001d08 <irq_remove_handler+0x1bc>)
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10001cbe:	0852      	lsrs	r2, r2, #1
    from[1] = 0xf800 | (delta & 0x7ffu);
10001cc0:	430a      	orrs	r2, r1
10001cc2:	80da      	strh	r2, [r3, #6]
}
10001cc4:	e7a4      	b.n	10001c10 <irq_remove_handler+0xc4>
                int next_slot_index = to_free_slot->link;
10001cc6:	2006      	movs	r0, #6
10001cc8:	5608      	ldrsb	r0, [r1, r0]
                if (next_slot_index >= 0) {
10001cca:	000b      	movs	r3, r1
10001ccc:	2800      	cmp	r0, #0
10001cce:	dab0      	bge.n	10001c32 <irq_remove_handler+0xe6>
                    if (!exception) {
10001cd0:	9a01      	ldr	r2, [sp, #4]
10001cd2:	2a00      	cmp	r2, #0
10001cd4:	d1ea      	bne.n	10001cac <irq_remove_handler+0x160>
                            vtable_handler = __unhandled_user_irq;
10001cd6:	4645      	mov	r5, r8
10001cd8:	e7d4      	b.n	10001c84 <irq_remove_handler+0x138>
10001cda:	46c0      	nop			; (mov r8, r8)
10001cdc:	d0000124 	.word	0xd0000124
10001ce0:	e000ed00 	.word	0xe000ed00
10001ce4:	100001cd 	.word	0x100001cd
10001ce8:	200026c0 	.word	0x200026c0
10001cec:	e000e100 	.word	0xe000e100
10001cf0:	e000e180 	.word	0xe000e180
10001cf4:	e000e280 	.word	0xe000e280
10001cf8:	2003e346 	.word	0x2003e346
10001cfc:	ffffbd00 	.word	0xffffbd00
10001d00:	200026fa 	.word	0x200026fa
10001d04:	fffff000 	.word	0xfffff000
10001d08:	fffff800 	.word	0xfffff800

10001d0c <irq_set_priority>:

void irq_set_priority(uint num, uint8_t hardware_priority) {
    check_irq_param(num);

    // note that only 32 bit writes are supported
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001d0c:	2303      	movs	r3, #3
void irq_set_priority(uint num, uint8_t hardware_priority) {
10001d0e:	b510      	push	{r4, lr}
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001d10:	0004      	movs	r4, r0
10001d12:	4a07      	ldr	r2, [pc, #28]	; (10001d30 <irq_set_priority+0x24>)
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001d14:	4018      	ands	r0, r3
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001d16:	4694      	mov	ip, r2
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001d18:	00c0      	lsls	r0, r0, #3
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001d1a:	439c      	bics	r4, r3
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001d1c:	33fc      	adds	r3, #252	; 0xfc
10001d1e:	4083      	lsls	r3, r0
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001d20:	4464      	add	r4, ip
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001d22:	6822      	ldr	r2, [r4, #0]
10001d24:	4081      	lsls	r1, r0
10001d26:	439a      	bics	r2, r3
10001d28:	0013      	movs	r3, r2
10001d2a:	430b      	orrs	r3, r1
10001d2c:	6023      	str	r3, [r4, #0]
}
10001d2e:	bd10      	pop	{r4, pc}
10001d30:	e000e400 	.word	0xe000e400

10001d34 <irq_add_tail_to_free_list>:

#if !PICO_DISABLE_SHARED_IRQ_HANDLERS && PICO_MAX_SHARED_IRQ_HANDLERS
// used by irq_handler_chain.S to remove the last link in a handler chain after it executes
// note this must be called only with the last slot in a chain (and during the exception)
void irq_add_tail_to_free_list(struct irq_handler_chain_slot *slot) {
10001d34:	b570      	push	{r4, r5, r6, lr}
    return (void *) (((uintptr_t) addr) | 0x1);
10001d36:	2501      	movs	r5, #1
void irq_add_tail_to_free_list(struct irq_handler_chain_slot *slot) {
10001d38:	0004      	movs	r4, r0
    return (void *) (((uintptr_t) addr) | 0x1);
10001d3a:	4305      	orrs	r5, r0
    irq_handler_t slot_handler = (irq_handler_t) add_thumb_bit(slot);
    assert(is_shared_irq_raw_handler(slot_handler));

    int exception = __get_current_exception();
10001d3c:	f7fe fa93 	bl	10000266 <__get_current_exception>
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001d40:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10001d44:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10001d46:	4a24      	ldr	r2, [pc, #144]	; (10001dd8 <irq_add_tail_to_free_list+0xa4>)
10001d48:	6813      	ldr	r3, [r2, #0]
10001d4a:	2b00      	cmp	r3, #0
10001d4c:	d0fc      	beq.n	10001d48 <irq_add_tail_to_free_list+0x14>
    __asm volatile ("dmb");
10001d4e:	f3bf 8f5f 	dmb	sy
    assert(exception);
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
    uint32_t save = spin_lock_blocking(lock);
    int slot_index = slot - irq_handler_chain_slots;
10001d52:	4e22      	ldr	r6, [pc, #136]	; (10001ddc <irq_add_tail_to_free_list+0xa8>)
    if (slot_handler == get_vtable()[exception]) {
10001d54:	0080      	lsls	r0, r0, #2
    int slot_index = slot - irq_handler_chain_slots;
10001d56:	1ba1      	subs	r1, r4, r6
10001d58:	1089      	asrs	r1, r1, #2
10001d5a:	008a      	lsls	r2, r1, #2
10001d5c:	1852      	adds	r2, r2, r1
10001d5e:	0113      	lsls	r3, r2, #4
10001d60:	18d2      	adds	r2, r2, r3
10001d62:	0213      	lsls	r3, r2, #8
10001d64:	18d2      	adds	r2, r2, r3
10001d66:	0413      	lsls	r3, r2, #16
10001d68:	18d3      	adds	r3, r2, r3
    return (irq_handler_t *) scb_hw->vtor;
10001d6a:	4a1d      	ldr	r2, [pc, #116]	; (10001de0 <irq_add_tail_to_free_list+0xac>)
    int slot_index = slot - irq_handler_chain_slots;
10001d6c:	005b      	lsls	r3, r3, #1
10001d6e:	185b      	adds	r3, r3, r1
    return (irq_handler_t *) scb_hw->vtor;
10001d70:	6891      	ldr	r1, [r2, #8]
    if (slot_handler == get_vtable()[exception]) {
10001d72:	5809      	ldr	r1, [r1, r0]
10001d74:	42a9      	cmp	r1, r5
10001d76:	d01c      	beq.n	10001db2 <irq_add_tail_to_free_list+0x7e>
        get_vtable()[exception] = __unhandled_user_irq;
    } else {
        bool __unused found = false;
        // need to find who points at the slot and update it
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
            if (irq_handler_chain_slots[i].link == slot_index) {
10001d78:	2206      	movs	r2, #6
10001d7a:	56b2      	ldrsb	r2, [r6, r2]
10001d7c:	429a      	cmp	r2, r3
10001d7e:	d01c      	beq.n	10001dba <irq_add_tail_to_free_list+0x86>
10001d80:	2212      	movs	r2, #18
10001d82:	56b2      	ldrsb	r2, [r6, r2]
10001d84:	4293      	cmp	r3, r2
10001d86:	d022      	beq.n	10001dce <irq_add_tail_to_free_list+0x9a>
10001d88:	221e      	movs	r2, #30
10001d8a:	56b2      	ldrsb	r2, [r6, r2]
10001d8c:	4293      	cmp	r3, r2
10001d8e:	d020      	beq.n	10001dd2 <irq_add_tail_to_free_list+0x9e>
10001d90:	222a      	movs	r2, #42	; 0x2a
10001d92:	56b2      	ldrsb	r2, [r6, r2]
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
10001d94:	2103      	movs	r1, #3
            if (irq_handler_chain_slots[i].link == slot_index) {
10001d96:	429a      	cmp	r2, r3
10001d98:	d010      	beq.n	10001dbc <irq_add_tail_to_free_list+0x88>
            }
        }
        assert(found);
    }
    // add slot to free list
    slot->link = irq_hander_chain_free_slot_head;
10001d9a:	4a12      	ldr	r2, [pc, #72]	; (10001de4 <irq_add_tail_to_free_list+0xb0>)
10001d9c:	7811      	ldrb	r1, [r2, #0]
    irq_hander_chain_free_slot_head = slot_index;
10001d9e:	7013      	strb	r3, [r2, #0]
    slot->link = irq_hander_chain_free_slot_head;
10001da0:	71a1      	strb	r1, [r4, #6]
10001da2:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001da6:	2200      	movs	r2, #0
10001da8:	4b0b      	ldr	r3, [pc, #44]	; (10001dd8 <irq_add_tail_to_free_list+0xa4>)
10001daa:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001dac:	f38c 8810 	msr	PRIMASK, ip
    spin_unlock(lock, save);
}
10001db0:	bd70      	pop	{r4, r5, r6, pc}
    return (irq_handler_t *) scb_hw->vtor;
10001db2:	6892      	ldr	r2, [r2, #8]
        get_vtable()[exception] = __unhandled_user_irq;
10001db4:	490c      	ldr	r1, [pc, #48]	; (10001de8 <irq_add_tail_to_free_list+0xb4>)
10001db6:	5011      	str	r1, [r2, r0]
10001db8:	e7ef      	b.n	10001d9a <irq_add_tail_to_free_list+0x66>
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
10001dba:	2100      	movs	r1, #0
                irq_handler_chain_slots[i].link = -1;
10001dbc:	004a      	lsls	r2, r1, #1
10001dbe:	1852      	adds	r2, r2, r1
10001dc0:	21ff      	movs	r1, #255	; 0xff
10001dc2:	0092      	lsls	r2, r2, #2
10001dc4:	18b2      	adds	r2, r6, r2
10001dc6:	7191      	strb	r1, [r2, #6]
                irq_handler_chain_slots[i].inst3 = 0xbd00; // pop {pc}
10001dc8:	4908      	ldr	r1, [pc, #32]	; (10001dec <irq_add_tail_to_free_list+0xb8>)
10001dca:	8091      	strh	r1, [r2, #4]
                break;
10001dcc:	e7e5      	b.n	10001d9a <irq_add_tail_to_free_list+0x66>
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
10001dce:	2101      	movs	r1, #1
10001dd0:	e7f4      	b.n	10001dbc <irq_add_tail_to_free_list+0x88>
10001dd2:	2102      	movs	r1, #2
10001dd4:	e7f2      	b.n	10001dbc <irq_add_tail_to_free_list+0x88>
10001dd6:	46c0      	nop			; (mov r8, r8)
10001dd8:	d0000124 	.word	0xd0000124
10001ddc:	200026c0 	.word	0x200026c0
10001de0:	e000ed00 	.word	0xe000ed00
10001de4:	2003e346 	.word	0x2003e346
10001de8:	100001cd 	.word	0x100001cd
10001dec:	ffffbd00 	.word	0xffffbd00

10001df0 <irq_init_priorities>:
#endif

void irq_init_priorities() {
10001df0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if PICO_DEFAULT_IRQ_PRIORITY != 0
    for (uint irq = 0; irq < NUM_IRQS; irq++) {
10001df2:	2200      	movs	r2, #0
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001df4:	2403      	movs	r4, #3
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001df6:	27ff      	movs	r7, #255	; 0xff
10001df8:	2680      	movs	r6, #128	; 0x80
10001dfa:	0020      	movs	r0, r4
10001dfc:	003d      	movs	r5, r7
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001dfe:	4b09      	ldr	r3, [pc, #36]	; (10001e24 <irq_init_priorities+0x34>)
10001e00:	0011      	movs	r1, r2
10001e02:	469c      	mov	ip, r3
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001e04:	4010      	ands	r0, r2
10001e06:	00c0      	lsls	r0, r0, #3
10001e08:	4085      	lsls	r5, r0
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001e0a:	43a1      	bics	r1, r4
10001e0c:	4461      	add	r1, ip
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001e0e:	680b      	ldr	r3, [r1, #0]
    for (uint irq = 0; irq < NUM_IRQS; irq++) {
10001e10:	3201      	adds	r2, #1
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001e12:	43ab      	bics	r3, r5
10001e14:	0035      	movs	r5, r6
10001e16:	4085      	lsls	r5, r0
10001e18:	432b      	orrs	r3, r5
10001e1a:	600b      	str	r3, [r1, #0]
    for (uint irq = 0; irq < NUM_IRQS; irq++) {
10001e1c:	2a20      	cmp	r2, #32
10001e1e:	d1ec      	bne.n	10001dfa <irq_init_priorities+0xa>
        irq_set_priority(irq, PICO_DEFAULT_IRQ_PRIORITY);
    }
#endif
}
10001e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001e22:	46c0      	nop			; (mov r8, r8)
10001e24:	e000e400 	.word	0xe000e400

10001e28 <lock_init>:
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
10001e28:	4b02      	ldr	r3, [pc, #8]	; (10001e34 <lock_init+0xc>)
10001e2a:	469c      	mov	ip, r3
10001e2c:	4461      	add	r1, ip
10001e2e:	0089      	lsls	r1, r1, #2

#include "pico/lock_core.h"

void lock_init(lock_core_t *core, uint lock_num) {
    assert(lock_num >= 0 && lock_num < NUM_SPIN_LOCKS);
    core->spin_lock = spin_lock_instance(lock_num);
10001e30:	6001      	str	r1, [r0, #0]
}
10001e32:	4770      	bx	lr
10001e34:	34000040 	.word	0x34000040

10001e38 <core1_trampoline>:

// Default stack for core1 ... if multicore_launch_core1 is not included then .stack1 section will be garbage collected
static uint32_t __attribute__((section(".stack1"))) core1_stack[PICO_CORE1_STACK_SIZE / sizeof(uint32_t)];

static void __attribute__ ((naked)) core1_trampoline() {
    __asm("pop {r0, r1, pc}");
10001e38:	bd03      	pop	{r0, r1, pc}
10001e3a:	46c0      	nop			; (mov r8, r8)

10001e3c <core1_wrapper>:
}

int core1_wrapper(int (*entry)(void), void *stack_base) {
10001e3c:	b510      	push	{r4, lr}
10001e3e:	0004      	movs	r4, r0
#if PICO_USE_STACK_GUARDS
    // install core1 stack guard
    runtime_install_stack_guard(stack_base);
#endif
    irq_init_priorities();
10001e40:	f7ff ffd6 	bl	10001df0 <irq_init_priorities>
    return (*entry)();
10001e44:	47a0      	blx	r4
}
10001e46:	bd10      	pop	{r4, pc}

10001e48 <multicore_launch_core1>:
    stack_ptr[1] = (uintptr_t) stack_bottom;
    stack_ptr[2] = (uintptr_t) core1_wrapper;
    multicore_launch_core1_raw(core1_trampoline, stack_ptr, scb_hw->vtor);
}

void multicore_launch_core1(void (*entry)(void)) {
10001e48:	b530      	push	{r4, r5, lr}
    extern char __StackOneBottom;
    uint32_t *stack_limit = (uint32_t *) &__StackOneBottom;
    // hack to reference core1_stack although that pointer is wrong.... core1_stack should always be <= stack_limit, if not boom!
    uint32_t *stack = core1_stack <= stack_limit ? stack_limit : (uint32_t *) -1;
10001e4a:	4a22      	ldr	r2, [pc, #136]	; (10001ed4 <multicore_launch_core1+0x8c>)
10001e4c:	4b22      	ldr	r3, [pc, #136]	; (10001ed8 <multicore_launch_core1+0x90>)
void multicore_launch_core1(void (*entry)(void)) {
10001e4e:	b087      	sub	sp, #28
    uint32_t *stack = core1_stack <= stack_limit ? stack_limit : (uint32_t *) -1;
10001e50:	429a      	cmp	r2, r3
10001e52:	d201      	bcs.n	10001e58 <multicore_launch_core1+0x10>
10001e54:	2201      	movs	r2, #1
10001e56:	4252      	negs	r2, r2
10001e58:	0013      	movs	r3, r2
    stack_ptr[0] = (uintptr_t) entry;
10001e5a:	4920      	ldr	r1, [pc, #128]	; (10001edc <multicore_launch_core1+0x94>)
    multicore_launch_core1_with_stack(entry, stack, sizeof(core1_stack));
}

void multicore_launch_core1_raw(void (*entry)(void), uint32_t *sp, uint32_t vector_table) {
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001e5c:	2400      	movs	r4, #0
    stack_ptr[0] = (uintptr_t) entry;
10001e5e:	5050      	str	r0, [r2, r1]
    stack_ptr[1] = (uintptr_t) stack_bottom;
10001e60:	3104      	adds	r1, #4
10001e62:	5052      	str	r2, [r2, r1]
    stack_ptr[2] = (uintptr_t) core1_wrapper;
10001e64:	4a1e      	ldr	r2, [pc, #120]	; (10001ee0 <multicore_launch_core1+0x98>)
10001e66:	491f      	ldr	r1, [pc, #124]	; (10001ee4 <multicore_launch_core1+0x9c>)
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001e68:	2000      	movs	r0, #0
    stack_ptr[2] = (uintptr_t) core1_wrapper;
10001e6a:	5099      	str	r1, [r3, r2]
    multicore_launch_core1_raw(core1_trampoline, stack_ptr, scb_hw->vtor);
10001e6c:	4a1e      	ldr	r2, [pc, #120]	; (10001ee8 <multicore_launch_core1+0xa0>)
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001e6e:	2100      	movs	r1, #0
    multicore_launch_core1_raw(core1_trampoline, stack_ptr, scb_hw->vtor);
10001e70:	6892      	ldr	r2, [r2, #8]
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001e72:	9000      	str	r0, [sp, #0]
10001e74:	9101      	str	r1, [sp, #4]
10001e76:	9203      	str	r2, [sp, #12]
    stack_ptr -= 3;
10001e78:	4a18      	ldr	r2, [pc, #96]	; (10001edc <multicore_launch_core1+0x94>)
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001e7a:	2101      	movs	r1, #1
    stack_ptr -= 3;
10001e7c:	4694      	mov	ip, r2
10001e7e:	4463      	add	r3, ip
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001e80:	9304      	str	r3, [sp, #16]
10001e82:	4b1a      	ldr	r3, [pc, #104]	; (10001eec <multicore_launch_core1+0xa4>)

    uint seq = 0;
10001e84:	2500      	movs	r5, #0
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001e86:	9305      	str	r3, [sp, #20]
 *  \ingroup multicore_fifo
 *
 * \return true if the FIFO has data in it, false otherwise
 */
static inline bool multicore_fifo_rvalid() {
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_VLD_BITS);
10001e88:	23d0      	movs	r3, #208	; 0xd0
10001e8a:	9102      	str	r1, [sp, #8]
10001e8c:	061b      	lsls	r3, r3, #24
 *  \ingroup multicore_fifo
 *
 *  @return true if the FIFO is full, false otherwise
 */
static inline bool multicore_fifo_wready() {
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_RDY_BITS);
10001e8e:	3002      	adds	r0, #2
    do {
        uint cmd = cmd_sequence[seq];
        // we drain before sending a 0
        if (!cmd) {
10001e90:	2c00      	cmp	r4, #0
10001e92:	d014      	beq.n	10001ebe <multicore_launch_core1+0x76>
10001e94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    while (!multicore_fifo_wready())
10001e96:	4210      	tst	r0, r2
10001e98:	d0fc      	beq.n	10001e94 <multicore_launch_core1+0x4c>
    sio_hw->fifo_wr = data;
10001e9a:	655c      	str	r4, [r3, #84]	; 0x54
    __asm volatile ("sev");
10001e9c:	bf40      	sev
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_VLD_BITS);
10001e9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    while (!multicore_fifo_rvalid())
10001ea0:	4211      	tst	r1, r2
10001ea2:	d103      	bne.n	10001eac <multicore_launch_core1+0x64>
    __asm volatile ("wfe");
10001ea4:	bf20      	wfe
10001ea6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
10001ea8:	4211      	tst	r1, r2
10001eaa:	d0fb      	beq.n	10001ea4 <multicore_launch_core1+0x5c>
    return sio_hw->fifo_rd;
10001eac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
            __sev(); // core 1 may be waiting for fifo space
        }
        multicore_fifo_push_blocking(cmd);
        uint32_t response = multicore_fifo_pop_blocking();
        // move to next state on correct response otherwise start over
        seq = cmd == response ? seq + 1 : 0;
10001eae:	42a2      	cmp	r2, r4
10001eb0:	d00a      	beq.n	10001ec8 <multicore_launch_core1+0x80>
10001eb2:	2500      	movs	r5, #0
        uint cmd = cmd_sequence[seq];
10001eb4:	466c      	mov	r4, sp
10001eb6:	00aa      	lsls	r2, r5, #2
10001eb8:	58a4      	ldr	r4, [r4, r2]
10001eba:	e7e9      	b.n	10001e90 <multicore_launch_core1+0x48>
 *  \ingroup multicore_fifo
 *
 */
static inline void multicore_fifo_drain() {
    while (multicore_fifo_rvalid())
        (void) sio_hw->fifo_rd;
10001ebc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_VLD_BITS);
10001ebe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    while (multicore_fifo_rvalid())
10001ec0:	4211      	tst	r1, r2
10001ec2:	d1fb      	bne.n	10001ebc <multicore_launch_core1+0x74>
    __asm volatile ("sev");
10001ec4:	bf40      	sev
    while (!multicore_fifo_wready())
10001ec6:	e7e5      	b.n	10001e94 <multicore_launch_core1+0x4c>
        seq = cmd == response ? seq + 1 : 0;
10001ec8:	3501      	adds	r5, #1
    } while (seq < count_of(cmd_sequence));
10001eca:	2d05      	cmp	r5, #5
10001ecc:	d9f2      	bls.n	10001eb4 <multicore_launch_core1+0x6c>
}
10001ece:	b007      	add	sp, #28
10001ed0:	bd30      	pop	{r4, r5, pc}
10001ed2:	46c0      	nop			; (mov r8, r8)
10001ed4:	20040800 	.word	0x20040800
10001ed8:	20040000 	.word	0x20040000
10001edc:	000007f4 	.word	0x000007f4
10001ee0:	000007fc 	.word	0x000007fc
10001ee4:	10001e3d 	.word	0x10001e3d
10001ee8:	e000ed00 	.word	0xe000ed00
10001eec:	10001e39 	.word	0x10001e39

10001ef0 <mutex_init>:

#if !PICO_NO_HARDWARE
static_assert(sizeof(mutex_t) == 8, "");
#endif

void mutex_init(mutex_t *mtx) {
10001ef0:	b510      	push	{r4, lr}
10001ef2:	0004      	movs	r4, r0
    lock_init(&mtx->core, next_striped_spin_lock_num());
10001ef4:	f000 ff10 	bl	10002d18 <next_striped_spin_lock_num>
10001ef8:	0001      	movs	r1, r0
10001efa:	0020      	movs	r0, r4
10001efc:	f7ff ff94 	bl	10001e28 <lock_init>
    mtx->owner = -1;
10001f00:	23ff      	movs	r3, #255	; 0xff
10001f02:	7123      	strb	r3, [r4, #4]
    __asm volatile ("dmb");
10001f04:	f3bf 8f5f 	dmb	sy
    __mem_fence_release();
}
10001f08:	bd10      	pop	{r4, pc}
10001f0a:	46c0      	nop			; (mov r8, r8)

10001f0c <ph_merge_nodes>:
        c->sibling = n->child;
        n->child = child_id;
    }
}

static pheap_node_id_t ph_merge_nodes(pheap_t *heap, pheap_node_id_t a, pheap_node_id_t b) {
10001f0c:	b570      	push	{r4, r5, r6, lr}
10001f0e:	0005      	movs	r5, r0
10001f10:	0014      	movs	r4, r2
10001f12:	0016      	movs	r6, r2
    if (!a) return b;
10001f14:	2900      	cmp	r1, #0
10001f16:	d015      	beq.n	10001f44 <ph_merge_nodes+0x38>
    if (!b) return a;
10001f18:	000c      	movs	r4, r1
10001f1a:	2a00      	cmp	r2, #0
10001f1c:	d012      	beq.n	10001f44 <ph_merge_nodes+0x38>
    if (heap->comparator(heap->user_data, a, b)) {
10001f1e:	6880      	ldr	r0, [r0, #8]
10001f20:	686b      	ldr	r3, [r5, #4]
10001f22:	4798      	blx	r3
10001f24:	6829      	ldr	r1, [r5, #0]
10001f26:	2800      	cmp	r0, #0
10001f28:	d00e      	beq.n	10001f48 <ph_merge_nodes+0x3c>
    return heap->nodes + id - 1;
10001f2a:	0073      	lsls	r3, r6, #1
10001f2c:	199b      	adds	r3, r3, r6
10001f2e:	0062      	lsls	r2, r4, #1
10001f30:	3b03      	subs	r3, #3
10001f32:	1912      	adds	r2, r2, r4
10001f34:	18cb      	adds	r3, r1, r3
10001f36:	3a03      	subs	r2, #3
    c->parent = parent_id;
10001f38:	709c      	strb	r4, [r3, #2]
    return heap->nodes + id - 1;
10001f3a:	1888      	adds	r0, r1, r2
    if (!n->child) {
10001f3c:	5c8a      	ldrb	r2, [r1, r2]
10001f3e:	2a00      	cmp	r2, #0
10001f40:	d115      	bne.n	10001f6e <ph_merge_nodes+0x62>
        n->child = child_id;
10001f42:	7006      	strb	r6, [r0, #0]
        return a;
    } else {
        ph_add_child_node(heap, b, a);
        return b;
    }
}
10001f44:	0020      	movs	r0, r4
10001f46:	bd70      	pop	{r4, r5, r6, pc}
    return heap->nodes + id - 1;
10001f48:	0063      	lsls	r3, r4, #1
10001f4a:	191b      	adds	r3, r3, r4
10001f4c:	0072      	lsls	r2, r6, #1
10001f4e:	3b03      	subs	r3, #3
10001f50:	1992      	adds	r2, r2, r6
10001f52:	18cb      	adds	r3, r1, r3
10001f54:	3a03      	subs	r2, #3
    c->parent = parent_id;
10001f56:	709e      	strb	r6, [r3, #2]
    return heap->nodes + id - 1;
10001f58:	1888      	adds	r0, r1, r2
    if (!n->child) {
10001f5a:	5c8a      	ldrb	r2, [r1, r2]
10001f5c:	2a00      	cmp	r2, #0
10001f5e:	d102      	bne.n	10001f66 <ph_merge_nodes+0x5a>
        n->child = child_id;
10001f60:	7004      	strb	r4, [r0, #0]
10001f62:	0034      	movs	r4, r6
10001f64:	e7ee      	b.n	10001f44 <ph_merge_nodes+0x38>
        c->sibling = n->child;
10001f66:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
10001f68:	7004      	strb	r4, [r0, #0]
10001f6a:	0034      	movs	r4, r6
10001f6c:	e7ea      	b.n	10001f44 <ph_merge_nodes+0x38>
        c->sibling = n->child;
10001f6e:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
10001f70:	7006      	strb	r6, [r0, #0]
10001f72:	e7e7      	b.n	10001f44 <ph_merge_nodes+0x38>

10001f74 <ph_create>:

#include <stdio.h>
#include <stdlib.h>
#include "pico/util/pheap.h"

pheap_t *ph_create(uint max_nodes, pheap_comparator comparator, void *user_data) {
10001f74:	b5f0      	push	{r4, r5, r6, r7, lr}
10001f76:	46c6      	mov	lr, r8
10001f78:	0005      	movs	r5, r0
10001f7a:	000f      	movs	r7, r1
10001f7c:	b500      	push	{lr}
    invalid_params_if(PHEAP, !max_nodes || max_nodes >= (1u << sizeof(pheap_node_id_t)));
    pheap_t *heap = calloc(1, sizeof(pheap_t));
10001f7e:	2110      	movs	r1, #16
10001f80:	2001      	movs	r0, #1
pheap_t *ph_create(uint max_nodes, pheap_comparator comparator, void *user_data) {
10001f82:	0016      	movs	r6, r2
    pheap_t *heap = calloc(1, sizeof(pheap_t));
10001f84:	f000 f9ac 	bl	100022e0 <__wrap_calloc>
    heap->max_nodes = max_nodes;
10001f88:	b2eb      	uxtb	r3, r5
    pheap_t *heap = calloc(1, sizeof(pheap_t));
10001f8a:	0004      	movs	r4, r0
    heap->max_nodes = max_nodes;
10001f8c:	7303      	strb	r3, [r0, #12]
    heap->comparator = comparator;
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
10001f8e:	2103      	movs	r1, #3
    heap->comparator = comparator;
10001f90:	6047      	str	r7, [r0, #4]
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
10001f92:	0028      	movs	r0, r5
    heap->max_nodes = max_nodes;
10001f94:	4698      	mov	r8, r3
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
10001f96:	f000 f9a3 	bl	100022e0 <__wrap_calloc>
    ph_clear(heap);
    return heap;
}

void ph_clear(pheap_t *heap) {
    heap->root_id = 0;
10001f9a:	2300      	movs	r3, #0
10001f9c:	7363      	strb	r3, [r4, #13]
    heap->free_head_id = 1;
10001f9e:	3301      	adds	r3, #1
10001fa0:	73a3      	strb	r3, [r4, #14]
    heap->free_tail_id = heap->max_nodes;
10001fa2:	4643      	mov	r3, r8
10001fa4:	21ff      	movs	r1, #255	; 0xff
10001fa6:	73e3      	strb	r3, [r4, #15]
    for(uint i = 1; i < heap->max_nodes; i++) {
10001fa8:	23fe      	movs	r3, #254	; 0xfe
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
10001faa:	6020      	str	r0, [r4, #0]
    heap->user_data = user_data;
10001fac:	60a6      	str	r6, [r4, #8]
    for(uint i = 1; i < heap->max_nodes; i++) {
10001fae:	4029      	ands	r1, r5
10001fb0:	422b      	tst	r3, r5
10001fb2:	d006      	beq.n	10001fc2 <ph_create+0x4e>
10001fb4:	1c42      	adds	r2, r0, #1
10001fb6:	3bfd      	subs	r3, #253	; 0xfd
        ph_get_node(heap, i)->sibling = i + 1;
10001fb8:	3301      	adds	r3, #1
10001fba:	7013      	strb	r3, [r2, #0]
    for(uint i = 1; i < heap->max_nodes; i++) {
10001fbc:	3203      	adds	r2, #3
10001fbe:	428b      	cmp	r3, r1
10001fc0:	d3fa      	bcc.n	10001fb8 <ph_create+0x44>
    }
    ph_get_node(heap, heap->max_nodes)->sibling = 0;
10001fc2:	004b      	lsls	r3, r1, #1
10001fc4:	1859      	adds	r1, r3, r1
10001fc6:	2300      	movs	r3, #0
10001fc8:	1840      	adds	r0, r0, r1
10001fca:	3803      	subs	r0, #3
10001fcc:	7043      	strb	r3, [r0, #1]
}
10001fce:	0020      	movs	r0, r4
10001fd0:	bc80      	pop	{r7}
10001fd2:	46b8      	mov	r8, r7
10001fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001fd6:	46c0      	nop			; (mov r8, r8)

10001fd8 <ph_merge_two_pass>:
void ph_destroy(pheap_t *heap) {
    free(heap->nodes);
    free(heap);
}

pheap_node_id_t ph_merge_two_pass(pheap_t *heap, pheap_node_id_t id) {
10001fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10001fda:	46ce      	mov	lr, r9
10001fdc:	4647      	mov	r7, r8
10001fde:	0006      	movs	r6, r0
10001fe0:	000c      	movs	r4, r1
10001fe2:	b580      	push	{r7, lr}
    if (!id || !ph_get_node(heap, id)->sibling) {
10001fe4:	2900      	cmp	r1, #0
10001fe6:	d007      	beq.n	10001ff8 <ph_merge_two_pass+0x20>
    return heap->nodes + id - 1;
10001fe8:	004d      	lsls	r5, r1, #1
10001fea:	6803      	ldr	r3, [r0, #0]
10001fec:	186d      	adds	r5, r5, r1
10001fee:	3d03      	subs	r5, #3
10001ff0:	195a      	adds	r2, r3, r5
10001ff2:	7857      	ldrb	r7, [r2, #1]
10001ff4:	2f00      	cmp	r7, #0
10001ff6:	d104      	bne.n	10002002 <ph_merge_two_pass+0x2a>
        b = ph_get_node(heap, id)->sibling;
        new_node = ph_get_node(heap, b)->sibling;
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
    }
}
10001ff8:	0020      	movs	r0, r4
10001ffa:	bcc0      	pop	{r6, r7}
10001ffc:	46b9      	mov	r9, r7
10001ffe:	46b0      	mov	r8, r6
10002000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10002002:	0079      	lsls	r1, r7, #1
10002004:	19c9      	adds	r1, r1, r7
10002006:	3903      	subs	r1, #3
10002008:	4688      	mov	r8, r1
1000200a:	4443      	add	r3, r8
        new_node = ph_get_node(heap, b)->sibling;
1000200c:	7859      	ldrb	r1, [r3, #1]
1000200e:	4689      	mov	r9, r1
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10002010:	2100      	movs	r1, #0
10002012:	7059      	strb	r1, [r3, #1]
10002014:	7051      	strb	r1, [r2, #1]
    if (heap->comparator(heap->user_data, a, b)) {
10002016:	6873      	ldr	r3, [r6, #4]
10002018:	003a      	movs	r2, r7
1000201a:	0021      	movs	r1, r4
1000201c:	6880      	ldr	r0, [r0, #8]
1000201e:	4798      	blx	r3
10002020:	6833      	ldr	r3, [r6, #0]
10002022:	2800      	cmp	r0, #0
10002024:	d014      	beq.n	10002050 <ph_merge_two_pass+0x78>
    return heap->nodes + id - 1;
10002026:	4642      	mov	r2, r8
10002028:	189a      	adds	r2, r3, r2
    c->parent = parent_id;
1000202a:	7094      	strb	r4, [r2, #2]
    return heap->nodes + id - 1;
1000202c:	1959      	adds	r1, r3, r5
    if (!n->child) {
1000202e:	5d5b      	ldrb	r3, [r3, r5]
10002030:	2b00      	cmp	r3, #0
10002032:	d000      	beq.n	10002036 <ph_merge_two_pass+0x5e>
        c->sibling = n->child;
10002034:	7053      	strb	r3, [r2, #1]
        n->child = child_id;
10002036:	700f      	strb	r7, [r1, #0]
10002038:	0027      	movs	r7, r4
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
1000203a:	4649      	mov	r1, r9
1000203c:	0030      	movs	r0, r6
1000203e:	f7ff ffcb 	bl	10001fd8 <ph_merge_two_pass>
10002042:	0039      	movs	r1, r7
10002044:	0002      	movs	r2, r0
10002046:	0030      	movs	r0, r6
10002048:	f7ff ff60 	bl	10001f0c <ph_merge_nodes>
1000204c:	0004      	movs	r4, r0
1000204e:	e7d3      	b.n	10001ff8 <ph_merge_two_pass+0x20>
    return heap->nodes + id - 1;
10002050:	4642      	mov	r2, r8
    if (!n->child) {
10002052:	4641      	mov	r1, r8
    return heap->nodes + id - 1;
10002054:	195d      	adds	r5, r3, r5
    c->parent = parent_id;
10002056:	70af      	strb	r7, [r5, #2]
    return heap->nodes + id - 1;
10002058:	189a      	adds	r2, r3, r2
    if (!n->child) {
1000205a:	5c5b      	ldrb	r3, [r3, r1]
1000205c:	2b00      	cmp	r3, #0
1000205e:	d000      	beq.n	10002062 <ph_merge_two_pass+0x8a>
        c->sibling = n->child;
10002060:	706b      	strb	r3, [r5, #1]
        n->child = child_id;
10002062:	7014      	strb	r4, [r2, #0]
10002064:	e7e9      	b.n	1000203a <ph_merge_two_pass+0x62>
10002066:	46c0      	nop			; (mov r8, r8)

10002068 <ph_remove_any_head>:

static pheap_node_id_t ph_remove_any_head(pheap_t *heap, pheap_node_id_t root_id, bool reserve) {
10002068:	b5f0      	push	{r4, r5, r6, r7, lr}
1000206a:	4657      	mov	r7, sl
1000206c:	4645      	mov	r5, r8
1000206e:	46de      	mov	lr, fp
10002070:	464e      	mov	r6, r9
10002072:	b5e0      	push	{r5, r6, r7, lr}
10002074:	000d      	movs	r5, r1
    return heap->nodes + id - 1;
10002076:	006b      	lsls	r3, r5, #1
10002078:	6801      	ldr	r1, [r0, #0]
1000207a:	195b      	adds	r3, r3, r5
1000207c:	1edf      	subs	r7, r3, #3
1000207e:	0004      	movs	r4, r0
    assert(root_id);
//    printf("Removing head %d (parent %d sibling %d)\n", root_id, ph_get_node(heap, root_id)->parent, ph_get_node(heap, root_id)->sibling);
    assert(!ph_get_node(heap, root_id)->sibling);
    assert(!ph_get_node(heap, root_id)->parent);
    pheap_node_id_t new_root_id = ph_merge_two_pass(heap, ph_get_node(heap, root_id)->child);
10002080:	5dc8      	ldrb	r0, [r1, r7]
static pheap_node_id_t ph_remove_any_head(pheap_t *heap, pheap_node_id_t root_id, bool reserve) {
10002082:	b083      	sub	sp, #12
10002084:	9201      	str	r2, [sp, #4]
10002086:	19ca      	adds	r2, r1, r7
    if (!id || !ph_get_node(heap, id)->sibling) {
10002088:	2800      	cmp	r0, #0
1000208a:	d04c      	beq.n	10002126 <ph_remove_any_head+0xbe>
1000208c:	0043      	lsls	r3, r0, #1
1000208e:	181b      	adds	r3, r3, r0
10002090:	3b03      	subs	r3, #3
10002092:	18cb      	adds	r3, r1, r3
10002094:	785e      	ldrb	r6, [r3, #1]
10002096:	46b4      	mov	ip, r6
10002098:	2e00      	cmp	r6, #0
1000209a:	d116      	bne.n	100020ca <ph_remove_any_head+0x62>
    if (!reserve) {
1000209c:	9e01      	ldr	r6, [sp, #4]
1000209e:	2e00      	cmp	r6, #0
100020a0:	d13e      	bne.n	10002120 <ph_remove_any_head+0xb8>
        if (heap->free_tail_id) {
100020a2:	7be6      	ldrb	r6, [r4, #15]
100020a4:	2e00      	cmp	r6, #0
100020a6:	d004      	beq.n	100020b2 <ph_remove_any_head+0x4a>
            ph_get_node(heap, heap->free_tail_id)->sibling = root_id;
100020a8:	0073      	lsls	r3, r6, #1
100020aa:	199b      	adds	r3, r3, r6
100020ac:	18cb      	adds	r3, r1, r3
100020ae:	3b03      	subs	r3, #3
100020b0:	705d      	strb	r5, [r3, #1]
        }
        heap->free_tail_id = root_id;
100020b2:	73e5      	strb	r5, [r4, #15]
    }
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
100020b4:	2800      	cmp	r0, #0
100020b6:	d12f      	bne.n	10002118 <ph_remove_any_head+0xb0>
    ph_get_node(heap, root_id)->sibling = 0;
100020b8:	2300      	movs	r3, #0
100020ba:	7053      	strb	r3, [r2, #1]
    return new_root_id;
}
100020bc:	b003      	add	sp, #12
100020be:	bcf0      	pop	{r4, r5, r6, r7}
100020c0:	46bb      	mov	fp, r7
100020c2:	46b2      	mov	sl, r6
100020c4:	46a9      	mov	r9, r5
100020c6:	46a0      	mov	r8, r4
100020c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100020ca:	0072      	lsls	r2, r6, #1
100020cc:	4462      	add	r2, ip
100020ce:	3a03      	subs	r2, #3
100020d0:	1889      	adds	r1, r1, r2
        new_node = ph_get_node(heap, b)->sibling;
100020d2:	784a      	ldrb	r2, [r1, #1]
100020d4:	4690      	mov	r8, r2
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
100020d6:	2200      	movs	r2, #0
100020d8:	704a      	strb	r2, [r1, #1]
100020da:	4691      	mov	r9, r2
100020dc:	705a      	strb	r2, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
100020de:	0001      	movs	r1, r0
100020e0:	0032      	movs	r2, r6
100020e2:	0020      	movs	r0, r4
100020e4:	f7ff ff12 	bl	10001f0c <ph_merge_nodes>
    if (!id || !ph_get_node(heap, id)->sibling) {
100020e8:	4643      	mov	r3, r8
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
100020ea:	4682      	mov	sl, r0
    if (!id || !ph_get_node(heap, id)->sibling) {
100020ec:	2b00      	cmp	r3, #0
100020ee:	d007      	beq.n	10002100 <ph_remove_any_head+0x98>
100020f0:	005b      	lsls	r3, r3, #1
100020f2:	6821      	ldr	r1, [r4, #0]
100020f4:	4443      	add	r3, r8
100020f6:	3b03      	subs	r3, #3
100020f8:	18cb      	adds	r3, r1, r3
100020fa:	785a      	ldrb	r2, [r3, #1]
100020fc:	2a00      	cmp	r2, #0
100020fe:	d116      	bne.n	1000212e <ph_remove_any_head+0xc6>
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10002100:	4642      	mov	r2, r8
10002102:	4651      	mov	r1, sl
10002104:	0020      	movs	r0, r4
10002106:	f7ff ff01 	bl	10001f0c <ph_merge_nodes>
1000210a:	6821      	ldr	r1, [r4, #0]
    if (!reserve) {
1000210c:	9b01      	ldr	r3, [sp, #4]
1000210e:	19ca      	adds	r2, r1, r7
10002110:	2b00      	cmp	r3, #0
10002112:	d0c6      	beq.n	100020a2 <ph_remove_any_head+0x3a>
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
10002114:	2800      	cmp	r0, #0
10002116:	d0cf      	beq.n	100020b8 <ph_remove_any_head+0x50>
10002118:	0043      	lsls	r3, r0, #1
1000211a:	181b      	adds	r3, r3, r0
1000211c:	3b03      	subs	r3, #3
1000211e:	18cb      	adds	r3, r1, r3
10002120:	2100      	movs	r1, #0
10002122:	7099      	strb	r1, [r3, #2]
10002124:	e7c8      	b.n	100020b8 <ph_remove_any_head+0x50>
    if (!reserve) {
10002126:	9b01      	ldr	r3, [sp, #4]
10002128:	2b00      	cmp	r3, #0
1000212a:	d1c5      	bne.n	100020b8 <ph_remove_any_head+0x50>
1000212c:	e7b9      	b.n	100020a2 <ph_remove_any_head+0x3a>
1000212e:	0050      	lsls	r0, r2, #1
10002130:	1880      	adds	r0, r0, r2
10002132:	3803      	subs	r0, #3
10002134:	1809      	adds	r1, r1, r0
        new_node = ph_get_node(heap, b)->sibling;
10002136:	7848      	ldrb	r0, [r1, #1]
10002138:	4683      	mov	fp, r0
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
1000213a:	4648      	mov	r0, r9
1000213c:	7048      	strb	r0, [r1, #1]
1000213e:	7058      	strb	r0, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10002140:	4641      	mov	r1, r8
10002142:	0020      	movs	r0, r4
10002144:	f7ff fee2 	bl	10001f0c <ph_merge_nodes>
10002148:	4659      	mov	r1, fp
1000214a:	4680      	mov	r8, r0
1000214c:	0020      	movs	r0, r4
1000214e:	f7ff ff43 	bl	10001fd8 <ph_merge_two_pass>
10002152:	4641      	mov	r1, r8
10002154:	0002      	movs	r2, r0
10002156:	0020      	movs	r0, r4
10002158:	f7ff fed8 	bl	10001f0c <ph_merge_nodes>
1000215c:	4680      	mov	r8, r0
1000215e:	e7cf      	b.n	10002100 <ph_remove_any_head+0x98>

10002160 <ph_remove_head_reserve>:

pheap_node_id_t ph_remove_head_reserve(pheap_t *heap, bool reserve) {
10002160:	b5f0      	push	{r4, r5, r6, r7, lr}
10002162:	4657      	mov	r7, sl
10002164:	4645      	mov	r5, r8
10002166:	46de      	mov	lr, fp
10002168:	464e      	mov	r6, r9
1000216a:	b5e0      	push	{r5, r6, r7, lr}
1000216c:	b083      	sub	sp, #12
1000216e:	9101      	str	r1, [sp, #4]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
    return heap->root_id;
}

static inline pheap_node_id_t ph_peek_head(pheap_t *heap) {
    return heap->root_id;
10002170:	7b45      	ldrb	r5, [r0, #13]
10002172:	0004      	movs	r4, r0
    return heap->nodes + id - 1;
10002174:	006b      	lsls	r3, r5, #1
10002176:	6800      	ldr	r0, [r0, #0]
10002178:	195b      	adds	r3, r3, r5
1000217a:	1edf      	subs	r7, r3, #3
    pheap_node_id_t new_root_id = ph_merge_two_pass(heap, ph_get_node(heap, root_id)->child);
1000217c:	5dc1      	ldrb	r1, [r0, r7]
1000217e:	19c2      	adds	r2, r0, r7
    if (!id || !ph_get_node(heap, id)->sibling) {
10002180:	2900      	cmp	r1, #0
10002182:	d04e      	beq.n	10002222 <ph_remove_head_reserve+0xc2>
10002184:	004b      	lsls	r3, r1, #1
10002186:	185b      	adds	r3, r3, r1
10002188:	3b03      	subs	r3, #3
1000218a:	18c3      	adds	r3, r0, r3
1000218c:	785e      	ldrb	r6, [r3, #1]
1000218e:	46b4      	mov	ip, r6
10002190:	2e00      	cmp	r6, #0
10002192:	d118      	bne.n	100021c6 <ph_remove_head_reserve+0x66>
    if (!reserve) {
10002194:	9e01      	ldr	r6, [sp, #4]
10002196:	2e00      	cmp	r6, #0
10002198:	d140      	bne.n	1000221c <ph_remove_head_reserve+0xbc>
        if (heap->free_tail_id) {
1000219a:	7be6      	ldrb	r6, [r4, #15]
1000219c:	2e00      	cmp	r6, #0
1000219e:	d004      	beq.n	100021aa <ph_remove_head_reserve+0x4a>
            ph_get_node(heap, heap->free_tail_id)->sibling = root_id;
100021a0:	0073      	lsls	r3, r6, #1
100021a2:	199b      	adds	r3, r3, r6
100021a4:	18c3      	adds	r3, r0, r3
100021a6:	3b03      	subs	r3, #3
100021a8:	705d      	strb	r5, [r3, #1]
        heap->free_tail_id = root_id;
100021aa:	73e5      	strb	r5, [r4, #15]
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
100021ac:	2900      	cmp	r1, #0
100021ae:	d131      	bne.n	10002214 <ph_remove_head_reserve+0xb4>
    ph_get_node(heap, root_id)->sibling = 0;
100021b0:	2300      	movs	r3, #0
    pheap_node_id_t old_root_id = ph_peek_head(heap);
    heap->root_id = ph_remove_any_head(heap, old_root_id, reserve);
    return old_root_id;
}
100021b2:	0028      	movs	r0, r5
    ph_get_node(heap, root_id)->sibling = 0;
100021b4:	7053      	strb	r3, [r2, #1]
    heap->root_id = ph_remove_any_head(heap, old_root_id, reserve);
100021b6:	7361      	strb	r1, [r4, #13]
}
100021b8:	b003      	add	sp, #12
100021ba:	bcf0      	pop	{r4, r5, r6, r7}
100021bc:	46bb      	mov	fp, r7
100021be:	46b2      	mov	sl, r6
100021c0:	46a9      	mov	r9, r5
100021c2:	46a0      	mov	r8, r4
100021c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100021c6:	0072      	lsls	r2, r6, #1
100021c8:	4462      	add	r2, ip
100021ca:	3a03      	subs	r2, #3
100021cc:	1880      	adds	r0, r0, r2
        new_node = ph_get_node(heap, b)->sibling;
100021ce:	7842      	ldrb	r2, [r0, #1]
100021d0:	4690      	mov	r8, r2
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
100021d2:	2200      	movs	r2, #0
100021d4:	7042      	strb	r2, [r0, #1]
100021d6:	4691      	mov	r9, r2
100021d8:	705a      	strb	r2, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
100021da:	0020      	movs	r0, r4
100021dc:	0032      	movs	r2, r6
100021de:	f7ff fe95 	bl	10001f0c <ph_merge_nodes>
    if (!id || !ph_get_node(heap, id)->sibling) {
100021e2:	4643      	mov	r3, r8
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
100021e4:	4682      	mov	sl, r0
    if (!id || !ph_get_node(heap, id)->sibling) {
100021e6:	2b00      	cmp	r3, #0
100021e8:	d007      	beq.n	100021fa <ph_remove_head_reserve+0x9a>
100021ea:	005b      	lsls	r3, r3, #1
100021ec:	6821      	ldr	r1, [r4, #0]
100021ee:	4443      	add	r3, r8
100021f0:	3b03      	subs	r3, #3
100021f2:	18cb      	adds	r3, r1, r3
100021f4:	785a      	ldrb	r2, [r3, #1]
100021f6:	2a00      	cmp	r2, #0
100021f8:	d117      	bne.n	1000222a <ph_remove_head_reserve+0xca>
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
100021fa:	4642      	mov	r2, r8
100021fc:	4651      	mov	r1, sl
100021fe:	0020      	movs	r0, r4
10002200:	f7ff fe84 	bl	10001f0c <ph_merge_nodes>
    if (!reserve) {
10002204:	9b01      	ldr	r3, [sp, #4]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10002206:	0001      	movs	r1, r0
10002208:	6820      	ldr	r0, [r4, #0]
1000220a:	19c2      	adds	r2, r0, r7
    if (!reserve) {
1000220c:	2b00      	cmp	r3, #0
1000220e:	d0c4      	beq.n	1000219a <ph_remove_head_reserve+0x3a>
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
10002210:	2900      	cmp	r1, #0
10002212:	d0cd      	beq.n	100021b0 <ph_remove_head_reserve+0x50>
10002214:	004b      	lsls	r3, r1, #1
10002216:	185b      	adds	r3, r3, r1
10002218:	3b03      	subs	r3, #3
1000221a:	18c3      	adds	r3, r0, r3
1000221c:	2000      	movs	r0, #0
1000221e:	7098      	strb	r0, [r3, #2]
10002220:	e7c6      	b.n	100021b0 <ph_remove_head_reserve+0x50>
    if (!reserve) {
10002222:	9b01      	ldr	r3, [sp, #4]
10002224:	2b00      	cmp	r3, #0
10002226:	d1c3      	bne.n	100021b0 <ph_remove_head_reserve+0x50>
10002228:	e7b7      	b.n	1000219a <ph_remove_head_reserve+0x3a>
1000222a:	0050      	lsls	r0, r2, #1
1000222c:	1880      	adds	r0, r0, r2
1000222e:	3803      	subs	r0, #3
10002230:	1809      	adds	r1, r1, r0
        new_node = ph_get_node(heap, b)->sibling;
10002232:	7848      	ldrb	r0, [r1, #1]
10002234:	4683      	mov	fp, r0
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10002236:	4648      	mov	r0, r9
10002238:	7048      	strb	r0, [r1, #1]
1000223a:	7058      	strb	r0, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
1000223c:	4641      	mov	r1, r8
1000223e:	0020      	movs	r0, r4
10002240:	f7ff fe64 	bl	10001f0c <ph_merge_nodes>
10002244:	4659      	mov	r1, fp
10002246:	4680      	mov	r8, r0
10002248:	0020      	movs	r0, r4
1000224a:	f7ff fec5 	bl	10001fd8 <ph_merge_two_pass>
1000224e:	4641      	mov	r1, r8
10002250:	0002      	movs	r2, r0
10002252:	0020      	movs	r0, r4
10002254:	f7ff fe5a 	bl	10001f0c <ph_merge_nodes>
10002258:	4680      	mov	r8, r0
1000225a:	e7ce      	b.n	100021fa <ph_remove_head_reserve+0x9a>

1000225c <ph_delete>:

#include <stdio.h>
bool ph_delete(pheap_t *heap, pheap_node_id_t id) {
1000225c:	b570      	push	{r4, r5, r6, lr}
1000225e:	0004      	movs	r4, r0
    // 1) trivial cases
    if (!id) return false;
10002260:	2900      	cmp	r1, #0
10002262:	d02c      	beq.n	100022be <ph_delete+0x62>
    if (id == heap->root_id) {
10002264:	7b43      	ldrb	r3, [r0, #13]
10002266:	428b      	cmp	r3, r1
10002268:	d02e      	beq.n	100022c8 <ph_delete+0x6c>
1000226a:	6805      	ldr	r5, [r0, #0]
1000226c:	0048      	lsls	r0, r1, #1
1000226e:	1840      	adds	r0, r0, r1
10002270:	3803      	subs	r0, #3
10002272:	1828      	adds	r0, r5, r0
        ph_remove_head(heap);
        return true;
    }
    // 2) unlink the node from the tree
    pheap_node_t *node = ph_get_node(heap, id);
    if (!node->parent) return false; // not in tree
10002274:	7882      	ldrb	r2, [r0, #2]
10002276:	2a00      	cmp	r2, #0
10002278:	d021      	beq.n	100022be <ph_delete+0x62>
1000227a:	0053      	lsls	r3, r2, #1
1000227c:	189b      	adds	r3, r3, r2
1000227e:	3b03      	subs	r3, #3
    pheap_node_t *parent = ph_get_node(heap, node->parent);
    if (parent->child == id) {
10002280:	5cea      	ldrb	r2, [r5, r3]
10002282:	18ee      	adds	r6, r5, r3
10002284:	428a      	cmp	r2, r1
10002286:	d102      	bne.n	1000228e <ph_delete+0x32>
10002288:	e01b      	b.n	100022c2 <ph_delete+0x66>
                prev_sibling->sibling = node->sibling;
                found = true;
                break;
            }
            prev_sibling_id = prev_sibling->sibling;
        } while (prev_sibling_id);
1000228a:	2a00      	cmp	r2, #0
1000228c:	d008      	beq.n	100022a0 <ph_delete+0x44>
1000228e:	0053      	lsls	r3, r2, #1
10002290:	189b      	adds	r3, r3, r2
10002292:	3b03      	subs	r3, #3
10002294:	18eb      	adds	r3, r5, r3
            if (prev_sibling->sibling == id) {
10002296:	785a      	ldrb	r2, [r3, #1]
10002298:	428a      	cmp	r2, r1
1000229a:	d1f6      	bne.n	1000228a <ph_delete+0x2e>
                prev_sibling->sibling = node->sibling;
1000229c:	7842      	ldrb	r2, [r0, #1]
1000229e:	705a      	strb	r2, [r3, #1]
        assert(found);
    }
    node->sibling = node->parent = 0;
100022a0:	2300      	movs	r3, #0
//    ph_dump(heap, NULL, NULL);
    // 3) remove it from the head of its own subtree
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, false);
100022a2:	2200      	movs	r2, #0
    node->sibling = node->parent = 0;
100022a4:	7083      	strb	r3, [r0, #2]
100022a6:	7043      	strb	r3, [r0, #1]
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, false);
100022a8:	0020      	movs	r0, r4
100022aa:	f7ff fedd 	bl	10002068 <ph_remove_any_head>
    assert(new_sub_tree != heap->root_id);
    heap->root_id = ph_merge_nodes(heap, heap->root_id, new_sub_tree);
100022ae:	7b61      	ldrb	r1, [r4, #13]
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, false);
100022b0:	0002      	movs	r2, r0
    heap->root_id = ph_merge_nodes(heap, heap->root_id, new_sub_tree);
100022b2:	0020      	movs	r0, r4
100022b4:	f7ff fe2a 	bl	10001f0c <ph_merge_nodes>
100022b8:	7360      	strb	r0, [r4, #13]
    return true;
100022ba:	2001      	movs	r0, #1
100022bc:	e000      	b.n	100022c0 <ph_delete+0x64>
    if (!id) return false;
100022be:	2000      	movs	r0, #0
}
100022c0:	bd70      	pop	{r4, r5, r6, pc}
        parent->child = node->sibling;
100022c2:	7843      	ldrb	r3, [r0, #1]
100022c4:	7033      	strb	r3, [r6, #0]
100022c6:	e7eb      	b.n	100022a0 <ph_delete+0x44>
    heap->root_id = ph_remove_any_head(heap, old_root_id, reserve);
100022c8:	2200      	movs	r2, #0
100022ca:	0019      	movs	r1, r3
100022cc:	f7ff fecc 	bl	10002068 <ph_remove_any_head>
100022d0:	7360      	strb	r0, [r4, #13]
        return true;
100022d2:	2001      	movs	r0, #1
100022d4:	e7f4      	b.n	100022c0 <ph_delete+0x64>
100022d6:	46c0      	nop			; (mov r8, r8)

100022d8 <__wrap_malloc>:
        panic("Out of memory");
    }
#endif
}

void *__wrap_malloc(size_t size) {
100022d8:	b510      	push	{r4, lr}
#if PICO_USE_MALLOC_MUTEX
    mutex_enter_blocking(&malloc_mutex);
#endif
    void *rc = __real_malloc(size);
100022da:	f007 fb8f 	bl	100099fc <malloc>
        printf("malloc %d %p->%p\n", (uint) size, rc, ((uint8_t *) rc) + size);
    }
#endif
    check_alloc(rc, size);
    return rc;
}
100022de:	bd10      	pop	{r4, pc}

100022e0 <__wrap_calloc>:

void *__wrap_calloc(size_t count, size_t size) {
100022e0:	b510      	push	{r4, lr}
#if PICO_USE_MALLOC_MUTEX
    mutex_enter_blocking(&malloc_mutex);
#endif
    void *rc = __real_calloc(count, size);
100022e2:	f007 fb2b 	bl	1000993c <calloc>
        printf("calloc %d %p->%p\n", (uint) (count * size), rc, ((uint8_t *) rc) + size);
    }
#endif
    check_alloc(rc, size);
    return rc;
}
100022e6:	bd10      	pop	{r4, pc}

100022e8 <pio_add_program>:
    uint32_t program_mask = (1u << program->length) - 1;
    _used_instruction_space[pio_get_index(pio)] |= program_mask << offset;
}

// these assert if unable
uint pio_add_program(PIO pio, const pio_program_t *program) {
100022e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100022ea:	46d6      	mov	lr, sl
100022ec:	464f      	mov	r7, r9
100022ee:	4646      	mov	r6, r8
100022f0:	4688      	mov	r8, r1
100022f2:	b5c0      	push	{r6, r7, lr}
100022f4:	2405      	movs	r4, #5
100022f6:	0006      	movs	r6, r0
    uint32_t save = hw_claim_lock();
100022f8:	f7fe ffb4 	bl	10001264 <hw_claim_lock>
100022fc:	4643      	mov	r3, r8
100022fe:	791f      	ldrb	r7, [r3, #4]
10002300:	571c      	ldrsb	r4, [r3, r4]
 * \param pio The PIO instance; either \ref pio0 or \ref pio1
 * \return the PIO instance number (either 0 or 1)
 */
static inline uint pio_get_index(PIO pio) {
    assert(pio == pio0 || pio == pio1);
    return pio == pio1 ? 1 : 0;
10002302:	4b28      	ldr	r3, [pc, #160]	; (100023a4 <pio_add_program+0xbc>)
10002304:	4681      	mov	r9, r0
10002306:	18f0      	adds	r0, r6, r3
10002308:	4243      	negs	r3, r0
1000230a:	4158      	adcs	r0, r3
    uint32_t used_mask = _used_instruction_space[pio_get_index(pio)];
1000230c:	4b26      	ldr	r3, [pc, #152]	; (100023a8 <pio_add_program+0xc0>)
1000230e:	469a      	mov	sl, r3
10002310:	0083      	lsls	r3, r0, #2
10002312:	469c      	mov	ip, r3
10002314:	4653      	mov	r3, sl
10002316:	4662      	mov	r2, ip
10002318:	5898      	ldr	r0, [r3, r2]
    uint32_t program_mask = (1u << program->length) - 1;
1000231a:	2201      	movs	r2, #1
        if (program->origin > 32 - program->length) return -1;
1000231c:	2320      	movs	r3, #32
    uint32_t program_mask = (1u << program->length) - 1;
1000231e:	40ba      	lsls	r2, r7
        if (program->origin > 32 - program->length) return -1;
10002320:	1bdb      	subs	r3, r3, r7
    uint32_t program_mask = (1u << program->length) - 1;
10002322:	3a01      	subs	r2, #1
    if (program->origin >= 0) {
10002324:	2c00      	cmp	r4, #0
10002326:	db32      	blt.n	1000238e <pio_add_program+0xa6>
        if (program->origin > 32 - program->length) return -1;
10002328:	429c      	cmp	r4, r3
1000232a:	dc2d      	bgt.n	10002388 <pio_add_program+0xa0>
        return used_mask & (program_mask << program->origin) ? -1 : program->origin;
1000232c:	40a2      	lsls	r2, r4
1000232e:	0015      	movs	r5, r2
10002330:	4210      	tst	r0, r2
10002332:	d129      	bne.n	10002388 <pio_add_program+0xa0>
    for (uint i = 0; i < program->length; ++i) {
10002334:	2f00      	cmp	r7, #0
10002336:	d01a      	beq.n	1000236e <pio_add_program+0x86>
        uint16_t instr = program->instructions[i];
10002338:	4643      	mov	r3, r8
1000233a:	785a      	ldrb	r2, [r3, #1]
1000233c:	7819      	ldrb	r1, [r3, #0]
1000233e:	0212      	lsls	r2, r2, #8
10002340:	4311      	orrs	r1, r2
10002342:	4642      	mov	r2, r8
10002344:	789b      	ldrb	r3, [r3, #2]
10002346:	78d2      	ldrb	r2, [r2, #3]
10002348:	041b      	lsls	r3, r3, #16
1000234a:	430b      	orrs	r3, r1
1000234c:	0612      	lsls	r2, r2, #24
1000234e:	431a      	orrs	r2, r3
10002350:	4690      	mov	r8, r2
    for (uint i = 0; i < program->length; ++i) {
10002352:	2200      	movs	r2, #0
        uint16_t instr = program->instructions[i];
10002354:	4641      	mov	r1, r8
10002356:	0053      	lsls	r3, r2, #1
10002358:	5ac9      	ldrh	r1, [r1, r3]
        pio->instr_mem[offset + i] = pio_instr_bits_jmp != _pio_major_instr_bits(instr) ? instr : instr + offset;
1000235a:	0b4b      	lsrs	r3, r1, #13
1000235c:	d100      	bne.n	10002360 <pio_add_program+0x78>
1000235e:	1909      	adds	r1, r1, r4
10002360:	1913      	adds	r3, r2, r4
10002362:	3312      	adds	r3, #18
10002364:	009b      	lsls	r3, r3, #2
    for (uint i = 0; i < program->length; ++i) {
10002366:	3201      	adds	r2, #1
        pio->instr_mem[offset + i] = pio_instr_bits_jmp != _pio_major_instr_bits(instr) ? instr : instr + offset;
10002368:	5199      	str	r1, [r3, r6]
    for (uint i = 0; i < program->length; ++i) {
1000236a:	4297      	cmp	r7, r2
1000236c:	d8f2      	bhi.n	10002354 <pio_add_program+0x6c>
    _used_instruction_space[pio_get_index(pio)] |= program_mask << offset;
1000236e:	4653      	mov	r3, sl
10002370:	4662      	mov	r2, ip
10002372:	4305      	orrs	r5, r0
10002374:	509d      	str	r5, [r3, r2]
    int offset = _pio_find_offset_for_program(pio, program);
    if (offset < 0) {
        panic("No program space");
    }
    _pio_add_program_at_offset(pio, program, offset);
    hw_claim_unlock(save);
10002376:	4648      	mov	r0, r9
10002378:	f7fe ff80 	bl	1000127c <hw_claim_unlock>
    return offset;
}
1000237c:	0020      	movs	r0, r4
1000237e:	bce0      	pop	{r5, r6, r7}
10002380:	46ba      	mov	sl, r7
10002382:	46b1      	mov	r9, r6
10002384:	46a8      	mov	r8, r5
10002386:	bdf0      	pop	{r4, r5, r6, r7, pc}
        panic("No program space");
10002388:	4808      	ldr	r0, [pc, #32]	; (100023ac <pio_add_program+0xc4>)
1000238a:	f000 f99f 	bl	100026cc <panic>
        for (int i = 32 - program->length; i >= 0; i--) {
1000238e:	2b00      	cmp	r3, #0
10002390:	da02      	bge.n	10002398 <pio_add_program+0xb0>
10002392:	e7f9      	b.n	10002388 <pio_add_program+0xa0>
10002394:	3b01      	subs	r3, #1
10002396:	d3f7      	bcc.n	10002388 <pio_add_program+0xa0>
            if (!(used_mask & (program_mask << (uint) i))) {
10002398:	0015      	movs	r5, r2
1000239a:	409d      	lsls	r5, r3
1000239c:	001c      	movs	r4, r3
1000239e:	4205      	tst	r5, r0
100023a0:	d1f8      	bne.n	10002394 <pio_add_program+0xac>
100023a2:	e7c7      	b.n	10002334 <pio_add_program+0x4c>
100023a4:	afd00000 	.word	0xafd00000
100023a8:	2003db00 	.word	0x2003db00
100023ac:	1000a388 	.word	0x1000a388

100023b0 <pio_clear_instruction_memory>:
    assert(program_mask == (_used_instruction_space[pio_get_index(pio)] & program_mask));
    _used_instruction_space[pio_get_index(pio)] &= ~program_mask;
    hw_claim_unlock(save);
}

void pio_clear_instruction_memory(PIO pio) {
100023b0:	b510      	push	{r4, lr}
100023b2:	0004      	movs	r4, r0
    uint32_t save = hw_claim_lock();
100023b4:	f7fe ff56 	bl	10001264 <hw_claim_lock>
100023b8:	4b09      	ldr	r3, [pc, #36]	; (100023e0 <pio_clear_instruction_memory+0x30>)
    _used_instruction_space[pio_get_index(pio)] = 0;
100023ba:	2100      	movs	r1, #0
100023bc:	18e3      	adds	r3, r4, r3
100023be:	425a      	negs	r2, r3
100023c0:	4153      	adcs	r3, r2
100023c2:	4a08      	ldr	r2, [pc, #32]	; (100023e4 <pio_clear_instruction_memory+0x34>)
100023c4:	009b      	lsls	r3, r3, #2
100023c6:	5099      	str	r1, [r3, r2]
    for(uint i=0;i<PIO_INSTRUCTION_COUNT;i++) {
100023c8:	2300      	movs	r3, #0
        pio->instr_mem[i] = pio_encode_jmp(i);
100023ca:	001a      	movs	r2, r3
100023cc:	3212      	adds	r2, #18
100023ce:	0092      	lsls	r2, r2, #2
100023d0:	5113      	str	r3, [r2, r4]
    for(uint i=0;i<PIO_INSTRUCTION_COUNT;i++) {
100023d2:	3301      	adds	r3, #1
100023d4:	2b20      	cmp	r3, #32
100023d6:	d1f8      	bne.n	100023ca <pio_clear_instruction_memory+0x1a>
    }
    hw_claim_unlock(save);
100023d8:	f7fe ff50 	bl	1000127c <hw_claim_unlock>
}
100023dc:	bd10      	pop	{r4, pc}
100023de:	46c0      	nop			; (mov r8, r8)
100023e0:	afd00000 	.word	0xafd00000
100023e4:	2003db00 	.word	0x2003db00

100023e8 <pio_sm_set_consecutive_pindirs>:
        pin_mask &= pin_mask - 1;
    }
    pio->sm[sm].pinctrl = pinctrl_saved;
}

void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
100023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100023ea:	464e      	mov	r6, r9
100023ec:	4645      	mov	r5, r8
100023ee:	46de      	mov	lr, fp
100023f0:	4657      	mov	r7, sl
100023f2:	468a      	mov	sl, r1
    assert(pin < 32u);
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
100023f4:	0049      	lsls	r1, r1, #1
void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
100023f6:	b5e0      	push	{r5, r6, r7, lr}
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
100023f8:	000d      	movs	r5, r1
void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
100023fa:	4680      	mov	r8, r0
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
100023fc:	4455      	add	r5, sl
100023fe:	00ed      	lsls	r5, r5, #3
10002400:	4445      	add	r5, r8
10002402:	4689      	mov	r9, r1
10002404:	0029      	movs	r1, r5
void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
10002406:	ac09      	add	r4, sp, #36	; 0x24
10002408:	7826      	ldrb	r6, [r4, #0]
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
1000240a:	31dc      	adds	r1, #220	; 0xdc
    uint pindir_val = is_out ? 0x1f : 0;
1000240c:	1e74      	subs	r4, r6, #1
1000240e:	41a6      	sbcs	r6, r4
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
10002410:	6808      	ldr	r0, [r1, #0]
    uint pindir_val = is_out ? 0x1f : 0;
10002412:	4274      	negs	r4, r6
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
10002414:	4684      	mov	ip, r0
    uint pindir_val = is_out ? 0x1f : 0;
10002416:	4814      	ldr	r0, [pc, #80]	; (10002468 <pio_sm_set_consecutive_pindirs+0x80>)
10002418:	261f      	movs	r6, #31
1000241a:	4683      	mov	fp, r0
1000241c:	4026      	ands	r6, r4
1000241e:	445e      	add	r6, fp
    while (count > 5) {
10002420:	2b05      	cmp	r3, #5
10002422:	d90c      	bls.n	1000243e <pio_sm_set_consecutive_pindirs+0x56>
        pio->sm[sm].pinctrl = (5u << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
10002424:	20a0      	movs	r0, #160	; 0xa0
        pio_sm_exec(pio, sm, pio_encode_set(pio_pindirs, pindir_val));
        count -= 5;
        pin = (pin + 5) & 0x1f;
10002426:	271f      	movs	r7, #31
        pio->sm[sm].pinctrl = (5u << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
10002428:	0540      	lsls	r0, r0, #21
 * \param sm State machine index (0..3)
 * \param instr the encoded PIO instruction
 */
inline static void pio_sm_exec(PIO pio, uint sm, uint instr) {
    check_sm_param(sm);
    pio->sm[sm].instr = instr;
1000242a:	35d8      	adds	r5, #216	; 0xd8
1000242c:	0154      	lsls	r4, r2, #5
1000242e:	4304      	orrs	r4, r0
        pin = (pin + 5) & 0x1f;
10002430:	3205      	adds	r2, #5
        count -= 5;
10002432:	3b05      	subs	r3, #5
        pio->sm[sm].pinctrl = (5u << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
10002434:	600c      	str	r4, [r1, #0]
        pin = (pin + 5) & 0x1f;
10002436:	403a      	ands	r2, r7
10002438:	602e      	str	r6, [r5, #0]
    while (count > 5) {
1000243a:	2b05      	cmp	r3, #5
1000243c:	d8f6      	bhi.n	1000242c <pio_sm_set_consecutive_pindirs+0x44>
    }
    pio->sm[sm].pinctrl = (count << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
1000243e:	4649      	mov	r1, r9
10002440:	4451      	add	r1, sl
10002442:	00c9      	lsls	r1, r1, #3
10002444:	4441      	add	r1, r8
10002446:	0152      	lsls	r2, r2, #5
10002448:	069b      	lsls	r3, r3, #26
1000244a:	4313      	orrs	r3, r2
1000244c:	000a      	movs	r2, r1
1000244e:	0008      	movs	r0, r1
10002450:	32dc      	adds	r2, #220	; 0xdc
10002452:	6013      	str	r3, [r2, #0]
    pio_sm_exec(pio, sm, pio_encode_set(pio_pindirs, pindir_val));
    pio->sm[sm].pinctrl = pinctrl_saved;
10002454:	4663      	mov	r3, ip
10002456:	30d8      	adds	r0, #216	; 0xd8
10002458:	6006      	str	r6, [r0, #0]
1000245a:	6013      	str	r3, [r2, #0]
}
1000245c:	bcf0      	pop	{r4, r5, r6, r7}
1000245e:	46bb      	mov	fp, r7
10002460:	46b2      	mov	sl, r6
10002462:	46a9      	mov	r9, r5
10002464:	46a0      	mov	r8, r4
10002466:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002468:	0000e080 	.word	0x0000e080

1000246c <pio_sm_init>:

void pio_sm_init(PIO pio, uint sm, uint initial_pc, const pio_sm_config *config) {
1000246c:	b5f0      	push	{r4, r5, r6, r7, lr}
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
1000246e:	2501      	movs	r5, #1
10002470:	408d      	lsls	r5, r1
10002472:	6804      	ldr	r4, [r0, #0]
10002474:	43ac      	bics	r4, r5
    pio->sm[sm].clkdiv = config->clkdiv;
10002476:	004d      	lsls	r5, r1, #1
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
10002478:	6004      	str	r4, [r0, #0]
    pio->sm[sm].clkdiv = config->clkdiv;
1000247a:	186c      	adds	r4, r5, r1
1000247c:	00e4      	lsls	r4, r4, #3
1000247e:	1904      	adds	r4, r0, r4
10002480:	0026      	movs	r6, r4
10002482:	36c8      	adds	r6, #200	; 0xc8
    // Halt the machine, set some sensible defaults
    pio_sm_set_enabled(pio, sm, false);

    if (config) {
10002484:	2b00      	cmp	r3, #0
10002486:	d02a      	beq.n	100024de <pio_sm_init+0x72>
10002488:	681f      	ldr	r7, [r3, #0]
    pio->sm[sm].pinctrl = config->pinctrl;
1000248a:	34dc      	adds	r4, #220	; 0xdc
    pio->sm[sm].clkdiv = config->clkdiv;
1000248c:	6037      	str	r7, [r6, #0]
    pio->sm[sm].execctrl = config->execctrl;
1000248e:	685f      	ldr	r7, [r3, #4]
10002490:	6077      	str	r7, [r6, #4]
    pio->sm[sm].shiftctrl = config->shiftctrl;
10002492:	689f      	ldr	r7, [r3, #8]
    pio->sm[sm].pinctrl = config->pinctrl;
10002494:	68db      	ldr	r3, [r3, #12]
    pio->sm[sm].shiftctrl = config->shiftctrl;
10002496:	60b7      	str	r7, [r6, #8]
    pio->sm[sm].pinctrl = config->pinctrl;
10002498:	6023      	str	r3, [r4, #0]
 * \param sm State machine index (0..3)
 */
static inline void pio_sm_clear_fifos(PIO pio, uint sm) {
    // changing the FIFO join state clears the fifo
    check_sm_param(sm);
    hw_xor_bits(&pio->sm[sm].shiftctrl, PIO_SM0_SHIFTCTRL_FJOIN_RX_BITS);
1000249a:	186d      	adds	r5, r5, r1
1000249c:	00eb      	lsls	r3, r5, #3
1000249e:	001d      	movs	r5, r3
100024a0:	2480      	movs	r4, #128	; 0x80
100024a2:	35d0      	adds	r5, #208	; 0xd0
100024a4:	1945      	adds	r5, r0, r5
100024a6:	0164      	lsls	r4, r4, #5
100024a8:	432c      	orrs	r4, r5
100024aa:	2580      	movs	r5, #128	; 0x80
100024ac:	062d      	lsls	r5, r5, #24
100024ae:	6025      	str	r5, [r4, #0]
100024b0:	6025      	str	r5, [r4, #0]
    const uint32_t fdebug_sm_mask =
            (1u << PIO_FDEBUG_TXOVER_LSB) |
            (1u << PIO_FDEBUG_RXUNDER_LSB) |
            (1u << PIO_FDEBUG_TXSTALL_LSB) |
            (1u << PIO_FDEBUG_RXSTALL_LSB);
    pio->fdebug = fdebug_sm_mask << sm;
100024b2:	4c11      	ldr	r4, [pc, #68]	; (100024f8 <pio_sm_init+0x8c>)
    pio->ctrl |= 1u << (PIO_CTRL_SM_RESTART_LSB + sm);
100024b4:	1d0d      	adds	r5, r1, #4
100024b6:	408c      	lsls	r4, r1
100024b8:	6084      	str	r4, [r0, #8]
100024ba:	2401      	movs	r4, #1
100024bc:	0027      	movs	r7, r4
100024be:	40af      	lsls	r7, r5
100024c0:	003d      	movs	r5, r7
    pio->ctrl |= 1u << (PIO_CTRL_CLKDIV_RESTART_LSB + sm);
100024c2:	3108      	adds	r1, #8
100024c4:	408c      	lsls	r4, r1
        assert(arg2 && arg2 <= 32);
    } else {
        assert(arg2 <= 31);
    }
#endif
    return instr_bits | (arg1 << 5u) | (arg2 & 0x1fu);
100024c6:	211f      	movs	r1, #31
    pio->ctrl |= 1u << (PIO_CTRL_SM_RESTART_LSB + sm);
100024c8:	6806      	ldr	r6, [r0, #0]
100024ca:	400a      	ands	r2, r1
100024cc:	4335      	orrs	r5, r6
100024ce:	6005      	str	r5, [r0, #0]
    pio->ctrl |= 1u << (PIO_CTRL_CLKDIV_RESTART_LSB + sm);
100024d0:	6805      	ldr	r5, [r0, #0]
100024d2:	432c      	orrs	r4, r5
100024d4:	6004      	str	r4, [r0, #0]
    pio->sm[sm].instr = instr;
100024d6:	18c0      	adds	r0, r0, r3
100024d8:	30d8      	adds	r0, #216	; 0xd8
100024da:	6002      	str	r2, [r0, #0]

    // Finally, clear some internal SM state
    pio_sm_restart(pio, sm);
    pio_sm_clkdiv_restart(pio, sm);
    pio_sm_exec(pio, sm, pio_encode_jmp(initial_pc));
}
100024dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pio->sm[sm].clkdiv = config->clkdiv;
100024de:	2780      	movs	r7, #128	; 0x80
100024e0:	027f      	lsls	r7, r7, #9
100024e2:	6037      	str	r7, [r6, #0]
    pio->sm[sm].execctrl = config->execctrl;
100024e4:	27f8      	movs	r7, #248	; 0xf8
100024e6:	027f      	lsls	r7, r7, #9
100024e8:	6077      	str	r7, [r6, #4]
    pio->sm[sm].shiftctrl = config->shiftctrl;
100024ea:	27c0      	movs	r7, #192	; 0xc0
    pio->sm[sm].pinctrl = config->pinctrl;
100024ec:	34dc      	adds	r4, #220	; 0xdc
    pio->sm[sm].shiftctrl = config->shiftctrl;
100024ee:	033f      	lsls	r7, r7, #12
100024f0:	60b7      	str	r7, [r6, #8]
    pio->sm[sm].pinctrl = config->pinctrl;
100024f2:	6023      	str	r3, [r4, #0]
100024f4:	e7d1      	b.n	1000249a <pio_sm_init+0x2e>
100024f6:	46c0      	nop			; (mov r8, r8)
100024f8:	01010101 	.word	0x01010101

100024fc <running_on_fpga>:
#include "hardware/address_mapped.h"
#include "hardware/regs/tbman.h"
#include "hardware/regs/sysinfo.h"

bool running_on_fpga() {
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
100024fc:	4b02      	ldr	r3, [pc, #8]	; (10002508 <running_on_fpga+0xc>)
100024fe:	6818      	ldr	r0, [r3, #0]
10002500:	0780      	lsls	r0, r0, #30
10002502:	0fc0      	lsrs	r0, r0, #31
}
10002504:	4770      	bx	lr
10002506:	46c0      	nop			; (mov r8, r8)
10002508:	4006c000 	.word	0x4006c000

1000250c <pll_init>:
// For MHZ definitions etc
#include "hardware/clocks.h"
#include "hardware/pll.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint32_t refdiv, uint32_t vco_freq, uint32_t post_div1, uint8_t post_div2) {
1000250c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000250e:	46c6      	mov	lr, r8
10002510:	b500      	push	{lr}
10002512:	001e      	movs	r6, r3
10002514:	ab06      	add	r3, sp, #24
10002516:	781f      	ldrb	r7, [r3, #0]
    // Turn off PLL in case it is already running
    pll->pwr = 0xffffffff;
10002518:	2301      	movs	r3, #1
1000251a:	425b      	negs	r3, r3
1000251c:	6043      	str	r3, [r0, #4]
    pll->fbdiv_int = 0;
1000251e:	2300      	movs	r3, #0
void pll_init(PLL pll, uint32_t refdiv, uint32_t vco_freq, uint32_t post_div1, uint8_t post_div2) {
10002520:	0004      	movs	r4, r0
    pll->fbdiv_int = 0;
10002522:	6083      	str	r3, [r0, #8]

    uint32_t ref_mhz = XOSC_MHZ / refdiv;
    pll->cs = refdiv;
10002524:	6001      	str	r1, [r0, #0]
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10002526:	200c      	movs	r0, #12
void pll_init(PLL pll, uint32_t refdiv, uint32_t vco_freq, uint32_t post_div1, uint8_t post_div2) {
10002528:	4690      	mov	r8, r2
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
1000252a:	f7fd ff23 	bl	10000374 <__wrap___aeabi_uidiv>

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * MHZ);
1000252e:	0141      	lsls	r1, r0, #5
10002530:	1a09      	subs	r1, r1, r0
10002532:	018d      	lsls	r5, r1, #6
10002534:	1a69      	subs	r1, r5, r1
10002536:	00c9      	lsls	r1, r1, #3
10002538:	1809      	adds	r1, r1, r0
1000253a:	0189      	lsls	r1, r1, #6
1000253c:	4640      	mov	r0, r8
1000253e:	f7fd ff19 	bl	10000374 <__wrap___aeabi_uidiv>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002542:	21c0      	movs	r1, #192	; 0xc0

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
10002544:	1d23      	adds	r3, r4, #4
10002546:	0189      	lsls	r1, r1, #6
10002548:	4319      	orrs	r1, r3
1000254a:	2321      	movs	r3, #33	; 0x21
    pll->fbdiv_int = fbdiv;
1000254c:	60a0      	str	r0, [r4, #8]
1000254e:	600b      	str	r3, [r1, #0]

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
10002550:	6822      	ldr	r2, [r4, #0]
10002552:	2a00      	cmp	r2, #0
10002554:	dafc      	bge.n	10002550 <pll_init+0x44>
10002556:	2308      	movs	r3, #8

    // Set up post dividers - div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
10002558:	033f      	lsls	r7, r7, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
1000255a:	0436      	lsls	r6, r6, #16
1000255c:	433e      	orrs	r6, r7
    pll->prim = pdiv;
1000255e:	60e6      	str	r6, [r4, #12]
10002560:	600b      	str	r3, [r1, #0]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
/// \end::pll_init_finish[]
}
10002562:	bc80      	pop	{r7}
10002564:	46b8      	mov	r8, r7
10002566:	bdf0      	pop	{r4, r5, r6, r7, pc}

10002568 <_out_char>:
    (void) idx;
    (void) maxlen;
}

// internal _putchar wrapper
static inline void _out_char(char character, void *buffer, size_t idx, size_t maxlen) {
10002568:	b510      	push	{r4, lr}
    (void) buffer;
    (void) idx;
    (void) maxlen;
    if (character) {
1000256a:	2800      	cmp	r0, #0
1000256c:	d100      	bne.n	10002570 <_out_char+0x8>
        _putchar(character);
    }
}
1000256e:	bd10      	pop	{r4, pc}
    putchar(character);
10002570:	f000 f996 	bl	100028a0 <__wrap_putchar>
}
10002574:	e7fb      	b.n	1000256e <_out_char+0x6>
10002576:	46c0      	nop			; (mov r8, r8)

10002578 <weak_raw_vprintf>:
    bool rc = weak_raw_vprintf(fmt, va);
    va_end(va);
    return rc;
}

bool weak_raw_vprintf(const char *fmt, va_list args) {
10002578:	b510      	push	{r4, lr}
    if (lazy_vsnprintf) {
1000257a:	4a09      	ldr	r2, [pc, #36]	; (100025a0 <weak_raw_vprintf+0x28>)
bool weak_raw_vprintf(const char *fmt, va_list args) {
1000257c:	0003      	movs	r3, r0
    if (lazy_vsnprintf) {
1000257e:	6814      	ldr	r4, [r2, #0]
bool weak_raw_vprintf(const char *fmt, va_list args) {
10002580:	b084      	sub	sp, #16
    if (lazy_vsnprintf) {
10002582:	2c00      	cmp	r4, #0
10002584:	d008      	beq.n	10002598 <weak_raw_vprintf+0x20>
        char buffer[1];
        lazy_vsnprintf(_out_char, buffer, (size_t) -1, fmt, args);
10002586:	2201      	movs	r2, #1
10002588:	9100      	str	r1, [sp, #0]
1000258a:	4806      	ldr	r0, [pc, #24]	; (100025a4 <weak_raw_vprintf+0x2c>)
1000258c:	4252      	negs	r2, r2
1000258e:	a903      	add	r1, sp, #12
10002590:	47a0      	blx	r4
        return true;
10002592:	2001      	movs	r0, #1
    } else {
        puts(fmt);
        return false;
    }
}
10002594:	b004      	add	sp, #16
10002596:	bd10      	pop	{r4, pc}
        puts(fmt);
10002598:	f000 f990 	bl	100028bc <__wrap_puts>
        return false;
1000259c:	2000      	movs	r0, #0
1000259e:	e7f9      	b.n	10002594 <weak_raw_vprintf+0x1c>
100025a0:	2003e300 	.word	0x2003e300
100025a4:	10002569 	.word	0x10002569

100025a8 <runtime_init>:
                   | (0x7 << 1) // size 2^(7 + 1) = 256
                   | (subregion_select << 8)
                   | 0x10000000; // XN = disable instruction fetch; no other bits means no permissions
}

void runtime_init(void) {
100025a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100025aa:	4a2b      	ldr	r2, [pc, #172]	; (10002658 <runtime_init+0xb0>)
100025ac:	4b2b      	ldr	r3, [pc, #172]	; (1000265c <runtime_init+0xb4>)
100025ae:	492c      	ldr	r1, [pc, #176]	; (10002660 <runtime_init+0xb8>)
100025b0:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100025b2:	4a2c      	ldr	r2, [pc, #176]	; (10002664 <runtime_init+0xbc>)
100025b4:	4b2c      	ldr	r3, [pc, #176]	; (10002668 <runtime_init+0xc0>)
100025b6:	601a      	str	r2, [r3, #0]
100025b8:	0014      	movs	r4, r2
100025ba:	688b      	ldr	r3, [r1, #8]
100025bc:	439c      	bics	r4, r3
100025be:	d1fb      	bne.n	100025b8 <runtime_init+0x10>
    extern void (*__preinit_array_end)();

    // Call each function in the list.
    // We have to take the address of the symbols, as __preinit_array_start *is*
    // the first function pointer, not the address of it.
    for (void (**p)() = &__preinit_array_start; p < &__preinit_array_end; ++p) {
100025c0:	4d2a      	ldr	r5, [pc, #168]	; (1000266c <runtime_init+0xc4>)
100025c2:	4e2b      	ldr	r6, [pc, #172]	; (10002670 <runtime_init+0xc8>)
100025c4:	42b5      	cmp	r5, r6
100025c6:	d208      	bcs.n	100025da <runtime_init+0x32>
100025c8:	3e01      	subs	r6, #1
100025ca:	1b76      	subs	r6, r6, r5
100025cc:	08b6      	lsrs	r6, r6, #2
        (*p)();
100025ce:	cd08      	ldmia	r5!, {r3}
100025d0:	4798      	blx	r3
    for (void (**p)() = &__preinit_array_start; p < &__preinit_array_end; ++p) {
100025d2:	0023      	movs	r3, r4
100025d4:	3401      	adds	r4, #1
100025d6:	42b3      	cmp	r3, r6
100025d8:	d1f9      	bne.n	100025ce <runtime_init+0x26>
    }

    // After calling preinit we have enough runtime to do the exciting maths
    // in clocks_init
    clocks_init();
100025da:	f7fe ff4b 	bl	10001474 <clocks_init>
100025de:	4a25      	ldr	r2, [pc, #148]	; (10002674 <runtime_init+0xcc>)
100025e0:	4b21      	ldr	r3, [pc, #132]	; (10002668 <runtime_init+0xc0>)
100025e2:	601a      	str	r2, [r3, #0]
100025e4:	4a1e      	ldr	r2, [pc, #120]	; (10002660 <runtime_init+0xb8>)
100025e6:	6893      	ldr	r3, [r2, #8]
100025e8:	43db      	mvns	r3, r3
100025ea:	01db      	lsls	r3, r3, #7
100025ec:	09dc      	lsrs	r4, r3, #7
100025ee:	2b00      	cmp	r3, #0
100025f0:	d1f9      	bne.n	100025e6 <runtime_init+0x3e>
    unreset_block_wait(RESETS_RESET_BITS);

#if !PICO_IE_26_29_UNCHANGED_ON_RESET
    // after resetting BANK0 we should disable IE on 26-29
    hw_clear_alias(padsbank0_hw)->io[26] = hw_clear_alias(padsbank0_hw)->io[27] =
            hw_clear_alias(padsbank0_hw)->io[28] = hw_clear_alias(padsbank0_hw)->io[29] = PADS_BANK0_GPIO0_IE_BITS;
100025f2:	2240      	movs	r2, #64	; 0x40
100025f4:	4b20      	ldr	r3, [pc, #128]	; (10002678 <runtime_init+0xd0>)

    extern mutex_t __mutex_array_start;
    extern mutex_t __mutex_array_end;

    // the first function pointer, not the address of it.
    for (mutex_t *m = &__mutex_array_start; m < &__mutex_array_end; m++) {
100025f6:	4d21      	ldr	r5, [pc, #132]	; (1000267c <runtime_init+0xd4>)
100025f8:	4f21      	ldr	r7, [pc, #132]	; (10002680 <runtime_init+0xd8>)
            hw_clear_alias(padsbank0_hw)->io[28] = hw_clear_alias(padsbank0_hw)->io[29] = PADS_BANK0_GPIO0_IE_BITS;
100025fa:	679a      	str	r2, [r3, #120]	; 0x78
100025fc:	675a      	str	r2, [r3, #116]	; 0x74
    hw_clear_alias(padsbank0_hw)->io[26] = hw_clear_alias(padsbank0_hw)->io[27] =
100025fe:	671a      	str	r2, [r3, #112]	; 0x70
10002600:	66da      	str	r2, [r3, #108]	; 0x6c
    for (mutex_t *m = &__mutex_array_start; m < &__mutex_array_end; m++) {
10002602:	42bd      	cmp	r5, r7
10002604:	d20b      	bcs.n	1000261e <runtime_init+0x76>
10002606:	2600      	movs	r6, #0
10002608:	3f01      	subs	r7, #1
1000260a:	1b7f      	subs	r7, r7, r5
1000260c:	08ff      	lsrs	r7, r7, #3
        mutex_init(m);
1000260e:	0028      	movs	r0, r5
10002610:	f7ff fc6e 	bl	10001ef0 <mutex_init>
    for (mutex_t *m = &__mutex_array_start; m < &__mutex_array_end; m++) {
10002614:	3508      	adds	r5, #8
10002616:	0033      	movs	r3, r6
10002618:	3601      	adds	r6, #1
1000261a:	42bb      	cmp	r3, r7
1000261c:	d1f7      	bne.n	1000260e <runtime_init+0x66>
    }

#if !(PICO_NO_RAM_VECTOR_TABLE || PICO_NO_FLASH)
    __builtin_memcpy(ram_vector_table, (uint32_t *) scb_hw->vtor, sizeof(ram_vector_table));
1000261e:	4e19      	ldr	r6, [pc, #100]	; (10002684 <runtime_init+0xdc>)
10002620:	4d19      	ldr	r5, [pc, #100]	; (10002688 <runtime_init+0xe0>)
10002622:	22c0      	movs	r2, #192	; 0xc0
10002624:	68a9      	ldr	r1, [r5, #8]
10002626:	0030      	movs	r0, r6
10002628:	f7fe fdca 	bl	100011c0 <__wrap___aeabi_memcpy>
    scb_hw->vtor = (intptr_t) ram_vector_table;
1000262c:	60ae      	str	r6, [r5, #8]
    // install core0 stack guard
    extern char __StackBottom;
    runtime_install_stack_guard(&__StackBottom);
#endif

    spin_locks_reset();
1000262e:	f000 fb65 	bl	10002cfc <spin_locks_reset>
    irq_init_priorities();
10002632:	f7ff fbdd 	bl	10001df0 <irq_init_priorities>
    alarm_pool_init_default();
10002636:	f000 fdab 	bl	10003190 <alarm_pool_init_default>
    extern void (*__init_array_end)();

    // Call each function in the list.
    // We have to take the address of the symbols, as __init_array_start *is*
    // the first function pointer, not the address of it.
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {
1000263a:	4d14      	ldr	r5, [pc, #80]	; (1000268c <runtime_init+0xe4>)
1000263c:	4e14      	ldr	r6, [pc, #80]	; (10002690 <runtime_init+0xe8>)
1000263e:	42b5      	cmp	r5, r6
10002640:	d208      	bcs.n	10002654 <runtime_init+0xac>
10002642:	3e01      	subs	r6, #1
10002644:	1b76      	subs	r6, r6, r5
10002646:	08b6      	lsrs	r6, r6, #2
        (*p)();
10002648:	cd08      	ldmia	r5!, {r3}
1000264a:	4798      	blx	r3
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {
1000264c:	0023      	movs	r3, r4
1000264e:	3401      	adds	r4, #1
10002650:	429e      	cmp	r6, r3
10002652:	d1f9      	bne.n	10002648 <runtime_init+0xa0>
    }

}
10002654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10002656:	46c0      	nop			; (mov r8, r8)
10002658:	ffffcdbf 	.word	0xffffcdbf
1000265c:	4000e000 	.word	0x4000e000
10002660:	4000c000 	.word	0x4000c000
10002664:	003c7ffe 	.word	0x003c7ffe
10002668:	4000f000 	.word	0x4000f000
1000266c:	200033f0 	.word	0x200033f0
10002670:	20003400 	.word	0x20003400
10002674:	01ffffff 	.word	0x01ffffff
10002678:	4001f000 	.word	0x4001f000
1000267c:	200033e8 	.word	0x200033e8
10002680:	200033f0 	.word	0x200033f0
10002684:	20000000 	.word	0x20000000
10002688:	e000ed00 	.word	0xe000ed00
1000268c:	20003400 	.word	0x20003400
10002690:	20003408 	.word	0x20003408

10002694 <_sbrk>:
void *_sbrk(int incr) {
    extern char end; /* Set by linker.  */
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0)
10002694:	4a09      	ldr	r2, [pc, #36]	; (100026bc <_sbrk+0x28>)
void *_sbrk(int incr) {
10002696:	0003      	movs	r3, r0
    if (heap_end == 0)
10002698:	6810      	ldr	r0, [r2, #0]
1000269a:	2800      	cmp	r0, #0
1000269c:	d005      	beq.n	100026aa <_sbrk+0x16>
        heap_end = &end;

    prev_heap_end = heap_end;
    char *next_heap_end = heap_end + incr;

    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
1000269e:	4908      	ldr	r1, [pc, #32]	; (100026c0 <_sbrk+0x2c>)
    char *next_heap_end = heap_end + incr;
100026a0:	18c3      	adds	r3, r0, r3
    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
100026a2:	428b      	cmp	r3, r1
100026a4:	d207      	bcs.n	100026b6 <_sbrk+0x22>
#else
        return (char *) -1;
#endif
    }

    heap_end = next_heap_end;
100026a6:	6013      	str	r3, [r2, #0]
    return (void *) prev_heap_end;
}
100026a8:	4770      	bx	lr
        heap_end = &end;
100026aa:	4806      	ldr	r0, [pc, #24]	; (100026c4 <_sbrk+0x30>)
    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
100026ac:	4904      	ldr	r1, [pc, #16]	; (100026c0 <_sbrk+0x2c>)
    char *next_heap_end = heap_end + incr;
100026ae:	18c3      	adds	r3, r0, r3
        heap_end = &end;
100026b0:	6010      	str	r0, [r2, #0]
    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
100026b2:	428b      	cmp	r3, r1
100026b4:	d3f7      	bcc.n	100026a6 <_sbrk+0x12>
        return (char *) -1;
100026b6:	2001      	movs	r0, #1
100026b8:	4240      	negs	r0, r0
100026ba:	e7f5      	b.n	100026a8 <_sbrk+0x14>
100026bc:	2003dc7c 	.word	0x2003dc7c
100026c0:	20040000 	.word	0x20040000
100026c4:	2003e348 	.word	0x2003e348

100026c8 <exit>:
    __asm__("bkpt #0");
100026c8:	be00      	bkpt	0x0000
100026ca:	e7fd      	b.n	100026c8 <exit>

100026cc <panic>:
//  right now, print mutex may be uninitialised (in which case it deadlocks - although after printing "PANIC")
//  more importantly there may be no stdout/UART initialized yet
// todo we may want to think about where we print panic messages to; writing to USB appears to work
//  though it doesn't seem like we can expect it to... fine for now
//
void __attribute__((noreturn)) __printflike(1, 0) panic(const char *fmt, ...) {
100026cc:	b40f      	push	{r0, r1, r2, r3}
100026ce:	b500      	push	{lr}
    puts("\n*** PANIC ***\n");
100026d0:	4808      	ldr	r0, [pc, #32]	; (100026f4 <panic+0x28>)
void __attribute__((noreturn)) __printflike(1, 0) panic(const char *fmt, ...) {
100026d2:	b083      	sub	sp, #12
    puts("\n*** PANIC ***\n");
100026d4:	f000 f8f2 	bl	100028bc <__wrap_puts>
    if (fmt) {
100026d8:	9b04      	ldr	r3, [sp, #16]
100026da:	2b00      	cmp	r3, #0
100026dc:	d007      	beq.n	100026ee <panic+0x22>
#if PICO_PRINTF_NONE
        puts(fmt);
#else
        va_list args;
        va_start(args, fmt);
100026de:	a905      	add	r1, sp, #20
#if PICO_PRINTF_ALWAYS_INCLUDED
        vprintf(fmt, args);
#else
        weak_raw_vprintf(fmt, args);
100026e0:	0018      	movs	r0, r3
        va_start(args, fmt);
100026e2:	9101      	str	r1, [sp, #4]
        weak_raw_vprintf(fmt, args);
100026e4:	f7ff ff48 	bl	10002578 <weak_raw_vprintf>
#endif
        va_end(args);
        puts("\n");
100026e8:	4803      	ldr	r0, [pc, #12]	; (100026f8 <panic+0x2c>)
100026ea:	f000 f8e7 	bl	100028bc <__wrap_puts>
100026ee:	be00      	bkpt	0x0000
100026f0:	e7fd      	b.n	100026ee <panic+0x22>
100026f2:	46c0      	nop			; (mov r8, r8)
100026f4:	1000a39c 	.word	0x1000a39c
100026f8:	1000a3ac 	.word	0x1000a3ac

100026fc <hard_assertion_failure>:
    }

    _exit(1);
}

void hard_assertion_failure(void) {
100026fc:	b510      	push	{r4, lr}
    panic("Hard assert");
100026fe:	4801      	ldr	r0, [pc, #4]	; (10002704 <hard_assertion_failure+0x8>)
10002700:	f7ff ffe4 	bl	100026cc <panic>
10002704:	1000a3b0 	.word	0x1000a3b0

10002708 <stdio_out_chars_crlf.part.0>:
}
static void print_serialize_end() {
}
#endif

static void stdio_out_chars_crlf(stdio_driver_t *driver, const char *s, int len) {
10002708:	b5f0      	push	{r4, r5, r6, r7, lr}
1000270a:	4646      	mov	r6, r8
1000270c:	464f      	mov	r7, r9
1000270e:	46d6      	mov	lr, sl
10002710:	4680      	mov	r8, r0
10002712:	b5c0      	push	{r6, r7, lr}
10002714:	000e      	movs	r6, r1
10002716:	1e17      	subs	r7, r2, #0
        driver->out_chars(s, len);
        return;
    }
    int first_of_chunk = 0;
    static const char crlf_str[] = {'\r', '\n'};
    for (int i = 0; i < len; i++) {
10002718:	dd3f      	ble.n	1000279a <stdio_out_chars_crlf.part.0+0x92>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
1000271a:	1e4b      	subs	r3, r1, #1
1000271c:	4699      	mov	r9, r3
        if (s[i] == '\n' && !prev_char_was_cr) {
            if (i > first_of_chunk) {
                driver->out_chars(&s[first_of_chunk], i - first_of_chunk);
            }
            driver->out_chars(crlf_str, 2);
1000271e:	4b21      	ldr	r3, [pc, #132]	; (100027a4 <stdio_out_chars_crlf.part.0+0x9c>)
    for (int i = 0; i < len; i++) {
10002720:	2501      	movs	r5, #1
10002722:	2400      	movs	r4, #0
    int first_of_chunk = 0;
10002724:	2000      	movs	r0, #0
            driver->out_chars(crlf_str, 2);
10002726:	469a      	mov	sl, r3
10002728:	e00d      	b.n	10002746 <stdio_out_chars_crlf.part.0+0x3e>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
1000272a:	464b      	mov	r3, r9
1000272c:	5d1b      	ldrb	r3, [r3, r4]
1000272e:	3b0d      	subs	r3, #13
10002730:	425a      	negs	r2, r3
10002732:	4153      	adcs	r3, r2
        if (s[i] == '\n' && !prev_char_was_cr) {
10002734:	5d32      	ldrb	r2, [r6, r4]
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10002736:	b2db      	uxtb	r3, r3
        if (s[i] == '\n' && !prev_char_was_cr) {
10002738:	2a0a      	cmp	r2, #10
1000273a:	d00b      	beq.n	10002754 <stdio_out_chars_crlf.part.0+0x4c>
            first_of_chunk = i + 1;
1000273c:	002b      	movs	r3, r5
    for (int i = 0; i < len; i++) {
1000273e:	3401      	adds	r4, #1
10002740:	3501      	adds	r5, #1
10002742:	429f      	cmp	r7, r3
10002744:	dd1a      	ble.n	1000277c <stdio_out_chars_crlf.part.0+0x74>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10002746:	2c00      	cmp	r4, #0
10002748:	d1ef      	bne.n	1000272a <stdio_out_chars_crlf.part.0+0x22>
1000274a:	4643      	mov	r3, r8
        if (s[i] == '\n' && !prev_char_was_cr) {
1000274c:	5d32      	ldrb	r2, [r6, r4]
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
1000274e:	7c1b      	ldrb	r3, [r3, #16]
        if (s[i] == '\n' && !prev_char_was_cr) {
10002750:	2a0a      	cmp	r2, #10
10002752:	d1f3      	bne.n	1000273c <stdio_out_chars_crlf.part.0+0x34>
10002754:	2b00      	cmp	r3, #0
10002756:	d1f1      	bne.n	1000273c <stdio_out_chars_crlf.part.0+0x34>
            if (i > first_of_chunk) {
10002758:	42a0      	cmp	r0, r4
1000275a:	da04      	bge.n	10002766 <stdio_out_chars_crlf.part.0+0x5e>
                driver->out_chars(&s[first_of_chunk], i - first_of_chunk);
1000275c:	4643      	mov	r3, r8
1000275e:	1a21      	subs	r1, r4, r0
10002760:	681b      	ldr	r3, [r3, #0]
10002762:	1830      	adds	r0, r6, r0
10002764:	4798      	blx	r3
            driver->out_chars(crlf_str, 2);
10002766:	4643      	mov	r3, r8
10002768:	4650      	mov	r0, sl
1000276a:	681b      	ldr	r3, [r3, #0]
1000276c:	2102      	movs	r1, #2
1000276e:	4798      	blx	r3
    for (int i = 0; i < len; i++) {
10002770:	3401      	adds	r4, #1
            first_of_chunk = i + 1;
10002772:	0028      	movs	r0, r5
10002774:	002b      	movs	r3, r5
    for (int i = 0; i < len; i++) {
10002776:	3501      	adds	r5, #1
10002778:	429f      	cmp	r7, r3
1000277a:	dce4      	bgt.n	10002746 <stdio_out_chars_crlf.part.0+0x3e>
        }
    }
    if (first_of_chunk < len) {
1000277c:	4287      	cmp	r7, r0
1000277e:	dd04      	ble.n	1000278a <stdio_out_chars_crlf.part.0+0x82>
        driver->out_chars(&s[first_of_chunk], len - first_of_chunk);
10002780:	4643      	mov	r3, r8
10002782:	1a39      	subs	r1, r7, r0
10002784:	681b      	ldr	r3, [r3, #0]
10002786:	1830      	adds	r0, r6, r0
10002788:	4798      	blx	r3
    }
    if (len > 0) {
        driver->last_ended_with_cr = s[len - 1] == '\r';
1000278a:	19f6      	adds	r6, r6, r7
1000278c:	3e01      	subs	r6, #1
1000278e:	7833      	ldrb	r3, [r6, #0]
10002790:	3b0d      	subs	r3, #13
10002792:	425a      	negs	r2, r3
10002794:	4153      	adcs	r3, r2
10002796:	4642      	mov	r2, r8
10002798:	7413      	strb	r3, [r2, #16]
    }
#else
    driver->out_chars(s, len);
#endif
}
1000279a:	bce0      	pop	{r5, r6, r7}
1000279c:	46ba      	mov	sl, r7
1000279e:	46b1      	mov	r9, r6
100027a0:	46a8      	mov	r8, r5
100027a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100027a4:	1000a3bc 	.word	0x1000a3bc

100027a8 <stdio_put_string.isra.0>:

static bool stdio_put_string(const char *s, int len, bool newline) {
100027a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100027aa:	4657      	mov	r7, sl
100027ac:	4645      	mov	r5, r8
100027ae:	46de      	mov	lr, fp
100027b0:	464e      	mov	r6, r9
 *  \ingroup hardware_sync
 *
 * \return The core number the call was made from
 */
static inline uint get_core_num() {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
100027b2:	23d0      	movs	r3, #208	; 0xd0
100027b4:	b5e0      	push	{r5, r6, r7, lr}
100027b6:	061b      	lsls	r3, r3, #24
100027b8:	681c      	ldr	r4, [r3, #0]
    if (!mutex_try_enter(&print_mutex, &owner)) {
100027ba:	4b35      	ldr	r3, [pc, #212]	; (10002890 <stdio_put_string.isra.0+0xe8>)
static bool stdio_put_string(const char *s, int len, bool newline) {
100027bc:	b083      	sub	sp, #12
100027be:	0007      	movs	r7, r0
100027c0:	000d      	movs	r5, r1
    if (!mutex_try_enter(&print_mutex, &owner)) {
100027c2:	0018      	movs	r0, r3
100027c4:	a901      	add	r1, sp, #4
static bool stdio_put_string(const char *s, int len, bool newline) {
100027c6:	4690      	mov	r8, r2
    if (!mutex_try_enter(&print_mutex, &owner)) {
100027c8:	469a      	mov	sl, r3
100027ca:	f007 fd81 	bl	1000a2d0 <__mutex_try_enter_veneer>
100027ce:	4681      	mov	r9, r0
100027d0:	2800      	cmp	r0, #0
100027d2:	d107      	bne.n	100027e4 <stdio_put_string.isra.0+0x3c>
        if (owner == core_num) {
100027d4:	9b01      	ldr	r3, [sp, #4]
100027d6:	429c      	cmp	r4, r3
100027d8:	d004      	beq.n	100027e4 <stdio_put_string.isra.0+0x3c>
        mutex_enter_blocking(&print_mutex);
100027da:	4650      	mov	r0, sl
100027dc:	f007 fd90 	bl	1000a300 <__mutex_enter_blocking_veneer>
    return true;
100027e0:	2301      	movs	r3, #1
100027e2:	4699      	mov	r9, r3
    if (!serialzed) {
#if PICO_STDIO_IGNORE_NESTED_STDOUT
        return false;
#endif
    }
    if (len == -1) len = strlen(s);
100027e4:	1c6b      	adds	r3, r5, #1
100027e6:	d103      	bne.n	100027f0 <stdio_put_string.isra.0+0x48>
100027e8:	0038      	movs	r0, r7
100027ea:	f007 fbf5 	bl	10009fd8 <strlen>
100027ee:	0005      	movs	r5, r0
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
100027f0:	4b28      	ldr	r3, [pc, #160]	; (10002894 <stdio_put_string.isra.0+0xec>)
100027f2:	681c      	ldr	r4, [r3, #0]
100027f4:	2c00      	cmp	r4, #0
100027f6:	d02f      	beq.n	10002858 <stdio_put_string.isra.0+0xb0>
        if (!driver->out_chars) continue;
        if (filter && filter != driver) continue;
        stdio_out_chars_crlf(driver, s, len);
        if (newline) {
            const char c = '\n';
100027f8:	230a      	movs	r3, #10
        if (filter && filter != driver) continue;
100027fa:	4e27      	ldr	r6, [pc, #156]	; (10002898 <stdio_put_string.isra.0+0xf0>)
            const char c = '\n';
100027fc:	469b      	mov	fp, r3
100027fe:	e002      	b.n	10002806 <stdio_put_string.isra.0+0x5e>
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10002800:	68e4      	ldr	r4, [r4, #12]
10002802:	2c00      	cmp	r4, #0
10002804:	d028      	beq.n	10002858 <stdio_put_string.isra.0+0xb0>
        if (!driver->out_chars) continue;
10002806:	6822      	ldr	r2, [r4, #0]
10002808:	2a00      	cmp	r2, #0
1000280a:	d0f9      	beq.n	10002800 <stdio_put_string.isra.0+0x58>
        if (filter && filter != driver) continue;
1000280c:	6833      	ldr	r3, [r6, #0]
1000280e:	2b00      	cmp	r3, #0
10002810:	d001      	beq.n	10002816 <stdio_put_string.isra.0+0x6e>
10002812:	42a3      	cmp	r3, r4
10002814:	d1f4      	bne.n	10002800 <stdio_put_string.isra.0+0x58>
    if (!driver->crlf_enabled) {
10002816:	7c63      	ldrb	r3, [r4, #17]
10002818:	2b00      	cmp	r3, #0
1000281a:	d027      	beq.n	1000286c <stdio_put_string.isra.0+0xc4>
1000281c:	002a      	movs	r2, r5
1000281e:	0039      	movs	r1, r7
10002820:	0020      	movs	r0, r4
10002822:	f7ff ff71 	bl	10002708 <stdio_out_chars_crlf.part.0>
        if (newline) {
10002826:	4643      	mov	r3, r8
10002828:	2b00      	cmp	r3, #0
1000282a:	d0e9      	beq.n	10002800 <stdio_put_string.isra.0+0x58>
            const char c = '\n';
1000282c:	466b      	mov	r3, sp
1000282e:	465a      	mov	r2, fp
10002830:	711a      	strb	r2, [r3, #4]
    if (!driver->crlf_enabled) {
10002832:	7c63      	ldrb	r3, [r4, #17]
10002834:	2b00      	cmp	r3, #0
10002836:	d01d      	beq.n	10002874 <stdio_put_string.isra.0+0xcc>
        if (s[i] == '\n' && !prev_char_was_cr) {
10002838:	7c23      	ldrb	r3, [r4, #16]
1000283a:	2b00      	cmp	r3, #0
1000283c:	d023      	beq.n	10002886 <stdio_put_string.isra.0+0xde>
        driver->out_chars(&s[first_of_chunk], len - first_of_chunk);
1000283e:	2101      	movs	r1, #1
10002840:	6823      	ldr	r3, [r4, #0]
10002842:	a801      	add	r0, sp, #4
10002844:	4798      	blx	r3
        driver->last_ended_with_cr = s[len - 1] == '\r';
10002846:	466b      	mov	r3, sp
10002848:	791b      	ldrb	r3, [r3, #4]
1000284a:	3b0d      	subs	r3, #13
1000284c:	425a      	negs	r2, r3
1000284e:	4153      	adcs	r3, r2
10002850:	7423      	strb	r3, [r4, #16]
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10002852:	68e4      	ldr	r4, [r4, #12]
10002854:	2c00      	cmp	r4, #0
10002856:	d1d6      	bne.n	10002806 <stdio_put_string.isra.0+0x5e>
            stdio_out_chars_crlf(driver, &c, 1);
        }
    }
    if (serialzed) {
10002858:	464b      	mov	r3, r9
1000285a:	2b00      	cmp	r3, #0
1000285c:	d10f      	bne.n	1000287e <stdio_put_string.isra.0+0xd6>
        stdout_serialize_end();
    }
    return len;
}
1000285e:	b003      	add	sp, #12
10002860:	bcf0      	pop	{r4, r5, r6, r7}
10002862:	46bb      	mov	fp, r7
10002864:	46b2      	mov	sl, r6
10002866:	46a9      	mov	r9, r5
10002868:	46a0      	mov	r8, r4
1000286a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        driver->out_chars(s, len);
1000286c:	0029      	movs	r1, r5
1000286e:	0038      	movs	r0, r7
10002870:	4790      	blx	r2
        return;
10002872:	e7d8      	b.n	10002826 <stdio_put_string.isra.0+0x7e>
        driver->out_chars(s, len);
10002874:	2101      	movs	r1, #1
10002876:	6823      	ldr	r3, [r4, #0]
10002878:	a801      	add	r0, sp, #4
1000287a:	4798      	blx	r3
        return;
1000287c:	e7c0      	b.n	10002800 <stdio_put_string.isra.0+0x58>
    mutex_exit(&print_mutex);
1000287e:	4650      	mov	r0, sl
10002880:	f007 fd0e 	bl	1000a2a0 <__mutex_exit_veneer>
    return len;
10002884:	e7eb      	b.n	1000285e <stdio_put_string.isra.0+0xb6>
            driver->out_chars(crlf_str, 2);
10002886:	2102      	movs	r1, #2
10002888:	4804      	ldr	r0, [pc, #16]	; (1000289c <stdio_put_string.isra.0+0xf4>)
1000288a:	6823      	ldr	r3, [r4, #0]
1000288c:	4798      	blx	r3
    if (first_of_chunk < len) {
1000288e:	e7da      	b.n	10002846 <stdio_put_string.isra.0+0x9e>
10002890:	200033e8 	.word	0x200033e8
10002894:	2003dc70 	.word	0x2003dc70
10002898:	2003dc78 	.word	0x2003dc78
1000289c:	1000a3bc 	.word	0x1000a3bc

100028a0 <__wrap_putchar>:
        // todo maybe a little sleep here?
    } while (!time_reached(until));
    return PICO_ERROR_TIMEOUT;
}

int WRAPPER_FUNC(putchar)(int c) {
100028a0:	b510      	push	{r4, lr}
100028a2:	b082      	sub	sp, #8
    char cc = c;
100028a4:	466b      	mov	r3, sp
int WRAPPER_FUNC(putchar)(int c) {
100028a6:	0004      	movs	r4, r0
    stdio_put_string(&cc, 1, false);
100028a8:	2200      	movs	r2, #0
    char cc = c;
100028aa:	1dd8      	adds	r0, r3, #7
    stdio_put_string(&cc, 1, false);
100028ac:	2101      	movs	r1, #1
    char cc = c;
100028ae:	7004      	strb	r4, [r0, #0]
    stdio_put_string(&cc, 1, false);
100028b0:	f7ff ff7a 	bl	100027a8 <stdio_put_string.isra.0>
    return c;
}
100028b4:	0020      	movs	r0, r4
100028b6:	b002      	add	sp, #8
100028b8:	bd10      	pop	{r4, pc}
100028ba:	46c0      	nop			; (mov r8, r8)

100028bc <__wrap_puts>:

int WRAPPER_FUNC(puts)(const char *s) {
100028bc:	b570      	push	{r4, r5, r6, lr}
100028be:	0004      	movs	r4, r0
    int len = strlen(s);
100028c0:	f007 fb8a 	bl	10009fd8 <strlen>
    stdio_put_string(s, len, true);
100028c4:	2201      	movs	r2, #1
100028c6:	0001      	movs	r1, r0
    int len = strlen(s);
100028c8:	0005      	movs	r5, r0
    stdio_put_string(s, len, true);
100028ca:	0020      	movs	r0, r4
100028cc:	f7ff ff6c 	bl	100027a8 <stdio_put_string.isra.0>
        else drivers = driver;
    }
}

void stdio_flush() {
    for (stdio_driver_t *d = drivers; d; d = d->next) {
100028d0:	4b08      	ldr	r3, [pc, #32]	; (100028f4 <__wrap_puts+0x38>)
100028d2:	681c      	ldr	r4, [r3, #0]
100028d4:	2c00      	cmp	r4, #0
100028d6:	d006      	beq.n	100028e6 <__wrap_puts+0x2a>
        if (d->out_flush) d->out_flush();
100028d8:	6863      	ldr	r3, [r4, #4]
100028da:	2b00      	cmp	r3, #0
100028dc:	d005      	beq.n	100028ea <__wrap_puts+0x2e>
100028de:	4798      	blx	r3
    for (stdio_driver_t *d = drivers; d; d = d->next) {
100028e0:	68e4      	ldr	r4, [r4, #12]
100028e2:	2c00      	cmp	r4, #0
100028e4:	d1f8      	bne.n	100028d8 <__wrap_puts+0x1c>
}
100028e6:	0028      	movs	r0, r5
100028e8:	bd70      	pop	{r4, r5, r6, pc}
    for (stdio_driver_t *d = drivers; d; d = d->next) {
100028ea:	68e4      	ldr	r4, [r4, #12]
100028ec:	2c00      	cmp	r4, #0
100028ee:	d1f3      	bne.n	100028d8 <__wrap_puts+0x1c>
100028f0:	e7f9      	b.n	100028e6 <__wrap_puts+0x2a>
100028f2:	46c0      	nop			; (mov r8, r8)
100028f4:	2003dc70 	.word	0x2003dc70

100028f8 <stdio_set_driver_enabled>:
    stdio_driver_t *prev = drivers;
100028f8:	4a0d      	ldr	r2, [pc, #52]	; (10002930 <stdio_set_driver_enabled+0x38>)
100028fa:	6813      	ldr	r3, [r2, #0]
    for (stdio_driver_t *d = drivers; d; d = d->next) {
100028fc:	2b00      	cmp	r3, #0
100028fe:	d013      	beq.n	10002928 <stdio_set_driver_enabled+0x30>
        if (d == driver) {
10002900:	4283      	cmp	r3, r0
10002902:	d102      	bne.n	1000290a <stdio_set_driver_enabled+0x12>
10002904:	e009      	b.n	1000291a <stdio_set_driver_enabled+0x22>
10002906:	4298      	cmp	r0, r3
10002908:	d008      	beq.n	1000291c <stdio_set_driver_enabled+0x24>
    for (stdio_driver_t *d = drivers; d; d = d->next) {
1000290a:	001a      	movs	r2, r3
1000290c:	68db      	ldr	r3, [r3, #12]
1000290e:	2b00      	cmp	r3, #0
10002910:	d1f9      	bne.n	10002906 <stdio_set_driver_enabled+0xe>
    if (enable) {
10002912:	2900      	cmp	r1, #0
10002914:	d000      	beq.n	10002918 <stdio_set_driver_enabled+0x20>
        if (prev) prev->next = driver;
10002916:	60d0      	str	r0, [r2, #12]
}
10002918:	4770      	bx	lr
        if (d == driver) {
1000291a:	001a      	movs	r2, r3
            if (!enable) {
1000291c:	2900      	cmp	r1, #0
1000291e:	d1fb      	bne.n	10002918 <stdio_set_driver_enabled+0x20>
                prev->next = d->next;
10002920:	68db      	ldr	r3, [r3, #12]
10002922:	60d3      	str	r3, [r2, #12]
                driver->next = NULL;
10002924:	60c1      	str	r1, [r0, #12]
10002926:	e7f7      	b.n	10002918 <stdio_set_driver_enabled+0x20>
    if (enable) {
10002928:	2900      	cmp	r1, #0
1000292a:	d0f5      	beq.n	10002918 <stdio_set_driver_enabled+0x20>
        else drivers = driver;
1000292c:	6010      	str	r0, [r2, #0]
1000292e:	e7f3      	b.n	10002918 <stdio_set_driver_enabled+0x20>
10002930:	2003dc70 	.word	0x2003dc70

10002934 <stdio_init_all>:
    int ret = vprintf(format, va);
    va_end(va);
    return ret;
}

void stdio_init_all() {
10002934:	b510      	push	{r4, lr}
#if PICO_STDIO_SEMIHOSTING
    stdio_semihosting_init();
#endif

#if PICO_STDIO_USB
    stdio_usb_init();
10002936:	f000 f925 	bl	10002b84 <stdio_usb_init>
#endif
}
1000293a:	bd10      	pop	{r4, pc}

1000293c <getchar_timeout_us>:
        return PICO_ERROR_TIMEOUT;
    }
    return (uint8_t)buf[0];
}

int getchar_timeout_us(uint32_t timeout_us) {
1000293c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000293e:	46d6      	mov	lr, sl
10002940:	464f      	mov	r7, r9
10002942:	4646      	mov	r6, r8
10002944:	b5c0      	push	{r6, r7, lr}
10002946:	b082      	sub	sp, #8
10002948:	0004      	movs	r4, r0
 * \sa sleep_until()
 * \sa time_us_64()
 */
static inline absolute_time_t get_absolute_time() {
    absolute_time_t t;
    update_us_since_boot(&t, time_us_64());
1000294a:	f000 fe59 	bl	10003600 <time_us_64>
    char buf[1];
    int rc = stdio_get_until(buf, sizeof(buf), make_timeout_time_us(timeout_us));
1000294e:	0026      	movs	r6, r4
10002950:	0002      	movs	r2, r0
10002952:	000b      	movs	r3, r1
10002954:	2700      	movs	r7, #0
 * \return the timestamp representing the resulting time
 */
static inline absolute_time_t delayed_by_us(const absolute_time_t t, uint64_t us) {
    absolute_time_t t2;
    uint64_t base = to_us_since_boot(t);
    uint64_t delayed = base + us;
10002956:	18b6      	adds	r6, r6, r2
10002958:	415f      	adcs	r7, r3
    if (delayed < base) {
1000295a:	42b9      	cmp	r1, r7
1000295c:	d831      	bhi.n	100029c2 <getchar_timeout_us+0x86>
1000295e:	d02e      	beq.n	100029be <getchar_timeout_us+0x82>
 * \param t Absolute time to compare against current time
 * \return true if it is now after the specified timestamp
 */
static inline bool time_reached(absolute_time_t t) {
    uint64_t target = to_us_since_boot(t);
    uint32_t hi_target = target >> 32u;
10002960:	46b9      	mov	r9, r7
static int stdio_get_until(char *buf, int len, absolute_time_t until) {
10002962:	4b25      	ldr	r3, [pc, #148]	; (100029f8 <getchar_timeout_us+0xbc>)
10002964:	4d25      	ldr	r5, [pc, #148]	; (100029fc <getchar_timeout_us+0xc0>)
10002966:	469a      	mov	sl, r3
        for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10002968:	4653      	mov	r3, sl
1000296a:	681b      	ldr	r3, [r3, #0]
1000296c:	4698      	mov	r8, r3
1000296e:	1e1c      	subs	r4, r3, #0
10002970:	d103      	bne.n	1000297a <getchar_timeout_us+0x3e>
10002972:	e03c      	b.n	100029ee <getchar_timeout_us+0xb2>
10002974:	68e4      	ldr	r4, [r4, #12]
10002976:	2c00      	cmp	r4, #0
10002978:	d014      	beq.n	100029a4 <getchar_timeout_us+0x68>
            if (filter && filter != driver) continue;
1000297a:	682b      	ldr	r3, [r5, #0]
1000297c:	2b00      	cmp	r3, #0
1000297e:	d001      	beq.n	10002984 <getchar_timeout_us+0x48>
10002980:	42a3      	cmp	r3, r4
10002982:	d1f7      	bne.n	10002974 <getchar_timeout_us+0x38>
            if (driver->in_chars) {
10002984:	68a3      	ldr	r3, [r4, #8]
10002986:	2b00      	cmp	r3, #0
10002988:	d0f4      	beq.n	10002974 <getchar_timeout_us+0x38>
                int read = driver->in_chars(buf, len);
1000298a:	2101      	movs	r1, #1
1000298c:	a801      	add	r0, sp, #4
1000298e:	4798      	blx	r3
                if (read > 0) {
10002990:	2800      	cmp	r0, #0
10002992:	ddef      	ble.n	10002974 <getchar_timeout_us+0x38>
    if (rc < 0) return rc;
    assert(rc);
    return (uint8_t)buf[0];
10002994:	466b      	mov	r3, sp
10002996:	7918      	ldrb	r0, [r3, #4]
}
10002998:	b002      	add	sp, #8
1000299a:	bce0      	pop	{r5, r6, r7}
1000299c:	46ba      	mov	sl, r7
1000299e:	46b1      	mov	r9, r6
100029a0:	46a8      	mov	r8, r5
100029a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t hi = timer_hw->timerawh;
100029a4:	4b16      	ldr	r3, [pc, #88]	; (10002a00 <getchar_timeout_us+0xc4>)
100029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    return (hi >= hi_target && (timer_hw->timerawl >= (uint32_t) target || hi != hi_target));
100029a8:	4599      	cmp	r9, r3
100029aa:	d8dd      	bhi.n	10002968 <getchar_timeout_us+0x2c>
100029ac:	4a14      	ldr	r2, [pc, #80]	; (10002a00 <getchar_timeout_us+0xc4>)
100029ae:	6a92      	ldr	r2, [r2, #40]	; 0x28
100029b0:	42b2      	cmp	r2, r6
100029b2:	d201      	bcs.n	100029b8 <getchar_timeout_us+0x7c>
100029b4:	4599      	cmp	r9, r3
100029b6:	d00b      	beq.n	100029d0 <getchar_timeout_us+0x94>
100029b8:	2001      	movs	r0, #1
100029ba:	4240      	negs	r0, r0
100029bc:	e7ec      	b.n	10002998 <getchar_timeout_us+0x5c>
100029be:	42b0      	cmp	r0, r6
100029c0:	d9ce      	bls.n	10002960 <getchar_timeout_us+0x24>
100029c2:	2301      	movs	r3, #1
100029c4:	425b      	negs	r3, r3
100029c6:	4699      	mov	r9, r3
        delayed = (uint64_t)-1;
100029c8:	2601      	movs	r6, #1
100029ca:	4276      	negs	r6, r6
100029cc:	17f7      	asrs	r7, r6, #31
100029ce:	e7c8      	b.n	10002962 <getchar_timeout_us+0x26>
100029d0:	4643      	mov	r3, r8
100029d2:	2b00      	cmp	r3, #0
100029d4:	d1c8      	bne.n	10002968 <getchar_timeout_us+0x2c>
    uint32_t hi = timer_hw->timerawh;
100029d6:	4a0a      	ldr	r2, [pc, #40]	; (10002a00 <getchar_timeout_us+0xc4>)
100029d8:	6a53      	ldr	r3, [r2, #36]	; 0x24
    return (hi >= hi_target && (timer_hw->timerawl >= (uint32_t) target || hi != hi_target));
100029da:	4599      	cmp	r9, r3
100029dc:	d8fc      	bhi.n	100029d8 <getchar_timeout_us+0x9c>
100029de:	6a91      	ldr	r1, [r2, #40]	; 0x28
100029e0:	42b1      	cmp	r1, r6
100029e2:	d2e9      	bcs.n	100029b8 <getchar_timeout_us+0x7c>
100029e4:	4599      	cmp	r9, r3
100029e6:	d0f7      	beq.n	100029d8 <getchar_timeout_us+0x9c>
100029e8:	2001      	movs	r0, #1
100029ea:	4240      	negs	r0, r0
100029ec:	e7d4      	b.n	10002998 <getchar_timeout_us+0x5c>
    uint32_t hi = timer_hw->timerawh;
100029ee:	4b04      	ldr	r3, [pc, #16]	; (10002a00 <getchar_timeout_us+0xc4>)
100029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    return (hi >= hi_target && (timer_hw->timerawl >= (uint32_t) target || hi != hi_target));
100029f2:	454b      	cmp	r3, r9
100029f4:	d2da      	bcs.n	100029ac <getchar_timeout_us+0x70>
100029f6:	e7ee      	b.n	100029d6 <getchar_timeout_us+0x9a>
100029f8:	2003dc70 	.word	0x2003dc70
100029fc:	2003dc78 	.word	0x2003dc78
10002a00:	40054000 	.word	0x40054000

10002a04 <stdio_usb_in_chars>:
        last_avail_time = 0;
    }
    mutex_exit(&stdio_usb_mutex);
}

int stdio_usb_in_chars(char *buf, int length) {
10002a04:	b570      	push	{r4, r5, r6, lr}
    uint32_t owner;
    if (!mutex_try_enter(&stdio_usb_mutex, &owner)) {
10002a06:	4c18      	ldr	r4, [pc, #96]	; (10002a68 <stdio_usb_in_chars+0x64>)
int stdio_usb_in_chars(char *buf, int length) {
10002a08:	b082      	sub	sp, #8
10002a0a:	0006      	movs	r6, r0
10002a0c:	000d      	movs	r5, r1
    if (!mutex_try_enter(&stdio_usb_mutex, &owner)) {
10002a0e:	0020      	movs	r0, r4
10002a10:	a901      	add	r1, sp, #4
10002a12:	f007 fc5d 	bl	1000a2d0 <__mutex_try_enter_veneer>
10002a16:	2800      	cmp	r0, #0
10002a18:	d108      	bne.n	10002a2c <stdio_usb_in_chars+0x28>
        if (owner == get_core_num()) return PICO_ERROR_NO_DATA; // would deadlock otherwise
10002a1a:	23d0      	movs	r3, #208	; 0xd0
10002a1c:	061b      	lsls	r3, r3, #24
10002a1e:	681b      	ldr	r3, [r3, #0]
10002a20:	9a01      	ldr	r2, [sp, #4]
10002a22:	429a      	cmp	r2, r3
10002a24:	d01c      	beq.n	10002a60 <stdio_usb_in_chars+0x5c>
        mutex_enter_blocking(&stdio_usb_mutex);
10002a26:	0020      	movs	r0, r4
10002a28:	f007 fc6a 	bl	1000a300 <__mutex_enter_blocking_veneer>
  return tud_cdc_n_write(itf, str, strlen(str));
}

static inline bool tud_cdc_connected (void)
{
  return tud_cdc_n_connected(0);
10002a2c:	2000      	movs	r0, #0
10002a2e:	f000 feeb 	bl	10003808 <tud_cdc_n_connected>
    }
    int rc = PICO_ERROR_NO_DATA;
    if (tud_cdc_connected() && tud_cdc_available()) {
10002a32:	2800      	cmp	r0, #0
10002a34:	d107      	bne.n	10002a46 <stdio_usb_in_chars+0x42>
    int rc = PICO_ERROR_NO_DATA;
10002a36:	2503      	movs	r5, #3
10002a38:	426d      	negs	r5, r5
        int count = tud_cdc_read(buf, length);
        rc =  count ? count : PICO_ERROR_NO_DATA;
    }
    mutex_exit(&stdio_usb_mutex);
10002a3a:	0020      	movs	r0, r4
10002a3c:	f007 fc30 	bl	1000a2a0 <__mutex_exit_veneer>
    return rc;
}
10002a40:	0028      	movs	r0, r5
10002a42:	b002      	add	sp, #8
10002a44:	bd70      	pop	{r4, r5, r6, pc}
  tud_cdc_n_set_wanted_char(0, wanted);
}

static inline uint32_t tud_cdc_available (void)
{
  return tud_cdc_n_available(0);
10002a46:	2000      	movs	r0, #0
10002a48:	f000 fef8 	bl	1000383c <tud_cdc_n_available>
    if (tud_cdc_connected() && tud_cdc_available()) {
10002a4c:	2800      	cmp	r0, #0
10002a4e:	d0f2      	beq.n	10002a36 <stdio_usb_in_chars+0x32>
  return tud_cdc_n_read_char(0);
}

static inline uint32_t tud_cdc_read (void* buffer, uint32_t bufsize)
{
  return tud_cdc_n_read(0, buffer, bufsize);
10002a50:	002a      	movs	r2, r5
10002a52:	0031      	movs	r1, r6
10002a54:	2000      	movs	r0, #0
10002a56:	f000 feff 	bl	10003858 <tud_cdc_n_read>
10002a5a:	1e05      	subs	r5, r0, #0
        rc =  count ? count : PICO_ERROR_NO_DATA;
10002a5c:	d0eb      	beq.n	10002a36 <stdio_usb_in_chars+0x32>
10002a5e:	e7ec      	b.n	10002a3a <stdio_usb_in_chars+0x36>
        if (owner == get_core_num()) return PICO_ERROR_NO_DATA; // would deadlock otherwise
10002a60:	2503      	movs	r5, #3
10002a62:	426d      	negs	r5, r5
10002a64:	e7ec      	b.n	10002a40 <stdio_usb_in_chars+0x3c>
10002a66:	46c0      	nop			; (mov r8, r8)
10002a68:	2003e324 	.word	0x2003e324

10002a6c <stdio_usb_out_chars>:
static void stdio_usb_out_chars(const char *buf, int length) {
10002a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
10002a6e:	46de      	mov	lr, fp
10002a70:	464f      	mov	r7, r9
10002a72:	4646      	mov	r6, r8
10002a74:	b5c0      	push	{r6, r7, lr}
    if (!mutex_try_enter(&stdio_usb_mutex, &owner)) {
10002a76:	4b33      	ldr	r3, [pc, #204]	; (10002b44 <stdio_usb_out_chars+0xd8>)
static void stdio_usb_out_chars(const char *buf, int length) {
10002a78:	b082      	sub	sp, #8
10002a7a:	4681      	mov	r9, r0
10002a7c:	000d      	movs	r5, r1
    if (!mutex_try_enter(&stdio_usb_mutex, &owner)) {
10002a7e:	0018      	movs	r0, r3
10002a80:	a901      	add	r1, sp, #4
10002a82:	469b      	mov	fp, r3
10002a84:	f007 fc24 	bl	1000a2d0 <__mutex_try_enter_veneer>
10002a88:	2800      	cmp	r0, #0
10002a8a:	d108      	bne.n	10002a9e <stdio_usb_out_chars+0x32>
        if (owner == get_core_num()) return; // would deadlock otherwise
10002a8c:	23d0      	movs	r3, #208	; 0xd0
10002a8e:	061b      	lsls	r3, r3, #24
10002a90:	681b      	ldr	r3, [r3, #0]
10002a92:	9a01      	ldr	r2, [sp, #4]
10002a94:	429a      	cmp	r2, r3
10002a96:	d04f      	beq.n	10002b38 <stdio_usb_out_chars+0xcc>
        mutex_enter_blocking(&stdio_usb_mutex);
10002a98:	4658      	mov	r0, fp
10002a9a:	f007 fc31 	bl	1000a300 <__mutex_enter_blocking_veneer>
  return tud_cdc_n_connected(0);
10002a9e:	2000      	movs	r0, #0
10002aa0:	f000 feb2 	bl	10003808 <tud_cdc_n_connected>
    if (tud_cdc_connected()) {
10002aa4:	2800      	cmp	r0, #0
10002aa6:	d03f      	beq.n	10002b28 <stdio_usb_out_chars+0xbc>
        for (int i = 0; i < length;) {
10002aa8:	2400      	movs	r4, #0
10002aaa:	2d00      	cmp	r5, #0
10002aac:	dd41      	ble.n	10002b32 <stdio_usb_out_chars+0xc6>
                    (!tud_cdc_write_available() && time_us_64() > last_avail_time + PICO_STDIO_USB_STDOUT_TIMEOUT_US)) {
10002aae:	4e26      	ldr	r6, [pc, #152]	; (10002b48 <stdio_usb_out_chars+0xdc>)
10002ab0:	e011      	b.n	10002ad6 <stdio_usb_out_chars+0x6a>
                int n2 = tud_cdc_write(buf + i, n);
10002ab2:	464b      	mov	r3, r9
  return tud_cdc_n_write_char(0, ch);
}

static inline uint32_t tud_cdc_write (void const* buffer, uint32_t bufsize)
{
  return tud_cdc_n_write(0, buffer, bufsize);
10002ab4:	2000      	movs	r0, #0
10002ab6:	1919      	adds	r1, r3, r4
10002ab8:	f000 ff5a 	bl	10003970 <tud_cdc_n_write>
10002abc:	4680      	mov	r8, r0
                tud_task();
10002abe:	f001 fbab 	bl	10004218 <tud_task>
  return tud_cdc_n_write_str(0, str);
}

static inline uint32_t tud_cdc_write_flush (void)
{
  return tud_cdc_n_write_flush(0);
10002ac2:	2000      	movs	r0, #0
10002ac4:	f000 ff02 	bl	100038cc <tud_cdc_n_write_flush>
                last_avail_time = time_us_64();
10002ac8:	f000 fd9a 	bl	10003600 <time_us_64>
10002acc:	6030      	str	r0, [r6, #0]
10002ace:	6071      	str	r1, [r6, #4]
                i += n2;
10002ad0:	4444      	add	r4, r8
        for (int i = 0; i < length;) {
10002ad2:	42ac      	cmp	r4, r5
10002ad4:	da2d      	bge.n	10002b32 <stdio_usb_out_chars+0xc6>
}

static inline uint32_t tud_cdc_write_available(void)
{
  return tud_cdc_n_write_available(0);
10002ad6:	2000      	movs	r0, #0
10002ad8:	f000 ff66 	bl	100039a8 <tud_cdc_n_write_available>
            int n = length - i;
10002adc:	1b2f      	subs	r7, r5, r4
10002ade:	0002      	movs	r2, r0
            if (n > avail) n = avail;
10002ae0:	42b8      	cmp	r0, r7
10002ae2:	dd00      	ble.n	10002ae6 <stdio_usb_out_chars+0x7a>
10002ae4:	003a      	movs	r2, r7
            if (n) {
10002ae6:	2a00      	cmp	r2, #0
10002ae8:	d1e3      	bne.n	10002ab2 <stdio_usb_out_chars+0x46>
                tud_task();
10002aea:	f001 fb95 	bl	10004218 <tud_task>
  return tud_cdc_n_write_flush(0);
10002aee:	2000      	movs	r0, #0
10002af0:	f000 feec 	bl	100038cc <tud_cdc_n_write_flush>
  return tud_cdc_n_connected(0);
10002af4:	2000      	movs	r0, #0
10002af6:	f000 fe87 	bl	10003808 <tud_cdc_n_connected>
                if (!tud_cdc_connected() ||
10002afa:	2800      	cmp	r0, #0
10002afc:	d019      	beq.n	10002b32 <stdio_usb_out_chars+0xc6>
  return tud_cdc_n_write_available(0);
10002afe:	2000      	movs	r0, #0
10002b00:	f000 ff52 	bl	100039a8 <tud_cdc_n_write_available>
10002b04:	2800      	cmp	r0, #0
10002b06:	d1e4      	bne.n	10002ad2 <stdio_usb_out_chars+0x66>
                    (!tud_cdc_write_available() && time_us_64() > last_avail_time + PICO_STDIO_USB_STDOUT_TIMEOUT_US)) {
10002b08:	f000 fd7a 	bl	10003600 <time_us_64>
10002b0c:	6832      	ldr	r2, [r6, #0]
10002b0e:	6873      	ldr	r3, [r6, #4]
10002b10:	000f      	movs	r7, r1
10002b12:	2100      	movs	r1, #0
10002b14:	4684      	mov	ip, r0
10002b16:	480d      	ldr	r0, [pc, #52]	; (10002b4c <stdio_usb_out_chars+0xe0>)
10002b18:	1812      	adds	r2, r2, r0
10002b1a:	414b      	adcs	r3, r1
10002b1c:	429f      	cmp	r7, r3
10002b1e:	d808      	bhi.n	10002b32 <stdio_usb_out_chars+0xc6>
10002b20:	d1d7      	bne.n	10002ad2 <stdio_usb_out_chars+0x66>
10002b22:	4594      	cmp	ip, r2
10002b24:	d9d5      	bls.n	10002ad2 <stdio_usb_out_chars+0x66>
10002b26:	e004      	b.n	10002b32 <stdio_usb_out_chars+0xc6>
        last_avail_time = 0;
10002b28:	2000      	movs	r0, #0
10002b2a:	2100      	movs	r1, #0
10002b2c:	4b06      	ldr	r3, [pc, #24]	; (10002b48 <stdio_usb_out_chars+0xdc>)
10002b2e:	6018      	str	r0, [r3, #0]
10002b30:	6059      	str	r1, [r3, #4]
    mutex_exit(&stdio_usb_mutex);
10002b32:	4658      	mov	r0, fp
10002b34:	f007 fbb4 	bl	1000a2a0 <__mutex_exit_veneer>
}
10002b38:	b002      	add	sp, #8
10002b3a:	bce0      	pop	{r5, r6, r7}
10002b3c:	46bb      	mov	fp, r7
10002b3e:	46b1      	mov	r9, r6
10002b40:	46a8      	mov	r8, r5
10002b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002b44:	2003e324 	.word	0x2003e324
10002b48:	20003410 	.word	0x20003410
10002b4c:	0007a120 	.word	0x0007a120

10002b50 <timer_task>:
    irq_set_pending(PICO_STDIO_USB_LOW_PRIORITY_IRQ);
10002b50:	201f      	movs	r0, #31
static int64_t timer_task(__unused alarm_id_t id, __unused void *user_data) {
10002b52:	b510      	push	{r4, lr}
    irq_set_pending(PICO_STDIO_USB_LOW_PRIORITY_IRQ);
10002b54:	f7fe ffc0 	bl	10001ad8 <irq_set_pending>
}
10002b58:	20fa      	movs	r0, #250	; 0xfa
10002b5a:	2100      	movs	r1, #0
10002b5c:	0080      	lsls	r0, r0, #2
10002b5e:	bd10      	pop	{r4, pc}

10002b60 <low_priority_worker_irq>:
static void low_priority_worker_irq() {
10002b60:	b510      	push	{r4, lr}
    if (mutex_try_enter(&stdio_usb_mutex, NULL)) {
10002b62:	4c07      	ldr	r4, [pc, #28]	; (10002b80 <low_priority_worker_irq+0x20>)
10002b64:	2100      	movs	r1, #0
10002b66:	0020      	movs	r0, r4
10002b68:	f007 fbb2 	bl	1000a2d0 <__mutex_try_enter_veneer>
10002b6c:	2800      	cmp	r0, #0
10002b6e:	d100      	bne.n	10002b72 <low_priority_worker_irq+0x12>
}
10002b70:	bd10      	pop	{r4, pc}
        tud_task();
10002b72:	f001 fb51 	bl	10004218 <tud_task>
        mutex_exit(&stdio_usb_mutex);
10002b76:	0020      	movs	r0, r4
10002b78:	f007 fb92 	bl	1000a2a0 <__mutex_exit_veneer>
}
10002b7c:	e7f8      	b.n	10002b70 <low_priority_worker_irq+0x10>
10002b7e:	46c0      	nop			; (mov r8, r8)
10002b80:	2003e324 	.word	0x2003e324

10002b84 <stdio_usb_init>:
#if PICO_STDIO_ENABLE_CRLF_SUPPORT
    .crlf_enabled = PICO_STDIO_USB_DEFAULT_CRLF
#endif
};

bool stdio_usb_init(void) {
10002b84:	b570      	push	{r4, r5, r6, lr}
#if !PICO_NO_BI_STDIO_USB
    bi_decl_if_func_used(bi_program_feature("USB stdin / stdout"));
10002b86:	4b1e      	ldr	r3, [pc, #120]	; (10002c00 <stdio_usb_init+0x7c>)
bool stdio_usb_init(void) {
10002b88:	b084      	sub	sp, #16
    bi_decl_if_func_used(bi_program_feature("USB stdin / stdout"));
10002b8a:	781b      	ldrb	r3, [r3, #0]
#endif

    // initialize TinyUSB
    tusb_init();
10002b8c:	f002 fd42 	bl	10005614 <tusb_init>

    irq_set_exclusive_handler(PICO_STDIO_USB_LOW_PRIORITY_IRQ, low_priority_worker_irq);
10002b90:	201f      	movs	r0, #31
10002b92:	491c      	ldr	r1, [pc, #112]	; (10002c04 <stdio_usb_init+0x80>)
10002b94:	f7fe ffb0 	bl	10001af8 <irq_set_exclusive_handler>
    irq_set_enabled(PICO_STDIO_USB_LOW_PRIORITY_IRQ, true);
10002b98:	2101      	movs	r1, #1
10002b9a:	201f      	movs	r0, #31
10002b9c:	f7fe ff8a 	bl	10001ab4 <irq_set_enabled>

    mutex_init(&stdio_usb_mutex);
10002ba0:	4819      	ldr	r0, [pc, #100]	; (10002c08 <stdio_usb_init+0x84>)
10002ba2:	f7ff f9a5 	bl	10001ef0 <mutex_init>
 * @return >0 the alarm id
 * @return 0 the target timestamp was during or before this method call (whether the callback was called depends on fire_if_past)
 * @return -1 if there were no alarm slots available
 */
static inline alarm_id_t add_alarm_in_us(uint64_t us, alarm_callback_t callback, void *user_data, bool fire_if_past) {
    return alarm_pool_add_alarm_in_us(alarm_pool_get_default(), us, callback, user_data, fire_if_past);
10002ba6:	f000 fb2f 	bl	10003208 <alarm_pool_get_default>
10002baa:	0006      	movs	r6, r0
    update_us_since_boot(&t, time_us_64());
10002bac:	f000 fd28 	bl	10003600 <time_us_64>
    uint64_t delayed = base + us;
10002bb0:	22fa      	movs	r2, #250	; 0xfa
    update_us_since_boot(&t, time_us_64());
10002bb2:	0004      	movs	r4, r0
10002bb4:	000d      	movs	r5, r1
    uint64_t delayed = base + us;
10002bb6:	2300      	movs	r3, #0
10002bb8:	0092      	lsls	r2, r2, #2
10002bba:	1912      	adds	r2, r2, r4
10002bbc:	416b      	adcs	r3, r5
    if (delayed < base) {
10002bbe:	4299      	cmp	r1, r3
10002bc0:	d814      	bhi.n	10002bec <stdio_usb_init+0x68>
10002bc2:	d011      	beq.n	10002be8 <stdio_usb_init+0x64>
    return alarm_pool_add_alarm_at(pool, delayed_by_us(get_absolute_time(), us), callback, user_data, fire_if_past);
10002bc4:	2101      	movs	r1, #1
10002bc6:	9102      	str	r1, [sp, #8]
10002bc8:	2100      	movs	r1, #0
10002bca:	9101      	str	r1, [sp, #4]
10002bcc:	490f      	ldr	r1, [pc, #60]	; (10002c0c <stdio_usb_init+0x88>)
10002bce:	0030      	movs	r0, r6
10002bd0:	9100      	str	r1, [sp, #0]
10002bd2:	f000 fb1f 	bl	10003214 <alarm_pool_add_alarm_at>
    bool rc = add_alarm_in_us(PICO_STDIO_USB_TASK_INTERVAL_US, timer_task, NULL, true);
10002bd6:	0004      	movs	r4, r0
10002bd8:	1e63      	subs	r3, r4, #1
10002bda:	419c      	sbcs	r4, r3
10002bdc:	b2e4      	uxtb	r4, r4
    if (rc) {
10002bde:	2800      	cmp	r0, #0
10002be0:	d108      	bne.n	10002bf4 <stdio_usb_init+0x70>
        stdio_set_driver_enabled(&stdio_usb, true);
    }
    return rc;
}
10002be2:	0020      	movs	r0, r4
10002be4:	b004      	add	sp, #16
10002be6:	bd70      	pop	{r4, r5, r6, pc}
    if (delayed < base) {
10002be8:	4290      	cmp	r0, r2
10002bea:	d9eb      	bls.n	10002bc4 <stdio_usb_init+0x40>
        delayed = (uint64_t)-1;
10002bec:	2201      	movs	r2, #1
10002bee:	4252      	negs	r2, r2
10002bf0:	17d3      	asrs	r3, r2, #31
10002bf2:	e7e7      	b.n	10002bc4 <stdio_usb_init+0x40>
        stdio_set_driver_enabled(&stdio_usb, true);
10002bf4:	2101      	movs	r1, #1
10002bf6:	4806      	ldr	r0, [pc, #24]	; (10002c10 <stdio_usb_init+0x8c>)
10002bf8:	f7ff fe7e 	bl	100028f8 <stdio_set_driver_enabled>
10002bfc:	e7f1      	b.n	10002be2 <stdio_usb_init+0x5e>
10002bfe:	46c0      	nop			; (mov r8, r8)
10002c00:	100413c0 	.word	0x100413c0
10002c04:	10002b61 	.word	0x10002b61
10002c08:	2003e324 	.word	0x2003e324
10002c0c:	10002b51 	.word	0x10002b51
10002c10:	20002718 	.word	0x20002718

10002c14 <tud_descriptor_device_cb>:
    [USBD_STR_CDC] = "Board CDC",
};

const uint8_t *tud_descriptor_device_cb(void) {
    return (const uint8_t *)&usbd_desc_device;
}
10002c14:	4800      	ldr	r0, [pc, #0]	; (10002c18 <tud_descriptor_device_cb+0x4>)
10002c16:	4770      	bx	lr
10002c18:	1000a460 	.word	0x1000a460

10002c1c <tud_descriptor_configuration_cb>:

const uint8_t *tud_descriptor_configuration_cb(uint8_t index) {
    (void)index;
    return usbd_desc_cfg;
}
10002c1c:	4800      	ldr	r0, [pc, #0]	; (10002c20 <tud_descriptor_configuration_cb+0x4>)
10002c1e:	4770      	bx	lr
10002c20:	1000a414 	.word	0x1000a414

10002c24 <tud_descriptor_string_cb>:

const uint16_t *tud_descriptor_string_cb(uint8_t index, uint16_t langid) {
10002c24:	b530      	push	{r4, r5, lr}
    #define DESC_STR_MAX (20)
    static uint16_t desc_str[DESC_STR_MAX];

    uint8_t len;
    if (index == 0) {
10002c26:	2800      	cmp	r0, #0
10002c28:	d106      	bne.n	10002c38 <tud_descriptor_string_cb+0x14>
        desc_str[1] = 0x0409; // supported language is English
10002c2a:	24c1      	movs	r4, #193	; 0xc1
10002c2c:	4811      	ldr	r0, [pc, #68]	; (10002c74 <tud_descriptor_string_cb+0x50>)
10002c2e:	4b12      	ldr	r3, [pc, #72]	; (10002c78 <tud_descriptor_string_cb+0x54>)
10002c30:	00a4      	lsls	r4, r4, #2
10002c32:	8043      	strh	r3, [r0, #2]
            desc_str[1 + len] = str[len];
        }
    }

    // first byte is length (including header), second byte is string type
    desc_str[0] = (TUSB_DESC_STRING << 8) | (2 * len + 2);
10002c34:	8004      	strh	r4, [r0, #0]

    return desc_str;
}
10002c36:	bd30      	pop	{r4, r5, pc}
        if (index >= sizeof(usbd_desc_str) / sizeof(usbd_desc_str[0])) {
10002c38:	2804      	cmp	r0, #4
10002c3a:	d819      	bhi.n	10002c70 <tud_descriptor_string_cb+0x4c>
        const char *str = usbd_desc_str[index];
10002c3c:	4b0f      	ldr	r3, [pc, #60]	; (10002c7c <tud_descriptor_string_cb+0x58>)
10002c3e:	0080      	lsls	r0, r0, #2
10002c40:	58c5      	ldr	r5, [r0, r3]
        for (len = 0; len < DESC_STR_MAX - 1 && str[len]; ++len) {
10002c42:	480c      	ldr	r0, [pc, #48]	; (10002c74 <tud_descriptor_string_cb+0x50>)
        const char *str = usbd_desc_str[index];
10002c44:	2300      	movs	r3, #0
10002c46:	1c81      	adds	r1, r0, #2
10002c48:	e004      	b.n	10002c54 <tud_descriptor_string_cb+0x30>
        for (len = 0; len < DESC_STR_MAX - 1 && str[len]; ++len) {
10002c4a:	3301      	adds	r3, #1
            desc_str[1 + len] = str[len];
10002c4c:	800a      	strh	r2, [r1, #0]
        for (len = 0; len < DESC_STR_MAX - 1 && str[len]; ++len) {
10002c4e:	3102      	adds	r1, #2
10002c50:	2b13      	cmp	r3, #19
10002c52:	d00a      	beq.n	10002c6a <tud_descriptor_string_cb+0x46>
10002c54:	5cea      	ldrb	r2, [r5, r3]
10002c56:	b2dc      	uxtb	r4, r3
10002c58:	2a00      	cmp	r2, #0
10002c5a:	d1f6      	bne.n	10002c4a <tud_descriptor_string_cb+0x26>
    desc_str[0] = (TUSB_DESC_STRING << 8) | (2 * len + 2);
10002c5c:	23c0      	movs	r3, #192	; 0xc0
10002c5e:	3401      	adds	r4, #1
10002c60:	b2e4      	uxtb	r4, r4
10002c62:	0064      	lsls	r4, r4, #1
10002c64:	009b      	lsls	r3, r3, #2
10002c66:	431c      	orrs	r4, r3
10002c68:	e7e4      	b.n	10002c34 <tud_descriptor_string_cb+0x10>
10002c6a:	24ca      	movs	r4, #202	; 0xca
10002c6c:	00a4      	lsls	r4, r4, #2
10002c6e:	e7e1      	b.n	10002c34 <tud_descriptor_string_cb+0x10>
            return NULL;
10002c70:	2000      	movs	r0, #0
10002c72:	e7e0      	b.n	10002c36 <tud_descriptor_string_cb+0x12>
10002c74:	2003dc48 	.word	0x2003dc48
10002c78:	00000409 	.word	0x00000409
10002c7c:	1000a474 	.word	0x1000a474

10002c80 <set_sys_clock_pll>:
                        48 * MHZ,
                        48 * MHZ);
    }
}

void set_sys_clock_pll(uint32_t vco_freq, uint post_div1, uint post_div2) {
10002c80:	b5f0      	push	{r4, r5, r6, r7, lr}
10002c82:	b083      	sub	sp, #12
10002c84:	0006      	movs	r6, r0
10002c86:	000c      	movs	r4, r1
10002c88:	0015      	movs	r5, r2
    if (!running_on_fpga()) {
10002c8a:	f7ff fc37 	bl	100024fc <running_on_fpga>
10002c8e:	2800      	cmp	r0, #0
10002c90:	d001      	beq.n	10002c96 <set_sys_clock_pll+0x16>
                        0, // Only AUX mux on ADC
                        CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLKSRC_PLL_USB,
                        48 * MHZ,
                        48 * MHZ);
    }
}
10002c92:	b003      	add	sp, #12
10002c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
        clock_configure(clk_sys,
10002c96:	4f16      	ldr	r7, [pc, #88]	; (10002cf0 <set_sys_clock_pll+0x70>)
10002c98:	2201      	movs	r2, #1
10002c9a:	003b      	movs	r3, r7
10002c9c:	2101      	movs	r1, #1
10002c9e:	9700      	str	r7, [sp, #0]
10002ca0:	3005      	adds	r0, #5
10002ca2:	f7fe fb6f 	bl	10001384 <clock_configure>
        pll_init(pll_sys, 1, vco_freq, post_div1, post_div2);
10002ca6:	b2eb      	uxtb	r3, r5
10002ca8:	0032      	movs	r2, r6
10002caa:	9300      	str	r3, [sp, #0]
10002cac:	2101      	movs	r1, #1
10002cae:	0023      	movs	r3, r4
10002cb0:	4810      	ldr	r0, [pc, #64]	; (10002cf4 <set_sys_clock_pll+0x74>)
10002cb2:	f7ff fc2b 	bl	1000250c <pll_init>
        uint32_t freq = vco_freq / (post_div1 * post_div2);
10002cb6:	0021      	movs	r1, r4
10002cb8:	0030      	movs	r0, r6
10002cba:	4369      	muls	r1, r5
10002cbc:	f7fd fb5a 	bl	10000374 <__wrap___aeabi_uidiv>
10002cc0:	0004      	movs	r4, r0
        clock_configure(clk_ref,
10002cc2:	4b0d      	ldr	r3, [pc, #52]	; (10002cf8 <set_sys_clock_pll+0x78>)
10002cc4:	2200      	movs	r2, #0
10002cc6:	9300      	str	r3, [sp, #0]
10002cc8:	2102      	movs	r1, #2
10002cca:	2004      	movs	r0, #4
10002ccc:	f7fe fb5a 	bl	10001384 <clock_configure>
        clock_configure(clk_sys,
10002cd0:	0023      	movs	r3, r4
10002cd2:	2200      	movs	r2, #0
10002cd4:	2101      	movs	r1, #1
10002cd6:	9400      	str	r4, [sp, #0]
10002cd8:	2005      	movs	r0, #5
10002cda:	f7fe fb53 	bl	10001384 <clock_configure>
        clock_configure(clk_peri,
10002cde:	003b      	movs	r3, r7
10002ce0:	2202      	movs	r2, #2
10002ce2:	2100      	movs	r1, #0
10002ce4:	9700      	str	r7, [sp, #0]
10002ce6:	2006      	movs	r0, #6
10002ce8:	f7fe fb4c 	bl	10001384 <clock_configure>
}
10002cec:	e7d1      	b.n	10002c92 <set_sys_clock_pll+0x12>
10002cee:	46c0      	nop			; (mov r8, r8)
10002cf0:	02dc6c00 	.word	0x02dc6c00
10002cf4:	40028000 	.word	0x40028000
10002cf8:	00b71b00 	.word	0x00b71b00

10002cfc <spin_locks_reset>:
    *lock = 0;
10002cfc:	2100      	movs	r1, #0

static void check_lock_num(uint __unused lock_num) {
    invalid_params_if(SYNC, lock_num >= 32);
}

void spin_locks_reset(void) {
10002cfe:	4b04      	ldr	r3, [pc, #16]	; (10002d10 <spin_locks_reset+0x14>)
    for (uint i = 0; i < NUM_SPIN_LOCKS; i++) {
10002d00:	4a04      	ldr	r2, [pc, #16]	; (10002d14 <spin_locks_reset+0x18>)
    __asm volatile ("dmb");
10002d02:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002d06:	c302      	stmia	r3!, {r1}
10002d08:	4293      	cmp	r3, r2
10002d0a:	d1fa      	bne.n	10002d02 <spin_locks_reset+0x6>
        spin_unlock_unsafe(spin_lock_instance(i));
    }
}
10002d0c:	4770      	bx	lr
10002d0e:	46c0      	nop			; (mov r8, r8)
10002d10:	d0000100 	.word	0xd0000100
10002d14:	d0000180 	.word	0xd0000180

10002d18 <next_striped_spin_lock_num>:
    spin_unlock_unsafe(lock);
    return lock;
}

uint next_striped_spin_lock_num() {
    uint rc = striped_spin_lock_num++;
10002d18:	4a04      	ldr	r2, [pc, #16]	; (10002d2c <next_striped_spin_lock_num+0x14>)
10002d1a:	7810      	ldrb	r0, [r2, #0]
10002d1c:	1c43      	adds	r3, r0, #1
10002d1e:	b2db      	uxtb	r3, r3
    if (striped_spin_lock_num > PICO_SPINLOCK_ID_STRIPED_LAST) {
10002d20:	2b17      	cmp	r3, #23
10002d22:	d900      	bls.n	10002d26 <next_striped_spin_lock_num+0xe>
        striped_spin_lock_num = PICO_SPINLOCK_ID_STRIPED_FIRST;
10002d24:	2310      	movs	r3, #16
10002d26:	7013      	strb	r3, [r2, #0]
    }
    return rc;
}
10002d28:	4770      	bx	lr
10002d2a:	46c0      	nop			; (mov r8, r8)
10002d2c:	2000272c 	.word	0x2000272c

10002d30 <spin_lock_claim_unused>:
void spin_lock_unclaim(uint lock_num) {
    check_lock_num(lock_num);
    hw_claim_clear((uint8_t *) &claimed, lock_num);
}

int spin_lock_claim_unused(bool required) {
10002d30:	b500      	push	{lr}
    return hw_claim_unused_from_range((uint8_t*)&claimed, required, PICO_SPINLOCK_ID_CLAIM_FREE_FIRST, PICO_SPINLOCK_ID_CLAIM_FREE_END, "No spinlocks are available");
10002d32:	4b05      	ldr	r3, [pc, #20]	; (10002d48 <spin_lock_claim_unused+0x18>)
int spin_lock_claim_unused(bool required) {
10002d34:	b083      	sub	sp, #12
10002d36:	0001      	movs	r1, r0
    return hw_claim_unused_from_range((uint8_t*)&claimed, required, PICO_SPINLOCK_ID_CLAIM_FREE_FIRST, PICO_SPINLOCK_ID_CLAIM_FREE_END, "No spinlocks are available");
10002d38:	9300      	str	r3, [sp, #0]
10002d3a:	2218      	movs	r2, #24
10002d3c:	231f      	movs	r3, #31
10002d3e:	4803      	ldr	r0, [pc, #12]	; (10002d4c <spin_lock_claim_unused+0x1c>)
10002d40:	f7fe fad2 	bl	100012e8 <hw_claim_unused_from_range>
}
10002d44:	b003      	add	sp, #12
10002d46:	bd00      	pop	{pc}
10002d48:	1000a488 	.word	0x1000a488
10002d4c:	2003dc18 	.word	0x2003dc18

10002d50 <timer_pool_entry_comparator>:
}
#endif

static inline alarm_pool_entry_t *get_entry(alarm_pool_t *pool, pheap_node_id_t id) {
    assert(id && id <= pool->heap->max_nodes);
    return pool->entries + id - 1;
10002d50:	6883      	ldr	r3, [r0, #8]
10002d52:	480b      	ldr	r0, [pc, #44]	; (10002d80 <timer_pool_entry_comparator+0x30>)
static inline uint8_t *get_entry_id_high(alarm_pool_t *pool, pheap_node_id_t id) {
    assert(id && id <= pool->heap->max_nodes);
    return pool->entry_ids_high + id - 1;
}

bool timer_pool_entry_comparator(void *user_data, pheap_node_id_t a, pheap_node_id_t b) {
10002d54:	b510      	push	{r4, lr}
    return pool->entries + id - 1;
10002d56:	4684      	mov	ip, r0
10002d58:	4461      	add	r1, ip
10002d5a:	4462      	add	r2, ip
    alarm_pool_t *pool = (alarm_pool_t *)user_data;
    return to_us_since_boot(get_entry(pool, a)->target) < to_us_since_boot(get_entry(pool, b)->target);
10002d5c:	0109      	lsls	r1, r1, #4
10002d5e:	0112      	lsls	r2, r2, #4
10002d60:	189a      	adds	r2, r3, r2
10002d62:	1859      	adds	r1, r3, r1
10002d64:	6854      	ldr	r4, [r2, #4]
10002d66:	684b      	ldr	r3, [r1, #4]
10002d68:	2001      	movs	r0, #1
10002d6a:	429c      	cmp	r4, r3
10002d6c:	d801      	bhi.n	10002d72 <timer_pool_entry_comparator+0x22>
10002d6e:	d002      	beq.n	10002d76 <timer_pool_entry_comparator+0x26>
10002d70:	2000      	movs	r0, #0
10002d72:	b2c0      	uxtb	r0, r0
}
10002d74:	bd10      	pop	{r4, pc}
    return to_us_since_boot(get_entry(pool, a)->target) < to_us_since_boot(get_entry(pool, b)->target);
10002d76:	6812      	ldr	r2, [r2, #0]
10002d78:	680b      	ldr	r3, [r1, #0]
10002d7a:	429a      	cmp	r2, r3
10002d7c:	d8f9      	bhi.n	10002d72 <timer_pool_entry_comparator+0x22>
10002d7e:	e7f7      	b.n	10002d70 <timer_pool_entry_comparator+0x20>
10002d80:	0fffffff 	.word	0x0fffffff

10002d84 <sev_callback>:
    __asm volatile ("sev");
10002d84:	bf40      	sev

#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
static int64_t sev_callback(alarm_id_t id, void *user_data) {
    __sev();
    return 0;
}
10002d86:	2000      	movs	r0, #0
10002d88:	2100      	movs	r1, #0
10002d8a:	4770      	bx	lr

10002d8c <add_alarm_under_lock.isra.0>:
static alarm_id_t add_alarm_under_lock(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
10002d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002d8e:	46de      	mov	lr, fp
10002d90:	4657      	mov	r7, sl
10002d92:	464e      	mov	r6, r9
10002d94:	4645      	mov	r5, r8
10002d96:	b5e0      	push	{r5, r6, r7, lr}
10002d98:	001f      	movs	r7, r3
10002d9a:	ab0d      	add	r3, sp, #52	; 0x34
10002d9c:	781b      	ldrb	r3, [r3, #0]
10002d9e:	0005      	movs	r5, r0
10002da0:	469b      	mov	fp, r3
    if (reuse_id) {
10002da2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
static alarm_id_t add_alarm_under_lock(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
10002da4:	0016      	movs	r6, r2
    if (reuse_id) {
10002da6:	2b00      	cmp	r3, #0
10002da8:	d045      	beq.n	10002e36 <add_alarm_under_lock.isra.0+0xaa>
    return pool->entries + id - 1;
10002daa:	4a3f      	ldr	r2, [pc, #252]	; (10002ea8 <add_alarm_under_lock.isra.0+0x11c>)
        alarm_pool_entry_t *entry = get_entry(pool, id);
10002dac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return pool->entries + id - 1;
10002dae:	4694      	mov	ip, r2
        alarm_pool_entry_t *entry = get_entry(pool, id);
10002db0:	b2db      	uxtb	r3, r3
    return pool->entries + id - 1;
10002db2:	68aa      	ldr	r2, [r5, #8]
        alarm_pool_entry_t *entry = get_entry(pool, id);
10002db4:	469a      	mov	sl, r3
    return pool->entries + id - 1;
10002db6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        if (id == ph_insert(pool->heap, id)) {
10002db8:	682c      	ldr	r4, [r5, #0]
    return pool->entries + id - 1;
10002dba:	4463      	add	r3, ip
10002dbc:	4694      	mov	ip, r2
10002dbe:	011b      	lsls	r3, r3, #4
        entry->callback = callback;
10002dc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    return pool->entries + id - 1;
10002dc2:	4463      	add	r3, ip
        entry->callback = callback;
10002dc4:	609a      	str	r2, [r3, #8]
        entry->user_data = user_data;
10002dc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        entry->target = time;
10002dc8:	601e      	str	r6, [r3, #0]
        entry->user_data = user_data;
10002dca:	60da      	str	r2, [r3, #12]
10002dcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        entry->target = time;
10002dce:	605f      	str	r7, [r3, #4]
10002dd0:	4694      	mov	ip, r2
10002dd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hn->child = hn->sibling = hn->parent = 0;
10002dd4:	2200      	movs	r2, #0
    return heap->nodes + id - 1;
10002dd6:	005b      	lsls	r3, r3, #1
10002dd8:	4463      	add	r3, ip
10002dda:	3b03      	subs	r3, #3
10002ddc:	4698      	mov	r8, r3
10002dde:	6823      	ldr	r3, [r4, #0]
10002de0:	4443      	add	r3, r8
    hn->child = hn->sibling = hn->parent = 0;
10002de2:	709a      	strb	r2, [r3, #2]
10002de4:	705a      	strb	r2, [r3, #1]
10002de6:	701a      	strb	r2, [r3, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10002de8:	7b63      	ldrb	r3, [r4, #13]
10002dea:	4699      	mov	r9, r3
    if (!a) return b;
10002dec:	2b00      	cmp	r3, #0
10002dee:	d042      	beq.n	10002e76 <add_alarm_under_lock.isra.0+0xea>
    if (heap->comparator(heap->user_data, a, b)) {
10002df0:	4652      	mov	r2, sl
10002df2:	0019      	movs	r1, r3
10002df4:	68a0      	ldr	r0, [r4, #8]
10002df6:	6863      	ldr	r3, [r4, #4]
10002df8:	4798      	blx	r3
    return heap->nodes + id - 1;
10002dfa:	6822      	ldr	r2, [r4, #0]
    if (heap->comparator(heap->user_data, a, b)) {
10002dfc:	2800      	cmp	r0, #0
10002dfe:	d02b      	beq.n	10002e58 <add_alarm_under_lock.isra.0+0xcc>
    return heap->nodes + id - 1;
10002e00:	464b      	mov	r3, r9
10002e02:	005b      	lsls	r3, r3, #1
10002e04:	444b      	add	r3, r9
10002e06:	3b03      	subs	r3, #3
10002e08:	18d1      	adds	r1, r2, r3
10002e0a:	468c      	mov	ip, r1
10002e0c:	4641      	mov	r1, r8
    c->parent = parent_id;
10002e0e:	4648      	mov	r0, r9
    return heap->nodes + id - 1;
10002e10:	1851      	adds	r1, r2, r1
    c->parent = parent_id;
10002e12:	7088      	strb	r0, [r1, #2]
    if (!n->child) {
10002e14:	5cd3      	ldrb	r3, [r2, r3]
10002e16:	2b00      	cmp	r3, #0
10002e18:	d142      	bne.n	10002ea0 <add_alarm_under_lock.isra.0+0x114>
        n->child = child_id;
10002e1a:	4653      	mov	r3, sl
10002e1c:	4662      	mov	r2, ip
10002e1e:	7013      	strb	r3, [r2, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10002e20:	464b      	mov	r3, r9
10002e22:	7363      	strb	r3, [r4, #13]
        if (id == ph_insert(pool->heap, id)) {
10002e24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10002e26:	4599      	cmp	r9, r3
10002e28:	d027      	beq.n	10002e7a <add_alarm_under_lock.isra.0+0xee>
}
10002e2a:	bcf0      	pop	{r4, r5, r6, r7}
10002e2c:	46bb      	mov	fp, r7
10002e2e:	46b2      	mov	sl, r6
10002e30:	46a9      	mov	r9, r5
10002e32:	46a0      	mov	r8, r4
10002e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        id = ph_new_node(pool->heap);
10002e36:	6802      	ldr	r2, [r0, #0]
    if (!heap->free_head_id) return 0;
10002e38:	7b94      	ldrb	r4, [r2, #14]
10002e3a:	2c00      	cmp	r4, #0
10002e3c:	d0f5      	beq.n	10002e2a <add_alarm_under_lock.isra.0+0x9e>
    heap->free_head_id = ph_get_node(heap, id)->sibling;
10002e3e:	6811      	ldr	r1, [r2, #0]
10002e40:	0063      	lsls	r3, r4, #1
10002e42:	468c      	mov	ip, r1
10002e44:	191b      	adds	r3, r3, r4
10002e46:	4463      	add	r3, ip
10002e48:	3b03      	subs	r3, #3
10002e4a:	785b      	ldrb	r3, [r3, #1]
10002e4c:	7393      	strb	r3, [r2, #14]
    if (!heap->free_head_id) heap->free_tail_id = 0;
10002e4e:	2b00      	cmp	r3, #0
10002e50:	d100      	bne.n	10002e54 <add_alarm_under_lock.isra.0+0xc8>
10002e52:	73d3      	strb	r3, [r2, #15]
10002e54:	940c      	str	r4, [sp, #48]	; 0x30
    if (id) {
10002e56:	e7a8      	b.n	10002daa <add_alarm_under_lock.isra.0+0x1e>
    return heap->nodes + id - 1;
10002e58:	4643      	mov	r3, r8
10002e5a:	18d1      	adds	r1, r2, r3
10002e5c:	464b      	mov	r3, r9
    c->parent = parent_id;
10002e5e:	4650      	mov	r0, sl
    return heap->nodes + id - 1;
10002e60:	005b      	lsls	r3, r3, #1
10002e62:	444b      	add	r3, r9
10002e64:	3b03      	subs	r3, #3
10002e66:	18d3      	adds	r3, r2, r3
    c->parent = parent_id;
10002e68:	7098      	strb	r0, [r3, #2]
    if (!n->child) {
10002e6a:	4640      	mov	r0, r8
10002e6c:	5c12      	ldrb	r2, [r2, r0]
10002e6e:	2a00      	cmp	r2, #0
10002e70:	d118      	bne.n	10002ea4 <add_alarm_under_lock.isra.0+0x118>
        n->child = child_id;
10002e72:	464b      	mov	r3, r9
10002e74:	700b      	strb	r3, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10002e76:	4653      	mov	r3, sl
10002e78:	7363      	strb	r3, [r4, #13]
            bool is_missed = hardware_alarm_set_target(pool->hardware_alarm_num, time);
10002e7a:	0032      	movs	r2, r6
10002e7c:	003b      	movs	r3, r7
10002e7e:	7d28      	ldrb	r0, [r5, #20]
10002e80:	f000 fc1e 	bl	100036c0 <hardware_alarm_set_target>
10002e84:	1e04      	subs	r4, r0, #0
            if (is_missed && !create_if_past) {
10002e86:	d006      	beq.n	10002e96 <add_alarm_under_lock.isra.0+0x10a>
10002e88:	465b      	mov	r3, fp
10002e8a:	2b00      	cmp	r3, #0
10002e8c:	d103      	bne.n	10002e96 <add_alarm_under_lock.isra.0+0x10a>
                ph_delete(pool->heap, id);
10002e8e:	4651      	mov	r1, sl
10002e90:	6828      	ldr	r0, [r5, #0]
10002e92:	f7ff f9e3 	bl	1000225c <ph_delete>
            if (missed) *missed = is_missed;
10002e96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10002e98:	2b00      	cmp	r3, #0
10002e9a:	d0c6      	beq.n	10002e2a <add_alarm_under_lock.isra.0+0x9e>
10002e9c:	701c      	strb	r4, [r3, #0]
    return id;
10002e9e:	e7c4      	b.n	10002e2a <add_alarm_under_lock.isra.0+0x9e>
        c->sibling = n->child;
10002ea0:	704b      	strb	r3, [r1, #1]
10002ea2:	e7ba      	b.n	10002e1a <add_alarm_under_lock.isra.0+0x8e>
10002ea4:	705a      	strb	r2, [r3, #1]
10002ea6:	e7e4      	b.n	10002e72 <add_alarm_under_lock.isra.0+0xe6>
10002ea8:	0fffffff 	.word	0x0fffffff

10002eac <alarm_pool_alarm_callback>:
static void alarm_pool_alarm_callback(uint alarm_num) {
10002eac:	b5f0      	push	{r4, r5, r6, r7, lr}
10002eae:	46de      	mov	lr, fp
10002eb0:	464e      	mov	r6, r9
10002eb2:	4657      	mov	r7, sl
10002eb4:	4645      	mov	r5, r8
10002eb6:	2300      	movs	r3, #0
10002eb8:	b5e0      	push	{r5, r6, r7, lr}
10002eba:	b08d      	sub	sp, #52	; 0x34
10002ebc:	930a      	str	r3, [sp, #40]	; 0x28
    alarm_pool_t *pool = pools[alarm_num];
10002ebe:	4b6b      	ldr	r3, [pc, #428]	; (1000306c <alarm_pool_alarm_callback+0x1c0>)
10002ec0:	0082      	lsls	r2, r0, #2
10002ec2:	58d3      	ldr	r3, [r2, r3]
static void alarm_pool_alarm_callback(uint alarm_num) {
10002ec4:	900b      	str	r0, [sp, #44]	; 0x2c
    alarm_pool_t *pool = pools[alarm_num];
10002ec6:	4699      	mov	r9, r3
        void *user_data = NULL;
10002ec8:	2300      	movs	r3, #0
10002eca:	469b      	mov	fp, r3
10002ecc:	464b      	mov	r3, r9
10002ece:	9307      	str	r3, [sp, #28]
    update_us_since_boot(&t, time_us_64());
10002ed0:	f000 fb96 	bl	10003600 <time_us_64>
        uint32_t save = spin_lock_blocking(pool->lock);
10002ed4:	9c07      	ldr	r4, [sp, #28]
10002ed6:	0006      	movs	r6, r0
10002ed8:	000f      	movs	r7, r1
10002eda:	6862      	ldr	r2, [r4, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10002edc:	f3ef 8510 	mrs	r5, PRIMASK
    __asm volatile ("cpsid i");
10002ee0:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10002ee2:	6813      	ldr	r3, [r2, #0]
10002ee4:	2b00      	cmp	r3, #0
10002ee6:	d0fc      	beq.n	10002ee2 <alarm_pool_alarm_callback+0x36>
    __asm volatile ("dmb");
10002ee8:	0022      	movs	r2, r4
10002eea:	9407      	str	r4, [sp, #28]
10002eec:	f3bf 8f5f 	dmb	sy
        pheap_node_id_t next_id = ph_peek_head(pool->heap);
10002ef0:	6824      	ldr	r4, [r4, #0]
    return heap->root_id;
10002ef2:	7b63      	ldrb	r3, [r4, #13]
10002ef4:	4699      	mov	r9, r3
        if (next_id) {
10002ef6:	2b00      	cmp	r3, #0
10002ef8:	d067      	beq.n	10002fca <alarm_pool_alarm_callback+0x11e>
    return pool->entries + id - 1;
10002efa:	6892      	ldr	r2, [r2, #8]
10002efc:	4b5c      	ldr	r3, [pc, #368]	; (10003070 <alarm_pool_alarm_callback+0x1c4>)
10002efe:	4690      	mov	r8, r2
10002f00:	444b      	add	r3, r9
10002f02:	011b      	lsls	r3, r3, #4
10002f04:	4498      	add	r8, r3
            if (absolute_time_diff_us(now, entry->target) <= 0) {
10002f06:	4643      	mov	r3, r8
10002f08:	681a      	ldr	r2, [r3, #0]
10002f0a:	685b      	ldr	r3, [r3, #4]
    return to_us_since_boot(to) - to_us_since_boot(from);
10002f0c:	0010      	movs	r0, r2
10002f0e:	0019      	movs	r1, r3
10002f10:	1b80      	subs	r0, r0, r6
10002f12:	41b9      	sbcs	r1, r7
10002f14:	2900      	cmp	r1, #0
10002f16:	dd5f      	ble.n	10002fd8 <alarm_pool_alarm_callback+0x12c>
                if (hardware_alarm_set_target(alarm_num, entry->target)) {
10002f18:	980b      	ldr	r0, [sp, #44]	; 0x2c
10002f1a:	f000 fbd1 	bl	100036c0 <hardware_alarm_set_target>
        void *user_data = NULL;
10002f1e:	2300      	movs	r3, #0
        absolute_time_t target = nil_time;
10002f20:	2600      	movs	r6, #0
        void *user_data = NULL;
10002f22:	4698      	mov	r8, r3
        absolute_time_t target = nil_time;
10002f24:	2700      	movs	r7, #0
        alarm_callback_t callback = NULL;
10002f26:	469a      	mov	sl, r3
        spin_unlock(pool->lock, save);
10002f28:	9c07      	ldr	r4, [sp, #28]
10002f2a:	6863      	ldr	r3, [r4, #4]
10002f2c:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002f30:	465a      	mov	r2, fp
10002f32:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002f34:	f385 8810 	msr	PRIMASK, r5
        if (callback) {
10002f38:	4653      	mov	r3, sl
10002f3a:	2b00      	cmp	r3, #0
10002f3c:	d108      	bne.n	10002f50 <alarm_pool_alarm_callback+0xa4>
    } while (again);
10002f3e:	2800      	cmp	r0, #0
10002f40:	d1c6      	bne.n	10002ed0 <alarm_pool_alarm_callback+0x24>
}
10002f42:	b00d      	add	sp, #52	; 0x34
10002f44:	bcf0      	pop	{r4, r5, r6, r7}
10002f46:	46bb      	mov	fp, r7
10002f48:	46b2      	mov	sl, r6
10002f4a:	46a9      	mov	r9, r5
10002f4c:	46a0      	mov	r8, r4
10002f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ((uint)id_high << 8u * sizeof(id)) | id;
10002f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            int64_t repeat = callback(make_public_id(id_high, next_id), user_data);
10002f52:	4641      	mov	r1, r8
    return ((uint)id_high << 8u * sizeof(id)) | id;
10002f54:	0218      	lsls	r0, r3, #8
10002f56:	464b      	mov	r3, r9
10002f58:	4318      	orrs	r0, r3
            int64_t repeat = callback(make_public_id(id_high, next_id), user_data);
10002f5a:	47d0      	blx	sl
10002f5c:	9008      	str	r0, [sp, #32]
10002f5e:	9109      	str	r1, [sp, #36]	; 0x24
            save = spin_lock_blocking(pool->lock);
10002f60:	6862      	ldr	r2, [r4, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10002f62:	f3ef 8510 	mrs	r5, PRIMASK
    __asm volatile ("cpsid i");
10002f66:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10002f68:	6813      	ldr	r3, [r2, #0]
10002f6a:	2b00      	cmp	r3, #0
10002f6c:	d0fc      	beq.n	10002f68 <alarm_pool_alarm_callback+0xbc>
    __asm volatile ("dmb");
10002f6e:	9407      	str	r4, [sp, #28]
10002f70:	f3bf 8f5f 	dmb	sy
            if (repeat < 0 && pool->alarm_in_progress) {
10002f74:	9908      	ldr	r1, [sp, #32]
10002f76:	9a09      	ldr	r2, [sp, #36]	; 0x24
10002f78:	2a00      	cmp	r2, #0
10002f7a:	db48      	blt.n	1000300e <alarm_pool_alarm_callback+0x162>
            } else if (repeat > 0 && pool->alarm_in_progress) {
10002f7c:	4311      	orrs	r1, r2
10002f7e:	d003      	beq.n	10002f88 <alarm_pool_alarm_callback+0xdc>
10002f80:	9b07      	ldr	r3, [sp, #28]
10002f82:	691b      	ldr	r3, [r3, #16]
10002f84:	2b00      	cmp	r3, #0
10002f86:	d15d      	bne.n	10003044 <alarm_pool_alarm_callback+0x198>
                ph_add_to_free_list(pool->heap, next_id);
10002f88:	9b07      	ldr	r3, [sp, #28]
10002f8a:	681b      	ldr	r3, [r3, #0]

bool ph_delete(pheap_t *heap, pheap_node_id_t id);

static inline void ph_add_to_free_list(pheap_t *heap, pheap_node_id_t id) {
    assert(id && !ph_contains(heap, id));
    if (heap->free_tail_id) {
10002f8c:	7bd9      	ldrb	r1, [r3, #15]
10002f8e:	2900      	cmp	r1, #0
10002f90:	d007      	beq.n	10002fa2 <alarm_pool_alarm_callback+0xf6>
        ph_get_node(heap, heap->free_tail_id)->sibling = id;
10002f92:	004a      	lsls	r2, r1, #1
10002f94:	1852      	adds	r2, r2, r1
10002f96:	6819      	ldr	r1, [r3, #0]
10002f98:	468c      	mov	ip, r1
10002f9a:	4649      	mov	r1, r9
10002f9c:	4462      	add	r2, ip
10002f9e:	3a03      	subs	r2, #3
10002fa0:	7051      	strb	r1, [r2, #1]
    }
    heap->free_tail_id = id;
10002fa2:	464a      	mov	r2, r9
10002fa4:	73da      	strb	r2, [r3, #15]
    return pool->entry_ids_high + id - 1;
10002fa6:	464b      	mov	r3, r9
10002fa8:	9a07      	ldr	r2, [sp, #28]
10002faa:	3b01      	subs	r3, #1
10002fac:	68d1      	ldr	r1, [r2, #12]
                (*get_entry_id_high(pool, next_id))++; // we bump it for next use of id
10002fae:	5cca      	ldrb	r2, [r1, r3]
10002fb0:	3201      	adds	r2, #1
10002fb2:	54ca      	strb	r2, [r1, r3]
            pool->alarm_in_progress = 0;
10002fb4:	465b      	mov	r3, fp
10002fb6:	9a07      	ldr	r2, [sp, #28]
10002fb8:	6113      	str	r3, [r2, #16]
            spin_unlock(pool->lock, save);
10002fba:	6853      	ldr	r3, [r2, #4]
10002fbc:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002fc0:	465a      	mov	r2, fp
10002fc2:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002fc4:	f385 8810 	msr	PRIMASK, r5
    } while (again);
10002fc8:	e782      	b.n	10002ed0 <alarm_pool_alarm_callback+0x24>
        void *user_data = NULL;
10002fca:	2300      	movs	r3, #0
        absolute_time_t target = nil_time;
10002fcc:	2600      	movs	r6, #0
        void *user_data = NULL;
10002fce:	4698      	mov	r8, r3
        absolute_time_t target = nil_time;
10002fd0:	2700      	movs	r7, #0
        alarm_callback_t callback = NULL;
10002fd2:	469a      	mov	sl, r3
        again = false;
10002fd4:	2000      	movs	r0, #0
10002fd6:	e7a7      	b.n	10002f28 <alarm_pool_alarm_callback+0x7c>
            if (absolute_time_diff_us(now, entry->target) <= 0) {
10002fd8:	2900      	cmp	r1, #0
10002fda:	d101      	bne.n	10002fe0 <alarm_pool_alarm_callback+0x134>
10002fdc:	2800      	cmp	r0, #0
10002fde:	d19b      	bne.n	10002f18 <alarm_pool_alarm_callback+0x6c>
                pheap_node_id_t __unused removed_id = ph_remove_head_reserve(pool->heap, true);
10002fe0:	2101      	movs	r1, #1
10002fe2:	0020      	movs	r0, r4
10002fe4:	f7ff f8bc 	bl	10002160 <ph_remove_head_reserve>
                target = entry->target;
10002fe8:	4643      	mov	r3, r8
10002fea:	681e      	ldr	r6, [r3, #0]
10002fec:	685f      	ldr	r7, [r3, #4]
                callback = entry->callback;
10002fee:	689b      	ldr	r3, [r3, #8]
                id_high = *get_entry_id_high(pool, next_id);
10002ff0:	9a07      	ldr	r2, [sp, #28]
                callback = entry->callback;
10002ff2:	469a      	mov	sl, r3
                user_data = entry->user_data;
10002ff4:	4643      	mov	r3, r8
10002ff6:	68db      	ldr	r3, [r3, #12]
10002ff8:	4698      	mov	r8, r3
                id_high = *get_entry_id_high(pool, next_id);
10002ffa:	68d3      	ldr	r3, [r2, #12]
10002ffc:	444b      	add	r3, r9
10002ffe:	3b01      	subs	r3, #1
10003000:	781b      	ldrb	r3, [r3, #0]
10003002:	930a      	str	r3, [sp, #40]	; 0x28
    return ((uint)id_high << 8u * sizeof(id)) | id;
10003004:	021b      	lsls	r3, r3, #8
10003006:	4303      	orrs	r3, r0
                pool->alarm_in_progress = make_public_id(id_high, removed_id);
10003008:	6113      	str	r3, [r2, #16]
        again = false;
1000300a:	2000      	movs	r0, #0
1000300c:	e78c      	b.n	10002f28 <alarm_pool_alarm_callback+0x7c>
            if (repeat < 0 && pool->alarm_in_progress) {
1000300e:	6923      	ldr	r3, [r4, #16]
10003010:	2b00      	cmp	r3, #0
10003012:	d0b9      	beq.n	10002f88 <alarm_pool_alarm_callback+0xdc>
    uint64_t delayed = base + us;
10003014:	0033      	movs	r3, r6
10003016:	003c      	movs	r4, r7
10003018:	1a5b      	subs	r3, r3, r1
1000301a:	4194      	sbcs	r4, r2
1000301c:	001a      	movs	r2, r3
1000301e:	0023      	movs	r3, r4
    if (delayed < base) {
10003020:	42a7      	cmp	r7, r4
10003022:	d819      	bhi.n	10003058 <alarm_pool_alarm_callback+0x1ac>
10003024:	429f      	cmp	r7, r3
10003026:	d01b      	beq.n	10003060 <alarm_pool_alarm_callback+0x1b4>
                add_alarm_under_lock(pool, delayed_by_us(get_absolute_time(), repeat), callback, user_data, next_id,
10003028:	4659      	mov	r1, fp
1000302a:	9104      	str	r1, [sp, #16]
1000302c:	2101      	movs	r1, #1
1000302e:	9103      	str	r1, [sp, #12]
10003030:	4649      	mov	r1, r9
10003032:	9102      	str	r1, [sp, #8]
10003034:	4641      	mov	r1, r8
10003036:	9101      	str	r1, [sp, #4]
10003038:	4651      	mov	r1, sl
1000303a:	9807      	ldr	r0, [sp, #28]
1000303c:	9100      	str	r1, [sp, #0]
1000303e:	f7ff fea5 	bl	10002d8c <add_alarm_under_lock.isra.0>
10003042:	e7b7      	b.n	10002fb4 <alarm_pool_alarm_callback+0x108>
    update_us_since_boot(&t, time_us_64());
10003044:	f000 fadc 	bl	10003600 <time_us_64>
    uint64_t delayed = base + us;
10003048:	9a08      	ldr	r2, [sp, #32]
1000304a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    update_us_since_boot(&t, time_us_64());
1000304c:	0006      	movs	r6, r0
1000304e:	000f      	movs	r7, r1
    uint64_t delayed = base + us;
10003050:	1992      	adds	r2, r2, r6
10003052:	417b      	adcs	r3, r7
    if (delayed < base) {
10003054:	4299      	cmp	r1, r3
10003056:	d9e5      	bls.n	10003024 <alarm_pool_alarm_callback+0x178>
        delayed = (uint64_t)-1;
10003058:	2201      	movs	r2, #1
1000305a:	4252      	negs	r2, r2
1000305c:	17d3      	asrs	r3, r2, #31
1000305e:	e7e3      	b.n	10003028 <alarm_pool_alarm_callback+0x17c>
    if (delayed < base) {
10003060:	4296      	cmp	r6, r2
10003062:	d9e1      	bls.n	10003028 <alarm_pool_alarm_callback+0x17c>
        delayed = (uint64_t)-1;
10003064:	2201      	movs	r2, #1
10003066:	4252      	negs	r2, r2
10003068:	17d3      	asrs	r3, r2, #31
1000306a:	e7dd      	b.n	10003028 <alarm_pool_alarm_callback+0x17c>
1000306c:	2003e308 	.word	0x2003e308
10003070:	0fffffff 	.word	0x0fffffff

10003074 <alarm_pool_add_alarm_at.constprop.0>:
alarm_id_t alarm_pool_add_alarm_at(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
10003074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003076:	4657      	mov	r7, sl
10003078:	464e      	mov	r6, r9
1000307a:	46de      	mov	lr, fp
1000307c:	4645      	mov	r5, r8
1000307e:	4691      	mov	r9, r2
10003080:	b5e0      	push	{r5, r6, r7, lr}
10003082:	0004      	movs	r4, r0
10003084:	469a      	mov	sl, r3
        uint32_t save = spin_lock_blocking(pool->lock);
10003086:	6842      	ldr	r2, [r0, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10003088:	f3ef 8810 	mrs	r8, PRIMASK
    __asm volatile ("cpsid i");
1000308c:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000308e:	6813      	ldr	r3, [r2, #0]
10003090:	2b00      	cmp	r3, #0
10003092:	d0fc      	beq.n	1000308e <alarm_pool_add_alarm_at.constprop.0+0x1a>
    __asm volatile ("dmb");
10003094:	f3bf 8f5f 	dmb	sy
        id = ph_new_node(pool->heap);
10003098:	6826      	ldr	r6, [r4, #0]
    if (!heap->free_head_id) return 0;
1000309a:	7bb5      	ldrb	r5, [r6, #14]
1000309c:	2d00      	cmp	r5, #0
1000309e:	d048      	beq.n	10003132 <alarm_pool_add_alarm_at.constprop.0+0xbe>
    return heap->nodes + id - 1;
100030a0:	006f      	lsls	r7, r5, #1
100030a2:	6833      	ldr	r3, [r6, #0]
100030a4:	197f      	adds	r7, r7, r5
100030a6:	3f03      	subs	r7, #3
100030a8:	19d9      	adds	r1, r3, r7
    heap->free_head_id = ph_get_node(heap, id)->sibling;
100030aa:	784b      	ldrb	r3, [r1, #1]
100030ac:	73b3      	strb	r3, [r6, #14]
    if (!heap->free_head_id) heap->free_tail_id = 0;
100030ae:	2b00      	cmp	r3, #0
100030b0:	d100      	bne.n	100030b4 <alarm_pool_add_alarm_at.constprop.0+0x40>
100030b2:	73f3      	strb	r3, [r6, #15]
    return pool->entries + id - 1;
100030b4:	68a2      	ldr	r2, [r4, #8]
100030b6:	4b34      	ldr	r3, [pc, #208]	; (10003188 <alarm_pool_add_alarm_at.constprop.0+0x114>)
100030b8:	4694      	mov	ip, r2
        entry->target = time;
100030ba:	464a      	mov	r2, r9
    return pool->entries + id - 1;
100030bc:	18eb      	adds	r3, r5, r3
100030be:	011b      	lsls	r3, r3, #4
100030c0:	4463      	add	r3, ip
        entry->target = time;
100030c2:	601a      	str	r2, [r3, #0]
100030c4:	4652      	mov	r2, sl
100030c6:	605a      	str	r2, [r3, #4]
        entry->callback = callback;
100030c8:	4a30      	ldr	r2, [pc, #192]	; (1000318c <alarm_pool_add_alarm_at.constprop.0+0x118>)
100030ca:	609a      	str	r2, [r3, #8]
        entry->user_data = user_data;
100030cc:	2200      	movs	r2, #0
100030ce:	60da      	str	r2, [r3, #12]
    hn->child = hn->sibling = hn->parent = 0;
100030d0:	708a      	strb	r2, [r1, #2]
100030d2:	704a      	strb	r2, [r1, #1]
100030d4:	700a      	strb	r2, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
100030d6:	7b73      	ldrb	r3, [r6, #13]
100030d8:	469b      	mov	fp, r3
    if (!a) return b;
100030da:	2b00      	cmp	r3, #0
100030dc:	d043      	beq.n	10003166 <alarm_pool_add_alarm_at.constprop.0+0xf2>
    if (heap->comparator(heap->user_data, a, b)) {
100030de:	002a      	movs	r2, r5
100030e0:	0019      	movs	r1, r3
100030e2:	68b0      	ldr	r0, [r6, #8]
100030e4:	6873      	ldr	r3, [r6, #4]
100030e6:	4798      	blx	r3
    return heap->nodes + id - 1;
100030e8:	6832      	ldr	r2, [r6, #0]
    if (heap->comparator(heap->user_data, a, b)) {
100030ea:	2800      	cmp	r0, #0
100030ec:	d02f      	beq.n	1000314e <alarm_pool_add_alarm_at.constprop.0+0xda>
    return heap->nodes + id - 1;
100030ee:	465b      	mov	r3, fp
    c->parent = parent_id;
100030f0:	4658      	mov	r0, fp
    return heap->nodes + id - 1;
100030f2:	005b      	lsls	r3, r3, #1
100030f4:	445b      	add	r3, fp
100030f6:	19d7      	adds	r7, r2, r7
100030f8:	3b03      	subs	r3, #3
    c->parent = parent_id;
100030fa:	70b8      	strb	r0, [r7, #2]
    return heap->nodes + id - 1;
100030fc:	18d1      	adds	r1, r2, r3
    if (!n->child) {
100030fe:	5cd3      	ldrb	r3, [r2, r3]
10003100:	2b00      	cmp	r3, #0
10003102:	d13f      	bne.n	10003184 <alarm_pool_add_alarm_at.constprop.0+0x110>
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10003104:	465b      	mov	r3, fp
        n->child = child_id;
10003106:	700d      	strb	r5, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10003108:	7373      	strb	r3, [r6, #13]
        if (id == ph_insert(pool->heap, id)) {
1000310a:	455d      	cmp	r5, fp
1000310c:	d02c      	beq.n	10003168 <alarm_pool_add_alarm_at.constprop.0+0xf4>
    bool missed = false;
1000310e:	2600      	movs	r6, #0
        if (id) id_high = *get_entry_id_high(pool, id);
10003110:	68e3      	ldr	r3, [r4, #12]
10003112:	195b      	adds	r3, r3, r5
10003114:	3b01      	subs	r3, #1
10003116:	7819      	ldrb	r1, [r3, #0]
        spin_unlock(pool->lock, save);
10003118:	6863      	ldr	r3, [r4, #4]
1000311a:	f3bf 8f5f 	dmb	sy
    *lock = 0;
1000311e:	2200      	movs	r2, #0
10003120:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10003122:	f388 8810 	msr	PRIMASK, r8
        public_id = missed ? 0 : make_public_id(id_high, id);
10003126:	2000      	movs	r0, #0
10003128:	2e00      	cmp	r6, #0
1000312a:	d10a      	bne.n	10003142 <alarm_pool_add_alarm_at.constprop.0+0xce>
    return ((uint)id_high << 8u * sizeof(id)) | id;
1000312c:	0208      	lsls	r0, r1, #8
1000312e:	4328      	orrs	r0, r5
10003130:	e007      	b.n	10003142 <alarm_pool_add_alarm_at.constprop.0+0xce>
        spin_unlock(pool->lock, save);
10003132:	6863      	ldr	r3, [r4, #4]
    __asm volatile ("dmb");
10003134:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10003138:	601d      	str	r5, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000313a:	f388 8810 	msr	PRIMASK, r8
            return -1;
1000313e:	2001      	movs	r0, #1
10003140:	4240      	negs	r0, r0
}
10003142:	bcf0      	pop	{r4, r5, r6, r7}
10003144:	46bb      	mov	fp, r7
10003146:	46b2      	mov	sl, r6
10003148:	46a9      	mov	r9, r5
1000314a:	46a0      	mov	r8, r4
1000314c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return heap->nodes + id - 1;
1000314e:	465b      	mov	r3, fp
10003150:	005b      	lsls	r3, r3, #1
10003152:	445b      	add	r3, fp
10003154:	3b03      	subs	r3, #3
10003156:	18d3      	adds	r3, r2, r3
    c->parent = parent_id;
10003158:	709d      	strb	r5, [r3, #2]
    return heap->nodes + id - 1;
1000315a:	19d1      	adds	r1, r2, r7
    if (!n->child) {
1000315c:	5dd2      	ldrb	r2, [r2, r7]
1000315e:	2a00      	cmp	r2, #0
10003160:	d10e      	bne.n	10003180 <alarm_pool_add_alarm_at.constprop.0+0x10c>
        n->child = child_id;
10003162:	465b      	mov	r3, fp
10003164:	700b      	strb	r3, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10003166:	7375      	strb	r5, [r6, #13]
            bool is_missed = hardware_alarm_set_target(pool->hardware_alarm_num, time);
10003168:	464a      	mov	r2, r9
1000316a:	4653      	mov	r3, sl
1000316c:	7d20      	ldrb	r0, [r4, #20]
1000316e:	f000 faa7 	bl	100036c0 <hardware_alarm_set_target>
10003172:	1e06      	subs	r6, r0, #0
            if (is_missed && !create_if_past) {
10003174:	d0cb      	beq.n	1000310e <alarm_pool_add_alarm_at.constprop.0+0x9a>
                ph_delete(pool->heap, id);
10003176:	0029      	movs	r1, r5
10003178:	6820      	ldr	r0, [r4, #0]
1000317a:	f7ff f86f 	bl	1000225c <ph_delete>
1000317e:	e7c7      	b.n	10003110 <alarm_pool_add_alarm_at.constprop.0+0x9c>
        c->sibling = n->child;
10003180:	705a      	strb	r2, [r3, #1]
10003182:	e7ee      	b.n	10003162 <alarm_pool_add_alarm_at.constprop.0+0xee>
10003184:	707b      	strb	r3, [r7, #1]
10003186:	e7bd      	b.n	10003104 <alarm_pool_add_alarm_at.constprop.0+0x90>
10003188:	0fffffff 	.word	0x0fffffff
1000318c:	10002d85 	.word	0x10002d85

10003190 <alarm_pool_init_default>:
void alarm_pool_init_default() {
10003190:	b570      	push	{r4, r5, r6, lr}
    if (!default_alarm_pool) {
10003192:	4c18      	ldr	r4, [pc, #96]	; (100031f4 <alarm_pool_init_default+0x64>)
10003194:	6823      	ldr	r3, [r4, #0]
10003196:	2b00      	cmp	r3, #0
10003198:	d000      	beq.n	1000319c <alarm_pool_init_default+0xc>
}
1000319a:	bd70      	pop	{r4, r5, r6, pc}
    hardware_alarm_claim(hardware_alarm_num);
1000319c:	2003      	movs	r0, #3
1000319e:	f000 fa23 	bl	100035e8 <hardware_alarm_claim>
    hardware_alarm_cancel(hardware_alarm_num);
100031a2:	2003      	movs	r0, #3
100031a4:	f000 faee 	bl	10003784 <hardware_alarm_cancel>
    hardware_alarm_set_callback(hardware_alarm_num, alarm_pool_alarm_callback);
100031a8:	4913      	ldr	r1, [pc, #76]	; (100031f8 <alarm_pool_init_default+0x68>)
100031aa:	2003      	movs	r0, #3
100031ac:	f000 fa42 	bl	10003634 <hardware_alarm_set_callback>
    alarm_pool_t *pool = (alarm_pool_t *)malloc(sizeof(alarm_pool_t));
100031b0:	2018      	movs	r0, #24
100031b2:	f7ff f891 	bl	100022d8 <__wrap_malloc>
100031b6:	0005      	movs	r5, r0
    pool->lock = spin_lock_instance(next_striped_spin_lock_num());
100031b8:	f7ff fdae 	bl	10002d18 <next_striped_spin_lock_num>
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
100031bc:	4b0f      	ldr	r3, [pc, #60]	; (100031fc <alarm_pool_init_default+0x6c>)
    pool->heap = ph_create(max_timers, timer_pool_entry_comparator, pool);
100031be:	002a      	movs	r2, r5
100031c0:	469c      	mov	ip, r3
100031c2:	4460      	add	r0, ip
100031c4:	0080      	lsls	r0, r0, #2
100031c6:	490e      	ldr	r1, [pc, #56]	; (10003200 <alarm_pool_init_default+0x70>)
    pool->lock = spin_lock_instance(next_striped_spin_lock_num());
100031c8:	6068      	str	r0, [r5, #4]
    pool->heap = ph_create(max_timers, timer_pool_entry_comparator, pool);
100031ca:	2010      	movs	r0, #16
100031cc:	f7fe fed2 	bl	10001f74 <ph_create>
    pool->entries = (alarm_pool_entry_t *)calloc(max_timers, sizeof(alarm_pool_entry_t));
100031d0:	2110      	movs	r1, #16
    pool->heap = ph_create(max_timers, timer_pool_entry_comparator, pool);
100031d2:	6028      	str	r0, [r5, #0]
    pool->entries = (alarm_pool_entry_t *)calloc(max_timers, sizeof(alarm_pool_entry_t));
100031d4:	2010      	movs	r0, #16
100031d6:	f7ff f883 	bl	100022e0 <__wrap_calloc>
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
100031da:	2101      	movs	r1, #1
    pool->entries = (alarm_pool_entry_t *)calloc(max_timers, sizeof(alarm_pool_entry_t));
100031dc:	60a8      	str	r0, [r5, #8]
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
100031de:	2010      	movs	r0, #16
100031e0:	f7ff f87e 	bl	100022e0 <__wrap_calloc>
    pool->hardware_alarm_num = hardware_alarm_num;
100031e4:	2303      	movs	r3, #3
100031e6:	752b      	strb	r3, [r5, #20]
    pools[hardware_alarm_num] = pool;
100031e8:	4b06      	ldr	r3, [pc, #24]	; (10003204 <alarm_pool_init_default+0x74>)
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
100031ea:	60e8      	str	r0, [r5, #12]
    pools[hardware_alarm_num] = pool;
100031ec:	60dd      	str	r5, [r3, #12]
        default_alarm_pool = alarm_pool_create(PICO_TIME_DEFAULT_ALARM_POOL_HARDWARE_ALARM_NUM,
100031ee:	6025      	str	r5, [r4, #0]
}
100031f0:	e7d3      	b.n	1000319a <alarm_pool_init_default+0xa>
100031f2:	46c0      	nop			; (mov r8, r8)
100031f4:	2003dc44 	.word	0x2003dc44
100031f8:	10002ead 	.word	0x10002ead
100031fc:	34000040 	.word	0x34000040
10003200:	10002d51 	.word	0x10002d51
10003204:	2003e308 	.word	0x2003e308

10003208 <alarm_pool_get_default>:
    return default_alarm_pool;
10003208:	4b01      	ldr	r3, [pc, #4]	; (10003210 <alarm_pool_get_default+0x8>)
1000320a:	6818      	ldr	r0, [r3, #0]
}
1000320c:	4770      	bx	lr
1000320e:	46c0      	nop			; (mov r8, r8)
10003210:	2003dc44 	.word	0x2003dc44

10003214 <alarm_pool_add_alarm_at>:
                                   void *user_data, bool fire_if_past) {
10003214:	b5f0      	push	{r4, r5, r6, r7, lr}
10003216:	46de      	mov	lr, fp
10003218:	464e      	mov	r6, r9
1000321a:	4645      	mov	r5, r8
1000321c:	4657      	mov	r7, sl
1000321e:	b5e0      	push	{r5, r6, r7, lr}
10003220:	b085      	sub	sp, #20
10003222:	9301      	str	r3, [sp, #4]
10003224:	ab10      	add	r3, sp, #64	; 0x40
10003226:	781b      	ldrb	r3, [r3, #0]
10003228:	0006      	movs	r6, r0
1000322a:	9303      	str	r3, [sp, #12]
    bool missed = false;
1000322c:	2300      	movs	r3, #0
1000322e:	469b      	mov	fp, r3
    hn->child = hn->sibling = hn->parent = 0;
10003230:	4698      	mov	r8, r3
                                   void *user_data, bool fire_if_past) {
10003232:	9200      	str	r2, [sp, #0]
        uint32_t save = spin_lock_blocking(pool->lock);
10003234:	6872      	ldr	r2, [r6, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10003236:	f3ef 8a10 	mrs	sl, PRIMASK
    __asm volatile ("cpsid i");
1000323a:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000323c:	6813      	ldr	r3, [r2, #0]
1000323e:	2b00      	cmp	r3, #0
10003240:	d0fc      	beq.n	1000323c <alarm_pool_add_alarm_at+0x28>
    __asm volatile ("dmb");
10003242:	f3bf 8f5f 	dmb	sy
        id = ph_new_node(pool->heap);
10003246:	6835      	ldr	r5, [r6, #0]
    if (!heap->free_head_id) return 0;
10003248:	7bac      	ldrb	r4, [r5, #14]
1000324a:	2c00      	cmp	r4, #0
1000324c:	d100      	bne.n	10003250 <alarm_pool_add_alarm_at+0x3c>
1000324e:	e080      	b.n	10003352 <alarm_pool_add_alarm_at+0x13e>
    return heap->nodes + id - 1;
10003250:	0067      	lsls	r7, r4, #1
10003252:	682b      	ldr	r3, [r5, #0]
10003254:	193f      	adds	r7, r7, r4
10003256:	3f03      	subs	r7, #3
10003258:	19db      	adds	r3, r3, r7
    heap->free_head_id = ph_get_node(heap, id)->sibling;
1000325a:	785a      	ldrb	r2, [r3, #1]
1000325c:	73aa      	strb	r2, [r5, #14]
    if (!heap->free_head_id) heap->free_tail_id = 0;
1000325e:	2a00      	cmp	r2, #0
10003260:	d100      	bne.n	10003264 <alarm_pool_add_alarm_at+0x50>
10003262:	73ea      	strb	r2, [r5, #15]
    return pool->entries + id - 1;
10003264:	68b1      	ldr	r1, [r6, #8]
10003266:	4a55      	ldr	r2, [pc, #340]	; (100033bc <alarm_pool_add_alarm_at+0x1a8>)
10003268:	468c      	mov	ip, r1
        entry->target = time;
1000326a:	9800      	ldr	r0, [sp, #0]
1000326c:	9901      	ldr	r1, [sp, #4]
    return pool->entries + id - 1;
1000326e:	18a2      	adds	r2, r4, r2
10003270:	0112      	lsls	r2, r2, #4
10003272:	4462      	add	r2, ip
        entry->target = time;
10003274:	6010      	str	r0, [r2, #0]
10003276:	6051      	str	r1, [r2, #4]
        entry->callback = callback;
10003278:	990e      	ldr	r1, [sp, #56]	; 0x38
1000327a:	6091      	str	r1, [r2, #8]
        entry->user_data = user_data;
1000327c:	990f      	ldr	r1, [sp, #60]	; 0x3c
1000327e:	60d1      	str	r1, [r2, #12]
    hn->child = hn->sibling = hn->parent = 0;
10003280:	4642      	mov	r2, r8
10003282:	709a      	strb	r2, [r3, #2]
10003284:	705a      	strb	r2, [r3, #1]
10003286:	701a      	strb	r2, [r3, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10003288:	7b6b      	ldrb	r3, [r5, #13]
1000328a:	4699      	mov	r9, r3
    if (!a) return b;
1000328c:	2b00      	cmp	r3, #0
1000328e:	d100      	bne.n	10003292 <alarm_pool_add_alarm_at+0x7e>
10003290:	e07d      	b.n	1000338e <alarm_pool_add_alarm_at+0x17a>
    if (heap->comparator(heap->user_data, a, b)) {
10003292:	0022      	movs	r2, r4
10003294:	0019      	movs	r1, r3
10003296:	68a8      	ldr	r0, [r5, #8]
10003298:	686b      	ldr	r3, [r5, #4]
1000329a:	4798      	blx	r3
    return heap->nodes + id - 1;
1000329c:	682a      	ldr	r2, [r5, #0]
    if (heap->comparator(heap->user_data, a, b)) {
1000329e:	2800      	cmp	r0, #0
100032a0:	d069      	beq.n	10003376 <alarm_pool_add_alarm_at+0x162>
    return heap->nodes + id - 1;
100032a2:	464b      	mov	r3, r9
    c->parent = parent_id;
100032a4:	4648      	mov	r0, r9
    return heap->nodes + id - 1;
100032a6:	005b      	lsls	r3, r3, #1
100032a8:	444b      	add	r3, r9
100032aa:	19d7      	adds	r7, r2, r7
100032ac:	3b03      	subs	r3, #3
    c->parent = parent_id;
100032ae:	70b8      	strb	r0, [r7, #2]
    return heap->nodes + id - 1;
100032b0:	18d1      	adds	r1, r2, r3
    if (!n->child) {
100032b2:	5cd3      	ldrb	r3, [r2, r3]
100032b4:	2b00      	cmp	r3, #0
100032b6:	d000      	beq.n	100032ba <alarm_pool_add_alarm_at+0xa6>
100032b8:	e07c      	b.n	100033b4 <alarm_pool_add_alarm_at+0x1a0>
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
100032ba:	464b      	mov	r3, r9
        n->child = child_id;
100032bc:	700c      	strb	r4, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
100032be:	736b      	strb	r3, [r5, #13]
        if (id == ph_insert(pool->heap, id)) {
100032c0:	454c      	cmp	r4, r9
100032c2:	d065      	beq.n	10003390 <alarm_pool_add_alarm_at+0x17c>
        if (id) id_high = *get_entry_id_high(pool, id);
100032c4:	68f3      	ldr	r3, [r6, #12]
100032c6:	191b      	adds	r3, r3, r4
100032c8:	3b01      	subs	r3, #1
100032ca:	7818      	ldrb	r0, [r3, #0]
        spin_unlock(pool->lock, save);
100032cc:	6873      	ldr	r3, [r6, #4]
100032ce:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100032d2:	4642      	mov	r2, r8
100032d4:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100032d6:	f38a 8810 	msr	PRIMASK, sl
        public_id = missed ? 0 : make_public_id(id_high, id);
100032da:	465b      	mov	r3, fp
100032dc:	2b00      	cmp	r3, #0
100032de:	d108      	bne.n	100032f2 <alarm_pool_add_alarm_at+0xde>
    return ((uint)id_high << 8u * sizeof(id)) | id;
100032e0:	0200      	lsls	r0, r0, #8
100032e2:	4320      	orrs	r0, r4
}
100032e4:	b005      	add	sp, #20
100032e6:	bcf0      	pop	{r4, r5, r6, r7}
100032e8:	46bb      	mov	fp, r7
100032ea:	46b2      	mov	sl, r6
100032ec:	46a9      	mov	r9, r5
100032ee:	46a0      	mov	r8, r4
100032f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (missed && fire_if_past) {
100032f2:	9b03      	ldr	r3, [sp, #12]
100032f4:	2b00      	cmp	r3, #0
100032f6:	d05f      	beq.n	100033b8 <alarm_pool_add_alarm_at+0x1a4>
            int64_t repeat = callback(public_id, user_data);
100032f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100032fa:	2000      	movs	r0, #0
100032fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
100032fe:	4798      	blx	r3
            if (!repeat) {
10003300:	0003      	movs	r3, r0
            int64_t repeat = callback(public_id, user_data);
10003302:	0004      	movs	r4, r0
10003304:	000d      	movs	r5, r1
            if (!repeat) {
10003306:	430b      	orrs	r3, r1
10003308:	d056      	beq.n	100033b8 <alarm_pool_add_alarm_at+0x1a4>
            } else if (repeat < 0) {
1000330a:	2900      	cmp	r1, #0
1000330c:	da0d      	bge.n	1000332a <alarm_pool_add_alarm_at+0x116>
    uint64_t delayed = base + us;
1000330e:	9800      	ldr	r0, [sp, #0]
10003310:	9901      	ldr	r1, [sp, #4]
10003312:	0002      	movs	r2, r0
10003314:	000b      	movs	r3, r1
10003316:	1b12      	subs	r2, r2, r4
10003318:	41ab      	sbcs	r3, r5
    if (delayed < base) {
1000331a:	4299      	cmp	r1, r3
1000331c:	d813      	bhi.n	10003346 <alarm_pool_add_alarm_at+0x132>
1000331e:	d021      	beq.n	10003364 <alarm_pool_add_alarm_at+0x150>
10003320:	9200      	str	r2, [sp, #0]
10003322:	9301      	str	r3, [sp, #4]
        delayed = (uint64_t)-1;
10003324:	9b03      	ldr	r3, [sp, #12]
10003326:	469b      	mov	fp, r3
10003328:	e784      	b.n	10003234 <alarm_pool_add_alarm_at+0x20>
    update_us_since_boot(&t, time_us_64());
1000332a:	f000 f969 	bl	10003600 <time_us_64>
1000332e:	0002      	movs	r2, r0
10003330:	000b      	movs	r3, r1
    uint64_t delayed = base + us;
10003332:	18a4      	adds	r4, r4, r2
10003334:	415d      	adcs	r5, r3
10003336:	9400      	str	r4, [sp, #0]
10003338:	9501      	str	r5, [sp, #4]
    if (delayed < base) {
1000333a:	42a9      	cmp	r1, r5
1000333c:	d803      	bhi.n	10003346 <alarm_pool_add_alarm_at+0x132>
1000333e:	d1f1      	bne.n	10003324 <alarm_pool_add_alarm_at+0x110>
10003340:	9900      	ldr	r1, [sp, #0]
10003342:	428a      	cmp	r2, r1
10003344:	d9ee      	bls.n	10003324 <alarm_pool_add_alarm_at+0x110>
        delayed = (uint64_t)-1;
10003346:	2301      	movs	r3, #1
10003348:	425b      	negs	r3, r3
1000334a:	17dc      	asrs	r4, r3, #31
1000334c:	9300      	str	r3, [sp, #0]
1000334e:	9401      	str	r4, [sp, #4]
10003350:	e7e8      	b.n	10003324 <alarm_pool_add_alarm_at+0x110>
        spin_unlock(pool->lock, save);
10003352:	6873      	ldr	r3, [r6, #4]
    __asm volatile ("dmb");
10003354:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10003358:	601c      	str	r4, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000335a:	f38a 8810 	msr	PRIMASK, sl
            return -1;
1000335e:	2001      	movs	r0, #1
10003360:	4240      	negs	r0, r0
10003362:	e7bf      	b.n	100032e4 <alarm_pool_add_alarm_at+0xd0>
    if (delayed < base) {
10003364:	9900      	ldr	r1, [sp, #0]
10003366:	4291      	cmp	r1, r2
10003368:	d9da      	bls.n	10003320 <alarm_pool_add_alarm_at+0x10c>
        delayed = (uint64_t)-1;
1000336a:	2301      	movs	r3, #1
1000336c:	425b      	negs	r3, r3
1000336e:	17dc      	asrs	r4, r3, #31
10003370:	9300      	str	r3, [sp, #0]
10003372:	9401      	str	r4, [sp, #4]
10003374:	e7d6      	b.n	10003324 <alarm_pool_add_alarm_at+0x110>
    return heap->nodes + id - 1;
10003376:	464b      	mov	r3, r9
10003378:	005b      	lsls	r3, r3, #1
1000337a:	444b      	add	r3, r9
1000337c:	3b03      	subs	r3, #3
1000337e:	18d3      	adds	r3, r2, r3
    c->parent = parent_id;
10003380:	709c      	strb	r4, [r3, #2]
    return heap->nodes + id - 1;
10003382:	19d1      	adds	r1, r2, r7
    if (!n->child) {
10003384:	5dd2      	ldrb	r2, [r2, r7]
10003386:	2a00      	cmp	r2, #0
10003388:	d110      	bne.n	100033ac <alarm_pool_add_alarm_at+0x198>
        n->child = child_id;
1000338a:	464b      	mov	r3, r9
1000338c:	700b      	strb	r3, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
1000338e:	736c      	strb	r4, [r5, #13]
            bool is_missed = hardware_alarm_set_target(pool->hardware_alarm_num, time);
10003390:	7d30      	ldrb	r0, [r6, #20]
10003392:	9a00      	ldr	r2, [sp, #0]
10003394:	9b01      	ldr	r3, [sp, #4]
10003396:	f000 f993 	bl	100036c0 <hardware_alarm_set_target>
1000339a:	4683      	mov	fp, r0
            if (is_missed && !create_if_past) {
1000339c:	2800      	cmp	r0, #0
1000339e:	d100      	bne.n	100033a2 <alarm_pool_add_alarm_at+0x18e>
100033a0:	e790      	b.n	100032c4 <alarm_pool_add_alarm_at+0xb0>
                ph_delete(pool->heap, id);
100033a2:	0021      	movs	r1, r4
100033a4:	6830      	ldr	r0, [r6, #0]
100033a6:	f7fe ff59 	bl	1000225c <ph_delete>
100033aa:	e78b      	b.n	100032c4 <alarm_pool_add_alarm_at+0xb0>
        c->sibling = n->child;
100033ac:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
100033ae:	464b      	mov	r3, r9
100033b0:	700b      	strb	r3, [r1, #0]
100033b2:	e7ec      	b.n	1000338e <alarm_pool_add_alarm_at+0x17a>
        c->sibling = n->child;
100033b4:	707b      	strb	r3, [r7, #1]
100033b6:	e780      	b.n	100032ba <alarm_pool_add_alarm_at+0xa6>
    bool missed = false;
100033b8:	2000      	movs	r0, #0
    return public_id;
100033ba:	e793      	b.n	100032e4 <alarm_pool_add_alarm_at+0xd0>
100033bc:	0fffffff 	.word	0x0fffffff

100033c0 <alarm_pool_cancel_alarm>:
bool alarm_pool_cancel_alarm(alarm_pool_t *pool, alarm_id_t alarm_id) {
100033c0:	b570      	push	{r4, r5, r6, lr}
    uint32_t save = spin_lock_blocking(pool->lock);
100033c2:	6842      	ldr	r2, [r0, #4]
bool alarm_pool_cancel_alarm(alarm_pool_t *pool, alarm_id_t alarm_id) {
100033c4:	0004      	movs	r4, r0
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100033c6:	f3ef 8510 	mrs	r5, PRIMASK
    __asm volatile ("cpsid i");
100033ca:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100033cc:	6813      	ldr	r3, [r2, #0]
100033ce:	2b00      	cmp	r3, #0
100033d0:	d0fc      	beq.n	100033cc <alarm_pool_cancel_alarm+0xc>
    __asm volatile ("dmb");
100033d2:	f3bf 8f5f 	dmb	sy
    if (ph_contains(pool->heap, id)) {
100033d6:	6820      	ldr	r0, [r4, #0]
    pheap_node_id_t id = (pheap_node_id_t) alarm_id;
100033d8:	b2ce      	uxtb	r6, r1
    return id == heap->root_id || ph_get_node(heap, id)->parent;
100033da:	7b43      	ldrb	r3, [r0, #13]
100033dc:	42b3      	cmp	r3, r6
100033de:	d00a      	beq.n	100033f6 <alarm_pool_cancel_alarm+0x36>
    return heap->nodes + id - 1;
100033e0:	23ff      	movs	r3, #255	; 0xff
100033e2:	400b      	ands	r3, r1
    return id == heap->root_id || ph_get_node(heap, id)->parent;
100033e4:	005a      	lsls	r2, r3, #1
100033e6:	18d3      	adds	r3, r2, r3
100033e8:	6802      	ldr	r2, [r0, #0]
100033ea:	4694      	mov	ip, r2
100033ec:	4463      	add	r3, ip
100033ee:	3b03      	subs	r3, #3
100033f0:	789b      	ldrb	r3, [r3, #2]
100033f2:	2b00      	cmp	r3, #0
100033f4:	d013      	beq.n	1000341e <alarm_pool_cancel_alarm+0x5e>
        if (id_high == *get_entry_id_high(pool, id)) {
100033f6:	68e2      	ldr	r2, [r4, #12]
    return heap->nodes + id - 1;
100033f8:	23ff      	movs	r3, #255	; 0xff
100033fa:	4694      	mov	ip, r2
100033fc:	400b      	ands	r3, r1
100033fe:	4463      	add	r3, ip
10003400:	3b01      	subs	r3, #1
        uint8_t id_high = (uint8_t)((uint)alarm_id >> 8u * sizeof(pheap_node_id_t));
10003402:	0a0a      	lsrs	r2, r1, #8
        if (id_high == *get_entry_id_high(pool, id)) {
10003404:	7819      	ldrb	r1, [r3, #0]
10003406:	b2d2      	uxtb	r2, r2
10003408:	4291      	cmp	r1, r2
1000340a:	d00e      	beq.n	1000342a <alarm_pool_cancel_alarm+0x6a>
    bool rc = false;
1000340c:	2000      	movs	r0, #0
    spin_unlock(pool->lock, save);
1000340e:	6863      	ldr	r3, [r4, #4]
10003410:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10003414:	2200      	movs	r2, #0
10003416:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10003418:	f385 8810 	msr	PRIMASK, r5
}
1000341c:	bd70      	pop	{r4, r5, r6, pc}
        if (alarm_id == pool->alarm_in_progress) {
1000341e:	6922      	ldr	r2, [r4, #16]
10003420:	428a      	cmp	r2, r1
10003422:	d1f3      	bne.n	1000340c <alarm_pool_cancel_alarm+0x4c>
    bool rc = false;
10003424:	2000      	movs	r0, #0
            pool->alarm_in_progress = 0;
10003426:	6123      	str	r3, [r4, #16]
10003428:	e7f1      	b.n	1000340e <alarm_pool_cancel_alarm+0x4e>
            rc = ph_delete(pool->heap, id);
1000342a:	0031      	movs	r1, r6
1000342c:	f7fe ff16 	bl	1000225c <ph_delete>
10003430:	e7ed      	b.n	1000340e <alarm_pool_cancel_alarm+0x4e>
10003432:	46c0      	nop			; (mov r8, r8)

10003434 <sleep_ms>:
    }
#endif

}

void sleep_ms(uint32_t ms) {
10003434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003436:	0004      	movs	r4, r0
    update_us_since_boot(&t, time_us_64());
10003438:	f000 f8e2 	bl	10003600 <time_us_64>
    sleep_us(ms * 1000ull);
1000343c:	22fa      	movs	r2, #250	; 0xfa
1000343e:	0006      	movs	r6, r0
10003440:	000f      	movs	r7, r1
10003442:	0020      	movs	r0, r4
10003444:	2300      	movs	r3, #0
10003446:	2100      	movs	r1, #0
10003448:	0092      	lsls	r2, r2, #2
1000344a:	f7fd febf 	bl	100011cc <__wrap___aeabi_lmul>
    uint64_t delayed = base + us;
1000344e:	1980      	adds	r0, r0, r6
10003450:	4179      	adcs	r1, r7
10003452:	0004      	movs	r4, r0
10003454:	000d      	movs	r5, r1
    if (delayed < base) {
10003456:	428f      	cmp	r7, r1
10003458:	d81a      	bhi.n	10003490 <sleep_ms+0x5c>
1000345a:	d017      	beq.n	1000348c <sleep_ms+0x58>
    uint64_t t_before_us = t_us - PICO_TIME_SLEEP_OVERHEAD_ADJUST_US;
1000345c:	2606      	movs	r6, #6
1000345e:	4276      	negs	r6, r6
10003460:	17f7      	asrs	r7, r6, #31
10003462:	1936      	adds	r6, r6, r4
10003464:	416f      	adcs	r7, r5
    if (t_before_us > t_us) t_before_us = 0;
10003466:	42af      	cmp	r7, r5
10003468:	d937      	bls.n	100034da <sleep_ms+0xa6>
1000346a:	2600      	movs	r6, #0
1000346c:	2700      	movs	r7, #0
    update_us_since_boot(&t, time_us_64());
1000346e:	f000 f8c7 	bl	10003600 <time_us_64>
    return to_us_since_boot(to) - to_us_since_boot(from);
10003472:	0032      	movs	r2, r6
10003474:	003b      	movs	r3, r7
10003476:	1a12      	subs	r2, r2, r0
10003478:	418b      	sbcs	r3, r1
    if (absolute_time_diff_us(get_absolute_time(), t_before) > 0) {
1000347a:	2b00      	cmp	r3, #0
1000347c:	dc16      	bgt.n	100034ac <sleep_ms+0x78>
1000347e:	2b00      	cmp	r3, #0
10003480:	d028      	beq.n	100034d4 <sleep_ms+0xa0>
    busy_wait_until(t);
10003482:	0029      	movs	r1, r5
10003484:	0020      	movs	r0, r4
10003486:	f000 f8c5 	bl	10003614 <busy_wait_until>
}
1000348a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (delayed < base) {
1000348c:	4286      	cmp	r6, r0
1000348e:	d9e5      	bls.n	1000345c <sleep_ms+0x28>
    uint64_t t_before_us = t_us - PICO_TIME_SLEEP_OVERHEAD_ADJUST_US;
10003490:	2607      	movs	r6, #7
10003492:	4276      	negs	r6, r6
10003494:	17f7      	asrs	r7, r6, #31
    update_us_since_boot(&t, time_us_64());
10003496:	f000 f8b3 	bl	10003600 <time_us_64>
    return to_us_since_boot(to) - to_us_since_boot(from);
1000349a:	0032      	movs	r2, r6
1000349c:	003b      	movs	r3, r7
1000349e:	1a12      	subs	r2, r2, r0
100034a0:	418b      	sbcs	r3, r1
        delayed = (uint64_t)-1;
100034a2:	2401      	movs	r4, #1
100034a4:	4264      	negs	r4, r4
100034a6:	17e5      	asrs	r5, r4, #31
    if (absolute_time_diff_us(get_absolute_time(), t_before) > 0) {
100034a8:	2b00      	cmp	r3, #0
100034aa:	dde8      	ble.n	1000347e <sleep_ms+0x4a>
    return default_alarm_pool;
100034ac:	4b0d      	ldr	r3, [pc, #52]	; (100034e4 <sleep_ms+0xb0>)
    return alarm_pool_add_alarm_at(alarm_pool_get_default(), time, callback, user_data, fire_if_past);
100034ae:	0032      	movs	r2, r6
100034b0:	6818      	ldr	r0, [r3, #0]
100034b2:	003b      	movs	r3, r7
100034b4:	f7ff fdde 	bl	10003074 <alarm_pool_add_alarm_at.constprop.0>
        if (add_alarm_at(t_before, sev_callback, NULL, false) >= 0) {
100034b8:	2800      	cmp	r0, #0
100034ba:	dbe2      	blt.n	10003482 <sleep_ms+0x4e>
    uint32_t hi_target = target >> 32u;
100034bc:	0039      	movs	r1, r7
    uint32_t hi = timer_hw->timerawh;
100034be:	4a0a      	ldr	r2, [pc, #40]	; (100034e8 <sleep_ms+0xb4>)
100034c0:	6a53      	ldr	r3, [r2, #36]	; 0x24
    return (hi >= hi_target && (timer_hw->timerawl >= (uint32_t) target || hi != hi_target));
100034c2:	4299      	cmp	r1, r3
100034c4:	d804      	bhi.n	100034d0 <sleep_ms+0x9c>
100034c6:	6a90      	ldr	r0, [r2, #40]	; 0x28
100034c8:	4286      	cmp	r6, r0
100034ca:	d9da      	bls.n	10003482 <sleep_ms+0x4e>
100034cc:	4299      	cmp	r1, r3
100034ce:	d1d8      	bne.n	10003482 <sleep_ms+0x4e>
    __asm volatile ("wfe");
100034d0:	bf20      	wfe
}
100034d2:	e7f5      	b.n	100034c0 <sleep_ms+0x8c>
    if (absolute_time_diff_us(get_absolute_time(), t_before) > 0) {
100034d4:	2a00      	cmp	r2, #0
100034d6:	d0d4      	beq.n	10003482 <sleep_ms+0x4e>
100034d8:	e7e8      	b.n	100034ac <sleep_ms+0x78>
    if (t_before_us > t_us) t_before_us = 0;
100034da:	42af      	cmp	r7, r5
100034dc:	d1c7      	bne.n	1000346e <sleep_ms+0x3a>
100034de:	42a6      	cmp	r6, r4
100034e0:	d8c3      	bhi.n	1000346a <sleep_ms+0x36>
100034e2:	e7c4      	b.n	1000346e <sleep_ms+0x3a>
100034e4:	2003dc44 	.word	0x2003dc44
100034e8:	40054000 	.word	0x40054000

100034ec <best_effort_wfe_or_timeout>:

bool best_effort_wfe_or_timeout(absolute_time_t timeout_timestamp) {
100034ec:	b570      	push	{r4, r5, r6, lr}
    return default_alarm_pool;
100034ee:	4d0e      	ldr	r5, [pc, #56]	; (10003528 <best_effort_wfe_or_timeout+0x3c>)
100034f0:	0002      	movs	r2, r0
100034f2:	000b      	movs	r3, r1
bool best_effort_wfe_or_timeout(absolute_time_t timeout_timestamp) {
100034f4:	0006      	movs	r6, r0
100034f6:	6828      	ldr	r0, [r5, #0]
100034f8:	000c      	movs	r4, r1
100034fa:	f7ff fdbb 	bl	10003074 <alarm_pool_add_alarm_at.constprop.0>
100034fe:	1e01      	subs	r1, r0, #0
#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
    alarm_id_t id;
    id = add_alarm_at(timeout_timestamp, sev_callback, NULL, false);
    if (id <= 0) {
10003500:	dd03      	ble.n	1000350a <best_effort_wfe_or_timeout+0x1e>
    __asm volatile ("wfe");
10003502:	bf20      	wfe
 * \param alarm_id the alarm
 * \return true if the alarm was cancelled, false if it didn't exist
 * \sa alarm_id_t for a note on reuse of IDs
 */
static inline bool cancel_alarm(alarm_id_t alarm_id) {
    return alarm_pool_cancel_alarm(alarm_pool_get_default(), alarm_id);
10003504:	6828      	ldr	r0, [r5, #0]
10003506:	f7ff ff5b 	bl	100033c0 <alarm_pool_cancel_alarm>
    uint32_t hi = timer_hw->timerawh;
1000350a:	4b08      	ldr	r3, [pc, #32]	; (1000352c <best_effort_wfe_or_timeout+0x40>)
1000350c:	2000      	movs	r0, #0
1000350e:	6a59      	ldr	r1, [r3, #36]	; 0x24
    return (hi >= hi_target && (timer_hw->timerawl >= (uint32_t) target || hi != hi_target));
10003510:	428c      	cmp	r4, r1
10003512:	d803      	bhi.n	1000351c <best_effort_wfe_or_timeout+0x30>
10003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10003516:	3001      	adds	r0, #1
10003518:	42b3      	cmp	r3, r6
1000351a:	d300      	bcc.n	1000351e <best_effort_wfe_or_timeout+0x32>
    }
#else
    tight_loop_contents();
    return time_reached(timeout_timestamp);
#endif
}
1000351c:	bd70      	pop	{r4, r5, r6, pc}
1000351e:	1a64      	subs	r4, r4, r1
10003520:	1e63      	subs	r3, r4, #1
10003522:	419c      	sbcs	r4, r3
10003524:	b2e0      	uxtb	r0, r4
10003526:	e7f9      	b.n	1000351c <best_effort_wfe_or_timeout+0x30>
10003528:	2003dc44 	.word	0x2003dc44
1000352c:	40054000 	.word	0x40054000

10003530 <hardware_alarm_irq_handler>:

static inline uint harware_alarm_irq_number(uint alarm_num) {
    return TIMER_IRQ_0 + alarm_num;
}

static void hardware_alarm_irq_handler() {
10003530:	b5f0      	push	{r4, r5, r6, r7, lr}
10003532:	46d6      	mov	lr, sl
10003534:	464f      	mov	r7, r9
10003536:	4646      	mov	r6, r8
10003538:	b5c0      	push	{r6, r7, lr}
    // Determine which timer this IRQ is for
    uint32_t ipsr;
    __asm volatile ("mrs %0, ipsr" : "=r" (ipsr)::);
1000353a:	f3ef 8305 	mrs	r3, IPSR
    uint alarm_num = (ipsr & 0x3fu) - 16 - TIMER_IRQ_0;
1000353e:	223f      	movs	r2, #63	; 0x3f
10003540:	4013      	ands	r3, r2
10003542:	0018      	movs	r0, r3
10003544:	3810      	subs	r0, #16
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10003546:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
1000354a:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000354c:	4d20      	ldr	r5, [pc, #128]	; (100035d0 <hardware_alarm_irq_handler+0xa0>)
1000354e:	682a      	ldr	r2, [r5, #0]
10003550:	2a00      	cmp	r2, #0
10003552:	d0fc      	beq.n	1000354e <hardware_alarm_irq_handler+0x1e>
    __asm volatile ("dmb");
10003554:	f3bf 8f5f 	dmb	sy
    hardware_alarm_callback_t callback = NULL;

    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
    uint32_t save = spin_lock_blocking(lock);
    // Clear the timer IRQ (inside lock, because we check whether we have handled the IRQ yet in alarm_set by looking at the interrupt status
    timer_hw->intr = 1u << alarm_num;
10003558:	2201      	movs	r2, #1
1000355a:	0011      	movs	r1, r2
1000355c:	4081      	lsls	r1, r0
1000355e:	4c1d      	ldr	r4, [pc, #116]	; (100035d4 <hardware_alarm_irq_handler+0xa4>)
10003560:	4688      	mov	r8, r1
10003562:	6361      	str	r1, [r4, #52]	; 0x34

    // make sure the IRQ is still valid
    if (timer_callbacks_pending & (1u << alarm_num)) {
10003564:	491c      	ldr	r1, [pc, #112]	; (100035d8 <hardware_alarm_irq_handler+0xa8>)
10003566:	0017      	movs	r7, r2
10003568:	780e      	ldrb	r6, [r1, #0]
1000356a:	468a      	mov	sl, r1
1000356c:	0031      	movs	r1, r6
1000356e:	40c1      	lsrs	r1, r0
10003570:	400f      	ands	r7, r1
10003572:	420a      	tst	r2, r1
10003574:	d109      	bne.n	1000358a <hardware_alarm_irq_handler+0x5a>
10003576:	f3bf 8f5f 	dmb	sy
    *lock = 0;
1000357a:	602f      	str	r7, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000357c:	f38c 8810 	msr	PRIMASK, ip
    spin_unlock(lock, save);

    if (callback) {
        callback(alarm_num);
    }
}
10003580:	bce0      	pop	{r5, r6, r7}
10003582:	46ba      	mov	sl, r7
10003584:	46b1      	mov	r9, r6
10003586:	46a8      	mov	r8, r5
10003588:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (timer_hw->timerawh >= target_hi[alarm_num]) {
1000358a:	4914      	ldr	r1, [pc, #80]	; (100035dc <hardware_alarm_irq_handler+0xac>)
1000358c:	0082      	lsls	r2, r0, #2
1000358e:	6a64      	ldr	r4, [r4, #36]	; 0x24
10003590:	5851      	ldr	r1, [r2, r1]
10003592:	428c      	cmp	r4, r1
10003594:	d30f      	bcc.n	100035b6 <hardware_alarm_irq_handler+0x86>
            callback = alarm_callbacks[alarm_num];
10003596:	4b12      	ldr	r3, [pc, #72]	; (100035e0 <hardware_alarm_irq_handler+0xb0>)
10003598:	58d2      	ldr	r2, [r2, r3]
            timer_callbacks_pending &= ~(1u << alarm_num);
1000359a:	4643      	mov	r3, r8
1000359c:	439e      	bics	r6, r3
1000359e:	4653      	mov	r3, sl
100035a0:	701e      	strb	r6, [r3, #0]
    __asm volatile ("dmb");
100035a2:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100035a6:	2300      	movs	r3, #0
100035a8:	602b      	str	r3, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100035aa:	f38c 8810 	msr	PRIMASK, ip
    if (callback) {
100035ae:	2a00      	cmp	r2, #0
100035b0:	d0e6      	beq.n	10003580 <hardware_alarm_irq_handler+0x50>
        callback(alarm_num);
100035b2:	4790      	blx	r2
}
100035b4:	e7e4      	b.n	10003580 <hardware_alarm_irq_handler+0x50>
            timer_hw->alarm[alarm_num] = timer_hw->alarm[alarm_num]; // re-arm the timer
100035b6:	4a0b      	ldr	r2, [pc, #44]	; (100035e4 <hardware_alarm_irq_handler+0xb4>)
100035b8:	009b      	lsls	r3, r3, #2
100035ba:	4690      	mov	r8, r2
100035bc:	4443      	add	r3, r8
100035be:	681a      	ldr	r2, [r3, #0]
100035c0:	601a      	str	r2, [r3, #0]
    __asm volatile ("dmb");
100035c2:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100035c6:	2300      	movs	r3, #0
100035c8:	602b      	str	r3, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100035ca:	f38c 8810 	msr	PRIMASK, ip
    if (callback) {
100035ce:	e7d7      	b.n	10003580 <hardware_alarm_irq_handler+0x50>
100035d0:	d0000128 	.word	0xd0000128
100035d4:	40054000 	.word	0x40054000
100035d8:	2003e347 	.word	0x2003e347
100035dc:	2003e32c 	.word	0x2003e32c
100035e0:	2003db08 	.word	0x2003db08
100035e4:	40053fd0 	.word	0x40053fd0

100035e8 <hardware_alarm_claim>:
void hardware_alarm_claim(uint alarm_num) {
100035e8:	b510      	push	{r4, lr}
100035ea:	0001      	movs	r1, r0
    hw_claim_or_assert(&claimed, alarm_num, "Hardware alarm %d already claimed");
100035ec:	4a02      	ldr	r2, [pc, #8]	; (100035f8 <hardware_alarm_claim+0x10>)
100035ee:	4803      	ldr	r0, [pc, #12]	; (100035fc <hardware_alarm_claim+0x14>)
100035f0:	f7fd fe4e 	bl	10001290 <hw_claim_or_assert>
}
100035f4:	bd10      	pop	{r4, pc}
100035f6:	46c0      	nop			; (mov r8, r8)
100035f8:	1000a4a4 	.word	0x1000a4a4
100035fc:	2003e345 	.word	0x2003e345

10003600 <time_us_64>:
    uint32_t hi = timer_hw->timerawh;
10003600:	4b03      	ldr	r3, [pc, #12]	; (10003610 <time_us_64+0x10>)
10003602:	6a59      	ldr	r1, [r3, #36]	; 0x24
        lo = timer_hw->timerawl;
10003604:	000a      	movs	r2, r1
10003606:	6a98      	ldr	r0, [r3, #40]	; 0x28
        uint32_t next_hi = timer_hw->timerawh;
10003608:	6a59      	ldr	r1, [r3, #36]	; 0x24
        if (hi == next_hi) break;
1000360a:	428a      	cmp	r2, r1
1000360c:	d1fa      	bne.n	10003604 <time_us_64+0x4>
}
1000360e:	4770      	bx	lr
10003610:	40054000 	.word	0x40054000

10003614 <busy_wait_until>:
    uint32_t hi = timer_hw->timerawh;
10003614:	4a06      	ldr	r2, [pc, #24]	; (10003630 <busy_wait_until+0x1c>)
10003616:	6a53      	ldr	r3, [r2, #36]	; 0x24
    while (hi < hi_target) {
10003618:	4299      	cmp	r1, r3
1000361a:	d8fc      	bhi.n	10003616 <busy_wait_until+0x2>
    while (hi == hi_target && timer_hw->timerawl < (uint32_t) target) {
1000361c:	d107      	bne.n	1000362e <busy_wait_until+0x1a>
1000361e:	4b04      	ldr	r3, [pc, #16]	; (10003630 <busy_wait_until+0x1c>)
10003620:	e002      	b.n	10003628 <busy_wait_until+0x14>
        hi = timer_hw->timerawh;
10003622:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    while (hi == hi_target && timer_hw->timerawl < (uint32_t) target) {
10003624:	4291      	cmp	r1, r2
10003626:	d102      	bne.n	1000362e <busy_wait_until+0x1a>
10003628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
1000362a:	4282      	cmp	r2, r0
1000362c:	d3f9      	bcc.n	10003622 <busy_wait_until+0xe>
}
1000362e:	4770      	bx	lr
10003630:	40054000 	.word	0x40054000

10003634 <hardware_alarm_set_callback>:

void hardware_alarm_set_callback(uint alarm_num, hardware_alarm_callback_t callback) {
10003634:	b570      	push	{r4, r5, r6, lr}
10003636:	0004      	movs	r4, r0
10003638:	000d      	movs	r5, r1
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
1000363a:	f3ef 8610 	mrs	r6, PRIMASK
    __asm volatile ("cpsid i");
1000363e:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10003640:	4a1a      	ldr	r2, [pc, #104]	; (100036ac <hardware_alarm_set_callback+0x78>)
10003642:	6813      	ldr	r3, [r2, #0]
10003644:	2b00      	cmp	r3, #0
10003646:	d0fc      	beq.n	10003642 <hardware_alarm_set_callback+0xe>
    __asm volatile ("dmb");
10003648:	f3bf 8f5f 	dmb	sy
    //  should disallow IRQ handlers on both cores
    check_hardware_alarm_num_param(alarm_num);
    uint irq_num = harware_alarm_irq_number(alarm_num);
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
    uint32_t save = spin_lock_blocking(lock);
    if (callback) {
1000364c:	2d00      	cmp	r5, #0
1000364e:	d01b      	beq.n	10003688 <hardware_alarm_set_callback+0x54>
        if (hardware_alarm_irq_handler != irq_get_vtable_handler(irq_num)) {
10003650:	0020      	movs	r0, r4
10003652:	f7fe fa49 	bl	10001ae8 <irq_get_vtable_handler>
10003656:	4916      	ldr	r1, [pc, #88]	; (100036b0 <hardware_alarm_set_callback+0x7c>)
10003658:	4281      	cmp	r1, r0
1000365a:	d00a      	beq.n	10003672 <hardware_alarm_set_callback+0x3e>
            // note that set_exclusive will silently allow you to set the handler to the same thing
            // since it is idempotent, which means we don't need to worry about locking ourselves
            irq_set_exclusive_handler(irq_num, hardware_alarm_irq_handler);
1000365c:	0020      	movs	r0, r4
1000365e:	f7fe fa4b 	bl	10001af8 <irq_set_exclusive_handler>
            irq_set_enabled(irq_num, true);
10003662:	2101      	movs	r1, #1
10003664:	0020      	movs	r0, r4
10003666:	f7fe fa25 	bl	10001ab4 <irq_set_enabled>
            // Enable interrupt in block and at processor
            hw_set_bits(&timer_hw->inte, 1u << alarm_num);
1000366a:	2301      	movs	r3, #1
1000366c:	40a3      	lsls	r3, r4
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000366e:	4a11      	ldr	r2, [pc, #68]	; (100036b4 <hardware_alarm_set_callback+0x80>)
10003670:	6013      	str	r3, [r2, #0]
        }
        alarm_callbacks[alarm_num] = callback;
10003672:	4b11      	ldr	r3, [pc, #68]	; (100036b8 <hardware_alarm_set_callback+0x84>)
10003674:	00a4      	lsls	r4, r4, #2
10003676:	50e5      	str	r5, [r4, r3]
10003678:	f3bf 8f5f 	dmb	sy
    *lock = 0;
1000367c:	2200      	movs	r2, #0
1000367e:	4b0b      	ldr	r3, [pc, #44]	; (100036ac <hardware_alarm_set_callback+0x78>)
10003680:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10003682:	f386 8810 	msr	PRIMASK, r6
        timer_callbacks_pending &= ~(1u << alarm_num);
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
        irq_set_enabled(irq_num, false);
    }
    spin_unlock(lock, save);
}
10003686:	bd70      	pop	{r4, r5, r6, pc}
        alarm_callbacks[alarm_num] = NULL;
10003688:	4b0b      	ldr	r3, [pc, #44]	; (100036b8 <hardware_alarm_set_callback+0x84>)
1000368a:	00a2      	lsls	r2, r4, #2
1000368c:	50d5      	str	r5, [r2, r3]
        timer_callbacks_pending &= ~(1u << alarm_num);
1000368e:	2201      	movs	r2, #1
10003690:	40a2      	lsls	r2, r4
10003692:	490a      	ldr	r1, [pc, #40]	; (100036bc <hardware_alarm_set_callback+0x88>)
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
10003694:	0020      	movs	r0, r4
        timer_callbacks_pending &= ~(1u << alarm_num);
10003696:	780b      	ldrb	r3, [r1, #0]
10003698:	4393      	bics	r3, r2
1000369a:	700b      	strb	r3, [r1, #0]
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
1000369c:	4904      	ldr	r1, [pc, #16]	; (100036b0 <hardware_alarm_set_callback+0x7c>)
1000369e:	f7fe fa55 	bl	10001b4c <irq_remove_handler>
        irq_set_enabled(irq_num, false);
100036a2:	2100      	movs	r1, #0
100036a4:	0020      	movs	r0, r4
100036a6:	f7fe fa05 	bl	10001ab4 <irq_set_enabled>
100036aa:	e7e5      	b.n	10003678 <hardware_alarm_set_callback+0x44>
100036ac:	d0000128 	.word	0xd0000128
100036b0:	10003531 	.word	0x10003531
100036b4:	40056038 	.word	0x40056038
100036b8:	2003db08 	.word	0x2003db08
100036bc:	2003e347 	.word	0x2003e347

100036c0 <hardware_alarm_set_target>:

bool hardware_alarm_set_target(uint alarm_num, absolute_time_t target) {
100036c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100036c2:	46ce      	mov	lr, r9
100036c4:	4647      	mov	r7, r8
100036c6:	b580      	push	{r7, lr}
    uint32_t hi = timer_hw->timerawh;
100036c8:	4c2a      	ldr	r4, [pc, #168]	; (10003774 <hardware_alarm_set_target+0xb4>)
100036ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
        lo = timer_hw->timerawl;
100036cc:	000d      	movs	r5, r1
100036ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        uint32_t next_hi = timer_hw->timerawh;
100036d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
        if (hi == next_hi) break;
100036d2:	42a9      	cmp	r1, r5
100036d4:	d1fa      	bne.n	100036cc <hardware_alarm_set_target+0xc>
    bool missed;
    uint64_t now = time_us_64();
    uint64_t t = to_us_since_boot(target);
    if (now >= t) {
100036d6:	428b      	cmp	r3, r1
100036d8:	d807      	bhi.n	100036ea <hardware_alarm_set_target+0x2a>
100036da:	d004      	beq.n	100036e6 <hardware_alarm_set_target+0x26>
        missed = true;
100036dc:	2001      	movs	r0, #1
            }
        }
        spin_unlock(lock, save);
    }
    return missed;
}
100036de:	bcc0      	pop	{r6, r7}
100036e0:	46b9      	mov	r9, r7
100036e2:	46b0      	mov	r8, r6
100036e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (now >= t) {
100036e6:	42b2      	cmp	r2, r6
100036e8:	d9f8      	bls.n	100036dc <hardware_alarm_set_target+0x1c>
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100036ea:	f3ef 8910 	mrs	r9, PRIMASK
    __asm volatile ("cpsid i");
100036ee:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100036f0:	4c21      	ldr	r4, [pc, #132]	; (10003778 <hardware_alarm_set_target+0xb8>)
100036f2:	6821      	ldr	r1, [r4, #0]
100036f4:	2900      	cmp	r1, #0
100036f6:	d0fc      	beq.n	100036f2 <hardware_alarm_set_target+0x32>
    __asm volatile ("dmb");
100036f8:	f3bf 8f5f 	dmb	sy
        timer_hw->intr = 1u << alarm_num;
100036fc:	2501      	movs	r5, #1
100036fe:	4085      	lsls	r5, r0
10003700:	4c1c      	ldr	r4, [pc, #112]	; (10003774 <hardware_alarm_set_target+0xb4>)
        timer_callbacks_pending |= 1u << alarm_num;
10003702:	4f1e      	ldr	r7, [pc, #120]	; (1000377c <hardware_alarm_set_target+0xbc>)
        timer_hw->intr = 1u << alarm_num;
10003704:	6365      	str	r5, [r4, #52]	; 0x34
        timer_callbacks_pending |= 1u << alarm_num;
10003706:	b2e9      	uxtb	r1, r5
10003708:	4688      	mov	r8, r1
1000370a:	7839      	ldrb	r1, [r7, #0]
1000370c:	468c      	mov	ip, r1
1000370e:	4641      	mov	r1, r8
10003710:	4666      	mov	r6, ip
10003712:	4331      	orrs	r1, r6
10003714:	7039      	strb	r1, [r7, #0]
        timer_hw->alarm[alarm_num] = (uint32_t) t;
10003716:	1d01      	adds	r1, r0, #4
10003718:	0089      	lsls	r1, r1, #2
1000371a:	510a      	str	r2, [r1, r4]
        target_hi[alarm_num] = t >> 32u;
1000371c:	4918      	ldr	r1, [pc, #96]	; (10003780 <hardware_alarm_set_target+0xc0>)
1000371e:	0080      	lsls	r0, r0, #2
10003720:	5043      	str	r3, [r0, r1]
        if (!(timer_hw->armed & 1u << alarm_num)) {
10003722:	6a21      	ldr	r1, [r4, #32]
        missed = false;
10003724:	2000      	movs	r0, #0
        if (!(timer_hw->armed & 1u << alarm_num)) {
10003726:	4229      	tst	r1, r5
10003728:	d00b      	beq.n	10003742 <hardware_alarm_set_target+0x82>
    uint32_t hi = timer_hw->timerawh;
1000372a:	6a61      	ldr	r1, [r4, #36]	; 0x24
        lo = timer_hw->timerawl;
1000372c:	0008      	movs	r0, r1
1000372e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        uint32_t next_hi = timer_hw->timerawh;
10003730:	6a61      	ldr	r1, [r4, #36]	; 0x24
        if (hi == next_hi) break;
10003732:	4281      	cmp	r1, r0
10003734:	d1fa      	bne.n	1000372c <hardware_alarm_set_target+0x6c>
            if (time_us_64() >= t) {
10003736:	428b      	cmp	r3, r1
10003738:	d802      	bhi.n	10003740 <hardware_alarm_set_target+0x80>
1000373a:	d10a      	bne.n	10003752 <hardware_alarm_set_target+0x92>
1000373c:	42b2      	cmp	r2, r6
1000373e:	d908      	bls.n	10003752 <hardware_alarm_set_target+0x92>
        missed = false;
10003740:	2000      	movs	r0, #0
10003742:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10003746:	2200      	movs	r2, #0
10003748:	4b0b      	ldr	r3, [pc, #44]	; (10003778 <hardware_alarm_set_target+0xb8>)
1000374a:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000374c:	f389 8810 	msr	PRIMASK, r9
}
10003750:	e7c5      	b.n	100036de <hardware_alarm_set_target+0x1e>
                timer_hw->armed = 1u << alarm_num;
10003752:	4b08      	ldr	r3, [pc, #32]	; (10003774 <hardware_alarm_set_target+0xb4>)
                timer_callbacks_pending &= ~(1u << alarm_num);
10003754:	4642      	mov	r2, r8
                timer_hw->armed = 1u << alarm_num;
10003756:	621d      	str	r5, [r3, #32]
                timer_hw->intr = 1u << alarm_num; // clear the IRQ too
10003758:	635d      	str	r5, [r3, #52]	; 0x34
                timer_callbacks_pending &= ~(1u << alarm_num);
1000375a:	4663      	mov	r3, ip
1000375c:	4393      	bics	r3, r2
                missed = true;
1000375e:	2001      	movs	r0, #1
                timer_callbacks_pending &= ~(1u << alarm_num);
10003760:	703b      	strb	r3, [r7, #0]
    __asm volatile ("dmb");
10003762:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10003766:	2200      	movs	r2, #0
10003768:	4b03      	ldr	r3, [pc, #12]	; (10003778 <hardware_alarm_set_target+0xb8>)
1000376a:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000376c:	f389 8810 	msr	PRIMASK, r9
10003770:	e7b5      	b.n	100036de <hardware_alarm_set_target+0x1e>
10003772:	46c0      	nop			; (mov r8, r8)
10003774:	40054000 	.word	0x40054000
10003778:	d0000128 	.word	0xd0000128
1000377c:	2003e347 	.word	0x2003e347
10003780:	2003e32c 	.word	0x2003e32c

10003784 <hardware_alarm_cancel>:
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10003784:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10003788:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000378a:	490a      	ldr	r1, [pc, #40]	; (100037b4 <hardware_alarm_cancel+0x30>)
1000378c:	680b      	ldr	r3, [r1, #0]
1000378e:	2b00      	cmp	r3, #0
10003790:	d0fc      	beq.n	1000378c <hardware_alarm_cancel+0x8>
    __asm volatile ("dmb");
10003792:	f3bf 8f5f 	dmb	sy
void hardware_alarm_cancel(uint alarm_num) {
    check_hardware_alarm_num_param(alarm_num);

    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
    uint32_t save = spin_lock_blocking(lock);
    timer_hw->armed = 1u << alarm_num;
10003796:	2301      	movs	r3, #1
10003798:	4083      	lsls	r3, r0
1000379a:	4a07      	ldr	r2, [pc, #28]	; (100037b8 <hardware_alarm_cancel+0x34>)
    timer_callbacks_pending &= ~(1u << alarm_num);
1000379c:	4807      	ldr	r0, [pc, #28]	; (100037bc <hardware_alarm_cancel+0x38>)
    timer_hw->armed = 1u << alarm_num;
1000379e:	6213      	str	r3, [r2, #32]
    timer_callbacks_pending &= ~(1u << alarm_num);
100037a0:	7802      	ldrb	r2, [r0, #0]
100037a2:	439a      	bics	r2, r3
100037a4:	7002      	strb	r2, [r0, #0]
100037a6:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100037aa:	2300      	movs	r3, #0
100037ac:	600b      	str	r3, [r1, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100037ae:	f38c 8810 	msr	PRIMASK, ip
    spin_unlock(lock, save);
}
100037b2:	4770      	bx	lr
100037b4:	d0000128 	.word	0xd0000128
100037b8:	40054000 	.word	0x40054000
100037bc:	2003e347 	.word	0x2003e347

100037c0 <_retrieve_unique_id_on_boot>:

static_assert(PICO_UNIQUE_BOARD_ID_SIZE_BYTES == FLASH_UNIQUE_ID_SIZE_BYTES, "Board ID size must match flash ID size");

static pico_unique_board_id_t retrieved_id;

static void __attribute__((constructor)) _retrieve_unique_id_on_boot() {
100037c0:	b510      	push	{r4, lr}
    // build. Since this constructor is pre-main it would be annoying to
    // debug, so just produce something well-defined and obviously wrong.
    for (int i = 0; i < PICO_UNIQUE_BOARD_ID_SIZE_BYTES; i++)
        retrieved_id.id[i] = 0xee;
#else
    flash_get_unique_id(retrieved_id.id);
100037c2:	4802      	ldr	r0, [pc, #8]	; (100037cc <_retrieve_unique_id_on_boot+0xc>)
100037c4:	f7fe f818 	bl	100017f8 <flash_get_unique_id>
#endif
}
100037c8:	bd10      	pop	{r4, pc}
100037ca:	46c0      	nop			; (mov r8, r8)
100037cc:	2003e318 	.word	0x2003e318

100037d0 <watchdog_start_tick>:
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
100037d0:	2380      	movs	r3, #128	; 0x80
100037d2:	4a02      	ldr	r2, [pc, #8]	; (100037dc <watchdog_start_tick+0xc>)
100037d4:	009b      	lsls	r3, r3, #2
100037d6:	4303      	orrs	r3, r0
100037d8:	62d3      	str	r3, [r2, #44]	; 0x2c
}
100037da:	4770      	bx	lr
100037dc:	40058000 	.word	0x40058000

100037e0 <xosc_init>:
#include "hardware/structs/xosc.h"

void xosc_init(void) {
    // Assumes 1-15 MHz input
    assert(XOSC_MHZ <= 15);
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
100037e0:	23aa      	movs	r3, #170	; 0xaa
100037e2:	4a06      	ldr	r2, [pc, #24]	; (100037fc <xosc_init+0x1c>)
100037e4:	011b      	lsls	r3, r3, #4
100037e6:	6013      	str	r3, [r2, #0]

    // Set xosc startup delay
    uint32_t startup_delay = (((12 * MHZ) / 1000) + 128) / 256;
    xosc_hw->startup = startup_delay;
100037e8:	232f      	movs	r3, #47	; 0x2f
100037ea:	4905      	ldr	r1, [pc, #20]	; (10003800 <xosc_init+0x20>)
100037ec:	60d3      	str	r3, [r2, #12]
100037ee:	4b05      	ldr	r3, [pc, #20]	; (10003804 <xosc_init+0x24>)
100037f0:	6019      	str	r1, [r3, #0]

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
100037f2:	6853      	ldr	r3, [r2, #4]
100037f4:	2b00      	cmp	r3, #0
100037f6:	dafc      	bge.n	100037f2 <xosc_init+0x12>
}
100037f8:	4770      	bx	lr
100037fa:	46c0      	nop			; (mov r8, r8)
100037fc:	40024000 	.word	0x40024000
10003800:	00fab000 	.word	0x00fab000
10003804:	40026000 	.word	0x40026000

10003808 <tud_cdc_n_connected>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_cdc_n_connected(uint8_t itf)
{
10003808:	b510      	push	{r4, lr}
1000380a:	0004      	movs	r4, r0
bool tud_suspended(void);

// Check if device is ready to transfer
static inline bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
1000380c:	f000 fc9c 	bl	10004148 <tud_mounted>
10003810:	2800      	cmp	r0, #0
10003812:	d101      	bne.n	10003818 <tud_cdc_n_connected+0x10>
10003814:	2000      	movs	r0, #0
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
}
10003816:	bd10      	pop	{r4, pc}
10003818:	f000 fc9e 	bl	10004158 <tud_suspended>
1000381c:	2800      	cmp	r0, #0
1000381e:	d1f9      	bne.n	10003814 <tud_cdc_n_connected+0xc>
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
10003820:	0060      	lsls	r0, r4, #1
10003822:	1904      	adds	r4, r0, r4
10003824:	0123      	lsls	r3, r4, #4
10003826:	4804      	ldr	r0, [pc, #16]	; (10003838 <tud_cdc_n_connected+0x30>)
10003828:	1b1c      	subs	r4, r3, r4
1000382a:	0124      	lsls	r4, r4, #4
1000382c:	1904      	adds	r4, r0, r4
1000382e:	2001      	movs	r0, #1
10003830:	7923      	ldrb	r3, [r4, #4]
10003832:	4018      	ands	r0, r3
10003834:	e7ef      	b.n	10003816 <tud_cdc_n_connected+0xe>
10003836:	46c0      	nop			; (mov r8, r8)
10003838:	2003d6d4 	.word	0x2003d6d4

1000383c <tud_cdc_n_available>:
//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
1000383c:	0043      	lsls	r3, r0, #1
1000383e:	181b      	adds	r3, r3, r0
{
10003840:	b510      	push	{r4, lr}
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
10003842:	0118      	lsls	r0, r3, #4
10003844:	1ac0      	subs	r0, r0, r3
10003846:	0100      	lsls	r0, r0, #4
10003848:	4b02      	ldr	r3, [pc, #8]	; (10003854 <tud_cdc_n_available+0x18>)
1000384a:	3010      	adds	r0, #16
1000384c:	18c0      	adds	r0, r0, r3
1000384e:	f000 fab9 	bl	10003dc4 <tu_fifo_count>
}
10003852:	bd10      	pop	{r4, pc}
10003854:	2003d6d4 	.word	0x2003d6d4

10003858 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
10003858:	b5f0      	push	{r4, r5, r6, r7, lr}
1000385a:	0044      	lsls	r4, r0, #1
1000385c:	1820      	adds	r0, r4, r0
1000385e:	0104      	lsls	r4, r0, #4
10003860:	1a24      	subs	r4, r4, r0
10003862:	0124      	lsls	r4, r4, #4
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, bufsize);
10003864:	0026      	movs	r6, r4
{
10003866:	46c6      	mov	lr, r8
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, bufsize);
10003868:	4f17      	ldr	r7, [pc, #92]	; (100038c8 <tud_cdc_n_read+0x70>)
1000386a:	3610      	adds	r6, #16
1000386c:	19f6      	adds	r6, r6, r7
{
1000386e:	b500      	push	{lr}
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, bufsize);
10003870:	0030      	movs	r0, r6
10003872:	b292      	uxth	r2, r2
10003874:	f000 fb14 	bl	10003ea0 <tu_fifo_read_n>
10003878:	0005      	movs	r5, r0
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
1000387a:	0030      	movs	r0, r6
1000387c:	f000 faae 	bl	10003ddc <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf), );
10003880:	283f      	cmp	r0, #63	; 0x3f
10003882:	d803      	bhi.n	1000388c <tud_cdc_n_read+0x34>
  _prep_out_transaction(p_cdc);
  return num_read;
}
10003884:	0028      	movs	r0, r5
10003886:	bc80      	pop	{r7}
10003888:	46b8      	mov	r8, r7
1000388a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out), );
1000388c:	193b      	adds	r3, r7, r4
1000388e:	2000      	movs	r0, #0
10003890:	78d9      	ldrb	r1, [r3, #3]
10003892:	4698      	mov	r8, r3
10003894:	f001 f9c6 	bl	10004c24 <usbd_edpt_claim>
10003898:	2800      	cmp	r0, #0
1000389a:	d0f3      	beq.n	10003884 <tud_cdc_n_read+0x2c>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
1000389c:	0030      	movs	r0, r6
1000389e:	f000 fa9d 	bl	10003ddc <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )  {
100038a2:	283f      	cmp	r0, #63	; 0x3f
100038a4:	d90a      	bls.n	100038bc <tud_cdc_n_read+0x64>
    usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
100038a6:	2394      	movs	r3, #148	; 0x94
100038a8:	009b      	lsls	r3, r3, #2
100038aa:	18e2      	adds	r2, r4, r3
100038ac:	4643      	mov	r3, r8
100038ae:	19d2      	adds	r2, r2, r7
100038b0:	78d9      	ldrb	r1, [r3, #3]
100038b2:	2000      	movs	r0, #0
100038b4:	2340      	movs	r3, #64	; 0x40
100038b6:	f001 fa0d 	bl	10004cd4 <usbd_edpt_xfer>
100038ba:	e7e3      	b.n	10003884 <tud_cdc_n_read+0x2c>
    usbd_edpt_release(rhport, p_cdc->ep_out);
100038bc:	4643      	mov	r3, r8
100038be:	2000      	movs	r0, #0
100038c0:	78d9      	ldrb	r1, [r3, #3]
100038c2:	f001 f9e1 	bl	10004c88 <usbd_edpt_release>
  return num_read;
100038c6:	e7dd      	b.n	10003884 <tud_cdc_n_read+0x2c>
100038c8:	2003d6d4 	.word	0x2003d6d4

100038cc <tud_cdc_n_write_flush>:

  return ret;
}

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
100038cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100038ce:	4647      	mov	r7, r8
100038d0:	46ce      	mov	lr, r9
100038d2:	b580      	push	{r7, lr}
100038d4:	0047      	lsls	r7, r0, #1
100038d6:	183b      	adds	r3, r7, r0
100038d8:	011c      	lsls	r4, r3, #4
100038da:	1ae4      	subs	r4, r4, r3
100038dc:	0124      	lsls	r4, r4, #4
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];

  // No data to send
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
100038de:	4b23      	ldr	r3, [pc, #140]	; (1000396c <tud_cdc_n_write_flush+0xa0>)
100038e0:	0026      	movs	r6, r4
100038e2:	4698      	mov	r8, r3
100038e4:	3628      	adds	r6, #40	; 0x28
100038e6:	4446      	add	r6, r8
{
100038e8:	0005      	movs	r5, r0
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
100038ea:	0030      	movs	r0, r6
100038ec:	f000 fa6a 	bl	10003dc4 <tu_fifo_count>
100038f0:	2800      	cmp	r0, #0
100038f2:	d104      	bne.n	100038fe <tud_cdc_n_write_flush+0x32>
  }else
  {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
    return 0;
100038f4:	2000      	movs	r0, #0
  }
}
100038f6:	bcc0      	pop	{r6, r7}
100038f8:	46b9      	mov	r9, r7
100038fa:	46b0      	mov	r8, r6
100038fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
100038fe:	46a1      	mov	r9, r4
10003900:	44c1      	add	r9, r8
10003902:	464b      	mov	r3, r9
10003904:	2000      	movs	r0, #0
10003906:	7899      	ldrb	r1, [r3, #2]
10003908:	f001 f98c 	bl	10004c24 <usbd_edpt_claim>
1000390c:	2800      	cmp	r0, #0
1000390e:	d0f1      	beq.n	100038f4 <tud_cdc_n_write_flush+0x28>
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
10003910:	23a4      	movs	r3, #164	; 0xa4
10003912:	009b      	lsls	r3, r3, #2
10003914:	469c      	mov	ip, r3
10003916:	4464      	add	r4, ip
10003918:	4444      	add	r4, r8
1000391a:	0030      	movs	r0, r6
1000391c:	2240      	movs	r2, #64	; 0x40
1000391e:	0021      	movs	r1, r4
10003920:	f000 fabe 	bl	10003ea0 <tu_fifo_read_n>
10003924:	1e06      	subs	r6, r0, #0
  if ( count && tud_cdc_n_connected(itf) )
10003926:	d016      	beq.n	10003956 <tud_cdc_n_write_flush+0x8a>
10003928:	f000 fc0e 	bl	10004148 <tud_mounted>
1000392c:	2800      	cmp	r0, #0
1000392e:	d012      	beq.n	10003956 <tud_cdc_n_write_flush+0x8a>
10003930:	f000 fc12 	bl	10004158 <tud_suspended>
10003934:	2800      	cmp	r0, #0
10003936:	d10e      	bne.n	10003956 <tud_cdc_n_write_flush+0x8a>
10003938:	464b      	mov	r3, r9
1000393a:	791b      	ldrb	r3, [r3, #4]
1000393c:	07db      	lsls	r3, r3, #31
1000393e:	d50a      	bpl.n	10003956 <tud_cdc_n_write_flush+0x8a>
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
10003940:	464b      	mov	r3, r9
10003942:	0022      	movs	r2, r4
10003944:	7899      	ldrb	r1, [r3, #2]
10003946:	2000      	movs	r0, #0
10003948:	0033      	movs	r3, r6
1000394a:	f001 f9c3 	bl	10004cd4 <usbd_edpt_xfer>
1000394e:	2800      	cmp	r0, #0
10003950:	d0d0      	beq.n	100038f4 <tud_cdc_n_write_flush+0x28>
    return count;
10003952:	0030      	movs	r0, r6
10003954:	e7cf      	b.n	100038f6 <tud_cdc_n_write_flush+0x2a>
    usbd_edpt_release(rhport, p_cdc->ep_in);
10003956:	197d      	adds	r5, r7, r5
10003958:	012b      	lsls	r3, r5, #4
1000395a:	1b5d      	subs	r5, r3, r5
1000395c:	012d      	lsls	r5, r5, #4
1000395e:	4445      	add	r5, r8
10003960:	78a9      	ldrb	r1, [r5, #2]
10003962:	2000      	movs	r0, #0
10003964:	f001 f990 	bl	10004c88 <usbd_edpt_release>
10003968:	e7c4      	b.n	100038f4 <tud_cdc_n_write_flush+0x28>
1000396a:	46c0      	nop			; (mov r8, r8)
1000396c:	2003d6d4 	.word	0x2003d6d4

10003970 <tud_cdc_n_write>:
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, bufsize);
10003970:	0043      	lsls	r3, r0, #1
10003972:	181b      	adds	r3, r3, r0
{
10003974:	b570      	push	{r4, r5, r6, lr}
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, bufsize);
10003976:	011c      	lsls	r4, r3, #4
10003978:	1ae4      	subs	r4, r4, r3
1000397a:	0124      	lsls	r4, r4, #4
1000397c:	4b09      	ldr	r3, [pc, #36]	; (100039a4 <tud_cdc_n_write+0x34>)
1000397e:	3428      	adds	r4, #40	; 0x28
10003980:	18e4      	adds	r4, r4, r3
{
10003982:	0005      	movs	r5, r0
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, bufsize);
10003984:	b292      	uxth	r2, r2
10003986:	0020      	movs	r0, r4
10003988:	f000 fb4a 	bl	10004020 <tu_fifo_write_n>
1000398c:	0006      	movs	r6, r0
  if ( tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE )
1000398e:	0020      	movs	r0, r4
10003990:	f000 fa18 	bl	10003dc4 <tu_fifo_count>
10003994:	283f      	cmp	r0, #63	; 0x3f
10003996:	d801      	bhi.n	1000399c <tud_cdc_n_write+0x2c>
}
10003998:	0030      	movs	r0, r6
1000399a:	bd70      	pop	{r4, r5, r6, pc}
    tud_cdc_n_write_flush(itf);
1000399c:	0028      	movs	r0, r5
1000399e:	f7ff ff95 	bl	100038cc <tud_cdc_n_write_flush>
100039a2:	e7f9      	b.n	10003998 <tud_cdc_n_write+0x28>
100039a4:	2003d6d4 	.word	0x2003d6d4

100039a8 <tud_cdc_n_write_available>:

uint32_t tud_cdc_n_write_available (uint8_t itf)
{
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
100039a8:	0043      	lsls	r3, r0, #1
100039aa:	181b      	adds	r3, r3, r0
{
100039ac:	b510      	push	{r4, lr}
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
100039ae:	0118      	lsls	r0, r3, #4
100039b0:	1ac0      	subs	r0, r0, r3
100039b2:	0100      	lsls	r0, r0, #4
100039b4:	4b02      	ldr	r3, [pc, #8]	; (100039c0 <tud_cdc_n_write_available+0x18>)
100039b6:	3028      	adds	r0, #40	; 0x28
100039b8:	18c0      	adds	r0, r0, r3
100039ba:	f000 fa0f 	bl	10003ddc <tu_fifo_remaining>
}
100039be:	bd10      	pop	{r4, pc}
100039c0:	2003d6d4 	.word	0x2003d6d4

100039c4 <cdcd_init>:
//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
100039c4:	22b4      	movs	r2, #180	; 0xb4
{
100039c6:	b570      	push	{r4, r5, r6, lr}
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
100039c8:	4c1a      	ldr	r4, [pc, #104]	; (10003a34 <cdcd_init+0x70>)
{
100039ca:	b082      	sub	sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
100039cc:	2100      	movs	r1, #0
100039ce:	0020      	movs	r0, r4
100039d0:	0092      	lsls	r2, r2, #2
100039d2:	f7fd fbef 	bl	100011b4 <__wrap_memset>

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];

    p_cdc->wanted_char = -1;
100039d6:	23ff      	movs	r3, #255	; 0xff
100039d8:	7163      	strb	r3, [r4, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate  = 115200;
100039da:	4b17      	ldr	r3, [pc, #92]	; (10003a38 <cdcd_init+0x74>)
    p_cdc->line_coding.stop_bits = 0;
    p_cdc->line_coding.parity    = 0;
    p_cdc->line_coding.data_bits = 8;

    // config fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
100039dc:	2580      	movs	r5, #128	; 0x80
    p_cdc->line_coding.bit_rate  = 115200;
100039de:	80e3      	strh	r3, [r4, #6]
100039e0:	2301      	movs	r3, #1
100039e2:	2600      	movs	r6, #0
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
100039e4:	0021      	movs	r1, r4
100039e6:	0020      	movs	r0, r4
    p_cdc->line_coding.bit_rate  = 115200;
100039e8:	8123      	strh	r3, [r4, #8]
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
100039ea:	006d      	lsls	r5, r5, #1
    p_cdc->line_coding.data_bits = 8;
100039ec:	3307      	adds	r3, #7
100039ee:	7323      	strb	r3, [r4, #12]
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
100039f0:	002a      	movs	r2, r5
100039f2:	3140      	adds	r1, #64	; 0x40
100039f4:	9600      	str	r6, [sp, #0]
100039f6:	3b07      	subs	r3, #7
100039f8:	3010      	adds	r0, #16
100039fa:	f000 f9a7 	bl	10003d4c <tu_fifo_config>
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, false);
100039fe:	0021      	movs	r1, r4
10003a00:	0020      	movs	r0, r4
10003a02:	3141      	adds	r1, #65	; 0x41
10003a04:	002a      	movs	r2, r5
10003a06:	31ff      	adds	r1, #255	; 0xff
10003a08:	2301      	movs	r3, #1
10003a0a:	9600      	str	r6, [sp, #0]
10003a0c:	3028      	adds	r0, #40	; 0x28
10003a0e:	f000 f99d 	bl	10003d4c <tu_fifo_config>
//--------------------------------------------------------------------+
typedef struct mutex osal_mutex_def_t, *osal_mutex_t;

static inline osal_mutex_t osal_mutex_create(osal_mutex_def_t* mdef)
{
    mutex_init(mdef);
10003a12:	2390      	movs	r3, #144	; 0x90
10003a14:	009b      	lsls	r3, r3, #2
10003a16:	18e5      	adds	r5, r4, r3
10003a18:	0028      	movs	r0, r5
10003a1a:	f7fe fa69 	bl	10001ef0 <mutex_init>
10003a1e:	2392      	movs	r3, #146	; 0x92
10003a20:	009b      	lsls	r3, r3, #2
bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable);

#if CFG_FIFO_MUTEX
static inline void tu_fifo_config_mutex(tu_fifo_t *f, tu_fifo_mutex_t mutex_hdl)
{
  f->mutex = mutex_hdl;
10003a22:	6265      	str	r5, [r4, #36]	; 0x24
10003a24:	18e5      	adds	r5, r4, r3
10003a26:	0028      	movs	r0, r5
10003a28:	f7fe fa62 	bl	10001ef0 <mutex_init>
10003a2c:	63e5      	str	r5, [r4, #60]	; 0x3c
#if CFG_FIFO_MUTEX
    tu_fifo_config_mutex(&p_cdc->rx_ff, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex));
#endif
  }
}
10003a2e:	b002      	add	sp, #8
10003a30:	bd70      	pop	{r4, r5, r6, pc}
10003a32:	46c0      	nop			; (mov r8, r8)
10003a34:	2003d6d4 	.word	0x2003d6d4
10003a38:	ffffc200 	.word	0xffffc200

10003a3c <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
10003a3c:	b510      	push	{r4, lr}
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
  {
    tu_memclr(&_cdcd_itf[i], ITF_MEM_RESET_SIZE);
10003a3e:	4c07      	ldr	r4, [pc, #28]	; (10003a5c <cdcd_reset+0x20>)
10003a40:	2205      	movs	r2, #5
10003a42:	2100      	movs	r1, #0
10003a44:	0020      	movs	r0, r4
10003a46:	f7fd fbb5 	bl	100011b4 <__wrap_memset>
    tu_fifo_clear(&_cdcd_itf[i].rx_ff);
10003a4a:	0020      	movs	r0, r4
10003a4c:	3010      	adds	r0, #16
10003a4e:	f000 fb65 	bl	1000411c <tu_fifo_clear>
    tu_fifo_clear(&_cdcd_itf[i].tx_ff);
10003a52:	0020      	movs	r0, r4
10003a54:	3028      	adds	r0, #40	; 0x28
10003a56:	f000 fb61 	bl	1000411c <tu_fifo_clear>
  }
}
10003a5a:	bd10      	pop	{r4, pc}
10003a5c:	2003d6d4 	.word	0x2003d6d4

10003a60 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
10003a60:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
10003a62:	794b      	ldrb	r3, [r1, #5]
{
10003a64:	0006      	movs	r6, r0
10003a66:	b083      	sub	sp, #12
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
10003a68:	2b02      	cmp	r3, #2
10003a6a:	d102      	bne.n	10003a72 <cdcd_open+0x12>
10003a6c:	798b      	ldrb	r3, [r1, #6]
10003a6e:	2b02      	cmp	r3, #2
10003a70:	d003      	beq.n	10003a7a <cdcd_open+0x1a>
10003a72:	2500      	movs	r5, #0

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);

  return drv_len;
}
10003a74:	0028      	movs	r0, r5
10003a76:	b003      	add	sp, #12
10003a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
static inline uint32_t tu_abs(int32_t value) { return (uint32_t)((value < 0) ? (-value) : value); }

/// inclusive range checking
static inline bool tu_within(uint32_t lower, uint32_t value, uint32_t upper)
{
  return (lower <= value) && (value <= upper);
10003a7a:	79cb      	ldrb	r3, [r1, #7]
10003a7c:	2b06      	cmp	r3, #6
10003a7e:	d8f8      	bhi.n	10003a72 <cdcd_open+0x12>
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
10003a80:	4f2f      	ldr	r7, [pc, #188]	; (10003b40 <cdcd_open+0xe0>)
10003a82:	78bb      	ldrb	r3, [r7, #2]
10003a84:	2b00      	cmp	r3, #0
10003a86:	d1f4      	bne.n	10003a72 <cdcd_open+0x12>
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
10003a88:	788b      	ldrb	r3, [r1, #2]
  uint16_t drv_len = sizeof(tusb_desc_interface_t);
10003a8a:	2509      	movs	r5, #9
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
10003a8c:	703b      	strb	r3, [r7, #0]
// Descriptor helper
//--------------------------------------------------------------------+
static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
  return desc8 + desc8[DESC_OFFSET_LEN];
10003a8e:	780c      	ldrb	r4, [r1, #0]
10003a90:	190c      	adds	r4, r1, r4
}

static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10003a92:	7863      	ldrb	r3, [r4, #1]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
10003a94:	2b24      	cmp	r3, #36	; 0x24
10003a96:	d10b      	bne.n	10003ab0 <cdcd_open+0x50>
10003a98:	2a08      	cmp	r2, #8
10003a9a:	d802      	bhi.n	10003aa2 <cdcd_open+0x42>
10003a9c:	e00f      	b.n	10003abe <cdcd_open+0x5e>
10003a9e:	42aa      	cmp	r2, r5
10003aa0:	d30d      	bcc.n	10003abe <cdcd_open+0x5e>
}

static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
10003aa2:	7823      	ldrb	r3, [r4, #0]
  return desc8 + desc8[DESC_OFFSET_LEN];
10003aa4:	18e4      	adds	r4, r4, r3
    drv_len += tu_desc_len(p_desc);
10003aa6:	18ed      	adds	r5, r5, r3
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10003aa8:	7863      	ldrb	r3, [r4, #1]
10003aaa:	b2ad      	uxth	r5, r5
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
10003aac:	2b24      	cmp	r3, #36	; 0x24
10003aae:	d0f6      	beq.n	10003a9e <cdcd_open+0x3e>
  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
10003ab0:	2b05      	cmp	r3, #5
10003ab2:	d020      	beq.n	10003af6 <cdcd_open+0x96>
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
10003ab4:	2b04      	cmp	r3, #4
10003ab6:	d102      	bne.n	10003abe <cdcd_open+0x5e>
10003ab8:	7963      	ldrb	r3, [r4, #5]
10003aba:	2b0a      	cmp	r3, #10
10003abc:	d02e      	beq.n	10003b1c <cdcd_open+0xbc>
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
10003abe:	4c21      	ldr	r4, [pc, #132]	; (10003b44 <cdcd_open+0xe4>)
10003ac0:	0020      	movs	r0, r4
10003ac2:	f000 f98b 	bl	10003ddc <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf), );
10003ac6:	283f      	cmp	r0, #63	; 0x3f
10003ac8:	d9d4      	bls.n	10003a74 <cdcd_open+0x14>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out), );
10003aca:	0026      	movs	r6, r4
10003acc:	3e10      	subs	r6, #16
10003ace:	2000      	movs	r0, #0
10003ad0:	78f1      	ldrb	r1, [r6, #3]
10003ad2:	f001 f8a7 	bl	10004c24 <usbd_edpt_claim>
10003ad6:	2800      	cmp	r0, #0
10003ad8:	d0cc      	beq.n	10003a74 <cdcd_open+0x14>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
10003ada:	0020      	movs	r0, r4
10003adc:	f000 f97e 	bl	10003ddc <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )  {
10003ae0:	283f      	cmp	r0, #63	; 0x3f
10003ae2:	d916      	bls.n	10003b12 <cdcd_open+0xb2>
    usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
10003ae4:	2390      	movs	r3, #144	; 0x90
10003ae6:	009b      	lsls	r3, r3, #2
10003ae8:	18e2      	adds	r2, r4, r3
10003aea:	78f1      	ldrb	r1, [r6, #3]
10003aec:	2340      	movs	r3, #64	; 0x40
10003aee:	2000      	movs	r0, #0
10003af0:	f001 f8f0 	bl	10004cd4 <usbd_edpt_xfer>
10003af4:	e7be      	b.n	10003a74 <cdcd_open+0x14>
    TU_ASSERT( usbd_edpt_open(rhport, (tusb_desc_endpoint_t const *) p_desc), 0 );
10003af6:	0021      	movs	r1, r4
10003af8:	0030      	movs	r0, r6
10003afa:	f001 f88f 	bl	10004c1c <usbd_edpt_open>
10003afe:	2800      	cmp	r0, #0
10003b00:	d0b7      	beq.n	10003a72 <cdcd_open+0x12>
    p_cdc->ep_notif = ((tusb_desc_endpoint_t const *) p_desc)->bEndpointAddress;
10003b02:	78a3      	ldrb	r3, [r4, #2]
10003b04:	707b      	strb	r3, [r7, #1]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
10003b06:	7823      	ldrb	r3, [r4, #0]
    drv_len += tu_desc_len(p_desc);
10003b08:	18ed      	adds	r5, r5, r3
  return desc8 + desc8[DESC_OFFSET_LEN];
10003b0a:	18e4      	adds	r4, r4, r3
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10003b0c:	7863      	ldrb	r3, [r4, #1]
10003b0e:	b2ad      	uxth	r5, r5
  return desc8 + desc8[DESC_OFFSET_LEN];
10003b10:	e7d0      	b.n	10003ab4 <cdcd_open+0x54>
    usbd_edpt_release(rhport, p_cdc->ep_out);
10003b12:	78f1      	ldrb	r1, [r6, #3]
10003b14:	2000      	movs	r0, #0
10003b16:	f001 f8b7 	bl	10004c88 <usbd_edpt_release>
10003b1a:	e7ab      	b.n	10003a74 <cdcd_open+0x14>
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
10003b1c:	4b0a      	ldr	r3, [pc, #40]	; (10003b48 <cdcd_open+0xe8>)
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
10003b1e:	7827      	ldrb	r7, [r4, #0]
10003b20:	9301      	str	r3, [sp, #4]
10003b22:	3301      	adds	r3, #1
10003b24:	9300      	str	r3, [sp, #0]
10003b26:	2202      	movs	r2, #2
10003b28:	2302      	movs	r3, #2
10003b2a:	0030      	movs	r0, r6
  return desc8 + desc8[DESC_OFFSET_LEN];
10003b2c:	19e1      	adds	r1, r4, r7
10003b2e:	f001 f841 	bl	10004bb4 <usbd_open_edpt_pair>
10003b32:	2800      	cmp	r0, #0
10003b34:	d09d      	beq.n	10003a72 <cdcd_open+0x12>
    drv_len += 2*sizeof(tusb_desc_endpoint_t);
10003b36:	350e      	adds	r5, #14
10003b38:	19ed      	adds	r5, r5, r7
10003b3a:	b2ad      	uxth	r5, r5
10003b3c:	e7bf      	b.n	10003abe <cdcd_open+0x5e>
10003b3e:	46c0      	nop			; (mov r8, r8)
10003b40:	2003d6d4 	.word	0x2003d6d4
10003b44:	2003d6e4 	.word	0x2003d6e4
10003b48:	2003d6d6 	.word	0x2003d6d6

10003b4c <cdcd_control_complete>:
bool cdcd_control_complete(uint8_t rhport, tusb_control_request_t const * request)
{
  (void) rhport;

  //------------- Class Specific Request -------------//
  TU_VERIFY (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
10003b4c:	2360      	movs	r3, #96	; 0x60
10003b4e:	780a      	ldrb	r2, [r1, #0]
{
10003b50:	b570      	push	{r4, r5, r6, lr}
  TU_VERIFY (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
10003b52:	4013      	ands	r3, r2
10003b54:	2400      	movs	r4, #0
10003b56:	2b20      	cmp	r3, #32
10003b58:	d10b      	bne.n	10003b72 <cdcd_control_complete+0x26>
  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;

    if ( p_cdc->itf_num == request->wIndex ) break;
10003b5a:	4a0b      	ldr	r2, [pc, #44]	; (10003b88 <cdcd_control_complete+0x3c>)
10003b5c:	794b      	ldrb	r3, [r1, #5]
10003b5e:	790d      	ldrb	r5, [r1, #4]
10003b60:	7810      	ldrb	r0, [r2, #0]
10003b62:	021b      	lsls	r3, r3, #8
10003b64:	432b      	orrs	r3, r5
10003b66:	4298      	cmp	r0, r3
10003b68:	d103      	bne.n	10003b72 <cdcd_control_complete+0x26>
  }

  // Invoke callback
  if ( CDC_REQUEST_SET_LINE_CODING == request->bRequest )
10003b6a:	784b      	ldrb	r3, [r1, #1]
  {
    if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
  }

  return true;
10003b6c:	3401      	adds	r4, #1
  if ( CDC_REQUEST_SET_LINE_CODING == request->bRequest )
10003b6e:	2b20      	cmp	r3, #32
10003b70:	d001      	beq.n	10003b76 <cdcd_control_complete+0x2a>
}
10003b72:	0020      	movs	r0, r4
10003b74:	bd70      	pop	{r4, r5, r6, pc}
    if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
10003b76:	4b05      	ldr	r3, [pc, #20]	; (10003b8c <cdcd_control_complete+0x40>)
10003b78:	2b00      	cmp	r3, #0
10003b7a:	d0fa      	beq.n	10003b72 <cdcd_control_complete+0x26>
10003b7c:	2000      	movs	r0, #0
10003b7e:	1d91      	adds	r1, r2, #6
10003b80:	e000      	b.n	10003b84 <cdcd_control_complete+0x38>
10003b82:	bf00      	nop
10003b84:	e7f5      	b.n	10003b72 <cdcd_control_complete+0x26>
10003b86:	46c0      	nop			; (mov r8, r8)
10003b88:	2003d6d4 	.word	0x2003d6d4
10003b8c:	00000000 	.word	0x00000000

10003b90 <cdcd_control_request>:
// Handle class control request
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_request(uint8_t rhport, tusb_control_request_t const * request)
{
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
10003b90:	2360      	movs	r3, #96	; 0x60
10003b92:	780a      	ldrb	r2, [r1, #0]
{
10003b94:	b570      	push	{r4, r5, r6, lr}
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
10003b96:	4013      	ands	r3, r2
10003b98:	2400      	movs	r4, #0
10003b9a:	2b20      	cmp	r3, #32
10003b9c:	d111      	bne.n	10003bc2 <cdcd_control_request+0x32>
  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;

    if ( p_cdc->itf_num == request->wIndex ) break;
10003b9e:	4a14      	ldr	r2, [pc, #80]	; (10003bf0 <cdcd_control_request+0x60>)
10003ba0:	794b      	ldrb	r3, [r1, #5]
10003ba2:	790e      	ldrb	r6, [r1, #4]
10003ba4:	7815      	ldrb	r5, [r2, #0]
10003ba6:	021b      	lsls	r3, r3, #8
10003ba8:	4333      	orrs	r3, r6
10003baa:	429d      	cmp	r5, r3
10003bac:	d109      	bne.n	10003bc2 <cdcd_control_request+0x32>
  }

  switch ( request->bRequest )
10003bae:	784b      	ldrb	r3, [r1, #1]
10003bb0:	2b21      	cmp	r3, #33	; 0x21
10003bb2:	d808      	bhi.n	10003bc6 <cdcd_control_request+0x36>
10003bb4:	2b1f      	cmp	r3, #31
10003bb6:	d904      	bls.n	10003bc2 <cdcd_control_request+0x32>
  {
    case CDC_REQUEST_SET_LINE_CODING:
      TU_LOG2("  Set Line Coding\r\n");
      tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
10003bb8:	2307      	movs	r3, #7
10003bba:	3206      	adds	r2, #6
10003bbc:	f001 f8c6 	bl	10004d4c <tud_control_xfer>
    break;

    default: return false; // stall unsupported request
  }

  return true;
10003bc0:	2401      	movs	r4, #1
}
10003bc2:	0020      	movs	r0, r4
10003bc4:	bd70      	pop	{r4, r5, r6, pc}
  switch ( request->bRequest )
10003bc6:	2b22      	cmp	r3, #34	; 0x22
10003bc8:	d1fb      	bne.n	10003bc2 <cdcd_control_request+0x32>
      bool const dtr = tu_bit_test(request->wValue, 0);
10003bca:	78cd      	ldrb	r5, [r1, #3]
10003bcc:	788b      	ldrb	r3, [r1, #2]
10003bce:	022d      	lsls	r5, r5, #8
10003bd0:	431d      	orrs	r5, r3
      p_cdc->line_state = (uint8_t) request->wValue;
10003bd2:	7115      	strb	r5, [r2, #4]
      tud_control_status(rhport, request);
10003bd4:	f001 f8a2 	bl	10004d1c <tud_control_status>
      if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
10003bd8:	4b06      	ldr	r3, [pc, #24]	; (10003bf4 <cdcd_control_request+0x64>)
  return true;
10003bda:	2401      	movs	r4, #1
      if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
10003bdc:	2b00      	cmp	r3, #0
10003bde:	d0f0      	beq.n	10003bc2 <cdcd_control_request+0x32>
10003be0:	0029      	movs	r1, r5
}

// Bit
static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
10003be2:	086a      	lsrs	r2, r5, #1
10003be4:	2000      	movs	r0, #0
10003be6:	4022      	ands	r2, r4
10003be8:	4021      	ands	r1, r4
10003bea:	e000      	b.n	10003bee <cdcd_control_request+0x5e>
10003bec:	bf00      	nop
10003bee:	e7e8      	b.n	10003bc2 <cdcd_control_request+0x32>
10003bf0:	2003d6d4 	.word	0x2003d6d4
10003bf4:	00000000 	.word	0x00000000

10003bf8 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
10003bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
10003bfa:	4646      	mov	r6, r8
10003bfc:	464f      	mov	r7, r9
10003bfe:	46d6      	mov	lr, sl
10003c00:	b5c0      	push	{r6, r7, lr}

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
  {
    p_cdc = &_cdcd_itf[itf];
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
10003c02:	4e4d      	ldr	r6, [pc, #308]	; (10003d38 <cdcd_xfer_cb+0x140>)
{
10003c04:	4699      	mov	r9, r3
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
10003c06:	78f3      	ldrb	r3, [r6, #3]
{
10003c08:	4680      	mov	r8, r0
10003c0a:	000d      	movs	r5, r1
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
10003c0c:	428b      	cmp	r3, r1
10003c0e:	d157      	bne.n	10003cc0 <cdcd_xfer_cb+0xc8>

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
  {
    // TODO search for wanted char first for better performance
    for(uint32_t i=0; i<xferred_bytes; i++)
10003c10:	464b      	mov	r3, r9
10003c12:	2b00      	cmp	r3, #0
10003c14:	d100      	bne.n	10003c18 <cdcd_xfer_cb+0x20>
10003c16:	e088      	b.n	10003d2a <cdcd_xfer_cb+0x132>
10003c18:	4b48      	ldr	r3, [pc, #288]	; (10003d3c <cdcd_xfer_cb+0x144>)
10003c1a:	2b00      	cmp	r3, #0
10003c1c:	d100      	bne.n	10003c20 <cdcd_xfer_cb+0x28>
10003c1e:	e075      	b.n	10003d0c <cdcd_xfer_cb+0x114>
10003c20:	2394      	movs	r3, #148	; 0x94
10003c22:	009b      	lsls	r3, r3, #2
10003c24:	18f4      	adds	r4, r6, r3
10003c26:	46a2      	mov	sl, r4
10003c28:	0037      	movs	r7, r6
10003c2a:	44ca      	add	sl, r9
10003c2c:	3710      	adds	r7, #16
    {
      tu_fifo_write(&p_cdc->rx_ff, &p_cdc->epout_buf[i]);
10003c2e:	0021      	movs	r1, r4
10003c30:	0038      	movs	r0, r7
10003c32:	f000 f9b3 	bl	10003f9c <tu_fifo_write>

      // Check for wanted char and invoke callback if needed
      if ( tud_cdc_rx_wanted_cb && ( ((signed char) p_cdc->wanted_char) != -1 ) && ( p_cdc->wanted_char == p_cdc->epout_buf[i] ) )
10003c36:	7973      	ldrb	r3, [r6, #5]
10003c38:	2bff      	cmp	r3, #255	; 0xff
10003c3a:	d002      	beq.n	10003c42 <cdcd_xfer_cb+0x4a>
10003c3c:	7821      	ldrb	r1, [r4, #0]
10003c3e:	4299      	cmp	r1, r3
10003c40:	d043      	beq.n	10003cca <cdcd_xfer_cb+0xd2>
    for(uint32_t i=0; i<xferred_bytes; i++)
10003c42:	3401      	adds	r4, #1
10003c44:	4554      	cmp	r4, sl
10003c46:	d1f2      	bne.n	10003c2e <cdcd_xfer_cb+0x36>
        tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && tu_fifo_count(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
10003c48:	4b3d      	ldr	r3, [pc, #244]	; (10003d40 <cdcd_xfer_cb+0x148>)
10003c4a:	2b00      	cmp	r3, #0
10003c4c:	d004      	beq.n	10003c58 <cdcd_xfer_cb+0x60>
10003c4e:	0038      	movs	r0, r7
10003c50:	f000 f8b8 	bl	10003dc4 <tu_fifo_count>
10003c54:	2800      	cmp	r0, #0
10003c56:	d16b      	bne.n	10003d30 <cdcd_xfer_cb+0x138>
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
10003c58:	0038      	movs	r0, r7
10003c5a:	f000 f8bf 	bl	10003ddc <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf), );
10003c5e:	283f      	cmp	r0, #63	; 0x3f
10003c60:	d837      	bhi.n	10003cd2 <cdcd_xfer_cb+0xda>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
10003c62:	3f10      	subs	r7, #16
10003c64:	78bb      	ldrb	r3, [r7, #2]
10003c66:	429d      	cmp	r5, r3
10003c68:	d006      	beq.n	10003c78 <cdcd_xfer_cb+0x80>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
10003c6a:	2401      	movs	r4, #1
}
10003c6c:	0020      	movs	r0, r4
10003c6e:	bce0      	pop	{r5, r6, r7}
10003c70:	46ba      	mov	sl, r7
10003c72:	46b1      	mov	r9, r6
10003c74:	46a8      	mov	r8, r5
10003c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
10003c78:	4b32      	ldr	r3, [pc, #200]	; (10003d44 <cdcd_xfer_cb+0x14c>)
10003c7a:	2b00      	cmp	r3, #0
10003c7c:	d002      	beq.n	10003c84 <cdcd_xfer_cb+0x8c>
10003c7e:	2000      	movs	r0, #0
10003c80:	e000      	b.n	10003c84 <cdcd_xfer_cb+0x8c>
10003c82:	bf00      	nop
    if ( 0 == tud_cdc_n_write_flush(itf) )
10003c84:	2000      	movs	r0, #0
10003c86:	f7ff fe21 	bl	100038cc <tud_cdc_n_write_flush>
10003c8a:	2800      	cmp	r0, #0
10003c8c:	d1ed      	bne.n	10003c6a <cdcd_xfer_cb+0x72>
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
10003c8e:	4d2e      	ldr	r5, [pc, #184]	; (10003d48 <cdcd_xfer_cb+0x150>)
10003c90:	0028      	movs	r0, r5
10003c92:	f000 f897 	bl	10003dc4 <tu_fifo_count>
10003c96:	2800      	cmp	r0, #0
10003c98:	d1e7      	bne.n	10003c6a <cdcd_xfer_cb+0x72>
10003c9a:	464b      	mov	r3, r9
10003c9c:	2b00      	cmp	r3, #0
10003c9e:	d0e4      	beq.n	10003c6a <cdcd_xfer_cb+0x72>
10003ca0:	069b      	lsls	r3, r3, #26
10003ca2:	d1e2      	bne.n	10003c6a <cdcd_xfer_cb+0x72>
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
10003ca4:	3d28      	subs	r5, #40	; 0x28
10003ca6:	4640      	mov	r0, r8
10003ca8:	78a9      	ldrb	r1, [r5, #2]
10003caa:	f000 ffbb 	bl	10004c24 <usbd_edpt_claim>
10003cae:	1e04      	subs	r4, r0, #0
10003cb0:	d0db      	beq.n	10003c6a <cdcd_xfer_cb+0x72>
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
10003cb2:	2300      	movs	r3, #0
10003cb4:	2200      	movs	r2, #0
10003cb6:	4640      	mov	r0, r8
10003cb8:	78a9      	ldrb	r1, [r5, #2]
10003cba:	f001 f80b 	bl	10004cd4 <usbd_edpt_xfer>
10003cbe:	e7d5      	b.n	10003c6c <cdcd_xfer_cb+0x74>
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
10003cc0:	78b3      	ldrb	r3, [r6, #2]
10003cc2:	428b      	cmp	r3, r1
10003cc4:	d0d8      	beq.n	10003c78 <cdcd_xfer_cb+0x80>
  TU_ASSERT(itf < CFG_TUD_CDC);
10003cc6:	2400      	movs	r4, #0
10003cc8:	e7d0      	b.n	10003c6c <cdcd_xfer_cb+0x74>
        tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
10003cca:	2000      	movs	r0, #0
10003ccc:	e000      	b.n	10003cd0 <cdcd_xfer_cb+0xd8>
10003cce:	bf00      	nop
10003cd0:	e7b7      	b.n	10003c42 <cdcd_xfer_cb+0x4a>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out), );
10003cd2:	003c      	movs	r4, r7
10003cd4:	3c10      	subs	r4, #16
10003cd6:	2000      	movs	r0, #0
10003cd8:	78e1      	ldrb	r1, [r4, #3]
10003cda:	f000 ffa3 	bl	10004c24 <usbd_edpt_claim>
10003cde:	2800      	cmp	r0, #0
10003ce0:	d012      	beq.n	10003d08 <cdcd_xfer_cb+0x110>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
10003ce2:	0038      	movs	r0, r7
10003ce4:	f000 f87a 	bl	10003ddc <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )  {
10003ce8:	283f      	cmp	r0, #63	; 0x3f
10003cea:	d909      	bls.n	10003d00 <cdcd_xfer_cb+0x108>
    usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
10003cec:	2390      	movs	r3, #144	; 0x90
10003cee:	009b      	lsls	r3, r3, #2
10003cf0:	18fa      	adds	r2, r7, r3
10003cf2:	2000      	movs	r0, #0
10003cf4:	2340      	movs	r3, #64	; 0x40
10003cf6:	78e1      	ldrb	r1, [r4, #3]
10003cf8:	f000 ffec 	bl	10004cd4 <usbd_edpt_xfer>
  if ( ep_addr == p_cdc->ep_in )
10003cfc:	78a3      	ldrb	r3, [r4, #2]
10003cfe:	e7b2      	b.n	10003c66 <cdcd_xfer_cb+0x6e>
    usbd_edpt_release(rhport, p_cdc->ep_out);
10003d00:	2000      	movs	r0, #0
10003d02:	78e1      	ldrb	r1, [r4, #3]
10003d04:	f000 ffc0 	bl	10004c88 <usbd_edpt_release>
  if ( ep_addr == p_cdc->ep_in )
10003d08:	78a3      	ldrb	r3, [r4, #2]
10003d0a:	e7ac      	b.n	10003c66 <cdcd_xfer_cb+0x6e>
10003d0c:	2394      	movs	r3, #148	; 0x94
10003d0e:	009b      	lsls	r3, r3, #2
10003d10:	18f4      	adds	r4, r6, r3
10003d12:	46a2      	mov	sl, r4
10003d14:	3610      	adds	r6, #16
10003d16:	0037      	movs	r7, r6
10003d18:	44ca      	add	sl, r9
      tu_fifo_write(&p_cdc->rx_ff, &p_cdc->epout_buf[i]);
10003d1a:	0021      	movs	r1, r4
10003d1c:	0038      	movs	r0, r7
    for(uint32_t i=0; i<xferred_bytes; i++)
10003d1e:	3401      	adds	r4, #1
      tu_fifo_write(&p_cdc->rx_ff, &p_cdc->epout_buf[i]);
10003d20:	f000 f93c 	bl	10003f9c <tu_fifo_write>
    for(uint32_t i=0; i<xferred_bytes; i++)
10003d24:	4554      	cmp	r4, sl
10003d26:	d1f8      	bne.n	10003d1a <cdcd_xfer_cb+0x122>
10003d28:	e78e      	b.n	10003c48 <cdcd_xfer_cb+0x50>
10003d2a:	3610      	adds	r6, #16
10003d2c:	0037      	movs	r7, r6
10003d2e:	e78b      	b.n	10003c48 <cdcd_xfer_cb+0x50>
    if (tud_cdc_rx_cb && tu_fifo_count(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
10003d30:	2000      	movs	r0, #0
10003d32:	e000      	b.n	10003d36 <cdcd_xfer_cb+0x13e>
10003d34:	bf00      	nop
10003d36:	e78f      	b.n	10003c58 <cdcd_xfer_cb+0x60>
10003d38:	2003d6d4 	.word	0x2003d6d4
	...
10003d48:	2003d6fc 	.word	0x2003d6fc

10003d4c <tu_fifo_config>:
#define tu_fifo_unlock(_ff)

#endif

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
10003d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10003d4e:	46c6      	mov	lr, r8
10003d50:	b500      	push	{lr}
10003d52:	0014      	movs	r4, r2
10003d54:	aa06      	add	r2, sp, #24
10003d56:	001e      	movs	r6, r3
10003d58:	7813      	ldrb	r3, [r2, #0]
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
10003d5a:	2280      	movs	r2, #128	; 0x80
{
10003d5c:	0005      	movs	r5, r0
10003d5e:	000f      	movs	r7, r1
10003d60:	4698      	mov	r8, r3
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
10003d62:	0212      	lsls	r2, r2, #8
10003d64:	4294      	cmp	r4, r2
10003d66:	d82b      	bhi.n	10003dc0 <tu_fifo_config+0x74>
  if (f->mutex)
10003d68:	6940      	ldr	r0, [r0, #20]
10003d6a:	2800      	cmp	r0, #0
10003d6c:	d01a      	beq.n	10003da4 <tu_fifo_config+0x58>
    return mdef;
}

static inline bool osal_mutex_lock (osal_mutex_t mutex_hdl, uint32_t msec)
{
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10003d6e:	2101      	movs	r1, #1
10003d70:	4249      	negs	r1, r1
10003d72:	f006 fab5 	bl	1000a2e0 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);

  f->buffer = (uint8_t*) buffer;
  f->depth  = depth;
  f->item_size = item_size;
  f->overwritable = overwritable;
10003d76:	4643      	mov	r3, r8
  f->depth  = depth;
10003d78:	80ac      	strh	r4, [r5, #4]

  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
10003d7a:	0064      	lsls	r4, r4, #1
10003d7c:	b2a4      	uxth	r4, r4
  f->overwritable = overwritable;
10003d7e:	722b      	strb	r3, [r5, #8]
  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
10003d80:	1e63      	subs	r3, r4, #1
10003d82:	81ab      	strh	r3, [r5, #12]
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;

  f->rd_idx = f->wr_idx = 0;
10003d84:	2300      	movs	r3, #0
  if (f->mutex)
10003d86:	6968      	ldr	r0, [r5, #20]
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;
10003d88:	4264      	negs	r4, r4
  f->rd_idx = f->wr_idx = 0;
10003d8a:	81eb      	strh	r3, [r5, #14]
  f->buffer = (uint8_t*) buffer;
10003d8c:	602f      	str	r7, [r5, #0]
  f->item_size = item_size;
10003d8e:	80ee      	strh	r6, [r5, #6]
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;
10003d90:	816c      	strh	r4, [r5, #10]
  f->rd_idx = f->wr_idx = 0;
10003d92:	822b      	strh	r3, [r5, #16]
  if (f->mutex)
10003d94:	2800      	cmp	r0, #0
10003d96:	d011      	beq.n	10003dbc <tu_fifo_config+0x70>
}

static inline bool osal_mutex_unlock(osal_mutex_t mutex_hdl)
{
    mutex_exit(mutex_hdl);
10003d98:	f006 fa82 	bl	1000a2a0 <__mutex_exit_veneer>

  tu_fifo_unlock(f);

  return true;
10003d9c:	2001      	movs	r0, #1
}
10003d9e:	bc80      	pop	{r7}
10003da0:	46b8      	mov	r8, r7
10003da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  f->depth  = depth;
10003da4:	80ac      	strh	r4, [r5, #4]
  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
10003da6:	0064      	lsls	r4, r4, #1
10003da8:	b2a4      	uxth	r4, r4
  f->overwritable = overwritable;
10003daa:	722b      	strb	r3, [r5, #8]
  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
10003dac:	1e63      	subs	r3, r4, #1
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;
10003dae:	4264      	negs	r4, r4
  f->rd_idx = f->wr_idx = 0;
10003db0:	81e8      	strh	r0, [r5, #14]
  f->buffer = (uint8_t*) buffer;
10003db2:	6029      	str	r1, [r5, #0]
  f->item_size = item_size;
10003db4:	80ee      	strh	r6, [r5, #6]
  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
10003db6:	81ab      	strh	r3, [r5, #12]
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;
10003db8:	816c      	strh	r4, [r5, #10]
  f->rd_idx = f->wr_idx = 0;
10003dba:	8228      	strh	r0, [r5, #16]
  return true;
10003dbc:	2001      	movs	r0, #1
10003dbe:	e7ee      	b.n	10003d9e <tu_fifo_config+0x52>
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
10003dc0:	2000      	movs	r0, #0
10003dc2:	e7ec      	b.n	10003d9e <tu_fifo_config+0x52>

10003dc4 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
10003dc4:	b510      	push	{r4, lr}
  return _tu_fifo_count(f, f->wr_idx, f->rd_idx);
10003dc6:	89c4      	ldrh	r4, [r0, #14]
10003dc8:	8a01      	ldrh	r1, [r0, #16]
{
10003dca:	0002      	movs	r2, r0
  uint16_t cnt = wAbs-rAbs;
10003dcc:	1a60      	subs	r0, r4, r1
10003dce:	b280      	uxth	r0, r0
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
10003dd0:	428c      	cmp	r4, r1
10003dd2:	d202      	bcs.n	10003dda <tu_fifo_count+0x16>
10003dd4:	8953      	ldrh	r3, [r2, #10]
10003dd6:	1ac0      	subs	r0, r0, r3
10003dd8:	b280      	uxth	r0, r0
}
10003dda:	bd10      	pop	{r4, pc}

10003ddc <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
10003ddc:	b510      	push	{r4, lr}
  return _tu_fifo_remaining(f, f->wr_idx, f->rd_idx);
10003dde:	89c4      	ldrh	r4, [r0, #14]
10003de0:	8a01      	ldrh	r1, [r0, #16]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
10003de2:	8883      	ldrh	r3, [r0, #4]
  uint16_t cnt = wAbs-rAbs;
10003de4:	1a62      	subs	r2, r4, r1
10003de6:	b292      	uxth	r2, r2
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
10003de8:	428c      	cmp	r4, r1
10003dea:	d202      	bcs.n	10003df2 <tu_fifo_remaining+0x16>
10003dec:	8940      	ldrh	r0, [r0, #10]
10003dee:	1a12      	subs	r2, r2, r0
10003df0:	b292      	uxth	r2, r2
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
10003df2:	1a98      	subs	r0, r3, r2
  return _tu_fifo_remaining(f, f->wr_idx, f->rd_idx);
10003df4:	b280      	uxth	r0, r0
}
10003df6:	bd10      	pop	{r4, pc}

10003df8 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
10003df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003dfa:	0004      	movs	r4, r0
  if (f->mutex)
10003dfc:	6940      	ldr	r0, [r0, #20]
{
10003dfe:	000e      	movs	r6, r1
  if (f->mutex)
10003e00:	2800      	cmp	r0, #0
10003e02:	d003      	beq.n	10003e0c <tu_fifo_read+0x14>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10003e04:	2101      	movs	r1, #1
10003e06:	4249      	negs	r1, r1
10003e08:	f006 fa6a 	bl	1000a2e0 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);                                          // TODO: Here we may distinguish for read and write pointer mutexes!

  // Peek the data
  bool ret = _tu_fifo_peek_at(f, 0, buffer, f->wr_idx, f->rd_idx);    // f->rd_idx might get modified in case of an overflow so we can not use a local variable
10003e0c:	89e1      	ldrh	r1, [r4, #14]
10003e0e:	8a22      	ldrh	r2, [r4, #16]
10003e10:	b28f      	uxth	r7, r1
  uint16_t cnt = wAbs-rAbs;
10003e12:	1a8d      	subs	r5, r1, r2
  bool ret = _tu_fifo_peek_at(f, 0, buffer, f->wr_idx, f->rd_idx);    // f->rd_idx might get modified in case of an overflow so we can not use a local variable
10003e14:	b293      	uxth	r3, r2
  uint16_t cnt = wAbs-rAbs;
10003e16:	b2ad      	uxth	r5, r5
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
10003e18:	4291      	cmp	r1, r2
10003e1a:	d202      	bcs.n	10003e22 <tu_fifo_read+0x2a>
10003e1c:	8962      	ldrh	r2, [r4, #10]
10003e1e:	1aad      	subs	r5, r5, r2
10003e20:	b2ad      	uxth	r5, r5
  if (cnt > f->depth)
10003e22:	88a2      	ldrh	r2, [r4, #4]
  if ((p < p - offset) || (p - offset > f->max_pointer_idx))
10003e24:	89a1      	ldrh	r1, [r4, #12]
  if (cnt > f->depth)
10003e26:	42aa      	cmp	r2, r5
10003e28:	d205      	bcs.n	10003e36 <tu_fifo_read+0x3e>
  if ((p < p - offset) || (p - offset > f->max_pointer_idx))
10003e2a:	1ab8      	subs	r0, r7, r2
10003e2c:	4288      	cmp	r0, r1
10003e2e:	dc2b      	bgt.n	10003e88 <tu_fifo_read+0x90>
    p -= offset;
10003e30:	b280      	uxth	r0, r0
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
10003e32:	0015      	movs	r5, r2
10003e34:	8220      	strh	r0, [r4, #16]
  if (cnt == 0 || offset >= cnt) return false;
10003e36:	2d00      	cmp	r5, #0
10003e38:	d02e      	beq.n	10003e98 <tu_fifo_read+0xa0>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10003e3a:	428b      	cmp	r3, r1
10003e3c:	d906      	bls.n	10003e4c <tu_fifo_read+0x54>
    p = (p + offset) + f->non_used_index_space;
10003e3e:	8961      	ldrh	r1, [r4, #10]
10003e40:	185b      	adds	r3, r3, r1
10003e42:	b29b      	uxth	r3, r3
  while ( idx >= depth) idx -= depth;
10003e44:	429a      	cmp	r2, r3
10003e46:	d803      	bhi.n	10003e50 <tu_fifo_read+0x58>
10003e48:	1a9b      	subs	r3, r3, r2
10003e4a:	b29b      	uxth	r3, r3
10003e4c:	429a      	cmp	r2, r3
10003e4e:	d9fb      	bls.n	10003e48 <tu_fifo_read+0x50>
  memcpy(p_buffer, f->buffer + (rRel * f->item_size), f->item_size);
10003e50:	88e2      	ldrh	r2, [r4, #6]
10003e52:	6821      	ldr	r1, [r4, #0]
10003e54:	4353      	muls	r3, r2
10003e56:	0030      	movs	r0, r6
10003e58:	18c9      	adds	r1, r1, r3
10003e5a:	f7fd f9b1 	bl	100011c0 <__wrap___aeabi_memcpy>
  return true;
10003e5e:	2501      	movs	r5, #1
10003e60:	2001      	movs	r0, #1
10003e62:	2601      	movs	r6, #1
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10003e64:	89a1      	ldrh	r1, [r4, #12]

  // Advance pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
10003e66:	8a22      	ldrh	r2, [r4, #16]
10003e68:	b293      	uxth	r3, r2
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10003e6a:	1812      	adds	r2, r2, r0
10003e6c:	428a      	cmp	r2, r1
10003e6e:	dd10      	ble.n	10003e92 <tu_fifo_read+0x9a>
    p = (p + offset) + f->non_used_index_space;
10003e70:	8962      	ldrh	r2, [r4, #10]
10003e72:	189b      	adds	r3, r3, r2
10003e74:	18ed      	adds	r5, r5, r3
10003e76:	b2ad      	uxth	r5, r5
  if (f->mutex)
10003e78:	6960      	ldr	r0, [r4, #20]
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
10003e7a:	8225      	strh	r5, [r4, #16]
  if (f->mutex)
10003e7c:	2800      	cmp	r0, #0
10003e7e:	d001      	beq.n	10003e84 <tu_fifo_read+0x8c>
    mutex_exit(mutex_hdl);
10003e80:	f006 fa0e 	bl	1000a2a0 <__mutex_exit_veneer>

  tu_fifo_unlock(f);
  return ret;
}
10003e84:	0030      	movs	r0, r6
10003e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    p = (p - offset) - f->non_used_index_space;
10003e88:	8960      	ldrh	r0, [r4, #10]
10003e8a:	1810      	adds	r0, r2, r0
10003e8c:	1a38      	subs	r0, r7, r0
10003e8e:	b280      	uxth	r0, r0
10003e90:	e7cf      	b.n	10003e32 <tu_fifo_read+0x3a>
    p += offset;
10003e92:	195d      	adds	r5, r3, r5
10003e94:	b2ad      	uxth	r5, r5
10003e96:	e7ef      	b.n	10003e78 <tu_fifo_read+0x80>
10003e98:	2000      	movs	r0, #0
  if (cnt == 0 || offset >= cnt) return false;
10003e9a:	2600      	movs	r6, #0
10003e9c:	e7e3      	b.n	10003e66 <tu_fifo_read+0x6e>
10003e9e:	46c0      	nop			; (mov r8, r8)

10003ea0 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t count)
{
10003ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
10003ea2:	46c6      	mov	lr, r8
10003ea4:	0004      	movs	r4, r0
  if (f->mutex)
10003ea6:	6940      	ldr	r0, [r0, #20]
{
10003ea8:	4688      	mov	r8, r1
10003eaa:	0017      	movs	r7, r2
10003eac:	b500      	push	{lr}
  if (f->mutex)
10003eae:	2800      	cmp	r0, #0
10003eb0:	d003      	beq.n	10003eba <tu_fifo_read_n+0x1a>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10003eb2:	2101      	movs	r1, #1
10003eb4:	4249      	negs	r1, r1
10003eb6:	f006 fa13 	bl	1000a2e0 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);                                          // TODO: Here we may distinguish for read and write pointer mutexes!

  // Peek the data
  count = _tu_fifo_peek_at_n(f, 0, buffer, count, f->wr_idx, f->rd_idx);        // f->rd_idx might get modified in case of an overflow so we can not use a local variable
10003eba:	89e0      	ldrh	r0, [r4, #14]
10003ebc:	8a21      	ldrh	r1, [r4, #16]
10003ebe:	b282      	uxth	r2, r0
  uint16_t cnt = wAbs-rAbs;
10003ec0:	1a46      	subs	r6, r0, r1
  count = _tu_fifo_peek_at_n(f, 0, buffer, count, f->wr_idx, f->rd_idx);        // f->rd_idx might get modified in case of an overflow so we can not use a local variable
10003ec2:	b28b      	uxth	r3, r1
  uint16_t cnt = wAbs-rAbs;
10003ec4:	b2b6      	uxth	r6, r6
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
10003ec6:	4288      	cmp	r0, r1
10003ec8:	d202      	bcs.n	10003ed0 <tu_fifo_read_n+0x30>
10003eca:	8961      	ldrh	r1, [r4, #10]
10003ecc:	1a76      	subs	r6, r6, r1
10003ece:	b2b6      	uxth	r6, r6
  if (cnt > f->depth)
10003ed0:	88a5      	ldrh	r5, [r4, #4]
  if ((p < p - offset) || (p - offset > f->max_pointer_idx))
10003ed2:	89a0      	ldrh	r0, [r4, #12]
  if (cnt > f->depth)
10003ed4:	42b5      	cmp	r5, r6
10003ed6:	d207      	bcs.n	10003ee8 <tu_fifo_read_n+0x48>
  if ((p < p - offset) || (p - offset > f->max_pointer_idx))
10003ed8:	1b53      	subs	r3, r2, r5
10003eda:	4283      	cmp	r3, r0
10003edc:	dc2c      	bgt.n	10003f38 <tu_fifo_read_n+0x98>
    p -= offset;
10003ede:	b29b      	uxth	r3, r3
    rAbs = f->rd_idx;
10003ee0:	002e      	movs	r6, r5
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
10003ee2:	8223      	strh	r3, [r4, #16]
    rAbs = f->rd_idx;
10003ee4:	8a23      	ldrh	r3, [r4, #16]
10003ee6:	b29b      	uxth	r3, r3
  if (cnt == 0 || offset >= cnt) return 0;
10003ee8:	2e00      	cmp	r6, #0
10003eea:	d02c      	beq.n	10003f46 <tu_fifo_read_n+0xa6>
  if (cnt < n) {
10003eec:	1c3a      	adds	r2, r7, #0
10003eee:	42b7      	cmp	r7, r6
10003ef0:	d827      	bhi.n	10003f42 <tu_fifo_read_n+0xa2>
10003ef2:	b296      	uxth	r6, r2
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10003ef4:	4283      	cmp	r3, r0
10003ef6:	d902      	bls.n	10003efe <tu_fifo_read_n+0x5e>
    p = (p + offset) + f->non_used_index_space;
10003ef8:	8961      	ldrh	r1, [r4, #10]
10003efa:	185b      	adds	r3, r3, r1
10003efc:	b29b      	uxth	r3, r3
  while ( idx >= depth) idx -= depth;
10003efe:	429d      	cmp	r5, r3
10003f00:	d803      	bhi.n	10003f0a <tu_fifo_read_n+0x6a>
10003f02:	1b5b      	subs	r3, r3, r5
10003f04:	b29b      	uxth	r3, r3
10003f06:	429d      	cmp	r5, r3
10003f08:	d9fb      	bls.n	10003f02 <tu_fifo_read_n+0x62>
  if(rRel + n <= f->depth)       // Linear mode only
10003f0a:	199a      	adds	r2, r3, r6
10003f0c:	0037      	movs	r7, r6
    memcpy(p_buffer, f->buffer + (rRel * f->item_size), n*f->item_size);
10003f0e:	88e1      	ldrh	r1, [r4, #6]
  if(rRel + n <= f->depth)       // Linear mode only
10003f10:	42aa      	cmp	r2, r5
10003f12:	dc2c      	bgt.n	10003f6e <tu_fifo_read_n+0xce>
    memcpy(p_buffer, f->buffer + (rRel * f->item_size), n*f->item_size);
10003f14:	000a      	movs	r2, r1
10003f16:	4359      	muls	r1, r3
10003f18:	6823      	ldr	r3, [r4, #0]
10003f1a:	4372      	muls	r2, r6
10003f1c:	469c      	mov	ip, r3
10003f1e:	4640      	mov	r0, r8
10003f20:	4461      	add	r1, ip
10003f22:	f7fd f94d 	bl	100011c0 <__wrap___aeabi_memcpy>

  // Advance read pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, count);
10003f26:	8a22      	ldrh	r2, [r4, #16]
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10003f28:	89a0      	ldrh	r0, [r4, #12]
  f->rd_idx = advance_pointer(f, f->rd_idx, count);
10003f2a:	b293      	uxth	r3, r2
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10003f2c:	19d2      	adds	r2, r2, r7
10003f2e:	4282      	cmp	r2, r0
10003f30:	dc0f      	bgt.n	10003f52 <tu_fifo_read_n+0xb2>
    p += offset;
10003f32:	199b      	adds	r3, r3, r6
10003f34:	b29b      	uxth	r3, r3
10003f36:	e010      	b.n	10003f5a <tu_fifo_read_n+0xba>
    p = (p - offset) - f->non_used_index_space;
10003f38:	8963      	ldrh	r3, [r4, #10]
10003f3a:	18eb      	adds	r3, r5, r3
10003f3c:	1ad3      	subs	r3, r2, r3
10003f3e:	b29b      	uxth	r3, r3
10003f40:	e7ce      	b.n	10003ee0 <tu_fifo_read_n+0x40>
10003f42:	1c32      	adds	r2, r6, #0
10003f44:	e7d5      	b.n	10003ef2 <tu_fifo_read_n+0x52>
10003f46:	2700      	movs	r7, #0
  f->rd_idx = advance_pointer(f, f->rd_idx, count);
10003f48:	8a22      	ldrh	r2, [r4, #16]
10003f4a:	b293      	uxth	r3, r2
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10003f4c:	19d2      	adds	r2, r2, r7
10003f4e:	4282      	cmp	r2, r0
10003f50:	ddef      	ble.n	10003f32 <tu_fifo_read_n+0x92>
    p = (p + offset) + f->non_used_index_space;
10003f52:	8962      	ldrh	r2, [r4, #10]
10003f54:	189b      	adds	r3, r3, r2
10003f56:	18f3      	adds	r3, r6, r3
10003f58:	b29b      	uxth	r3, r3
  if (f->mutex)
10003f5a:	6960      	ldr	r0, [r4, #20]
  f->rd_idx = advance_pointer(f, f->rd_idx, count);
10003f5c:	8223      	strh	r3, [r4, #16]
  if (f->mutex)
10003f5e:	2800      	cmp	r0, #0
10003f60:	d001      	beq.n	10003f66 <tu_fifo_read_n+0xc6>
    mutex_exit(mutex_hdl);
10003f62:	f006 f99d 	bl	1000a2a0 <__mutex_exit_veneer>

  tu_fifo_unlock(f);
  return count;
}
10003f66:	0030      	movs	r0, r6
10003f68:	bc80      	pop	{r7}
10003f6a:	46b8      	mov	r8, r7
10003f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint16_t nLin = f->depth - rRel;
10003f6e:	1aed      	subs	r5, r5, r3
    memcpy(p_buffer, f->buffer + (rRel * f->item_size), nLin*f->item_size);
10003f70:	b2ad      	uxth	r5, r5
10003f72:	002a      	movs	r2, r5
10003f74:	434a      	muls	r2, r1
10003f76:	4359      	muls	r1, r3
10003f78:	6823      	ldr	r3, [r4, #0]
10003f7a:	4640      	mov	r0, r8
10003f7c:	469c      	mov	ip, r3
10003f7e:	4461      	add	r1, ip
10003f80:	f7fd f91e 	bl	100011c0 <__wrap___aeabi_memcpy>
    memcpy(p_buffer + nLin*f->item_size, f->buffer, (n - nLin) * f->item_size);
10003f84:	88e3      	ldrh	r3, [r4, #6]
10003f86:	1b72      	subs	r2, r6, r5
10003f88:	0018      	movs	r0, r3
10003f8a:	4368      	muls	r0, r5
10003f8c:	435a      	muls	r2, r3
10003f8e:	6821      	ldr	r1, [r4, #0]
10003f90:	4440      	add	r0, r8
10003f92:	f7fd f915 	bl	100011c0 <__wrap___aeabi_memcpy>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10003f96:	89a0      	ldrh	r0, [r4, #12]
10003f98:	e7d6      	b.n	10003f48 <tu_fifo_read_n+0xa8>
10003f9a:	46c0      	nop			; (mov r8, r8)

10003f9c <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
10003f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003f9e:	0004      	movs	r4, r0
  if (f->mutex)
10003fa0:	6940      	ldr	r0, [r0, #20]
{
10003fa2:	000e      	movs	r6, r1
  if (f->mutex)
10003fa4:	2800      	cmp	r0, #0
10003fa6:	d003      	beq.n	10003fb0 <tu_fifo_write+0x14>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10003fa8:	2101      	movs	r1, #1
10003faa:	4249      	negs	r1, r1
10003fac:	f006 f998 	bl	1000a2e0 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);

  uint16_t w = f->wr_idx;
10003fb0:	89e2      	ldrh	r2, [r4, #14]

  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable ) return false;
10003fb2:	8a21      	ldrh	r1, [r4, #16]
  uint16_t w = f->wr_idx;
10003fb4:	b295      	uxth	r5, r2
  uint16_t cnt = wAbs-rAbs;
10003fb6:	1a53      	subs	r3, r2, r1
10003fb8:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
10003fba:	4291      	cmp	r1, r2
10003fbc:	d902      	bls.n	10003fc4 <tu_fifo_write+0x28>
10003fbe:	8962      	ldrh	r2, [r4, #10]
10003fc0:	1a9b      	subs	r3, r3, r2
10003fc2:	b29b      	uxth	r3, r3
  return (_tu_fifo_count(f, wAbs, rAbs) == f->depth);
10003fc4:	88a2      	ldrh	r2, [r4, #4]
  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable ) return false;
10003fc6:	429a      	cmp	r2, r3
10003fc8:	d026      	beq.n	10004018 <tu_fifo_write+0x7c>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10003fca:	89a1      	ldrh	r1, [r4, #12]
10003fcc:	002b      	movs	r3, r5
10003fce:	42a9      	cmp	r1, r5
10003fd0:	d206      	bcs.n	10003fe0 <tu_fifo_write+0x44>
    p = (p + offset) + f->non_used_index_space;
10003fd2:	8963      	ldrh	r3, [r4, #10]
10003fd4:	18eb      	adds	r3, r5, r3
10003fd6:	b29b      	uxth	r3, r3
  while ( idx >= depth) idx -= depth;
10003fd8:	429a      	cmp	r2, r3
10003fda:	d803      	bhi.n	10003fe4 <tu_fifo_write+0x48>
10003fdc:	1a9b      	subs	r3, r3, r2
10003fde:	b29b      	uxth	r3, r3
10003fe0:	429a      	cmp	r2, r3
10003fe2:	d9fb      	bls.n	10003fdc <tu_fifo_write+0x40>
  memcpy(f->buffer + (wRel * f->item_size), data, f->item_size);
10003fe4:	88e2      	ldrh	r2, [r4, #6]
10003fe6:	6821      	ldr	r1, [r4, #0]
10003fe8:	4353      	muls	r3, r2
10003fea:	18c8      	adds	r0, r1, r3
10003fec:	0031      	movs	r1, r6
10003fee:	f7fd f8e7 	bl	100011c0 <__wrap___aeabi_memcpy>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10003ff2:	89a3      	ldrh	r3, [r4, #12]
10003ff4:	42ab      	cmp	r3, r5
10003ff6:	d90a      	bls.n	1000400e <tu_fifo_write+0x72>
    p += offset;
10003ff8:	3501      	adds	r5, #1
10003ffa:	b2ad      	uxth	r5, r5
  if (f->mutex)
10003ffc:	6960      	ldr	r0, [r4, #20]
  // Advance pointer
  f->wr_idx = advance_pointer(f, w, 1);

  tu_fifo_unlock(f);

  return true;
10003ffe:	2701      	movs	r7, #1
  f->wr_idx = advance_pointer(f, w, 1);
10004000:	81e5      	strh	r5, [r4, #14]
  if (f->mutex)
10004002:	2800      	cmp	r0, #0
10004004:	d001      	beq.n	1000400a <tu_fifo_write+0x6e>
    mutex_exit(mutex_hdl);
10004006:	f006 f94b 	bl	1000a2a0 <__mutex_exit_veneer>
}
1000400a:	0038      	movs	r0, r7
1000400c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    p = (p + offset) + f->non_used_index_space;
1000400e:	8963      	ldrh	r3, [r4, #10]
10004010:	18ed      	adds	r5, r5, r3
10004012:	3501      	adds	r5, #1
10004014:	b2ad      	uxth	r5, r5
10004016:	e7f1      	b.n	10003ffc <tu_fifo_write+0x60>
  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable ) return false;
10004018:	7a27      	ldrb	r7, [r4, #8]
1000401a:	2f00      	cmp	r7, #0
1000401c:	d1d5      	bne.n	10003fca <tu_fifo_write+0x2e>
1000401e:	e7f4      	b.n	1000400a <tu_fifo_write+0x6e>

10004020 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t count)
{
10004020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004022:	4647      	mov	r7, r8
10004024:	46ce      	mov	lr, r9
10004026:	0004      	movs	r4, r0
10004028:	b580      	push	{r7, lr}
1000402a:	0015      	movs	r5, r2
1000402c:	000f      	movs	r7, r1
  if ( count == 0 ) return 0;
1000402e:	2a00      	cmp	r2, #0
10004030:	d052      	beq.n	100040d8 <tu_fifo_write_n+0xb8>
  if (f->mutex)
10004032:	6940      	ldr	r0, [r0, #20]
10004034:	2800      	cmp	r0, #0
10004036:	d003      	beq.n	10004040 <tu_fifo_write_n+0x20>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10004038:	2101      	movs	r1, #1
1000403a:	4249      	negs	r1, r1
1000403c:	f006 f950 	bl	1000a2e0 <__mutex_enter_timeout_ms_veneer>

  tu_fifo_lock(f);

  uint16_t w = f->wr_idx, r = f->rd_idx;
10004040:	89e6      	ldrh	r6, [r4, #14]
  uint8_t const* buf8 = (uint8_t const*) data;

  if (!f->overwritable)
10004042:	7a23      	ldrb	r3, [r4, #8]
  uint16_t w = f->wr_idx, r = f->rd_idx;
10004044:	8a20      	ldrh	r0, [r4, #16]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
10004046:	88a1      	ldrh	r1, [r4, #4]
  uint16_t w = f->wr_idx, r = f->rd_idx;
10004048:	b2b6      	uxth	r6, r6
1000404a:	b280      	uxth	r0, r0
  if (!f->overwritable)
1000404c:	2b00      	cmp	r3, #0
1000404e:	d138      	bne.n	100040c2 <tu_fifo_write_n+0xa2>
  uint16_t cnt = wAbs-rAbs;
10004050:	1a33      	subs	r3, r6, r0
10004052:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
10004054:	4286      	cmp	r6, r0
10004056:	d202      	bcs.n	1000405e <tu_fifo_write_n+0x3e>
10004058:	8962      	ldrh	r2, [r4, #10]
1000405a:	1a9b      	subs	r3, r3, r2
1000405c:	b29b      	uxth	r3, r3
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
1000405e:	1acb      	subs	r3, r1, r3
static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
10004060:	1c1a      	adds	r2, r3, #0
10004062:	b29b      	uxth	r3, r3
10004064:	42ab      	cmp	r3, r5
10004066:	d852      	bhi.n	1000410e <tu_fifo_write_n+0xee>
10004068:	b293      	uxth	r3, r2
1000406a:	4698      	mov	r8, r3
  if(wRel + n <= f->depth)  // Linear mode only
1000406c:	001d      	movs	r5, r3
    count = tu_min16(count, _tu_fifo_remaining(f, w, r));
  }
  else if (count > f->depth)
  {
    // Only copy last part
    buf8 = buf8 + (count - f->depth) * f->item_size;
1000406e:	88e2      	ldrh	r2, [r4, #6]
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10004070:	89a0      	ldrh	r0, [r4, #12]
  uint16_t w = f->wr_idx, r = f->rd_idx;
10004072:	0033      	movs	r3, r6
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10004074:	4286      	cmp	r6, r0
10004076:	dd05      	ble.n	10004084 <tu_fifo_write_n+0x64>
    p = (p + offset) + f->non_used_index_space;
10004078:	8963      	ldrh	r3, [r4, #10]
1000407a:	18f3      	adds	r3, r6, r3
1000407c:	b29b      	uxth	r3, r3
  while ( idx >= depth) idx -= depth;
1000407e:	e001      	b.n	10004084 <tu_fifo_write_n+0x64>
10004080:	1a5b      	subs	r3, r3, r1
10004082:	b29b      	uxth	r3, r3
10004084:	428b      	cmp	r3, r1
10004086:	d2fb      	bcs.n	10004080 <tu_fifo_write_n+0x60>
  if(wRel + n <= f->depth)  // Linear mode only
10004088:	1958      	adds	r0, r3, r5
1000408a:	4288      	cmp	r0, r1
1000408c:	dc2a      	bgt.n	100040e4 <tu_fifo_write_n+0xc4>
    memcpy(f->buffer + (wRel * f->item_size), data, n*f->item_size);
1000408e:	4353      	muls	r3, r2
10004090:	6821      	ldr	r1, [r4, #0]
10004092:	436a      	muls	r2, r5
10004094:	18c8      	adds	r0, r1, r3
10004096:	0039      	movs	r1, r7
10004098:	f7fd f892 	bl	100011c0 <__wrap___aeabi_memcpy>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
1000409c:	89a3      	ldrh	r3, [r4, #12]
1000409e:	1975      	adds	r5, r6, r5
100040a0:	429d      	cmp	r5, r3
100040a2:	dd1c      	ble.n	100040de <tu_fifo_write_n+0xbe>
    p = (p + offset) + f->non_used_index_space;
100040a4:	8963      	ldrh	r3, [r4, #10]
100040a6:	18f6      	adds	r6, r6, r3
100040a8:	4446      	add	r6, r8
100040aa:	b2b6      	uxth	r6, r6
  if (f->mutex)
100040ac:	6960      	ldr	r0, [r4, #20]

  // Write data
  _ff_push_n(f, buf8, count, wRel);

  // Advance pointer
  f->wr_idx = advance_pointer(f, w, count);
100040ae:	81e6      	strh	r6, [r4, #14]
  if (f->mutex)
100040b0:	2800      	cmp	r0, #0
100040b2:	d001      	beq.n	100040b8 <tu_fifo_write_n+0x98>
    mutex_exit(mutex_hdl);
100040b4:	f006 f8f4 	bl	1000a2a0 <__mutex_exit_veneer>

  tu_fifo_unlock(f);

  return count;
}
100040b8:	4640      	mov	r0, r8
100040ba:	bcc0      	pop	{r6, r7}
100040bc:	46b9      	mov	r9, r7
100040be:	46b0      	mov	r8, r6
100040c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(wRel + n <= f->depth)  // Linear mode only
100040c2:	46a8      	mov	r8, r5
    buf8 = buf8 + (count - f->depth) * f->item_size;
100040c4:	88e2      	ldrh	r2, [r4, #6]
  else if (count > f->depth)
100040c6:	42a9      	cmp	r1, r5
100040c8:	d2d2      	bcs.n	10004070 <tu_fifo_write_n+0x50>
    buf8 = buf8 + (count - f->depth) * f->item_size;
100040ca:	1a6d      	subs	r5, r5, r1
100040cc:	4355      	muls	r5, r2
    f->wr_idx = r;
100040ce:	4688      	mov	r8, r1
    buf8 = buf8 + (count - f->depth) * f->item_size;
100040d0:	197f      	adds	r7, r7, r5
    f->wr_idx = r;
100040d2:	81e0      	strh	r0, [r4, #14]
100040d4:	000d      	movs	r5, r1
100040d6:	e7cb      	b.n	10004070 <tu_fifo_write_n+0x50>
  if ( count == 0 ) return 0;
100040d8:	2300      	movs	r3, #0
100040da:	4698      	mov	r8, r3
100040dc:	e7ec      	b.n	100040b8 <tu_fifo_write_n+0x98>
    p += offset;
100040de:	4446      	add	r6, r8
100040e0:	b2b6      	uxth	r6, r6
100040e2:	e7e3      	b.n	100040ac <tu_fifo_write_n+0x8c>
    uint16_t nLin = f->depth - wRel;
100040e4:	1ac9      	subs	r1, r1, r3
    memcpy(f->buffer + (wRel * f->item_size), data, nLin*f->item_size);
100040e6:	b289      	uxth	r1, r1
100040e8:	4689      	mov	r9, r1
100040ea:	4353      	muls	r3, r2
100040ec:	6821      	ldr	r1, [r4, #0]
100040ee:	18c8      	adds	r0, r1, r3
100040f0:	464b      	mov	r3, r9
100040f2:	0039      	movs	r1, r7
100040f4:	435a      	muls	r2, r3
100040f6:	f7fd f863 	bl	100011c0 <__wrap___aeabi_memcpy>
    memcpy(f->buffer, data + nLin*f->item_size, (n - nLin) * f->item_size);
100040fa:	464b      	mov	r3, r9
100040fc:	88e1      	ldrh	r1, [r4, #6]
100040fe:	1aea      	subs	r2, r5, r3
10004100:	434a      	muls	r2, r1
10004102:	4359      	muls	r1, r3
10004104:	6820      	ldr	r0, [r4, #0]
10004106:	1879      	adds	r1, r7, r1
10004108:	f7fd f85a 	bl	100011c0 <__wrap___aeabi_memcpy>
1000410c:	e7c6      	b.n	1000409c <tu_fifo_write_n+0x7c>
1000410e:	1c2a      	adds	r2, r5, #0
10004110:	b293      	uxth	r3, r2
10004112:	4698      	mov	r8, r3
  if(wRel + n <= f->depth)  // Linear mode only
10004114:	001d      	movs	r5, r3
    buf8 = buf8 + (count - f->depth) * f->item_size;
10004116:	88e2      	ldrh	r2, [r4, #6]
10004118:	e7aa      	b.n	10004070 <tu_fifo_write_n+0x50>
1000411a:	46c0      	nop			; (mov r8, r8)

1000411c <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
1000411c:	b510      	push	{r4, lr}
1000411e:	0004      	movs	r4, r0
  if (f->mutex)
10004120:	6940      	ldr	r0, [r0, #20]
10004122:	2800      	cmp	r0, #0
10004124:	d00d      	beq.n	10004142 <tu_fifo_clear+0x26>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10004126:	2101      	movs	r1, #1
10004128:	4249      	negs	r1, r1
1000412a:	f006 f8d9 	bl	1000a2e0 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);
  f->rd_idx = f->wr_idx = 0;
1000412e:	2300      	movs	r3, #0
  if (f->mutex)
10004130:	6960      	ldr	r0, [r4, #20]
  f->rd_idx = f->wr_idx = 0;
10004132:	81e3      	strh	r3, [r4, #14]
10004134:	8223      	strh	r3, [r4, #16]
  if (f->mutex)
10004136:	2800      	cmp	r0, #0
10004138:	d001      	beq.n	1000413e <tu_fifo_clear+0x22>
    mutex_exit(mutex_hdl);
1000413a:	f006 f8b1 	bl	1000a2a0 <__mutex_exit_veneer>
  tu_fifo_unlock(f);

  return true;
}
1000413e:	2001      	movs	r0, #1
10004140:	bd10      	pop	{r4, pc}
  f->rd_idx = f->wr_idx = 0;
10004142:	81e0      	strh	r0, [r4, #14]
10004144:	8220      	strh	r0, [r4, #16]
  return true;
10004146:	e7fa      	b.n	1000413e <tu_fifo_clear+0x22>

10004148 <tud_mounted>:
  return (tusb_speed_t) _usbd_dev.speed;
}

bool tud_mounted(void)
{
  return _usbd_dev.cfg_num ? 1 : 0;
10004148:	4b02      	ldr	r3, [pc, #8]	; (10004154 <tud_mounted+0xc>)
1000414a:	7858      	ldrb	r0, [r3, #1]
1000414c:	1e43      	subs	r3, r0, #1
1000414e:	4198      	sbcs	r0, r3
10004150:	b2c0      	uxtb	r0, r0
}
10004152:	4770      	bx	lr
10004154:	2003da00 	.word	0x2003da00

10004158 <tud_suspended>:

bool tud_suspended(void)
{
  return _usbd_dev.suspended;
10004158:	4b02      	ldr	r3, [pc, #8]	; (10004164 <tud_suspended+0xc>)
1000415a:	7818      	ldrb	r0, [r3, #0]
1000415c:	0740      	lsls	r0, r0, #29
1000415e:	0fc0      	lsrs	r0, r0, #31
}
10004160:	4770      	bx	lr
10004162:	46c0      	nop			; (mov r8, r8)
10004164:	2003da00 	.word	0x2003da00

10004168 <tud_init>:

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_init (void)
{
10004168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  TU_LOG2("USBD init\r\n");

  tu_varclr(&_usbd_dev);
1000416a:	2237      	movs	r2, #55	; 0x37
1000416c:	2100      	movs	r1, #0
1000416e:	4821      	ldr	r0, [pc, #132]	; (100041f4 <tud_init+0x8c>)
10004170:	f7fd f820 	bl	100011b4 <__wrap_memset>
    mutex_init(mdef);
10004174:	4c20      	ldr	r4, [pc, #128]	; (100041f8 <tud_init+0x90>)
10004176:	0020      	movs	r0, r4
10004178:	f7fd feba 	bl	10001ef0 <mutex_init>

#if CFG_TUSB_OS != OPT_OS_NONE
  // Init device mutex
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
1000417c:	4b1f      	ldr	r3, [pc, #124]	; (100041fc <tud_init+0x94>)
1000417e:	601c      	str	r4, [r3, #0]
    critical_section_exit(&qhdl->critsec);
}

static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
  critical_section_init(&qdef->critsec);
10004180:	4c1f      	ldr	r4, [pc, #124]	; (10004200 <tud_init+0x98>)
10004182:	0020      	movs	r0, r4
10004184:	3018      	adds	r0, #24
10004186:	f7fd faeb 	bl	10001760 <critical_section_init>
  tu_fifo_clear(&qdef->ff);
1000418a:	0020      	movs	r0, r4
1000418c:	f7ff ffc6 	bl	1000411c <tu_fifo_clear>
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
10004190:	4b1c      	ldr	r3, [pc, #112]	; (10004204 <tud_init+0x9c>)
  TU_ASSERT(_usbd_q);

  // Get application driver if available
  if ( usbd_app_driver_get_cb )
10004192:	4e1d      	ldr	r6, [pc, #116]	; (10004208 <tud_init+0xa0>)
  {
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
10004194:	4d1d      	ldr	r5, [pc, #116]	; (1000420c <tud_init+0xa4>)
  _usbd_q = osal_queue_create(&_usbd_qdef);
10004196:	601c      	str	r4, [r3, #0]
  if ( usbd_app_driver_get_cb )
10004198:	2e00      	cmp	r6, #0
1000419a:	d004      	beq.n	100041a6 <tud_init+0x3e>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
1000419c:	0028      	movs	r0, r5
1000419e:	e000      	b.n	100041a2 <tud_init+0x3a>
100041a0:	bf00      	nop
100041a2:	4b1b      	ldr	r3, [pc, #108]	; (10004210 <tud_init+0xa8>)
100041a4:	6018      	str	r0, [r3, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
100041a6:	2400      	movs	r4, #0
100041a8:	782b      	ldrb	r3, [r5, #0]
100041aa:	2e00      	cmp	r6, #0
100041ac:	d019      	beq.n	100041e2 <tud_init+0x7a>
100041ae:	4e19      	ldr	r6, [pc, #100]	; (10004214 <tud_init+0xac>)
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
100041b0:	4f17      	ldr	r7, [pc, #92]	; (10004210 <tud_init+0xa8>)
100041b2:	429c      	cmp	r4, r3
100041b4:	d30f      	bcc.n	100041d6 <tud_init+0x6e>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
100041b6:	d119      	bne.n	100041ec <tud_init+0x84>
100041b8:	0033      	movs	r3, r6
  {
    usbd_class_driver_t const * driver = get_driver(i);
    TU_LOG2("%s init\r\n", driver->name);
    driver->init();
100041ba:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
100041bc:	3401      	adds	r4, #1
100041be:	782b      	ldrb	r3, [r5, #0]
100041c0:	b2e4      	uxtb	r4, r4
100041c2:	42a3      	cmp	r3, r4
100041c4:	d2f5      	bcs.n	100041b2 <tud_init+0x4a>
  }

  // Init device controller driver
  dcd_init(TUD_OPT_RHPORT);
100041c6:	2000      	movs	r0, #0
100041c8:	f000 ff72 	bl	100050b0 <dcd_init>
  dcd_int_enable(TUD_OPT_RHPORT);
100041cc:	2000      	movs	r0, #0
100041ce:	f000 ff49 	bl	10005064 <dcd_int_enable>

  return true;
}
100041d2:	2001      	movs	r0, #1
100041d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    driver->init();
100041d6:	00e3      	lsls	r3, r4, #3
100041d8:	683a      	ldr	r2, [r7, #0]
100041da:	1b1b      	subs	r3, r3, r4
100041dc:	009b      	lsls	r3, r3, #2
100041de:	589b      	ldr	r3, [r3, r2]
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
100041e0:	e7eb      	b.n	100041ba <tud_init+0x52>
    driver->init();
100041e2:	f7ff fbef 	bl	100039c4 <cdcd_init>
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
100041e6:	782b      	ldrb	r3, [r5, #0]
100041e8:	2b00      	cmp	r3, #0
100041ea:	d0ec      	beq.n	100041c6 <tud_init+0x5e>
    driver->init();
100041ec:	2300      	movs	r3, #0
100041ee:	681b      	ldr	r3, [r3, #0]
100041f0:	deff      	udf	#255	; 0xff
100041f2:	46c0      	nop			; (mov r8, r8)
100041f4:	2003da00 	.word	0x2003da00
100041f8:	2003d9b8 	.word	0x2003d9b8
100041fc:	2003da38 	.word	0x2003da38
10004200:	20002730 	.word	0x20002730
10004204:	2003da3c 	.word	0x2003da3c
10004208:	00000000 	.word	0x00000000
1000420c:	2003e341 	.word	0x2003e341
10004210:	2003d6d0 	.word	0x2003d6d0
10004214:	100039c5 	.word	0x100039c5

10004218 <tud_task>:
      }
    }
    @endcode
 */
void tud_task (void)
{
10004218:	b5f0      	push	{r4, r5, r6, r7, lr}
1000421a:	46de      	mov	lr, fp
1000421c:	4657      	mov	r7, sl
1000421e:	464e      	mov	r6, r9
10004220:	4645      	mov	r5, r8
10004222:	b5e0      	push	{r5, r6, r7, lr}
10004224:	b08b      	sub	sp, #44	; 0x2c
  // Skip if stack is not initialized
  if ( !tusb_inited() ) return;
10004226:	f001 fa05 	bl	10005634 <tusb_inited>
1000422a:	2800      	cmp	r0, #0
1000422c:	d100      	bne.n	10004230 <tud_task+0x18>
1000422e:	e123      	b.n	10004478 <tud_task+0x260>
10004230:	4bb3      	ldr	r3, [pc, #716]	; (10004500 <tud_task+0x2e8>)
10004232:	af07      	add	r7, sp, #28
10004234:	469a      	mov	sl, r3
#if CFG_TUSB_DEBUG >= 2
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG2("\r\n"); // extra line for setup
    TU_LOG2("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch ( event.event_id )
10004236:	4bb3      	ldr	r3, [pc, #716]	; (10004504 <tud_task+0x2ec>)
10004238:	469b      	mov	fp, r3
    if ( !osal_queue_receive(_usbd_q, &event) ) return;
1000423a:	4653      	mov	r3, sl
1000423c:	681d      	ldr	r5, [r3, #0]
 * method will block until it is released.
 *
 * \param critsec Pointer to critical_section structure
 */
static inline void critical_section_enter_blocking(critical_section_t *critsec) {
    critsec->save = spin_lock_blocking(critsec->core.spin_lock);
1000423e:	69aa      	ldr	r2, [r5, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004240:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
10004244:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004246:	6813      	ldr	r3, [r2, #0]
10004248:	2b00      	cmp	r3, #0
1000424a:	d0fc      	beq.n	10004246 <tud_task+0x2e>
    __asm volatile ("dmb");
1000424c:	f3bf 8f5f 	dmb	sy
10004250:	61e9      	str	r1, [r5, #28]
  //  however osal_queue_recieve may be. therefore my assumption is that
  //  the fifo mutex is not populated for queues used from an IRQ context
  assert(!qhdl->ff.mutex);

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
10004252:	0028      	movs	r0, r5
10004254:	0039      	movs	r1, r7
10004256:	f7ff fdcf 	bl	10003df8 <tu_fifo_read>
 *  \ingroup critical_section
 *
 * \param critsec Pointer to critical_section structure
 */
static inline void critical_section_exit(critical_section_t *critsec) {
    spin_unlock(critsec->core.spin_lock, critsec->save);
1000425a:	69aa      	ldr	r2, [r5, #24]
1000425c:	0004      	movs	r4, r0
1000425e:	69eb      	ldr	r3, [r5, #28]
10004260:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004264:	2100      	movs	r1, #0
10004266:	6011      	str	r1, [r2, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004268:	f383 8810 	msr	PRIMASK, r3
1000426c:	2800      	cmp	r0, #0
1000426e:	d100      	bne.n	10004272 <tud_task+0x5a>
10004270:	e102      	b.n	10004478 <tud_task+0x260>
    switch ( event.event_id )
10004272:	787b      	ldrb	r3, [r7, #1]
10004274:	2b08      	cmp	r3, #8
10004276:	d8e0      	bhi.n	1000423a <tud_task+0x22>
10004278:	465a      	mov	r2, fp
1000427a:	009b      	lsls	r3, r3, #2
1000427c:	58d3      	ldr	r3, [r2, r3]
1000427e:	469f      	mov	pc, r3
        }
      break;

      case USBD_EVENT_FUNC_CALL:
        TU_LOG2("\r\n");
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
10004280:	687b      	ldr	r3, [r7, #4]
10004282:	2b00      	cmp	r3, #0
10004284:	d0d9      	beq.n	1000423a <tud_task+0x22>
10004286:	68b8      	ldr	r0, [r7, #8]
10004288:	4798      	blx	r3
  {
1000428a:	e7d6      	b.n	1000423a <tud_task+0x22>
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
1000428c:	227f      	movs	r2, #127	; 0x7f
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
1000428e:	7939      	ldrb	r1, [r7, #4]
        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
10004290:	4b9d      	ldr	r3, [pc, #628]	; (10004508 <tud_task+0x2f0>)
10004292:	400a      	ands	r2, r1
10004294:	0054      	lsls	r4, r2, #1
10004296:	09c8      	lsrs	r0, r1, #7
10004298:	191b      	adds	r3, r3, r4
1000429a:	181b      	adds	r3, r3, r0
1000429c:	0018      	movs	r0, r3
1000429e:	2501      	movs	r5, #1
100042a0:	3020      	adds	r0, #32
100042a2:	7944      	ldrb	r4, [r0, #5]
100042a4:	43ac      	bics	r4, r5
100042a6:	7144      	strb	r4, [r0, #5]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
100042a8:	7944      	ldrb	r4, [r0, #5]
100042aa:	3503      	adds	r5, #3
100042ac:	43ac      	bics	r4, r5
100042ae:	7144      	strb	r4, [r0, #5]
        if ( 0 == epnum )
100042b0:	2a00      	cmp	r2, #0
100042b2:	d100      	bne.n	100042b6 <tud_task+0x9e>
100042b4:	e0e7      	b.n	10004486 <tud_task+0x26e>
  if ( usbd_app_driver_get_cb )
100042b6:	4a95      	ldr	r2, [pc, #596]	; (1000450c <tud_task+0x2f4>)
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
100042b8:	7cdb      	ldrb	r3, [r3, #19]
  if ( usbd_app_driver_get_cb )
100042ba:	2a00      	cmp	r2, #0
100042bc:	d006      	beq.n	100042cc <tud_task+0xb4>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
100042be:	4a94      	ldr	r2, [pc, #592]	; (10004510 <tud_task+0x2f8>)
100042c0:	7812      	ldrb	r2, [r2, #0]
100042c2:	4293      	cmp	r3, r2
100042c4:	d200      	bcs.n	100042c8 <tud_task+0xb0>
100042c6:	e16f      	b.n	100045a8 <tud_task+0x390>
    drvid -= _app_driver_count;
100042c8:	1a9b      	subs	r3, r3, r2
100042ca:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
100042cc:	2b00      	cmp	r3, #0
100042ce:	d000      	beq.n	100042d2 <tud_task+0xba>
100042d0:	e0d2      	b.n	10004478 <tud_task+0x260>
100042d2:	4c90      	ldr	r4, [pc, #576]	; (10004514 <tud_task+0x2fc>)
          driver->xfer_cb(event.rhport, ep_addr, event.xfer_complete.result, event.xfer_complete.len);
100042d4:	797a      	ldrb	r2, [r7, #5]
100042d6:	7838      	ldrb	r0, [r7, #0]
100042d8:	68bb      	ldr	r3, [r7, #8]
100042da:	47a0      	blx	r4
100042dc:	e7ad      	b.n	1000423a <tud_task+0x22>
        _usbd_dev.connected = 1;
100042de:	4b8a      	ldr	r3, [pc, #552]	; (10004508 <tud_task+0x2f0>)
100042e0:	2601      	movs	r6, #1
100042e2:	4698      	mov	r8, r3
100042e4:	4642      	mov	r2, r8
100042e6:	781b      	ldrb	r3, [r3, #0]

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
  usbd_control_set_complete_callback(NULL);
100042e8:	2000      	movs	r0, #0
        _usbd_dev.connected = 1;
100042ea:	4333      	orrs	r3, r6
100042ec:	7013      	strb	r3, [r2, #0]
        if ( !process_control_request(event.rhport, &event.setup_received) )
100042ee:	783b      	ldrb	r3, [r7, #0]
100042f0:	4699      	mov	r9, r3
  usbd_control_set_complete_callback(NULL);
100042f2:	f000 fd93 	bl	10004e1c <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
100042f6:	2360      	movs	r3, #96	; 0x60
100042f8:	793d      	ldrb	r5, [r7, #4]
100042fa:	402b      	ands	r3, r5
100042fc:	2b60      	cmp	r3, #96	; 0x60
100042fe:	d00d      	beq.n	1000431c <tud_task+0x104>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
10004300:	2b40      	cmp	r3, #64	; 0x40
10004302:	d100      	bne.n	10004306 <tud_task+0xee>
10004304:	e0db      	b.n	100044be <tud_task+0x2a6>
    TU_LOG2("  %s", _tusb_std_request_str[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG2("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
10004306:	06ed      	lsls	r5, r5, #27
10004308:	0eed      	lsrs	r5, r5, #27
1000430a:	2d01      	cmp	r5, #1
1000430c:	d100      	bne.n	10004310 <tud_task+0xf8>
1000430e:	e156      	b.n	100045be <tud_task+0x3a6>
10004310:	2d02      	cmp	r5, #2
10004312:	d100      	bne.n	10004316 <tud_task+0xfe>
10004314:	e112      	b.n	1000453c <tud_task+0x324>
10004316:	2d00      	cmp	r5, #0
10004318:	d100      	bne.n	1000431c <tud_task+0x104>
1000431a:	e0e2      	b.n	100044e2 <tud_task+0x2ca>
          dcd_edpt_stall(event.rhport, 0);
1000431c:	7838      	ldrb	r0, [r7, #0]
1000431e:	2100      	movs	r1, #0
10004320:	f000 fff0 	bl	10005304 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
10004324:	2180      	movs	r1, #128	; 0x80
10004326:	7838      	ldrb	r0, [r7, #0]
10004328:	f000 ffec 	bl	10005304 <dcd_edpt_stall>
1000432c:	e785      	b.n	1000423a <tud_task+0x22>
        if (tud_resume_cb) tud_resume_cb();
1000432e:	4b7a      	ldr	r3, [pc, #488]	; (10004518 <tud_task+0x300>)
10004330:	2b00      	cmp	r3, #0
10004332:	d082      	beq.n	1000423a <tud_task+0x22>
10004334:	e000      	b.n	10004338 <tud_task+0x120>
10004336:	bf00      	nop
10004338:	e77f      	b.n	1000423a <tud_task+0x22>
        if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
1000433a:	4b78      	ldr	r3, [pc, #480]	; (1000451c <tud_task+0x304>)
1000433c:	2b00      	cmp	r3, #0
1000433e:	d100      	bne.n	10004342 <tud_task+0x12a>
10004340:	e77b      	b.n	1000423a <tud_task+0x22>
10004342:	4b71      	ldr	r3, [pc, #452]	; (10004508 <tud_task+0x2f0>)
10004344:	7818      	ldrb	r0, [r3, #0]
10004346:	0700      	lsls	r0, r0, #28
10004348:	0fc0      	lsrs	r0, r0, #31
1000434a:	e000      	b.n	1000434e <tud_task+0x136>
1000434c:	bf00      	nop
1000434e:	e774      	b.n	1000423a <tud_task+0x22>
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10004350:	4d6f      	ldr	r5, [pc, #444]	; (10004510 <tud_task+0x2f8>)
10004352:	4a6e      	ldr	r2, [pc, #440]	; (1000450c <tud_task+0x2f4>)
10004354:	2400      	movs	r4, #0
10004356:	782b      	ldrb	r3, [r5, #0]
10004358:	2a00      	cmp	r2, #0
1000435a:	d100      	bne.n	1000435e <tud_task+0x146>
1000435c:	e099      	b.n	10004492 <tud_task+0x27a>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
1000435e:	4e70      	ldr	r6, [pc, #448]	; (10004520 <tud_task+0x308>)
10004360:	42a3      	cmp	r3, r4
10004362:	d809      	bhi.n	10004378 <tud_task+0x160>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10004364:	42a3      	cmp	r3, r4
10004366:	d000      	beq.n	1000436a <tud_task+0x152>
10004368:	e096      	b.n	10004498 <tud_task+0x280>
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
1000436a:	3401      	adds	r4, #1
1000436c:	b2e4      	uxtb	r4, r4
1000436e:	429c      	cmp	r4, r3
10004370:	d900      	bls.n	10004374 <tud_task+0x15c>
10004372:	e762      	b.n	1000423a <tud_task+0x22>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10004374:	42a3      	cmp	r3, r4
10004376:	d9f5      	bls.n	10004364 <tud_task+0x14c>
          if ( driver->sof ) driver->sof(event.rhport);
10004378:	6831      	ldr	r1, [r6, #0]
1000437a:	00e2      	lsls	r2, r4, #3
1000437c:	468c      	mov	ip, r1
1000437e:	1b12      	subs	r2, r2, r4
10004380:	0092      	lsls	r2, r2, #2
10004382:	4462      	add	r2, ip
10004384:	6992      	ldr	r2, [r2, #24]
10004386:	2a00      	cmp	r2, #0
10004388:	d0ef      	beq.n	1000436a <tud_task+0x152>
1000438a:	7838      	ldrb	r0, [r7, #0]
1000438c:	4790      	blx	r2
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
1000438e:	3401      	adds	r4, #1
10004390:	782b      	ldrb	r3, [r5, #0]
10004392:	b2e4      	uxtb	r4, r4
10004394:	429c      	cmp	r4, r3
10004396:	d9e3      	bls.n	10004360 <tud_task+0x148>
10004398:	e74f      	b.n	1000423a <tud_task+0x22>
  tu_varclr(&_usbd_dev);
1000439a:	2237      	movs	r2, #55	; 0x37
1000439c:	2100      	movs	r1, #0
1000439e:	485a      	ldr	r0, [pc, #360]	; (10004508 <tud_task+0x2f0>)
        usbd_reset(event.rhport);
100043a0:	783e      	ldrb	r6, [r7, #0]
  tu_varclr(&_usbd_dev);
100043a2:	f7fc ff07 	bl	100011b4 <__wrap_memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
100043a6:	2210      	movs	r2, #16
100043a8:	21ff      	movs	r1, #255	; 0xff
100043aa:	485e      	ldr	r0, [pc, #376]	; (10004524 <tud_task+0x30c>)
100043ac:	f7fc ff02 	bl	100011b4 <__wrap_memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
100043b0:	4855      	ldr	r0, [pc, #340]	; (10004508 <tud_task+0x2f0>)
100043b2:	2212      	movs	r2, #18
100043b4:	21ff      	movs	r1, #255	; 0xff
100043b6:	3013      	adds	r0, #19
100043b8:	f7fc fefc 	bl	100011b4 <__wrap_memset>
  usbd_control_reset();
100043bc:	f000 fd24 	bl	10004e08 <usbd_control_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
100043c0:	4d53      	ldr	r5, [pc, #332]	; (10004510 <tud_task+0x2f8>)
100043c2:	4a52      	ldr	r2, [pc, #328]	; (1000450c <tud_task+0x2f4>)
100043c4:	2400      	movs	r4, #0
100043c6:	782b      	ldrb	r3, [r5, #0]
100043c8:	2a00      	cmp	r2, #0
100043ca:	d100      	bne.n	100043ce <tud_task+0x1b6>
100043cc:	e070      	b.n	100044b0 <tud_task+0x298>
100043ce:	4a56      	ldr	r2, [pc, #344]	; (10004528 <tud_task+0x310>)
100043d0:	4690      	mov	r8, r2
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
100043d2:	4a53      	ldr	r2, [pc, #332]	; (10004520 <tud_task+0x308>)
100043d4:	4691      	mov	r9, r2
100043d6:	42a3      	cmp	r3, r4
100043d8:	d845      	bhi.n	10004466 <tud_task+0x24e>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
100043da:	d166      	bne.n	100044aa <tud_task+0x292>
100043dc:	4643      	mov	r3, r8
    get_driver(i)->reset(rhport);
100043de:	0030      	movs	r0, r6
100043e0:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
100043e2:	3401      	adds	r4, #1
100043e4:	782b      	ldrb	r3, [r5, #0]
100043e6:	b2e4      	uxtb	r4, r4
100043e8:	42a3      	cmp	r3, r4
100043ea:	d2f4      	bcs.n	100043d6 <tud_task+0x1be>
        if (tud_umount_cb) tud_umount_cb();
100043ec:	4b4f      	ldr	r3, [pc, #316]	; (1000452c <tud_task+0x314>)
100043ee:	2b00      	cmp	r3, #0
100043f0:	d100      	bne.n	100043f4 <tud_task+0x1dc>
100043f2:	e722      	b.n	1000423a <tud_task+0x22>
100043f4:	e000      	b.n	100043f8 <tud_task+0x1e0>
100043f6:	bf00      	nop
100043f8:	e71f      	b.n	1000423a <tud_task+0x22>
  tu_varclr(&_usbd_dev);
100043fa:	4b43      	ldr	r3, [pc, #268]	; (10004508 <tud_task+0x2f0>)
100043fc:	2237      	movs	r2, #55	; 0x37
100043fe:	4698      	mov	r8, r3
10004400:	2100      	movs	r1, #0
10004402:	0018      	movs	r0, r3
        usbd_reset(event.rhport);
10004404:	783e      	ldrb	r6, [r7, #0]
  tu_varclr(&_usbd_dev);
10004406:	f7fc fed5 	bl	100011b4 <__wrap_memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
1000440a:	4643      	mov	r3, r8
1000440c:	2210      	movs	r2, #16
1000440e:	1cd8      	adds	r0, r3, #3
10004410:	21ff      	movs	r1, #255	; 0xff
10004412:	f7fc fecf 	bl	100011b4 <__wrap_memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
10004416:	4640      	mov	r0, r8
10004418:	2212      	movs	r2, #18
1000441a:	21ff      	movs	r1, #255	; 0xff
1000441c:	3013      	adds	r0, #19
1000441e:	f7fc fec9 	bl	100011b4 <__wrap_memset>
  usbd_control_reset();
10004422:	f000 fcf1 	bl	10004e08 <usbd_control_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10004426:	4d3a      	ldr	r5, [pc, #232]	; (10004510 <tud_task+0x2f8>)
10004428:	4a38      	ldr	r2, [pc, #224]	; (1000450c <tud_task+0x2f4>)
1000442a:	2400      	movs	r4, #0
1000442c:	782b      	ldrb	r3, [r5, #0]
1000442e:	2a00      	cmp	r2, #0
10004430:	d035      	beq.n	1000449e <tud_task+0x286>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10004432:	4a3b      	ldr	r2, [pc, #236]	; (10004520 <tud_task+0x308>)
10004434:	4691      	mov	r9, r2
10004436:	429c      	cmp	r4, r3
10004438:	d30c      	bcc.n	10004454 <tud_task+0x23c>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
1000443a:	d136      	bne.n	100044aa <tud_task+0x292>
1000443c:	4b3a      	ldr	r3, [pc, #232]	; (10004528 <tud_task+0x310>)
    get_driver(i)->reset(rhport);
1000443e:	0030      	movs	r0, r6
10004440:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10004442:	3401      	adds	r4, #1
10004444:	782b      	ldrb	r3, [r5, #0]
10004446:	b2e4      	uxtb	r4, r4
10004448:	42a3      	cmp	r3, r4
1000444a:	d2f4      	bcs.n	10004436 <tud_task+0x21e>
        _usbd_dev.speed = event.bus_reset.speed;
1000444c:	4642      	mov	r2, r8
1000444e:	793b      	ldrb	r3, [r7, #4]
10004450:	7093      	strb	r3, [r2, #2]
      break;
10004452:	e6f2      	b.n	1000423a <tud_task+0x22>
    get_driver(i)->reset(rhport);
10004454:	464a      	mov	r2, r9
10004456:	6812      	ldr	r2, [r2, #0]
10004458:	00e3      	lsls	r3, r4, #3
1000445a:	4694      	mov	ip, r2
1000445c:	1b1b      	subs	r3, r3, r4
1000445e:	009b      	lsls	r3, r3, #2
10004460:	4463      	add	r3, ip
10004462:	685b      	ldr	r3, [r3, #4]
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10004464:	e7eb      	b.n	1000443e <tud_task+0x226>
    get_driver(i)->reset(rhport);
10004466:	464a      	mov	r2, r9
10004468:	6812      	ldr	r2, [r2, #0]
1000446a:	00e3      	lsls	r3, r4, #3
1000446c:	4694      	mov	ip, r2
1000446e:	1b1b      	subs	r3, r3, r4
10004470:	009b      	lsls	r3, r3, #2
10004472:	4463      	add	r3, ip
10004474:	685b      	ldr	r3, [r3, #4]
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10004476:	e7b2      	b.n	100043de <tud_task+0x1c6>
}
10004478:	b00b      	add	sp, #44	; 0x2c
1000447a:	bcf0      	pop	{r4, r5, r6, r7}
1000447c:	46bb      	mov	fp, r7
1000447e:	46b2      	mov	sl, r6
10004480:	46a9      	mov	r9, r5
10004482:	46a0      	mov	r8, r4
10004484:	bdf0      	pop	{r4, r5, r6, r7, pc}
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
10004486:	797a      	ldrb	r2, [r7, #5]
10004488:	7838      	ldrb	r0, [r7, #0]
1000448a:	68bb      	ldr	r3, [r7, #8]
1000448c:	f000 fcda 	bl	10004e44 <usbd_control_xfer_cb>
10004490:	e6d3      	b.n	1000423a <tud_task+0x22>
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10004492:	2b00      	cmp	r3, #0
10004494:	d100      	bne.n	10004498 <tud_task+0x280>
10004496:	e6d0      	b.n	1000423a <tud_task+0x22>
          if ( driver->sof ) driver->sof(event.rhport);
10004498:	2300      	movs	r3, #0
1000449a:	699b      	ldr	r3, [r3, #24]
1000449c:	deff      	udf	#255	; 0xff
    get_driver(i)->reset(rhport);
1000449e:	0030      	movs	r0, r6
100044a0:	f7ff facc 	bl	10003a3c <cdcd_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
100044a4:	782b      	ldrb	r3, [r5, #0]
100044a6:	2b00      	cmp	r3, #0
100044a8:	d0d0      	beq.n	1000444c <tud_task+0x234>
    get_driver(i)->reset(rhport);
100044aa:	2300      	movs	r3, #0
100044ac:	685b      	ldr	r3, [r3, #4]
100044ae:	deff      	udf	#255	; 0xff
100044b0:	0030      	movs	r0, r6
100044b2:	f7ff fac3 	bl	10003a3c <cdcd_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
100044b6:	782b      	ldrb	r3, [r5, #0]
100044b8:	2b00      	cmp	r3, #0
100044ba:	d097      	beq.n	100043ec <tud_task+0x1d4>
100044bc:	e7f5      	b.n	100044aa <tud_task+0x292>
    TU_VERIFY(tud_vendor_control_request_cb);
100044be:	4b1c      	ldr	r3, [pc, #112]	; (10004530 <tud_task+0x318>)
100044c0:	2b00      	cmp	r3, #0
100044c2:	d100      	bne.n	100044c6 <tud_task+0x2ae>
100044c4:	e72a      	b.n	1000431c <tud_task+0x104>
    if (tud_vendor_control_complete_cb) usbd_control_set_complete_callback(tud_vendor_control_complete_cb);
100044c6:	481b      	ldr	r0, [pc, #108]	; (10004534 <tud_task+0x31c>)
100044c8:	2800      	cmp	r0, #0
100044ca:	d001      	beq.n	100044d0 <tud_task+0x2b8>
100044cc:	f000 fca6 	bl	10004e1c <usbd_control_set_complete_callback>
    return tud_vendor_control_request_cb(rhport, p_request);
100044d0:	4648      	mov	r0, r9
100044d2:	a908      	add	r1, sp, #32
100044d4:	e000      	b.n	100044d8 <tud_task+0x2c0>
100044d6:	bf00      	nop
100044d8:	0004      	movs	r4, r0
        if ( !process_control_request(event.rhport, &event.setup_received) )
100044da:	2c00      	cmp	r4, #0
100044dc:	d000      	beq.n	100044e0 <tud_task+0x2c8>
100044de:	e6ac      	b.n	1000423a <tud_task+0x22>
100044e0:	e71c      	b.n	1000431c <tud_task+0x104>
  {
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
100044e2:	2b20      	cmp	r3, #32
100044e4:	d100      	bne.n	100044e8 <tud_task+0x2d0>
100044e6:	e09b      	b.n	10004620 <tud_task+0x408>
        TU_VERIFY(driver);

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
      }
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
100044e8:	2b00      	cmp	r3, #0
100044ea:	d000      	beq.n	100044ee <tud_task+0x2d6>
100044ec:	e716      	b.n	1000431c <tud_task+0x104>
        // Non standard request is not supported
        TU_BREAKPOINT();
        return false;
      }

      switch ( p_request->bRequest )
100044ee:	797b      	ldrb	r3, [r7, #5]
100044f0:	2b09      	cmp	r3, #9
100044f2:	d900      	bls.n	100044f6 <tud_task+0x2de>
100044f4:	e712      	b.n	1000431c <tud_task+0x104>
100044f6:	4a10      	ldr	r2, [pc, #64]	; (10004538 <tud_task+0x320>)
100044f8:	009b      	lsls	r3, r3, #2
100044fa:	58d3      	ldr	r3, [r2, r3]
100044fc:	469f      	mov	pc, r3
100044fe:	46c0      	nop			; (mov r8, r8)
10004500:	2003da3c 	.word	0x2003da3c
10004504:	1000a4c8 	.word	0x1000a4c8
10004508:	2003da00 	.word	0x2003da00
1000450c:	00000000 	.word	0x00000000
10004510:	2003e341 	.word	0x2003e341
10004514:	10003bf9 	.word	0x10003bf9
	...
10004520:	2003d6d0 	.word	0x2003d6d0
10004524:	2003da03 	.word	0x2003da03
10004528:	10003a3d 	.word	0x10003a3d
	...
10004538:	1000a4ec 	.word	0x1000a4ec
1000453c:	227f      	movs	r2, #127	; 0x7f
static inline uint8_t tu_u16_low (uint16_t u16) { return (uint8_t) (u16 & 0x00ff); }
1000453e:	7a39      	ldrb	r1, [r7, #8]
10004540:	400a      	ands	r2, r1
10004542:	9202      	str	r2, [sp, #8]
    {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
10004544:	2a08      	cmp	r2, #8
10004546:	d900      	bls.n	1000454a <tud_task+0x332>
10004548:	e6e8      	b.n	1000431c <tud_task+0x104>
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
1000454a:	09c8      	lsrs	r0, r1, #7
1000454c:	9001      	str	r0, [sp, #4]

      bool ret = false;

      // Handle STD request to endpoint
      if ( TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type )
1000454e:	2b00      	cmp	r3, #0
10004550:	d100      	bne.n	10004554 <tud_task+0x33c>
10004552:	e082      	b.n	1000465a <tud_task+0x442>
      bool ret = false;
10004554:	2400      	movs	r4, #0
10004556:	0053      	lsls	r3, r2, #1
10004558:	9302      	str	r3, [sp, #8]
          // Unknown/Unsupported request
          default: TU_BREAKPOINT(); return false;
        }
      }

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
1000455a:	9a01      	ldr	r2, [sp, #4]
1000455c:	9b02      	ldr	r3, [sp, #8]
1000455e:	4694      	mov	ip, r2
10004560:	4443      	add	r3, r8
  if ( usbd_app_driver_get_cb )
10004562:	4ac9      	ldr	r2, [pc, #804]	; (10004888 <tud_task+0x670>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
10004564:	4463      	add	r3, ip
10004566:	7cdb      	ldrb	r3, [r3, #19]
  if ( usbd_app_driver_get_cb )
10004568:	2a00      	cmp	r2, #0
1000456a:	d006      	beq.n	1000457a <tud_task+0x362>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
1000456c:	4ac7      	ldr	r2, [pc, #796]	; (1000488c <tud_task+0x674>)
1000456e:	7812      	ldrb	r2, [r2, #0]
10004570:	4293      	cmp	r3, r2
10004572:	d200      	bcs.n	10004576 <tud_task+0x35e>
10004574:	e100      	b.n	10004778 <tud_task+0x560>
    drvid -= _app_driver_count;
10004576:	1a9b      	subs	r3, r3, r2
10004578:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
1000457a:	2b00      	cmp	r3, #0
1000457c:	d000      	beq.n	10004580 <tud_task+0x368>
1000457e:	e0f2      	b.n	10004766 <tud_task+0x54e>
10004580:	48c3      	ldr	r0, [pc, #780]	; (10004890 <tud_task+0x678>)
10004582:	4dc4      	ldr	r5, [pc, #784]	; (10004894 <tud_task+0x67c>)
  usbd_control_set_complete_callback(driver->control_complete);
10004584:	f000 fc4a 	bl	10004e1c <usbd_control_set_complete_callback>
  return driver->control_request(rhport, request);
10004588:	4648      	mov	r0, r9
1000458a:	68eb      	ldr	r3, [r5, #12]
1000458c:	a908      	add	r1, sp, #32
1000458e:	4798      	blx	r3
        // We will forward all request targeted endpoint to class drivers after
        // - For class-type requests: driver is fully responsible to reply to host
        // - For std-type requests  : driver init/re-init internal variable/buffer only, and
        //                            must not call tud_control_status(), driver's return value will have no effect.
        //                            EP state has already affected (stalled/cleared)
        if ( invoke_class_control(rhport, driver, p_request) ) ret = true;
10004590:	2800      	cmp	r0, #0
10004592:	d100      	bne.n	10004596 <tud_task+0x37e>
10004594:	e0e7      	b.n	10004766 <tud_task+0x54e>
      }

      if ( TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type )
10004596:	2260      	movs	r2, #96	; 0x60
10004598:	793b      	ldrb	r3, [r7, #4]
1000459a:	421a      	tst	r2, r3
1000459c:	d000      	beq.n	100045a0 <tud_task+0x388>
1000459e:	e64c      	b.n	1000423a <tud_task+0x22>
      {
        // Set complete callback = NULL since it can also stall the request.
        usbd_control_set_complete_callback(NULL);
100045a0:	2000      	movs	r0, #0
100045a2:	f000 fc3b 	bl	10004e1c <usbd_control_set_complete_callback>
100045a6:	e648      	b.n	1000423a <tud_task+0x22>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
100045a8:	00da      	lsls	r2, r3, #3
100045aa:	1ad3      	subs	r3, r2, r3
100045ac:	4aba      	ldr	r2, [pc, #744]	; (10004898 <tud_task+0x680>)
100045ae:	009b      	lsls	r3, r3, #2
100045b0:	6812      	ldr	r2, [r2, #0]
100045b2:	18d3      	adds	r3, r2, r3
          TU_ASSERT(driver, );
100045b4:	2b00      	cmp	r3, #0
100045b6:	d100      	bne.n	100045ba <tud_task+0x3a2>
100045b8:	e75e      	b.n	10004478 <tud_task+0x260>
          driver->xfer_cb(event.rhport, ep_addr, event.xfer_complete.result, event.xfer_complete.len);
100045ba:	695c      	ldr	r4, [r3, #20]
100045bc:	e68a      	b.n	100042d4 <tud_task+0xbc>
100045be:	7a3b      	ldrb	r3, [r7, #8]
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
100045c0:	2b0f      	cmp	r3, #15
100045c2:	d900      	bls.n	100045c6 <tud_task+0x3ae>
100045c4:	e6aa      	b.n	1000431c <tud_task+0x104>
  if ( usbd_app_driver_get_cb )
100045c6:	4ab0      	ldr	r2, [pc, #704]	; (10004888 <tud_task+0x670>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
100045c8:	4443      	add	r3, r8
100045ca:	78db      	ldrb	r3, [r3, #3]
  if ( usbd_app_driver_get_cb )
100045cc:	2a00      	cmp	r2, #0
100045ce:	d005      	beq.n	100045dc <tud_task+0x3c4>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
100045d0:	4aae      	ldr	r2, [pc, #696]	; (1000488c <tud_task+0x674>)
100045d2:	7812      	ldrb	r2, [r2, #0]
100045d4:	4293      	cmp	r3, r2
100045d6:	d35e      	bcc.n	10004696 <tud_task+0x47e>
    drvid -= _app_driver_count;
100045d8:	1a9b      	subs	r3, r3, r2
100045da:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
100045dc:	2b00      	cmp	r3, #0
100045de:	d000      	beq.n	100045e2 <tud_task+0x3ca>
100045e0:	e69c      	b.n	1000431c <tud_task+0x104>
100045e2:	48ab      	ldr	r0, [pc, #684]	; (10004890 <tud_task+0x678>)
100045e4:	4cab      	ldr	r4, [pc, #684]	; (10004894 <tud_task+0x67c>)
  usbd_control_set_complete_callback(driver->control_complete);
100045e6:	f000 fc19 	bl	10004e1c <usbd_control_set_complete_callback>
  return driver->control_request(rhport, request);
100045ea:	4648      	mov	r0, r9
100045ec:	68e3      	ldr	r3, [r4, #12]
100045ee:	a908      	add	r1, sp, #32
100045f0:	4798      	blx	r3
      if ( !invoke_class_control(rhport, driver, p_request) )
100045f2:	2800      	cmp	r0, #0
100045f4:	d000      	beq.n	100045f8 <tud_task+0x3e0>
100045f6:	e620      	b.n	1000423a <tud_task+0x22>
        TU_VERIFY( TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type &&
100045f8:	2260      	movs	r2, #96	; 0x60
100045fa:	0011      	movs	r1, r2
100045fc:	793b      	ldrb	r3, [r7, #4]
100045fe:	4019      	ands	r1, r3
10004600:	421a      	tst	r2, r3
10004602:	d000      	beq.n	10004606 <tud_task+0x3ee>
10004604:	e68a      	b.n	1000431c <tud_task+0x104>
10004606:	797b      	ldrb	r3, [r7, #5]
10004608:	2b0a      	cmp	r3, #10
1000460a:	d000      	beq.n	1000460e <tud_task+0x3f6>
1000460c:	e686      	b.n	1000431c <tud_task+0x104>
        uint8_t alternate = 0;
1000460e:	ab06      	add	r3, sp, #24
10004610:	1c9a      	adds	r2, r3, #2
10004612:	7011      	strb	r1, [r2, #0]
        tud_control_xfer(rhport, p_request, &alternate, 1);
10004614:	2301      	movs	r3, #1
10004616:	4648      	mov	r0, r9
10004618:	a908      	add	r1, sp, #32
1000461a:	f000 fb97 	bl	10004d4c <tud_control_xfer>
1000461e:	e60c      	b.n	1000423a <tud_task+0x22>
10004620:	7a3b      	ldrb	r3, [r7, #8]
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
10004622:	2b0f      	cmp	r3, #15
10004624:	d900      	bls.n	10004628 <tud_task+0x410>
10004626:	e679      	b.n	1000431c <tud_task+0x104>
  if ( usbd_app_driver_get_cb )
10004628:	4a97      	ldr	r2, [pc, #604]	; (10004888 <tud_task+0x670>)
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
1000462a:	4443      	add	r3, r8
1000462c:	78db      	ldrb	r3, [r3, #3]
  if ( usbd_app_driver_get_cb )
1000462e:	2a00      	cmp	r2, #0
10004630:	d006      	beq.n	10004640 <tud_task+0x428>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10004632:	4a96      	ldr	r2, [pc, #600]	; (1000488c <tud_task+0x674>)
10004634:	7812      	ldrb	r2, [r2, #0]
10004636:	4293      	cmp	r3, r2
10004638:	d200      	bcs.n	1000463c <tud_task+0x424>
1000463a:	e0c7      	b.n	100047cc <tud_task+0x5b4>
    drvid -= _app_driver_count;
1000463c:	1a9b      	subs	r3, r3, r2
1000463e:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10004640:	2b00      	cmp	r3, #0
10004642:	d000      	beq.n	10004646 <tud_task+0x42e>
10004644:	e66a      	b.n	1000431c <tud_task+0x104>
10004646:	4892      	ldr	r0, [pc, #584]	; (10004890 <tud_task+0x678>)
10004648:	4c92      	ldr	r4, [pc, #584]	; (10004894 <tud_task+0x67c>)
  usbd_control_set_complete_callback(driver->control_complete);
1000464a:	f000 fbe7 	bl	10004e1c <usbd_control_set_complete_callback>
  return driver->control_request(rhport, request);
1000464e:	68e3      	ldr	r3, [r4, #12]
10004650:	4648      	mov	r0, r9
10004652:	a908      	add	r1, sp, #32
10004654:	4798      	blx	r3
10004656:	0004      	movs	r4, r0
        return invoke_class_control(rhport, driver, p_request);
10004658:	e73f      	b.n	100044da <tud_task+0x2c2>
        switch ( p_request->bRequest )
1000465a:	797b      	ldrb	r3, [r7, #5]
1000465c:	9303      	str	r3, [sp, #12]
1000465e:	2b01      	cmp	r3, #1
10004660:	d100      	bne.n	10004664 <tud_task+0x44c>
10004662:	e09d      	b.n	100047a0 <tud_task+0x588>
10004664:	2b03      	cmp	r3, #3
10004666:	d100      	bne.n	1000466a <tud_task+0x452>
10004668:	e090      	b.n	1000478c <tud_task+0x574>
1000466a:	2b00      	cmp	r3, #0
1000466c:	d000      	beq.n	10004670 <tud_task+0x458>
1000466e:	e655      	b.n	1000431c <tud_task+0x104>
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].stalled;
10004670:	0053      	lsls	r3, r2, #1
10004672:	9a01      	ldr	r2, [sp, #4]
10004674:	9302      	str	r3, [sp, #8]
10004676:	4694      	mov	ip, r2
10004678:	4443      	add	r3, r8
1000467a:	4463      	add	r3, ip
1000467c:	3320      	adds	r3, #32
1000467e:	795b      	ldrb	r3, [r3, #5]
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
10004680:	aa06      	add	r2, sp, #24
  return _usbd_dev.ep_status[epnum][dir].stalled;
10004682:	079b      	lsls	r3, r3, #30
10004684:	0fdb      	lsrs	r3, r3, #31
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
10004686:	3202      	adds	r2, #2
10004688:	8013      	strh	r3, [r2, #0]
            tud_control_xfer(rhport, p_request, &status, 2);
1000468a:	4648      	mov	r0, r9
1000468c:	2302      	movs	r3, #2
1000468e:	a908      	add	r1, sp, #32
10004690:	f000 fb5c 	bl	10004d4c <tud_control_xfer>
          break;
10004694:	e761      	b.n	1000455a <tud_task+0x342>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10004696:	4a80      	ldr	r2, [pc, #512]	; (10004898 <tud_task+0x680>)
10004698:	00dc      	lsls	r4, r3, #3
1000469a:	1ae3      	subs	r3, r4, r3
1000469c:	6814      	ldr	r4, [r2, #0]
1000469e:	009b      	lsls	r3, r3, #2
100046a0:	18e4      	adds	r4, r4, r3
      TU_VERIFY(driver);
100046a2:	2c00      	cmp	r4, #0
100046a4:	d100      	bne.n	100046a8 <tud_task+0x490>
100046a6:	e639      	b.n	1000431c <tud_task+0x104>
  usbd_control_set_complete_callback(driver->control_complete);
100046a8:	6920      	ldr	r0, [r4, #16]
100046aa:	e79c      	b.n	100045e6 <tud_task+0x3ce>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
100046ac:	88fb      	ldrh	r3, [r7, #6]
100046ae:	2b01      	cmp	r3, #1
100046b0:	d000      	beq.n	100046b4 <tud_task+0x49c>
100046b2:	e633      	b.n	1000431c <tud_task+0x104>
          _usbd_dev.remote_wakeup_en = false;
100046b4:	4643      	mov	r3, r8
100046b6:	2208      	movs	r2, #8
100046b8:	781b      	ldrb	r3, [r3, #0]
100046ba:	4393      	bics	r3, r2
100046bc:	4642      	mov	r2, r8
          tud_control_status(rhport, p_request);
100046be:	4648      	mov	r0, r9
100046c0:	a908      	add	r1, sp, #32
          _usbd_dev.remote_wakeup_en = false;
100046c2:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
100046c4:	f000 fb2a 	bl	10004d1c <tud_control_status>
        break;
100046c8:	e5b7      	b.n	1000423a <tud_task+0x22>
          uint16_t status = (_usbd_dev.self_powered ? 1 : 0) | (_usbd_dev.remote_wakeup_en ? 2 : 0);
100046ca:	4643      	mov	r3, r8
100046cc:	2002      	movs	r0, #2
100046ce:	7819      	ldrb	r1, [r3, #0]
100046d0:	ab06      	add	r3, sp, #24
100046d2:	1c9a      	adds	r2, r3, #2
100046d4:	068b      	lsls	r3, r1, #26
100046d6:	0889      	lsrs	r1, r1, #2
100046d8:	4001      	ands	r1, r0
100046da:	0fdb      	lsrs	r3, r3, #31
100046dc:	430b      	orrs	r3, r1
100046de:	8013      	strh	r3, [r2, #0]
          tud_control_xfer(rhport, p_request, &status, 2);
100046e0:	4648      	mov	r0, r9
100046e2:	2302      	movs	r3, #2
100046e4:	a908      	add	r1, sp, #32
100046e6:	f000 fb31 	bl	10004d4c <tud_control_xfer>
        break;
100046ea:	e5a6      	b.n	1000423a <tud_task+0x22>
          if ( !_usbd_dev.cfg_num && cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
100046ec:	4643      	mov	r3, r8
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
100046ee:	79ba      	ldrb	r2, [r7, #6]
100046f0:	9203      	str	r2, [sp, #12]
          if ( !_usbd_dev.cfg_num && cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
100046f2:	785b      	ldrb	r3, [r3, #1]
100046f4:	2b00      	cmp	r3, #0
100046f6:	d102      	bne.n	100046fe <tud_task+0x4e6>
100046f8:	2a00      	cmp	r2, #0
100046fa:	d000      	beq.n	100046fe <tud_task+0x4e6>
100046fc:	e084      	b.n	10004808 <tud_task+0x5f0>
          _usbd_dev.cfg_num = cfg_num;
100046fe:	4643      	mov	r3, r8
10004700:	9a03      	ldr	r2, [sp, #12]
          tud_control_status(rhport, p_request);
10004702:	4648      	mov	r0, r9
10004704:	a908      	add	r1, sp, #32
          _usbd_dev.cfg_num = cfg_num;
10004706:	705a      	strb	r2, [r3, #1]
          tud_control_status(rhport, p_request);
10004708:	f000 fb08 	bl	10004d1c <tud_control_status>
        break;
1000470c:	e595      	b.n	1000423a <tud_task+0x22>
          uint8_t cfg_num = _usbd_dev.cfg_num;
1000470e:	4643      	mov	r3, r8
10004710:	aa06      	add	r2, sp, #24
10004712:	785b      	ldrb	r3, [r3, #1]
10004714:	3202      	adds	r2, #2
10004716:	7013      	strb	r3, [r2, #0]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
10004718:	4648      	mov	r0, r9
1000471a:	2301      	movs	r3, #1
1000471c:	a908      	add	r1, sp, #32
1000471e:	f000 fb15 	bl	10004d4c <tud_control_xfer>
        break;
10004722:	e58a      	b.n	1000423a <tud_task+0x22>
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
10004724:	88fb      	ldrh	r3, [r7, #6]
10004726:	79b8      	ldrb	r0, [r7, #6]
  switch(desc_type)
10004728:	0a1b      	lsrs	r3, r3, #8
1000472a:	2b0f      	cmp	r3, #15
1000472c:	d900      	bls.n	10004730 <tud_task+0x518>
1000472e:	e5f5      	b.n	1000431c <tud_task+0x104>
10004730:	4a5a      	ldr	r2, [pc, #360]	; (1000489c <tud_task+0x684>)
10004732:	009b      	lsls	r3, r3, #2
10004734:	58d3      	ldr	r3, [r2, r3]
10004736:	469f      	mov	pc, r3
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
10004738:	a808      	add	r0, sp, #32
1000473a:	f000 fb75 	bl	10004e28 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
1000473e:	4648      	mov	r0, r9
10004740:	79b9      	ldrb	r1, [r7, #6]
10004742:	f000 fc95 	bl	10005070 <dcd_set_address>
          _usbd_dev.addressed = 1;
10004746:	4643      	mov	r3, r8
10004748:	2202      	movs	r2, #2
1000474a:	781b      	ldrb	r3, [r3, #0]
1000474c:	4313      	orrs	r3, r2
1000474e:	4642      	mov	r2, r8
10004750:	7013      	strb	r3, [r2, #0]
        break;
10004752:	e572      	b.n	1000423a <tud_task+0x22>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
10004754:	88fb      	ldrh	r3, [r7, #6]
10004756:	2b01      	cmp	r3, #1
10004758:	d000      	beq.n	1000475c <tud_task+0x544>
1000475a:	e5df      	b.n	1000431c <tud_task+0x104>
          _usbd_dev.remote_wakeup_en = true;
1000475c:	4643      	mov	r3, r8
1000475e:	2208      	movs	r2, #8
10004760:	781b      	ldrb	r3, [r3, #0]
10004762:	4313      	orrs	r3, r2
10004764:	e7aa      	b.n	100046bc <tud_task+0x4a4>
      if ( TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type )
10004766:	2260      	movs	r2, #96	; 0x60
10004768:	793b      	ldrb	r3, [r7, #4]
1000476a:	421a      	tst	r2, r3
1000476c:	d000      	beq.n	10004770 <tud_task+0x558>
1000476e:	e6b4      	b.n	100044da <tud_task+0x2c2>
        usbd_control_set_complete_callback(NULL);
10004770:	2000      	movs	r0, #0
10004772:	f000 fb53 	bl	10004e1c <usbd_control_set_complete_callback>
10004776:	e6b0      	b.n	100044da <tud_task+0x2c2>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10004778:	4a47      	ldr	r2, [pc, #284]	; (10004898 <tud_task+0x680>)
1000477a:	00dd      	lsls	r5, r3, #3
1000477c:	1aeb      	subs	r3, r5, r3
1000477e:	6815      	ldr	r5, [r2, #0]
10004780:	009b      	lsls	r3, r3, #2
10004782:	18ed      	adds	r5, r5, r3
      if (driver)
10004784:	2d00      	cmp	r5, #0
10004786:	d0ee      	beq.n	10004766 <tud_task+0x54e>
  usbd_control_set_complete_callback(driver->control_complete);
10004788:	6928      	ldr	r0, [r5, #16]
1000478a:	e6fb      	b.n	10004584 <tud_task+0x36c>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) usbd_edpt_stall(rhport, ep_addr);
1000478c:	88fb      	ldrh	r3, [r7, #6]
1000478e:	2b00      	cmp	r3, #0
10004790:	d027      	beq.n	100047e2 <tud_task+0x5ca>
10004792:	0053      	lsls	r3, r2, #1
10004794:	9302      	str	r3, [sp, #8]
            tud_control_status(rhport, p_request);
10004796:	4648      	mov	r0, r9
10004798:	a908      	add	r1, sp, #32
1000479a:	f000 fabf 	bl	10004d1c <tud_control_status>
          break;
1000479e:	e6dc      	b.n	1000455a <tud_task+0x342>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) usbd_edpt_clear_stall(rhport, ep_addr);
100047a0:	88fb      	ldrh	r3, [r7, #6]
100047a2:	2b00      	cmp	r3, #0
100047a4:	d1f5      	bne.n	10004792 <tud_task+0x57a>
  dcd_edpt_clear_stall(rhport, ep_addr);
100047a6:	4648      	mov	r0, r9
100047a8:	f000 fdd4 	bl	10005354 <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = false;
100047ac:	9a01      	ldr	r2, [sp, #4]
100047ae:	9b02      	ldr	r3, [sp, #8]
100047b0:	4694      	mov	ip, r2
100047b2:	005b      	lsls	r3, r3, #1
100047b4:	9302      	str	r3, [sp, #8]
100047b6:	4443      	add	r3, r8
100047b8:	4463      	add	r3, ip
100047ba:	3320      	adds	r3, #32
100047bc:	795a      	ldrb	r2, [r3, #5]
  _usbd_dev.ep_status[epnum][dir].busy = false;
100047be:	9903      	ldr	r1, [sp, #12]
  _usbd_dev.ep_status[epnum][dir].stalled = false;
100047c0:	43aa      	bics	r2, r5
100047c2:	715a      	strb	r2, [r3, #5]
  _usbd_dev.ep_status[epnum][dir].busy = false;
100047c4:	795a      	ldrb	r2, [r3, #5]
100047c6:	438a      	bics	r2, r1
100047c8:	715a      	strb	r2, [r3, #5]
}
100047ca:	e7e4      	b.n	10004796 <tud_task+0x57e>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
100047cc:	4a32      	ldr	r2, [pc, #200]	; (10004898 <tud_task+0x680>)
100047ce:	00dc      	lsls	r4, r3, #3
100047d0:	1ae3      	subs	r3, r4, r3
100047d2:	6814      	ldr	r4, [r2, #0]
100047d4:	009b      	lsls	r3, r3, #2
100047d6:	18e4      	adds	r4, r4, r3
        TU_VERIFY(driver);
100047d8:	2c00      	cmp	r4, #0
100047da:	d100      	bne.n	100047de <tud_task+0x5c6>
100047dc:	e59e      	b.n	1000431c <tud_task+0x104>
  usbd_control_set_complete_callback(driver->control_complete);
100047de:	6920      	ldr	r0, [r4, #16]
100047e0:	e733      	b.n	1000464a <tud_task+0x432>
  dcd_edpt_stall(rhport, ep_addr);
100047e2:	4648      	mov	r0, r9
100047e4:	f000 fd8e 	bl	10005304 <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = true;
100047e8:	9a01      	ldr	r2, [sp, #4]
100047ea:	2102      	movs	r1, #2
100047ec:	4694      	mov	ip, r2
100047ee:	9b02      	ldr	r3, [sp, #8]
100047f0:	005b      	lsls	r3, r3, #1
100047f2:	9302      	str	r3, [sp, #8]
100047f4:	4443      	add	r3, r8
100047f6:	4463      	add	r3, ip
100047f8:	3320      	adds	r3, #32
100047fa:	795a      	ldrb	r2, [r3, #5]
100047fc:	430a      	orrs	r2, r1
100047fe:	715a      	strb	r2, [r3, #5]
  _usbd_dev.ep_status[epnum][dir].busy = true;
10004800:	795a      	ldrb	r2, [r3, #5]
10004802:	4316      	orrs	r6, r2
10004804:	715e      	strb	r6, [r3, #5]
}
10004806:	e7c6      	b.n	10004796 <tud_task+0x57e>
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1); // index is cfg_num-1
10004808:	1e50      	subs	r0, r2, #1
1000480a:	b2c0      	uxtb	r0, r0
1000480c:	f7fe fa06 	bl	10002c1c <tud_descriptor_configuration_cb>
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
10004810:	2800      	cmp	r0, #0
10004812:	d100      	bne.n	10004816 <tud_task+0x5fe>
10004814:	e582      	b.n	1000431c <tud_task+0x104>
10004816:	7843      	ldrb	r3, [r0, #1]
10004818:	2b02      	cmp	r3, #2
1000481a:	d000      	beq.n	1000481e <tud_task+0x606>
1000481c:	e57e      	b.n	1000431c <tud_task+0x104>
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
1000481e:	2101      	movs	r1, #1
10004820:	79c2      	ldrb	r2, [r0, #7]
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
10004822:	0005      	movs	r5, r0
  _usbd_dev.self_powered = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED) ? 1 : 0;
10004824:	1193      	asrs	r3, r2, #6
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
10004826:	1152      	asrs	r2, r2, #5
10004828:	400b      	ands	r3, r1
1000482a:	400a      	ands	r2, r1
1000482c:	0112      	lsls	r2, r2, #4
1000482e:	015b      	lsls	r3, r3, #5
10004830:	4313      	orrs	r3, r2
10004832:	4642      	mov	r2, r8
10004834:	7812      	ldrb	r2, [r2, #0]
10004836:	312f      	adds	r1, #47	; 0x2f
10004838:	438a      	bics	r2, r1
1000483a:	4313      	orrs	r3, r2
1000483c:	4642      	mov	r2, r8
1000483e:	7013      	strb	r3, [r2, #0]
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + desc_cfg->wTotalLength;
10004840:	78c3      	ldrb	r3, [r0, #3]
10004842:	7882      	ldrb	r2, [r0, #2]
10004844:	021b      	lsls	r3, r3, #8
10004846:	4313      	orrs	r3, r2
10004848:	18c3      	adds	r3, r0, r3
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
1000484a:	3509      	adds	r5, #9
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + desc_cfg->wTotalLength;
1000484c:	9304      	str	r3, [sp, #16]
  while( p_desc < desc_end )
1000484e:	9b04      	ldr	r3, [sp, #16]
10004850:	42ab      	cmp	r3, r5
10004852:	d800      	bhi.n	10004856 <tud_task+0x63e>
10004854:	e0cf      	b.n	100049f6 <tud_task+0x7de>
    tusb_desc_interface_assoc_t const * desc_itf_assoc = NULL;
10004856:	2300      	movs	r3, #0
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10004858:	786a      	ldrb	r2, [r5, #1]
1000485a:	9302      	str	r3, [sp, #8]
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
1000485c:	2a0b      	cmp	r2, #11
1000485e:	d104      	bne.n	1000486a <tud_task+0x652>
  return desc8 + desc8[DESC_OFFSET_LEN];
10004860:	782b      	ldrb	r3, [r5, #0]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10004862:	9502      	str	r5, [sp, #8]
  return desc8 + desc8[DESC_OFFSET_LEN];
10004864:	18eb      	adds	r3, r5, r3
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10004866:	001d      	movs	r5, r3
10004868:	785a      	ldrb	r2, [r3, #1]
    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
1000486a:	2a04      	cmp	r2, #4
1000486c:	d000      	beq.n	10004870 <tud_task+0x658>
1000486e:	e555      	b.n	1000431c <tud_task+0x104>
    uint16_t const remaining_len = desc_end-p_desc;
10004870:	9b04      	ldr	r3, [sp, #16]
10004872:	4a05      	ldr	r2, [pc, #20]	; (10004888 <tud_task+0x670>)
10004874:	1b5b      	subs	r3, r3, r5
10004876:	b29b      	uxth	r3, r3
10004878:	9301      	str	r3, [sp, #4]
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
1000487a:	4b04      	ldr	r3, [pc, #16]	; (1000488c <tud_task+0x674>)
1000487c:	2400      	movs	r4, #0
1000487e:	781b      	ldrb	r3, [r3, #0]
10004880:	2a00      	cmp	r2, #0
10004882:	d11d      	bne.n	100048c0 <tud_task+0x6a8>
10004884:	e029      	b.n	100048da <tud_task+0x6c2>
10004886:	46c0      	nop			; (mov r8, r8)
10004888:	00000000 	.word	0x00000000
1000488c:	2003e341 	.word	0x2003e341
10004890:	10003b4d 	.word	0x10003b4d
10004894:	1000a554 	.word	0x1000a554
10004898:	2003d6d0 	.word	0x2003d6d0
1000489c:	1000a514 	.word	0x1000a514
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
100048a0:	429c      	cmp	r4, r3
100048a2:	d126      	bne.n	100048f2 <tud_task+0x6da>
100048a4:	4b57      	ldr	r3, [pc, #348]	; (10004a04 <tud_task+0x7ec>)
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
100048a6:	0029      	movs	r1, r5
100048a8:	4648      	mov	r0, r9
100048aa:	9a01      	ldr	r2, [sp, #4]
100048ac:	4798      	blx	r3
      if ( drv_len > 0 )
100048ae:	2800      	cmp	r0, #0
100048b0:	d122      	bne.n	100048f8 <tud_task+0x6e0>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
100048b2:	4b55      	ldr	r3, [pc, #340]	; (10004a08 <tud_task+0x7f0>)
100048b4:	3401      	adds	r4, #1
100048b6:	781b      	ldrb	r3, [r3, #0]
100048b8:	b2e4      	uxtb	r4, r4
100048ba:	42a3      	cmp	r3, r4
100048bc:	d200      	bcs.n	100048c0 <tud_task+0x6a8>
100048be:	e52d      	b.n	1000431c <tud_task+0x104>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
100048c0:	429c      	cmp	r4, r3
100048c2:	d2ed      	bcs.n	100048a0 <tud_task+0x688>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
100048c4:	4b51      	ldr	r3, [pc, #324]	; (10004a0c <tud_task+0x7f4>)
100048c6:	681b      	ldr	r3, [r3, #0]
100048c8:	9305      	str	r3, [sp, #20]
100048ca:	9a05      	ldr	r2, [sp, #20]
100048cc:	00e3      	lsls	r3, r4, #3
100048ce:	4694      	mov	ip, r2
100048d0:	1b1b      	subs	r3, r3, r4
100048d2:	009b      	lsls	r3, r3, #2
100048d4:	4463      	add	r3, ip
100048d6:	689b      	ldr	r3, [r3, #8]
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
100048d8:	e7e5      	b.n	100048a6 <tud_task+0x68e>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
100048da:	0029      	movs	r1, r5
100048dc:	4648      	mov	r0, r9
100048de:	9a01      	ldr	r2, [sp, #4]
100048e0:	f7ff f8be 	bl	10003a60 <cdcd_open>
100048e4:	1e06      	subs	r6, r0, #0
      if ( drv_len > 0 )
100048e6:	d108      	bne.n	100048fa <tud_task+0x6e2>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
100048e8:	4b47      	ldr	r3, [pc, #284]	; (10004a08 <tud_task+0x7f0>)
100048ea:	781b      	ldrb	r3, [r3, #0]
100048ec:	2b00      	cmp	r3, #0
100048ee:	d100      	bne.n	100048f2 <tud_task+0x6da>
100048f0:	e514      	b.n	1000431c <tud_task+0x104>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
100048f2:	2300      	movs	r3, #0
100048f4:	689b      	ldr	r3, [r3, #8]
100048f6:	deff      	udf	#255	; 0xff
100048f8:	0006      	movs	r6, r0
        TU_ASSERT( sizeof(tusb_desc_interface_t) <= drv_len && drv_len <= remaining_len);
100048fa:	2e08      	cmp	r6, #8
100048fc:	d800      	bhi.n	10004900 <tud_task+0x6e8>
100048fe:	e50d      	b.n	1000431c <tud_task+0x104>
10004900:	9b01      	ldr	r3, [sp, #4]
10004902:	42b3      	cmp	r3, r6
10004904:	d200      	bcs.n	10004908 <tud_task+0x6f0>
10004906:	e509      	b.n	1000431c <tud_task+0x104>
        TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[desc_itf->bInterfaceNumber]);
10004908:	4643      	mov	r3, r8
1000490a:	78aa      	ldrb	r2, [r5, #2]
1000490c:	189b      	adds	r3, r3, r2
1000490e:	78d9      	ldrb	r1, [r3, #3]
10004910:	29ff      	cmp	r1, #255	; 0xff
10004912:	d000      	beq.n	10004916 <tud_task+0x6fe>
10004914:	e502      	b.n	1000431c <tud_task+0x104>
        _usbd_dev.itf2drv[desc_itf->bInterfaceNumber] = drv_id;
10004916:	70dc      	strb	r4, [r3, #3]
        if (desc_itf_assoc)
10004918:	9b02      	ldr	r3, [sp, #8]
1000491a:	2b00      	cmp	r3, #0
1000491c:	d014      	beq.n	10004948 <tud_task+0x730>
1000491e:	0018      	movs	r0, r3
          TU_ASSERT(desc_itf_assoc->bFirstInterface == desc_itf->bInterfaceNumber &&
10004920:	789b      	ldrb	r3, [r3, #2]
10004922:	4293      	cmp	r3, r2
10004924:	d000      	beq.n	10004928 <tud_task+0x710>
10004926:	e4f9      	b.n	1000431c <tud_task+0x104>
10004928:	7901      	ldrb	r1, [r0, #4]
1000492a:	796a      	ldrb	r2, [r5, #5]
1000492c:	4291      	cmp	r1, r2
1000492e:	d000      	beq.n	10004932 <tud_task+0x71a>
10004930:	e4f4      	b.n	1000431c <tud_task+0x104>
          for(uint8_t i=1; i<desc_itf_assoc->bInterfaceCount; i++)
10004932:	78c2      	ldrb	r2, [r0, #3]
10004934:	2a01      	cmp	r2, #1
10004936:	d907      	bls.n	10004948 <tud_task+0x730>
            _usbd_dev.itf2drv[desc_itf->bInterfaceNumber+i] = drv_id;
10004938:	3304      	adds	r3, #4
1000493a:	3a01      	subs	r2, #1
1000493c:	4443      	add	r3, r8
1000493e:	0018      	movs	r0, r3
10004940:	0021      	movs	r1, r4
10004942:	b2d2      	uxtb	r2, r2
10004944:	f7fc fc36 	bl	100011b4 <__wrap_memset>
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
10004948:	217f      	movs	r1, #127	; 0x7f
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
1000494a:	002a      	movs	r2, r5
1000494c:	2300      	movs	r3, #0
1000494e:	468c      	mov	ip, r1
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
10004950:	7851      	ldrb	r1, [r2, #1]
10004952:	2905      	cmp	r1, #5
10004954:	d107      	bne.n	10004966 <tud_task+0x74e>
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
10004956:	4661      	mov	r1, ip
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
10004958:	7890      	ldrb	r0, [r2, #2]
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
1000495a:	4001      	ands	r1, r0
1000495c:	0049      	lsls	r1, r1, #1
1000495e:	4441      	add	r1, r8
10004960:	3113      	adds	r1, #19
10004962:	09c0      	lsrs	r0, r0, #7
10004964:	540c      	strb	r4, [r1, r0]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
10004966:	7811      	ldrb	r1, [r2, #0]
    len   = (uint16_t)(len + tu_desc_len(p_desc));
10004968:	185b      	adds	r3, r3, r1
1000496a:	b29b      	uxth	r3, r3
  return desc8 + desc8[DESC_OFFSET_LEN];
1000496c:	1852      	adds	r2, r2, r1
  while( len < desc_len )
1000496e:	42b3      	cmp	r3, r6
10004970:	d3ee      	bcc.n	10004950 <tud_task+0x738>
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
10004972:	4b25      	ldr	r3, [pc, #148]	; (10004a08 <tud_task+0x7f0>)
        p_desc += drv_len; // next interface
10004974:	19ad      	adds	r5, r5, r6
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
10004976:	781b      	ldrb	r3, [r3, #0]
10004978:	42a3      	cmp	r3, r4
1000497a:	d300      	bcc.n	1000497e <tud_task+0x766>
1000497c:	e767      	b.n	1000484e <tud_task+0x636>
1000497e:	e4cd      	b.n	1000431c <tud_task+0x104>
      if (!tud_descriptor_bos_cb) return false;
10004980:	4b23      	ldr	r3, [pc, #140]	; (10004a10 <tud_task+0x7f8>)
10004982:	2b00      	cmp	r3, #0
10004984:	d100      	bne.n	10004988 <tud_task+0x770>
10004986:	e4c9      	b.n	1000431c <tud_task+0x104>
      tusb_desc_bos_t const* desc_bos = (tusb_desc_bos_t const*) tud_descriptor_bos_cb();
10004988:	e000      	b.n	1000498c <tud_task+0x774>
1000498a:	bf00      	nop
1000498c:	0004      	movs	r4, r0
      memcpy(&total_len, (uint8_t*) desc_config + offsetof(tusb_desc_configuration_t, wTotalLength), 2);
1000498e:	ab06      	add	r3, sp, #24
10004990:	1c9d      	adds	r5, r3, #2
10004992:	2202      	movs	r2, #2
10004994:	1ca1      	adds	r1, r4, #2
10004996:	0028      	movs	r0, r5
10004998:	f7fc fc12 	bl	100011c0 <__wrap___aeabi_memcpy>
      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
1000499c:	0022      	movs	r2, r4
1000499e:	4648      	mov	r0, r9
100049a0:	882b      	ldrh	r3, [r5, #0]
100049a2:	a908      	add	r1, sp, #32
100049a4:	f000 f9d2 	bl	10004d4c <tud_control_xfer>
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
100049a8:	2800      	cmp	r0, #0
100049aa:	d000      	beq.n	100049ae <tud_task+0x796>
100049ac:	e445      	b.n	1000423a <tud_task+0x22>
100049ae:	e4b5      	b.n	1000431c <tud_task+0x104>
      if ( tud_descriptor_device_qualifier_cb )
100049b0:	4b18      	ldr	r3, [pc, #96]	; (10004a14 <tud_task+0x7fc>)
100049b2:	2b00      	cmp	r3, #0
100049b4:	d100      	bne.n	100049b8 <tud_task+0x7a0>
100049b6:	e4b1      	b.n	1000431c <tud_task+0x104>
        uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
100049b8:	e000      	b.n	100049bc <tud_task+0x7a4>
100049ba:	bf00      	nop
100049bc:	1e02      	subs	r2, r0, #0
        TU_ASSERT(desc_qualifier);
100049be:	d100      	bne.n	100049c2 <tud_task+0x7aa>
100049c0:	e4ac      	b.n	1000431c <tud_task+0x104>
        return tud_control_xfer(rhport, p_request, (void*) desc_qualifier, desc_qualifier[0]);
100049c2:	4648      	mov	r0, r9
100049c4:	7813      	ldrb	r3, [r2, #0]
100049c6:	a908      	add	r1, sp, #32
100049c8:	f000 f9c0 	bl	10004d4c <tud_control_xfer>
100049cc:	e7ec      	b.n	100049a8 <tud_task+0x790>
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, p_request->wIndex);
100049ce:	8939      	ldrh	r1, [r7, #8]
100049d0:	f7fe f928 	bl	10002c24 <tud_descriptor_string_cb>
100049d4:	1e02      	subs	r2, r0, #0
      TU_VERIFY(desc_str);
100049d6:	d1f4      	bne.n	100049c2 <tud_task+0x7aa>
100049d8:	e4a0      	b.n	1000431c <tud_task+0x104>
      tusb_desc_configuration_t const* desc_config = (tusb_desc_configuration_t const*) tud_descriptor_configuration_cb(desc_index);
100049da:	f7fe f91f 	bl	10002c1c <tud_descriptor_configuration_cb>
100049de:	1e04      	subs	r4, r0, #0
      TU_ASSERT(desc_config);
100049e0:	d1d5      	bne.n	1000498e <tud_task+0x776>
100049e2:	e49b      	b.n	1000431c <tud_task+0x104>
      return tud_control_xfer(rhport, p_request, (void*) tud_descriptor_device_cb(), len);
100049e4:	f7fe f916 	bl	10002c14 <tud_descriptor_device_cb>
100049e8:	2312      	movs	r3, #18
100049ea:	0002      	movs	r2, r0
100049ec:	a908      	add	r1, sp, #32
100049ee:	4648      	mov	r0, r9
100049f0:	f000 f9ac 	bl	10004d4c <tud_control_xfer>
100049f4:	e7d8      	b.n	100049a8 <tud_task+0x790>
  if (tud_mount_cb) tud_mount_cb();
100049f6:	4b08      	ldr	r3, [pc, #32]	; (10004a18 <tud_task+0x800>)
100049f8:	2b00      	cmp	r3, #0
100049fa:	d100      	bne.n	100049fe <tud_task+0x7e6>
100049fc:	e67f      	b.n	100046fe <tud_task+0x4e6>
100049fe:	e000      	b.n	10004a02 <tud_task+0x7ea>
10004a00:	bf00      	nop
10004a02:	e67c      	b.n	100046fe <tud_task+0x4e6>
10004a04:	10003a61 	.word	0x10003a61
10004a08:	2003e341 	.word	0x2003e341
10004a0c:	2003d6d0 	.word	0x2003d6d0
	...

10004a1c <dcd_event_bus_signal>:
{
10004a1c:	b530      	push	{r4, r5, lr}
10004a1e:	b085      	sub	sp, #20
10004a20:	0005      	movs	r5, r0
10004a22:	000c      	movs	r4, r1
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
10004a24:	220c      	movs	r2, #12
10004a26:	2100      	movs	r1, #0
10004a28:	a801      	add	r0, sp, #4
10004a2a:	f7fc fbc3 	bl	100011b4 <__wrap_memset>
10004a2e:	466b      	mov	r3, sp
10004a30:	711d      	strb	r5, [r3, #4]
10004a32:	715c      	strb	r4, [r3, #5]
  switch (event->event_id)
10004a34:	2c04      	cmp	r4, #4
10004a36:	d04b      	beq.n	10004ad0 <dcd_event_bus_signal+0xb4>
10004a38:	d805      	bhi.n	10004a46 <dcd_event_bus_signal+0x2a>
10004a3a:	2c02      	cmp	r4, #2
10004a3c:	d030      	beq.n	10004aa0 <dcd_event_bus_signal+0x84>
10004a3e:	2c03      	cmp	r4, #3
10004a40:	d115      	bne.n	10004a6e <dcd_event_bus_signal+0x52>
}
10004a42:	b005      	add	sp, #20
10004a44:	bd30      	pop	{r4, r5, pc}
  switch (event->event_id)
10004a46:	2c05      	cmp	r4, #5
10004a48:	d111      	bne.n	10004a6e <dcd_event_bus_signal+0x52>
      if ( _usbd_dev.connected )
10004a4a:	4b2a      	ldr	r3, [pc, #168]	; (10004af4 <dcd_event_bus_signal+0xd8>)
10004a4c:	781a      	ldrb	r2, [r3, #0]
10004a4e:	07d2      	lsls	r2, r2, #31
10004a50:	d5f7      	bpl.n	10004a42 <dcd_event_bus_signal+0x26>
        _usbd_dev.suspended = 0;
10004a52:	2104      	movs	r1, #4
10004a54:	781a      	ldrb	r2, [r3, #0]
10004a56:	438a      	bics	r2, r1
10004a58:	701a      	strb	r2, [r3, #0]
        osal_queue_send(_usbd_q, event, in_isr);
10004a5a:	4b27      	ldr	r3, [pc, #156]	; (10004af8 <dcd_event_bus_signal+0xdc>)
10004a5c:	681c      	ldr	r4, [r3, #0]
    critsec->save = spin_lock_blocking(critsec->core.spin_lock);
10004a5e:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004a60:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
10004a64:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004a66:	6813      	ldr	r3, [r2, #0]
10004a68:	2b00      	cmp	r3, #0
10004a6a:	d109      	bne.n	10004a80 <dcd_event_bus_signal+0x64>
10004a6c:	e7fb      	b.n	10004a66 <dcd_event_bus_signal+0x4a>
      osal_queue_send(_usbd_q, event, in_isr);
10004a6e:	4b22      	ldr	r3, [pc, #136]	; (10004af8 <dcd_event_bus_signal+0xdc>)
10004a70:	681c      	ldr	r4, [r3, #0]
10004a72:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004a74:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
10004a78:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004a7a:	6813      	ldr	r3, [r2, #0]
10004a7c:	2b00      	cmp	r3, #0
10004a7e:	d0fc      	beq.n	10004a7a <dcd_event_bus_signal+0x5e>
    __asm volatile ("dmb");
10004a80:	f3bf 8f5f 	dmb	sy
10004a84:	61e1      	str	r1, [r4, #28]
  //  however osal_queue_recieve may be. therefore my assumption is that
  //  the fifo mutex is not populated for queues used from an IRQ context
  assert(!qhdl->ff.mutex);

  _osal_q_lock(qhdl);
  bool success = tu_fifo_write(&qhdl->ff, data);
10004a86:	0020      	movs	r0, r4
10004a88:	a901      	add	r1, sp, #4
10004a8a:	f7ff fa87 	bl	10003f9c <tu_fifo_write>
    spin_unlock(critsec->core.spin_lock, critsec->save);
10004a8e:	69a2      	ldr	r2, [r4, #24]
10004a90:	69e3      	ldr	r3, [r4, #28]
10004a92:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004a96:	2100      	movs	r1, #0
10004a98:	6011      	str	r1, [r2, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004a9a:	f383 8810 	msr	PRIMASK, r3
}
10004a9e:	e7d0      	b.n	10004a42 <dcd_event_bus_signal+0x26>
      _usbd_dev.connected  = 0;
10004aa0:	2101      	movs	r1, #1
10004aa2:	4b14      	ldr	r3, [pc, #80]	; (10004af4 <dcd_event_bus_signal+0xd8>)
10004aa4:	781a      	ldrb	r2, [r3, #0]
10004aa6:	438a      	bics	r2, r1
10004aa8:	701a      	strb	r2, [r3, #0]
      _usbd_dev.addressed  = 0;
10004aaa:	781a      	ldrb	r2, [r3, #0]
      _usbd_dev.suspended  = 0;
10004aac:	3103      	adds	r1, #3
      _usbd_dev.addressed  = 0;
10004aae:	43a2      	bics	r2, r4
10004ab0:	701a      	strb	r2, [r3, #0]
      _usbd_dev.cfg_num    = 0;
10004ab2:	2200      	movs	r2, #0
10004ab4:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended  = 0;
10004ab6:	781a      	ldrb	r2, [r3, #0]
10004ab8:	438a      	bics	r2, r1
10004aba:	701a      	strb	r2, [r3, #0]
      osal_queue_send(_usbd_q, event, in_isr);
10004abc:	4b0e      	ldr	r3, [pc, #56]	; (10004af8 <dcd_event_bus_signal+0xdc>)
10004abe:	681c      	ldr	r4, [r3, #0]
    critsec->save = spin_lock_blocking(critsec->core.spin_lock);
10004ac0:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004ac2:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
10004ac6:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004ac8:	6813      	ldr	r3, [r2, #0]
10004aca:	2b00      	cmp	r3, #0
10004acc:	d1d8      	bne.n	10004a80 <dcd_event_bus_signal+0x64>
10004ace:	e7fb      	b.n	10004ac8 <dcd_event_bus_signal+0xac>
      if ( _usbd_dev.connected )
10004ad0:	4b08      	ldr	r3, [pc, #32]	; (10004af4 <dcd_event_bus_signal+0xd8>)
10004ad2:	781a      	ldrb	r2, [r3, #0]
10004ad4:	07d2      	lsls	r2, r2, #31
10004ad6:	d5b4      	bpl.n	10004a42 <dcd_event_bus_signal+0x26>
        _usbd_dev.suspended = 1;
10004ad8:	2104      	movs	r1, #4
10004ada:	781a      	ldrb	r2, [r3, #0]
10004adc:	430a      	orrs	r2, r1
10004ade:	701a      	strb	r2, [r3, #0]
        osal_queue_send(_usbd_q, event, in_isr);
10004ae0:	4b05      	ldr	r3, [pc, #20]	; (10004af8 <dcd_event_bus_signal+0xdc>)
10004ae2:	681c      	ldr	r4, [r3, #0]
10004ae4:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004ae6:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
10004aea:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004aec:	6813      	ldr	r3, [r2, #0]
10004aee:	2b00      	cmp	r3, #0
10004af0:	d1c6      	bne.n	10004a80 <dcd_event_bus_signal+0x64>
10004af2:	e7fb      	b.n	10004aec <dcd_event_bus_signal+0xd0>
10004af4:	2003da00 	.word	0x2003da00
10004af8:	2003da3c 	.word	0x2003da3c

10004afc <dcd_event_setup_received>:
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
10004afc:	2300      	movs	r3, #0
{
10004afe:	b530      	push	{r4, r5, lr}
10004b00:	b085      	sub	sp, #20
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
10004b02:	ad01      	add	r5, sp, #4
10004b04:	806b      	strh	r3, [r5, #2]
10004b06:	7028      	strb	r0, [r5, #0]
10004b08:	3306      	adds	r3, #6
  memcpy(&event.setup_received, setup, 8);
10004b0a:	2208      	movs	r2, #8
10004b0c:	a802      	add	r0, sp, #8
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
10004b0e:	706b      	strb	r3, [r5, #1]
  memcpy(&event.setup_received, setup, 8);
10004b10:	f7fc fb56 	bl	100011c0 <__wrap___aeabi_memcpy>
      osal_queue_send(_usbd_q, event, in_isr);
10004b14:	4b0c      	ldr	r3, [pc, #48]	; (10004b48 <dcd_event_setup_received+0x4c>)
10004b16:	681c      	ldr	r4, [r3, #0]
10004b18:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004b1a:	f3ef 8310 	mrs	r3, PRIMASK
    __asm volatile ("cpsid i");
10004b1e:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004b20:	6811      	ldr	r1, [r2, #0]
10004b22:	2900      	cmp	r1, #0
10004b24:	d0fc      	beq.n	10004b20 <dcd_event_setup_received+0x24>
    __asm volatile ("dmb");
10004b26:	f3bf 8f5f 	dmb	sy
10004b2a:	61e3      	str	r3, [r4, #28]
10004b2c:	0029      	movs	r1, r5
10004b2e:	0020      	movs	r0, r4
10004b30:	f7ff fa34 	bl	10003f9c <tu_fifo_write>
    spin_unlock(critsec->core.spin_lock, critsec->save);
10004b34:	69a2      	ldr	r2, [r4, #24]
10004b36:	69e3      	ldr	r3, [r4, #28]
10004b38:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004b3c:	2100      	movs	r1, #0
10004b3e:	6011      	str	r1, [r2, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004b40:	f383 8810 	msr	PRIMASK, r3
}
10004b44:	b005      	add	sp, #20
10004b46:	bd30      	pop	{r4, r5, pc}
10004b48:	2003da3c 	.word	0x2003da3c

10004b4c <dcd_event_xfer_complete>:
{
10004b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10004b4e:	46c6      	mov	lr, r8
10004b50:	4680      	mov	r8, r0
10004b52:	b500      	push	{lr}
10004b54:	b084      	sub	sp, #16
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
10004b56:	ac01      	add	r4, sp, #4
{
10004b58:	000f      	movs	r7, r1
10004b5a:	0016      	movs	r6, r2
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
10004b5c:	2100      	movs	r1, #0
10004b5e:	2208      	movs	r2, #8
10004b60:	0020      	movs	r0, r4
{
10004b62:	001d      	movs	r5, r3
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
10004b64:	f7fc fb26 	bl	100011b4 <__wrap_memset>
10004b68:	4643      	mov	r3, r8
10004b6a:	7023      	strb	r3, [r4, #0]
10004b6c:	2307      	movs	r3, #7
10004b6e:	7063      	strb	r3, [r4, #1]
      osal_queue_send(_usbd_q, event, in_isr);
10004b70:	4b0f      	ldr	r3, [pc, #60]	; (10004bb0 <dcd_event_xfer_complete+0x64>)
  event.xfer_complete.result  = result;
10004b72:	7165      	strb	r5, [r4, #5]
      osal_queue_send(_usbd_q, event, in_isr);
10004b74:	681d      	ldr	r5, [r3, #0]
  event.xfer_complete.ep_addr = ep_addr;
10004b76:	7127      	strb	r7, [r4, #4]
  event.xfer_complete.len     = xferred_bytes;
10004b78:	60a6      	str	r6, [r4, #8]
    critsec->save = spin_lock_blocking(critsec->core.spin_lock);
10004b7a:	69aa      	ldr	r2, [r5, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004b7c:	f3ef 8310 	mrs	r3, PRIMASK
    __asm volatile ("cpsid i");
10004b80:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004b82:	6811      	ldr	r1, [r2, #0]
10004b84:	2900      	cmp	r1, #0
10004b86:	d0fc      	beq.n	10004b82 <dcd_event_xfer_complete+0x36>
    __asm volatile ("dmb");
10004b88:	f3bf 8f5f 	dmb	sy
10004b8c:	61eb      	str	r3, [r5, #28]
10004b8e:	0021      	movs	r1, r4
10004b90:	0028      	movs	r0, r5
10004b92:	f7ff fa03 	bl	10003f9c <tu_fifo_write>
    spin_unlock(critsec->core.spin_lock, critsec->save);
10004b96:	69aa      	ldr	r2, [r5, #24]
10004b98:	69eb      	ldr	r3, [r5, #28]
10004b9a:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004b9e:	2100      	movs	r1, #0
10004ba0:	6011      	str	r1, [r2, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004ba2:	f383 8810 	msr	PRIMASK, r3
}
10004ba6:	b004      	add	sp, #16
10004ba8:	bc80      	pop	{r7}
10004baa:	46b8      	mov	r8, r7
10004bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004bae:	46c0      	nop			; (mov r8, r8)
10004bb0:	2003da3c 	.word	0x2003da3c

10004bb4 <usbd_open_edpt_pair>:
{
10004bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004bb6:	4647      	mov	r7, r8
10004bb8:	46d6      	mov	lr, sl
10004bba:	b580      	push	{r7, lr}
10004bbc:	4698      	mov	r8, r3
10004bbe:	9b08      	ldr	r3, [sp, #32]
10004bc0:	0006      	movs	r6, r0
10004bc2:	000c      	movs	r4, r1
10004bc4:	1e17      	subs	r7, r2, #0
10004bc6:	469a      	mov	sl, r3
  for(int i=0; i<ep_count; i++)
10004bc8:	d021      	beq.n	10004c0e <usbd_open_edpt_pair+0x5a>
10004bca:	2500      	movs	r5, #0
10004bcc:	e006      	b.n	10004bdc <usbd_open_edpt_pair+0x28>
      (*ep_out) = desc_ep->bEndpointAddress;
10004bce:	4652      	mov	r2, sl
10004bd0:	7013      	strb	r3, [r2, #0]
10004bd2:	7823      	ldrb	r3, [r4, #0]
  for(int i=0; i<ep_count; i++)
10004bd4:	3501      	adds	r5, #1
10004bd6:	18e4      	adds	r4, r4, r3
10004bd8:	42bd      	cmp	r5, r7
10004bda:	da18      	bge.n	10004c0e <usbd_open_edpt_pair+0x5a>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
10004bdc:	7863      	ldrb	r3, [r4, #1]
10004bde:	2b05      	cmp	r3, #5
10004be0:	d117      	bne.n	10004c12 <usbd_open_edpt_pair+0x5e>
10004be2:	78e1      	ldrb	r1, [r4, #3]
10004be4:	0789      	lsls	r1, r1, #30
10004be6:	0f89      	lsrs	r1, r1, #30
10004be8:	4541      	cmp	r1, r8
10004bea:	d112      	bne.n	10004c12 <usbd_open_edpt_pair+0x5e>
  return dcd_edpt_open(rhport, desc_ep);
10004bec:	0021      	movs	r1, r4
10004bee:	0030      	movs	r0, r6
10004bf0:	f000 facc 	bl	1000518c <dcd_edpt_open>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
10004bf4:	2800      	cmp	r0, #0
10004bf6:	d00c      	beq.n	10004c12 <usbd_open_edpt_pair+0x5e>
    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
10004bf8:	78a3      	ldrb	r3, [r4, #2]
10004bfa:	09da      	lsrs	r2, r3, #7
10004bfc:	2a01      	cmp	r2, #1
10004bfe:	d1e6      	bne.n	10004bce <usbd_open_edpt_pair+0x1a>
      (*ep_in) = desc_ep->bEndpointAddress;
10004c00:	9a09      	ldr	r2, [sp, #36]	; 0x24
  for(int i=0; i<ep_count; i++)
10004c02:	3501      	adds	r5, #1
      (*ep_out) = desc_ep->bEndpointAddress;
10004c04:	7013      	strb	r3, [r2, #0]
10004c06:	7823      	ldrb	r3, [r4, #0]
10004c08:	18e4      	adds	r4, r4, r3
  for(int i=0; i<ep_count; i++)
10004c0a:	42bd      	cmp	r5, r7
10004c0c:	dbe6      	blt.n	10004bdc <usbd_open_edpt_pair+0x28>
  return true;
10004c0e:	2001      	movs	r0, #1
10004c10:	e000      	b.n	10004c14 <usbd_open_edpt_pair+0x60>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
10004c12:	2000      	movs	r0, #0
}
10004c14:	bcc0      	pop	{r6, r7}
10004c16:	46ba      	mov	sl, r7
10004c18:	46b0      	mov	r8, r6
10004c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10004c1c <usbd_edpt_open>:
{
10004c1c:	b510      	push	{r4, lr}
  return dcd_edpt_open(rhport, desc_ep);
10004c1e:	f000 fab5 	bl	1000518c <dcd_edpt_open>
}
10004c22:	bd10      	pop	{r4, pc}

10004c24 <usbd_edpt_claim>:
{
10004c24:	b570      	push	{r4, r5, r6, lr}
  TU_VERIFY((_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0));
10004c26:	247f      	movs	r4, #127	; 0x7f
10004c28:	400c      	ands	r4, r1
10004c2a:	0063      	lsls	r3, r4, #1
10004c2c:	4c14      	ldr	r4, [pc, #80]	; (10004c80 <usbd_edpt_claim+0x5c>)
10004c2e:	09c9      	lsrs	r1, r1, #7
10004c30:	18e4      	adds	r4, r4, r3
10004c32:	1864      	adds	r4, r4, r1
10004c34:	3420      	adds	r4, #32
10004c36:	7963      	ldrb	r3, [r4, #5]
10004c38:	07db      	lsls	r3, r3, #31
10004c3a:	0fdd      	lsrs	r5, r3, #31
10004c3c:	2b00      	cmp	r3, #0
10004c3e:	d118      	bne.n	10004c72 <usbd_edpt_claim+0x4e>
10004c40:	7963      	ldrb	r3, [r4, #5]
10004c42:	075b      	lsls	r3, r3, #29
10004c44:	d501      	bpl.n	10004c4a <usbd_edpt_claim+0x26>
}
10004c46:	0028      	movs	r0, r5
10004c48:	bd70      	pop	{r4, r5, r6, pc}
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10004c4a:	2101      	movs	r1, #1
  osal_mutex_lock(_usbd_mutex, OSAL_TIMEOUT_WAIT_FOREVER);
10004c4c:	4e0d      	ldr	r6, [pc, #52]	; (10004c84 <usbd_edpt_claim+0x60>)
10004c4e:	4249      	negs	r1, r1
10004c50:	6830      	ldr	r0, [r6, #0]
10004c52:	f005 fb45 	bl	1000a2e0 <__mutex_enter_timeout_ms_veneer>
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0);
10004c56:	7963      	ldrb	r3, [r4, #5]
10004c58:	07db      	lsls	r3, r3, #31
10004c5a:	0fdd      	lsrs	r5, r3, #31
10004c5c:	2b00      	cmp	r3, #0
10004c5e:	d10a      	bne.n	10004c76 <usbd_edpt_claim+0x52>
10004c60:	7963      	ldrb	r3, [r4, #5]
10004c62:	075b      	lsls	r3, r3, #29
10004c64:	d408      	bmi.n	10004c78 <usbd_edpt_claim+0x54>
    _usbd_dev.ep_status[epnum][dir].claimed = 1;
10004c66:	2204      	movs	r2, #4
10004c68:	7963      	ldrb	r3, [r4, #5]
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0);
10004c6a:	2501      	movs	r5, #1
    _usbd_dev.ep_status[epnum][dir].claimed = 1;
10004c6c:	4313      	orrs	r3, r2
10004c6e:	7163      	strb	r3, [r4, #5]
10004c70:	e002      	b.n	10004c78 <usbd_edpt_claim+0x54>
  TU_VERIFY((_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0));
10004c72:	2500      	movs	r5, #0
10004c74:	e7e7      	b.n	10004c46 <usbd_edpt_claim+0x22>
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0);
10004c76:	2500      	movs	r5, #0
    mutex_exit(mutex_hdl);
10004c78:	6830      	ldr	r0, [r6, #0]
10004c7a:	f005 fb11 	bl	1000a2a0 <__mutex_exit_veneer>
  return ret;
10004c7e:	e7e2      	b.n	10004c46 <usbd_edpt_claim+0x22>
10004c80:	2003da00 	.word	0x2003da00
10004c84:	2003da38 	.word	0x2003da38

10004c88 <usbd_edpt_release>:
{
10004c88:	b570      	push	{r4, r5, r6, lr}
10004c8a:	000c      	movs	r4, r1
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10004c8c:	2101      	movs	r1, #1
  osal_mutex_lock(_usbd_mutex, OSAL_TIMEOUT_WAIT_FOREVER);
10004c8e:	4d0f      	ldr	r5, [pc, #60]	; (10004ccc <usbd_edpt_release+0x44>)
10004c90:	4249      	negs	r1, r1
10004c92:	6828      	ldr	r0, [r5, #0]
10004c94:	f005 fb24 	bl	1000a2e0 <__mutex_enter_timeout_ms_veneer>
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 1);
10004c98:	217f      	movs	r1, #127	; 0x7f
10004c9a:	4021      	ands	r1, r4
10004c9c:	004b      	lsls	r3, r1, #1
10004c9e:	490c      	ldr	r1, [pc, #48]	; (10004cd0 <usbd_edpt_release+0x48>)
10004ca0:	09e4      	lsrs	r4, r4, #7
10004ca2:	18c9      	adds	r1, r1, r3
10004ca4:	1909      	adds	r1, r1, r4
10004ca6:	3120      	adds	r1, #32
10004ca8:	794b      	ldrb	r3, [r1, #5]
10004caa:	2400      	movs	r4, #0
10004cac:	07db      	lsls	r3, r3, #31
10004cae:	d408      	bmi.n	10004cc2 <usbd_edpt_release+0x3a>
10004cb0:	794b      	ldrb	r3, [r1, #5]
10004cb2:	075b      	lsls	r3, r3, #29
10004cb4:	0fdc      	lsrs	r4, r3, #31
10004cb6:	2b00      	cmp	r3, #0
10004cb8:	da03      	bge.n	10004cc2 <usbd_edpt_release+0x3a>
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
10004cba:	2204      	movs	r2, #4
10004cbc:	794b      	ldrb	r3, [r1, #5]
10004cbe:	4393      	bics	r3, r2
10004cc0:	714b      	strb	r3, [r1, #5]
    mutex_exit(mutex_hdl);
10004cc2:	6828      	ldr	r0, [r5, #0]
10004cc4:	f005 faec 	bl	1000a2a0 <__mutex_exit_veneer>
}
10004cc8:	0020      	movs	r0, r4
10004cca:	bd70      	pop	{r4, r5, r6, pc}
10004ccc:	2003da38 	.word	0x2003da38
10004cd0:	2003da00 	.word	0x2003da00

10004cd4 <usbd_edpt_xfer>:
{
10004cd4:	b570      	push	{r4, r5, r6, lr}
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
10004cd6:	257f      	movs	r5, #127	; 0x7f
10004cd8:	4c0f      	ldr	r4, [pc, #60]	; (10004d18 <usbd_edpt_xfer+0x44>)
10004cda:	400d      	ands	r5, r1
10004cdc:	006d      	lsls	r5, r5, #1
10004cde:	1964      	adds	r4, r4, r5
{
10004ce0:	0006      	movs	r6, r0
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
10004ce2:	09c8      	lsrs	r0, r1, #7
10004ce4:	1824      	adds	r4, r4, r0
10004ce6:	3420      	adds	r4, #32
10004ce8:	7965      	ldrb	r5, [r4, #5]
10004cea:	2000      	movs	r0, #0
10004cec:	07ed      	lsls	r5, r5, #31
10004cee:	d500      	bpl.n	10004cf2 <usbd_edpt_xfer+0x1e>
}
10004cf0:	bd70      	pop	{r4, r5, r6, pc}
  _usbd_dev.ep_status[epnum][dir].busy = true;
10004cf2:	2501      	movs	r5, #1
10004cf4:	7960      	ldrb	r0, [r4, #5]
10004cf6:	4328      	orrs	r0, r5
10004cf8:	7160      	strb	r0, [r4, #5]
  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
10004cfa:	0030      	movs	r0, r6
10004cfc:	f000 faec 	bl	100052d8 <dcd_edpt_xfer>
10004d00:	2800      	cmp	r0, #0
10004d02:	d1f5      	bne.n	10004cf0 <usbd_edpt_xfer+0x1c>
    _usbd_dev.ep_status[epnum][dir].busy = false;
10004d04:	2201      	movs	r2, #1
10004d06:	7963      	ldrb	r3, [r4, #5]
10004d08:	4393      	bics	r3, r2
10004d0a:	7163      	strb	r3, [r4, #5]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
10004d0c:	7963      	ldrb	r3, [r4, #5]
10004d0e:	3203      	adds	r2, #3
10004d10:	4393      	bics	r3, r2
10004d12:	7163      	strb	r3, [r4, #5]
    return false;
10004d14:	e7ec      	b.n	10004cf0 <usbd_edpt_xfer+0x1c>
10004d16:	46c0      	nop			; (mov r8, r8)
10004d18:	2003da00 	.word	0x2003da00

10004d1c <tud_control_status>:
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
}

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
10004d1c:	b570      	push	{r4, r5, r6, lr}
  _ctrl_xfer.request       = (*request);
10004d1e:	4e0a      	ldr	r6, [pc, #40]	; (10004d48 <tud_control_status+0x2c>)
{
10004d20:	0005      	movs	r5, r0
  _ctrl_xfer.request       = (*request);
10004d22:	0030      	movs	r0, r6
10004d24:	2208      	movs	r2, #8
{
10004d26:	000c      	movs	r4, r1
  _ctrl_xfer.request       = (*request);
10004d28:	f7fc fa4a 	bl	100011c0 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer        = NULL;
10004d2c:	2300      	movs	r3, #0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10004d2e:	217f      	movs	r1, #127	; 0x7f
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
10004d30:	60f3      	str	r3, [r6, #12]
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10004d32:	7822      	ldrb	r2, [r4, #0]
  _ctrl_xfer.buffer        = NULL;
10004d34:	60b3      	str	r3, [r6, #8]
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10004d36:	4291      	cmp	r1, r2
10004d38:	415b      	adcs	r3, r3
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
10004d3a:	0028      	movs	r0, r5
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10004d3c:	01d9      	lsls	r1, r3, #7
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
10004d3e:	2200      	movs	r2, #0
10004d40:	2300      	movs	r3, #0
10004d42:	f000 fac9 	bl	100052d8 <dcd_edpt_xfer>

  return _status_stage_xact(rhport, request);
}
10004d46:	bd70      	pop	{r4, r5, r6, pc}
10004d48:	2003d9a4 	.word	0x2003d9a4

10004d4c <tud_control_xfer>:
}

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
10004d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004d4e:	46ce      	mov	lr, r9
10004d50:	4647      	mov	r7, r8
10004d52:	4691      	mov	r9, r2
  _ctrl_xfer.request       = (*request);
10004d54:	4e2a      	ldr	r6, [pc, #168]	; (10004e00 <tud_control_xfer+0xb4>)
{
10004d56:	b580      	push	{r7, lr}
  _ctrl_xfer.request       = (*request);
10004d58:	2208      	movs	r2, #8
{
10004d5a:	0007      	movs	r7, r0
  _ctrl_xfer.request       = (*request);
10004d5c:	0030      	movs	r0, r6
{
10004d5e:	000d      	movs	r5, r1
10004d60:	4698      	mov	r8, r3
  _ctrl_xfer.request       = (*request);
10004d62:	f7fc fa2d 	bl	100011c0 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
10004d66:	464b      	mov	r3, r9
10004d68:	60b3      	str	r3, [r6, #8]
  _ctrl_xfer.total_xferred = 0U;
10004d6a:	2300      	movs	r3, #0
10004d6c:	81f3      	strh	r3, [r6, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
10004d6e:	79ec      	ldrb	r4, [r5, #7]
10004d70:	79a9      	ldrb	r1, [r5, #6]
10004d72:	0224      	lsls	r4, r4, #8
10004d74:	430c      	orrs	r4, r1
static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
10004d76:	1c23      	adds	r3, r4, #0
10004d78:	4544      	cmp	r4, r8
10004d7a:	d900      	bls.n	10004d7e <tud_control_xfer+0x32>
10004d7c:	4643      	mov	r3, r8
10004d7e:	b29a      	uxth	r2, r3
10004d80:	4690      	mov	r8, r2
10004d82:	81b3      	strh	r3, [r6, #12]
  
  if (request->wLength > 0U)
10004d84:	2c00      	cmp	r4, #0
10004d86:	d013      	beq.n	10004db0 <tud_control_xfer+0x64>
  {
    if(_ctrl_xfer.data_len > 0U)
10004d88:	2a00      	cmp	r2, #0
10004d8a:	d01f      	beq.n	10004dcc <tud_control_xfer+0x80>
    {
      TU_ASSERT(buffer);
10004d8c:	464b      	mov	r3, r9
10004d8e:	2b00      	cmp	r3, #0
10004d90:	d034      	beq.n	10004dfc <tud_control_xfer+0xb0>
10004d92:	1c13      	adds	r3, r2, #0
10004d94:	2a40      	cmp	r2, #64	; 0x40
10004d96:	d81f      	bhi.n	10004dd8 <tud_control_xfer+0x8c>
10004d98:	b29b      	uxth	r3, r3
10004d9a:	4698      	mov	r8, r3
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
10004d9c:	7833      	ldrb	r3, [r6, #0]
10004d9e:	2b7f      	cmp	r3, #127	; 0x7f
10004da0:	d820      	bhi.n	10004de4 <tud_control_xfer+0x98>
10004da2:	2100      	movs	r1, #0
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
10004da4:	4a17      	ldr	r2, [pc, #92]	; (10004e04 <tud_control_xfer+0xb8>)
10004da6:	4643      	mov	r3, r8
10004da8:	0038      	movs	r0, r7
10004daa:	f000 fa95 	bl	100052d8 <dcd_edpt_xfer>
10004dae:	e009      	b.n	10004dc4 <tud_control_xfer+0x78>
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10004db0:	227f      	movs	r2, #127	; 0x7f
10004db2:	782b      	ldrb	r3, [r5, #0]
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
10004db4:	0038      	movs	r0, r7
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10004db6:	429a      	cmp	r2, r3
10004db8:	4164      	adcs	r4, r4
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
10004dba:	2300      	movs	r3, #0
10004dbc:	2200      	movs	r2, #0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10004dbe:	01e1      	lsls	r1, r4, #7
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
10004dc0:	f000 fa8a 	bl	100052d8 <dcd_edpt_xfer>
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
  }

  return true;
}
10004dc4:	bcc0      	pop	{r6, r7}
10004dc6:	46b9      	mov	r9, r7
10004dc8:	46b0      	mov	r8, r6
10004dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
10004dcc:	7833      	ldrb	r3, [r6, #0]
10004dce:	2b7f      	cmp	r3, #127	; 0x7f
10004dd0:	d911      	bls.n	10004df6 <tud_control_xfer+0xaa>
    ep_addr = EDPT_CTRL_IN;
10004dd2:	2180      	movs	r1, #128	; 0x80
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
10004dd4:	2200      	movs	r2, #0
10004dd6:	e7e6      	b.n	10004da6 <tud_control_xfer+0x5a>
10004dd8:	2340      	movs	r3, #64	; 0x40
10004dda:	b29b      	uxth	r3, r3
10004ddc:	4698      	mov	r8, r3
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
10004dde:	7833      	ldrb	r3, [r6, #0]
10004de0:	2b7f      	cmp	r3, #127	; 0x7f
10004de2:	d9de      	bls.n	10004da2 <tud_control_xfer+0x56>
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
10004de4:	4c07      	ldr	r4, [pc, #28]	; (10004e04 <tud_control_xfer+0xb8>)
10004de6:	4642      	mov	r2, r8
10004de8:	4649      	mov	r1, r9
10004dea:	0020      	movs	r0, r4
10004dec:	f7fc f9e8 	bl	100011c0 <__wrap___aeabi_memcpy>
    ep_addr = EDPT_CTRL_IN;
10004df0:	2180      	movs	r1, #128	; 0x80
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
10004df2:	0022      	movs	r2, r4
10004df4:	e7d7      	b.n	10004da6 <tud_control_xfer+0x5a>
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
10004df6:	2100      	movs	r1, #0
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
10004df8:	2200      	movs	r2, #0
10004dfa:	e7d4      	b.n	10004da6 <tud_control_xfer+0x5a>
      TU_ASSERT(buffer);
10004dfc:	2000      	movs	r0, #0
10004dfe:	e7e1      	b.n	10004dc4 <tud_control_xfer+0x78>
10004e00:	2003d9a4 	.word	0x2003d9a4
10004e04:	2003d9c0 	.word	0x2003d9c0

10004e08 <usbd_control_reset>:
//--------------------------------------------------------------------+
// USBD API
//--------------------------------------------------------------------+

void usbd_control_reset(void)
{
10004e08:	b510      	push	{r4, lr}
  tu_varclr(&_ctrl_xfer);
10004e0a:	2214      	movs	r2, #20
10004e0c:	2100      	movs	r1, #0
10004e0e:	4802      	ldr	r0, [pc, #8]	; (10004e18 <usbd_control_reset+0x10>)
10004e10:	f7fc f9d0 	bl	100011b4 <__wrap_memset>
}
10004e14:	bd10      	pop	{r4, pc}
10004e16:	46c0      	nop			; (mov r8, r8)
10004e18:	2003d9a4 	.word	0x2003d9a4

10004e1c <usbd_control_set_complete_callback>:

// TODO may find a better way
void usbd_control_set_complete_callback( bool (*fp) (uint8_t, tusb_control_request_t const * ) )
{
  _ctrl_xfer.complete_cb = fp;
10004e1c:	4b01      	ldr	r3, [pc, #4]	; (10004e24 <usbd_control_set_complete_callback+0x8>)
10004e1e:	6118      	str	r0, [r3, #16]
}
10004e20:	4770      	bx	lr
10004e22:	46c0      	nop			; (mov r8, r8)
10004e24:	2003d9a4 	.word	0x2003d9a4

10004e28 <usbd_control_set_request>:

// useful for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
10004e28:	b510      	push	{r4, lr}
  _ctrl_xfer.request       = (*request);
10004e2a:	4c05      	ldr	r4, [pc, #20]	; (10004e40 <usbd_control_set_request+0x18>)
{
10004e2c:	0001      	movs	r1, r0
  _ctrl_xfer.request       = (*request);
10004e2e:	2208      	movs	r2, #8
10004e30:	0020      	movs	r0, r4
10004e32:	f7fc f9c5 	bl	100011c0 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer        = NULL;
10004e36:	2300      	movs	r3, #0
10004e38:	60a3      	str	r3, [r4, #8]
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
10004e3a:	60e3      	str	r3, [r4, #12]
}
10004e3c:	bd10      	pop	{r4, pc}
10004e3e:	46c0      	nop			; (mov r8, r8)
10004e40:	2003d9a4 	.word	0x2003d9a4

10004e44 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
10004e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
10004e46:	4d37      	ldr	r5, [pc, #220]	; (10004f24 <usbd_control_xfer_cb+0xe0>)
{
10004e48:	001c      	movs	r4, r3
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
10004e4a:	782b      	ldrb	r3, [r5, #0]
{
10004e4c:	0006      	movs	r6, r0
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
10004e4e:	09da      	lsrs	r2, r3, #7
10004e50:	09c9      	lsrs	r1, r1, #7
10004e52:	428a      	cmp	r2, r1
10004e54:	d00c      	beq.n	10004e70 <usbd_control_xfer_cb+0x2c>
  {
    TU_ASSERT(0 == xferred_bytes);
10004e56:	2700      	movs	r7, #0
10004e58:	2c00      	cmp	r4, #0
10004e5a:	d001      	beq.n	10004e60 <usbd_control_xfer_cb+0x1c>
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
  }

  return true;
}
10004e5c:	0038      	movs	r0, r7
10004e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
10004e60:	4b31      	ldr	r3, [pc, #196]	; (10004f28 <usbd_control_xfer_cb+0xe4>)
    return true;
10004e62:	3701      	adds	r7, #1
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
10004e64:	2b00      	cmp	r3, #0
10004e66:	d0f9      	beq.n	10004e5c <usbd_control_xfer_cb+0x18>
10004e68:	0029      	movs	r1, r5
10004e6a:	f000 f973 	bl	10005154 <dcd_edpt0_status_complete>
10004e6e:	e7f5      	b.n	10004e5c <usbd_control_xfer_cb+0x18>
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
10004e70:	2b7f      	cmp	r3, #127	; 0x7f
10004e72:	d806      	bhi.n	10004e82 <usbd_control_xfer_cb+0x3e>
    TU_VERIFY(_ctrl_xfer.buffer);
10004e74:	68a8      	ldr	r0, [r5, #8]
10004e76:	2800      	cmp	r0, #0
10004e78:	d038      	beq.n	10004eec <usbd_control_xfer_cb+0xa8>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
10004e7a:	0022      	movs	r2, r4
10004e7c:	492b      	ldr	r1, [pc, #172]	; (10004f2c <usbd_control_xfer_cb+0xe8>)
10004e7e:	f7fc f99f 	bl	100011c0 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer += xferred_bytes;
10004e82:	68ab      	ldr	r3, [r5, #8]
  _ctrl_xfer.total_xferred += xferred_bytes;
10004e84:	89ea      	ldrh	r2, [r5, #14]
  _ctrl_xfer.buffer += xferred_bytes;
10004e86:	1919      	adds	r1, r3, r4
  _ctrl_xfer.total_xferred += xferred_bytes;
10004e88:	1912      	adds	r2, r2, r4
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
10004e8a:	88eb      	ldrh	r3, [r5, #6]
  _ctrl_xfer.total_xferred += xferred_bytes;
10004e8c:	b292      	uxth	r2, r2
10004e8e:	81ea      	strh	r2, [r5, #14]
  _ctrl_xfer.buffer += xferred_bytes;
10004e90:	60a9      	str	r1, [r5, #8]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
10004e92:	4293      	cmp	r3, r2
10004e94:	d015      	beq.n	10004ec2 <usbd_control_xfer_cb+0x7e>
10004e96:	2c3f      	cmp	r4, #63	; 0x3f
10004e98:	d913      	bls.n	10004ec2 <usbd_control_xfer_cb+0x7e>
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
10004e9a:	89ac      	ldrh	r4, [r5, #12]
10004e9c:	1aa0      	subs	r0, r4, r2
10004e9e:	1c07      	adds	r7, r0, #0
10004ea0:	b280      	uxth	r0, r0
10004ea2:	2840      	cmp	r0, #64	; 0x40
10004ea4:	d82e      	bhi.n	10004f04 <usbd_control_xfer_cb+0xc0>
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
10004ea6:	782b      	ldrb	r3, [r5, #0]
10004ea8:	b2bf      	uxth	r7, r7
10004eaa:	2b7f      	cmp	r3, #127	; 0x7f
10004eac:	d82c      	bhi.n	10004f08 <usbd_control_xfer_cb+0xc4>
  uint8_t ep_addr = EDPT_CTRL_OUT;
10004eae:	2100      	movs	r1, #0
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
10004eb0:	42a2      	cmp	r2, r4
10004eb2:	d034      	beq.n	10004f1e <usbd_control_xfer_cb+0xda>
10004eb4:	4a1d      	ldr	r2, [pc, #116]	; (10004f2c <usbd_control_xfer_cb+0xe8>)
10004eb6:	003b      	movs	r3, r7
10004eb8:	0030      	movs	r0, r6
10004eba:	f000 fa0d 	bl	100052d8 <dcd_edpt_xfer>
10004ebe:	0007      	movs	r7, r0
10004ec0:	e7cc      	b.n	10004e5c <usbd_control_xfer_cb+0x18>
    if ( _ctrl_xfer.complete_cb )
10004ec2:	692b      	ldr	r3, [r5, #16]
10004ec4:	2b00      	cmp	r3, #0
10004ec6:	d004      	beq.n	10004ed2 <usbd_control_xfer_cb+0x8e>
      is_ok = _ctrl_xfer.complete_cb(rhport, &_ctrl_xfer.request);
10004ec8:	0029      	movs	r1, r5
10004eca:	0030      	movs	r0, r6
10004ecc:	4798      	blx	r3
    if ( is_ok )
10004ece:	2800      	cmp	r0, #0
10004ed0:	d00e      	beq.n	10004ef0 <usbd_control_xfer_cb+0xac>
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10004ed2:	227f      	movs	r2, #127	; 0x7f
10004ed4:	2100      	movs	r1, #0
10004ed6:	782b      	ldrb	r3, [r5, #0]
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
10004ed8:	0030      	movs	r0, r6
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10004eda:	429a      	cmp	r2, r3
10004edc:	4149      	adcs	r1, r1
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
10004ede:	2300      	movs	r3, #0
10004ee0:	2200      	movs	r2, #0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10004ee2:	01c9      	lsls	r1, r1, #7
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
10004ee4:	f000 f9f8 	bl	100052d8 <dcd_edpt_xfer>
10004ee8:	0007      	movs	r7, r0
10004eea:	e7b7      	b.n	10004e5c <usbd_control_xfer_cb+0x18>
    TU_ASSERT(0 == xferred_bytes);
10004eec:	2700      	movs	r7, #0
10004eee:	e7b5      	b.n	10004e5c <usbd_control_xfer_cb+0x18>
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
10004ef0:	2100      	movs	r1, #0
10004ef2:	0030      	movs	r0, r6
10004ef4:	f000 fa06 	bl	10005304 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
10004ef8:	2180      	movs	r1, #128	; 0x80
10004efa:	0030      	movs	r0, r6
10004efc:	f000 fa02 	bl	10005304 <dcd_edpt_stall>
  return true;
10004f00:	2701      	movs	r7, #1
10004f02:	e7ab      	b.n	10004e5c <usbd_control_xfer_cb+0x18>
10004f04:	2740      	movs	r7, #64	; 0x40
10004f06:	e7ce      	b.n	10004ea6 <usbd_control_xfer_cb+0x62>
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
10004f08:	42a2      	cmp	r2, r4
10004f0a:	d007      	beq.n	10004f1c <usbd_control_xfer_cb+0xd8>
10004f0c:	4c07      	ldr	r4, [pc, #28]	; (10004f2c <usbd_control_xfer_cb+0xe8>)
10004f0e:	003a      	movs	r2, r7
10004f10:	0020      	movs	r0, r4
10004f12:	f7fc f955 	bl	100011c0 <__wrap___aeabi_memcpy>
    ep_addr = EDPT_CTRL_IN;
10004f16:	2180      	movs	r1, #128	; 0x80
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
10004f18:	0022      	movs	r2, r4
10004f1a:	e7cc      	b.n	10004eb6 <usbd_control_xfer_cb+0x72>
    ep_addr = EDPT_CTRL_IN;
10004f1c:	2180      	movs	r1, #128	; 0x80
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
10004f1e:	2200      	movs	r2, #0
10004f20:	e7c9      	b.n	10004eb6 <usbd_control_xfer_cb+0x72>
10004f22:	46c0      	nop			; (mov r8, r8)
10004f24:	2003d9a4 	.word	0x2003d9a4
10004f28:	10005155 	.word	0x10005155
10004f2c:	2003d9c0 	.word	0x2003d9c0

10004f30 <dcd_rp2040_irq>:
    _hw_endpoint_clear_stall(ep);
}

static void dcd_rp2040_irq(void)
{
    uint32_t status = usb_hw->ints;
10004f30:	2398      	movs	r3, #152	; 0x98
{
10004f32:	b5f0      	push	{r4, r5, r6, r7, lr}
10004f34:	4645      	mov	r5, r8
10004f36:	46de      	mov	lr, fp
10004f38:	4657      	mov	r7, sl
10004f3a:	464e      	mov	r6, r9
    uint32_t status = usb_hw->ints;
10004f3c:	4a42      	ldr	r2, [pc, #264]	; (10005048 <dcd_rp2040_irq+0x118>)
{
10004f3e:	b5e0      	push	{r5, r6, r7, lr}
    uint32_t status = usb_hw->ints;
10004f40:	58d3      	ldr	r3, [r2, r3]
    uint32_t handled = 0;

    if (status & USB_INTS_SETUP_REQ_BITS)
10004f42:	2480      	movs	r4, #128	; 0x80
    uint32_t status = usb_hw->ints;
10004f44:	4698      	mov	r8, r3
    if (status & USB_INTS_SETUP_REQ_BITS)
10004f46:	001d      	movs	r5, r3
10004f48:	2310      	movs	r3, #16
{
10004f4a:	b085      	sub	sp, #20
10004f4c:	9303      	str	r3, [sp, #12]
    if (status & USB_INTS_SETUP_REQ_BITS)
10004f4e:	4643      	mov	r3, r8
10004f50:	0264      	lsls	r4, r4, #9
10004f52:	4025      	ands	r5, r4
10004f54:	4223      	tst	r3, r4
10004f56:	d014      	beq.n	10004f82 <dcd_rp2040_irq+0x52>
        ep->next_pid = 1u;
10004f58:	2101      	movs	r1, #1
10004f5a:	2039      	movs	r0, #57	; 0x39
        ep->stalled  = 0;
10004f5c:	2200      	movs	r2, #0
        ep->next_pid = 1u;
10004f5e:	4b3b      	ldr	r3, [pc, #236]	; (1000504c <dcd_rp2040_irq+0x11c>)
    {
        handled |= USB_INTS_SETUP_REQ_BITS;
10004f60:	0025      	movs	r5, r4
        ep->next_pid = 1u;
10004f62:	5419      	strb	r1, [r3, r0]
10004f64:	7159      	strb	r1, [r3, #5]
        ep->stalled  = 0;
10004f66:	3147      	adds	r1, #71	; 0x47
10004f68:	545a      	strb	r2, [r3, r1]
10004f6a:	751a      	strb	r2, [r3, #20]
        uint8_t const *setup = (uint8_t const *)&usb_dpram->setup_packet;
        // Clear stall bits and reset pid
        reset_ep0();
        // Pass setup packet to tiny usb
        dcd_event_setup_received(0, setup, true);
10004f6c:	2000      	movs	r0, #0
10004f6e:	3201      	adds	r2, #1
10004f70:	4937      	ldr	r1, [pc, #220]	; (10005050 <dcd_rp2040_irq+0x120>)
10004f72:	f7ff fdc3 	bl	10004afc <dcd_event_setup_received>
        usb_hw_clear->sie_status = USB_SIE_STATUS_SETUP_REC_BITS;
10004f76:	2280      	movs	r2, #128	; 0x80
10004f78:	4b36      	ldr	r3, [pc, #216]	; (10005054 <dcd_rp2040_irq+0x124>)
10004f7a:	0292      	lsls	r2, r2, #10
10004f7c:	651a      	str	r2, [r3, #80]	; 0x50
10004f7e:	4b36      	ldr	r3, [pc, #216]	; (10005058 <dcd_rp2040_irq+0x128>)
10004f80:	9303      	str	r3, [sp, #12]
    }

    if (status & USB_INTS_BUFF_STATUS_BITS)
10004f82:	4643      	mov	r3, r8
10004f84:	06db      	lsls	r3, r3, #27
10004f86:	d40d      	bmi.n	10004fa4 <dcd_rp2040_irq+0x74>
    {
        handled |= USB_INTS_BUFF_STATUS_BITS;
        hw_handle_buff_status();
    }

    if (status & USB_INTS_BUS_RESET_BITS)
10004f88:	2380      	movs	r3, #128	; 0x80
10004f8a:	4642      	mov	r2, r8
10004f8c:	015b      	lsls	r3, r3, #5
10004f8e:	421a      	tst	r2, r3
10004f90:	d138      	bne.n	10005004 <dcd_rp2040_irq+0xd4>
#if TUD_OPT_RP2040_USB_DEVICE_ENUMERATION_FIX
        rp2040_usb_device_enumeration_fix();
#endif
    }

    if (status ^ handled)
10004f92:	4545      	cmp	r5, r8
10004f94:	d152      	bne.n	1000503c <dcd_rp2040_irq+0x10c>
    {
        panic("Unhandled IRQ 0x%x\n", (uint) (status ^ handled));
    }
}
10004f96:	b005      	add	sp, #20
10004f98:	bcf0      	pop	{r4, r5, r6, r7}
10004f9a:	46bb      	mov	fp, r7
10004f9c:	46b2      	mov	sl, r6
10004f9e:	46a9      	mov	r9, r5
10004fa0:	46a0      	mov	r8, r4
10004fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t remaining_buffers = usb_hw->buf_status;
10004fa4:	4b28      	ldr	r3, [pc, #160]	; (10005048 <dcd_rp2040_irq+0x118>)
10004fa6:	6d9f      	ldr	r7, [r3, #88]	; 0x58
10004fa8:	469a      	mov	sl, r3
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
10004faa:	2f00      	cmp	r7, #0
10004fac:	d024      	beq.n	10004ff8 <dcd_rp2040_irq+0xc8>
            usb_hw_clear->buf_status = bit;
10004fae:	4b29      	ldr	r3, [pc, #164]	; (10005054 <dcd_rp2040_irq+0x124>)
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
10004fb0:	2500      	movs	r5, #0
    uint bit = 1u;
10004fb2:	2401      	movs	r4, #1
            usb_hw_clear->buf_status = bit;
10004fb4:	469b      	mov	fp, r3
10004fb6:	e003      	b.n	10004fc0 <dcd_rp2040_irq+0x90>
        bit <<= 1u;
10004fb8:	0064      	lsls	r4, r4, #1
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
10004fba:	3501      	adds	r5, #1
10004fbc:	2d20      	cmp	r5, #32
10004fbe:	d01b      	beq.n	10004ff8 <dcd_rp2040_irq+0xc8>
        if (remaining_buffers & bit)
10004fc0:	4227      	tst	r7, r4
10004fc2:	d0f9      	beq.n	10004fb8 <dcd_rp2040_irq+0x88>
            uint __unused which = (usb_hw->buf_cpu_should_handle & bit) ? 1 : 0;
10004fc4:	4653      	mov	r3, sl
10004fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            usb_hw_clear->buf_status = bit;
10004fc8:	465b      	mov	r3, fp
    return &hw_endpoints[num][in];
10004fca:	2668      	movs	r6, #104	; 0x68
10004fcc:	2201      	movs	r2, #1
            usb_hw_clear->buf_status = bit;
10004fce:	659c      	str	r4, [r3, #88]	; 0x58
            struct hw_endpoint *ep = hw_endpoint_get_by_num(i >> 1u, !(i & 1u));
10004fd0:	086b      	lsrs	r3, r5, #1
    return &hw_endpoints[num][in];
10004fd2:	435e      	muls	r6, r3
10004fd4:	2334      	movs	r3, #52	; 0x34
10004fd6:	4691      	mov	r9, r2
10004fd8:	43aa      	bics	r2, r5
10004fda:	4353      	muls	r3, r2
10004fdc:	18f6      	adds	r6, r6, r3
10004fde:	4b1b      	ldr	r3, [pc, #108]	; (1000504c <dcd_rp2040_irq+0x11c>)
10004fe0:	469c      	mov	ip, r3
10004fe2:	4466      	add	r6, ip
            bool done = _hw_endpoint_xfer_continue(ep);
10004fe4:	0030      	movs	r0, r6
10004fe6:	f000 fa3d 	bl	10005464 <_hw_endpoint_xfer_continue>
            if (done)
10004fea:	2800      	cmp	r0, #0
10004fec:	d11a      	bne.n	10005024 <dcd_rp2040_irq+0xf4>
            remaining_buffers &= ~bit;
10004fee:	43a7      	bics	r7, r4
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
10004ff0:	3501      	adds	r5, #1
        bit <<= 1u;
10004ff2:	0064      	lsls	r4, r4, #1
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
10004ff4:	2f00      	cmp	r7, #0
10004ff6:	d1e1      	bne.n	10004fbc <dcd_rp2040_irq+0x8c>
    if (status & USB_INTS_BUS_RESET_BITS)
10004ff8:	2380      	movs	r3, #128	; 0x80
10004ffa:	4642      	mov	r2, r8
10004ffc:	015b      	lsls	r3, r3, #5
        handled |= USB_INTS_BUFF_STATUS_BITS;
10004ffe:	9d03      	ldr	r5, [sp, #12]
    if (status & USB_INTS_BUS_RESET_BITS)
10005000:	421a      	tst	r2, r3
10005002:	d0c6      	beq.n	10004f92 <dcd_rp2040_irq+0x62>
        assigned_address = 0;
10005004:	2200      	movs	r2, #0
10005006:	4915      	ldr	r1, [pc, #84]	; (1000505c <dcd_rp2040_irq+0x12c>)
        dcd_event_bus_signal(0, DCD_EVENT_BUS_RESET, true);
10005008:	2000      	movs	r0, #0
        assigned_address = 0;
1000500a:	700a      	strb	r2, [r1, #0]
        usb_hw->dev_addr_ctrl = assigned_address;
1000500c:	490e      	ldr	r1, [pc, #56]	; (10005048 <dcd_rp2040_irq+0x118>)
        handled |= USB_INTS_BUS_RESET_BITS;
1000500e:	431d      	orrs	r5, r3
        usb_hw->dev_addr_ctrl = assigned_address;
10005010:	600a      	str	r2, [r1, #0]
        dcd_event_bus_signal(0, DCD_EVENT_BUS_RESET, true);
10005012:	3201      	adds	r2, #1
10005014:	2101      	movs	r1, #1
10005016:	f7ff fd01 	bl	10004a1c <dcd_event_bus_signal>
        usb_hw_clear->sie_status = USB_SIE_STATUS_BUS_RESET_BITS;
1000501a:	2280      	movs	r2, #128	; 0x80
1000501c:	4b0d      	ldr	r3, [pc, #52]	; (10005054 <dcd_rp2040_irq+0x124>)
1000501e:	0312      	lsls	r2, r2, #12
10005020:	651a      	str	r2, [r3, #80]	; 0x50
10005022:	e7b6      	b.n	10004f92 <dcd_rp2040_irq+0x62>
                dcd_event_xfer_complete(0, ep->ep_addr, ep->len, XFER_RESULT_SUCCESS, true);
10005024:	464b      	mov	r3, r9
10005026:	69f2      	ldr	r2, [r6, #28]
10005028:	7931      	ldrb	r1, [r6, #4]
1000502a:	2000      	movs	r0, #0
1000502c:	9300      	str	r3, [sp, #0]
1000502e:	2300      	movs	r3, #0
10005030:	f7ff fd8c 	bl	10004b4c <dcd_event_xfer_complete>
                hw_endpoint_reset_transfer(ep);
10005034:	0030      	movs	r0, r6
10005036:	f000 f9e9 	bl	1000540c <hw_endpoint_reset_transfer>
1000503a:	e7d8      	b.n	10004fee <dcd_rp2040_irq+0xbe>
        panic("Unhandled IRQ 0x%x\n", (uint) (status ^ handled));
1000503c:	4641      	mov	r1, r8
1000503e:	4808      	ldr	r0, [pc, #32]	; (10005060 <dcd_rp2040_irq+0x130>)
10005040:	4069      	eors	r1, r5
10005042:	f7fd fb43 	bl	100026cc <panic>
10005046:	46c0      	nop			; (mov r8, r8)
10005048:	50110000 	.word	0x50110000
1000504c:	2003dc80 	.word	0x2003dc80
10005050:	50100000 	.word	0x50100000
10005054:	50113000 	.word	0x50113000
10005058:	00010010 	.word	0x00010010
1000505c:	2003e343 	.word	0x2003e343
10005060:	1000a570 	.word	0x1000a570

10005064 <dcd_int_enable>:

    dcd_connect(rhport);
}

void dcd_int_enable(uint8_t rhport)
{
10005064:	b510      	push	{r4, lr}
    assert(rhport == 0);
    irq_set_enabled(USBCTRL_IRQ, true);
10005066:	2101      	movs	r1, #1
10005068:	2005      	movs	r0, #5
1000506a:	f7fc fd23 	bl	10001ab4 <irq_set_enabled>
}
1000506e:	bd10      	pop	{r4, pc}

10005070 <dcd_set_address>:
{
    pico_trace("dcd_set_address %d %d\n", rhport, dev_addr);
    assert(rhport == 0);

    // Can't set device address in hardware until status xfer has complete
    assigned_address = dev_addr;
10005070:	4b09      	ldr	r3, [pc, #36]	; (10005098 <dcd_set_address+0x28>)
{
10005072:	b510      	push	{r4, lr}
        ep->next_pid = 1u;
10005074:	2201      	movs	r2, #1
    assigned_address = dev_addr;
10005076:	7019      	strb	r1, [r3, #0]
        ep->next_pid = 1u;
10005078:	2139      	movs	r1, #57	; 0x39
        ep->stalled  = 0;
1000507a:	2300      	movs	r3, #0
        ep->next_pid = 1u;
1000507c:	4807      	ldr	r0, [pc, #28]	; (1000509c <dcd_set_address+0x2c>)
1000507e:	5442      	strb	r2, [r0, r1]
10005080:	7142      	strb	r2, [r0, #5]
        ep->stalled  = 0;
10005082:	3247      	adds	r2, #71	; 0x47
10005084:	5483      	strb	r3, [r0, r2]
10005086:	7503      	strb	r3, [r0, #20]
    _hw_endpoint_xfer(ep, buffer, total_bytes, start);
10005088:	2200      	movs	r2, #0
1000508a:	2100      	movs	r1, #0
1000508c:	3034      	adds	r0, #52	; 0x34
1000508e:	3301      	adds	r3, #1
10005090:	f000 fa68 	bl	10005564 <_hw_endpoint_xfer>

    ep0_0len_status();
}
10005094:	bd10      	pop	{r4, pc}
10005096:	46c0      	nop			; (mov r8, r8)
10005098:	2003e343 	.word	0x2003e343
1000509c:	2003dc80 	.word	0x2003dc80

100050a0 <dcd_connect>:
// connect by enabling internal pull-up resistor on D+/D-
void dcd_connect(uint8_t rhport)
{
    pico_info("dcd_connect %d\n", rhport);
    assert(rhport == 0);
    usb_hw_set->sie_ctrl = USB_SIE_CTRL_PULLUP_EN_BITS;
100050a0:	2280      	movs	r2, #128	; 0x80
100050a2:	4b02      	ldr	r3, [pc, #8]	; (100050ac <dcd_connect+0xc>)
100050a4:	0252      	lsls	r2, r2, #9
100050a6:	64da      	str	r2, [r3, #76]	; 0x4c
}
100050a8:	4770      	bx	lr
100050aa:	46c0      	nop			; (mov r8, r8)
100050ac:	50112000 	.word	0x50112000

100050b0 <dcd_init>:
{
100050b0:	b570      	push	{r4, r5, r6, lr}
100050b2:	0005      	movs	r5, r0
    rp2040_usb_init();
100050b4:	f000 f982 	bl	100053bc <rp2040_usb_init>
    irq_set_exclusive_handler(USBCTRL_IRQ, dcd_rp2040_irq);
100050b8:	2005      	movs	r0, #5
100050ba:	491c      	ldr	r1, [pc, #112]	; (1000512c <dcd_init+0x7c>)
100050bc:	f7fc fd1c 	bl	10001af8 <irq_set_exclusive_handler>
    memset(hw_endpoints, 0, sizeof(hw_endpoints));
100050c0:	22d0      	movs	r2, #208	; 0xd0
100050c2:	4c1b      	ldr	r4, [pc, #108]	; (10005130 <dcd_init+0x80>)
100050c4:	2100      	movs	r1, #0
100050c6:	0020      	movs	r0, r4
100050c8:	00d2      	lsls	r2, r2, #3
100050ca:	f7fc f873 	bl	100011b4 <__wrap_memset>
    assigned_address = 0;
100050ce:	2200      	movs	r2, #0
100050d0:	4b18      	ldr	r3, [pc, #96]	; (10005134 <dcd_init+0x84>)
    next_buffer_ptr = &usb_dpram->epx_data[0];
100050d2:	4919      	ldr	r1, [pc, #100]	; (10005138 <dcd_init+0x88>)
    assigned_address = 0;
100050d4:	701a      	strb	r2, [r3, #0]
    next_buffer_ptr = &usb_dpram->epx_data[0];
100050d6:	4b19      	ldr	r3, [pc, #100]	; (1000513c <dcd_init+0x8c>)
    ep->wMaxPacketSize = wMaxPacketSize;
100050d8:	2040      	movs	r0, #64	; 0x40
    next_buffer_ptr = &usb_dpram->epx_data[0];
100050da:	6019      	str	r1, [r3, #0]
    ep->in = in;
100050dc:	2635      	movs	r6, #53	; 0x35
    ep->rx = in == false;
100050de:	2301      	movs	r3, #1
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].out;
100050e0:	4917      	ldr	r1, [pc, #92]	; (10005140 <dcd_init+0x90>)
    ep->rx = in == false;
100050e2:	70e3      	strb	r3, [r4, #3]
    ep->next_pid = num == 0 ? 1u : 0u;
100050e4:	7163      	strb	r3, [r4, #5]
    ep->wMaxPacketSize = wMaxPacketSize;
100050e6:	62e0      	str	r0, [r4, #44]	; 0x2c
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].out;
100050e8:	60e1      	str	r1, [r4, #12]
    *ep->buffer_control = 0;
100050ea:	600a      	str	r2, [r1, #0]
    ep->in = in;
100050ec:	55a3      	strb	r3, [r4, r6]
    ep->ep_addr = ep_addr;
100050ee:	364c      	adds	r6, #76	; 0x4c
100050f0:	36ff      	adds	r6, #255	; 0xff
100050f2:	8726      	strh	r6, [r4, #56]	; 0x38
    ep->transfer_type = transfer_type;
100050f4:	2600      	movs	r6, #0
    ep->wMaxPacketSize = wMaxPacketSize;
100050f6:	6620      	str	r0, [r4, #96]	; 0x60
    ep->transfer_type = transfer_type;
100050f8:	3024      	adds	r0, #36	; 0x24
100050fa:	5426      	strb	r6, [r4, r0]
        ep->hw_data_buf = (uint8_t*)&usb_dpram->ep0_buf_a[0];
100050fc:	4911      	ldr	r1, [pc, #68]	; (10005144 <dcd_init+0x94>)
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].in;
100050fe:	4812      	ldr	r0, [pc, #72]	; (10005148 <dcd_init+0x98>)
        ep->endpoint_control = NULL;
10005100:	60a2      	str	r2, [r4, #8]
        ep->hw_data_buf = (uint8_t*)&usb_dpram->ep0_buf_a[0];
10005102:	6121      	str	r1, [r4, #16]
    ep->configured = true;
10005104:	7023      	strb	r3, [r4, #0]
    ep->num = num;
10005106:	86e2      	strh	r2, [r4, #54]	; 0x36
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].in;
10005108:	6420      	str	r0, [r4, #64]	; 0x40
    *ep->buffer_control = 0;
1000510a:	6002      	str	r2, [r0, #0]
        ep->endpoint_control = NULL;
1000510c:	63e2      	str	r2, [r4, #60]	; 0x3c
    ep->configured = true;
1000510e:	3234      	adds	r2, #52	; 0x34
10005110:	54a3      	strb	r3, [r4, r2]
    usb_hw->main_ctrl = USB_MAIN_CTRL_CONTROLLER_EN_BITS;
10005112:	4a0e      	ldr	r2, [pc, #56]	; (1000514c <dcd_init+0x9c>)
        ep->hw_data_buf = (uint8_t*)&usb_dpram->ep0_buf_a[0];
10005114:	6461      	str	r1, [r4, #68]	; 0x44
    usb_hw->main_ctrl = USB_MAIN_CTRL_CONTROLLER_EN_BITS;
10005116:	6413      	str	r3, [r2, #64]	; 0x40
    usb_hw->sie_ctrl = USB_SIE_CTRL_EP0_INT_1BUF_BITS; 
10005118:	2380      	movs	r3, #128	; 0x80
1000511a:	059b      	lsls	r3, r3, #22
1000511c:	64d3      	str	r3, [r2, #76]	; 0x4c
    usb_hw->inte     = USB_INTS_BUFF_STATUS_BITS | USB_INTS_BUS_RESET_BITS | USB_INTS_SETUP_REQ_BITS;
1000511e:	2390      	movs	r3, #144	; 0x90
10005120:	490b      	ldr	r1, [pc, #44]	; (10005150 <dcd_init+0xa0>)
    dcd_connect(rhport);
10005122:	0028      	movs	r0, r5
    usb_hw->inte     = USB_INTS_BUFF_STATUS_BITS | USB_INTS_BUS_RESET_BITS | USB_INTS_SETUP_REQ_BITS;
10005124:	50d1      	str	r1, [r2, r3]
    dcd_connect(rhport);
10005126:	f7ff ffbb 	bl	100050a0 <dcd_connect>
}
1000512a:	bd70      	pop	{r4, r5, r6, pc}
1000512c:	10004f31 	.word	0x10004f31
10005130:	2003dc80 	.word	0x2003dc80
10005134:	2003e343 	.word	0x2003e343
10005138:	50100180 	.word	0x50100180
1000513c:	2003e304 	.word	0x2003e304
10005140:	50100084 	.word	0x50100084
10005144:	50100100 	.word	0x50100100
10005148:	50100080 	.word	0x50100080
1000514c:	50110000 	.word	0x50110000
10005150:	00011010 	.word	0x00011010

10005154 <dcd_edpt0_status_complete>:
void dcd_edpt0_status_complete(uint8_t rhport, tusb_control_request_t const * request)
{
    pico_trace("dcd_edpt0_status_complete %d\n", rhport);
    assert(rhport == 0);

    if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
10005154:	780b      	ldrb	r3, [r1, #0]
10005156:	065b      	lsls	r3, r3, #25
10005158:	d102      	bne.n	10005160 <dcd_edpt0_status_complete+0xc>
        request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
1000515a:	784b      	ldrb	r3, [r1, #1]
1000515c:	2b05      	cmp	r3, #5
1000515e:	d009      	beq.n	10005174 <dcd_edpt0_status_complete+0x20>
        ep->next_pid = 1u;
10005160:	2101      	movs	r1, #1
10005162:	2039      	movs	r0, #57	; 0x39
        ep->stalled  = 0;
10005164:	2200      	movs	r2, #0
        ep->next_pid = 1u;
10005166:	4b06      	ldr	r3, [pc, #24]	; (10005180 <dcd_edpt0_status_complete+0x2c>)
10005168:	7159      	strb	r1, [r3, #5]
1000516a:	5419      	strb	r1, [r3, r0]
        ep->stalled  = 0;
1000516c:	3147      	adds	r1, #71	; 0x47
1000516e:	751a      	strb	r2, [r3, #20]
10005170:	545a      	strb	r2, [r3, r1]
        pico_trace("Set HW address %d\n", assigned_address);
        usb_hw->dev_addr_ctrl = assigned_address;
    }

    reset_ep0();
}
10005172:	4770      	bx	lr
        usb_hw->dev_addr_ctrl = assigned_address;
10005174:	4b03      	ldr	r3, [pc, #12]	; (10005184 <dcd_edpt0_status_complete+0x30>)
10005176:	781a      	ldrb	r2, [r3, #0]
10005178:	4b03      	ldr	r3, [pc, #12]	; (10005188 <dcd_edpt0_status_complete+0x34>)
1000517a:	601a      	str	r2, [r3, #0]
1000517c:	e7f0      	b.n	10005160 <dcd_edpt0_status_complete+0xc>
1000517e:	46c0      	nop			; (mov r8, r8)
10005180:	2003dc80 	.word	0x2003dc80
10005184:	2003e343 	.word	0x2003e343
10005188:	50110000 	.word	0x50110000

1000518c <dcd_edpt_open>:

bool dcd_edpt_open (uint8_t rhport, tusb_desc_endpoint_t const * desc_edpt)
{
1000518c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000518e:	4647      	mov	r7, r8
10005190:	46ce      	mov	lr, r9
    pico_info("dcd_edpt_open %d %02x\n", rhport, desc_edpt->bEndpointAddress);
    assert(rhport == 0);
    hw_endpoint_init(desc_edpt->bEndpointAddress, desc_edpt->wMaxPacketSize.size, desc_edpt->bmAttributes.xfer);
10005192:	2307      	movs	r3, #7
{
10005194:	b580      	push	{r7, lr}
    hw_endpoint_init(desc_edpt->bEndpointAddress, desc_edpt->wMaxPacketSize.size, desc_edpt->bmAttributes.xfer);
10005196:	7948      	ldrb	r0, [r1, #5]
10005198:	78cc      	ldrb	r4, [r1, #3]
1000519a:	790a      	ldrb	r2, [r1, #4]
1000519c:	4003      	ands	r3, r0
1000519e:	788f      	ldrb	r7, [r1, #2]
100051a0:	07a4      	lsls	r4, r4, #30
100051a2:	021b      	lsls	r3, r3, #8
100051a4:	4313      	orrs	r3, r2
100051a6:	0fa2      	lsrs	r2, r4, #30
100051a8:	4694      	mov	ip, r2
100051aa:	0014      	movs	r4, r2
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
100051ac:	207f      	movs	r0, #127	; 0x7f
100051ae:	b27a      	sxtb	r2, r7
100051b0:	4691      	mov	r9, r2
    ep->ep_addr = ep_addr;
100051b2:	2168      	movs	r1, #104	; 0x68
100051b4:	2234      	movs	r2, #52	; 0x34
100051b6:	4038      	ands	r0, r7
    return &hw_endpoints[num][in];
100051b8:	09fe      	lsrs	r6, r7, #7
    ep->ep_addr = ep_addr;
100051ba:	4341      	muls	r1, r0
100051bc:	4372      	muls	r2, r6
100051be:	1852      	adds	r2, r2, r1
    ep->rx = in == false;
100051c0:	4649      	mov	r1, r9
100051c2:	43c9      	mvns	r1, r1
    ep->ep_addr = ep_addr;
100051c4:	4d3c      	ldr	r5, [pc, #240]	; (100052b8 <dcd_edpt_open+0x12c>)
    ep->rx = in == false;
100051c6:	0fc9      	lsrs	r1, r1, #31
    ep->ep_addr = ep_addr;
100051c8:	18aa      	adds	r2, r5, r2
    ep->rx = in == false;
100051ca:	70d1      	strb	r1, [r2, #3]
    ep->next_pid = num == 0 ? 1u : 0u;
100051cc:	4241      	negs	r1, r0
100051ce:	4141      	adcs	r1, r0
    ep->ep_addr = ep_addr;
100051d0:	7117      	strb	r7, [r2, #4]
    ep->in = in;
100051d2:	7056      	strb	r6, [r2, #1]
    ep->num = num;
100051d4:	7090      	strb	r0, [r2, #2]
    ep->next_pid = num == 0 ? 1u : 0u;
100051d6:	7151      	strb	r1, [r2, #5]
    if (transfer_type == TUSB_XFER_ISOCHRONOUS)
100051d8:	2c01      	cmp	r4, #1
100051da:	d05f      	beq.n	1000529c <dcd_edpt_open+0x110>
        if (wMaxPacketSize > USB_MAX_PACKET_SIZE)
100051dc:	2b40      	cmp	r3, #64	; 0x40
100051de:	d861      	bhi.n	100052a4 <dcd_edpt_open+0x118>
    ep->wMaxPacketSize = wMaxPacketSize;
100051e0:	2234      	movs	r2, #52	; 0x34
100051e2:	2168      	movs	r1, #104	; 0x68
100051e4:	4372      	muls	r2, r6
100051e6:	4341      	muls	r1, r0
100051e8:	1852      	adds	r2, r2, r1
100051ea:	18aa      	adds	r2, r5, r2
    ep->transfer_type = transfer_type;
100051ec:	0011      	movs	r1, r2
100051ee:	4667      	mov	r7, ip
100051f0:	3130      	adds	r1, #48	; 0x30
100051f2:	700f      	strb	r7, [r1, #0]
    if (ep->in)
100051f4:	4649      	mov	r1, r9
    ep->wMaxPacketSize = wMaxPacketSize;
100051f6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ep->in)
100051f8:	2900      	cmp	r1, #0
100051fa:	db3e      	blt.n	1000527a <dcd_edpt_open+0xee>
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].out;
100051fc:	4f2f      	ldr	r7, [pc, #188]	; (100052bc <dcd_edpt_open+0x130>)
100051fe:	00c1      	lsls	r1, r0, #3
10005200:	46bc      	mov	ip, r7
    *ep->buffer_control = 0;
10005202:	2700      	movs	r7, #0
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].out;
10005204:	4461      	add	r1, ip
10005206:	60d1      	str	r1, [r2, #12]
    *ep->buffer_control = 0;
10005208:	600f      	str	r7, [r1, #0]
    if (ep->num == 0)
1000520a:	2800      	cmp	r0, #0
1000520c:	d03e      	beq.n	1000528c <dcd_edpt_open+0x100>
            ep->endpoint_control = &usb_dpram->ep_ctrl[num-1].out;
1000520e:	4f2c      	ldr	r7, [pc, #176]	; (100052c0 <dcd_edpt_open+0x134>)
10005210:	00c1      	lsls	r1, r0, #3
10005212:	46bc      	mov	ip, r7
10005214:	4461      	add	r1, ip
10005216:	6091      	str	r1, [r2, #8]
    ep->hw_data_buf = next_buffer_ptr;
10005218:	2768      	movs	r7, #104	; 0x68
1000521a:	4a2a      	ldr	r2, [pc, #168]	; (100052c4 <dcd_edpt_open+0x138>)
1000521c:	4347      	muls	r7, r0
1000521e:	6811      	ldr	r1, [r2, #0]
10005220:	4690      	mov	r8, r2
10005222:	2234      	movs	r2, #52	; 0x34
10005224:	46bc      	mov	ip, r7
10005226:	4372      	muls	r2, r6
10005228:	4462      	add	r2, ip
1000522a:	18aa      	adds	r2, r5, r2
1000522c:	6111      	str	r1, [r2, #16]
    next_buffer_ptr += size;
1000522e:	2b40      	cmp	r3, #64	; 0x40
10005230:	d200      	bcs.n	10005234 <dcd_edpt_open+0xa8>
10005232:	2340      	movs	r3, #64	; 0x40
    if ((uintptr_t)next_buffer_ptr & 0b111111u)
10005234:	223f      	movs	r2, #63	; 0x3f
    next_buffer_ptr += size;
10005236:	18cb      	adds	r3, r1, r3
    if ((uintptr_t)next_buffer_ptr & 0b111111u)
10005238:	4213      	tst	r3, r2
1000523a:	d001      	beq.n	10005240 <dcd_edpt_open+0xb4>
        fixptr &= ~0b111111u;
1000523c:	4393      	bics	r3, r2
        fixptr += 64;
1000523e:	3340      	adds	r3, #64	; 0x40
        next_buffer_ptr = (uint8_t*)fixptr;
10005240:	4642      	mov	r2, r8
10005242:	6013      	str	r3, [r2, #0]
}

static inline uintptr_t hw_data_offset(uint8_t *buf)
{
    // Remove usb base from buffer pointer
    return (uintptr_t)buf ^ (uintptr_t)usb_dpram;
10005244:	4b20      	ldr	r3, [pc, #128]	; (100052c8 <dcd_edpt_open+0x13c>)
    *ep->endpoint_control = reg;
10005246:	2268      	movs	r2, #104	; 0x68
10005248:	4059      	eors	r1, r3
1000524a:	2334      	movs	r3, #52	; 0x34
                  | (ep->transfer_type << EP_CTRL_BUFFER_TYPE_LSB)
1000524c:	06a4      	lsls	r4, r4, #26
                  | dpram_offset;
1000524e:	430c      	orrs	r4, r1
    uint32_t reg =  EP_CTRL_ENABLE_BITS
10005250:	21a0      	movs	r1, #160	; 0xa0
    *ep->endpoint_control = reg;
10005252:	4373      	muls	r3, r6
10005254:	4342      	muls	r2, r0
10005256:	189b      	adds	r3, r3, r2
10005258:	18eb      	adds	r3, r5, r3
1000525a:	689b      	ldr	r3, [r3, #8]
    uint32_t reg =  EP_CTRL_ENABLE_BITS
1000525c:	0609      	lsls	r1, r1, #24
1000525e:	430c      	orrs	r4, r1
    *ep->endpoint_control = reg;
10005260:	601c      	str	r4, [r3, #0]
    ep->configured = true;
10005262:	2334      	movs	r3, #52	; 0x34
10005264:	435e      	muls	r6, r3
10005266:	3334      	adds	r3, #52	; 0x34
10005268:	4358      	muls	r0, r3
1000526a:	3b67      	subs	r3, #103	; 0x67
1000526c:	1836      	adds	r6, r6, r0
1000526e:	55ab      	strb	r3, [r5, r6]
    return true;
}
10005270:	2001      	movs	r0, #1
10005272:	bcc0      	pop	{r6, r7}
10005274:	46b9      	mov	r9, r7
10005276:	46b0      	mov	r8, r6
10005278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].in;
1000527a:	4f14      	ldr	r7, [pc, #80]	; (100052cc <dcd_edpt_open+0x140>)
1000527c:	00c1      	lsls	r1, r0, #3
1000527e:	46bc      	mov	ip, r7
    *ep->buffer_control = 0;
10005280:	2700      	movs	r7, #0
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].in;
10005282:	4461      	add	r1, ip
10005284:	60d1      	str	r1, [r2, #12]
    *ep->buffer_control = 0;
10005286:	600f      	str	r7, [r1, #0]
    if (ep->num == 0)
10005288:	2800      	cmp	r0, #0
1000528a:	d10f      	bne.n	100052ac <dcd_edpt_open+0x120>
        ep->endpoint_control = NULL;
1000528c:	2334      	movs	r3, #52	; 0x34
1000528e:	2200      	movs	r2, #0
10005290:	4373      	muls	r3, r6
10005292:	18eb      	adds	r3, r5, r3
10005294:	609a      	str	r2, [r3, #8]
        ep->hw_data_buf = (uint8_t*)&usb_dpram->ep0_buf_a[0];
10005296:	4a0e      	ldr	r2, [pc, #56]	; (100052d0 <dcd_edpt_open+0x144>)
10005298:	611a      	str	r2, [r3, #16]
1000529a:	e7e2      	b.n	10005262 <dcd_edpt_open+0xd6>
        if (wMaxPacketSize > USB_MAX_ISO_PACKET_SIZE)
1000529c:	2280      	movs	r2, #128	; 0x80
1000529e:	00d2      	lsls	r2, r2, #3
100052a0:	4293      	cmp	r3, r2
100052a2:	d39d      	bcc.n	100051e0 <dcd_edpt_open+0x54>
            panic("Isochronous wMaxPacketSize %d too large", wMaxPacketSize);
100052a4:	0019      	movs	r1, r3
100052a6:	480b      	ldr	r0, [pc, #44]	; (100052d4 <dcd_edpt_open+0x148>)
100052a8:	f7fd fa10 	bl	100026cc <panic>
            ep->endpoint_control = &usb_dpram->ep_ctrl[num-1].in;
100052ac:	4f06      	ldr	r7, [pc, #24]	; (100052c8 <dcd_edpt_open+0x13c>)
100052ae:	00c1      	lsls	r1, r0, #3
100052b0:	46bc      	mov	ip, r7
100052b2:	4461      	add	r1, ip
100052b4:	6091      	str	r1, [r2, #8]
100052b6:	e7af      	b.n	10005218 <dcd_edpt_open+0x8c>
100052b8:	2003dc80 	.word	0x2003dc80
100052bc:	50100084 	.word	0x50100084
100052c0:	50100004 	.word	0x50100004
100052c4:	2003e304 	.word	0x2003e304
100052c8:	50100000 	.word	0x50100000
100052cc:	50100080 	.word	0x50100080
100052d0:	50100100 	.word	0x50100100
100052d4:	1000a584 	.word	0x1000a584

100052d8 <dcd_edpt_xfer>:

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
100052d8:	b510      	push	{r4, lr}
100052da:	000c      	movs	r4, r1
    return &hw_endpoints[num][in];
100052dc:	2034      	movs	r0, #52	; 0x34
{
100052de:	0011      	movs	r1, r2
100052e0:	001a      	movs	r2, r3
    return &hw_endpoints[num][in];
100052e2:	09e3      	lsrs	r3, r4, #7
100052e4:	4358      	muls	r0, r3
100052e6:	237f      	movs	r3, #127	; 0x7f
100052e8:	4023      	ands	r3, r4
100052ea:	2468      	movs	r4, #104	; 0x68
100052ec:	435c      	muls	r4, r3
100052ee:	4b04      	ldr	r3, [pc, #16]	; (10005300 <dcd_edpt_xfer+0x28>)
100052f0:	1900      	adds	r0, r0, r4
100052f2:	18c0      	adds	r0, r0, r3
    _hw_endpoint_xfer(ep, buffer, total_bytes, start);
100052f4:	2301      	movs	r3, #1
100052f6:	f000 f935 	bl	10005564 <_hw_endpoint_xfer>
    assert(rhport == 0);
    // True means start new xfer
    hw_endpoint_xfer(ep_addr, buffer, total_bytes, true);
    return true;
}
100052fa:	2001      	movs	r0, #1
100052fc:	bd10      	pop	{r4, pc}
100052fe:	46c0      	nop			; (mov r8, r8)
10005300:	2003dc80 	.word	0x2003dc80

10005304 <dcd_edpt_stall>:

void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
10005304:	b570      	push	{r4, r5, r6, lr}
10005306:	257f      	movs	r5, #127	; 0x7f
    return &hw_endpoints[num][in];
10005308:	2034      	movs	r0, #52	; 0x34
1000530a:	2368      	movs	r3, #104	; 0x68
1000530c:	400d      	ands	r5, r1
    uint8_t in = (ep_addr & TUSB_DIR_IN_MASK) ? 1 : 0;
1000530e:	09cc      	lsrs	r4, r1, #7
    return &hw_endpoints[num][in];
10005310:	436b      	muls	r3, r5
10005312:	4360      	muls	r0, r4
10005314:	4e0c      	ldr	r6, [pc, #48]	; (10005348 <dcd_edpt_stall+0x44>)
10005316:	18c0      	adds	r0, r0, r3
10005318:	1830      	adds	r0, r6, r0
    if (ep->num == 0)
1000531a:	7883      	ldrb	r3, [r0, #2]
1000531c:	2b00      	cmp	r3, #0
1000531e:	d105      	bne.n	1000532c <dcd_edpt_stall+0x28>
        usb_hw_set->ep_stall_arm = ep->in ? USB_EP_STALL_ARM_EP0_IN_BITS : USB_EP_STALL_ARM_EP0_OUT_BITS;
10005320:	7843      	ldrb	r3, [r0, #1]
10005322:	425a      	negs	r2, r3
10005324:	4153      	adcs	r3, r2
10005326:	4a09      	ldr	r2, [pc, #36]	; (1000534c <dcd_edpt_stall+0x48>)
10005328:	3301      	adds	r3, #1
1000532a:	6693      	str	r3, [r2, #104]	; 0x68
    return _hw_endpoint_buffer_control_update32(ep, ~value, value);
1000532c:	2280      	movs	r2, #128	; 0x80
1000532e:	4908      	ldr	r1, [pc, #32]	; (10005350 <dcd_edpt_stall+0x4c>)
10005330:	0112      	lsls	r2, r2, #4
10005332:	f000 f875 	bl	10005420 <_hw_endpoint_buffer_control_update32>
    ep->stalled = true;
10005336:	2134      	movs	r1, #52	; 0x34
10005338:	2301      	movs	r3, #1
1000533a:	434c      	muls	r4, r1
1000533c:	3134      	adds	r1, #52	; 0x34
1000533e:	434d      	muls	r5, r1
10005340:	1964      	adds	r4, r4, r5
10005342:	1934      	adds	r4, r6, r4
10005344:	7523      	strb	r3, [r4, #20]
    pico_trace("dcd_edpt_stall %d %02x\n", rhport, ep_addr);
    assert(rhport == 0);
    hw_endpoint_stall(ep_addr);
}
10005346:	bd70      	pop	{r4, r5, r6, pc}
10005348:	2003dc80 	.word	0x2003dc80
1000534c:	50112000 	.word	0x50112000
10005350:	fffff7ff 	.word	0xfffff7ff

10005354 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall (uint8_t rhport, uint8_t ep_addr)
{
10005354:	b570      	push	{r4, r5, r6, lr}
10005356:	257f      	movs	r5, #127	; 0x7f
    return &hw_endpoints[num][in];
10005358:	2034      	movs	r0, #52	; 0x34
1000535a:	2368      	movs	r3, #104	; 0x68
1000535c:	400d      	ands	r5, r1
    uint8_t in = (ep_addr & TUSB_DIR_IN_MASK) ? 1 : 0;
1000535e:	09cc      	lsrs	r4, r1, #7
    return &hw_endpoints[num][in];
10005360:	436b      	muls	r3, r5
10005362:	4360      	muls	r0, r4
10005364:	4e0c      	ldr	r6, [pc, #48]	; (10005398 <dcd_edpt_clear_stall+0x44>)
10005366:	18c0      	adds	r0, r0, r3
10005368:	1830      	adds	r0, r6, r0
    if (ep->num == 0)
1000536a:	7883      	ldrb	r3, [r0, #2]
1000536c:	2b00      	cmp	r3, #0
1000536e:	d105      	bne.n	1000537c <dcd_edpt_clear_stall+0x28>
        usb_hw_clear->ep_stall_arm = ep->in ? USB_EP_STALL_ARM_EP0_IN_BITS : USB_EP_STALL_ARM_EP0_OUT_BITS;
10005370:	7843      	ldrb	r3, [r0, #1]
10005372:	425a      	negs	r2, r3
10005374:	4153      	adcs	r3, r2
10005376:	4a09      	ldr	r2, [pc, #36]	; (1000539c <dcd_edpt_clear_stall+0x48>)
10005378:	3301      	adds	r3, #1
1000537a:	6693      	str	r3, [r2, #104]	; 0x68
    return _hw_endpoint_buffer_control_update32(ep, ~value, 0);
1000537c:	2200      	movs	r2, #0
1000537e:	4908      	ldr	r1, [pc, #32]	; (100053a0 <dcd_edpt_clear_stall+0x4c>)
10005380:	f000 f84e 	bl	10005420 <_hw_endpoint_buffer_control_update32>
    ep->stalled = false;
10005384:	2134      	movs	r1, #52	; 0x34
10005386:	2300      	movs	r3, #0
10005388:	434c      	muls	r4, r1
1000538a:	3134      	adds	r1, #52	; 0x34
1000538c:	434d      	muls	r5, r1
1000538e:	1964      	adds	r4, r4, r5
10005390:	1934      	adds	r4, r6, r4
10005392:	7523      	strb	r3, [r4, #20]
    pico_trace("dcd_edpt_clear_stall %d %02x\n", rhport, ep_addr);
    assert(rhport == 0);
    hw_endpoint_clear_stall(ep_addr);
}
10005394:	bd70      	pop	{r4, r5, r6, pc}
10005396:	46c0      	nop			; (mov r8, r8)
10005398:	2003dc80 	.word	0x2003dc80
1000539c:	50113000 	.word	0x50113000
100053a0:	fffff7ff 	.word	0xfffff7ff

100053a4 <_hw_endpoint_buffer_control_update32.part.0.isra.0>:
    }
    if (or_mask) {
        value |= or_mask;
        if (or_mask & USB_BUF_CTRL_AVAIL) {
            if (*ep->buffer_control & USB_BUF_CTRL_AVAIL) {
                panic("ep %d %s was already available", ep->num, ep_dir_string[ep->in]);
100053a4:	4b03      	ldr	r3, [pc, #12]	; (100053b4 <_hw_endpoint_buffer_control_update32.part.0.isra.0+0x10>)
100053a6:	0080      	lsls	r0, r0, #2
100053a8:	58c2      	ldr	r2, [r0, r3]
void _hw_endpoint_buffer_control_update32(struct hw_endpoint *ep, uint32_t and_mask, uint32_t or_mask) {
100053aa:	b510      	push	{r4, lr}
                panic("ep %d %s was already available", ep->num, ep_dir_string[ep->in]);
100053ac:	4802      	ldr	r0, [pc, #8]	; (100053b8 <_hw_endpoint_buffer_control_update32.part.0.isra.0+0x14>)
100053ae:	f7fd f98d 	bl	100026cc <panic>
100053b2:	46c0      	nop			; (mov r8, r8)
100053b4:	20002750 	.word	0x20002750
100053b8:	1000a5ac 	.word	0x1000a5ac

100053bc <rp2040_usb_init>:
100053bc:	2280      	movs	r2, #128	; 0x80
100053be:	4b0e      	ldr	r3, [pc, #56]	; (100053f8 <rp2040_usb_init+0x3c>)
100053c0:	0452      	lsls	r2, r2, #17
{
100053c2:	b510      	push	{r4, lr}
100053c4:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100053c6:	4b0d      	ldr	r3, [pc, #52]	; (100053fc <rp2040_usb_init+0x40>)
100053c8:	490d      	ldr	r1, [pc, #52]	; (10005400 <rp2040_usb_init+0x44>)
100053ca:	601a      	str	r2, [r3, #0]
100053cc:	0010      	movs	r0, r2
100053ce:	688b      	ldr	r3, [r1, #8]
100053d0:	4398      	bics	r0, r3
100053d2:	d1fb      	bne.n	100053cc <rp2040_usb_init+0x10>
    memset(usb_hw, 0, sizeof(*usb_hw));
100053d4:	4c0b      	ldr	r4, [pc, #44]	; (10005404 <rp2040_usb_init+0x48>)
100053d6:	229c      	movs	r2, #156	; 0x9c
100053d8:	2100      	movs	r1, #0
100053da:	0020      	movs	r0, r4
100053dc:	f7fb feea 	bl	100011b4 <__wrap_memset>
    memset(usb_dpram, 0, sizeof(*usb_dpram));
100053e0:	2280      	movs	r2, #128	; 0x80
100053e2:	2100      	movs	r1, #0
100053e4:	0152      	lsls	r2, r2, #5
100053e6:	4808      	ldr	r0, [pc, #32]	; (10005408 <rp2040_usb_init+0x4c>)
100053e8:	f7fb fee4 	bl	100011b4 <__wrap_memset>
    usb_hw->muxing    = USB_USB_MUXING_TO_PHY_BITS    | USB_USB_MUXING_SOFTCON_BITS;
100053ec:	2309      	movs	r3, #9
100053ee:	6763      	str	r3, [r4, #116]	; 0x74
    usb_hw->pwr       = USB_USB_PWR_VBUS_DETECT_BITS  | USB_USB_PWR_VBUS_DETECT_OVERRIDE_EN_BITS;
100053f0:	3303      	adds	r3, #3
100053f2:	67a3      	str	r3, [r4, #120]	; 0x78
}
100053f4:	bd10      	pop	{r4, pc}
100053f6:	46c0      	nop			; (mov r8, r8)
100053f8:	4000e000 	.word	0x4000e000
100053fc:	4000f000 	.word	0x4000f000
10005400:	4000c000 	.word	0x4000c000
10005404:	50110000 	.word	0x50110000
10005408:	50100000 	.word	0x50100000

1000540c <hw_endpoint_reset_transfer>:
    ep->stalled = false;
1000540c:	2300      	movs	r3, #0
    ep->sent_setup = false;
1000540e:	2100      	movs	r1, #0
10005410:	2232      	movs	r2, #50	; 0x32
    ep->stalled = false;
10005412:	8283      	strh	r3, [r0, #20]
    ep->sent_setup = false;
10005414:	5481      	strb	r1, [r0, r2]
    ep->total_len = 0;
10005416:	6183      	str	r3, [r0, #24]
    ep->len = 0;
10005418:	61c3      	str	r3, [r0, #28]
    ep->transfer_size = 0;
1000541a:	6203      	str	r3, [r0, #32]
    ep->user_buf = 0;
1000541c:	6283      	str	r3, [r0, #40]	; 0x28
}
1000541e:	4770      	bx	lr

10005420 <_hw_endpoint_buffer_control_update32>:
void _hw_endpoint_buffer_control_update32(struct hw_endpoint *ep, uint32_t and_mask, uint32_t or_mask) {
10005420:	b510      	push	{r4, lr}
        value = *ep->buffer_control & and_mask;
10005422:	68c3      	ldr	r3, [r0, #12]
    if (and_mask) {
10005424:	2900      	cmp	r1, #0
10005426:	d001      	beq.n	1000542c <_hw_endpoint_buffer_control_update32+0xc>
        value = *ep->buffer_control & and_mask;
10005428:	681c      	ldr	r4, [r3, #0]
1000542a:	4021      	ands	r1, r4
    if (or_mask) {
1000542c:	2a00      	cmp	r2, #0
1000542e:	d011      	beq.n	10005454 <_hw_endpoint_buffer_control_update32+0x34>
        if (or_mask & USB_BUF_CTRL_AVAIL) {
10005430:	2480      	movs	r4, #128	; 0x80
10005432:	00e4      	lsls	r4, r4, #3
        value |= or_mask;
10005434:	4311      	orrs	r1, r2
        if (or_mask & USB_BUF_CTRL_AVAIL) {
10005436:	4222      	tst	r2, r4
10005438:	d00c      	beq.n	10005454 <_hw_endpoint_buffer_control_update32+0x34>
            if (*ep->buffer_control & USB_BUF_CTRL_AVAIL) {
1000543a:	681a      	ldr	r2, [r3, #0]
1000543c:	4222      	tst	r2, r4
1000543e:	d10b      	bne.n	10005458 <_hw_endpoint_buffer_control_update32+0x38>
            }
            *ep->buffer_control = value & ~USB_BUF_CTRL_AVAIL;
10005440:	4a07      	ldr	r2, [pc, #28]	; (10005460 <_hw_endpoint_buffer_control_update32+0x40>)
10005442:	400a      	ands	r2, r1
10005444:	601a      	str	r2, [r3, #0]
            // 12 cycle delay.. (should be good for 48*12Mhz = 576Mhz)
            // Don't need delay in host mode as host is in charge
#ifndef RP2040_USB_HOST_MODE
            __asm volatile (
10005446:	e7ff      	b.n	10005448 <_hw_endpoint_buffer_control_update32+0x28>
10005448:	e7ff      	b.n	1000544a <_hw_endpoint_buffer_control_update32+0x2a>
1000544a:	e7ff      	b.n	1000544c <_hw_endpoint_buffer_control_update32+0x2c>
1000544c:	e7ff      	b.n	1000544e <_hw_endpoint_buffer_control_update32+0x2e>
1000544e:	e7ff      	b.n	10005450 <_hw_endpoint_buffer_control_update32+0x30>
10005450:	e7ff      	b.n	10005452 <_hw_endpoint_buffer_control_update32+0x32>
                    "1:\n"
                    : : : "memory");
#endif
        }
    }
    *ep->buffer_control = value;
10005452:	68c3      	ldr	r3, [r0, #12]
10005454:	6019      	str	r1, [r3, #0]
}
10005456:	bd10      	pop	{r4, pc}
10005458:	7881      	ldrb	r1, [r0, #2]
1000545a:	7840      	ldrb	r0, [r0, #1]
1000545c:	f7ff ffa2 	bl	100053a4 <_hw_endpoint_buffer_control_update32.part.0.isra.0>
10005460:	fffffbff 	.word	0xfffffbff

10005464 <_hw_endpoint_xfer_continue>:
    }
}

// Returns true if transfer is complete
bool _hw_endpoint_xfer_continue(struct hw_endpoint *ep)
{
10005464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _hw_endpoint_lock_update(ep, 1);
    // Part way through a transfer
    if (!ep->active)
10005466:	7d46      	ldrb	r6, [r0, #21]
{
10005468:	0004      	movs	r4, r0
    if (!ep->active)
1000546a:	2e00      	cmp	r6, #0
1000546c:	d100      	bne.n	10005470 <_hw_endpoint_xfer_continue+0xc>
1000546e:	e067      	b.n	10005540 <_hw_endpoint_xfer_continue+0xdc>
    return *ep->buffer_control;
10005470:	68c3      	ldr	r3, [r0, #12]
    if (!ep->rx)
10005472:	78c0      	ldrb	r0, [r0, #3]
10005474:	681d      	ldr	r5, [r3, #0]
    uint transferred_bytes = buf_ctrl & USB_BUF_CTRL_LEN_MASK;
10005476:	05ad      	lsls	r5, r5, #22
10005478:	0dad      	lsrs	r5, r5, #22
    if (!ep->rx)
1000547a:	2800      	cmp	r0, #0
1000547c:	d143      	bne.n	10005506 <_hw_endpoint_xfer_continue+0xa2>
        ep->len += transferred_bytes;
1000547e:	69e3      	ldr	r3, [r4, #28]
10005480:	18e9      	adds	r1, r5, r3
10005482:	61e1      	str	r1, [r4, #28]

    // Update EP struct from hardware state
    _hw_endpoint_xfer_sync(ep);

    // Now we have synced our state with the hardware. Is there more data to transfer?
    uint remaining_bytes = ep->total_len - ep->len;
10005484:	69a2      	ldr	r2, [r4, #24]
10005486:	1a55      	subs	r5, r2, r1
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
10005488:	2d40      	cmp	r5, #64	; 0x40
1000548a:	d82e      	bhi.n	100054ea <_hw_endpoint_xfer_continue+0x86>
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
1000548c:	186b      	adds	r3, r5, r1
1000548e:	1a9b      	subs	r3, r3, r2
10005490:	425f      	negs	r7, r3
10005492:	417b      	adcs	r3, r7
10005494:	2724      	movs	r7, #36	; 0x24
10005496:	b2db      	uxtb	r3, r3
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
10005498:	6225      	str	r5, [r4, #32]
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
1000549a:	55e3      	strb	r3, [r4, r7]
    _hw_endpoint_update_last_buf(ep);

    // Can happen because of programmer error so check for it
    if (ep->len > ep->total_len)
1000549c:	428a      	cmp	r2, r1
1000549e:	d34c      	bcc.n	1000553a <_hw_endpoint_xfer_continue+0xd6>
    {
        panic("Transferred more data than expected");
    }

    // If we are done then notify tinyusb
    if (ep->len == ep->total_len)
100054a0:	d049      	beq.n	10005536 <_hw_endpoint_xfer_continue+0xd2>
    if (!ep->rx)
100054a2:	2800      	cmp	r0, #0
100054a4:	d023      	beq.n	100054ee <_hw_endpoint_xfer_continue+0x8a>
    uint32_t val = ep->transfer_size | USB_BUF_CTRL_AVAIL;
100054a6:	2280      	movs	r2, #128	; 0x80
100054a8:	00d2      	lsls	r2, r2, #3
100054aa:	432a      	orrs	r2, r5
    val |= ep->next_pid ? USB_BUF_CTRL_DATA1_PID : USB_BUF_CTRL_DATA0_PID;
100054ac:	7961      	ldrb	r1, [r4, #5]
100054ae:	2900      	cmp	r1, #0
100054b0:	d002      	beq.n	100054b8 <_hw_endpoint_xfer_continue+0x54>
100054b2:	2080      	movs	r0, #128	; 0x80
100054b4:	0180      	lsls	r0, r0, #6
100054b6:	4302      	orrs	r2, r0
    ep->next_pid ^= 1u;
100054b8:	2001      	movs	r0, #1
100054ba:	4041      	eors	r1, r0
100054bc:	7161      	strb	r1, [r4, #5]
    if (ep->last_buf)
100054be:	2b00      	cmp	r3, #0
100054c0:	d002      	beq.n	100054c8 <_hw_endpoint_xfer_continue+0x64>
        val |= USB_BUF_CTRL_LAST;
100054c2:	2380      	movs	r3, #128	; 0x80
100054c4:	01db      	lsls	r3, r3, #7
100054c6:	431a      	orrs	r2, r3
            if (*ep->buffer_control & USB_BUF_CTRL_AVAIL) {
100054c8:	68e1      	ldr	r1, [r4, #12]
100054ca:	680b      	ldr	r3, [r1, #0]
100054cc:	055b      	lsls	r3, r3, #21
100054ce:	d43c      	bmi.n	1000554a <_hw_endpoint_xfer_continue+0xe6>
            *ep->buffer_control = value & ~USB_BUF_CTRL_AVAIL;
100054d0:	4b20      	ldr	r3, [pc, #128]	; (10005554 <_hw_endpoint_xfer_continue+0xf0>)
100054d2:	4013      	ands	r3, r2
100054d4:	600b      	str	r3, [r1, #0]
            __asm volatile (
100054d6:	e7ff      	b.n	100054d8 <_hw_endpoint_xfer_continue+0x74>
100054d8:	e7ff      	b.n	100054da <_hw_endpoint_xfer_continue+0x76>
100054da:	e7ff      	b.n	100054dc <_hw_endpoint_xfer_continue+0x78>
100054dc:	e7ff      	b.n	100054de <_hw_endpoint_xfer_continue+0x7a>
100054de:	e7ff      	b.n	100054e0 <_hw_endpoint_xfer_continue+0x7c>
100054e0:	e7ff      	b.n	100054e2 <_hw_endpoint_xfer_continue+0x7e>
        _hw_endpoint_start_next_buffer(ep);
    }

    _hw_endpoint_lock_update(ep, -1);
    // More work to do
    return false;
100054e2:	2000      	movs	r0, #0
    *ep->buffer_control = value;
100054e4:	68e3      	ldr	r3, [r4, #12]
100054e6:	601a      	str	r2, [r3, #0]
}
100054e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
100054ea:	2540      	movs	r5, #64	; 0x40
100054ec:	e7ce      	b.n	1000548c <_hw_endpoint_xfer_continue+0x28>
        memcpy(ep->hw_data_buf, &ep->user_buf[ep->len], ep->transfer_size);
100054ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
100054f0:	002a      	movs	r2, r5
100054f2:	469c      	mov	ip, r3
100054f4:	6920      	ldr	r0, [r4, #16]
100054f6:	4461      	add	r1, ip
100054f8:	f7fb fe62 	bl	100011c0 <__wrap___aeabi_memcpy>
        val |= USB_BUF_CTRL_FULL;
100054fc:	2284      	movs	r2, #132	; 0x84
100054fe:	0212      	lsls	r2, r2, #8
    if (ep->last_buf)
10005500:	5de3      	ldrb	r3, [r4, r7]
        val |= USB_BUF_CTRL_FULL;
10005502:	432a      	orrs	r2, r5
10005504:	e7d2      	b.n	100054ac <_hw_endpoint_xfer_continue+0x48>
        memcpy(&ep->user_buf[ep->len], ep->hw_data_buf, transferred_bytes);
10005506:	69e3      	ldr	r3, [r4, #28]
10005508:	6aa0      	ldr	r0, [r4, #40]	; 0x28
1000550a:	469c      	mov	ip, r3
1000550c:	6921      	ldr	r1, [r4, #16]
1000550e:	002a      	movs	r2, r5
10005510:	4460      	add	r0, ip
10005512:	f7fb fe55 	bl	100011c0 <__wrap___aeabi_memcpy>
        ep->len += transferred_bytes;
10005516:	69e3      	ldr	r3, [r4, #28]
    if ((ep->rx) && (transferred_bytes < ep->transfer_size))
10005518:	78e0      	ldrb	r0, [r4, #3]
        ep->len += transferred_bytes;
1000551a:	18e9      	adds	r1, r5, r3
1000551c:	61e1      	str	r1, [r4, #28]
    if ((ep->rx) && (transferred_bytes < ep->transfer_size))
1000551e:	2800      	cmp	r0, #0
10005520:	d0b0      	beq.n	10005484 <_hw_endpoint_xfer_continue+0x20>
10005522:	6a23      	ldr	r3, [r4, #32]
10005524:	429d      	cmp	r5, r3
10005526:	d2ad      	bcs.n	10005484 <_hw_endpoint_xfer_continue+0x20>
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
10005528:	2300      	movs	r3, #0
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
1000552a:	2201      	movs	r2, #1
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
1000552c:	6223      	str	r3, [r4, #32]
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
1000552e:	3324      	adds	r3, #36	; 0x24
        ep->total_len = ep->len;
10005530:	61a1      	str	r1, [r4, #24]
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10005532:	54e2      	strb	r2, [r4, r3]
    if (ep->len > ep->total_len)
10005534:	e7d8      	b.n	100054e8 <_hw_endpoint_xfer_continue+0x84>
        return true;
10005536:	0030      	movs	r0, r6
10005538:	e7d6      	b.n	100054e8 <_hw_endpoint_xfer_continue+0x84>
        panic("Transferred more data than expected");
1000553a:	4807      	ldr	r0, [pc, #28]	; (10005558 <_hw_endpoint_xfer_continue+0xf4>)
1000553c:	f7fd f8c6 	bl	100026cc <panic>
        panic("Can't continue xfer on inactive ep %d %s", ep->num, ep_dir_string);
10005540:	7881      	ldrb	r1, [r0, #2]
10005542:	4a06      	ldr	r2, [pc, #24]	; (1000555c <_hw_endpoint_xfer_continue+0xf8>)
10005544:	4806      	ldr	r0, [pc, #24]	; (10005560 <_hw_endpoint_xfer_continue+0xfc>)
10005546:	f7fd f8c1 	bl	100026cc <panic>
1000554a:	78a1      	ldrb	r1, [r4, #2]
1000554c:	7860      	ldrb	r0, [r4, #1]
1000554e:	f7ff ff29 	bl	100053a4 <_hw_endpoint_buffer_control_update32.part.0.isra.0>
10005552:	46c0      	nop			; (mov r8, r8)
10005554:	fffffbff 	.word	0xfffffbff
10005558:	1000a5f8 	.word	0x1000a5f8
1000555c:	20002750 	.word	0x20002750
10005560:	1000a5cc 	.word	0x1000a5cc

10005564 <_hw_endpoint_xfer>:

void _hw_endpoint_xfer(struct hw_endpoint *ep, uint8_t *buffer, uint16_t total_len, bool start)
{
10005564:	b570      	push	{r4, r5, r6, lr}
10005566:	0004      	movs	r4, r0
    pico_trace(" total_len %d, start=%d\n", total_len, start);

    assert(ep->configured);


    if (start)
10005568:	2b00      	cmp	r3, #0
1000556a:	d049      	beq.n	10005600 <_hw_endpoint_xfer+0x9c>
    if (ep->active)
1000556c:	7d43      	ldrb	r3, [r0, #21]
1000556e:	2b00      	cmp	r3, #0
10005570:	d003      	beq.n	1000557a <_hw_endpoint_xfer+0x16>
    ep->stalled = false;
10005572:	2300      	movs	r3, #0
10005574:	7503      	strb	r3, [r0, #20]
    ep->sent_setup = false;
10005576:	2032      	movs	r0, #50	; 0x32
10005578:	5423      	strb	r3, [r4, r0]
    ep->len = 0;
1000557a:	2300      	movs	r3, #0
    ep->total_len = total_len;
1000557c:	61a2      	str	r2, [r4, #24]
    ep->len = 0;
1000557e:	61e3      	str	r3, [r4, #28]
    ep->transfer_size = total_len > 64 ? 64 : total_len;
10005580:	1c15      	adds	r5, r2, #0
10005582:	2a40      	cmp	r2, #64	; 0x40
10005584:	d831      	bhi.n	100055ea <_hw_endpoint_xfer+0x86>
    ep->active = true;
10005586:	2301      	movs	r3, #1
    ep->transfer_size = total_len > 64 ? 64 : total_len;
10005588:	b2ad      	uxth	r5, r5
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
1000558a:	1b52      	subs	r2, r2, r5
    ep->active = true;
1000558c:	7563      	strb	r3, [r4, #21]
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
1000558e:	4253      	negs	r3, r2
10005590:	415a      	adcs	r2, r3
10005592:	2624      	movs	r6, #36	; 0x24
    ep->buf_sel = 0;
10005594:	2325      	movs	r3, #37	; 0x25
10005596:	2000      	movs	r0, #0
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10005598:	b2d2      	uxtb	r2, r2
    ep->transfer_size = total_len > 64 ? 64 : total_len;
1000559a:	6225      	str	r5, [r4, #32]
    ep->user_buf = buffer;
1000559c:	62a1      	str	r1, [r4, #40]	; 0x28
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
1000559e:	55a2      	strb	r2, [r4, r6]
    ep->buf_sel = 0;
100055a0:	54e0      	strb	r0, [r4, r3]
    if (!ep->rx)
100055a2:	78e3      	ldrb	r3, [r4, #3]
100055a4:	2b00      	cmp	r3, #0
100055a6:	d022      	beq.n	100055ee <_hw_endpoint_xfer+0x8a>
    uint32_t val = ep->transfer_size | USB_BUF_CTRL_AVAIL;
100055a8:	2380      	movs	r3, #128	; 0x80
100055aa:	00db      	lsls	r3, r3, #3
100055ac:	432b      	orrs	r3, r5
    val |= ep->next_pid ? USB_BUF_CTRL_DATA1_PID : USB_BUF_CTRL_DATA0_PID;
100055ae:	7961      	ldrb	r1, [r4, #5]
100055b0:	2900      	cmp	r1, #0
100055b2:	d002      	beq.n	100055ba <_hw_endpoint_xfer+0x56>
100055b4:	2080      	movs	r0, #128	; 0x80
100055b6:	0180      	lsls	r0, r0, #6
100055b8:	4303      	orrs	r3, r0
    ep->next_pid ^= 1u;
100055ba:	2001      	movs	r0, #1
100055bc:	4041      	eors	r1, r0
100055be:	7161      	strb	r1, [r4, #5]
    if (ep->last_buf)
100055c0:	2a00      	cmp	r2, #0
100055c2:	d002      	beq.n	100055ca <_hw_endpoint_xfer+0x66>
        val |= USB_BUF_CTRL_LAST;
100055c4:	2280      	movs	r2, #128	; 0x80
100055c6:	01d2      	lsls	r2, r2, #7
100055c8:	4313      	orrs	r3, r2
            if (*ep->buffer_control & USB_BUF_CTRL_AVAIL) {
100055ca:	68e1      	ldr	r1, [r4, #12]
100055cc:	680a      	ldr	r2, [r1, #0]
100055ce:	0552      	lsls	r2, r2, #21
100055d0:	d419      	bmi.n	10005606 <_hw_endpoint_xfer+0xa2>
            *ep->buffer_control = value & ~USB_BUF_CTRL_AVAIL;
100055d2:	4a0f      	ldr	r2, [pc, #60]	; (10005610 <_hw_endpoint_xfer+0xac>)
100055d4:	401a      	ands	r2, r3
100055d6:	600a      	str	r2, [r1, #0]
            __asm volatile (
100055d8:	e7ff      	b.n	100055da <_hw_endpoint_xfer+0x76>
100055da:	e7ff      	b.n	100055dc <_hw_endpoint_xfer+0x78>
100055dc:	e7ff      	b.n	100055de <_hw_endpoint_xfer+0x7a>
100055de:	e7ff      	b.n	100055e0 <_hw_endpoint_xfer+0x7c>
100055e0:	e7ff      	b.n	100055e2 <_hw_endpoint_xfer+0x7e>
100055e2:	e7ff      	b.n	100055e4 <_hw_endpoint_xfer+0x80>
    *ep->buffer_control = value;
100055e4:	68e2      	ldr	r2, [r4, #12]
100055e6:	6013      	str	r3, [r2, #0]
    }
    else
    {
        _hw_endpoint_xfer_continue(ep);
    }
}
100055e8:	bd70      	pop	{r4, r5, r6, pc}
    ep->transfer_size = total_len > 64 ? 64 : total_len;
100055ea:	2540      	movs	r5, #64	; 0x40
100055ec:	e7cb      	b.n	10005586 <_hw_endpoint_xfer+0x22>
        memcpy(ep->hw_data_buf, &ep->user_buf[ep->len], ep->transfer_size);
100055ee:	002a      	movs	r2, r5
100055f0:	6920      	ldr	r0, [r4, #16]
100055f2:	f7fb fde5 	bl	100011c0 <__wrap___aeabi_memcpy>
        val |= USB_BUF_CTRL_FULL;
100055f6:	2384      	movs	r3, #132	; 0x84
100055f8:	021b      	lsls	r3, r3, #8
    if (ep->last_buf)
100055fa:	5da2      	ldrb	r2, [r4, r6]
        val |= USB_BUF_CTRL_FULL;
100055fc:	432b      	orrs	r3, r5
100055fe:	e7d6      	b.n	100055ae <_hw_endpoint_xfer+0x4a>
        _hw_endpoint_xfer_continue(ep);
10005600:	f7ff ff30 	bl	10005464 <_hw_endpoint_xfer_continue>
}
10005604:	e7f0      	b.n	100055e8 <_hw_endpoint_xfer+0x84>
10005606:	78a1      	ldrb	r1, [r4, #2]
10005608:	7860      	ldrb	r0, [r4, #1]
1000560a:	f7ff fecb 	bl	100053a4 <_hw_endpoint_buffer_control_update32.part.0.isra.0>
1000560e:	46c0      	nop			; (mov r8, r8)
10005610:	fffffbff 	.word	0xfffffbff

10005614 <tusb_init>:
#if TUSB_OPT_DEVICE_ENABLED
#include "device/usbd_pvt.h"
#endif

bool tusb_init(void)
{
10005614:	b570      	push	{r4, r5, r6, lr}
  // skip if already initialized
  if (_initialized) return true;
10005616:	4d06      	ldr	r5, [pc, #24]	; (10005630 <tusb_init+0x1c>)
10005618:	782c      	ldrb	r4, [r5, #0]
1000561a:	2c00      	cmp	r4, #0
1000561c:	d001      	beq.n	10005622 <tusb_init+0xe>
#endif

  _initialized = true;

  return TUSB_ERROR_NONE;
}
1000561e:	0020      	movs	r0, r4
10005620:	bd70      	pop	{r4, r5, r6, pc}
  TU_ASSERT ( tud_init() ); // init device stack
10005622:	f7fe fda1 	bl	10004168 <tud_init>
10005626:	2800      	cmp	r0, #0
10005628:	d0f9      	beq.n	1000561e <tusb_init+0xa>
  _initialized = true;
1000562a:	2301      	movs	r3, #1
1000562c:	702b      	strb	r3, [r5, #0]
  return TUSB_ERROR_NONE;
1000562e:	e7f6      	b.n	1000561e <tusb_init+0xa>
10005630:	2003e342 	.word	0x2003e342

10005634 <tusb_inited>:

bool tusb_inited(void)
{
  return _initialized;
10005634:	4b01      	ldr	r3, [pc, #4]	; (1000563c <tusb_inited+0x8>)
10005636:	7818      	ldrb	r0, [r3, #0]
}
10005638:	4770      	bx	lr
1000563a:	46c0      	nop			; (mov r8, r8)
1000563c:	2003e342 	.word	0x2003e342

10005640 <_Z8InfoTimeih>:

char NumBuf[20];

// display time
void InfoTime(int t, u8 col)
{
10005640:	b5f0      	push	{r4, r5, r6, r7, lr}
10005642:	46c6      	mov	lr, r8
10005644:	000f      	movs	r7, r1
10005646:	b500      	push	{lr}
	int min = t/60;
10005648:	213c      	movs	r1, #60	; 0x3c
{
1000564a:	0005      	movs	r5, r0
	int min = t/60;
1000564c:	f7fa fe66 	bl	1000031c <__wrap___aeabi_idiv>
	int sec = t - min*60;
10005650:	0103      	lsls	r3, r0, #4
10005652:	1ac3      	subs	r3, r0, r3
10005654:	009c      	lsls	r4, r3, #2
10005656:	1964      	adds	r4, r4, r5
	int n = DecNum(NumBuf, min);
10005658:	4d19      	ldr	r5, [pc, #100]	; (100056c0 <_Z8InfoTimeih+0x80>)
	int min = t/60;
1000565a:	0001      	movs	r1, r0
	int n = DecNum(NumBuf, min);
1000565c:	0028      	movs	r0, r5
1000565e:	f003 fa21 	bl	10008aa4 <_Z6DecNumPcl>
	NumBuf[n] = ':';
10005662:	233a      	movs	r3, #58	; 0x3a
10005664:	542b      	strb	r3, [r5, r0]
	n++;
10005666:	1c43      	adds	r3, r0, #1
	if (sec < 10)
10005668:	2c09      	cmp	r4, #9
1000566a:	dc02      	bgt.n	10005672 <_Z8InfoTimeih+0x32>
	{
		NumBuf[n] = '0';
1000566c:	2230      	movs	r2, #48	; 0x30
1000566e:	54ea      	strb	r2, [r5, r3]
		n++;
10005670:	1c83      	adds	r3, r0, #2
	}
	DecNum(&NumBuf[n], sec);
10005672:	0021      	movs	r1, r4
10005674:	18e8      	adds	r0, r5, r3
10005676:	f003 fa15 	bl	10008aa4 <_Z6DecNumPcl>
	while ((ch = *txt++) != 0)
1000567a:	782a      	ldrb	r2, [r5, #0]
1000567c:	2a00      	cmp	r2, #0
1000567e:	d01b      	beq.n	100056b8 <_Z8InfoTimeih+0x78>
10005680:	043c      	lsls	r4, r7, #16
10005682:	46a0      	mov	r8, r4
10005684:	0239      	lsls	r1, r7, #8
10005686:	063c      	lsls	r4, r7, #24
10005688:	46a4      	mov	ip, r4
1000568a:	4339      	orrs	r1, r7
1000568c:	4647      	mov	r7, r8
1000568e:	4339      	orrs	r1, r7
10005690:	4667      	mov	r7, ip
10005692:	4e0c      	ldr	r6, [pc, #48]	; (100056c4 <_Z8InfoTimeih+0x84>)
10005694:	1c68      	adds	r0, r5, #1
10005696:	7833      	ldrb	r3, [r6, #0]
10005698:	4d0b      	ldr	r5, [pc, #44]	; (100056c8 <_Z8InfoTimeih+0x88>)
1000569a:	4c0c      	ldr	r4, [pc, #48]	; (100056cc <_Z8InfoTimeih+0x8c>)
1000569c:	4339      	orrs	r1, r7
	Text[x] = ch;
1000569e:	54ea      	strb	r2, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100056a0:	00da      	lsls	r2, r3, #3
100056a2:	18a2      	adds	r2, r4, r2
	while ((ch = *txt++) != 0)
100056a4:	3001      	adds	r0, #1
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100056a6:	6011      	str	r1, [r2, #0]
100056a8:	6051      	str	r1, [r2, #4]
	while ((ch = *txt++) != 0)
100056aa:	1e42      	subs	r2, r0, #1
100056ac:	7812      	ldrb	r2, [r2, #0]
	InfoX = x + 1;	
100056ae:	3301      	adds	r3, #1
100056b0:	b2db      	uxtb	r3, r3
	while ((ch = *txt++) != 0)
100056b2:	2a00      	cmp	r2, #0
100056b4:	d1f3      	bne.n	1000569e <_Z8InfoTimeih+0x5e>
100056b6:	7033      	strb	r3, [r6, #0]
	InfoDispText(NumBuf, col);
}
100056b8:	bc80      	pop	{r7}
100056ba:	46b8      	mov	r8, r7
100056bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100056be:	46c0      	nop			; (mov r8, r8)
100056c0:	2001b458 	.word	0x2001b458
100056c4:	2003e33c 	.word	0x2003e33c
100056c8:	20026364 	.word	0x20026364
100056cc:	200263b4 	.word	0x200263b4

100056d0 <_Z7InfoRowv>:

// display info row
void InfoRow()
{
100056d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100056d2:	464e      	mov	r6, r9
100056d4:	4645      	mov	r5, r8
100056d6:	46de      	mov	lr, fp
100056d8:	4657      	mov	r7, sl
	Text[x] = ch;
100056da:	4ae6      	ldr	r2, [pc, #920]	; (10005a74 <_Z7InfoRowv+0x3a4>)
{
100056dc:	b5e0      	push	{r5, r6, r7, lr}
	Text[x] = ch;
100056de:	4de6      	ldr	r5, [pc, #920]	; (10005a78 <_Z7InfoRowv+0x3a8>)
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100056e0:	2300      	movs	r3, #0
	Text[x] = ch;
100056e2:	802a      	strh	r2, [r5, #0]
	while ((ch = *txt++) != 0)
100056e4:	2253      	movs	r2, #83	; 0x53
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100056e6:	4ce5      	ldr	r4, [pc, #916]	; (10005a7c <_Z7InfoRowv+0x3ac>)
100056e8:	49e5      	ldr	r1, [pc, #916]	; (10005a80 <_Z7InfoRowv+0x3b0>)
100056ea:	4ee6      	ldr	r6, [pc, #920]	; (10005a84 <_Z7InfoRowv+0x3b4>)
100056ec:	6023      	str	r3, [r4, #0]
100056ee:	6063      	str	r3, [r4, #4]
100056f0:	60a3      	str	r3, [r4, #8]
100056f2:	60e3      	str	r3, [r4, #12]
{
100056f4:	b085      	sub	sp, #20
100056f6:	3101      	adds	r1, #1
	InfoX = x + 1;	
100056f8:	3302      	adds	r3, #2
	Text[x] = ch;
100056fa:	54ea      	strb	r2, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100056fc:	00da      	lsls	r2, r3, #3
100056fe:	18a2      	adds	r2, r4, r2
	while ((ch = *txt++) != 0)
10005700:	3101      	adds	r1, #1
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005702:	6016      	str	r6, [r2, #0]
10005704:	6056      	str	r6, [r2, #4]
	while ((ch = *txt++) != 0)
10005706:	1e4a      	subs	r2, r1, #1
10005708:	7812      	ldrb	r2, [r2, #0]
1000570a:	0018      	movs	r0, r3
	InfoX = x + 1;	
1000570c:	3301      	adds	r3, #1
1000570e:	b2db      	uxtb	r3, r3
	while ((ch = *txt++) != 0)
10005710:	2a00      	cmp	r2, #0
10005712:	d1f2      	bne.n	100056fa <_Z7InfoRowv+0x2a>
10005714:	49dc      	ldr	r1, [pc, #880]	; (10005a88 <_Z7InfoRowv+0x3b8>)
10005716:	700b      	strb	r3, [r1, #0]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005718:	2b08      	cmp	r3, #8
1000571a:	d84c      	bhi.n	100057b6 <_Z7InfoRowv+0xe6>
1000571c:	2108      	movs	r1, #8
1000571e:	2703      	movs	r7, #3
10005720:	1ac9      	subs	r1, r1, r3
10005722:	b2c9      	uxtb	r1, r1
10005724:	18ee      	adds	r6, r5, r3
10005726:	428f      	cmp	r7, r1
10005728:	d301      	bcc.n	1000572e <_Z7InfoRowv+0x5e>
1000572a:	f001 fa61 	bl	10006bf0 <_Z7InfoRowv+0x1520>
1000572e:	423e      	tst	r6, r7
10005730:	d001      	beq.n	10005736 <_Z7InfoRowv+0x66>
10005732:	f001 fa5d 	bl	10006bf0 <_Z7InfoRowv+0x1520>
10005736:	2109      	movs	r1, #9
10005738:	1ac9      	subs	r1, r1, r3
	Text[x] = ch;
1000573a:	48d4      	ldr	r0, [pc, #848]	; (10005a8c <_Z7InfoRowv+0x3bc>)
1000573c:	b2cf      	uxtb	r7, r1
1000573e:	00d9      	lsls	r1, r3, #3
10005740:	1861      	adds	r1, r4, r1
10005742:	6030      	str	r0, [r6, #0]
10005744:	4684      	mov	ip, r0
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005746:	600a      	str	r2, [r1, #0]
10005748:	604a      	str	r2, [r1, #4]
1000574a:	608a      	str	r2, [r1, #8]
1000574c:	60ca      	str	r2, [r1, #12]
1000574e:	610a      	str	r2, [r1, #16]
10005750:	614a      	str	r2, [r1, #20]
10005752:	618a      	str	r2, [r1, #24]
10005754:	61ca      	str	r2, [r1, #28]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005756:	08b8      	lsrs	r0, r7, #2
10005758:	2801      	cmp	r0, #1
1000575a:	d009      	beq.n	10005770 <_Z7InfoRowv+0xa0>
	Text[x] = ch;
1000575c:	4660      	mov	r0, ip
1000575e:	6070      	str	r0, [r6, #4]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005760:	620a      	str	r2, [r1, #32]
10005762:	624a      	str	r2, [r1, #36]	; 0x24
10005764:	628a      	str	r2, [r1, #40]	; 0x28
10005766:	62ca      	str	r2, [r1, #44]	; 0x2c
10005768:	630a      	str	r2, [r1, #48]	; 0x30
1000576a:	634a      	str	r2, [r1, #52]	; 0x34
1000576c:	638a      	str	r2, [r1, #56]	; 0x38
1000576e:	63ca      	str	r2, [r1, #60]	; 0x3c
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005770:	2203      	movs	r2, #3
10005772:	0039      	movs	r1, r7
10005774:	4391      	bics	r1, r2
10005776:	185b      	adds	r3, r3, r1
10005778:	b2db      	uxtb	r3, r3
1000577a:	428f      	cmp	r7, r1
1000577c:	d018      	beq.n	100057b0 <_Z7InfoRowv+0xe0>
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
1000577e:	2100      	movs	r1, #0
	Text[x] = ch;
10005780:	2020      	movs	r0, #32
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005782:	00da      	lsls	r2, r3, #3
10005784:	18a2      	adds	r2, r4, r2
	Text[x] = ch;
10005786:	54e8      	strb	r0, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005788:	6011      	str	r1, [r2, #0]
1000578a:	6051      	str	r1, [r2, #4]
	InfoX = x + 1;	
1000578c:	1c5a      	adds	r2, r3, #1
1000578e:	b2d2      	uxtb	r2, r2
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005790:	2a09      	cmp	r2, #9
10005792:	d00d      	beq.n	100057b0 <_Z7InfoRowv+0xe0>
	Text[x] = ch;
10005794:	54a8      	strb	r0, [r5, r2]
	InfoX = x + 1;	
10005796:	3302      	adds	r3, #2
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005798:	00d2      	lsls	r2, r2, #3
1000579a:	18a2      	adds	r2, r4, r2
	InfoX = x + 1;	
1000579c:	b2db      	uxtb	r3, r3
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
1000579e:	6011      	str	r1, [r2, #0]
100057a0:	6051      	str	r1, [r2, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100057a2:	2b09      	cmp	r3, #9
100057a4:	d004      	beq.n	100057b0 <_Z7InfoRowv+0xe0>
	Text[x] = ch;
100057a6:	54e8      	strb	r0, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100057a8:	00db      	lsls	r3, r3, #3
100057aa:	18e3      	adds	r3, r4, r3
100057ac:	6019      	str	r1, [r3, #0]
100057ae:	6059      	str	r1, [r3, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100057b0:	2309      	movs	r3, #9
100057b2:	4ab5      	ldr	r2, [pc, #724]	; (10005a88 <_Z7InfoRowv+0x3b8>)
100057b4:	7013      	strb	r3, [r2, #0]
#define COLVAL COL_WHITE
#define COLBEST COL_GREEN

	// display Speed
	InfoDispText(SpeedTxt, COLTIT); x += 7; InfoPos(x);
	DecNum(NumBuf, (int)(Speed/SPEEDCOEF));
100057b6:	4bb6      	ldr	r3, [pc, #728]	; (10005a90 <_Z7InfoRowv+0x3c0>)
100057b8:	49b6      	ldr	r1, [pc, #728]	; (10005a94 <_Z7InfoRowv+0x3c4>)
100057ba:	6818      	ldr	r0, [r3, #0]
100057bc:	f7fb fb61 	bl	10000e82 <__wrap___aeabi_fdiv>
100057c0:	f7fb fbda 	bl	10000f78 <__wrap___aeabi_f2iz>
100057c4:	0001      	movs	r1, r0
100057c6:	48b4      	ldr	r0, [pc, #720]	; (10005a98 <_Z7InfoRowv+0x3c8>)
100057c8:	f003 f96c 	bl	10008aa4 <_Z6DecNumPcl>
	while ((ch = *txt++) != 0)
100057cc:	4bb2      	ldr	r3, [pc, #712]	; (10005a98 <_Z7InfoRowv+0x3c8>)
100057ce:	781b      	ldrb	r3, [r3, #0]
100057d0:	2b00      	cmp	r3, #0
100057d2:	d101      	bne.n	100057d8 <_Z7InfoRowv+0x108>
100057d4:	f001 fa6c 	bl	10006cb0 <_Z7InfoRowv+0x15e0>
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100057d8:	2101      	movs	r1, #1
100057da:	4aab      	ldr	r2, [pc, #684]	; (10005a88 <_Z7InfoRowv+0x3b8>)
100057dc:	4249      	negs	r1, r1
100057de:	7816      	ldrb	r6, [r2, #0]
100057e0:	4aad      	ldr	r2, [pc, #692]	; (10005a98 <_Z7InfoRowv+0x3c8>)
100057e2:	3201      	adds	r2, #1
	Text[x] = ch;
100057e4:	55ab      	strb	r3, [r5, r6]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100057e6:	00f3      	lsls	r3, r6, #3
100057e8:	18e3      	adds	r3, r4, r3
	while ((ch = *txt++) != 0)
100057ea:	3201      	adds	r2, #1
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100057ec:	6019      	str	r1, [r3, #0]
100057ee:	6059      	str	r1, [r3, #4]
	while ((ch = *txt++) != 0)
100057f0:	1e53      	subs	r3, r2, #1
100057f2:	781b      	ldrb	r3, [r3, #0]
	InfoX = x + 1;	
100057f4:	3601      	adds	r6, #1
100057f6:	b2f6      	uxtb	r6, r6
	while ((ch = *txt++) != 0)
100057f8:	2b00      	cmp	r3, #0
100057fa:	d1f3      	bne.n	100057e4 <_Z7InfoRowv+0x114>
	Text[x] = ch;
100057fc:	232f      	movs	r3, #47	; 0x2f
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100057fe:	00f0      	lsls	r0, r6, #3
10005800:	2208      	movs	r2, #8
10005802:	21fc      	movs	r1, #252	; 0xfc
	Text[x] = ch;
10005804:	55ab      	strb	r3, [r5, r6]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005806:	1820      	adds	r0, r4, r0
10005808:	f7fb fcd4 	bl	100011b4 <__wrap_memset>
	InfoDispText(NumBuf, COLVAL);
	InfoDispChar('/', COLTIT);
	InfoDispChar((Gear < 0) ? 'R' : (Gear + '0'), COLVAL);
1000580c:	4aa3      	ldr	r2, [pc, #652]	; (10005a9c <_Z7InfoRowv+0x3cc>)
	InfoX = x + 1;	
1000580e:	1c73      	adds	r3, r6, #1
	InfoDispChar((Gear < 0) ? 'R' : (Gear + '0'), COLVAL);
10005810:	6812      	ldr	r2, [r2, #0]
10005812:	2152      	movs	r1, #82	; 0x52
	InfoX = x + 1;	
10005814:	b2db      	uxtb	r3, r3
	InfoDispChar((Gear < 0) ? 'R' : (Gear + '0'), COLVAL);
10005816:	2a00      	cmp	r2, #0
10005818:	db01      	blt.n	1000581e <_Z7InfoRowv+0x14e>
1000581a:	3230      	adds	r2, #48	; 0x30
1000581c:	b2d1      	uxtb	r1, r2
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
1000581e:	00d8      	lsls	r0, r3, #3
	Text[x] = ch;
10005820:	54e9      	strb	r1, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005822:	2208      	movs	r2, #8
10005824:	21ff      	movs	r1, #255	; 0xff
10005826:	1820      	adds	r0, r4, r0
10005828:	f7fb fcc4 	bl	100011b4 <__wrap_memset>
	InfoX = x + 1;	
1000582c:	4a96      	ldr	r2, [pc, #600]	; (10005a88 <_Z7InfoRowv+0x3b8>)
1000582e:	1cb3      	adds	r3, r6, #2
10005830:	b2db      	uxtb	r3, r3
10005832:	7013      	strb	r3, [r2, #0]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005834:	2b0f      	cmp	r3, #15
10005836:	d84d      	bhi.n	100058d4 <_Z7InfoRowv+0x204>
10005838:	220d      	movs	r2, #13
1000583a:	2103      	movs	r1, #3
1000583c:	1b92      	subs	r2, r2, r6
1000583e:	b2d2      	uxtb	r2, r2
10005840:	18e8      	adds	r0, r5, r3
10005842:	4291      	cmp	r1, r2
10005844:	d301      	bcc.n	1000584a <_Z7InfoRowv+0x17a>
10005846:	f001 f9a3 	bl	10006b90 <_Z7InfoRowv+0x14c0>
1000584a:	4208      	tst	r0, r1
1000584c:	d001      	beq.n	10005852 <_Z7InfoRowv+0x182>
1000584e:	f001 f99f 	bl	10006b90 <_Z7InfoRowv+0x14c0>
10005852:	220e      	movs	r2, #14
10005854:	1b92      	subs	r2, r2, r6
10005856:	b2d6      	uxtb	r6, r2
10005858:	08b2      	lsrs	r2, r6, #2
1000585a:	4691      	mov	r9, r2
	Text[x] = ch;
1000585c:	498b      	ldr	r1, [pc, #556]	; (10005a8c <_Z7InfoRowv+0x3bc>)
1000585e:	464f      	mov	r7, r9
10005860:	6001      	str	r1, [r0, #0]
10005862:	468c      	mov	ip, r1
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005864:	2100      	movs	r1, #0
10005866:	00da      	lsls	r2, r3, #3
10005868:	18a2      	adds	r2, r4, r2
1000586a:	6011      	str	r1, [r2, #0]
1000586c:	6051      	str	r1, [r2, #4]
1000586e:	6091      	str	r1, [r2, #8]
10005870:	60d1      	str	r1, [r2, #12]
10005872:	6111      	str	r1, [r2, #16]
10005874:	6151      	str	r1, [r2, #20]
10005876:	6191      	str	r1, [r2, #24]
10005878:	61d1      	str	r1, [r2, #28]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
1000587a:	2f01      	cmp	r7, #1
1000587c:	d101      	bne.n	10005882 <_Z7InfoRowv+0x1b2>
1000587e:	f001 f89a 	bl	100069b6 <_Z7InfoRowv+0x12e6>
	Text[x] = ch;
10005882:	4667      	mov	r7, ip
10005884:	6047      	str	r7, [r0, #4]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005886:	464f      	mov	r7, r9
10005888:	6211      	str	r1, [r2, #32]
1000588a:	6251      	str	r1, [r2, #36]	; 0x24
1000588c:	6291      	str	r1, [r2, #40]	; 0x28
1000588e:	62d1      	str	r1, [r2, #44]	; 0x2c
10005890:	6311      	str	r1, [r2, #48]	; 0x30
10005892:	6351      	str	r1, [r2, #52]	; 0x34
10005894:	6391      	str	r1, [r2, #56]	; 0x38
10005896:	63d1      	str	r1, [r2, #60]	; 0x3c
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005898:	2f02      	cmp	r7, #2
1000589a:	d101      	bne.n	100058a0 <_Z7InfoRowv+0x1d0>
1000589c:	f001 f88b 	bl	100069b6 <_Z7InfoRowv+0x12e6>
	Text[x] = ch;
100058a0:	4667      	mov	r7, ip
100058a2:	6087      	str	r7, [r0, #8]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100058a4:	464f      	mov	r7, r9
100058a6:	6411      	str	r1, [r2, #64]	; 0x40
100058a8:	6451      	str	r1, [r2, #68]	; 0x44
100058aa:	6491      	str	r1, [r2, #72]	; 0x48
100058ac:	64d1      	str	r1, [r2, #76]	; 0x4c
100058ae:	6511      	str	r1, [r2, #80]	; 0x50
100058b0:	6551      	str	r1, [r2, #84]	; 0x54
100058b2:	6591      	str	r1, [r2, #88]	; 0x58
100058b4:	65d1      	str	r1, [r2, #92]	; 0x5c
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100058b6:	2f03      	cmp	r7, #3
100058b8:	d101      	bne.n	100058be <_Z7InfoRowv+0x1ee>
100058ba:	f001 f87c 	bl	100069b6 <_Z7InfoRowv+0x12e6>
	Text[x] = ch;
100058be:	4663      	mov	r3, ip
100058c0:	60c3      	str	r3, [r0, #12]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100058c2:	6611      	str	r1, [r2, #96]	; 0x60
100058c4:	6651      	str	r1, [r2, #100]	; 0x64
100058c6:	6691      	str	r1, [r2, #104]	; 0x68
100058c8:	66d1      	str	r1, [r2, #108]	; 0x6c
100058ca:	6711      	str	r1, [r2, #112]	; 0x70
100058cc:	6751      	str	r1, [r2, #116]	; 0x74
100058ce:	6791      	str	r1, [r2, #120]	; 0x78
100058d0:	67d1      	str	r1, [r2, #124]	; 0x7c
	InfoX = x + 1;	
100058d2:	2310      	movs	r3, #16
	while ((ch = *txt++) != 0)
100058d4:	2754      	movs	r7, #84	; 0x54
100058d6:	4972      	ldr	r1, [pc, #456]	; (10005aa0 <_Z7InfoRowv+0x3d0>)
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100058d8:	486a      	ldr	r0, [pc, #424]	; (10005a84 <_Z7InfoRowv+0x3b4>)
100058da:	3101      	adds	r1, #1
100058dc:	00da      	lsls	r2, r3, #3
100058de:	18a2      	adds	r2, r4, r2
	while ((ch = *txt++) != 0)
100058e0:	3101      	adds	r1, #1
	Text[x] = ch;
100058e2:	54ef      	strb	r7, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100058e4:	6010      	str	r0, [r2, #0]
100058e6:	6050      	str	r0, [r2, #4]
	while ((ch = *txt++) != 0)
100058e8:	1e4a      	subs	r2, r1, #1
100058ea:	7817      	ldrb	r7, [r2, #0]
100058ec:	001e      	movs	r6, r3
	InfoX = x + 1;	
100058ee:	3301      	adds	r3, #1
100058f0:	b2db      	uxtb	r3, r3
	while ((ch = *txt++) != 0)
100058f2:	2f00      	cmp	r7, #0
100058f4:	d1f2      	bne.n	100058dc <_Z7InfoRowv+0x20c>
100058f6:	4a64      	ldr	r2, [pc, #400]	; (10005a88 <_Z7InfoRowv+0x3b8>)
100058f8:	7013      	strb	r3, [r2, #0]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100058fa:	2b15      	cmp	r3, #21
100058fc:	d87d      	bhi.n	100059fa <_Z7InfoRowv+0x32a>
100058fe:	2215      	movs	r2, #21
10005900:	2003      	movs	r0, #3
10005902:	1ad2      	subs	r2, r2, r3
10005904:	b2d2      	uxtb	r2, r2
10005906:	18e9      	adds	r1, r5, r3
10005908:	4290      	cmp	r0, r2
1000590a:	d301      	bcc.n	10005910 <_Z7InfoRowv+0x240>
1000590c:	f001 f923 	bl	10006b56 <_Z7InfoRowv+0x1486>
10005910:	4201      	tst	r1, r0
10005912:	d001      	beq.n	10005918 <_Z7InfoRowv+0x248>
10005914:	f001 f91f 	bl	10006b56 <_Z7InfoRowv+0x1486>
10005918:	2216      	movs	r2, #22
1000591a:	1ad2      	subs	r2, r2, r3
1000591c:	b2d6      	uxtb	r6, r2
1000591e:	08b2      	lsrs	r2, r6, #2
10005920:	4690      	mov	r8, r2
	Text[x] = ch;
10005922:	485a      	ldr	r0, [pc, #360]	; (10005a8c <_Z7InfoRowv+0x3bc>)
10005924:	00da      	lsls	r2, r3, #3
10005926:	6008      	str	r0, [r1, #0]
10005928:	4684      	mov	ip, r0
1000592a:	4640      	mov	r0, r8
1000592c:	18a2      	adds	r2, r4, r2
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
1000592e:	6017      	str	r7, [r2, #0]
10005930:	6057      	str	r7, [r2, #4]
10005932:	6097      	str	r7, [r2, #8]
10005934:	60d7      	str	r7, [r2, #12]
10005936:	6117      	str	r7, [r2, #16]
10005938:	6157      	str	r7, [r2, #20]
1000593a:	6197      	str	r7, [r2, #24]
1000593c:	61d7      	str	r7, [r2, #28]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
1000593e:	2801      	cmp	r0, #1
10005940:	d038      	beq.n	100059b4 <_Z7InfoRowv+0x2e4>
	Text[x] = ch;
10005942:	4660      	mov	r0, ip
10005944:	6048      	str	r0, [r1, #4]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005946:	4640      	mov	r0, r8
10005948:	6217      	str	r7, [r2, #32]
1000594a:	6257      	str	r7, [r2, #36]	; 0x24
1000594c:	6297      	str	r7, [r2, #40]	; 0x28
1000594e:	62d7      	str	r7, [r2, #44]	; 0x2c
10005950:	6317      	str	r7, [r2, #48]	; 0x30
10005952:	6357      	str	r7, [r2, #52]	; 0x34
10005954:	6397      	str	r7, [r2, #56]	; 0x38
10005956:	63d7      	str	r7, [r2, #60]	; 0x3c
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005958:	2802      	cmp	r0, #2
1000595a:	d02b      	beq.n	100059b4 <_Z7InfoRowv+0x2e4>
	Text[x] = ch;
1000595c:	4660      	mov	r0, ip
1000595e:	6088      	str	r0, [r1, #8]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005960:	4640      	mov	r0, r8
10005962:	6417      	str	r7, [r2, #64]	; 0x40
10005964:	6457      	str	r7, [r2, #68]	; 0x44
10005966:	6497      	str	r7, [r2, #72]	; 0x48
10005968:	64d7      	str	r7, [r2, #76]	; 0x4c
1000596a:	6517      	str	r7, [r2, #80]	; 0x50
1000596c:	6557      	str	r7, [r2, #84]	; 0x54
1000596e:	6597      	str	r7, [r2, #88]	; 0x58
10005970:	65d7      	str	r7, [r2, #92]	; 0x5c
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005972:	2803      	cmp	r0, #3
10005974:	d01e      	beq.n	100059b4 <_Z7InfoRowv+0x2e4>
	Text[x] = ch;
10005976:	4660      	mov	r0, ip
10005978:	60c8      	str	r0, [r1, #12]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
1000597a:	4640      	mov	r0, r8
1000597c:	6617      	str	r7, [r2, #96]	; 0x60
1000597e:	6657      	str	r7, [r2, #100]	; 0x64
10005980:	6697      	str	r7, [r2, #104]	; 0x68
10005982:	66d7      	str	r7, [r2, #108]	; 0x6c
10005984:	6717      	str	r7, [r2, #112]	; 0x70
10005986:	6757      	str	r7, [r2, #116]	; 0x74
10005988:	6797      	str	r7, [r2, #120]	; 0x78
1000598a:	67d7      	str	r7, [r2, #124]	; 0x7c
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
1000598c:	2804      	cmp	r0, #4
1000598e:	d011      	beq.n	100059b4 <_Z7InfoRowv+0x2e4>
	Text[x] = ch;
10005990:	4660      	mov	r0, ip
10005992:	6108      	str	r0, [r1, #16]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005994:	2180      	movs	r1, #128	; 0x80
10005996:	5057      	str	r7, [r2, r1]
10005998:	3104      	adds	r1, #4
1000599a:	5057      	str	r7, [r2, r1]
1000599c:	3104      	adds	r1, #4
1000599e:	5057      	str	r7, [r2, r1]
100059a0:	3104      	adds	r1, #4
100059a2:	5057      	str	r7, [r2, r1]
100059a4:	3104      	adds	r1, #4
100059a6:	5057      	str	r7, [r2, r1]
100059a8:	3104      	adds	r1, #4
100059aa:	5057      	str	r7, [r2, r1]
100059ac:	3104      	adds	r1, #4
100059ae:	5057      	str	r7, [r2, r1]
100059b0:	3104      	adds	r1, #4
100059b2:	5057      	str	r7, [r2, r1]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100059b4:	2203      	movs	r2, #3
100059b6:	0031      	movs	r1, r6
100059b8:	4391      	bics	r1, r2
100059ba:	185b      	adds	r3, r3, r1
100059bc:	b2db      	uxtb	r3, r3
100059be:	42b1      	cmp	r1, r6
100059c0:	d018      	beq.n	100059f4 <_Z7InfoRowv+0x324>
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100059c2:	2100      	movs	r1, #0
	Text[x] = ch;
100059c4:	2020      	movs	r0, #32
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100059c6:	00da      	lsls	r2, r3, #3
100059c8:	18a2      	adds	r2, r4, r2
	Text[x] = ch;
100059ca:	54e8      	strb	r0, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100059cc:	6011      	str	r1, [r2, #0]
100059ce:	6051      	str	r1, [r2, #4]
	InfoX = x + 1;	
100059d0:	1c5a      	adds	r2, r3, #1
100059d2:	b2d2      	uxtb	r2, r2
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100059d4:	2a16      	cmp	r2, #22
100059d6:	d00d      	beq.n	100059f4 <_Z7InfoRowv+0x324>
	Text[x] = ch;
100059d8:	54a8      	strb	r0, [r5, r2]
	InfoX = x + 1;	
100059da:	3302      	adds	r3, #2
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100059dc:	00d2      	lsls	r2, r2, #3
100059de:	18a2      	adds	r2, r4, r2
	InfoX = x + 1;	
100059e0:	b2db      	uxtb	r3, r3
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100059e2:	6011      	str	r1, [r2, #0]
100059e4:	6051      	str	r1, [r2, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100059e6:	2b16      	cmp	r3, #22
100059e8:	d004      	beq.n	100059f4 <_Z7InfoRowv+0x324>
	Text[x] = ch;
100059ea:	54e8      	strb	r0, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100059ec:	00db      	lsls	r3, r3, #3
100059ee:	18e3      	adds	r3, r4, r3
100059f0:	6019      	str	r1, [r3, #0]
100059f2:	6059      	str	r1, [r3, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100059f4:	2316      	movs	r3, #22
100059f6:	4a24      	ldr	r2, [pc, #144]	; (10005a88 <_Z7InfoRowv+0x3b8>)
100059f8:	7013      	strb	r3, [r2, #0]
	x += 7; InfoPos(x);

	// display this time
	InfoDispText(TimeTxt, COLTIT);
	x += 6; InfoPos(x);
	InfoTime(ThisTime, COLVAL);
100059fa:	4b2a      	ldr	r3, [pc, #168]	; (10005aa4 <_Z7InfoRowv+0x3d4>)
100059fc:	21ff      	movs	r1, #255	; 0xff
100059fe:	6818      	ldr	r0, [r3, #0]
10005a00:	f7ff fe1e 	bl	10005640 <_Z8InfoTimeih>
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005a04:	4b20      	ldr	r3, [pc, #128]	; (10005a88 <_Z7InfoRowv+0x3b8>)
10005a06:	781b      	ldrb	r3, [r3, #0]
10005a08:	2b1c      	cmp	r3, #28
10005a0a:	d900      	bls.n	10005a0e <_Z7InfoRowv+0x33e>
10005a0c:	e0c3      	b.n	10005b96 <_Z7InfoRowv+0x4c6>
10005a0e:	221c      	movs	r2, #28
10005a10:	2003      	movs	r0, #3
10005a12:	1ad2      	subs	r2, r2, r3
10005a14:	b2d2      	uxtb	r2, r2
10005a16:	18e9      	adds	r1, r5, r3
10005a18:	4290      	cmp	r0, r2
10005a1a:	d301      	bcc.n	10005a20 <_Z7InfoRowv+0x350>
10005a1c:	f001 f878 	bl	10006b10 <_Z7InfoRowv+0x1440>
10005a20:	4201      	tst	r1, r0
10005a22:	d001      	beq.n	10005a28 <_Z7InfoRowv+0x358>
10005a24:	f001 f874 	bl	10006b10 <_Z7InfoRowv+0x1440>
10005a28:	221d      	movs	r2, #29
10005a2a:	1ad2      	subs	r2, r2, r3
10005a2c:	b2d0      	uxtb	r0, r2
10005a2e:	0882      	lsrs	r2, r0, #2
10005a30:	4691      	mov	r9, r2
	Text[x] = ch;
10005a32:	4e16      	ldr	r6, [pc, #88]	; (10005a8c <_Z7InfoRowv+0x3bc>)
10005a34:	464f      	mov	r7, r9
10005a36:	600e      	str	r6, [r1, #0]
10005a38:	46b4      	mov	ip, r6
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005a3a:	2600      	movs	r6, #0
10005a3c:	00da      	lsls	r2, r3, #3
10005a3e:	18a2      	adds	r2, r4, r2
10005a40:	6016      	str	r6, [r2, #0]
10005a42:	6056      	str	r6, [r2, #4]
10005a44:	6096      	str	r6, [r2, #8]
10005a46:	60d6      	str	r6, [r2, #12]
10005a48:	6116      	str	r6, [r2, #16]
10005a4a:	6156      	str	r6, [r2, #20]
10005a4c:	6196      	str	r6, [r2, #24]
10005a4e:	61d6      	str	r6, [r2, #28]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005a50:	2f01      	cmp	r7, #1
10005a52:	d100      	bne.n	10005a56 <_Z7InfoRowv+0x386>
10005a54:	e07e      	b.n	10005b54 <_Z7InfoRowv+0x484>
	Text[x] = ch;
10005a56:	4667      	mov	r7, ip
10005a58:	604f      	str	r7, [r1, #4]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005a5a:	464f      	mov	r7, r9
10005a5c:	6216      	str	r6, [r2, #32]
10005a5e:	6256      	str	r6, [r2, #36]	; 0x24
10005a60:	6296      	str	r6, [r2, #40]	; 0x28
10005a62:	62d6      	str	r6, [r2, #44]	; 0x2c
10005a64:	6316      	str	r6, [r2, #48]	; 0x30
10005a66:	6356      	str	r6, [r2, #52]	; 0x34
10005a68:	6396      	str	r6, [r2, #56]	; 0x38
10005a6a:	63d6      	str	r6, [r2, #60]	; 0x3c
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005a6c:	2f02      	cmp	r7, #2
10005a6e:	d071      	beq.n	10005b54 <_Z7InfoRowv+0x484>
10005a70:	e01a      	b.n	10005aa8 <_Z7InfoRowv+0x3d8>
10005a72:	46c0      	nop			; (mov r8, r8)
10005a74:	00002020 	.word	0x00002020
10005a78:	20026364 	.word	0x20026364
10005a7c:	200263b4 	.word	0x200263b4
10005a80:	1003ff64 	.word	0x1003ff64
10005a84:	fcfcfcfc 	.word	0xfcfcfcfc
10005a88:	2003e33c 	.word	0x2003e33c
10005a8c:	20202020 	.word	0x20202020
10005a90:	20026360 	.word	0x20026360
10005a94:	40888889 	.word	0x40888889
10005a98:	2001b458 	.word	0x2001b458
10005a9c:	20011bec 	.word	0x20011bec
10005aa0:	1003ff54 	.word	0x1003ff54
10005aa4:	20026634 	.word	0x20026634
	Text[x] = ch;
10005aa8:	4667      	mov	r7, ip
10005aaa:	608f      	str	r7, [r1, #8]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005aac:	464f      	mov	r7, r9
10005aae:	6416      	str	r6, [r2, #64]	; 0x40
10005ab0:	6456      	str	r6, [r2, #68]	; 0x44
10005ab2:	6496      	str	r6, [r2, #72]	; 0x48
10005ab4:	64d6      	str	r6, [r2, #76]	; 0x4c
10005ab6:	6516      	str	r6, [r2, #80]	; 0x50
10005ab8:	6556      	str	r6, [r2, #84]	; 0x54
10005aba:	6596      	str	r6, [r2, #88]	; 0x58
10005abc:	65d6      	str	r6, [r2, #92]	; 0x5c
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005abe:	2f03      	cmp	r7, #3
10005ac0:	d048      	beq.n	10005b54 <_Z7InfoRowv+0x484>
	Text[x] = ch;
10005ac2:	4667      	mov	r7, ip
10005ac4:	60cf      	str	r7, [r1, #12]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005ac6:	464f      	mov	r7, r9
10005ac8:	6616      	str	r6, [r2, #96]	; 0x60
10005aca:	6656      	str	r6, [r2, #100]	; 0x64
10005acc:	6696      	str	r6, [r2, #104]	; 0x68
10005ace:	66d6      	str	r6, [r2, #108]	; 0x6c
10005ad0:	6716      	str	r6, [r2, #112]	; 0x70
10005ad2:	6756      	str	r6, [r2, #116]	; 0x74
10005ad4:	6796      	str	r6, [r2, #120]	; 0x78
10005ad6:	67d6      	str	r6, [r2, #124]	; 0x7c
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005ad8:	2f04      	cmp	r7, #4
10005ada:	d03b      	beq.n	10005b54 <_Z7InfoRowv+0x484>
	Text[x] = ch;
10005adc:	4667      	mov	r7, ip
10005ade:	610f      	str	r7, [r1, #16]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005ae0:	2780      	movs	r7, #128	; 0x80
10005ae2:	51d6      	str	r6, [r2, r7]
10005ae4:	3704      	adds	r7, #4
10005ae6:	51d6      	str	r6, [r2, r7]
10005ae8:	3704      	adds	r7, #4
10005aea:	51d6      	str	r6, [r2, r7]
10005aec:	3704      	adds	r7, #4
10005aee:	51d6      	str	r6, [r2, r7]
10005af0:	3704      	adds	r7, #4
10005af2:	51d6      	str	r6, [r2, r7]
10005af4:	3704      	adds	r7, #4
10005af6:	51d6      	str	r6, [r2, r7]
10005af8:	3704      	adds	r7, #4
10005afa:	51d6      	str	r6, [r2, r7]
10005afc:	3704      	adds	r7, #4
10005afe:	51d6      	str	r6, [r2, r7]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005b00:	464f      	mov	r7, r9
10005b02:	2f05      	cmp	r7, #5
10005b04:	d026      	beq.n	10005b54 <_Z7InfoRowv+0x484>
	Text[x] = ch;
10005b06:	4667      	mov	r7, ip
10005b08:	614f      	str	r7, [r1, #20]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005b0a:	27a0      	movs	r7, #160	; 0xa0
10005b0c:	51d6      	str	r6, [r2, r7]
10005b0e:	3704      	adds	r7, #4
10005b10:	51d6      	str	r6, [r2, r7]
10005b12:	3704      	adds	r7, #4
10005b14:	51d6      	str	r6, [r2, r7]
10005b16:	3704      	adds	r7, #4
10005b18:	51d6      	str	r6, [r2, r7]
10005b1a:	3704      	adds	r7, #4
10005b1c:	51d6      	str	r6, [r2, r7]
10005b1e:	3704      	adds	r7, #4
10005b20:	51d6      	str	r6, [r2, r7]
10005b22:	3704      	adds	r7, #4
10005b24:	51d6      	str	r6, [r2, r7]
10005b26:	3704      	adds	r7, #4
10005b28:	51d6      	str	r6, [r2, r7]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005b2a:	464f      	mov	r7, r9
10005b2c:	2f06      	cmp	r7, #6
10005b2e:	d011      	beq.n	10005b54 <_Z7InfoRowv+0x484>
	Text[x] = ch;
10005b30:	4667      	mov	r7, ip
10005b32:	618f      	str	r7, [r1, #24]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005b34:	21c0      	movs	r1, #192	; 0xc0
10005b36:	5056      	str	r6, [r2, r1]
10005b38:	3104      	adds	r1, #4
10005b3a:	5056      	str	r6, [r2, r1]
10005b3c:	3104      	adds	r1, #4
10005b3e:	5056      	str	r6, [r2, r1]
10005b40:	3104      	adds	r1, #4
10005b42:	5056      	str	r6, [r2, r1]
10005b44:	3104      	adds	r1, #4
10005b46:	5056      	str	r6, [r2, r1]
10005b48:	3104      	adds	r1, #4
10005b4a:	5056      	str	r6, [r2, r1]
10005b4c:	3104      	adds	r1, #4
10005b4e:	5056      	str	r6, [r2, r1]
10005b50:	3104      	adds	r1, #4
10005b52:	5056      	str	r6, [r2, r1]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005b54:	2103      	movs	r1, #3
10005b56:	0002      	movs	r2, r0
10005b58:	438a      	bics	r2, r1
10005b5a:	189b      	adds	r3, r3, r2
10005b5c:	b2db      	uxtb	r3, r3
10005b5e:	4282      	cmp	r2, r0
10005b60:	d018      	beq.n	10005b94 <_Z7InfoRowv+0x4c4>
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005b62:	2100      	movs	r1, #0
	Text[x] = ch;
10005b64:	2020      	movs	r0, #32
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005b66:	00da      	lsls	r2, r3, #3
10005b68:	18a2      	adds	r2, r4, r2
	Text[x] = ch;
10005b6a:	54e8      	strb	r0, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005b6c:	6011      	str	r1, [r2, #0]
10005b6e:	6051      	str	r1, [r2, #4]
	InfoX = x + 1;	
10005b70:	1c5a      	adds	r2, r3, #1
10005b72:	b2d2      	uxtb	r2, r2
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005b74:	2a1d      	cmp	r2, #29
10005b76:	d00d      	beq.n	10005b94 <_Z7InfoRowv+0x4c4>
	Text[x] = ch;
10005b78:	54a8      	strb	r0, [r5, r2]
	InfoX = x + 1;	
10005b7a:	3302      	adds	r3, #2
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005b7c:	00d2      	lsls	r2, r2, #3
10005b7e:	18a2      	adds	r2, r4, r2
	InfoX = x + 1;	
10005b80:	b2db      	uxtb	r3, r3
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005b82:	6011      	str	r1, [r2, #0]
10005b84:	6051      	str	r1, [r2, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005b86:	2b1d      	cmp	r3, #29
10005b88:	d004      	beq.n	10005b94 <_Z7InfoRowv+0x4c4>
	Text[x] = ch;
10005b8a:	54e8      	strb	r0, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005b8c:	00db      	lsls	r3, r3, #3
10005b8e:	18e3      	adds	r3, r4, r3
10005b90:	6019      	str	r1, [r3, #0]
10005b92:	6059      	str	r1, [r3, #4]
	InfoX = x + 1;	
10005b94:	231d      	movs	r3, #29
	while ((ch = *txt++) != 0)
10005b96:	264c      	movs	r6, #76	; 0x4c
10005b98:	49d8      	ldr	r1, [pc, #864]	; (10005efc <_Z7InfoRowv+0x82c>)
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005b9a:	48d9      	ldr	r0, [pc, #868]	; (10005f00 <_Z7InfoRowv+0x830>)
10005b9c:	3101      	adds	r1, #1
10005b9e:	00da      	lsls	r2, r3, #3
10005ba0:	18a2      	adds	r2, r4, r2
	while ((ch = *txt++) != 0)
10005ba2:	3101      	adds	r1, #1
	Text[x] = ch;
10005ba4:	54ee      	strb	r6, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005ba6:	6010      	str	r0, [r2, #0]
10005ba8:	6050      	str	r0, [r2, #4]
	while ((ch = *txt++) != 0)
10005baa:	1e4a      	subs	r2, r1, #1
10005bac:	7816      	ldrb	r6, [r2, #0]
10005bae:	001f      	movs	r7, r3
	InfoX = x + 1;	
10005bb0:	3301      	adds	r3, #1
10005bb2:	b2db      	uxtb	r3, r3
	while ((ch = *txt++) != 0)
10005bb4:	2e00      	cmp	r6, #0
10005bb6:	d1f2      	bne.n	10005b9e <_Z7InfoRowv+0x4ce>
10005bb8:	4ad2      	ldr	r2, [pc, #840]	; (10005f04 <_Z7InfoRowv+0x834>)
10005bba:	7013      	strb	r3, [r2, #0]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005bbc:	2b22      	cmp	r3, #34	; 0x22
10005bbe:	d900      	bls.n	10005bc2 <_Z7InfoRowv+0x4f2>
10005bc0:	e0bd      	b.n	10005d3e <_Z7InfoRowv+0x66e>
10005bc2:	2222      	movs	r2, #34	; 0x22
10005bc4:	2003      	movs	r0, #3
10005bc6:	1ad2      	subs	r2, r2, r3
10005bc8:	b2d2      	uxtb	r2, r2
10005bca:	18e9      	adds	r1, r5, r3
10005bcc:	4290      	cmp	r0, r2
10005bce:	d301      	bcc.n	10005bd4 <_Z7InfoRowv+0x504>
10005bd0:	f000 ffb0 	bl	10006b34 <_Z7InfoRowv+0x1464>
10005bd4:	4201      	tst	r1, r0
10005bd6:	d001      	beq.n	10005bdc <_Z7InfoRowv+0x50c>
10005bd8:	f000 ffac 	bl	10006b34 <_Z7InfoRowv+0x1464>
10005bdc:	2223      	movs	r2, #35	; 0x23
10005bde:	1ad2      	subs	r2, r2, r3
10005be0:	b2d0      	uxtb	r0, r2
10005be2:	0882      	lsrs	r2, r0, #2
10005be4:	4690      	mov	r8, r2
	Text[x] = ch;
10005be6:	4fc8      	ldr	r7, [pc, #800]	; (10005f08 <_Z7InfoRowv+0x838>)
10005be8:	00da      	lsls	r2, r3, #3
10005bea:	600f      	str	r7, [r1, #0]
10005bec:	46bc      	mov	ip, r7
10005bee:	4647      	mov	r7, r8
10005bf0:	18a2      	adds	r2, r4, r2
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005bf2:	6016      	str	r6, [r2, #0]
10005bf4:	6056      	str	r6, [r2, #4]
10005bf6:	6096      	str	r6, [r2, #8]
10005bf8:	60d6      	str	r6, [r2, #12]
10005bfa:	6116      	str	r6, [r2, #16]
10005bfc:	6156      	str	r6, [r2, #20]
10005bfe:	6196      	str	r6, [r2, #24]
10005c00:	61d6      	str	r6, [r2, #28]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005c02:	2f01      	cmp	r7, #1
10005c04:	d078      	beq.n	10005cf8 <_Z7InfoRowv+0x628>
	Text[x] = ch;
10005c06:	4667      	mov	r7, ip
10005c08:	604f      	str	r7, [r1, #4]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005c0a:	4647      	mov	r7, r8
10005c0c:	6216      	str	r6, [r2, #32]
10005c0e:	6256      	str	r6, [r2, #36]	; 0x24
10005c10:	6296      	str	r6, [r2, #40]	; 0x28
10005c12:	62d6      	str	r6, [r2, #44]	; 0x2c
10005c14:	6316      	str	r6, [r2, #48]	; 0x30
10005c16:	6356      	str	r6, [r2, #52]	; 0x34
10005c18:	6396      	str	r6, [r2, #56]	; 0x38
10005c1a:	63d6      	str	r6, [r2, #60]	; 0x3c
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005c1c:	2f02      	cmp	r7, #2
10005c1e:	d06b      	beq.n	10005cf8 <_Z7InfoRowv+0x628>
	Text[x] = ch;
10005c20:	4667      	mov	r7, ip
10005c22:	608f      	str	r7, [r1, #8]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005c24:	4647      	mov	r7, r8
10005c26:	6416      	str	r6, [r2, #64]	; 0x40
10005c28:	6456      	str	r6, [r2, #68]	; 0x44
10005c2a:	6496      	str	r6, [r2, #72]	; 0x48
10005c2c:	64d6      	str	r6, [r2, #76]	; 0x4c
10005c2e:	6516      	str	r6, [r2, #80]	; 0x50
10005c30:	6556      	str	r6, [r2, #84]	; 0x54
10005c32:	6596      	str	r6, [r2, #88]	; 0x58
10005c34:	65d6      	str	r6, [r2, #92]	; 0x5c
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005c36:	2f03      	cmp	r7, #3
10005c38:	d05e      	beq.n	10005cf8 <_Z7InfoRowv+0x628>
	Text[x] = ch;
10005c3a:	4667      	mov	r7, ip
10005c3c:	60cf      	str	r7, [r1, #12]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005c3e:	4647      	mov	r7, r8
10005c40:	6616      	str	r6, [r2, #96]	; 0x60
10005c42:	6656      	str	r6, [r2, #100]	; 0x64
10005c44:	6696      	str	r6, [r2, #104]	; 0x68
10005c46:	66d6      	str	r6, [r2, #108]	; 0x6c
10005c48:	6716      	str	r6, [r2, #112]	; 0x70
10005c4a:	6756      	str	r6, [r2, #116]	; 0x74
10005c4c:	6796      	str	r6, [r2, #120]	; 0x78
10005c4e:	67d6      	str	r6, [r2, #124]	; 0x7c
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005c50:	2f04      	cmp	r7, #4
10005c52:	d051      	beq.n	10005cf8 <_Z7InfoRowv+0x628>
	Text[x] = ch;
10005c54:	4667      	mov	r7, ip
10005c56:	610f      	str	r7, [r1, #16]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005c58:	2780      	movs	r7, #128	; 0x80
10005c5a:	51d6      	str	r6, [r2, r7]
10005c5c:	3704      	adds	r7, #4
10005c5e:	51d6      	str	r6, [r2, r7]
10005c60:	3704      	adds	r7, #4
10005c62:	51d6      	str	r6, [r2, r7]
10005c64:	3704      	adds	r7, #4
10005c66:	51d6      	str	r6, [r2, r7]
10005c68:	3704      	adds	r7, #4
10005c6a:	51d6      	str	r6, [r2, r7]
10005c6c:	3704      	adds	r7, #4
10005c6e:	51d6      	str	r6, [r2, r7]
10005c70:	3704      	adds	r7, #4
10005c72:	51d6      	str	r6, [r2, r7]
10005c74:	3704      	adds	r7, #4
10005c76:	51d6      	str	r6, [r2, r7]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005c78:	4647      	mov	r7, r8
10005c7a:	2f05      	cmp	r7, #5
10005c7c:	d03c      	beq.n	10005cf8 <_Z7InfoRowv+0x628>
	Text[x] = ch;
10005c7e:	4667      	mov	r7, ip
10005c80:	614f      	str	r7, [r1, #20]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005c82:	27a0      	movs	r7, #160	; 0xa0
10005c84:	51d6      	str	r6, [r2, r7]
10005c86:	3704      	adds	r7, #4
10005c88:	51d6      	str	r6, [r2, r7]
10005c8a:	3704      	adds	r7, #4
10005c8c:	51d6      	str	r6, [r2, r7]
10005c8e:	3704      	adds	r7, #4
10005c90:	51d6      	str	r6, [r2, r7]
10005c92:	3704      	adds	r7, #4
10005c94:	51d6      	str	r6, [r2, r7]
10005c96:	3704      	adds	r7, #4
10005c98:	51d6      	str	r6, [r2, r7]
10005c9a:	3704      	adds	r7, #4
10005c9c:	51d6      	str	r6, [r2, r7]
10005c9e:	3704      	adds	r7, #4
10005ca0:	51d6      	str	r6, [r2, r7]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005ca2:	4646      	mov	r6, r8
10005ca4:	2e06      	cmp	r6, #6
10005ca6:	d027      	beq.n	10005cf8 <_Z7InfoRowv+0x628>
	Text[x] = ch;
10005ca8:	4666      	mov	r6, ip
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005caa:	2700      	movs	r7, #0
	Text[x] = ch;
10005cac:	618e      	str	r6, [r1, #24]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005cae:	26c0      	movs	r6, #192	; 0xc0
10005cb0:	5197      	str	r7, [r2, r6]
10005cb2:	3604      	adds	r6, #4
10005cb4:	5197      	str	r7, [r2, r6]
10005cb6:	3604      	adds	r6, #4
10005cb8:	5197      	str	r7, [r2, r6]
10005cba:	3604      	adds	r6, #4
10005cbc:	5197      	str	r7, [r2, r6]
10005cbe:	3604      	adds	r6, #4
10005cc0:	5197      	str	r7, [r2, r6]
10005cc2:	3604      	adds	r6, #4
10005cc4:	5197      	str	r7, [r2, r6]
10005cc6:	3604      	adds	r6, #4
10005cc8:	5197      	str	r7, [r2, r6]
10005cca:	3604      	adds	r6, #4
10005ccc:	5197      	str	r7, [r2, r6]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005cce:	4646      	mov	r6, r8
10005cd0:	2e07      	cmp	r6, #7
10005cd2:	d011      	beq.n	10005cf8 <_Z7InfoRowv+0x628>
	Text[x] = ch;
10005cd4:	4666      	mov	r6, ip
10005cd6:	61ce      	str	r6, [r1, #28]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005cd8:	21e0      	movs	r1, #224	; 0xe0
10005cda:	5057      	str	r7, [r2, r1]
10005cdc:	3104      	adds	r1, #4
10005cde:	5057      	str	r7, [r2, r1]
10005ce0:	3104      	adds	r1, #4
10005ce2:	5057      	str	r7, [r2, r1]
10005ce4:	3104      	adds	r1, #4
10005ce6:	5057      	str	r7, [r2, r1]
10005ce8:	3104      	adds	r1, #4
10005cea:	5057      	str	r7, [r2, r1]
10005cec:	3104      	adds	r1, #4
10005cee:	5057      	str	r7, [r2, r1]
10005cf0:	3104      	adds	r1, #4
10005cf2:	5057      	str	r7, [r2, r1]
10005cf4:	3104      	adds	r1, #4
10005cf6:	5057      	str	r7, [r2, r1]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005cf8:	2203      	movs	r2, #3
10005cfa:	0001      	movs	r1, r0
10005cfc:	4391      	bics	r1, r2
10005cfe:	185b      	adds	r3, r3, r1
10005d00:	b2db      	uxtb	r3, r3
10005d02:	4281      	cmp	r1, r0
10005d04:	d018      	beq.n	10005d38 <_Z7InfoRowv+0x668>
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005d06:	2100      	movs	r1, #0
	Text[x] = ch;
10005d08:	2020      	movs	r0, #32
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005d0a:	00da      	lsls	r2, r3, #3
10005d0c:	18a2      	adds	r2, r4, r2
	Text[x] = ch;
10005d0e:	54e8      	strb	r0, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005d10:	6011      	str	r1, [r2, #0]
10005d12:	6051      	str	r1, [r2, #4]
	InfoX = x + 1;	
10005d14:	1c5a      	adds	r2, r3, #1
10005d16:	b2d2      	uxtb	r2, r2
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005d18:	2a23      	cmp	r2, #35	; 0x23
10005d1a:	d00d      	beq.n	10005d38 <_Z7InfoRowv+0x668>
	Text[x] = ch;
10005d1c:	54a8      	strb	r0, [r5, r2]
	InfoX = x + 1;	
10005d1e:	3302      	adds	r3, #2
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005d20:	00d2      	lsls	r2, r2, #3
10005d22:	18a2      	adds	r2, r4, r2
	InfoX = x + 1;	
10005d24:	b2db      	uxtb	r3, r3
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005d26:	6011      	str	r1, [r2, #0]
10005d28:	6051      	str	r1, [r2, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005d2a:	2b23      	cmp	r3, #35	; 0x23
10005d2c:	d004      	beq.n	10005d38 <_Z7InfoRowv+0x668>
	Text[x] = ch;
10005d2e:	54e8      	strb	r0, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005d30:	00db      	lsls	r3, r3, #3
10005d32:	18e3      	adds	r3, r4, r3
10005d34:	6019      	str	r1, [r3, #0]
10005d36:	6059      	str	r1, [r3, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005d38:	2323      	movs	r3, #35	; 0x23
10005d3a:	4a72      	ldr	r2, [pc, #456]	; (10005f04 <_Z7InfoRowv+0x834>)
10005d3c:	7013      	strb	r3, [r2, #0]
	x += 7; InfoPos(x);
	
	// display last time
	InfoDispText(LastTxt, COLTIT);
	x += 6; InfoPos(x);
	InfoTime(LastTime, NewBest ? COLBEST : COLVAL);
10005d3e:	4b73      	ldr	r3, [pc, #460]	; (10005f0c <_Z7InfoRowv+0x83c>)
10005d40:	6818      	ldr	r0, [r3, #0]
10005d42:	4b73      	ldr	r3, [pc, #460]	; (10005f10 <_Z7InfoRowv+0x840>)
10005d44:	7819      	ldrb	r1, [r3, #0]
10005d46:	4698      	mov	r8, r3
10005d48:	1e4b      	subs	r3, r1, #1
10005d4a:	4199      	sbcs	r1, r3
10005d4c:	23e2      	movs	r3, #226	; 0xe2
10005d4e:	4249      	negs	r1, r1
10005d50:	4399      	bics	r1, r3
10005d52:	31ff      	adds	r1, #255	; 0xff
10005d54:	f7ff fc74 	bl	10005640 <_Z8InfoTimeih>
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005d58:	4b6a      	ldr	r3, [pc, #424]	; (10005f04 <_Z7InfoRowv+0x834>)
10005d5a:	781b      	ldrb	r3, [r3, #0]
10005d5c:	2b29      	cmp	r3, #41	; 0x29
10005d5e:	d900      	bls.n	10005d62 <_Z7InfoRowv+0x692>
10005d60:	e0f9      	b.n	10005f56 <_Z7InfoRowv+0x886>
10005d62:	2129      	movs	r1, #41	; 0x29
10005d64:	2003      	movs	r0, #3
10005d66:	1ac9      	subs	r1, r1, r3
10005d68:	b2c9      	uxtb	r1, r1
10005d6a:	18ea      	adds	r2, r5, r3
10005d6c:	4288      	cmp	r0, r1
10005d6e:	d301      	bcc.n	10005d74 <_Z7InfoRowv+0x6a4>
10005d70:	f000 fe8b 	bl	10006a8a <_Z7InfoRowv+0x13ba>
10005d74:	4202      	tst	r2, r0
10005d76:	d001      	beq.n	10005d7c <_Z7InfoRowv+0x6ac>
10005d78:	f000 fe87 	bl	10006a8a <_Z7InfoRowv+0x13ba>
10005d7c:	212a      	movs	r1, #42	; 0x2a
10005d7e:	1ac9      	subs	r1, r1, r3
10005d80:	b2c9      	uxtb	r1, r1
10005d82:	0888      	lsrs	r0, r1, #2
10005d84:	4681      	mov	r9, r0
	Text[x] = ch;
10005d86:	4e60      	ldr	r6, [pc, #384]	; (10005f08 <_Z7InfoRowv+0x838>)
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005d88:	2700      	movs	r7, #0
	Text[x] = ch;
10005d8a:	6016      	str	r6, [r2, #0]
10005d8c:	46b2      	mov	sl, r6
10005d8e:	464e      	mov	r6, r9
10005d90:	00d8      	lsls	r0, r3, #3
10005d92:	1820      	adds	r0, r4, r0
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005d94:	6007      	str	r7, [r0, #0]
10005d96:	6047      	str	r7, [r0, #4]
10005d98:	6087      	str	r7, [r0, #8]
10005d9a:	60c7      	str	r7, [r0, #12]
10005d9c:	6107      	str	r7, [r0, #16]
10005d9e:	6147      	str	r7, [r0, #20]
10005da0:	6187      	str	r7, [r0, #24]
10005da2:	61c7      	str	r7, [r0, #28]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005da4:	2e01      	cmp	r6, #1
10005da6:	d100      	bne.n	10005daa <_Z7InfoRowv+0x6da>
10005da8:	e0b4      	b.n	10005f14 <_Z7InfoRowv+0x844>
	Text[x] = ch;
10005daa:	4656      	mov	r6, sl
10005dac:	6056      	str	r6, [r2, #4]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005dae:	464e      	mov	r6, r9
10005db0:	6207      	str	r7, [r0, #32]
10005db2:	6247      	str	r7, [r0, #36]	; 0x24
10005db4:	6287      	str	r7, [r0, #40]	; 0x28
10005db6:	62c7      	str	r7, [r0, #44]	; 0x2c
10005db8:	6307      	str	r7, [r0, #48]	; 0x30
10005dba:	6347      	str	r7, [r0, #52]	; 0x34
10005dbc:	6387      	str	r7, [r0, #56]	; 0x38
10005dbe:	63c7      	str	r7, [r0, #60]	; 0x3c
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005dc0:	2e02      	cmp	r6, #2
10005dc2:	d100      	bne.n	10005dc6 <_Z7InfoRowv+0x6f6>
10005dc4:	e0a6      	b.n	10005f14 <_Z7InfoRowv+0x844>
	Text[x] = ch;
10005dc6:	4656      	mov	r6, sl
10005dc8:	6096      	str	r6, [r2, #8]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005dca:	464e      	mov	r6, r9
10005dcc:	6407      	str	r7, [r0, #64]	; 0x40
10005dce:	6447      	str	r7, [r0, #68]	; 0x44
10005dd0:	6487      	str	r7, [r0, #72]	; 0x48
10005dd2:	64c7      	str	r7, [r0, #76]	; 0x4c
10005dd4:	6507      	str	r7, [r0, #80]	; 0x50
10005dd6:	6547      	str	r7, [r0, #84]	; 0x54
10005dd8:	6587      	str	r7, [r0, #88]	; 0x58
10005dda:	65c7      	str	r7, [r0, #92]	; 0x5c
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005ddc:	2e03      	cmp	r6, #3
10005dde:	d100      	bne.n	10005de2 <_Z7InfoRowv+0x712>
10005de0:	e098      	b.n	10005f14 <_Z7InfoRowv+0x844>
	Text[x] = ch;
10005de2:	4656      	mov	r6, sl
10005de4:	60d6      	str	r6, [r2, #12]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005de6:	464e      	mov	r6, r9
10005de8:	6607      	str	r7, [r0, #96]	; 0x60
10005dea:	6647      	str	r7, [r0, #100]	; 0x64
10005dec:	6687      	str	r7, [r0, #104]	; 0x68
10005dee:	66c7      	str	r7, [r0, #108]	; 0x6c
10005df0:	6707      	str	r7, [r0, #112]	; 0x70
10005df2:	6747      	str	r7, [r0, #116]	; 0x74
10005df4:	6787      	str	r7, [r0, #120]	; 0x78
10005df6:	67c7      	str	r7, [r0, #124]	; 0x7c
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005df8:	2e04      	cmp	r6, #4
10005dfa:	d100      	bne.n	10005dfe <_Z7InfoRowv+0x72e>
10005dfc:	e08a      	b.n	10005f14 <_Z7InfoRowv+0x844>
	Text[x] = ch;
10005dfe:	4656      	mov	r6, sl
10005e00:	6116      	str	r6, [r2, #16]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005e02:	2680      	movs	r6, #128	; 0x80
10005e04:	5187      	str	r7, [r0, r6]
10005e06:	3604      	adds	r6, #4
10005e08:	5187      	str	r7, [r0, r6]
10005e0a:	3604      	adds	r6, #4
10005e0c:	5187      	str	r7, [r0, r6]
10005e0e:	3604      	adds	r6, #4
10005e10:	5187      	str	r7, [r0, r6]
10005e12:	3604      	adds	r6, #4
10005e14:	5187      	str	r7, [r0, r6]
10005e16:	3604      	adds	r6, #4
10005e18:	5187      	str	r7, [r0, r6]
10005e1a:	3604      	adds	r6, #4
10005e1c:	5187      	str	r7, [r0, r6]
10005e1e:	3604      	adds	r6, #4
10005e20:	5187      	str	r7, [r0, r6]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005e22:	464e      	mov	r6, r9
10005e24:	2e05      	cmp	r6, #5
10005e26:	d075      	beq.n	10005f14 <_Z7InfoRowv+0x844>
	Text[x] = ch;
10005e28:	4656      	mov	r6, sl
10005e2a:	6156      	str	r6, [r2, #20]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005e2c:	26a0      	movs	r6, #160	; 0xa0
10005e2e:	5187      	str	r7, [r0, r6]
10005e30:	3604      	adds	r6, #4
10005e32:	5187      	str	r7, [r0, r6]
10005e34:	3604      	adds	r6, #4
10005e36:	5187      	str	r7, [r0, r6]
10005e38:	3604      	adds	r6, #4
10005e3a:	5187      	str	r7, [r0, r6]
10005e3c:	3604      	adds	r6, #4
10005e3e:	5187      	str	r7, [r0, r6]
10005e40:	3604      	adds	r6, #4
10005e42:	5187      	str	r7, [r0, r6]
10005e44:	3604      	adds	r6, #4
10005e46:	5187      	str	r7, [r0, r6]
10005e48:	3604      	adds	r6, #4
10005e4a:	5187      	str	r7, [r0, r6]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005e4c:	464e      	mov	r6, r9
10005e4e:	2e06      	cmp	r6, #6
10005e50:	d060      	beq.n	10005f14 <_Z7InfoRowv+0x844>
	Text[x] = ch;
10005e52:	4656      	mov	r6, sl
10005e54:	6196      	str	r6, [r2, #24]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005e56:	26c0      	movs	r6, #192	; 0xc0
10005e58:	5187      	str	r7, [r0, r6]
10005e5a:	3604      	adds	r6, #4
10005e5c:	5187      	str	r7, [r0, r6]
10005e5e:	3604      	adds	r6, #4
10005e60:	5187      	str	r7, [r0, r6]
10005e62:	3604      	adds	r6, #4
10005e64:	5187      	str	r7, [r0, r6]
10005e66:	3604      	adds	r6, #4
10005e68:	5187      	str	r7, [r0, r6]
10005e6a:	3604      	adds	r6, #4
10005e6c:	5187      	str	r7, [r0, r6]
10005e6e:	3604      	adds	r6, #4
10005e70:	5187      	str	r7, [r0, r6]
10005e72:	3604      	adds	r6, #4
10005e74:	5187      	str	r7, [r0, r6]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005e76:	464e      	mov	r6, r9
10005e78:	2e07      	cmp	r6, #7
10005e7a:	d04b      	beq.n	10005f14 <_Z7InfoRowv+0x844>
	Text[x] = ch;
10005e7c:	4e22      	ldr	r6, [pc, #136]	; (10005f08 <_Z7InfoRowv+0x838>)
10005e7e:	61d6      	str	r6, [r2, #28]
10005e80:	46b2      	mov	sl, r6
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005e82:	26e0      	movs	r6, #224	; 0xe0
10005e84:	5187      	str	r7, [r0, r6]
10005e86:	3604      	adds	r6, #4
10005e88:	5187      	str	r7, [r0, r6]
10005e8a:	3604      	adds	r6, #4
10005e8c:	5187      	str	r7, [r0, r6]
10005e8e:	3604      	adds	r6, #4
10005e90:	5187      	str	r7, [r0, r6]
10005e92:	3604      	adds	r6, #4
10005e94:	5187      	str	r7, [r0, r6]
10005e96:	3604      	adds	r6, #4
10005e98:	5187      	str	r7, [r0, r6]
10005e9a:	3604      	adds	r6, #4
10005e9c:	5187      	str	r7, [r0, r6]
10005e9e:	3604      	adds	r6, #4
10005ea0:	5187      	str	r7, [r0, r6]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005ea2:	464e      	mov	r6, r9
10005ea4:	2e08      	cmp	r6, #8
10005ea6:	d035      	beq.n	10005f14 <_Z7InfoRowv+0x844>
	Text[x] = ch;
10005ea8:	4656      	mov	r6, sl
10005eaa:	6216      	str	r6, [r2, #32]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005eac:	2680      	movs	r6, #128	; 0x80
10005eae:	0076      	lsls	r6, r6, #1
10005eb0:	5187      	str	r7, [r0, r6]
10005eb2:	3604      	adds	r6, #4
10005eb4:	5187      	str	r7, [r0, r6]
10005eb6:	3604      	adds	r6, #4
10005eb8:	5187      	str	r7, [r0, r6]
10005eba:	3604      	adds	r6, #4
10005ebc:	5187      	str	r7, [r0, r6]
10005ebe:	3604      	adds	r6, #4
10005ec0:	5187      	str	r7, [r0, r6]
10005ec2:	3604      	adds	r6, #4
10005ec4:	5187      	str	r7, [r0, r6]
10005ec6:	3604      	adds	r6, #4
10005ec8:	5187      	str	r7, [r0, r6]
10005eca:	3604      	adds	r6, #4
10005ecc:	5187      	str	r7, [r0, r6]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005ece:	464e      	mov	r6, r9
10005ed0:	2e09      	cmp	r6, #9
10005ed2:	d01f      	beq.n	10005f14 <_Z7InfoRowv+0x844>
	Text[x] = ch;
10005ed4:	4656      	mov	r6, sl
10005ed6:	6256      	str	r6, [r2, #36]	; 0x24
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005ed8:	2290      	movs	r2, #144	; 0x90
10005eda:	0052      	lsls	r2, r2, #1
10005edc:	5087      	str	r7, [r0, r2]
10005ede:	3204      	adds	r2, #4
10005ee0:	5087      	str	r7, [r0, r2]
10005ee2:	3204      	adds	r2, #4
10005ee4:	5087      	str	r7, [r0, r2]
10005ee6:	3204      	adds	r2, #4
10005ee8:	5087      	str	r7, [r0, r2]
10005eea:	3204      	adds	r2, #4
10005eec:	5087      	str	r7, [r0, r2]
10005eee:	3204      	adds	r2, #4
10005ef0:	5087      	str	r7, [r0, r2]
10005ef2:	3204      	adds	r2, #4
10005ef4:	5087      	str	r7, [r0, r2]
10005ef6:	3204      	adds	r2, #4
10005ef8:	5087      	str	r7, [r0, r2]
10005efa:	e00b      	b.n	10005f14 <_Z7InfoRowv+0x844>
10005efc:	1003ff44 	.word	0x1003ff44
10005f00:	fcfcfcfc 	.word	0xfcfcfcfc
10005f04:	2003e33c 	.word	0x2003e33c
10005f08:	20202020 	.word	0x20202020
10005f0c:	20019bf0 	.word	0x20019bf0
10005f10:	2003e33f 	.word	0x2003e33f
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005f14:	2203      	movs	r2, #3
10005f16:	0008      	movs	r0, r1
10005f18:	4390      	bics	r0, r2
10005f1a:	181b      	adds	r3, r3, r0
10005f1c:	b2db      	uxtb	r3, r3
10005f1e:	4281      	cmp	r1, r0
10005f20:	d018      	beq.n	10005f54 <_Z7InfoRowv+0x884>
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005f22:	2100      	movs	r1, #0
	Text[x] = ch;
10005f24:	2020      	movs	r0, #32
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005f26:	00da      	lsls	r2, r3, #3
10005f28:	18a2      	adds	r2, r4, r2
	Text[x] = ch;
10005f2a:	54e8      	strb	r0, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005f2c:	6011      	str	r1, [r2, #0]
10005f2e:	6051      	str	r1, [r2, #4]
	InfoX = x + 1;	
10005f30:	1c5a      	adds	r2, r3, #1
10005f32:	b2d2      	uxtb	r2, r2
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005f34:	2a2a      	cmp	r2, #42	; 0x2a
10005f36:	d00d      	beq.n	10005f54 <_Z7InfoRowv+0x884>
	Text[x] = ch;
10005f38:	54a8      	strb	r0, [r5, r2]
	InfoX = x + 1;	
10005f3a:	3302      	adds	r3, #2
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005f3c:	00d2      	lsls	r2, r2, #3
10005f3e:	18a2      	adds	r2, r4, r2
	InfoX = x + 1;	
10005f40:	b2db      	uxtb	r3, r3
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005f42:	6011      	str	r1, [r2, #0]
10005f44:	6051      	str	r1, [r2, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005f46:	2b2a      	cmp	r3, #42	; 0x2a
10005f48:	d004      	beq.n	10005f54 <_Z7InfoRowv+0x884>
	Text[x] = ch;
10005f4a:	54e8      	strb	r0, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005f4c:	00db      	lsls	r3, r3, #3
10005f4e:	18e3      	adds	r3, r4, r3
10005f50:	6019      	str	r1, [r3, #0]
10005f52:	6059      	str	r1, [r3, #4]
	InfoX = x + 1;	
10005f54:	232a      	movs	r3, #42	; 0x2a
	while ((ch = *txt++) != 0)
10005f56:	2242      	movs	r2, #66	; 0x42
10005f58:	49ed      	ldr	r1, [pc, #948]	; (10006310 <_Z7InfoRowv+0xc40>)
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005f5a:	48ee      	ldr	r0, [pc, #952]	; (10006314 <_Z7InfoRowv+0xc44>)
10005f5c:	3101      	adds	r1, #1
	Text[x] = ch;
10005f5e:	54ea      	strb	r2, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005f60:	00da      	lsls	r2, r3, #3
10005f62:	18a2      	adds	r2, r4, r2
	while ((ch = *txt++) != 0)
10005f64:	3101      	adds	r1, #1
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005f66:	6010      	str	r0, [r2, #0]
10005f68:	6050      	str	r0, [r2, #4]
	while ((ch = *txt++) != 0)
10005f6a:	1e4a      	subs	r2, r1, #1
10005f6c:	7812      	ldrb	r2, [r2, #0]
	InfoX = x + 1;	
10005f6e:	3301      	adds	r3, #1
10005f70:	b2db      	uxtb	r3, r3
	while ((ch = *txt++) != 0)
10005f72:	2a00      	cmp	r2, #0
10005f74:	d1f3      	bne.n	10005f5e <_Z7InfoRowv+0x88e>
10005f76:	49e8      	ldr	r1, [pc, #928]	; (10006318 <_Z7InfoRowv+0xc48>)
10005f78:	700b      	strb	r3, [r1, #0]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005f7a:	2b2f      	cmp	r3, #47	; 0x2f
10005f7c:	d900      	bls.n	10005f80 <_Z7InfoRowv+0x8b0>
10005f7e:	e10d      	b.n	1000619c <_Z7InfoRowv+0xacc>
10005f80:	202f      	movs	r0, #47	; 0x2f
10005f82:	2603      	movs	r6, #3
10005f84:	1ac0      	subs	r0, r0, r3
10005f86:	b2c0      	uxtb	r0, r0
10005f88:	18e9      	adds	r1, r5, r3
10005f8a:	4286      	cmp	r6, r0
10005f8c:	d301      	bcc.n	10005f92 <_Z7InfoRowv+0x8c2>
10005f8e:	f000 fd8f 	bl	10006ab0 <_Z7InfoRowv+0x13e0>
10005f92:	4231      	tst	r1, r6
10005f94:	d001      	beq.n	10005f9a <_Z7InfoRowv+0x8ca>
10005f96:	f000 fd8b 	bl	10006ab0 <_Z7InfoRowv+0x13e0>
10005f9a:	2030      	movs	r0, #48	; 0x30
10005f9c:	1ac0      	subs	r0, r0, r3
10005f9e:	b2c0      	uxtb	r0, r0
10005fa0:	4684      	mov	ip, r0
10005fa2:	0880      	lsrs	r0, r0, #2
10005fa4:	4681      	mov	r9, r0
	Text[x] = ch;
10005fa6:	4edd      	ldr	r6, [pc, #884]	; (1000631c <_Z7InfoRowv+0xc4c>)
10005fa8:	00d8      	lsls	r0, r3, #3
10005faa:	600e      	str	r6, [r1, #0]
10005fac:	46b2      	mov	sl, r6
10005fae:	464e      	mov	r6, r9
10005fb0:	1820      	adds	r0, r4, r0
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005fb2:	6002      	str	r2, [r0, #0]
10005fb4:	6042      	str	r2, [r0, #4]
10005fb6:	6082      	str	r2, [r0, #8]
10005fb8:	60c2      	str	r2, [r0, #12]
10005fba:	6102      	str	r2, [r0, #16]
10005fbc:	6142      	str	r2, [r0, #20]
10005fbe:	6182      	str	r2, [r0, #24]
10005fc0:	61c2      	str	r2, [r0, #28]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005fc2:	2e01      	cmp	r6, #1
10005fc4:	d101      	bne.n	10005fca <_Z7InfoRowv+0x8fa>
10005fc6:	f000 fd1e 	bl	10006a06 <_Z7InfoRowv+0x1336>
	Text[x] = ch;
10005fca:	4656      	mov	r6, sl
10005fcc:	604e      	str	r6, [r1, #4]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005fce:	464e      	mov	r6, r9
10005fd0:	6202      	str	r2, [r0, #32]
10005fd2:	6242      	str	r2, [r0, #36]	; 0x24
10005fd4:	6282      	str	r2, [r0, #40]	; 0x28
10005fd6:	62c2      	str	r2, [r0, #44]	; 0x2c
10005fd8:	6302      	str	r2, [r0, #48]	; 0x30
10005fda:	6342      	str	r2, [r0, #52]	; 0x34
10005fdc:	6382      	str	r2, [r0, #56]	; 0x38
10005fde:	63c2      	str	r2, [r0, #60]	; 0x3c
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005fe0:	2e02      	cmp	r6, #2
10005fe2:	d101      	bne.n	10005fe8 <_Z7InfoRowv+0x918>
10005fe4:	f000 fd0f 	bl	10006a06 <_Z7InfoRowv+0x1336>
	Text[x] = ch;
10005fe8:	4656      	mov	r6, sl
10005fea:	608e      	str	r6, [r1, #8]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10005fec:	464e      	mov	r6, r9
10005fee:	6402      	str	r2, [r0, #64]	; 0x40
10005ff0:	6442      	str	r2, [r0, #68]	; 0x44
10005ff2:	6482      	str	r2, [r0, #72]	; 0x48
10005ff4:	64c2      	str	r2, [r0, #76]	; 0x4c
10005ff6:	6502      	str	r2, [r0, #80]	; 0x50
10005ff8:	6542      	str	r2, [r0, #84]	; 0x54
10005ffa:	6582      	str	r2, [r0, #88]	; 0x58
10005ffc:	65c2      	str	r2, [r0, #92]	; 0x5c
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10005ffe:	2e03      	cmp	r6, #3
10006000:	d101      	bne.n	10006006 <_Z7InfoRowv+0x936>
10006002:	f000 fd00 	bl	10006a06 <_Z7InfoRowv+0x1336>
	Text[x] = ch;
10006006:	4656      	mov	r6, sl
10006008:	60ce      	str	r6, [r1, #12]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
1000600a:	464e      	mov	r6, r9
1000600c:	6602      	str	r2, [r0, #96]	; 0x60
1000600e:	6642      	str	r2, [r0, #100]	; 0x64
10006010:	6682      	str	r2, [r0, #104]	; 0x68
10006012:	66c2      	str	r2, [r0, #108]	; 0x6c
10006014:	6702      	str	r2, [r0, #112]	; 0x70
10006016:	6742      	str	r2, [r0, #116]	; 0x74
10006018:	6782      	str	r2, [r0, #120]	; 0x78
1000601a:	67c2      	str	r2, [r0, #124]	; 0x7c
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
1000601c:	2e04      	cmp	r6, #4
1000601e:	d101      	bne.n	10006024 <_Z7InfoRowv+0x954>
10006020:	f000 fcf1 	bl	10006a06 <_Z7InfoRowv+0x1336>
	Text[x] = ch;
10006024:	4656      	mov	r6, sl
10006026:	610e      	str	r6, [r1, #16]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006028:	2680      	movs	r6, #128	; 0x80
1000602a:	5182      	str	r2, [r0, r6]
1000602c:	3604      	adds	r6, #4
1000602e:	5182      	str	r2, [r0, r6]
10006030:	3604      	adds	r6, #4
10006032:	5182      	str	r2, [r0, r6]
10006034:	3604      	adds	r6, #4
10006036:	5182      	str	r2, [r0, r6]
10006038:	3604      	adds	r6, #4
1000603a:	5182      	str	r2, [r0, r6]
1000603c:	3604      	adds	r6, #4
1000603e:	5182      	str	r2, [r0, r6]
10006040:	3604      	adds	r6, #4
10006042:	5182      	str	r2, [r0, r6]
10006044:	3604      	adds	r6, #4
10006046:	5182      	str	r2, [r0, r6]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006048:	464e      	mov	r6, r9
1000604a:	2e05      	cmp	r6, #5
1000604c:	d101      	bne.n	10006052 <_Z7InfoRowv+0x982>
1000604e:	f000 fcda 	bl	10006a06 <_Z7InfoRowv+0x1336>
	Text[x] = ch;
10006052:	4656      	mov	r6, sl
10006054:	614e      	str	r6, [r1, #20]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006056:	26a0      	movs	r6, #160	; 0xa0
10006058:	5182      	str	r2, [r0, r6]
1000605a:	3604      	adds	r6, #4
1000605c:	5182      	str	r2, [r0, r6]
1000605e:	3604      	adds	r6, #4
10006060:	5182      	str	r2, [r0, r6]
10006062:	3604      	adds	r6, #4
10006064:	5182      	str	r2, [r0, r6]
10006066:	3604      	adds	r6, #4
10006068:	5182      	str	r2, [r0, r6]
1000606a:	3604      	adds	r6, #4
1000606c:	5182      	str	r2, [r0, r6]
1000606e:	3604      	adds	r6, #4
10006070:	5182      	str	r2, [r0, r6]
10006072:	3604      	adds	r6, #4
10006074:	5182      	str	r2, [r0, r6]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006076:	464a      	mov	r2, r9
10006078:	2a06      	cmp	r2, #6
1000607a:	d101      	bne.n	10006080 <_Z7InfoRowv+0x9b0>
1000607c:	f000 fcc3 	bl	10006a06 <_Z7InfoRowv+0x1336>
	Text[x] = ch;
10006080:	4aa6      	ldr	r2, [pc, #664]	; (1000631c <_Z7InfoRowv+0xc4c>)
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006082:	3604      	adds	r6, #4
	Text[x] = ch;
10006084:	618a      	str	r2, [r1, #24]
10006086:	4692      	mov	sl, r2
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006088:	2200      	movs	r2, #0
1000608a:	5182      	str	r2, [r0, r6]
1000608c:	3604      	adds	r6, #4
1000608e:	5182      	str	r2, [r0, r6]
10006090:	3604      	adds	r6, #4
10006092:	5182      	str	r2, [r0, r6]
10006094:	3604      	adds	r6, #4
10006096:	5182      	str	r2, [r0, r6]
10006098:	3604      	adds	r6, #4
1000609a:	5182      	str	r2, [r0, r6]
1000609c:	3604      	adds	r6, #4
1000609e:	5182      	str	r2, [r0, r6]
100060a0:	3604      	adds	r6, #4
100060a2:	5182      	str	r2, [r0, r6]
100060a4:	3604      	adds	r6, #4
100060a6:	5182      	str	r2, [r0, r6]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100060a8:	464e      	mov	r6, r9
100060aa:	2e07      	cmp	r6, #7
100060ac:	d101      	bne.n	100060b2 <_Z7InfoRowv+0x9e2>
100060ae:	f000 fcaa 	bl	10006a06 <_Z7InfoRowv+0x1336>
	Text[x] = ch;
100060b2:	4656      	mov	r6, sl
100060b4:	61ce      	str	r6, [r1, #28]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100060b6:	26e0      	movs	r6, #224	; 0xe0
100060b8:	5182      	str	r2, [r0, r6]
100060ba:	3604      	adds	r6, #4
100060bc:	5182      	str	r2, [r0, r6]
100060be:	3604      	adds	r6, #4
100060c0:	5182      	str	r2, [r0, r6]
100060c2:	3604      	adds	r6, #4
100060c4:	5182      	str	r2, [r0, r6]
100060c6:	3604      	adds	r6, #4
100060c8:	5182      	str	r2, [r0, r6]
100060ca:	3604      	adds	r6, #4
100060cc:	5182      	str	r2, [r0, r6]
100060ce:	3604      	adds	r6, #4
100060d0:	5182      	str	r2, [r0, r6]
100060d2:	3604      	adds	r6, #4
100060d4:	5182      	str	r2, [r0, r6]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100060d6:	464e      	mov	r6, r9
100060d8:	2e08      	cmp	r6, #8
100060da:	d101      	bne.n	100060e0 <_Z7InfoRowv+0xa10>
100060dc:	f000 fc93 	bl	10006a06 <_Z7InfoRowv+0x1336>
	Text[x] = ch;
100060e0:	4656      	mov	r6, sl
100060e2:	620e      	str	r6, [r1, #32]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100060e4:	2680      	movs	r6, #128	; 0x80
100060e6:	0076      	lsls	r6, r6, #1
100060e8:	5182      	str	r2, [r0, r6]
100060ea:	3604      	adds	r6, #4
100060ec:	5182      	str	r2, [r0, r6]
100060ee:	3604      	adds	r6, #4
100060f0:	5182      	str	r2, [r0, r6]
100060f2:	3604      	adds	r6, #4
100060f4:	5182      	str	r2, [r0, r6]
100060f6:	3604      	adds	r6, #4
100060f8:	5182      	str	r2, [r0, r6]
100060fa:	3604      	adds	r6, #4
100060fc:	5182      	str	r2, [r0, r6]
100060fe:	3604      	adds	r6, #4
10006100:	5182      	str	r2, [r0, r6]
10006102:	3604      	adds	r6, #4
10006104:	5182      	str	r2, [r0, r6]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006106:	464e      	mov	r6, r9
10006108:	2e09      	cmp	r6, #9
1000610a:	d101      	bne.n	10006110 <_Z7InfoRowv+0xa40>
1000610c:	f000 fc7b 	bl	10006a06 <_Z7InfoRowv+0x1336>
	Text[x] = ch;
10006110:	4656      	mov	r6, sl
10006112:	624e      	str	r6, [r1, #36]	; 0x24
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006114:	2690      	movs	r6, #144	; 0x90
10006116:	0076      	lsls	r6, r6, #1
10006118:	5182      	str	r2, [r0, r6]
1000611a:	3604      	adds	r6, #4
1000611c:	5182      	str	r2, [r0, r6]
1000611e:	3604      	adds	r6, #4
10006120:	5182      	str	r2, [r0, r6]
10006122:	3604      	adds	r6, #4
10006124:	5182      	str	r2, [r0, r6]
10006126:	3604      	adds	r6, #4
10006128:	5182      	str	r2, [r0, r6]
1000612a:	3604      	adds	r6, #4
1000612c:	5182      	str	r2, [r0, r6]
1000612e:	3604      	adds	r6, #4
10006130:	5182      	str	r2, [r0, r6]
10006132:	3604      	adds	r6, #4
10006134:	5182      	str	r2, [r0, r6]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006136:	464e      	mov	r6, r9
10006138:	2e0a      	cmp	r6, #10
1000613a:	d101      	bne.n	10006140 <_Z7InfoRowv+0xa70>
1000613c:	f000 fc63 	bl	10006a06 <_Z7InfoRowv+0x1336>
	Text[x] = ch;
10006140:	4656      	mov	r6, sl
10006142:	628e      	str	r6, [r1, #40]	; 0x28
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006144:	26a0      	movs	r6, #160	; 0xa0
10006146:	0076      	lsls	r6, r6, #1
10006148:	5182      	str	r2, [r0, r6]
1000614a:	3604      	adds	r6, #4
1000614c:	5182      	str	r2, [r0, r6]
1000614e:	3604      	adds	r6, #4
10006150:	5182      	str	r2, [r0, r6]
10006152:	3604      	adds	r6, #4
10006154:	5182      	str	r2, [r0, r6]
10006156:	3604      	adds	r6, #4
10006158:	5182      	str	r2, [r0, r6]
1000615a:	3604      	adds	r6, #4
1000615c:	5182      	str	r2, [r0, r6]
1000615e:	3604      	adds	r6, #4
10006160:	5182      	str	r2, [r0, r6]
10006162:	3604      	adds	r6, #4
10006164:	5182      	str	r2, [r0, r6]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006166:	464e      	mov	r6, r9
10006168:	2e0b      	cmp	r6, #11
1000616a:	d101      	bne.n	10006170 <_Z7InfoRowv+0xaa0>
1000616c:	f000 fc4b 	bl	10006a06 <_Z7InfoRowv+0x1336>
	Text[x] = ch;
10006170:	4653      	mov	r3, sl
10006172:	62cb      	str	r3, [r1, #44]	; 0x2c
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006174:	23b0      	movs	r3, #176	; 0xb0
10006176:	005b      	lsls	r3, r3, #1
10006178:	50c2      	str	r2, [r0, r3]
1000617a:	3304      	adds	r3, #4
1000617c:	50c2      	str	r2, [r0, r3]
1000617e:	3304      	adds	r3, #4
10006180:	50c2      	str	r2, [r0, r3]
10006182:	3304      	adds	r3, #4
10006184:	50c2      	str	r2, [r0, r3]
10006186:	3304      	adds	r3, #4
10006188:	50c2      	str	r2, [r0, r3]
1000618a:	3304      	adds	r3, #4
1000618c:	50c2      	str	r2, [r0, r3]
1000618e:	3304      	adds	r3, #4
10006190:	50c2      	str	r2, [r0, r3]
10006192:	3304      	adds	r3, #4
10006194:	50c2      	str	r2, [r0, r3]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006196:	2330      	movs	r3, #48	; 0x30
10006198:	4a5f      	ldr	r2, [pc, #380]	; (10006318 <_Z7InfoRowv+0xc48>)
1000619a:	7013      	strb	r3, [r2, #0]
	x += 7; InfoPos(x);

	// display best time
	InfoDispText(BestTxt, COLTIT);
	x += 6; InfoPos(x);
	InfoTime(BestTime, NewBest ? COLBEST : COLVAL);
1000619c:	4b60      	ldr	r3, [pc, #384]	; (10006320 <_Z7InfoRowv+0xc50>)
1000619e:	6818      	ldr	r0, [r3, #0]
100061a0:	4643      	mov	r3, r8
100061a2:	7819      	ldrb	r1, [r3, #0]
100061a4:	1e4b      	subs	r3, r1, #1
100061a6:	4199      	sbcs	r1, r3
100061a8:	23e2      	movs	r3, #226	; 0xe2
100061aa:	4249      	negs	r1, r1
100061ac:	4399      	bics	r1, r3
100061ae:	31ff      	adds	r1, #255	; 0xff
100061b0:	f7ff fa46 	bl	10005640 <_Z8InfoTimeih>
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100061b4:	4b58      	ldr	r3, [pc, #352]	; (10006318 <_Z7InfoRowv+0xc48>)
100061b6:	781b      	ldrb	r3, [r3, #0]
100061b8:	2b36      	cmp	r3, #54	; 0x36
100061ba:	d900      	bls.n	100061be <_Z7InfoRowv+0xaee>
100061bc:	e13e      	b.n	1000643c <_Z7InfoRowv+0xd6c>
100061be:	2136      	movs	r1, #54	; 0x36
100061c0:	2003      	movs	r0, #3
100061c2:	1ac9      	subs	r1, r1, r3
100061c4:	b2c9      	uxtb	r1, r1
100061c6:	18ef      	adds	r7, r5, r3
100061c8:	4288      	cmp	r0, r1
100061ca:	d301      	bcc.n	100061d0 <_Z7InfoRowv+0xb00>
100061cc:	f000 fc81 	bl	10006ad2 <_Z7InfoRowv+0x1402>
100061d0:	4207      	tst	r7, r0
100061d2:	d001      	beq.n	100061d8 <_Z7InfoRowv+0xb08>
100061d4:	f000 fc7d 	bl	10006ad2 <_Z7InfoRowv+0x1402>
100061d8:	2137      	movs	r1, #55	; 0x37
100061da:	1ac9      	subs	r1, r1, r3
100061dc:	b2c9      	uxtb	r1, r1
100061de:	088a      	lsrs	r2, r1, #2
100061e0:	4690      	mov	r8, r2
	Text[x] = ch;
100061e2:	484e      	ldr	r0, [pc, #312]	; (1000631c <_Z7InfoRowv+0xc4c>)
100061e4:	4646      	mov	r6, r8
100061e6:	6038      	str	r0, [r7, #0]
100061e8:	4681      	mov	r9, r0
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100061ea:	2000      	movs	r0, #0
100061ec:	00da      	lsls	r2, r3, #3
100061ee:	18a2      	adds	r2, r4, r2
100061f0:	6010      	str	r0, [r2, #0]
100061f2:	6050      	str	r0, [r2, #4]
100061f4:	6090      	str	r0, [r2, #8]
100061f6:	60d0      	str	r0, [r2, #12]
100061f8:	6110      	str	r0, [r2, #16]
100061fa:	6150      	str	r0, [r2, #20]
100061fc:	6190      	str	r0, [r2, #24]
100061fe:	61d0      	str	r0, [r2, #28]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006200:	2e01      	cmp	r6, #1
10006202:	d100      	bne.n	10006206 <_Z7InfoRowv+0xb36>
10006204:	e0f9      	b.n	100063fa <_Z7InfoRowv+0xd2a>
	Text[x] = ch;
10006206:	464e      	mov	r6, r9
10006208:	607e      	str	r6, [r7, #4]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
1000620a:	4646      	mov	r6, r8
1000620c:	6210      	str	r0, [r2, #32]
1000620e:	6250      	str	r0, [r2, #36]	; 0x24
10006210:	6290      	str	r0, [r2, #40]	; 0x28
10006212:	62d0      	str	r0, [r2, #44]	; 0x2c
10006214:	6310      	str	r0, [r2, #48]	; 0x30
10006216:	6350      	str	r0, [r2, #52]	; 0x34
10006218:	6390      	str	r0, [r2, #56]	; 0x38
1000621a:	63d0      	str	r0, [r2, #60]	; 0x3c
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
1000621c:	2e02      	cmp	r6, #2
1000621e:	d100      	bne.n	10006222 <_Z7InfoRowv+0xb52>
10006220:	e0eb      	b.n	100063fa <_Z7InfoRowv+0xd2a>
	Text[x] = ch;
10006222:	464e      	mov	r6, r9
10006224:	60be      	str	r6, [r7, #8]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006226:	4646      	mov	r6, r8
10006228:	6410      	str	r0, [r2, #64]	; 0x40
1000622a:	6450      	str	r0, [r2, #68]	; 0x44
1000622c:	6490      	str	r0, [r2, #72]	; 0x48
1000622e:	64d0      	str	r0, [r2, #76]	; 0x4c
10006230:	6510      	str	r0, [r2, #80]	; 0x50
10006232:	6550      	str	r0, [r2, #84]	; 0x54
10006234:	6590      	str	r0, [r2, #88]	; 0x58
10006236:	65d0      	str	r0, [r2, #92]	; 0x5c
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006238:	2e03      	cmp	r6, #3
1000623a:	d100      	bne.n	1000623e <_Z7InfoRowv+0xb6e>
1000623c:	e0dd      	b.n	100063fa <_Z7InfoRowv+0xd2a>
	Text[x] = ch;
1000623e:	464e      	mov	r6, r9
10006240:	60fe      	str	r6, [r7, #12]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006242:	4646      	mov	r6, r8
10006244:	6610      	str	r0, [r2, #96]	; 0x60
10006246:	6650      	str	r0, [r2, #100]	; 0x64
10006248:	6690      	str	r0, [r2, #104]	; 0x68
1000624a:	66d0      	str	r0, [r2, #108]	; 0x6c
1000624c:	6710      	str	r0, [r2, #112]	; 0x70
1000624e:	6750      	str	r0, [r2, #116]	; 0x74
10006250:	6790      	str	r0, [r2, #120]	; 0x78
10006252:	67d0      	str	r0, [r2, #124]	; 0x7c
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006254:	2e04      	cmp	r6, #4
10006256:	d100      	bne.n	1000625a <_Z7InfoRowv+0xb8a>
10006258:	e0cf      	b.n	100063fa <_Z7InfoRowv+0xd2a>
	Text[x] = ch;
1000625a:	464e      	mov	r6, r9
1000625c:	613e      	str	r6, [r7, #16]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
1000625e:	2680      	movs	r6, #128	; 0x80
10006260:	5190      	str	r0, [r2, r6]
10006262:	3604      	adds	r6, #4
10006264:	5190      	str	r0, [r2, r6]
10006266:	3604      	adds	r6, #4
10006268:	5190      	str	r0, [r2, r6]
1000626a:	3604      	adds	r6, #4
1000626c:	5190      	str	r0, [r2, r6]
1000626e:	3604      	adds	r6, #4
10006270:	5190      	str	r0, [r2, r6]
10006272:	3604      	adds	r6, #4
10006274:	5190      	str	r0, [r2, r6]
10006276:	3604      	adds	r6, #4
10006278:	5190      	str	r0, [r2, r6]
1000627a:	3604      	adds	r6, #4
1000627c:	5190      	str	r0, [r2, r6]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
1000627e:	4646      	mov	r6, r8
10006280:	2e05      	cmp	r6, #5
10006282:	d100      	bne.n	10006286 <_Z7InfoRowv+0xbb6>
10006284:	e0b9      	b.n	100063fa <_Z7InfoRowv+0xd2a>
	Text[x] = ch;
10006286:	464e      	mov	r6, r9
10006288:	617e      	str	r6, [r7, #20]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
1000628a:	26a0      	movs	r6, #160	; 0xa0
1000628c:	5190      	str	r0, [r2, r6]
1000628e:	3604      	adds	r6, #4
10006290:	5190      	str	r0, [r2, r6]
10006292:	3604      	adds	r6, #4
10006294:	5190      	str	r0, [r2, r6]
10006296:	3604      	adds	r6, #4
10006298:	5190      	str	r0, [r2, r6]
1000629a:	3604      	adds	r6, #4
1000629c:	5190      	str	r0, [r2, r6]
1000629e:	3604      	adds	r6, #4
100062a0:	5190      	str	r0, [r2, r6]
100062a2:	3604      	adds	r6, #4
100062a4:	5190      	str	r0, [r2, r6]
100062a6:	3604      	adds	r6, #4
100062a8:	5190      	str	r0, [r2, r6]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100062aa:	4646      	mov	r6, r8
100062ac:	2e06      	cmp	r6, #6
100062ae:	d100      	bne.n	100062b2 <_Z7InfoRowv+0xbe2>
100062b0:	e0a3      	b.n	100063fa <_Z7InfoRowv+0xd2a>
	Text[x] = ch;
100062b2:	464e      	mov	r6, r9
100062b4:	61be      	str	r6, [r7, #24]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100062b6:	26c0      	movs	r6, #192	; 0xc0
100062b8:	5190      	str	r0, [r2, r6]
100062ba:	3604      	adds	r6, #4
100062bc:	5190      	str	r0, [r2, r6]
100062be:	3604      	adds	r6, #4
100062c0:	5190      	str	r0, [r2, r6]
100062c2:	3604      	adds	r6, #4
100062c4:	5190      	str	r0, [r2, r6]
100062c6:	3604      	adds	r6, #4
100062c8:	5190      	str	r0, [r2, r6]
100062ca:	3604      	adds	r6, #4
100062cc:	5190      	str	r0, [r2, r6]
100062ce:	3604      	adds	r6, #4
100062d0:	5190      	str	r0, [r2, r6]
100062d2:	3604      	adds	r6, #4
100062d4:	5190      	str	r0, [r2, r6]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100062d6:	4640      	mov	r0, r8
100062d8:	2807      	cmp	r0, #7
100062da:	d100      	bne.n	100062de <_Z7InfoRowv+0xc0e>
100062dc:	e08d      	b.n	100063fa <_Z7InfoRowv+0xd2a>
	Text[x] = ch;
100062de:	480f      	ldr	r0, [pc, #60]	; (1000631c <_Z7InfoRowv+0xc4c>)
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100062e0:	3604      	adds	r6, #4
	Text[x] = ch;
100062e2:	61f8      	str	r0, [r7, #28]
100062e4:	4681      	mov	r9, r0
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100062e6:	2000      	movs	r0, #0
100062e8:	5190      	str	r0, [r2, r6]
100062ea:	3604      	adds	r6, #4
100062ec:	5190      	str	r0, [r2, r6]
100062ee:	3604      	adds	r6, #4
100062f0:	5190      	str	r0, [r2, r6]
100062f2:	3604      	adds	r6, #4
100062f4:	5190      	str	r0, [r2, r6]
100062f6:	3604      	adds	r6, #4
100062f8:	5190      	str	r0, [r2, r6]
100062fa:	3604      	adds	r6, #4
100062fc:	5190      	str	r0, [r2, r6]
100062fe:	3604      	adds	r6, #4
10006300:	5190      	str	r0, [r2, r6]
10006302:	3604      	adds	r6, #4
10006304:	5190      	str	r0, [r2, r6]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006306:	4646      	mov	r6, r8
10006308:	2e08      	cmp	r6, #8
1000630a:	d076      	beq.n	100063fa <_Z7InfoRowv+0xd2a>
1000630c:	e00a      	b.n	10006324 <_Z7InfoRowv+0xc54>
1000630e:	46c0      	nop			; (mov r8, r8)
10006310:	1003ff3c 	.word	0x1003ff3c
10006314:	fcfcfcfc 	.word	0xfcfcfcfc
10006318:	2003e33c 	.word	0x2003e33c
1000631c:	20202020 	.word	0x20202020
10006320:	20003634 	.word	0x20003634
	Text[x] = ch;
10006324:	464e      	mov	r6, r9
10006326:	623e      	str	r6, [r7, #32]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006328:	2680      	movs	r6, #128	; 0x80
1000632a:	0076      	lsls	r6, r6, #1
1000632c:	5190      	str	r0, [r2, r6]
1000632e:	3604      	adds	r6, #4
10006330:	5190      	str	r0, [r2, r6]
10006332:	3604      	adds	r6, #4
10006334:	5190      	str	r0, [r2, r6]
10006336:	3604      	adds	r6, #4
10006338:	5190      	str	r0, [r2, r6]
1000633a:	3604      	adds	r6, #4
1000633c:	5190      	str	r0, [r2, r6]
1000633e:	3604      	adds	r6, #4
10006340:	5190      	str	r0, [r2, r6]
10006342:	3604      	adds	r6, #4
10006344:	5190      	str	r0, [r2, r6]
10006346:	3604      	adds	r6, #4
10006348:	5190      	str	r0, [r2, r6]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
1000634a:	4646      	mov	r6, r8
1000634c:	2e09      	cmp	r6, #9
1000634e:	d054      	beq.n	100063fa <_Z7InfoRowv+0xd2a>
	Text[x] = ch;
10006350:	464e      	mov	r6, r9
10006352:	627e      	str	r6, [r7, #36]	; 0x24
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006354:	2690      	movs	r6, #144	; 0x90
10006356:	0076      	lsls	r6, r6, #1
10006358:	5190      	str	r0, [r2, r6]
1000635a:	3604      	adds	r6, #4
1000635c:	5190      	str	r0, [r2, r6]
1000635e:	3604      	adds	r6, #4
10006360:	5190      	str	r0, [r2, r6]
10006362:	3604      	adds	r6, #4
10006364:	5190      	str	r0, [r2, r6]
10006366:	3604      	adds	r6, #4
10006368:	5190      	str	r0, [r2, r6]
1000636a:	3604      	adds	r6, #4
1000636c:	5190      	str	r0, [r2, r6]
1000636e:	3604      	adds	r6, #4
10006370:	5190      	str	r0, [r2, r6]
10006372:	3604      	adds	r6, #4
10006374:	5190      	str	r0, [r2, r6]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006376:	4646      	mov	r6, r8
10006378:	2e0a      	cmp	r6, #10
1000637a:	d03e      	beq.n	100063fa <_Z7InfoRowv+0xd2a>
	Text[x] = ch;
1000637c:	464e      	mov	r6, r9
1000637e:	62be      	str	r6, [r7, #40]	; 0x28
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006380:	26a0      	movs	r6, #160	; 0xa0
10006382:	0076      	lsls	r6, r6, #1
10006384:	5190      	str	r0, [r2, r6]
10006386:	3604      	adds	r6, #4
10006388:	5190      	str	r0, [r2, r6]
1000638a:	3604      	adds	r6, #4
1000638c:	5190      	str	r0, [r2, r6]
1000638e:	3604      	adds	r6, #4
10006390:	5190      	str	r0, [r2, r6]
10006392:	3604      	adds	r6, #4
10006394:	5190      	str	r0, [r2, r6]
10006396:	3604      	adds	r6, #4
10006398:	5190      	str	r0, [r2, r6]
1000639a:	3604      	adds	r6, #4
1000639c:	5190      	str	r0, [r2, r6]
1000639e:	3604      	adds	r6, #4
100063a0:	5190      	str	r0, [r2, r6]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100063a2:	4646      	mov	r6, r8
100063a4:	2e0b      	cmp	r6, #11
100063a6:	d028      	beq.n	100063fa <_Z7InfoRowv+0xd2a>
	Text[x] = ch;
100063a8:	464e      	mov	r6, r9
100063aa:	62fe      	str	r6, [r7, #44]	; 0x2c
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100063ac:	26b0      	movs	r6, #176	; 0xb0
100063ae:	0076      	lsls	r6, r6, #1
100063b0:	5190      	str	r0, [r2, r6]
100063b2:	3604      	adds	r6, #4
100063b4:	5190      	str	r0, [r2, r6]
100063b6:	3604      	adds	r6, #4
100063b8:	5190      	str	r0, [r2, r6]
100063ba:	3604      	adds	r6, #4
100063bc:	5190      	str	r0, [r2, r6]
100063be:	3604      	adds	r6, #4
100063c0:	5190      	str	r0, [r2, r6]
100063c2:	3604      	adds	r6, #4
100063c4:	5190      	str	r0, [r2, r6]
100063c6:	3604      	adds	r6, #4
100063c8:	5190      	str	r0, [r2, r6]
100063ca:	3604      	adds	r6, #4
100063cc:	5190      	str	r0, [r2, r6]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100063ce:	4646      	mov	r6, r8
100063d0:	2e0c      	cmp	r6, #12
100063d2:	d012      	beq.n	100063fa <_Z7InfoRowv+0xd2a>
	Text[x] = ch;
100063d4:	464e      	mov	r6, r9
100063d6:	633e      	str	r6, [r7, #48]	; 0x30
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100063d8:	27c0      	movs	r7, #192	; 0xc0
100063da:	007f      	lsls	r7, r7, #1
100063dc:	51d0      	str	r0, [r2, r7]
100063de:	3704      	adds	r7, #4
100063e0:	51d0      	str	r0, [r2, r7]
100063e2:	3704      	adds	r7, #4
100063e4:	51d0      	str	r0, [r2, r7]
100063e6:	3704      	adds	r7, #4
100063e8:	51d0      	str	r0, [r2, r7]
100063ea:	3704      	adds	r7, #4
100063ec:	51d0      	str	r0, [r2, r7]
100063ee:	3704      	adds	r7, #4
100063f0:	51d0      	str	r0, [r2, r7]
100063f2:	3704      	adds	r7, #4
100063f4:	51d0      	str	r0, [r2, r7]
100063f6:	3704      	adds	r7, #4
100063f8:	51d0      	str	r0, [r2, r7]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100063fa:	2203      	movs	r2, #3
100063fc:	0008      	movs	r0, r1
100063fe:	4390      	bics	r0, r2
10006400:	181b      	adds	r3, r3, r0
10006402:	b2db      	uxtb	r3, r3
10006404:	4288      	cmp	r0, r1
10006406:	d018      	beq.n	1000643a <_Z7InfoRowv+0xd6a>
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006408:	2100      	movs	r1, #0
	Text[x] = ch;
1000640a:	2020      	movs	r0, #32
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
1000640c:	00da      	lsls	r2, r3, #3
1000640e:	18a2      	adds	r2, r4, r2
	Text[x] = ch;
10006410:	54e8      	strb	r0, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006412:	6011      	str	r1, [r2, #0]
10006414:	6051      	str	r1, [r2, #4]
	InfoX = x + 1;	
10006416:	1c5a      	adds	r2, r3, #1
10006418:	b2d2      	uxtb	r2, r2
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
1000641a:	2a37      	cmp	r2, #55	; 0x37
1000641c:	d00d      	beq.n	1000643a <_Z7InfoRowv+0xd6a>
	Text[x] = ch;
1000641e:	54a8      	strb	r0, [r5, r2]
	InfoX = x + 1;	
10006420:	3302      	adds	r3, #2
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006422:	00d2      	lsls	r2, r2, #3
10006424:	18a2      	adds	r2, r4, r2
	InfoX = x + 1;	
10006426:	b2db      	uxtb	r3, r3
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006428:	6011      	str	r1, [r2, #0]
1000642a:	6051      	str	r1, [r2, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
1000642c:	2b37      	cmp	r3, #55	; 0x37
1000642e:	d004      	beq.n	1000643a <_Z7InfoRowv+0xd6a>
	Text[x] = ch;
10006430:	54e8      	strb	r0, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006432:	00db      	lsls	r3, r3, #3
10006434:	18e3      	adds	r3, r4, r3
10006436:	6019      	str	r1, [r3, #0]
10006438:	6059      	str	r1, [r3, #4]
	InfoX = x + 1;	
1000643a:	2337      	movs	r3, #55	; 0x37
	while ((ch = *txt++) != 0)
1000643c:	2752      	movs	r7, #82	; 0x52
1000643e:	49d2      	ldr	r1, [pc, #840]	; (10006788 <_Z7InfoRowv+0x10b8>)
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006440:	48d2      	ldr	r0, [pc, #840]	; (1000678c <_Z7InfoRowv+0x10bc>)
10006442:	3101      	adds	r1, #1
10006444:	00da      	lsls	r2, r3, #3
10006446:	18a2      	adds	r2, r4, r2
	while ((ch = *txt++) != 0)
10006448:	3101      	adds	r1, #1
	Text[x] = ch;
1000644a:	54ef      	strb	r7, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
1000644c:	6010      	str	r0, [r2, #0]
1000644e:	6050      	str	r0, [r2, #4]
	while ((ch = *txt++) != 0)
10006450:	1e4a      	subs	r2, r1, #1
10006452:	7817      	ldrb	r7, [r2, #0]
	InfoX = x + 1;	
10006454:	3301      	adds	r3, #1
10006456:	b2db      	uxtb	r3, r3
	while ((ch = *txt++) != 0)
10006458:	2f00      	cmp	r7, #0
1000645a:	d1f3      	bne.n	10006444 <_Z7InfoRowv+0xd74>
1000645c:	4acc      	ldr	r2, [pc, #816]	; (10006790 <_Z7InfoRowv+0x10c0>)
1000645e:	7013      	strb	r3, [r2, #0]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006460:	2b3c      	cmp	r3, #60	; 0x3c
10006462:	d900      	bls.n	10006466 <_Z7InfoRowv+0xd96>
10006464:	e156      	b.n	10006714 <_Z7InfoRowv+0x1044>
10006466:	2003      	movs	r0, #3
10006468:	18e9      	adds	r1, r5, r3
1000646a:	4201      	tst	r1, r0
1000646c:	d000      	beq.n	10006470 <_Z7InfoRowv+0xda0>
1000646e:	e33f      	b.n	10006af0 <_Z7InfoRowv+0x1420>
10006470:	223c      	movs	r2, #60	; 0x3c
10006472:	1ad2      	subs	r2, r2, r3
10006474:	b2d2      	uxtb	r2, r2
10006476:	4290      	cmp	r0, r2
10006478:	d300      	bcc.n	1000647c <_Z7InfoRowv+0xdac>
1000647a:	e339      	b.n	10006af0 <_Z7InfoRowv+0x1420>
1000647c:	203d      	movs	r0, #61	; 0x3d
1000647e:	1ac0      	subs	r0, r0, r3
10006480:	b2c2      	uxtb	r2, r0
10006482:	4694      	mov	ip, r2
10006484:	0892      	lsrs	r2, r2, #2
10006486:	4691      	mov	r9, r2
10006488:	464e      	mov	r6, r9
	Text[x] = ch;
1000648a:	48c2      	ldr	r0, [pc, #776]	; (10006794 <_Z7InfoRowv+0x10c4>)
1000648c:	00da      	lsls	r2, r3, #3
1000648e:	18a2      	adds	r2, r4, r2
10006490:	6008      	str	r0, [r1, #0]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006492:	6017      	str	r7, [r2, #0]
10006494:	6057      	str	r7, [r2, #4]
10006496:	6097      	str	r7, [r2, #8]
10006498:	60d7      	str	r7, [r2, #12]
1000649a:	6117      	str	r7, [r2, #16]
1000649c:	6157      	str	r7, [r2, #20]
1000649e:	6197      	str	r7, [r2, #24]
100064a0:	61d7      	str	r7, [r2, #28]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100064a2:	2e01      	cmp	r6, #1
100064a4:	d100      	bne.n	100064a8 <_Z7InfoRowv+0xdd8>
100064a6:	e112      	b.n	100066ce <_Z7InfoRowv+0xffe>
	Text[x] = ch;
100064a8:	6048      	str	r0, [r1, #4]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100064aa:	6217      	str	r7, [r2, #32]
100064ac:	6257      	str	r7, [r2, #36]	; 0x24
100064ae:	6297      	str	r7, [r2, #40]	; 0x28
100064b0:	62d7      	str	r7, [r2, #44]	; 0x2c
100064b2:	6317      	str	r7, [r2, #48]	; 0x30
100064b4:	6357      	str	r7, [r2, #52]	; 0x34
100064b6:	6397      	str	r7, [r2, #56]	; 0x38
100064b8:	63d7      	str	r7, [r2, #60]	; 0x3c
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100064ba:	2e02      	cmp	r6, #2
100064bc:	d100      	bne.n	100064c0 <_Z7InfoRowv+0xdf0>
100064be:	e106      	b.n	100066ce <_Z7InfoRowv+0xffe>
	Text[x] = ch;
100064c0:	6088      	str	r0, [r1, #8]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100064c2:	6417      	str	r7, [r2, #64]	; 0x40
100064c4:	6457      	str	r7, [r2, #68]	; 0x44
100064c6:	6497      	str	r7, [r2, #72]	; 0x48
100064c8:	64d7      	str	r7, [r2, #76]	; 0x4c
100064ca:	6517      	str	r7, [r2, #80]	; 0x50
100064cc:	6557      	str	r7, [r2, #84]	; 0x54
100064ce:	6597      	str	r7, [r2, #88]	; 0x58
100064d0:	65d7      	str	r7, [r2, #92]	; 0x5c
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100064d2:	2e03      	cmp	r6, #3
100064d4:	d100      	bne.n	100064d8 <_Z7InfoRowv+0xe08>
100064d6:	e0fa      	b.n	100066ce <_Z7InfoRowv+0xffe>
	Text[x] = ch;
100064d8:	60c8      	str	r0, [r1, #12]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100064da:	6617      	str	r7, [r2, #96]	; 0x60
100064dc:	6657      	str	r7, [r2, #100]	; 0x64
100064de:	6697      	str	r7, [r2, #104]	; 0x68
100064e0:	66d7      	str	r7, [r2, #108]	; 0x6c
100064e2:	6717      	str	r7, [r2, #112]	; 0x70
100064e4:	6757      	str	r7, [r2, #116]	; 0x74
100064e6:	6797      	str	r7, [r2, #120]	; 0x78
100064e8:	67d7      	str	r7, [r2, #124]	; 0x7c
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100064ea:	2e04      	cmp	r6, #4
100064ec:	d100      	bne.n	100064f0 <_Z7InfoRowv+0xe20>
100064ee:	e0ee      	b.n	100066ce <_Z7InfoRowv+0xffe>
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100064f0:	2680      	movs	r6, #128	; 0x80
	Text[x] = ch;
100064f2:	6108      	str	r0, [r1, #16]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100064f4:	5197      	str	r7, [r2, r6]
100064f6:	3604      	adds	r6, #4
100064f8:	5197      	str	r7, [r2, r6]
100064fa:	3604      	adds	r6, #4
100064fc:	5197      	str	r7, [r2, r6]
100064fe:	3604      	adds	r6, #4
10006500:	5197      	str	r7, [r2, r6]
10006502:	3604      	adds	r6, #4
10006504:	5197      	str	r7, [r2, r6]
10006506:	3604      	adds	r6, #4
10006508:	5197      	str	r7, [r2, r6]
1000650a:	3604      	adds	r6, #4
1000650c:	5197      	str	r7, [r2, r6]
1000650e:	3604      	adds	r6, #4
10006510:	5197      	str	r7, [r2, r6]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006512:	464e      	mov	r6, r9
10006514:	2e05      	cmp	r6, #5
10006516:	d100      	bne.n	1000651a <_Z7InfoRowv+0xe4a>
10006518:	e0d9      	b.n	100066ce <_Z7InfoRowv+0xffe>
	Text[x] = ch;
1000651a:	6148      	str	r0, [r1, #20]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
1000651c:	20a0      	movs	r0, #160	; 0xa0
1000651e:	5017      	str	r7, [r2, r0]
10006520:	3004      	adds	r0, #4
10006522:	5017      	str	r7, [r2, r0]
10006524:	3004      	adds	r0, #4
10006526:	5017      	str	r7, [r2, r0]
10006528:	3004      	adds	r0, #4
1000652a:	5017      	str	r7, [r2, r0]
1000652c:	3004      	adds	r0, #4
1000652e:	5017      	str	r7, [r2, r0]
10006530:	3004      	adds	r0, #4
10006532:	5017      	str	r7, [r2, r0]
10006534:	3004      	adds	r0, #4
10006536:	5017      	str	r7, [r2, r0]
10006538:	3004      	adds	r0, #4
1000653a:	5017      	str	r7, [r2, r0]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
1000653c:	2e06      	cmp	r6, #6
1000653e:	d100      	bne.n	10006542 <_Z7InfoRowv+0xe72>
10006540:	e0c5      	b.n	100066ce <_Z7InfoRowv+0xffe>
	Text[x] = ch;
10006542:	4894      	ldr	r0, [pc, #592]	; (10006794 <_Z7InfoRowv+0x10c4>)
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006544:	26c0      	movs	r6, #192	; 0xc0
	Text[x] = ch;
10006546:	6188      	str	r0, [r1, #24]
10006548:	4682      	mov	sl, r0
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
1000654a:	2000      	movs	r0, #0
1000654c:	5190      	str	r0, [r2, r6]
1000654e:	3604      	adds	r6, #4
10006550:	5190      	str	r0, [r2, r6]
10006552:	3604      	adds	r6, #4
10006554:	5190      	str	r0, [r2, r6]
10006556:	3604      	adds	r6, #4
10006558:	5190      	str	r0, [r2, r6]
1000655a:	3604      	adds	r6, #4
1000655c:	5190      	str	r0, [r2, r6]
1000655e:	3604      	adds	r6, #4
10006560:	5190      	str	r0, [r2, r6]
10006562:	3604      	adds	r6, #4
10006564:	5190      	str	r0, [r2, r6]
10006566:	3604      	adds	r6, #4
10006568:	5190      	str	r0, [r2, r6]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
1000656a:	464e      	mov	r6, r9
1000656c:	2e07      	cmp	r6, #7
1000656e:	d100      	bne.n	10006572 <_Z7InfoRowv+0xea2>
10006570:	e0ad      	b.n	100066ce <_Z7InfoRowv+0xffe>
	Text[x] = ch;
10006572:	4656      	mov	r6, sl
10006574:	61ce      	str	r6, [r1, #28]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006576:	26e0      	movs	r6, #224	; 0xe0
10006578:	5190      	str	r0, [r2, r6]
1000657a:	3604      	adds	r6, #4
1000657c:	5190      	str	r0, [r2, r6]
1000657e:	3604      	adds	r6, #4
10006580:	5190      	str	r0, [r2, r6]
10006582:	3604      	adds	r6, #4
10006584:	5190      	str	r0, [r2, r6]
10006586:	3604      	adds	r6, #4
10006588:	5190      	str	r0, [r2, r6]
1000658a:	3604      	adds	r6, #4
1000658c:	5190      	str	r0, [r2, r6]
1000658e:	3604      	adds	r6, #4
10006590:	5190      	str	r0, [r2, r6]
10006592:	3604      	adds	r6, #4
10006594:	5190      	str	r0, [r2, r6]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006596:	464e      	mov	r6, r9
10006598:	2e08      	cmp	r6, #8
1000659a:	d100      	bne.n	1000659e <_Z7InfoRowv+0xece>
1000659c:	e097      	b.n	100066ce <_Z7InfoRowv+0xffe>
	Text[x] = ch;
1000659e:	4656      	mov	r6, sl
100065a0:	620e      	str	r6, [r1, #32]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100065a2:	2680      	movs	r6, #128	; 0x80
100065a4:	0076      	lsls	r6, r6, #1
100065a6:	5190      	str	r0, [r2, r6]
100065a8:	3604      	adds	r6, #4
100065aa:	5190      	str	r0, [r2, r6]
100065ac:	3604      	adds	r6, #4
100065ae:	5190      	str	r0, [r2, r6]
100065b0:	3604      	adds	r6, #4
100065b2:	5190      	str	r0, [r2, r6]
100065b4:	3604      	adds	r6, #4
100065b6:	5190      	str	r0, [r2, r6]
100065b8:	3604      	adds	r6, #4
100065ba:	5190      	str	r0, [r2, r6]
100065bc:	3604      	adds	r6, #4
100065be:	5190      	str	r0, [r2, r6]
100065c0:	3604      	adds	r6, #4
100065c2:	5190      	str	r0, [r2, r6]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100065c4:	464e      	mov	r6, r9
100065c6:	2e09      	cmp	r6, #9
100065c8:	d100      	bne.n	100065cc <_Z7InfoRowv+0xefc>
100065ca:	e080      	b.n	100066ce <_Z7InfoRowv+0xffe>
	Text[x] = ch;
100065cc:	4656      	mov	r6, sl
100065ce:	624e      	str	r6, [r1, #36]	; 0x24
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100065d0:	2690      	movs	r6, #144	; 0x90
100065d2:	0076      	lsls	r6, r6, #1
100065d4:	5190      	str	r0, [r2, r6]
100065d6:	3604      	adds	r6, #4
100065d8:	5190      	str	r0, [r2, r6]
100065da:	3604      	adds	r6, #4
100065dc:	5190      	str	r0, [r2, r6]
100065de:	3604      	adds	r6, #4
100065e0:	5190      	str	r0, [r2, r6]
100065e2:	3604      	adds	r6, #4
100065e4:	5190      	str	r0, [r2, r6]
100065e6:	3604      	adds	r6, #4
100065e8:	5190      	str	r0, [r2, r6]
100065ea:	3604      	adds	r6, #4
100065ec:	5190      	str	r0, [r2, r6]
100065ee:	3604      	adds	r6, #4
100065f0:	5190      	str	r0, [r2, r6]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100065f2:	464e      	mov	r6, r9
100065f4:	2e0a      	cmp	r6, #10
100065f6:	d06a      	beq.n	100066ce <_Z7InfoRowv+0xffe>
	Text[x] = ch;
100065f8:	4656      	mov	r6, sl
100065fa:	628e      	str	r6, [r1, #40]	; 0x28
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100065fc:	26a0      	movs	r6, #160	; 0xa0
100065fe:	0076      	lsls	r6, r6, #1
10006600:	5190      	str	r0, [r2, r6]
10006602:	3604      	adds	r6, #4
10006604:	5190      	str	r0, [r2, r6]
10006606:	3604      	adds	r6, #4
10006608:	5190      	str	r0, [r2, r6]
1000660a:	3604      	adds	r6, #4
1000660c:	5190      	str	r0, [r2, r6]
1000660e:	3604      	adds	r6, #4
10006610:	5190      	str	r0, [r2, r6]
10006612:	3604      	adds	r6, #4
10006614:	5190      	str	r0, [r2, r6]
10006616:	3604      	adds	r6, #4
10006618:	5190      	str	r0, [r2, r6]
1000661a:	3604      	adds	r6, #4
1000661c:	5190      	str	r0, [r2, r6]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
1000661e:	464e      	mov	r6, r9
10006620:	2e0b      	cmp	r6, #11
10006622:	d054      	beq.n	100066ce <_Z7InfoRowv+0xffe>
	Text[x] = ch;
10006624:	4656      	mov	r6, sl
10006626:	62ce      	str	r6, [r1, #44]	; 0x2c
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006628:	26b0      	movs	r6, #176	; 0xb0
1000662a:	0076      	lsls	r6, r6, #1
1000662c:	5190      	str	r0, [r2, r6]
1000662e:	3604      	adds	r6, #4
10006630:	5190      	str	r0, [r2, r6]
10006632:	3604      	adds	r6, #4
10006634:	5190      	str	r0, [r2, r6]
10006636:	3604      	adds	r6, #4
10006638:	5190      	str	r0, [r2, r6]
1000663a:	3604      	adds	r6, #4
1000663c:	5190      	str	r0, [r2, r6]
1000663e:	3604      	adds	r6, #4
10006640:	5190      	str	r0, [r2, r6]
10006642:	3604      	adds	r6, #4
10006644:	5190      	str	r0, [r2, r6]
10006646:	3604      	adds	r6, #4
10006648:	5190      	str	r0, [r2, r6]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
1000664a:	464e      	mov	r6, r9
1000664c:	2e0c      	cmp	r6, #12
1000664e:	d03e      	beq.n	100066ce <_Z7InfoRowv+0xffe>
	Text[x] = ch;
10006650:	4656      	mov	r6, sl
10006652:	630e      	str	r6, [r1, #48]	; 0x30
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006654:	26c0      	movs	r6, #192	; 0xc0
10006656:	0076      	lsls	r6, r6, #1
10006658:	5190      	str	r0, [r2, r6]
1000665a:	3604      	adds	r6, #4
1000665c:	5190      	str	r0, [r2, r6]
1000665e:	3604      	adds	r6, #4
10006660:	5190      	str	r0, [r2, r6]
10006662:	3604      	adds	r6, #4
10006664:	5190      	str	r0, [r2, r6]
10006666:	3604      	adds	r6, #4
10006668:	5190      	str	r0, [r2, r6]
1000666a:	3604      	adds	r6, #4
1000666c:	5190      	str	r0, [r2, r6]
1000666e:	3604      	adds	r6, #4
10006670:	5190      	str	r0, [r2, r6]
10006672:	3604      	adds	r6, #4
10006674:	5190      	str	r0, [r2, r6]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006676:	464e      	mov	r6, r9
10006678:	2e0d      	cmp	r6, #13
1000667a:	d028      	beq.n	100066ce <_Z7InfoRowv+0xffe>
	Text[x] = ch;
1000667c:	4656      	mov	r6, sl
1000667e:	634e      	str	r6, [r1, #52]	; 0x34
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006680:	26d0      	movs	r6, #208	; 0xd0
10006682:	0076      	lsls	r6, r6, #1
10006684:	5190      	str	r0, [r2, r6]
10006686:	3604      	adds	r6, #4
10006688:	5190      	str	r0, [r2, r6]
1000668a:	3604      	adds	r6, #4
1000668c:	5190      	str	r0, [r2, r6]
1000668e:	3604      	adds	r6, #4
10006690:	5190      	str	r0, [r2, r6]
10006692:	3604      	adds	r6, #4
10006694:	5190      	str	r0, [r2, r6]
10006696:	3604      	adds	r6, #4
10006698:	5190      	str	r0, [r2, r6]
1000669a:	3604      	adds	r6, #4
1000669c:	5190      	str	r0, [r2, r6]
1000669e:	3604      	adds	r6, #4
100066a0:	5190      	str	r0, [r2, r6]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100066a2:	464e      	mov	r6, r9
100066a4:	2e0e      	cmp	r6, #14
100066a6:	d012      	beq.n	100066ce <_Z7InfoRowv+0xffe>
	Text[x] = ch;
100066a8:	4656      	mov	r6, sl
100066aa:	638e      	str	r6, [r1, #56]	; 0x38
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100066ac:	21e0      	movs	r1, #224	; 0xe0
100066ae:	0049      	lsls	r1, r1, #1
100066b0:	5050      	str	r0, [r2, r1]
100066b2:	3104      	adds	r1, #4
100066b4:	5050      	str	r0, [r2, r1]
100066b6:	3104      	adds	r1, #4
100066b8:	5050      	str	r0, [r2, r1]
100066ba:	3104      	adds	r1, #4
100066bc:	5050      	str	r0, [r2, r1]
100066be:	3104      	adds	r1, #4
100066c0:	5050      	str	r0, [r2, r1]
100066c2:	3104      	adds	r1, #4
100066c4:	5050      	str	r0, [r2, r1]
100066c6:	3104      	adds	r1, #4
100066c8:	5050      	str	r0, [r2, r1]
100066ca:	3104      	adds	r1, #4
100066cc:	5050      	str	r0, [r2, r1]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100066ce:	2203      	movs	r2, #3
100066d0:	4661      	mov	r1, ip
100066d2:	4391      	bics	r1, r2
100066d4:	185b      	adds	r3, r3, r1
100066d6:	b2db      	uxtb	r3, r3
100066d8:	4561      	cmp	r1, ip
100066da:	d018      	beq.n	1000670e <_Z7InfoRowv+0x103e>
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100066dc:	2100      	movs	r1, #0
	Text[x] = ch;
100066de:	2020      	movs	r0, #32
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100066e0:	00da      	lsls	r2, r3, #3
100066e2:	18a2      	adds	r2, r4, r2
	Text[x] = ch;
100066e4:	54e8      	strb	r0, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100066e6:	6011      	str	r1, [r2, #0]
100066e8:	6051      	str	r1, [r2, #4]
	InfoX = x + 1;	
100066ea:	1c5a      	adds	r2, r3, #1
100066ec:	b2d2      	uxtb	r2, r2
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100066ee:	2a3d      	cmp	r2, #61	; 0x3d
100066f0:	d00d      	beq.n	1000670e <_Z7InfoRowv+0x103e>
	Text[x] = ch;
100066f2:	54a8      	strb	r0, [r5, r2]
	InfoX = x + 1;	
100066f4:	3302      	adds	r3, #2
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100066f6:	00d2      	lsls	r2, r2, #3
100066f8:	18a2      	adds	r2, r4, r2
	InfoX = x + 1;	
100066fa:	b2db      	uxtb	r3, r3
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100066fc:	6011      	str	r1, [r2, #0]
100066fe:	6051      	str	r1, [r2, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006700:	2b3d      	cmp	r3, #61	; 0x3d
10006702:	d004      	beq.n	1000670e <_Z7InfoRowv+0x103e>
	Text[x] = ch;
10006704:	54e8      	strb	r0, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006706:	00db      	lsls	r3, r3, #3
10006708:	18e3      	adds	r3, r4, r3
1000670a:	6019      	str	r1, [r3, #0]
1000670c:	6059      	str	r1, [r3, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
1000670e:	233d      	movs	r3, #61	; 0x3d
10006710:	4a1f      	ldr	r2, [pc, #124]	; (10006790 <_Z7InfoRowv+0x10c0>)
10006712:	7013      	strb	r3, [r2, #0]
	x += 7; InfoPos(x);

	// display rank
	InfoDispText(RankTxt, COLTIT);
	x += 6; InfoPos(x);
	DecNum(NumBuf, Rank);
10006714:	4b20      	ldr	r3, [pc, #128]	; (10006798 <_Z7InfoRowv+0x10c8>)
10006716:	4821      	ldr	r0, [pc, #132]	; (1000679c <_Z7InfoRowv+0x10cc>)
10006718:	6819      	ldr	r1, [r3, #0]
1000671a:	f002 f9c3 	bl	10008aa4 <_Z6DecNumPcl>
	while ((ch = *txt++) != 0)
1000671e:	4b1f      	ldr	r3, [pc, #124]	; (1000679c <_Z7InfoRowv+0x10cc>)
10006720:	781a      	ldrb	r2, [r3, #0]
10006722:	2a00      	cmp	r2, #0
10006724:	d100      	bne.n	10006728 <_Z7InfoRowv+0x1058>
10006726:	e2c0      	b.n	10006caa <_Z7InfoRowv+0x15da>
10006728:	0019      	movs	r1, r3
1000672a:	1c4e      	adds	r6, r1, #1
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
1000672c:	2101      	movs	r1, #1
1000672e:	4b18      	ldr	r3, [pc, #96]	; (10006790 <_Z7InfoRowv+0x10c0>)
10006730:	4249      	negs	r1, r1
10006732:	781b      	ldrb	r3, [r3, #0]
	Text[x] = ch;
10006734:	54ea      	strb	r2, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006736:	00da      	lsls	r2, r3, #3
10006738:	18a2      	adds	r2, r4, r2
	while ((ch = *txt++) != 0)
1000673a:	3601      	adds	r6, #1
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
1000673c:	6011      	str	r1, [r2, #0]
1000673e:	6051      	str	r1, [r2, #4]
	while ((ch = *txt++) != 0)
10006740:	1e72      	subs	r2, r6, #1
10006742:	7812      	ldrb	r2, [r2, #0]
	InfoX = x + 1;	
10006744:	3301      	adds	r3, #1
10006746:	b2db      	uxtb	r3, r3
	while ((ch = *txt++) != 0)
10006748:	2a00      	cmp	r2, #0
1000674a:	d1f3      	bne.n	10006734 <_Z7InfoRowv+0x1064>
1000674c:	4a10      	ldr	r2, [pc, #64]	; (10006790 <_Z7InfoRowv+0x10c0>)
1000674e:	7013      	strb	r3, [r2, #0]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006750:	2b40      	cmp	r3, #64	; 0x40
10006752:	d855      	bhi.n	10006800 <_Z7InfoRowv+0x1130>
10006754:	2240      	movs	r2, #64	; 0x40
10006756:	2103      	movs	r1, #3
10006758:	1ad2      	subs	r2, r2, r3
1000675a:	b2d2      	uxtb	r2, r2
1000675c:	18e8      	adds	r0, r5, r3
1000675e:	4291      	cmp	r1, r2
10006760:	d300      	bcc.n	10006764 <_Z7InfoRowv+0x1094>
10006762:	e225      	b.n	10006bb0 <_Z7InfoRowv+0x14e0>
10006764:	4208      	tst	r0, r1
10006766:	d000      	beq.n	1000676a <_Z7InfoRowv+0x109a>
10006768:	e222      	b.n	10006bb0 <_Z7InfoRowv+0x14e0>
1000676a:	2241      	movs	r2, #65	; 0x41
1000676c:	1ad2      	subs	r2, r2, r3
1000676e:	b2d2      	uxtb	r2, r2
10006770:	4694      	mov	ip, r2
10006772:	0892      	lsrs	r2, r2, #2
10006774:	4691      	mov	r9, r2
	Text[x] = ch;
10006776:	4907      	ldr	r1, [pc, #28]	; (10006794 <_Z7InfoRowv+0x10c4>)
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006778:	4698      	mov	r8, r3
	Text[x] = ch;
1000677a:	468a      	mov	sl, r1
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
1000677c:	464e      	mov	r6, r9
1000677e:	2100      	movs	r1, #0
10006780:	00da      	lsls	r2, r3, #3
10006782:	18a2      	adds	r2, r4, r2
10006784:	e00c      	b.n	100067a0 <_Z7InfoRowv+0x10d0>
10006786:	46c0      	nop			; (mov r8, r8)
10006788:	1003ff4c 	.word	0x1003ff4c
1000678c:	fcfcfcfc 	.word	0xfcfcfcfc
10006790:	2003e33c 	.word	0x2003e33c
10006794:	20202020 	.word	0x20202020
10006798:	2001b46c 	.word	0x2001b46c
1000679c:	2001b458 	.word	0x2001b458
	Text[x] = ch;
100067a0:	4653      	mov	r3, sl
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100067a2:	3701      	adds	r7, #1
100067a4:	b2ff      	uxtb	r7, r7
	Text[x] = ch;
100067a6:	c008      	stmia	r0!, {r3}
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100067a8:	6011      	str	r1, [r2, #0]
100067aa:	6051      	str	r1, [r2, #4]
100067ac:	6091      	str	r1, [r2, #8]
100067ae:	60d1      	str	r1, [r2, #12]
100067b0:	6111      	str	r1, [r2, #16]
100067b2:	6151      	str	r1, [r2, #20]
100067b4:	6191      	str	r1, [r2, #24]
100067b6:	61d1      	str	r1, [r2, #28]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100067b8:	3220      	adds	r2, #32
100067ba:	42be      	cmp	r6, r7
100067bc:	d1f0      	bne.n	100067a0 <_Z7InfoRowv+0x10d0>
100067be:	2203      	movs	r2, #3
100067c0:	4660      	mov	r0, ip
100067c2:	4643      	mov	r3, r8
100067c4:	4390      	bics	r0, r2
100067c6:	18c3      	adds	r3, r0, r3
100067c8:	b2db      	uxtb	r3, r3
100067ca:	4560      	cmp	r0, ip
100067cc:	d017      	beq.n	100067fe <_Z7InfoRowv+0x112e>
	Text[x] = ch;
100067ce:	2020      	movs	r0, #32
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100067d0:	00da      	lsls	r2, r3, #3
100067d2:	18a2      	adds	r2, r4, r2
	Text[x] = ch;
100067d4:	54e8      	strb	r0, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100067d6:	6011      	str	r1, [r2, #0]
100067d8:	6051      	str	r1, [r2, #4]
	InfoX = x + 1;	
100067da:	1c5a      	adds	r2, r3, #1
100067dc:	b2d2      	uxtb	r2, r2
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100067de:	2a41      	cmp	r2, #65	; 0x41
100067e0:	d00d      	beq.n	100067fe <_Z7InfoRowv+0x112e>
	Text[x] = ch;
100067e2:	54a8      	strb	r0, [r5, r2]
	InfoX = x + 1;	
100067e4:	3302      	adds	r3, #2
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100067e6:	00d2      	lsls	r2, r2, #3
100067e8:	18a2      	adds	r2, r4, r2
	InfoX = x + 1;	
100067ea:	b2db      	uxtb	r3, r3
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100067ec:	6011      	str	r1, [r2, #0]
100067ee:	6051      	str	r1, [r2, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100067f0:	2b41      	cmp	r3, #65	; 0x41
100067f2:	d004      	beq.n	100067fe <_Z7InfoRowv+0x112e>
	Text[x] = ch;
100067f4:	54e8      	strb	r0, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100067f6:	00db      	lsls	r3, r3, #3
100067f8:	18e3      	adds	r3, r4, r3
100067fa:	6019      	str	r1, [r3, #0]
100067fc:	6059      	str	r1, [r3, #4]
	InfoX = x + 1;	
100067fe:	2341      	movs	r3, #65	; 0x41
	while ((ch = *txt++) != 0)
10006800:	2243      	movs	r2, #67	; 0x43
10006802:	49dd      	ldr	r1, [pc, #884]	; (10006b78 <_Z7InfoRowv+0x14a8>)
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006804:	4edd      	ldr	r6, [pc, #884]	; (10006b7c <_Z7InfoRowv+0x14ac>)
10006806:	3101      	adds	r1, #1
	Text[x] = ch;
10006808:	54ea      	strb	r2, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
1000680a:	00da      	lsls	r2, r3, #3
1000680c:	18a2      	adds	r2, r4, r2
	while ((ch = *txt++) != 0)
1000680e:	3101      	adds	r1, #1
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006810:	6016      	str	r6, [r2, #0]
10006812:	6056      	str	r6, [r2, #4]
	while ((ch = *txt++) != 0)
10006814:	1e4a      	subs	r2, r1, #1
10006816:	7812      	ldrb	r2, [r2, #0]
10006818:	0018      	movs	r0, r3
	InfoX = x + 1;	
1000681a:	3301      	adds	r3, #1
1000681c:	b2db      	uxtb	r3, r3
	while ((ch = *txt++) != 0)
1000681e:	2a00      	cmp	r2, #0
10006820:	d1f2      	bne.n	10006808 <_Z7InfoRowv+0x1138>
10006822:	4ad7      	ldr	r2, [pc, #860]	; (10006b80 <_Z7InfoRowv+0x14b0>)
10006824:	7013      	strb	r3, [r2, #0]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006826:	2b47      	cmp	r3, #71	; 0x47
10006828:	d84a      	bhi.n	100068c0 <_Z7InfoRowv+0x11f0>
1000682a:	2103      	movs	r1, #3
1000682c:	18ee      	adds	r6, r5, r3
1000682e:	420e      	tst	r6, r1
10006830:	d000      	beq.n	10006834 <_Z7InfoRowv+0x1164>
10006832:	e1cd      	b.n	10006bd0 <_Z7InfoRowv+0x1500>
10006834:	2247      	movs	r2, #71	; 0x47
10006836:	1ad2      	subs	r2, r2, r3
10006838:	b2d2      	uxtb	r2, r2
1000683a:	4291      	cmp	r1, r2
1000683c:	d300      	bcc.n	10006840 <_Z7InfoRowv+0x1170>
1000683e:	e1c7      	b.n	10006bd0 <_Z7InfoRowv+0x1500>
10006840:	2248      	movs	r2, #72	; 0x48
10006842:	1ad2      	subs	r2, r2, r3
10006844:	b2d2      	uxtb	r2, r2
10006846:	4694      	mov	ip, r2
10006848:	0892      	lsrs	r2, r2, #2
1000684a:	4690      	mov	r8, r2
	Text[x] = ch;
1000684c:	48cd      	ldr	r0, [pc, #820]	; (10006b84 <_Z7InfoRowv+0x14b4>)
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
1000684e:	2100      	movs	r1, #0
	Text[x] = ch;
10006850:	4681      	mov	r9, r0
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006852:	469a      	mov	sl, r3
10006854:	2000      	movs	r0, #0
10006856:	4647      	mov	r7, r8
10006858:	00da      	lsls	r2, r3, #3
1000685a:	18a2      	adds	r2, r4, r2
	Text[x] = ch;
1000685c:	464b      	mov	r3, r9
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
1000685e:	3101      	adds	r1, #1
10006860:	b2c9      	uxtb	r1, r1
	Text[x] = ch;
10006862:	c608      	stmia	r6!, {r3}
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006864:	6010      	str	r0, [r2, #0]
10006866:	6050      	str	r0, [r2, #4]
10006868:	6090      	str	r0, [r2, #8]
1000686a:	60d0      	str	r0, [r2, #12]
1000686c:	6110      	str	r0, [r2, #16]
1000686e:	6150      	str	r0, [r2, #20]
10006870:	6190      	str	r0, [r2, #24]
10006872:	61d0      	str	r0, [r2, #28]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006874:	3220      	adds	r2, #32
10006876:	42b9      	cmp	r1, r7
10006878:	d1f0      	bne.n	1000685c <_Z7InfoRowv+0x118c>
1000687a:	2203      	movs	r2, #3
1000687c:	4661      	mov	r1, ip
1000687e:	4653      	mov	r3, sl
10006880:	4391      	bics	r1, r2
10006882:	185b      	adds	r3, r3, r1
10006884:	b2db      	uxtb	r3, r3
10006886:	4561      	cmp	r1, ip
10006888:	d017      	beq.n	100068ba <_Z7InfoRowv+0x11ea>
	Text[x] = ch;
1000688a:	2120      	movs	r1, #32
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
1000688c:	00da      	lsls	r2, r3, #3
1000688e:	18a2      	adds	r2, r4, r2
	Text[x] = ch;
10006890:	54e9      	strb	r1, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006892:	6010      	str	r0, [r2, #0]
10006894:	6050      	str	r0, [r2, #4]
	InfoX = x + 1;	
10006896:	1c5a      	adds	r2, r3, #1
10006898:	b2d2      	uxtb	r2, r2
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
1000689a:	2a48      	cmp	r2, #72	; 0x48
1000689c:	d00d      	beq.n	100068ba <_Z7InfoRowv+0x11ea>
	Text[x] = ch;
1000689e:	54a9      	strb	r1, [r5, r2]
	InfoX = x + 1;	
100068a0:	3302      	adds	r3, #2
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100068a2:	00d2      	lsls	r2, r2, #3
100068a4:	18a2      	adds	r2, r4, r2
	InfoX = x + 1;	
100068a6:	b2db      	uxtb	r3, r3
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100068a8:	6010      	str	r0, [r2, #0]
100068aa:	6050      	str	r0, [r2, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100068ac:	2b48      	cmp	r3, #72	; 0x48
100068ae:	d004      	beq.n	100068ba <_Z7InfoRowv+0x11ea>
	Text[x] = ch;
100068b0:	54e9      	strb	r1, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100068b2:	00db      	lsls	r3, r3, #3
100068b4:	18e3      	adds	r3, r4, r3
100068b6:	6018      	str	r0, [r3, #0]
100068b8:	6058      	str	r0, [r3, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100068ba:	2348      	movs	r3, #72	; 0x48
100068bc:	4ab0      	ldr	r2, [pc, #704]	; (10006b80 <_Z7InfoRowv+0x14b0>)
100068be:	7013      	strb	r3, [r2, #0]
100068c0:	4ab1      	ldr	r2, [pc, #708]	; (10006b88 <_Z7InfoRowv+0x14b8>)
	Text[x] = ch;
100068c2:	49b0      	ldr	r1, [pc, #704]	; (10006b84 <_Z7InfoRowv+0x14b4>)
100068c4:	9202      	str	r2, [sp, #8]
100068c6:	4ab1      	ldr	r2, [pc, #708]	; (10006b8c <_Z7InfoRowv+0x14bc>)
	InfoDispText(NumBuf, COLVAL);
	x += 4; InfoPos(x);

	// display check
	InfoDispText(CheckTxt, COLTIT);
	x += 7; InfoPos(x);
100068c8:	2048      	movs	r0, #72	; 0x48
100068ca:	9201      	str	r2, [sp, #4]
	Text[x] = ch;
100068cc:	2220      	movs	r2, #32
100068ce:	468a      	mov	sl, r1
100068d0:	4693      	mov	fp, r2
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100068d2:	2200      	movs	r2, #0
	int i;
	for (i = 0; i < CHECKNUM; i++)
	{
		InfoDispChar(CheckOK[i] ? 4 : 2, CheckCol[i]);
100068d4:	9902      	ldr	r1, [sp, #8]
100068d6:	7809      	ldrb	r1, [r1, #0]
100068d8:	1e4e      	subs	r6, r1, #1
100068da:	41b1      	sbcs	r1, r6
100068dc:	2602      	movs	r6, #2
100068de:	4249      	negs	r1, r1
100068e0:	4031      	ands	r1, r6
100068e2:	9e01      	ldr	r6, [sp, #4]
100068e4:	3102      	adds	r1, #2
100068e6:	7836      	ldrb	r6, [r6, #0]
	Text[x] = ch;
100068e8:	54e9      	strb	r1, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100068ea:	0231      	lsls	r1, r6, #8
100068ec:	4331      	orrs	r1, r6
100068ee:	0437      	lsls	r7, r6, #16
100068f0:	4339      	orrs	r1, r7
100068f2:	0636      	lsls	r6, r6, #24
100068f4:	4331      	orrs	r1, r6
100068f6:	00de      	lsls	r6, r3, #3
100068f8:	19a6      	adds	r6, r4, r6
100068fa:	6031      	str	r1, [r6, #0]
100068fc:	6071      	str	r1, [r6, #4]
		x += 2; InfoPos(x);
100068fe:	1c86      	adds	r6, r0, #2
	InfoX = x + 1;	
10006900:	1c59      	adds	r1, r3, #1
		x += 2; InfoPos(x);
10006902:	46b1      	mov	r9, r6
	InfoX = x + 1;	
10006904:	b2c9      	uxtb	r1, r1
		x += 2; InfoPos(x);
10006906:	b2f6      	uxtb	r6, r6
10006908:	46b4      	mov	ip, r6
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
1000690a:	428e      	cmp	r6, r1
1000690c:	d800      	bhi.n	10006910 <_Z7InfoRowv+0x1240>
1000690e:	e0ba      	b.n	10006a86 <_Z7InfoRowv+0x13b6>
10006910:	1ac3      	subs	r3, r0, r3
10006912:	b2df      	uxtb	r7, r3
10006914:	2303      	movs	r3, #3
10006916:	186e      	adds	r6, r5, r1
10006918:	421e      	tst	r6, r3
1000691a:	d000      	beq.n	1000691e <_Z7InfoRowv+0x124e>
1000691c:	e0a4      	b.n	10006a68 <_Z7InfoRowv+0x1398>
1000691e:	42bb      	cmp	r3, r7
10006920:	d300      	bcc.n	10006924 <_Z7InfoRowv+0x1254>
10006922:	e0a1      	b.n	10006a68 <_Z7InfoRowv+0x1398>
10006924:	3701      	adds	r7, #1
10006926:	b2ff      	uxtb	r7, r7
10006928:	08bb      	lsrs	r3, r7, #2
1000692a:	4698      	mov	r8, r3
1000692c:	9703      	str	r7, [sp, #12]
1000692e:	000f      	movs	r7, r1
10006930:	00cb      	lsls	r3, r1, #3
10006932:	2000      	movs	r0, #0
10006934:	4641      	mov	r1, r8
10006936:	46b8      	mov	r8, r7
10006938:	18e3      	adds	r3, r4, r3
	Text[x] = ch;
1000693a:	4657      	mov	r7, sl
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
1000693c:	3001      	adds	r0, #1
1000693e:	b2c0      	uxtb	r0, r0
	Text[x] = ch;
10006940:	c680      	stmia	r6!, {r7}
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006942:	601a      	str	r2, [r3, #0]
10006944:	605a      	str	r2, [r3, #4]
10006946:	609a      	str	r2, [r3, #8]
10006948:	60da      	str	r2, [r3, #12]
1000694a:	611a      	str	r2, [r3, #16]
1000694c:	615a      	str	r2, [r3, #20]
1000694e:	619a      	str	r2, [r3, #24]
10006950:	61da      	str	r2, [r3, #28]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006952:	3320      	adds	r3, #32
10006954:	4288      	cmp	r0, r1
10006956:	d1f0      	bne.n	1000693a <_Z7InfoRowv+0x126a>
10006958:	9f03      	ldr	r7, [sp, #12]
1000695a:	2003      	movs	r0, #3
1000695c:	003b      	movs	r3, r7
1000695e:	4641      	mov	r1, r8
10006960:	4383      	bics	r3, r0
10006962:	18c9      	adds	r1, r1, r3
10006964:	b2c9      	uxtb	r1, r1
10006966:	42bb      	cmp	r3, r7
10006968:	d018      	beq.n	1000699c <_Z7InfoRowv+0x12cc>
	Text[x] = ch;
1000696a:	465b      	mov	r3, fp
1000696c:	546b      	strb	r3, [r5, r1]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
1000696e:	00cb      	lsls	r3, r1, #3
10006970:	18e3      	adds	r3, r4, r3
10006972:	601a      	str	r2, [r3, #0]
10006974:	605a      	str	r2, [r3, #4]
	InfoX = x + 1;	
10006976:	1c4b      	adds	r3, r1, #1
10006978:	b2db      	uxtb	r3, r3
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
1000697a:	459c      	cmp	ip, r3
1000697c:	d90e      	bls.n	1000699c <_Z7InfoRowv+0x12cc>
	Text[x] = ch;
1000697e:	4658      	mov	r0, fp
	InfoX = x + 1;	
10006980:	3102      	adds	r1, #2
	Text[x] = ch;
10006982:	54e8      	strb	r0, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006984:	00db      	lsls	r3, r3, #3
10006986:	18e3      	adds	r3, r4, r3
	InfoX = x + 1;	
10006988:	b2c9      	uxtb	r1, r1
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
1000698a:	601a      	str	r2, [r3, #0]
1000698c:	605a      	str	r2, [r3, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
1000698e:	458c      	cmp	ip, r1
10006990:	d904      	bls.n	1000699c <_Z7InfoRowv+0x12cc>
	Text[x] = ch;
10006992:	5468      	strb	r0, [r5, r1]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006994:	00c9      	lsls	r1, r1, #3
10006996:	1861      	adds	r1, r4, r1
10006998:	600a      	str	r2, [r1, #0]
1000699a:	604a      	str	r2, [r1, #4]
	InfoX = x + 1;	
1000699c:	464b      	mov	r3, r9
1000699e:	b2db      	uxtb	r3, r3
	for (i = 0; i < CHECKNUM; i++)
100069a0:	9902      	ldr	r1, [sp, #8]
100069a2:	3101      	adds	r1, #1
100069a4:	9102      	str	r1, [sp, #8]
100069a6:	9901      	ldr	r1, [sp, #4]
100069a8:	3101      	adds	r1, #1
100069aa:	9101      	str	r1, [sp, #4]
100069ac:	4661      	mov	r1, ip
100069ae:	294e      	cmp	r1, #78	; 0x4e
100069b0:	d051      	beq.n	10006a56 <_Z7InfoRowv+0x1386>
100069b2:	4660      	mov	r0, ip
100069b4:	e78e      	b.n	100068d4 <_Z7InfoRowv+0x1204>
100069b6:	2203      	movs	r2, #3
100069b8:	0031      	movs	r1, r6
100069ba:	4391      	bics	r1, r2
100069bc:	185b      	adds	r3, r3, r1
100069be:	b2db      	uxtb	r3, r3
100069c0:	428e      	cmp	r6, r1
100069c2:	d101      	bne.n	100069c8 <_Z7InfoRowv+0x12f8>
100069c4:	f7fe ff85 	bl	100058d2 <_Z7InfoRowv+0x202>
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100069c8:	2100      	movs	r1, #0
	Text[x] = ch;
100069ca:	2020      	movs	r0, #32
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100069cc:	00da      	lsls	r2, r3, #3
100069ce:	18a2      	adds	r2, r4, r2
	Text[x] = ch;
100069d0:	54e8      	strb	r0, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100069d2:	6011      	str	r1, [r2, #0]
100069d4:	6051      	str	r1, [r2, #4]
	InfoX = x + 1;	
100069d6:	1c5a      	adds	r2, r3, #1
100069d8:	b2d2      	uxtb	r2, r2
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100069da:	2a10      	cmp	r2, #16
100069dc:	d101      	bne.n	100069e2 <_Z7InfoRowv+0x1312>
100069de:	f7fe ff78 	bl	100058d2 <_Z7InfoRowv+0x202>
	Text[x] = ch;
100069e2:	54a8      	strb	r0, [r5, r2]
	InfoX = x + 1;	
100069e4:	3302      	adds	r3, #2
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100069e6:	00d2      	lsls	r2, r2, #3
100069e8:	18a2      	adds	r2, r4, r2
	InfoX = x + 1;	
100069ea:	b2db      	uxtb	r3, r3
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100069ec:	6011      	str	r1, [r2, #0]
100069ee:	6051      	str	r1, [r2, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
100069f0:	2b10      	cmp	r3, #16
100069f2:	d101      	bne.n	100069f8 <_Z7InfoRowv+0x1328>
100069f4:	f7fe ff6d 	bl	100058d2 <_Z7InfoRowv+0x202>
	Text[x] = ch;
100069f8:	54e8      	strb	r0, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
100069fa:	00db      	lsls	r3, r3, #3
100069fc:	18e3      	adds	r3, r4, r3
100069fe:	6019      	str	r1, [r3, #0]
10006a00:	6059      	str	r1, [r3, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006a02:	f7fe ff66 	bl	100058d2 <_Z7InfoRowv+0x202>
10006a06:	2203      	movs	r2, #3
10006a08:	4661      	mov	r1, ip
10006a0a:	4391      	bics	r1, r2
10006a0c:	185b      	adds	r3, r3, r1
10006a0e:	b2db      	uxtb	r3, r3
10006a10:	4561      	cmp	r1, ip
10006a12:	d101      	bne.n	10006a18 <_Z7InfoRowv+0x1348>
10006a14:	f7ff fbbf 	bl	10006196 <_Z7InfoRowv+0xac6>
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006a18:	2100      	movs	r1, #0
	Text[x] = ch;
10006a1a:	2020      	movs	r0, #32
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006a1c:	00da      	lsls	r2, r3, #3
10006a1e:	18a2      	adds	r2, r4, r2
	Text[x] = ch;
10006a20:	54e8      	strb	r0, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006a22:	6011      	str	r1, [r2, #0]
10006a24:	6051      	str	r1, [r2, #4]
	InfoX = x + 1;	
10006a26:	1c5a      	adds	r2, r3, #1
10006a28:	b2d2      	uxtb	r2, r2
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006a2a:	2a30      	cmp	r2, #48	; 0x30
10006a2c:	d101      	bne.n	10006a32 <_Z7InfoRowv+0x1362>
10006a2e:	f7ff fbb2 	bl	10006196 <_Z7InfoRowv+0xac6>
	Text[x] = ch;
10006a32:	54a8      	strb	r0, [r5, r2]
	InfoX = x + 1;	
10006a34:	3302      	adds	r3, #2
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006a36:	00d2      	lsls	r2, r2, #3
10006a38:	18a2      	adds	r2, r4, r2
	InfoX = x + 1;	
10006a3a:	b2db      	uxtb	r3, r3
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006a3c:	6011      	str	r1, [r2, #0]
10006a3e:	6051      	str	r1, [r2, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006a40:	2b30      	cmp	r3, #48	; 0x30
10006a42:	d101      	bne.n	10006a48 <_Z7InfoRowv+0x1378>
10006a44:	f7ff fba7 	bl	10006196 <_Z7InfoRowv+0xac6>
	Text[x] = ch;
10006a48:	54e8      	strb	r0, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006a4a:	00db      	lsls	r3, r3, #3
10006a4c:	18e3      	adds	r3, r4, r3
10006a4e:	6019      	str	r1, [r3, #0]
10006a50:	6059      	str	r1, [r3, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006a52:	f7ff fba0 	bl	10006196 <_Z7InfoRowv+0xac6>
10006a56:	4a4a      	ldr	r2, [pc, #296]	; (10006b80 <_Z7InfoRowv+0x14b0>)
10006a58:	7013      	strb	r3, [r2, #0]
	}
}
10006a5a:	b005      	add	sp, #20
10006a5c:	bcf0      	pop	{r4, r5, r6, r7}
10006a5e:	46bb      	mov	fp, r7
10006a60:	46b2      	mov	sl, r6
10006a62:	46a9      	mov	r9, r5
10006a64:	46a0      	mov	r8, r4
10006a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006a68:	4660      	mov	r0, ip
10006a6a:	00cb      	lsls	r3, r1, #3
10006a6c:	18e3      	adds	r3, r4, r3
	Text[x] = ch;
10006a6e:	465f      	mov	r7, fp
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006a70:	3101      	adds	r1, #1
10006a72:	b2c9      	uxtb	r1, r1
	Text[x] = ch;
10006a74:	7037      	strb	r7, [r6, #0]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006a76:	601a      	str	r2, [r3, #0]
10006a78:	605a      	str	r2, [r3, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006a7a:	3601      	adds	r6, #1
10006a7c:	3308      	adds	r3, #8
10006a7e:	4288      	cmp	r0, r1
10006a80:	d1f5      	bne.n	10006a6e <_Z7InfoRowv+0x139e>
10006a82:	4684      	mov	ip, r0
10006a84:	e78a      	b.n	1000699c <_Z7InfoRowv+0x12cc>
10006a86:	000b      	movs	r3, r1
10006a88:	e78a      	b.n	100069a0 <_Z7InfoRowv+0x12d0>
	Text[x] = ch;
10006a8a:	2020      	movs	r0, #32
10006a8c:	4684      	mov	ip, r0
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006a8e:	2000      	movs	r0, #0
10006a90:	1c59      	adds	r1, r3, #1
10006a92:	00db      	lsls	r3, r3, #3
10006a94:	b2c9      	uxtb	r1, r1
10006a96:	18e3      	adds	r3, r4, r3
	Text[x] = ch;
10006a98:	4666      	mov	r6, ip
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006a9a:	3101      	adds	r1, #1
10006a9c:	b2c9      	uxtb	r1, r1
	Text[x] = ch;
10006a9e:	7016      	strb	r6, [r2, #0]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006aa0:	6018      	str	r0, [r3, #0]
10006aa2:	6058      	str	r0, [r3, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006aa4:	3201      	adds	r2, #1
10006aa6:	3308      	adds	r3, #8
10006aa8:	292b      	cmp	r1, #43	; 0x2b
10006aaa:	d1f5      	bne.n	10006a98 <_Z7InfoRowv+0x13c8>
10006aac:	f7ff fa52 	bl	10005f54 <_Z7InfoRowv+0x884>
	Text[x] = ch;
10006ab0:	2020      	movs	r0, #32
10006ab2:	4684      	mov	ip, r0
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006ab4:	2000      	movs	r0, #0
10006ab6:	00da      	lsls	r2, r3, #3
10006ab8:	18a2      	adds	r2, r4, r2
	Text[x] = ch;
10006aba:	4666      	mov	r6, ip
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006abc:	3301      	adds	r3, #1
10006abe:	b2db      	uxtb	r3, r3
	Text[x] = ch;
10006ac0:	700e      	strb	r6, [r1, #0]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006ac2:	6010      	str	r0, [r2, #0]
10006ac4:	6050      	str	r0, [r2, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006ac6:	3101      	adds	r1, #1
10006ac8:	3208      	adds	r2, #8
10006aca:	2b30      	cmp	r3, #48	; 0x30
10006acc:	d1f5      	bne.n	10006aba <_Z7InfoRowv+0x13ea>
10006ace:	f7ff fb62 	bl	10006196 <_Z7InfoRowv+0xac6>
10006ad2:	003a      	movs	r2, r7
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006ad4:	2000      	movs	r0, #0
	Text[x] = ch;
10006ad6:	2720      	movs	r7, #32
10006ad8:	00d9      	lsls	r1, r3, #3
10006ada:	1861      	adds	r1, r4, r1
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006adc:	3301      	adds	r3, #1
10006ade:	b2db      	uxtb	r3, r3
	Text[x] = ch;
10006ae0:	7017      	strb	r7, [r2, #0]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006ae2:	6008      	str	r0, [r1, #0]
10006ae4:	6048      	str	r0, [r1, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006ae6:	3201      	adds	r2, #1
10006ae8:	3108      	adds	r1, #8
10006aea:	2b37      	cmp	r3, #55	; 0x37
10006aec:	d1f6      	bne.n	10006adc <_Z7InfoRowv+0x140c>
10006aee:	e4a4      	b.n	1000643a <_Z7InfoRowv+0xd6a>
	Text[x] = ch;
10006af0:	2020      	movs	r0, #32
10006af2:	4684      	mov	ip, r0
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006af4:	2000      	movs	r0, #0
10006af6:	00da      	lsls	r2, r3, #3
10006af8:	18a2      	adds	r2, r4, r2
	Text[x] = ch;
10006afa:	4666      	mov	r6, ip
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006afc:	3301      	adds	r3, #1
10006afe:	b2db      	uxtb	r3, r3
	Text[x] = ch;
10006b00:	700e      	strb	r6, [r1, #0]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006b02:	6010      	str	r0, [r2, #0]
10006b04:	6050      	str	r0, [r2, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006b06:	3101      	adds	r1, #1
10006b08:	3208      	adds	r2, #8
10006b0a:	2b3d      	cmp	r3, #61	; 0x3d
10006b0c:	d1f5      	bne.n	10006afa <_Z7InfoRowv+0x142a>
10006b0e:	e5fe      	b.n	1000670e <_Z7InfoRowv+0x103e>
10006b10:	000a      	movs	r2, r1
	Text[x] = ch;
10006b12:	2620      	movs	r6, #32
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006b14:	2100      	movs	r1, #0
10006b16:	1c58      	adds	r0, r3, #1
10006b18:	00db      	lsls	r3, r3, #3
10006b1a:	b2c0      	uxtb	r0, r0
10006b1c:	18e3      	adds	r3, r4, r3
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006b1e:	3001      	adds	r0, #1
10006b20:	b2c0      	uxtb	r0, r0
	Text[x] = ch;
10006b22:	7016      	strb	r6, [r2, #0]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006b24:	6019      	str	r1, [r3, #0]
10006b26:	6059      	str	r1, [r3, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006b28:	3201      	adds	r2, #1
10006b2a:	3308      	adds	r3, #8
10006b2c:	281e      	cmp	r0, #30
10006b2e:	d1f6      	bne.n	10006b1e <_Z7InfoRowv+0x144e>
10006b30:	f7ff f830 	bl	10005b94 <_Z7InfoRowv+0x4c4>
10006b34:	1cba      	adds	r2, r7, #2
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006b36:	2000      	movs	r0, #0
	Text[x] = ch;
10006b38:	2720      	movs	r7, #32
10006b3a:	00db      	lsls	r3, r3, #3
10006b3c:	b2d2      	uxtb	r2, r2
10006b3e:	18e3      	adds	r3, r4, r3
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006b40:	3201      	adds	r2, #1
10006b42:	b2d2      	uxtb	r2, r2
	Text[x] = ch;
10006b44:	700f      	strb	r7, [r1, #0]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006b46:	6018      	str	r0, [r3, #0]
10006b48:	6058      	str	r0, [r3, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006b4a:	3101      	adds	r1, #1
10006b4c:	3308      	adds	r3, #8
10006b4e:	2a24      	cmp	r2, #36	; 0x24
10006b50:	d1f6      	bne.n	10006b40 <_Z7InfoRowv+0x1470>
10006b52:	f7ff f8f1 	bl	10005d38 <_Z7InfoRowv+0x668>
10006b56:	1cb2      	adds	r2, r6, #2
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006b58:	2000      	movs	r0, #0
	Text[x] = ch;
10006b5a:	2620      	movs	r6, #32
10006b5c:	00db      	lsls	r3, r3, #3
10006b5e:	b2d2      	uxtb	r2, r2
10006b60:	18e3      	adds	r3, r4, r3
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006b62:	3201      	adds	r2, #1
10006b64:	b2d2      	uxtb	r2, r2
	Text[x] = ch;
10006b66:	700e      	strb	r6, [r1, #0]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006b68:	6018      	str	r0, [r3, #0]
10006b6a:	6058      	str	r0, [r3, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006b6c:	3101      	adds	r1, #1
10006b6e:	3308      	adds	r3, #8
10006b70:	2a17      	cmp	r2, #23
10006b72:	d1f6      	bne.n	10006b62 <_Z7InfoRowv+0x1492>
10006b74:	f7fe ff3e 	bl	100059f4 <_Z7InfoRowv+0x324>
10006b78:	1003ff5c 	.word	0x1003ff5c
10006b7c:	fcfcfcfc 	.word	0xfcfcfcfc
10006b80:	2003e33c 	.word	0x2003e33c
10006b84:	20202020 	.word	0x20202020
10006b88:	2000f660 	.word	0x2000f660
10006b8c:	20002760 	.word	0x20002760
10006b90:	0002      	movs	r2, r0
	Text[x] = ch;
10006b92:	2620      	movs	r6, #32
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006b94:	2000      	movs	r0, #0
10006b96:	00d9      	lsls	r1, r3, #3
10006b98:	1861      	adds	r1, r4, r1
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006b9a:	3301      	adds	r3, #1
10006b9c:	b2db      	uxtb	r3, r3
	Text[x] = ch;
10006b9e:	7016      	strb	r6, [r2, #0]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006ba0:	6008      	str	r0, [r1, #0]
10006ba2:	6048      	str	r0, [r1, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006ba4:	3201      	adds	r2, #1
10006ba6:	3108      	adds	r1, #8
10006ba8:	2b10      	cmp	r3, #16
10006baa:	d1f6      	bne.n	10006b9a <_Z7InfoRowv+0x14ca>
10006bac:	f7fe fe91 	bl	100058d2 <_Z7InfoRowv+0x202>
	Text[x] = ch;
10006bb0:	2620      	movs	r6, #32
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006bb2:	2100      	movs	r1, #0
10006bb4:	1c5a      	adds	r2, r3, #1
10006bb6:	00db      	lsls	r3, r3, #3
10006bb8:	b2d2      	uxtb	r2, r2
10006bba:	18e3      	adds	r3, r4, r3
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006bbc:	3201      	adds	r2, #1
10006bbe:	b2d2      	uxtb	r2, r2
	Text[x] = ch;
10006bc0:	7006      	strb	r6, [r0, #0]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006bc2:	6019      	str	r1, [r3, #0]
10006bc4:	6059      	str	r1, [r3, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006bc6:	3001      	adds	r0, #1
10006bc8:	3308      	adds	r3, #8
10006bca:	2a42      	cmp	r2, #66	; 0x42
10006bcc:	d1f6      	bne.n	10006bbc <_Z7InfoRowv+0x14ec>
10006bce:	e616      	b.n	100067fe <_Z7InfoRowv+0x112e>
	Text[x] = ch;
10006bd0:	2120      	movs	r1, #32
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006bd2:	2200      	movs	r2, #0
10006bd4:	3002      	adds	r0, #2
10006bd6:	00db      	lsls	r3, r3, #3
10006bd8:	b2c0      	uxtb	r0, r0
10006bda:	18e3      	adds	r3, r4, r3
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006bdc:	3001      	adds	r0, #1
10006bde:	b2c0      	uxtb	r0, r0
	Text[x] = ch;
10006be0:	7031      	strb	r1, [r6, #0]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006be2:	601a      	str	r2, [r3, #0]
10006be4:	605a      	str	r2, [r3, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006be6:	3601      	adds	r6, #1
10006be8:	3308      	adds	r3, #8
10006bea:	2849      	cmp	r0, #73	; 0x49
10006bec:	d1f6      	bne.n	10006bdc <_Z7InfoRowv+0x150c>
10006bee:	e664      	b.n	100068ba <_Z7InfoRowv+0x11ea>
	Text[x] = ch;
10006bf0:	2120      	movs	r1, #32
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006bf2:	2200      	movs	r2, #0
	Text[x] = ch;
10006bf4:	54e9      	strb	r1, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006bf6:	00db      	lsls	r3, r3, #3
10006bf8:	18e3      	adds	r3, r4, r3
10006bfa:	601a      	str	r2, [r3, #0]
10006bfc:	605a      	str	r2, [r3, #4]
	InfoX = x + 1;	
10006bfe:	1c83      	adds	r3, r0, #2
10006c00:	b2db      	uxtb	r3, r3
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006c02:	2b09      	cmp	r3, #9
10006c04:	d101      	bne.n	10006c0a <_Z7InfoRowv+0x153a>
10006c06:	f7fe fdd3 	bl	100057b0 <_Z7InfoRowv+0xe0>
	Text[x] = ch;
10006c0a:	54e9      	strb	r1, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006c0c:	00db      	lsls	r3, r3, #3
10006c0e:	18e3      	adds	r3, r4, r3
10006c10:	601a      	str	r2, [r3, #0]
10006c12:	605a      	str	r2, [r3, #4]
	InfoX = x + 1;	
10006c14:	1cc3      	adds	r3, r0, #3
10006c16:	b2db      	uxtb	r3, r3
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006c18:	2b09      	cmp	r3, #9
10006c1a:	d101      	bne.n	10006c20 <_Z7InfoRowv+0x1550>
10006c1c:	f7fe fdc8 	bl	100057b0 <_Z7InfoRowv+0xe0>
	Text[x] = ch;
10006c20:	54e9      	strb	r1, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006c22:	00db      	lsls	r3, r3, #3
10006c24:	18e3      	adds	r3, r4, r3
10006c26:	601a      	str	r2, [r3, #0]
10006c28:	605a      	str	r2, [r3, #4]
	InfoX = x + 1;	
10006c2a:	1d03      	adds	r3, r0, #4
10006c2c:	b2db      	uxtb	r3, r3
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006c2e:	2b09      	cmp	r3, #9
10006c30:	d101      	bne.n	10006c36 <_Z7InfoRowv+0x1566>
10006c32:	f7fe fdbd 	bl	100057b0 <_Z7InfoRowv+0xe0>
	Text[x] = ch;
10006c36:	54e9      	strb	r1, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006c38:	00db      	lsls	r3, r3, #3
10006c3a:	18e3      	adds	r3, r4, r3
10006c3c:	601a      	str	r2, [r3, #0]
10006c3e:	605a      	str	r2, [r3, #4]
	InfoX = x + 1;	
10006c40:	1d43      	adds	r3, r0, #5
10006c42:	b2db      	uxtb	r3, r3
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006c44:	2b09      	cmp	r3, #9
10006c46:	d101      	bne.n	10006c4c <_Z7InfoRowv+0x157c>
10006c48:	f7fe fdb2 	bl	100057b0 <_Z7InfoRowv+0xe0>
	Text[x] = ch;
10006c4c:	54e9      	strb	r1, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006c4e:	00db      	lsls	r3, r3, #3
10006c50:	18e3      	adds	r3, r4, r3
10006c52:	601a      	str	r2, [r3, #0]
10006c54:	605a      	str	r2, [r3, #4]
	InfoX = x + 1;	
10006c56:	1d83      	adds	r3, r0, #6
10006c58:	b2db      	uxtb	r3, r3
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006c5a:	2b09      	cmp	r3, #9
10006c5c:	d101      	bne.n	10006c62 <_Z7InfoRowv+0x1592>
10006c5e:	f7fe fda7 	bl	100057b0 <_Z7InfoRowv+0xe0>
	Text[x] = ch;
10006c62:	54e9      	strb	r1, [r5, r3]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006c64:	00db      	lsls	r3, r3, #3
10006c66:	18e3      	adds	r3, r4, r3
10006c68:	601a      	str	r2, [r3, #0]
10006c6a:	605a      	str	r2, [r3, #4]
	InfoX = x + 1;	
10006c6c:	1dc3      	adds	r3, r0, #7
10006c6e:	b2db      	uxtb	r3, r3
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006c70:	2b09      	cmp	r3, #9
10006c72:	d101      	bne.n	10006c78 <_Z7InfoRowv+0x15a8>
10006c74:	f7fe fd9c 	bl	100057b0 <_Z7InfoRowv+0xe0>
	Text[x] = ch;
10006c78:	54e9      	strb	r1, [r5, r3]
	InfoX = x + 1;	
10006c7a:	3008      	adds	r0, #8
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006c7c:	00db      	lsls	r3, r3, #3
10006c7e:	18e3      	adds	r3, r4, r3
	InfoX = x + 1;	
10006c80:	b2c0      	uxtb	r0, r0
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006c82:	601a      	str	r2, [r3, #0]
10006c84:	605a      	str	r2, [r3, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006c86:	2809      	cmp	r0, #9
10006c88:	d101      	bne.n	10006c8e <_Z7InfoRowv+0x15be>
10006c8a:	f7fe fd91 	bl	100057b0 <_Z7InfoRowv+0xe0>
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006c8e:	00c3      	lsls	r3, r0, #3
10006c90:	18e3      	adds	r3, r4, r3
	Text[x] = ch;
10006c92:	5429      	strb	r1, [r5, r0]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006c94:	601a      	str	r2, [r3, #0]
10006c96:	605a      	str	r2, [r3, #4]
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006c98:	2807      	cmp	r0, #7
10006c9a:	d001      	beq.n	10006ca0 <_Z7InfoRowv+0x15d0>
10006c9c:	f7fe fd88 	bl	100057b0 <_Z7InfoRowv+0xe0>
	Text[x] = ch;
10006ca0:	7229      	strb	r1, [r5, #8]
	for (ch = 0; ch < 8; ch++) TextCol[x*8+ch] = col;
10006ca2:	6422      	str	r2, [r4, #64]	; 0x40
10006ca4:	6462      	str	r2, [r4, #68]	; 0x44
	while (InfoX < x) InfoDispChar(' ', COL_BLACK);
10006ca6:	f7fe fd83 	bl	100057b0 <_Z7InfoRowv+0xe0>
10006caa:	4b03      	ldr	r3, [pc, #12]	; (10006cb8 <_Z7InfoRowv+0x15e8>)
10006cac:	781b      	ldrb	r3, [r3, #0]
10006cae:	e54f      	b.n	10006750 <_Z7InfoRowv+0x1080>
	u8 x = InfoX;
10006cb0:	4b01      	ldr	r3, [pc, #4]	; (10006cb8 <_Z7InfoRowv+0x15e8>)
10006cb2:	781e      	ldrb	r6, [r3, #0]
10006cb4:	f7fe fda2 	bl	100057fc <_Z7InfoRowv+0x12c>
10006cb8:	2003e33c 	.word	0x2003e33c

10006cbc <_Z9VideoInitm>:

// initialize videomode
void VideoInit(u32 freq)
{
10006cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
10006cbe:	46de      	mov	lr, fp
10006cc0:	4657      	mov	r7, sl
10006cc2:	464e      	mov	r6, r9
10006cc4:	4645      	mov	r5, r8
10006cc6:	0004      	movs	r4, r0
10006cc8:	b5e0      	push	{r5, r6, r7, lr}
	// terminate current driver
	VgaInitReq(NULL);
10006cca:	2000      	movs	r0, #0
{
10006ccc:	b089      	sub	sp, #36	; 0x24
	VgaInitReq(NULL);
10006cce:	f001 fcdf 	bl	10008690 <_Z10VgaInitReqPK6sVmode>

	// setup videomode
	VgaCfgDef(&Cfg); // get default configuration
10006cd2:	4d80      	ldr	r5, [pc, #512]	; (10006ed4 <_Z9VideoInitm+0x218>)
10006cd4:	0028      	movs	r0, r5
10006cd6:	f001 ff8f 	bl	10008bf8 <_Z9VgaCfgDefP7sVgaCfg>
	Cfg.video = &DRV; // video timings
10006cda:	4b7f      	ldr	r3, [pc, #508]	; (10006ed8 <_Z9VideoInitm+0x21c>)
	Cfg.width = WIDTH; // screen width
	Cfg.height = HEIGHT; // screen height
	Cfg.dbly = DBLY; // double Y
	Cfg.freq = freq; // minimal system clock
10006cdc:	60ec      	str	r4, [r5, #12]
	Cfg.video = &DRV; // video timings
10006cde:	60ab      	str	r3, [r5, #8]
	Cfg.width = WIDTH; // screen width
10006ce0:	4b7e      	ldr	r3, [pc, #504]	; (10006edc <_Z9VideoInitm+0x220>)
	Cfg.dbly = DBLY; // double Y
10006ce2:	2400      	movs	r4, #0
	Cfg.width = WIDTH; // screen width
10006ce4:	602b      	str	r3, [r5, #0]
	Cfg.mode[CARLAYER] = LAYERMODE_PERSP2WHITE; // car
10006ce6:	2312      	movs	r3, #18
10006ce8:	756b      	strb	r3, [r5, #21]
	Cfg.mode[GHOST1LAYER] = LAYERMODE_PERSP2WHITE; // ghost 1
10006cea:	4b7d      	ldr	r3, [pc, #500]	; (10006ee0 <_Z9VideoInitm+0x224>)
	Cfg.mode[GHOST2LAYER] = LAYERMODE_PERSP2WHITE; // ghost 2
	VgaCfg(&Cfg, &Vmode); // calculate videomode setup
10006cec:	0028      	movs	r0, r5
	Cfg.mode[GHOST1LAYER] = LAYERMODE_PERSP2WHITE; // ghost 1
10006cee:	82eb      	strh	r3, [r5, #22]
	Cfg.dbly = DBLY; // double Y
10006cf0:	762c      	strb	r4, [r5, #24]
	// initialize base layer 0
	ScreenClear(pScreen);

	// info row
	sStrip* t = ScreenAddStrip(pScreen, TEXTH);
	sSegm* g = ScreenAddSegm(t, WIDTH);
10006cf2:	25a0      	movs	r5, #160	; 0xa0
	VgaCfg(&Cfg, &Vmode); // calculate videomode setup
10006cf4:	4e7b      	ldr	r6, [pc, #492]	; (10006ee4 <_Z9VideoInitm+0x228>)
	sSegm* g = ScreenAddSegm(t, WIDTH);
10006cf6:	00ad      	lsls	r5, r5, #2
	VgaCfg(&Cfg, &Vmode); // calculate videomode setup
10006cf8:	0031      	movs	r1, r6
10006cfa:	f001 ff93 	bl	10008c24 <_Z6VgaCfgPK7sVgaCfgP6sVmode>
	ScreenClear(pScreen);
10006cfe:	4f7a      	ldr	r7, [pc, #488]	; (10006ee8 <_Z9VideoInitm+0x22c>)
10006d00:	6838      	ldr	r0, [r7, #0]
10006d02:	f001 fe4f 	bl	100089a4 <_Z11ScreenClearP7sScreen>
	sStrip* t = ScreenAddStrip(pScreen, TEXTH);
10006d06:	2110      	movs	r1, #16
10006d08:	6838      	ldr	r0, [r7, #0]
10006d0a:	f001 fe53 	bl	100089b4 <_Z14ScreenAddStripP7sScreeni>
	sSegm* g = ScreenAddSegm(t, WIDTH);
10006d0e:	0029      	movs	r1, r5
10006d10:	f001 fe62 	bl	100089d8 <_Z13ScreenAddSegmP6sStripi>
	ScreenSegmGText(g, Text, Font_Copy, 16, COL_BLACK, TextCol, TEXTMAX);
10006d14:	4b75      	ldr	r3, [pc, #468]	; (10006eec <_Z9VideoInitm+0x230>)
10006d16:	4a76      	ldr	r2, [pc, #472]	; (10006ef0 <_Z9VideoInitm+0x234>)
10006d18:	4699      	mov	r9, r3
10006d1a:	2350      	movs	r3, #80	; 0x50
10006d1c:	9302      	str	r3, [sp, #8]
10006d1e:	4b75      	ldr	r3, [pc, #468]	; (10006ef4 <_Z9VideoInitm+0x238>)
10006d20:	4649      	mov	r1, r9
10006d22:	4698      	mov	r8, r3
10006d24:	9301      	str	r3, [sp, #4]
10006d26:	9400      	str	r4, [sp, #0]
10006d28:	2310      	movs	r3, #16
10006d2a:	f001 fe7f 	bl	10008a2c <_Z15ScreenSegmGTextP5sSegmPKvS2_hhS2_i>
	memset(Text, ' ', sizeof(Text));
10006d2e:	2250      	movs	r2, #80	; 0x50
10006d30:	2120      	movs	r1, #32
10006d32:	4648      	mov	r0, r9
10006d34:	f7fa fa3e 	bl	100011b4 <__wrap_memset>
	memset(TextCol, COL_BLACK, sizeof(TextCol));
10006d38:	002a      	movs	r2, r5
10006d3a:	2100      	movs	r1, #0
10006d3c:	4640      	mov	r0, r8
10006d3e:	f7fa fa39 	bl	100011b4 <__wrap_memset>
	InfoClear();

	// skyline
	t = ScreenAddStrip(pScreen, SKYLINEH);
10006d42:	213a      	movs	r1, #58	; 0x3a
10006d44:	6838      	ldr	r0, [r7, #0]
10006d46:	f001 fe35 	bl	100089b4 <_Z14ScreenAddStripP7sScreeni>
	g = ScreenAddSegm(t, WIDTH);
10006d4a:	0029      	movs	r1, r5
10006d4c:	f001 fe44 	bl	100089d8 <_Z13ScreenAddSegmP6sStripi>
	ScreenSegmGraph8(g, SkylineImg_Copy, SKYLINEW);
10006d50:	002a      	movs	r2, r5
10006d52:	4969      	ldr	r1, [pc, #420]	; (10006ef8 <_Z9VideoInitm+0x23c>)
10006d54:	f001 fe5c 	bl	10008a10 <_Z16ScreenSegmGraph8P5sSegmPKvi>

	// terrain
	t = ScreenAddStrip(pScreen, TERRAINH);
10006d58:	21cb      	movs	r1, #203	; 0xcb
10006d5a:	6838      	ldr	r0, [r7, #0]
10006d5c:	0049      	lsls	r1, r1, #1
10006d5e:	f001 fe29 	bl	100089b4 <_Z14ScreenAddStripP7sScreeni>
	g = ScreenAddSegm(t, WIDTH);
10006d62:	0029      	movs	r1, r5
10006d64:	f001 fe38 	bl	100089d8 <_Z13ScreenAddSegmP6sStripi>
	ScreenSegmTilePersp4(g, TileMap, TilesImg_Copy, MatInt, MAPWBITS, MAPHBITS, TILEBITS, HORIZ);
10006d68:	2305      	movs	r3, #5
10006d6a:	2206      	movs	r2, #6
10006d6c:	9303      	str	r3, [sp, #12]
10006d6e:	9202      	str	r2, [sp, #8]
10006d70:	9301      	str	r3, [sp, #4]
10006d72:	9300      	str	r3, [sp, #0]
10006d74:	4a61      	ldr	r2, [pc, #388]	; (10006efc <_Z9VideoInitm+0x240>)
10006d76:	4b62      	ldr	r3, [pc, #392]	; (10006f00 <_Z9VideoInitm+0x244>)
10006d78:	4962      	ldr	r1, [pc, #392]	; (10006f04 <_Z9VideoInitm+0x248>)
10006d7a:	f001 fe6f 	bl	10008a5c <_Z20ScreenSegmTilePersp4P5sSegmPKhS2_PKihhha>

	// car
	LayerPerspSetup(CARLAYER, Car1Img_Copy, &Vmode, CARW2, CARH2, CARWBITS, CARHBITS, 0, Mat2Int);
10006d7e:	4b62      	ldr	r3, [pc, #392]	; (10006f08 <_Z9VideoInitm+0x24c>)
10006d80:	2780      	movs	r7, #128	; 0x80
10006d82:	469b      	mov	fp, r3
10006d84:	9304      	str	r3, [sp, #16]
10006d86:	2307      	movs	r3, #7
10006d88:	007f      	lsls	r7, r7, #1
10006d8a:	0032      	movs	r2, r6
10006d8c:	4699      	mov	r9, r3
10006d8e:	9302      	str	r3, [sp, #8]
10006d90:	9301      	str	r3, [sp, #4]
10006d92:	9700      	str	r7, [sp, #0]
10006d94:	003b      	movs	r3, r7
10006d96:	2001      	movs	r0, #1
10006d98:	495c      	ldr	r1, [pc, #368]	; (10006f0c <_Z9VideoInitm+0x250>)
10006d9a:	9405      	str	r4, [sp, #20]
10006d9c:	9403      	str	r4, [sp, #12]
10006d9e:	f001 fd6d 	bl	1000887c <_Z15LayerPerspSetuphPKhPK6sVmodetthhaPKih>
	LayerSetX(CARLAYER, (WIDTH-CARW2)/2);
10006da2:	21c0      	movs	r1, #192	; 0xc0
10006da4:	2001      	movs	r0, #1
10006da6:	f001 fca7 	bl	100086f8 <_Z9LayerSetXhs>
	LayerSetY(CARLAYER, HEIGHT-CARH2);
10006daa:	21e0      	movs	r1, #224	; 0xe0
10006dac:	2001      	movs	r0, #1
10006dae:	f001 fcf1 	bl	10008794 <_Z9LayerSetYhs>
	LayerOn(CARLAYER);
10006db2:	2001      	movs	r0, #1
10006db4:	f001 fc80 	bl	100086b8 <_Z7LayerOnh>
	Mat2.PrepDrawImg(CARW, CARH, 0, 0, CARW2, CARH2, 0, 0, 0, CARW/2, CARH/2);
10006db8:	4b55      	ldr	r3, [pc, #340]	; (10006f10 <_Z9VideoInitm+0x254>)
10006dba:	2500      	movs	r5, #0
10006dbc:	469a      	mov	sl, r3
10006dbe:	2385      	movs	r3, #133	; 0x85
10006dc0:	05db      	lsls	r3, r3, #23
10006dc2:	4698      	mov	r8, r3
10006dc4:	2280      	movs	r2, #128	; 0x80
10006dc6:	4650      	mov	r0, sl
10006dc8:	9307      	str	r3, [sp, #28]
10006dca:	9306      	str	r3, [sp, #24]
10006dcc:	9702      	str	r7, [sp, #8]
10006dce:	2300      	movs	r3, #0
10006dd0:	9701      	str	r7, [sp, #4]
10006dd2:	2180      	movs	r1, #128	; 0x80
10006dd4:	9505      	str	r5, [sp, #20]
10006dd6:	9504      	str	r5, [sp, #16]
10006dd8:	9503      	str	r5, [sp, #12]
10006dda:	9400      	str	r4, [sp, #0]
10006ddc:	f002 fa1a 	bl	10009214 <_ZN7cMat2Df11PrepDrawImgEiiiiiifffff>
	Mat2.ExportInt(Mat2Int);
10006de0:	4659      	mov	r1, fp
10006de2:	4650      	mov	r0, sl
10006de4:	f002 fb10 	bl	10009408 <_ZNK7cMat2Df9ExportIntEPi>

	// ghost 1
	LayerPerspSetup(GHOST1LAYER, Ghost1Img_Copy, &Vmode, GHOSTW, GHOSTH, GHOSTWBITS, GHOSTHBITS, 0, Mat3Int);
10006de8:	4b4a      	ldr	r3, [pc, #296]	; (10006f14 <_Z9VideoInitm+0x258>)
10006dea:	2206      	movs	r2, #6
10006dec:	469a      	mov	sl, r3
10006dee:	4b4a      	ldr	r3, [pc, #296]	; (10006f18 <_Z9VideoInitm+0x25c>)
10006df0:	3fc0      	subs	r7, #192	; 0xc0
10006df2:	9304      	str	r3, [sp, #16]
10006df4:	464b      	mov	r3, r9
10006df6:	4651      	mov	r1, sl
10006df8:	9202      	str	r2, [sp, #8]
10006dfa:	9301      	str	r3, [sp, #4]
10006dfc:	0032      	movs	r2, r6
10006dfe:	3379      	adds	r3, #121	; 0x79
10006e00:	2002      	movs	r0, #2
10006e02:	9405      	str	r4, [sp, #20]
10006e04:	9403      	str	r4, [sp, #12]
10006e06:	9700      	str	r7, [sp, #0]
10006e08:	f001 fd38 	bl	1000887c <_Z15LayerPerspSetuphPKhPK6sVmodetthhaPKih>
	LayerSetX(GHOST1LAYER, 100);
10006e0c:	2164      	movs	r1, #100	; 0x64
10006e0e:	2002      	movs	r0, #2
10006e10:	f001 fc72 	bl	100086f8 <_Z9LayerSetXhs>
	LayerSetY(GHOST1LAYER, 100);
10006e14:	2164      	movs	r1, #100	; 0x64
10006e16:	2002      	movs	r0, #2
10006e18:	f001 fcbc 	bl	10008794 <_Z9LayerSetYhs>
	Mat3.PrepDrawImg(GHOSTW, GHOSTH, 0, 0, GHOSTW, GHOSTH, 0, 0, 0, GHOSTW/2, GHOSTH/2);
10006e1c:	4641      	mov	r1, r8
10006e1e:	4b3f      	ldr	r3, [pc, #252]	; (10006f1c <_Z9VideoInitm+0x260>)
10006e20:	9106      	str	r1, [sp, #24]
10006e22:	469b      	mov	fp, r3
10006e24:	2384      	movs	r3, #132	; 0x84
10006e26:	2180      	movs	r1, #128	; 0x80
10006e28:	05db      	lsls	r3, r3, #23
10006e2a:	2240      	movs	r2, #64	; 0x40
10006e2c:	4658      	mov	r0, fp
10006e2e:	9307      	str	r3, [sp, #28]
10006e30:	9101      	str	r1, [sp, #4]
10006e32:	2300      	movs	r3, #0
10006e34:	9505      	str	r5, [sp, #20]
10006e36:	9504      	str	r5, [sp, #16]
10006e38:	9503      	str	r5, [sp, #12]
10006e3a:	9702      	str	r7, [sp, #8]
10006e3c:	9400      	str	r4, [sp, #0]
10006e3e:	f002 f9e9 	bl	10009214 <_ZN7cMat2Df11PrepDrawImgEiiiiiifffff>
	Mat3.ExportInt(Mat3Int);
10006e42:	4658      	mov	r0, fp
10006e44:	4934      	ldr	r1, [pc, #208]	; (10006f18 <_Z9VideoInitm+0x25c>)
10006e46:	f002 fadf 	bl	10009408 <_ZNK7cMat2Df9ExportIntEPi>

	// ghost 2
	LayerPerspSetup(GHOST2LAYER, Ghost1Img_Copy, &Vmode, GHOSTW, GHOSTH, GHOSTWBITS, GHOSTHBITS, 0, Mat4Int);
10006e4a:	2206      	movs	r2, #6
10006e4c:	9202      	str	r2, [sp, #8]
10006e4e:	464a      	mov	r2, r9
10006e50:	4833      	ldr	r0, [pc, #204]	; (10006f20 <_Z9VideoInitm+0x264>)
10006e52:	2380      	movs	r3, #128	; 0x80
10006e54:	4683      	mov	fp, r0
10006e56:	4651      	mov	r1, sl
10006e58:	9004      	str	r0, [sp, #16]
10006e5a:	9201      	str	r2, [sp, #4]
10006e5c:	2003      	movs	r0, #3
10006e5e:	0032      	movs	r2, r6
10006e60:	9405      	str	r4, [sp, #20]
10006e62:	9403      	str	r4, [sp, #12]
10006e64:	9700      	str	r7, [sp, #0]
10006e66:	f001 fd09 	bl	1000887c <_Z15LayerPerspSetuphPKhPK6sVmodetthhaPKih>
	LayerSetX(GHOST2LAYER, 300);
10006e6a:	2196      	movs	r1, #150	; 0x96
10006e6c:	2003      	movs	r0, #3
10006e6e:	0049      	lsls	r1, r1, #1
10006e70:	f001 fc42 	bl	100086f8 <_Z9LayerSetXhs>
	LayerSetY(GHOST2LAYER, 150);
10006e74:	2196      	movs	r1, #150	; 0x96
10006e76:	2003      	movs	r0, #3
10006e78:	f001 fc8c 	bl	10008794 <_Z9LayerSetYhs>
	Mat4.PrepDrawImg(GHOSTW, GHOSTH, 0, 0, GHOSTW, GHOSTH, 0, 0, 0, GHOSTW/2, GHOSTH/2);
10006e7c:	2384      	movs	r3, #132	; 0x84
10006e7e:	4a29      	ldr	r2, [pc, #164]	; (10006f24 <_Z9VideoInitm+0x268>)
10006e80:	05db      	lsls	r3, r3, #23
10006e82:	4691      	mov	r9, r2
10006e84:	2180      	movs	r1, #128	; 0x80
10006e86:	9307      	str	r3, [sp, #28]
10006e88:	4643      	mov	r3, r8
10006e8a:	2240      	movs	r2, #64	; 0x40
10006e8c:	4648      	mov	r0, r9
10006e8e:	9306      	str	r3, [sp, #24]
10006e90:	9101      	str	r1, [sp, #4]
10006e92:	2300      	movs	r3, #0
10006e94:	9505      	str	r5, [sp, #20]
10006e96:	9504      	str	r5, [sp, #16]
10006e98:	9503      	str	r5, [sp, #12]
10006e9a:	9702      	str	r7, [sp, #8]
10006e9c:	9400      	str	r4, [sp, #0]
10006e9e:	f002 f9b9 	bl	10009214 <_ZN7cMat2Df11PrepDrawImgEiiiiiifffff>
	Mat4.ExportInt(Mat4Int);
10006ea2:	4659      	mov	r1, fp
10006ea4:	4648      	mov	r0, r9
10006ea6:	f002 faaf 	bl	10009408 <_ZNK7cMat2Df9ExportIntEPi>

	// initialize system clock
	set_sys_clock_pll(Vmode.vco*1000, Vmode.pd1, Vmode.pd2);
10006eaa:	68f3      	ldr	r3, [r6, #12]
10006eac:	7cf2      	ldrb	r2, [r6, #19]
10006eae:	0158      	lsls	r0, r3, #5
10006eb0:	1ac0      	subs	r0, r0, r3
10006eb2:	0080      	lsls	r0, r0, #2
10006eb4:	18c0      	adds	r0, r0, r3
10006eb6:	7cb1      	ldrb	r1, [r6, #18]
10006eb8:	00c0      	lsls	r0, r0, #3
10006eba:	f7fb fee1 	bl	10002c80 <set_sys_clock_pll>

	// initialize videomode
	VgaInitReq(&Vmode);
10006ebe:	0030      	movs	r0, r6
10006ec0:	f001 fbe6 	bl	10008690 <_Z10VgaInitReqPK6sVmode>
}
10006ec4:	b009      	add	sp, #36	; 0x24
10006ec6:	bcf0      	pop	{r4, r5, r6, r7}
10006ec8:	46bb      	mov	fp, r7
10006eca:	46b2      	mov	sl, r6
10006ecc:	46a9      	mov	r9, r5
10006ece:	46a0      	mov	r8, r4
10006ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006ed2:	46c0      	nop			; (mov r8, r8)
10006ed4:	2000f644 	.word	0x2000f644
10006ed8:	1004036c 	.word	0x1004036c
10006edc:	01e00280 	.word	0x01e00280
10006ee0:	00001212 	.word	0x00001212
10006ee4:	2003d63c 	.word	0x2003d63c
10006ee8:	20002ba4 	.word	0x20002ba4
10006eec:	20026364 	.word	0x20026364
10006ef0:	20010be8 	.word	0x20010be8
10006ef4:	200263b4 	.word	0x200263b4
10006ef8:	2001d258 	.word	0x2001d258
10006efc:	20026638 	.word	0x20026638
10006f00:	2001b438 	.word	0x2001b438
10006f04:	20002780 	.word	0x20002780
10006f08:	2001b3c0 	.word	0x2001b3c0
10006f0c:	2000363c 	.word	0x2000363c
10006f10:	2001b3a8 	.word	0x2001b3a8
10006f14:	20011bf0 	.word	0x20011bf0
10006f18:	2001b3f0 	.word	0x2001b3f0
10006f1c:	2001b3d8 	.word	0x2001b3d8
10006f20:	2001b420 	.word	0x2001b420
10006f24:	2001b408 	.word	0x2001b408

10006f28 <_Z10initJoyPadv>:
// #define PB_CF 21		// Center Fire
// #define PB_DN 22		// Down direction
// #define PB_UR 26		// Upper right
// #define PB_UP 27		// Up direction
void initJoyPad()
{
10006f28:	b510      	push	{r4, lr}
	gpio_init(PB_UL);
10006f2a:	201a      	movs	r0, #26
10006f2c:	f7fa fda4 	bl	10001a78 <gpio_init>
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO to set to input, as bits 0-29
 */
static inline void gpio_set_dir_in_masked(uint32_t mask) {
    sio_hw->gpio_oe_clr = mask;
10006f30:	24d0      	movs	r4, #208	; 0xd0
10006f32:	2380      	movs	r3, #128	; 0x80
10006f34:	0624      	lsls	r4, r4, #24
10006f36:	04db      	lsls	r3, r3, #19
10006f38:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10006f3a:	2200      	movs	r2, #0
10006f3c:	2101      	movs	r1, #1
10006f3e:	201a      	movs	r0, #26
10006f40:	f7fa fd70 	bl	10001a24 <gpio_set_pulls>
	gpio_set_dir(PB_UL, GPIO_IN);
	gpio_pull_up(PB_UL);
	
	gpio_init(PB_FR);
10006f44:	2011      	movs	r0, #17
10006f46:	f7fa fd97 	bl	10001a78 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10006f4a:	2380      	movs	r3, #128	; 0x80
10006f4c:	029b      	lsls	r3, r3, #10
10006f4e:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10006f50:	2200      	movs	r2, #0
10006f52:	2101      	movs	r1, #1
10006f54:	2011      	movs	r0, #17
10006f56:	f7fa fd65 	bl	10001a24 <gpio_set_pulls>
	gpio_set_dir(PB_FR, GPIO_IN);
	gpio_pull_up(PB_FR);
	
	gpio_init(PB_UP);
10006f5a:	2010      	movs	r0, #16
10006f5c:	f7fa fd8c 	bl	10001a78 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10006f60:	2380      	movs	r3, #128	; 0x80
10006f62:	025b      	lsls	r3, r3, #9
10006f64:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10006f66:	2200      	movs	r2, #0
10006f68:	2101      	movs	r1, #1
10006f6a:	2010      	movs	r0, #16
10006f6c:	f7fa fd5a 	bl	10001a24 <gpio_set_pulls>
	gpio_set_dir(PB_UP, GPIO_IN);
	gpio_pull_up(PB_UP);
	
	gpio_init(PB_UR);
10006f70:	2016      	movs	r0, #22
10006f72:	f7fa fd81 	bl	10001a78 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10006f76:	2380      	movs	r3, #128	; 0x80
10006f78:	03db      	lsls	r3, r3, #15
10006f7a:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10006f7c:	2200      	movs	r2, #0
10006f7e:	2101      	movs	r1, #1
10006f80:	2016      	movs	r0, #22
10006f82:	f7fa fd4f 	bl	10001a24 <gpio_set_pulls>
	gpio_set_dir(PB_UR, GPIO_IN);
	gpio_pull_up(PB_UR);
	
	gpio_init(PB_DN);
10006f86:	2012      	movs	r0, #18
10006f88:	f7fa fd76 	bl	10001a78 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10006f8c:	2380      	movs	r3, #128	; 0x80
10006f8e:	02db      	lsls	r3, r3, #11
10006f90:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10006f92:	2200      	movs	r2, #0
10006f94:	2101      	movs	r1, #1
10006f96:	2012      	movs	r0, #18
10006f98:	f7fa fd44 	bl	10001a24 <gpio_set_pulls>
	gpio_set_dir(PB_DN, GPIO_IN);
	gpio_pull_up(PB_DN);
	
	gpio_init(PB_LT);
10006f9c:	2014      	movs	r0, #20
10006f9e:	f7fa fd6b 	bl	10001a78 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10006fa2:	2380      	movs	r3, #128	; 0x80
10006fa4:	035b      	lsls	r3, r3, #13
10006fa6:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10006fa8:	2200      	movs	r2, #0
10006faa:	2101      	movs	r1, #1
10006fac:	2014      	movs	r0, #20
10006fae:	f7fa fd39 	bl	10001a24 <gpio_set_pulls>
	gpio_set_dir(PB_LT, GPIO_IN);
	gpio_pull_up(PB_LT);
	
	gpio_init(PB_RT);
10006fb2:	2015      	movs	r0, #21
10006fb4:	f7fa fd60 	bl	10001a78 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10006fb8:	2380      	movs	r3, #128	; 0x80
10006fba:	039b      	lsls	r3, r3, #14
10006fbc:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10006fbe:	2200      	movs	r2, #0
10006fc0:	2101      	movs	r1, #1
10006fc2:	2015      	movs	r0, #21
10006fc4:	f7fa fd2e 	bl	10001a24 <gpio_set_pulls>
	gpio_set_dir(PB_RT, GPIO_IN);
	gpio_pull_up(PB_RT);
	
	gpio_init(PB_CF);
10006fc8:	201b      	movs	r0, #27
10006fca:	f7fa fd55 	bl	10001a78 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10006fce:	2380      	movs	r3, #128	; 0x80
10006fd0:	051b      	lsls	r3, r3, #20
    gpio_set_pulls(gpio, true, false);
10006fd2:	2200      	movs	r2, #0
10006fd4:	2101      	movs	r1, #1
10006fd6:	201b      	movs	r0, #27
    sio_hw->gpio_oe_clr = mask;
10006fd8:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10006fda:	f7fa fd23 	bl	10001a24 <gpio_set_pulls>
	gpio_set_dir(PB_CF, GPIO_IN);
	gpio_pull_up(PB_CF);

}
10006fde:	bd10      	pop	{r4, pc}

10006fe0 <main>:

int main()
{
10006fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
10006fe2:	46de      	mov	lr, fp
10006fe4:	4657      	mov	r7, sl
10006fe6:	464e      	mov	r6, r9
10006fe8:	4645      	mov	r5, r8
	int t0, t2;
	float dt;

	// copy images
	memcpy(SkylineImg_Copy, SkylineImg, sizeof(SkylineImg));
10006fea:	2291      	movs	r2, #145	; 0x91
{
10006fec:	b5e0      	push	{r5, r6, r7, lr}
	memcpy(SkylineImg_Copy, SkylineImg, sizeof(SkylineImg));
10006fee:	49e0      	ldr	r1, [pc, #896]	; (10007370 <main+0x390>)
{
10006ff0:	b095      	sub	sp, #84	; 0x54
	memcpy(SkylineImg_Copy, SkylineImg, sizeof(SkylineImg));
10006ff2:	0212      	lsls	r2, r2, #8
10006ff4:	48df      	ldr	r0, [pc, #892]	; (10007374 <main+0x394>)
10006ff6:	f7fa f8e3 	bl	100011c0 <__wrap___aeabi_memcpy>
	memcpy(Font_Copy, FontBold8x16, sizeof(FontBold8x16));
10006ffa:	2280      	movs	r2, #128	; 0x80
10006ffc:	49de      	ldr	r1, [pc, #888]	; (10007378 <main+0x398>)
10006ffe:	0152      	lsls	r2, r2, #5
10007000:	48de      	ldr	r0, [pc, #888]	; (1000737c <main+0x39c>)
10007002:	f7fa f8dd 	bl	100011c0 <__wrap___aeabi_memcpy>
	memcpy(TilesImg_Copy, TilesImg, sizeof(TilesImg));
10007006:	22b8      	movs	r2, #184	; 0xb8
10007008:	49dd      	ldr	r1, [pc, #884]	; (10007380 <main+0x3a0>)
1000700a:	0252      	lsls	r2, r2, #9
1000700c:	48dd      	ldr	r0, [pc, #884]	; (10007384 <main+0x3a4>)
1000700e:	f7fa f8d7 	bl	100011c0 <__wrap___aeabi_memcpy>
	CopyWhiteImg(Car1Img_Copy, Car1Img, sizeof(Car1Img));
10007012:	2280      	movs	r2, #128	; 0x80
10007014:	49dc      	ldr	r1, [pc, #880]	; (10007388 <main+0x3a8>)
10007016:	48dd      	ldr	r0, [pc, #884]	; (1000738c <main+0x3ac>)
10007018:	01d2      	lsls	r2, r2, #7
1000701a:	f001 fd93 	bl	10008b44 <_Z12CopyWhiteImgPhPKhi>
	CopyWhiteImg(Car2Img_Copy, Car2Img, sizeof(Car2Img));
1000701e:	2280      	movs	r2, #128	; 0x80
10007020:	49db      	ldr	r1, [pc, #876]	; (10007390 <main+0x3b0>)
10007022:	48dc      	ldr	r0, [pc, #880]	; (10007394 <main+0x3b4>)
10007024:	01d2      	lsls	r2, r2, #7
10007026:	f001 fd8d 	bl	10008b44 <_Z12CopyWhiteImgPhPKhi>
	CopyWhiteImg(Car3Img_Copy, Car3Img, sizeof(Car3Img));
1000702a:	2280      	movs	r2, #128	; 0x80
1000702c:	49da      	ldr	r1, [pc, #872]	; (10007398 <main+0x3b8>)
1000702e:	48db      	ldr	r0, [pc, #876]	; (1000739c <main+0x3bc>)
10007030:	01d2      	lsls	r2, r2, #7
10007032:	f001 fd87 	bl	10008b44 <_Z12CopyWhiteImgPhPKhi>
	CopyWhiteImg(Ghost1Img_Copy, Ghost1Img, sizeof(Ghost1Img));
10007036:	2280      	movs	r2, #128	; 0x80
10007038:	49d9      	ldr	r1, [pc, #868]	; (100073a0 <main+0x3c0>)
1000703a:	48da      	ldr	r0, [pc, #872]	; (100073a4 <main+0x3c4>)
1000703c:	0192      	lsls	r2, r2, #6
1000703e:	f001 fd81 	bl	10008b44 <_Z12CopyWhiteImgPhPKhi>
	CopyWhiteImg(Ghost2Img_Copy, Ghost2Img, sizeof(Ghost2Img));
10007042:	2280      	movs	r2, #128	; 0x80
10007044:	49d8      	ldr	r1, [pc, #864]	; (100073a8 <main+0x3c8>)
10007046:	48d9      	ldr	r0, [pc, #868]	; (100073ac <main+0x3cc>)
10007048:	0192      	lsls	r2, r2, #6
1000704a:	f001 fd7b 	bl	10008b44 <_Z12CopyWhiteImgPhPKhi>
	CopyWhiteImg(Ghost3Img_Copy, Ghost3Img, sizeof(Ghost3Img));
1000704e:	2280      	movs	r2, #128	; 0x80
10007050:	49d7      	ldr	r1, [pc, #860]	; (100073b0 <main+0x3d0>)
10007052:	48d8      	ldr	r0, [pc, #864]	; (100073b4 <main+0x3d4>)
10007054:	0192      	lsls	r2, r2, #6
10007056:	f001 fd75 	bl	10008b44 <_Z12CopyWhiteImgPhPKhi>
	CopyWhiteImg(Ghost4Img_Copy, Ghost4Img, sizeof(Ghost4Img));
1000705a:	2280      	movs	r2, #128	; 0x80
1000705c:	49d6      	ldr	r1, [pc, #856]	; (100073b8 <main+0x3d8>)
1000705e:	0192      	lsls	r2, r2, #6
10007060:	48d6      	ldr	r0, [pc, #856]	; (100073bc <main+0x3dc>)
10007062:	f001 fd6f 	bl	10008b44 <_Z12CopyWhiteImgPhPKhi>

	// run VGA core
	multicore_launch_core1(VgaCore);
10007066:	48d6      	ldr	r0, [pc, #856]	; (100073c0 <main+0x3e0>)
10007068:	f7fa feee 	bl	10001e48 <multicore_launch_core1>

	// initialize videomode
	VideoInit(170000);
1000706c:	48d5      	ldr	r0, [pc, #852]	; (100073c4 <main+0x3e4>)
1000706e:	f7ff fe25 	bl	10006cbc <_Z9VideoInitm>

	// initialize stdio
	stdio_init_all();
10007072:	f7fb fc5f 	bl	10002934 <stdio_init_all>
	initJoyPad();
10007076:	f7ff ff57 	bl	10006f28 <_Z10initJoyPadv>

	// initialize sound output
	PWMSndInit();
1000707a:	f002 fbcb 	bl	10009814 <_Z10PWMSndInitv>

	// display info row
	InfoRow();
1000707e:	f7fe fb27 	bl	100056d0 <_Z7InfoRowv>

	// time mark
	t0 = (int)time_us_64();
10007082:	f7fc fabd 	bl	10003600 <time_us_64>
10007086:	4bd0      	ldr	r3, [pc, #832]	; (100073c8 <main+0x3e8>)
10007088:	0005      	movs	r5, r0
    return !!((1ul << gpio) & sio_hw->gpio_in);
1000708a:	4699      	mov	r9, r3
1000708c:	4bcf      	ldr	r3, [pc, #828]	; (100073cc <main+0x3ec>)
1000708e:	2101      	movs	r1, #1
10007090:	469b      	mov	fp, r3
10007092:	4bcf      	ldr	r3, [pc, #828]	; (100073d0 <main+0x3f0>)
10007094:	4fcf      	ldr	r7, [pc, #828]	; (100073d4 <main+0x3f4>)
10007096:	469a      	mov	sl, r3
10007098:	23d0      	movs	r3, #208	; 0xd0
1000709a:	061b      	lsls	r3, r3, #24
1000709c:	685a      	ldr	r2, [r3, #4]
	if (!gpio_get(PB_LT))
1000709e:	02d2      	lsls	r2, r2, #11
100070a0:	d400      	bmi.n	100070a4 <main+0xc4>
100070a2:	e1e7      	b.n	10007474 <main+0x494>
100070a4:	685a      	ldr	r2, [r3, #4]
100070a6:	0d52      	lsrs	r2, r2, #21
	else if (!gpio_get(PB_RT))
100070a8:	4211      	tst	r1, r2
100070aa:	d100      	bne.n	100070ae <main+0xce>
100070ac:	e359      	b.n	10007762 <main+0x782>
100070ae:	685a      	ldr	r2, [r3, #4]
100070b0:	0c12      	lsrs	r2, r2, #16
	else if (!gpio_get(PB_UP))
100070b2:	4211      	tst	r1, r2
100070b4:	d100      	bne.n	100070b8 <main+0xd8>
100070b6:	e3b9      	b.n	1000782c <main+0x84c>
100070b8:	685b      	ldr	r3, [r3, #4]
100070ba:	0c9b      	lsrs	r3, r3, #18
	else if (!gpio_get(PB_DN))
100070bc:	4219      	tst	r1, r3
100070be:	d100      	bne.n	100070c2 <main+0xe2>
100070c0:	e3e0      	b.n	10007884 <main+0x8a4>
	char c = getchar_timeout_us(0);
100070c2:	2000      	movs	r0, #0
100070c4:	f7fb fc3a 	bl	1000293c <getchar_timeout_us>
100070c8:	b2c0      	uxtb	r0, r0
	if (c == (char)PICO_ERROR_TIMEOUT) c = 0;
100070ca:	28ff      	cmp	r0, #255	; 0xff
100070cc:	d00f      	beq.n	100070ee <main+0x10e>
	if ((c >= 'a') && (c <= 'z')) c -= 32;
100070ce:	0003      	movs	r3, r0
100070d0:	3b61      	subs	r3, #97	; 0x61
100070d2:	2b19      	cmp	r3, #25
100070d4:	d801      	bhi.n	100070da <main+0xfa>
100070d6:	3820      	subs	r0, #32
100070d8:	b2c0      	uxtb	r0, r0

	// main loop
	while (true)
	{
		switch (GetChar())
100070da:	2849      	cmp	r0, #73	; 0x49
100070dc:	d100      	bne.n	100070e0 <main+0x100>
100070de:	e3a8      	b.n	10007832 <main+0x852>
100070e0:	d901      	bls.n	100070e6 <main+0x106>
100070e2:	f000 fbfa 	bl	100078da <main+0x8fa>
100070e6:	2800      	cmp	r0, #0
100070e8:	d001      	beq.n	100070ee <main+0x10e>
100070ea:	f000 fbfe 	bl	100078ea <main+0x90a>
			FlushChar();
			break;
		}

		// delta time (at seconds)
		t2 = (int)time_us_64();
100070ee:	f7fc fa87 	bl	10003600 <time_us_64>
100070f2:	900b      	str	r0, [sp, #44]	; 0x2c
		dt = (t2 - t0)/1000000.f;
100070f4:	1b40      	subs	r0, r0, r5
100070f6:	f7f9 ff1d 	bl	10000f34 <__wrap___aeabi_i2f>
100070fa:	49b7      	ldr	r1, [pc, #732]	; (100073d8 <main+0x3f8>)
100070fc:	f7f9 fec1 	bl	10000e82 <__wrap___aeabi_fdiv>
		t0 = t2;

		// update speed
		float s = (float)Gear*SPEEDCOEF*10; // required speed
10007100:	4bb6      	ldr	r3, [pc, #728]	; (100073dc <main+0x3fc>)
		dt = (t2 - t0)/1000000.f;
10007102:	9008      	str	r0, [sp, #32]
		float s = (float)Gear*SPEEDCOEF*10; // required speed
10007104:	6818      	ldr	r0, [r3, #0]
10007106:	f7f9 ff15 	bl	10000f34 <__wrap___aeabi_i2f>
1000710a:	49b5      	ldr	r1, [pc, #724]	; (100073e0 <main+0x400>)
1000710c:	f7f9 febc 	bl	10000e88 <__wrap___aeabi_fmul>
10007110:	49b4      	ldr	r1, [pc, #720]	; (100073e4 <main+0x404>)
10007112:	f7f9 feb9 	bl	10000e88 <__wrap___aeabi_fmul>
		float s2 = Speed; // current speed
10007116:	4bb4      	ldr	r3, [pc, #720]	; (100073e8 <main+0x408>)
		float s = (float)Gear*SPEEDCOEF*10; // required speed
10007118:	1c06      	adds	r6, r0, #0
		float s2 = Speed; // current speed
1000711a:	681c      	ldr	r4, [r3, #0]
		Bool grass = (TileMap[CurTile] == GRASS); // car on grass
1000711c:	4bb3      	ldr	r3, [pc, #716]	; (100073ec <main+0x40c>)
1000711e:	681b      	ldr	r3, [r3, #0]
10007120:	930c      	str	r3, [sp, #48]	; 0x30
10007122:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10007124:	4bb2      	ldr	r3, [pc, #712]	; (100073f0 <main+0x410>)
10007126:	5c9d      	ldrb	r5, [r3, r2]
		if (grass && (s > SPEEDCOEF*10)) s = SPEEDCOEF*10; // slow down on grass
10007128:	2d00      	cmp	r5, #0
1000712a:	d105      	bne.n	10007138 <main+0x158>
1000712c:	49b1      	ldr	r1, [pc, #708]	; (100073f4 <main+0x414>)
1000712e:	f7f9 fef7 	bl	10000f20 <__wrap___aeabi_fcmpgt>
10007132:	2800      	cmp	r0, #0
10007134:	d000      	beq.n	10007138 <main+0x158>
10007136:	4eaf      	ldr	r6, [pc, #700]	; (100073f4 <main+0x414>)
		if (s > s2) // required speed up
10007138:	1c21      	adds	r1, r4, #0
1000713a:	1c30      	adds	r0, r6, #0
1000713c:	f7f9 fef0 	bl	10000f20 <__wrap___aeabi_fcmpgt>
10007140:	2800      	cmp	r0, #0
10007142:	d00e      	beq.n	10007162 <main+0x182>
		{
			s2 += dt*ACCEL;
10007144:	49ab      	ldr	r1, [pc, #684]	; (100073f4 <main+0x414>)
10007146:	9808      	ldr	r0, [sp, #32]
10007148:	f7f9 fe9e 	bl	10000e88 <__wrap___aeabi_fmul>
1000714c:	1c01      	adds	r1, r0, #0
1000714e:	1c20      	adds	r0, r4, #0
10007150:	f7f9 fe94 	bl	10000e7c <__wrap___aeabi_fadd>
10007154:	1c04      	adds	r4, r0, #0
			if (s <= s2) s2 = s;
10007156:	1c01      	adds	r1, r0, #0
10007158:	1c30      	adds	r0, r6, #0
1000715a:	f7f9 fed1 	bl	10000f00 <__wrap___aeabi_fcmple>
1000715e:	2800      	cmp	r0, #0
10007160:	d126      	bne.n	100071b0 <main+0x1d0>
		}
		if (s < s2) // required speed down
10007162:	1c21      	adds	r1, r4, #0
10007164:	1c30      	adds	r0, r6, #0
10007166:	f7f9 fec5 	bl	10000ef4 <__wrap___aeabi_fcmplt>
1000716a:	2800      	cmp	r0, #0
1000716c:	d100      	bne.n	10007170 <main+0x190>
1000716e:	e1ab      	b.n	100074c8 <main+0x4e8>
		{
			s2 -= dt*ACCEL;
10007170:	9b08      	ldr	r3, [sp, #32]
10007172:	49a0      	ldr	r1, [pc, #640]	; (100073f4 <main+0x414>)
10007174:	1c18      	adds	r0, r3, #0
10007176:	4698      	mov	r8, r3
10007178:	f7f9 fe86 	bl	10000e88 <__wrap___aeabi_fmul>
1000717c:	1c01      	adds	r1, r0, #0
1000717e:	1c20      	adds	r0, r4, #0
10007180:	f7f9 fe79 	bl	10000e76 <__wrap___aeabi_fsub>
10007184:	1c04      	adds	r4, r0, #0
			if (grass) s2 -= 3*dt*ACCEL;
10007186:	2d00      	cmp	r5, #0
10007188:	d10b      	bne.n	100071a2 <main+0x1c2>
1000718a:	499b      	ldr	r1, [pc, #620]	; (100073f8 <main+0x418>)
1000718c:	4640      	mov	r0, r8
1000718e:	f7f9 fe7b 	bl	10000e88 <__wrap___aeabi_fmul>
10007192:	4998      	ldr	r1, [pc, #608]	; (100073f4 <main+0x414>)
10007194:	f7f9 fe78 	bl	10000e88 <__wrap___aeabi_fmul>
10007198:	1c01      	adds	r1, r0, #0
1000719a:	1c20      	adds	r0, r4, #0
1000719c:	f7f9 fe6b 	bl	10000e76 <__wrap___aeabi_fsub>
100071a0:	1c04      	adds	r4, r0, #0
			if (s >= s2) s2 = s;
100071a2:	1c21      	adds	r1, r4, #0
100071a4:	1c30      	adds	r0, r6, #0
100071a6:	f7f9 feb3 	bl	10000f10 <__wrap___aeabi_fcmpge>
100071aa:	2800      	cmp	r0, #0
100071ac:	d100      	bne.n	100071b0 <main+0x1d0>
100071ae:	e18b      	b.n	100074c8 <main+0x4e8>
		}
		Speed = s2;
100071b0:	4b8d      	ldr	r3, [pc, #564]	; (100073e8 <main+0x408>)

		// update turning
		if (Speed != 0)
100071b2:	2100      	movs	r1, #0
		Speed = s2;
100071b4:	601e      	str	r6, [r3, #0]
		if (Speed != 0)
100071b6:	1c30      	adds	r0, r6, #0
100071b8:	f7f9 fe94 	bl	10000ee4 <__wrap___aeabi_fcmpeq>
100071bc:	2800      	cmp	r0, #0
100071be:	d100      	bne.n	100071c2 <main+0x1e2>
100071c0:	e18c      	b.n	100074dc <main+0x4fc>
		}

		// update sound
		if (Speed == 0)
		{
			StopSound();
100071c2:	f002 fb99 	bl	100098f8 <_Z9StopSoundv>
			}
			SpeedSound(Speed/(SPEEDCOEF*10)/5);
		}

		// update car image
		switch (CarTurn)
100071c6:	4b8d      	ldr	r3, [pc, #564]	; (100073fc <main+0x41c>)
100071c8:	681b      	ldr	r3, [r3, #0]
100071ca:	1c5a      	adds	r2, r3, #1
100071cc:	d100      	bne.n	100071d0 <main+0x1f0>
100071ce:	e1f5      	b.n	100075bc <main+0x5dc>
100071d0:	2b01      	cmp	r3, #1
100071d2:	d000      	beq.n	100071d6 <main+0x1f6>
100071d4:	e2c1      	b.n	1000775a <main+0x77a>
		{
		case 1:
			LayerScreen[CARLAYER].img = Car3Img_Copy;
100071d6:	4b8a      	ldr	r3, [pc, #552]	; (10007400 <main+0x420>)
100071d8:	4a70      	ldr	r2, [pc, #448]	; (1000739c <main+0x3bc>)
100071da:	625a      	str	r2, [r3, #36]	; 0x24
			LayerScreen[CARLAYER].img = Car1Img_Copy;
			break;
		}

		// update position
		CarY += - s2 * dt * cos(CarDir);
100071dc:	683d      	ldr	r5, [r7, #0]
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
100071de:	1c28      	adds	r0, r5, #0
100071e0:	f7f9 ff22 	bl	10001028 <__wrap_cosf>
100071e4:	2380      	movs	r3, #128	; 0x80
100071e6:	061b      	lsls	r3, r3, #24
100071e8:	9908      	ldr	r1, [sp, #32]
100071ea:	1c04      	adds	r4, r0, #0
100071ec:	18f0      	adds	r0, r6, r3
100071ee:	f7f9 fe4b 	bl	10000e88 <__wrap___aeabi_fmul>
100071f2:	1c21      	adds	r1, r4, #0
100071f4:	f7f9 fe48 	bl	10000e88 <__wrap___aeabi_fmul>
100071f8:	464b      	mov	r3, r9
100071fa:	6819      	ldr	r1, [r3, #0]
100071fc:	f7f9 fe3e 	bl	10000e7c <__wrap___aeabi_fadd>
10007200:	464b      	mov	r3, r9
10007202:	1c04      	adds	r4, r0, #0
10007204:	6018      	str	r0, [r3, #0]
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
10007206:	1c28      	adds	r0, r5, #0
10007208:	f7f9 ff20 	bl	1000104c <__wrap_sinf>
1000720c:	4680      	mov	r8, r0
		CarX += s2 * dt * sin(CarDir);
1000720e:	9908      	ldr	r1, [sp, #32]
10007210:	1c30      	adds	r0, r6, #0
10007212:	f7f9 fe39 	bl	10000e88 <__wrap___aeabi_fmul>
10007216:	4641      	mov	r1, r8
10007218:	f7f9 fe36 	bl	10000e88 <__wrap___aeabi_fmul>
1000721c:	4b79      	ldr	r3, [pc, #484]	; (10007404 <main+0x424>)
1000721e:	6819      	ldr	r1, [r3, #0]
10007220:	f7f9 fe2c 	bl	10000e7c <__wrap___aeabi_fadd>
10007224:	4b77      	ldr	r3, [pc, #476]	; (10007404 <main+0x424>)

		// update terrain
		Mat.PrepDrawImg(TILESIZE, TILESIZE, 0, TILESIZE*3, WIDTH, WIDTH, 0, 0, CarDir, CarX, CarY);
10007226:	2240      	movs	r2, #64	; 0x40
		CarX += s2 * dt * sin(CarDir);
10007228:	6018      	str	r0, [r3, #0]
		Mat.PrepDrawImg(TILESIZE, TILESIZE, 0, TILESIZE*3, WIDTH, WIDTH, 0, 0, CarDir, CarX, CarY);
1000722a:	2300      	movs	r3, #0
1000722c:	9304      	str	r3, [sp, #16]
1000722e:	9303      	str	r3, [sp, #12]
10007230:	23a0      	movs	r3, #160	; 0xa0
10007232:	009b      	lsls	r3, r3, #2
10007234:	9302      	str	r3, [sp, #8]
10007236:	9301      	str	r3, [sp, #4]
10007238:	3bc1      	subs	r3, #193	; 0xc1
1000723a:	3bff      	subs	r3, #255	; 0xff
1000723c:	2140      	movs	r1, #64	; 0x40
1000723e:	9006      	str	r0, [sp, #24]
10007240:	9300      	str	r3, [sp, #0]
10007242:	4871      	ldr	r0, [pc, #452]	; (10007408 <main+0x428>)
10007244:	2300      	movs	r3, #0
10007246:	9505      	str	r5, [sp, #20]
10007248:	9407      	str	r4, [sp, #28]
1000724a:	f001 ffe3 	bl	10009214 <_ZN7cMat2Df11PrepDrawImgEiiiiiifffff>
		Mat.ExportInt(MatInt);
1000724e:	496f      	ldr	r1, [pc, #444]	; (1000740c <main+0x42c>)
10007250:	486d      	ldr	r0, [pc, #436]	; (10007408 <main+0x428>)
10007252:	f002 f8d9 	bl	10009408 <_ZNK7cMat2Df9ExportIntEPi>

		// update skyline
		pScreen->strip[1].seg[0].offx = CarDir*2*SKYLINEW/PI;
10007256:	6839      	ldr	r1, [r7, #0]
10007258:	4b6d      	ldr	r3, [pc, #436]	; (10007410 <main+0x430>)
1000725a:	1c08      	adds	r0, r1, #0
1000725c:	681c      	ldr	r4, [r3, #0]
1000725e:	f7f9 fe0d 	bl	10000e7c <__wrap___aeabi_fadd>
10007262:	496c      	ldr	r1, [pc, #432]	; (10007414 <main+0x434>)
10007264:	f7f9 fe10 	bl	10000e88 <__wrap___aeabi_fmul>
10007268:	f7f9 fec4 	bl	10000ff4 <__wrap___aeabi_f2d>
1000726c:	4b6a      	ldr	r3, [pc, #424]	; (10007418 <main+0x438>)
1000726e:	4a6b      	ldr	r2, [pc, #428]	; (1000741c <main+0x43c>)
10007270:	f7f9 faef 	bl	10000852 <__wrap___aeabi_ddiv>
10007274:	f7f9 fb4b 	bl	1000090e <__wrap___aeabi_d2iz>
10007278:	23f0      	movs	r3, #240	; 0xf0
1000727a:	52e0      	strh	r0, [r4, r3]

		// update time counter
		if (Rank > 0) // game started
1000727c:	465b      	mov	r3, fp
1000727e:	681b      	ldr	r3, [r3, #0]
10007280:	2b00      	cmp	r3, #0
10007282:	dd0e      	ble.n	100072a2 <main+0x2c2>
		{
			ThisTime = (int)((time_us_64() - StartTime)/1000000);
10007284:	f7fc f9bc 	bl	10003600 <time_us_64>
10007288:	4b65      	ldr	r3, [pc, #404]	; (10007420 <main+0x440>)
1000728a:	4a66      	ldr	r2, [pc, #408]	; (10007424 <main+0x444>)
1000728c:	685c      	ldr	r4, [r3, #4]
1000728e:	681b      	ldr	r3, [r3, #0]
10007290:	1ac0      	subs	r0, r0, r3
10007292:	41a1      	sbcs	r1, r4
10007294:	9308      	str	r3, [sp, #32]
10007296:	9409      	str	r4, [sp, #36]	; 0x24
10007298:	2300      	movs	r3, #0
1000729a:	f7f9 f8b1 	bl	10000400 <__wrap___aeabi_uldivmod>
1000729e:	4b62      	ldr	r3, [pc, #392]	; (10007428 <main+0x448>)
100072a0:	6018      	str	r0, [r3, #0]
		}

		// current tile
		int x = (int)((CarX+1024*TILESIZE)/TILESIZE) & (MAPW-1);
		int y = (int)((CarY+1024*TILESIZE)/TILESIZE) & (MAPH-1);
100072a2:	464b      	mov	r3, r9
100072a4:	218f      	movs	r1, #143	; 0x8f
100072a6:	6818      	ldr	r0, [r3, #0]
100072a8:	05c9      	lsls	r1, r1, #23
100072aa:	f7f9 fde7 	bl	10000e7c <__wrap___aeabi_fadd>
100072ae:	21f2      	movs	r1, #242	; 0xf2
100072b0:	0589      	lsls	r1, r1, #22
100072b2:	f7f9 fde9 	bl	10000e88 <__wrap___aeabi_fmul>
100072b6:	f7f9 fe5f 	bl	10000f78 <__wrap___aeabi_f2iz>
100072ba:	251f      	movs	r5, #31
		int x = (int)((CarX+1024*TILESIZE)/TILESIZE) & (MAPW-1);
100072bc:	218f      	movs	r1, #143	; 0x8f
100072be:	4b51      	ldr	r3, [pc, #324]	; (10007404 <main+0x424>)
		int y = (int)((CarY+1024*TILESIZE)/TILESIZE) & (MAPH-1);
100072c0:	4028      	ands	r0, r5
		CurTile = x + y*MAPW;
100072c2:	0144      	lsls	r4, r0, #5
		int x = (int)((CarX+1024*TILESIZE)/TILESIZE) & (MAPW-1);
100072c4:	05c9      	lsls	r1, r1, #23
100072c6:	6818      	ldr	r0, [r3, #0]
100072c8:	f7f9 fdd8 	bl	10000e7c <__wrap___aeabi_fadd>
100072cc:	21f2      	movs	r1, #242	; 0xf2
100072ce:	0589      	lsls	r1, r1, #22
100072d0:	f7f9 fdda 	bl	10000e88 <__wrap___aeabi_fmul>
100072d4:	f7f9 fe50 	bl	10000f78 <__wrap___aeabi_f2iz>
		CurTile = x + y*MAPW;
100072d8:	4b44      	ldr	r3, [pc, #272]	; (100073ec <main+0x40c>)
		int x = (int)((CarX+1024*TILESIZE)/TILESIZE) & (MAPW-1);
100072da:	4028      	ands	r0, r5
		CurTile = x + y*MAPW;
100072dc:	1820      	adds	r0, r4, r0

		// game goal
		u8 tile = TileMap[CurTile]; // get current tile
		if (tile == CheckNext)
100072de:	4a53      	ldr	r2, [pc, #332]	; (1000742c <main+0x44c>)
		CurTile = x + y*MAPW;
100072e0:	6018      	str	r0, [r3, #0]
		u8 tile = TileMap[CurTile]; // get current tile
100072e2:	4b43      	ldr	r3, [pc, #268]	; (100073f0 <main+0x410>)
		if (tile == CheckNext)
100072e4:	6812      	ldr	r2, [r2, #0]
		u8 tile = TileMap[CurTile]; // get current tile
100072e6:	5c1b      	ldrb	r3, [r3, r0]
		if (tile == CheckNext)
100072e8:	9208      	str	r2, [sp, #32]
100072ea:	4293      	cmp	r3, r2
100072ec:	d100      	bne.n	100072f0 <main+0x310>
100072ee:	e21a      	b.n	10007726 <main+0x746>
			}
		}

		// record step delta
		int i;
		int dif = (int)((u32)time_us_64() - RecordStep);
100072f0:	f7fc f986 	bl	10003600 <time_us_64>
100072f4:	4b4e      	ldr	r3, [pc, #312]	; (10007430 <main+0x450>)
100072f6:	681b      	ldr	r3, [r3, #0]
100072f8:	1ac3      	subs	r3, r0, r3
100072fa:	9308      	str	r3, [sp, #32]

		// display ghost 1
		int ghost;
		for (ghost = 1; ghost <= 2; ghost++)
100072fc:	4b4d      	ldr	r3, [pc, #308]	; (10007434 <main+0x454>)
100072fe:	930e      	str	r3, [sp, #56]	; 0x38
		int dif = (int)((u32)time_us_64() - RecordStep);
10007300:	2302      	movs	r3, #2
10007302:	930c      	str	r3, [sp, #48]	; 0x30
		{
			i = RecordInx[1];
10007304:	4653      	mov	r3, sl
10007306:	685c      	ldr	r4, [r3, #4]
			if (i >= 0)
10007308:	2c00      	cmp	r4, #0
1000730a:	db00      	blt.n	1000730e <main+0x32e>
1000730c:	e15a      	b.n	100075c4 <main+0x5e4>
				}
			}
		}

		// record game (every 1 second)
		if ((Rank > 0) && (dif >= 1000000))
1000730e:	465b      	mov	r3, fp
10007310:	681b      	ldr	r3, [r3, #0]
10007312:	2b00      	cmp	r3, #0
10007314:	dc00      	bgt.n	10007318 <main+0x338>
10007316:	e0a0      	b.n	1000745a <main+0x47a>
10007318:	4b47      	ldr	r3, [pc, #284]	; (10007438 <main+0x458>)
1000731a:	9a08      	ldr	r2, [sp, #32]
1000731c:	429a      	cmp	r2, r3
1000731e:	dc00      	bgt.n	10007322 <main+0x342>
10007320:	e09b      	b.n	1000745a <main+0x47a>
		{
			RecordStep += 1000000;
10007322:	4a40      	ldr	r2, [pc, #256]	; (10007424 <main+0x444>)
10007324:	4b42      	ldr	r3, [pc, #264]	; (10007430 <main+0x450>)
10007326:	4694      	mov	ip, r2
10007328:	681b      	ldr	r3, [r3, #0]
1000732a:	4a41      	ldr	r2, [pc, #260]	; (10007430 <main+0x450>)
1000732c:	4463      	add	r3, ip
1000732e:	6013      	str	r3, [r2, #0]
			i = RecordInx[0];
10007330:	4653      	mov	r3, sl
			RecordX[i] = CarX;
10007332:	4a34      	ldr	r2, [pc, #208]	; (10007404 <main+0x424>)
			i = RecordInx[0];
10007334:	6819      	ldr	r1, [r3, #0]
			RecordX[i] = CarX;
10007336:	6812      	ldr	r2, [r2, #0]
10007338:	008b      	lsls	r3, r1, #2
1000733a:	9208      	str	r2, [sp, #32]
1000733c:	9808      	ldr	r0, [sp, #32]
1000733e:	4a3f      	ldr	r2, [pc, #252]	; (1000743c <main+0x45c>)
10007340:	50d0      	str	r0, [r2, r3]
			RecordY[i] = CarY;
10007342:	4648      	mov	r0, r9
10007344:	4a3e      	ldr	r2, [pc, #248]	; (10007440 <main+0x460>)
10007346:	6800      	ldr	r0, [r0, #0]
10007348:	50d0      	str	r0, [r2, r3]
			RecordDir[i] = CarDir;
1000734a:	4a3e      	ldr	r2, [pc, #248]	; (10007444 <main+0x464>)
1000734c:	6838      	ldr	r0, [r7, #0]
1000734e:	50d0      	str	r0, [r2, r3]

			i = (i + 1) & (RECORDMAX-1);
10007350:	23ff      	movs	r3, #255	; 0xff
10007352:	1c4a      	adds	r2, r1, #1
10007354:	4013      	ands	r3, r2
			if ((i != RecordInx[1]) && (i != RecordInx[0])) // check buffer overflow
10007356:	4652      	mov	r2, sl
10007358:	6852      	ldr	r2, [r2, #4]
1000735a:	429a      	cmp	r2, r3
1000735c:	d100      	bne.n	10007360 <main+0x380>
1000735e:	e22a      	b.n	100077b6 <main+0x7d6>
10007360:	4299      	cmp	r1, r3
10007362:	d001      	beq.n	10007368 <main+0x388>
			{
				RecordInx[0] = i;
10007364:	4651      	mov	r1, sl
10007366:	600b      	str	r3, [r1, #0]
			}

			// shift ghosts
			if (RecordInx[1] >= 0)
10007368:	2a00      	cmp	r2, #0
1000736a:	db00      	blt.n	1000736e <main+0x38e>
1000736c:	e223      	b.n	100077b6 <main+0x7d6>
1000736e:	e06b      	b.n	10007448 <main+0x468>
10007370:	10021624 	.word	0x10021624
10007374:	2001d258 	.word	0x2001d258
10007378:	100403a4 	.word	0x100403a4
1000737c:	20010be8 	.word	0x20010be8
10007380:	1000a624 	.word	0x1000a624
10007384:	20026638 	.word	0x20026638
10007388:	1002a724 	.word	0x1002a724
1000738c:	2000363c 	.word	0x2000363c
10007390:	1002e724 	.word	0x1002e724
10007394:	2000763c 	.word	0x2000763c
10007398:	10032724 	.word	0x10032724
1000739c:	2000b63c 	.word	0x2000b63c
100073a0:	10036724 	.word	0x10036724
100073a4:	20011bf0 	.word	0x20011bf0
100073a8:	10038724 	.word	0x10038724
100073ac:	20013bf0 	.word	0x20013bf0
100073b0:	1003a724 	.word	0x1003a724
100073b4:	20015bf0 	.word	0x20015bf0
100073b8:	1003c724 	.word	0x1003c724
100073bc:	20017bf0 	.word	0x20017bf0
100073c0:	10008645 	.word	0x10008645
100073c4:	00029810 	.word	0x00029810
100073c8:	2000275c 	.word	0x2000275c
100073cc:	2001b46c 	.word	0x2001b46c
100073d0:	20002774 	.word	0x20002774
100073d4:	2000f63c 	.word	0x2000f63c
100073d8:	49742400 	.word	0x49742400
100073dc:	20011bec 	.word	0x20011bec
100073e0:	40888889 	.word	0x40888889
100073e4:	41200000 	.word	0x41200000
100073e8:	20026360 	.word	0x20026360
100073ec:	20010b78 	.word	0x20010b78
100073f0:	20002780 	.word	0x20002780
100073f4:	422aaaab 	.word	0x422aaaab
100073f8:	40400000 	.word	0x40400000
100073fc:	2000f640 	.word	0x2000f640
10007400:	20019bfc 	.word	0x20019bfc
10007404:	20002758 	.word	0x20002758
10007408:	2001b390 	.word	0x2001b390
1000740c:	2001b438 	.word	0x2001b438
10007410:	20002ba4 	.word	0x20002ba4
10007414:	44200000 	.word	0x44200000
10007418:	400921fb 	.word	0x400921fb
1000741c:	54442d18 	.word	0x54442d18
10007420:	20003408 	.word	0x20003408
10007424:	000f4240 	.word	0x000f4240
10007428:	20026634 	.word	0x20026634
1000742c:	20002764 	.word	0x20002764
10007430:	2001b870 	.word	0x2001b870
10007434:	20019c44 	.word	0x20019c44
10007438:	000f423f 	.word	0x000f423f
1000743c:	2001b874 	.word	0x2001b874
10007440:	2001bc74 	.word	0x2001bc74
10007444:	2001b470 	.word	0x2001b470
			{
				RecordInx[1] = (RecordInx[1] + 1) & (RECORDMAX-1);
			}

			if (RecordInx[2] >= 0)
10007448:	4653      	mov	r3, sl
1000744a:	689b      	ldr	r3, [r3, #8]
1000744c:	2b00      	cmp	r3, #0
1000744e:	db04      	blt.n	1000745a <main+0x47a>
			{
				RecordInx[2] = (RecordInx[2] + 1) & (RECORDMAX-1);
10007450:	22ff      	movs	r2, #255	; 0xff
10007452:	3301      	adds	r3, #1
10007454:	4013      	ands	r3, r2
10007456:	4652      	mov	r2, sl
10007458:	6093      	str	r3, [r2, #8]
			}
		}

		// display info
		InfoRow();
1000745a:	f7fe f939 	bl	100056d0 <_Z7InfoRowv>

		// some delay
		sleep_ms(20);
1000745e:	2014      	movs	r0, #20
10007460:	f7fb ffe8 	bl	10003434 <sleep_ms>
10007464:	23d0      	movs	r3, #208	; 0xd0
10007466:	061b      	lsls	r3, r3, #24
10007468:	685a      	ldr	r2, [r3, #4]
1000746a:	2101      	movs	r1, #1
		t0 = t2;
1000746c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	if (!gpio_get(PB_LT))
1000746e:	02d2      	lsls	r2, r2, #11
10007470:	d500      	bpl.n	10007474 <main+0x494>
10007472:	e617      	b.n	100070a4 <main+0xc4>
		sleep_ms(250);
10007474:	20fa      	movs	r0, #250	; 0xfa
10007476:	f7fb ffdd 	bl	10003434 <sleep_ms>
			if (CarTurn > -1) CarTurn--;
1000747a:	4bd4      	ldr	r3, [pc, #848]	; (100077cc <main+0x7ec>)
1000747c:	681b      	ldr	r3, [r3, #0]
1000747e:	2b00      	cmp	r3, #0
10007480:	db02      	blt.n	10007488 <main+0x4a8>
10007482:	4ad2      	ldr	r2, [pc, #840]	; (100077cc <main+0x7ec>)
10007484:	3b01      	subs	r3, #1
10007486:	6013      	str	r3, [r2, #0]
10007488:	26d0      	movs	r6, #208	; 0xd0
1000748a:	2401      	movs	r4, #1
1000748c:	0636      	lsls	r6, r6, #24
1000748e:	6873      	ldr	r3, [r6, #4]
10007490:	0d1b      	lsrs	r3, r3, #20
	if (!gpio_get(PB_LT))
10007492:	421c      	tst	r4, r3
10007494:	d100      	bne.n	10007498 <main+0x4b8>
10007496:	e194      	b.n	100077c2 <main+0x7e2>
10007498:	6873      	ldr	r3, [r6, #4]
1000749a:	0d5b      	lsrs	r3, r3, #21
	else if (!gpio_get(PB_RT))
1000749c:	421c      	tst	r4, r3
1000749e:	d100      	bne.n	100074a2 <main+0x4c2>
100074a0:	e18f      	b.n	100077c2 <main+0x7e2>
100074a2:	6873      	ldr	r3, [r6, #4]
100074a4:	0c1b      	lsrs	r3, r3, #16
	else if (!gpio_get(PB_UP))
100074a6:	421c      	tst	r4, r3
100074a8:	d100      	bne.n	100074ac <main+0x4cc>
100074aa:	e18a      	b.n	100077c2 <main+0x7e2>
100074ac:	6873      	ldr	r3, [r6, #4]
100074ae:	0c9b      	lsrs	r3, r3, #18
	else if (!gpio_get(PB_DN))
100074b0:	421c      	tst	r4, r3
100074b2:	d100      	bne.n	100074b6 <main+0x4d6>
100074b4:	e185      	b.n	100077c2 <main+0x7e2>
	char c = getchar_timeout_us(0);
100074b6:	2000      	movs	r0, #0
100074b8:	f7fb fa40 	bl	1000293c <getchar_timeout_us>
	while (GetChar() != 0) {}
100074bc:	3801      	subs	r0, #1
100074be:	b2c0      	uxtb	r0, r0
100074c0:	28fd      	cmp	r0, #253	; 0xfd
100074c2:	d900      	bls.n	100074c6 <main+0x4e6>
100074c4:	e613      	b.n	100070ee <main+0x10e>
100074c6:	e7e2      	b.n	1000748e <main+0x4ae>
		Speed = s2;
100074c8:	4bc1      	ldr	r3, [pc, #772]	; (100077d0 <main+0x7f0>)
100074ca:	1c26      	adds	r6, r4, #0
		if (Speed != 0)
100074cc:	2100      	movs	r1, #0
		Speed = s2;
100074ce:	601e      	str	r6, [r3, #0]
		if (Speed != 0)
100074d0:	1c30      	adds	r0, r6, #0
100074d2:	f7f9 fd07 	bl	10000ee4 <__wrap___aeabi_fcmpeq>
100074d6:	2800      	cmp	r0, #0
100074d8:	d000      	beq.n	100074dc <main+0x4fc>
100074da:	e672      	b.n	100071c2 <main+0x1e2>
			float c = CarTurn*TURNSPEED * (6 - Speed/(SPEEDCOEF*10));
100074dc:	4bbb      	ldr	r3, [pc, #748]	; (100077cc <main+0x7ec>)
100074de:	6818      	ldr	r0, [r3, #0]
100074e0:	f7f9 fd28 	bl	10000f34 <__wrap___aeabi_i2f>
100074e4:	49bb      	ldr	r1, [pc, #748]	; (100077d4 <main+0x7f4>)
100074e6:	f7f9 fccf 	bl	10000e88 <__wrap___aeabi_fmul>
100074ea:	49bb      	ldr	r1, [pc, #748]	; (100077d8 <main+0x7f8>)
100074ec:	1c04      	adds	r4, r0, #0
100074ee:	1c30      	adds	r0, r6, #0
100074f0:	f7f9 fcc7 	bl	10000e82 <__wrap___aeabi_fdiv>
100074f4:	1c01      	adds	r1, r0, #0
100074f6:	48b9      	ldr	r0, [pc, #740]	; (100077dc <main+0x7fc>)
100074f8:	f7f9 fcbd 	bl	10000e76 <__wrap___aeabi_fsub>
100074fc:	1c01      	adds	r1, r0, #0
100074fe:	1c20      	adds	r0, r4, #0
10007500:	f7f9 fcc2 	bl	10000e88 <__wrap___aeabi_fmul>
			if (Speed > 0)
10007504:	2100      	movs	r1, #0
			float c = CarTurn*TURNSPEED * (6 - Speed/(SPEEDCOEF*10));
10007506:	1c04      	adds	r4, r0, #0
			if (Speed > 0)
10007508:	1c30      	adds	r0, r6, #0
1000750a:	f7f9 fd09 	bl	10000f20 <__wrap___aeabi_fcmpgt>
1000750e:	2800      	cmp	r0, #0
10007510:	d100      	bne.n	10007514 <main+0x534>
10007512:	e222      	b.n	1000795a <main+0x97a>
				CarDir += c;
10007514:	1c20      	adds	r0, r4, #0
10007516:	6839      	ldr	r1, [r7, #0]
10007518:	f7f9 fcb0 	bl	10000e7c <__wrap___aeabi_fadd>
1000751c:	1c04      	adds	r4, r0, #0
			while (CarDir < 0) CarDir += PI2;
1000751e:	2100      	movs	r1, #0
10007520:	603c      	str	r4, [r7, #0]
10007522:	1c20      	adds	r0, r4, #0
10007524:	f7f9 fce6 	bl	10000ef4 <__wrap___aeabi_fcmplt>
10007528:	2800      	cmp	r0, #0
1000752a:	d00f      	beq.n	1000754c <main+0x56c>
1000752c:	1c20      	adds	r0, r4, #0
1000752e:	f7f9 fd61 	bl	10000ff4 <__wrap___aeabi_f2d>
10007532:	4aab      	ldr	r2, [pc, #684]	; (100077e0 <main+0x800>)
10007534:	4bab      	ldr	r3, [pc, #684]	; (100077e4 <main+0x804>)
10007536:	f7f9 f983 	bl	10000840 <__wrap___aeabi_dadd>
1000753a:	f7f9 fa0d 	bl	10000958 <__wrap___aeabi_d2f>
1000753e:	2100      	movs	r1, #0
10007540:	1c04      	adds	r4, r0, #0
10007542:	f7f9 fcd7 	bl	10000ef4 <__wrap___aeabi_fcmplt>
10007546:	2800      	cmp	r0, #0
10007548:	d1f0      	bne.n	1000752c <main+0x54c>
1000754a:	603c      	str	r4, [r7, #0]
			while (CarDir >= PI2) CarDir -= PI2;
1000754c:	1c20      	adds	r0, r4, #0
1000754e:	f7f9 fd51 	bl	10000ff4 <__wrap___aeabi_f2d>
10007552:	4aa3      	ldr	r2, [pc, #652]	; (100077e0 <main+0x800>)
10007554:	4ba3      	ldr	r3, [pc, #652]	; (100077e4 <main+0x804>)
10007556:	0004      	movs	r4, r0
10007558:	000d      	movs	r5, r1
1000755a:	f7f9 f9cb 	bl	100008f4 <__wrap___aeabi_dcmpge>
1000755e:	46b0      	mov	r8, r6
10007560:	2800      	cmp	r0, #0
10007562:	d017      	beq.n	10007594 <main+0x5b4>
10007564:	4a9e      	ldr	r2, [pc, #632]	; (100077e0 <main+0x800>)
10007566:	4b9f      	ldr	r3, [pc, #636]	; (100077e4 <main+0x804>)
10007568:	0020      	movs	r0, r4
1000756a:	0029      	movs	r1, r5
1000756c:	f7f9 f95f 	bl	1000082e <__wrap___aeabi_dsub>
10007570:	f7f9 f9f2 	bl	10000958 <__wrap___aeabi_d2f>
10007574:	1c06      	adds	r6, r0, #0
10007576:	f7f9 fd3d 	bl	10000ff4 <__wrap___aeabi_f2d>
1000757a:	4a99      	ldr	r2, [pc, #612]	; (100077e0 <main+0x800>)
1000757c:	4b99      	ldr	r3, [pc, #612]	; (100077e4 <main+0x804>)
1000757e:	0004      	movs	r4, r0
10007580:	000d      	movs	r5, r1
10007582:	f7f9 f9b7 	bl	100008f4 <__wrap___aeabi_dcmpge>
10007586:	2800      	cmp	r0, #0
10007588:	d1ec      	bne.n	10007564 <main+0x584>
1000758a:	4643      	mov	r3, r8
1000758c:	46b0      	mov	r8, r6
1000758e:	1c1e      	adds	r6, r3, #0
10007590:	4643      	mov	r3, r8
10007592:	603b      	str	r3, [r7, #0]
			if (!PlayingSound())
10007594:	f002 f9ca 	bl	1000992c <_Z12PlayingSoundv>
10007598:	2800      	cmp	r0, #0
1000759a:	d100      	bne.n	1000759e <main+0x5be>
1000759c:	e1d5      	b.n	1000794a <main+0x96a>
			SpeedSound(Speed/(SPEEDCOEF*10)/5);
1000759e:	4b8c      	ldr	r3, [pc, #560]	; (100077d0 <main+0x7f0>)
100075a0:	498d      	ldr	r1, [pc, #564]	; (100077d8 <main+0x7f8>)
100075a2:	6818      	ldr	r0, [r3, #0]
100075a4:	f7f9 fc6d 	bl	10000e82 <__wrap___aeabi_fdiv>
100075a8:	498f      	ldr	r1, [pc, #572]	; (100077e8 <main+0x808>)
100075aa:	f7f9 fc6a 	bl	10000e82 <__wrap___aeabi_fdiv>
100075ae:	f002 f9ad 	bl	1000990c <_Z10SpeedSoundf>
		switch (CarTurn)
100075b2:	4b86      	ldr	r3, [pc, #536]	; (100077cc <main+0x7ec>)
100075b4:	681b      	ldr	r3, [r3, #0]
100075b6:	1c5a      	adds	r2, r3, #1
100075b8:	d000      	beq.n	100075bc <main+0x5dc>
100075ba:	e609      	b.n	100071d0 <main+0x1f0>
			LayerScreen[CARLAYER].img = Car2Img_Copy;
100075bc:	4b8b      	ldr	r3, [pc, #556]	; (100077ec <main+0x80c>)
100075be:	4a8c      	ldr	r2, [pc, #560]	; (100077f0 <main+0x810>)
100075c0:	625a      	str	r2, [r3, #36]	; 0x24
			break;
100075c2:	e60b      	b.n	100071dc <main+0x1fc>
				float x1 = RecordX[i];
100075c4:	4a8b      	ldr	r2, [pc, #556]	; (100077f4 <main+0x814>)
100075c6:	00a3      	lsls	r3, r4, #2
100075c8:	58d5      	ldr	r5, [r2, r3]
100075ca:	930d      	str	r3, [sp, #52]	; 0x34
				float x2 = RecordX[(i+1)&(RECORDMAX-1)];
100075cc:	23ff      	movs	r3, #255	; 0xff
				float x = (x2 - x1)*dif/1000000 + x1;
100075ce:	9808      	ldr	r0, [sp, #32]
				float x2 = RecordX[(i+1)&(RECORDMAX-1)];
100075d0:	3401      	adds	r4, #1
100075d2:	401c      	ands	r4, r3
				float x = (x2 - x1)*dif/1000000 + x1;
100075d4:	f7f9 fcae 	bl	10000f34 <__wrap___aeabi_i2f>
100075d8:	4a86      	ldr	r2, [pc, #536]	; (100077f4 <main+0x814>)
				float x2 = RecordX[(i+1)&(RECORDMAX-1)];
100075da:	00a4      	lsls	r4, r4, #2
				float x = (x2 - x1)*dif/1000000 + x1;
100075dc:	1c06      	adds	r6, r0, #0
100075de:	1c29      	adds	r1, r5, #0
100075e0:	5910      	ldr	r0, [r2, r4]
100075e2:	f7f9 fc48 	bl	10000e76 <__wrap___aeabi_fsub>
100075e6:	1c31      	adds	r1, r6, #0
100075e8:	f7f9 fc4e 	bl	10000e88 <__wrap___aeabi_fmul>
100075ec:	4982      	ldr	r1, [pc, #520]	; (100077f8 <main+0x818>)
100075ee:	f7f9 fc48 	bl	10000e82 <__wrap___aeabi_fdiv>
100075f2:	1c29      	adds	r1, r5, #0
100075f4:	f7f9 fc42 	bl	10000e7c <__wrap___aeabi_fadd>
				x = x - CarX;
100075f8:	4a80      	ldr	r2, [pc, #512]	; (100077fc <main+0x81c>)
100075fa:	6811      	ldr	r1, [r2, #0]
100075fc:	f7f9 fc3b 	bl	10000e76 <__wrap___aeabi_fsub>
				float y1 = RecordY[i];
10007600:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10007602:	4a7f      	ldr	r2, [pc, #508]	; (10007800 <main+0x820>)
				x = x - CarX;
10007604:	1c05      	adds	r5, r0, #0
				float y1 = RecordY[i];
10007606:	58d2      	ldr	r2, [r2, r3]
10007608:	4690      	mov	r8, r2
				float y = (y2 - y1)*dif/1000000 + y1;
1000760a:	1c11      	adds	r1, r2, #0
1000760c:	4a7c      	ldr	r2, [pc, #496]	; (10007800 <main+0x820>)
1000760e:	5910      	ldr	r0, [r2, r4]
10007610:	f7f9 fc31 	bl	10000e76 <__wrap___aeabi_fsub>
10007614:	1c31      	adds	r1, r6, #0
10007616:	f7f9 fc37 	bl	10000e88 <__wrap___aeabi_fmul>
1000761a:	4977      	ldr	r1, [pc, #476]	; (100077f8 <main+0x818>)
1000761c:	f7f9 fc31 	bl	10000e82 <__wrap___aeabi_fdiv>
10007620:	4641      	mov	r1, r8
10007622:	f7f9 fc2b 	bl	10000e7c <__wrap___aeabi_fadd>
				y = y - CarY;
10007626:	464a      	mov	r2, r9
10007628:	6811      	ldr	r1, [r2, #0]
1000762a:	f7f9 fc24 	bl	10000e76 <__wrap___aeabi_fsub>
				float d = RecordDir[i];
1000762e:	4a75      	ldr	r2, [pc, #468]	; (10007804 <main+0x824>)
10007630:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  { return __builtin_atan2f(__y, __x); }
10007632:	1c29      	adds	r1, r5, #0
10007634:	58d3      	ldr	r3, [r2, r3]
				y = y - CarY;
10007636:	1c04      	adds	r4, r0, #0
				float d = RecordDir[i];
10007638:	930f      	str	r3, [sp, #60]	; 0x3c
1000763a:	f7f9 fd2b 	bl	10001094 <__wrap_atan2f>
				float k = sqrt(y*y + x*x);
1000763e:	1c21      	adds	r1, r4, #0
10007640:	4680      	mov	r8, r0
10007642:	1c20      	adds	r0, r4, #0
10007644:	f7f9 fc20 	bl	10000e88 <__wrap___aeabi_fmul>
10007648:	1c29      	adds	r1, r5, #0
1000764a:	1c04      	adds	r4, r0, #0
1000764c:	1c28      	adds	r0, r5, #0
1000764e:	f7f9 fc1b 	bl	10000e88 <__wrap___aeabi_fmul>
10007652:	1c01      	adds	r1, r0, #0
10007654:	1c20      	adds	r0, r4, #0
10007656:	f7f9 fc11 	bl	10000e7c <__wrap___aeabi_fadd>
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
1000765a:	f7f9 fcd5 	bl	10001008 <__wrap_sqrtf>
				if (k < 1) k = 1;
1000765e:	21fe      	movs	r1, #254	; 0xfe
10007660:	0589      	lsls	r1, r1, #22
10007662:	900d      	str	r0, [sp, #52]	; 0x34
10007664:	f7f9 fc46 	bl	10000ef4 <__wrap___aeabi_fcmplt>
10007668:	2800      	cmp	r0, #0
1000766a:	d002      	beq.n	10007672 <main+0x692>
1000766c:	23fe      	movs	r3, #254	; 0xfe
1000766e:	059b      	lsls	r3, r3, #22
10007670:	930d      	str	r3, [sp, #52]	; 0x34
				a = a - CarDir + PI/2;
10007672:	6839      	ldr	r1, [r7, #0]
10007674:	4640      	mov	r0, r8
10007676:	f7f9 fbfe 	bl	10000e76 <__wrap___aeabi_fsub>
1000767a:	f7f9 fcbb 	bl	10000ff4 <__wrap___aeabi_f2d>
1000767e:	4a58      	ldr	r2, [pc, #352]	; (100077e0 <main+0x800>)
10007680:	4b61      	ldr	r3, [pc, #388]	; (10007808 <main+0x828>)
10007682:	e003      	b.n	1000768c <main+0x6ac>
				while (a < -PI) a += PI2;
10007684:	0020      	movs	r0, r4
10007686:	0029      	movs	r1, r5
10007688:	4a55      	ldr	r2, [pc, #340]	; (100077e0 <main+0x800>)
1000768a:	4b56      	ldr	r3, [pc, #344]	; (100077e4 <main+0x804>)
				a = a - CarDir + PI/2;
1000768c:	f7f9 f8d8 	bl	10000840 <__wrap___aeabi_dadd>
10007690:	f7f9 f962 	bl	10000958 <__wrap___aeabi_d2f>
10007694:	1c06      	adds	r6, r0, #0
				while (a < -PI) a += PI2;
10007696:	f7f9 fcad 	bl	10000ff4 <__wrap___aeabi_f2d>
1000769a:	4a51      	ldr	r2, [pc, #324]	; (100077e0 <main+0x800>)
1000769c:	4b5b      	ldr	r3, [pc, #364]	; (1000780c <main+0x82c>)
1000769e:	0004      	movs	r4, r0
100076a0:	000d      	movs	r5, r1
100076a2:	f7f9 f921 	bl	100008e8 <__wrap___aeabi_dcmplt>
100076a6:	2800      	cmp	r0, #0
100076a8:	d1ec      	bne.n	10007684 <main+0x6a4>
				while (a > PI) a -= PI2;
100076aa:	0020      	movs	r0, r4
100076ac:	0029      	movs	r1, r5
100076ae:	4a4c      	ldr	r2, [pc, #304]	; (100077e0 <main+0x800>)
100076b0:	4b57      	ldr	r3, [pc, #348]	; (10007810 <main+0x830>)
100076b2:	f7f9 f927 	bl	10000904 <__wrap___aeabi_dcmpgt>
100076b6:	2800      	cmp	r0, #0
100076b8:	d014      	beq.n	100076e4 <main+0x704>
100076ba:	4a49      	ldr	r2, [pc, #292]	; (100077e0 <main+0x800>)
100076bc:	4b49      	ldr	r3, [pc, #292]	; (100077e4 <main+0x804>)
100076be:	0020      	movs	r0, r4
100076c0:	0029      	movs	r1, r5
100076c2:	f7f9 f8b4 	bl	1000082e <__wrap___aeabi_dsub>
100076c6:	f7f9 f947 	bl	10000958 <__wrap___aeabi_d2f>
100076ca:	1c06      	adds	r6, r0, #0
100076cc:	f7f9 fc92 	bl	10000ff4 <__wrap___aeabi_f2d>
100076d0:	0004      	movs	r4, r0
100076d2:	000d      	movs	r5, r1
100076d4:	0020      	movs	r0, r4
100076d6:	0029      	movs	r1, r5
100076d8:	4a41      	ldr	r2, [pc, #260]	; (100077e0 <main+0x800>)
100076da:	4b4d      	ldr	r3, [pc, #308]	; (10007810 <main+0x830>)
100076dc:	f7f9 f912 	bl	10000904 <__wrap___aeabi_dcmpgt>
100076e0:	2800      	cmp	r0, #0
100076e2:	d1ea      	bne.n	100076ba <main+0x6da>
				if ((a < -PI/3) || (a > PI/3))
100076e4:	0020      	movs	r0, r4
100076e6:	0029      	movs	r1, r5
100076e8:	4a4a      	ldr	r2, [pc, #296]	; (10007814 <main+0x834>)
100076ea:	4b4b      	ldr	r3, [pc, #300]	; (10007818 <main+0x838>)
100076ec:	f7f9 f8fc 	bl	100008e8 <__wrap___aeabi_dcmplt>
100076f0:	2800      	cmp	r0, #0
100076f2:	d108      	bne.n	10007706 <main+0x726>
100076f4:	0020      	movs	r0, r4
100076f6:	0029      	movs	r1, r5
100076f8:	4a46      	ldr	r2, [pc, #280]	; (10007814 <main+0x834>)
100076fa:	4b48      	ldr	r3, [pc, #288]	; (1000781c <main+0x83c>)
100076fc:	f7f9 f902 	bl	10000904 <__wrap___aeabi_dcmpgt>
10007700:	2800      	cmp	r0, #0
10007702:	d100      	bne.n	10007706 <main+0x726>
10007704:	e12f      	b.n	10007966 <main+0x986>
					LayerOff(ghost+1);
10007706:	466b      	mov	r3, sp
10007708:	2230      	movs	r2, #48	; 0x30
1000770a:	189b      	adds	r3, r3, r2
1000770c:	7818      	ldrb	r0, [r3, #0]
1000770e:	f000 ffe3 	bl	100086d8 <_Z8LayerOffh>
		for (ghost = 1; ghost <= 2; ghost++)
10007712:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10007714:	2b03      	cmp	r3, #3
10007716:	d100      	bne.n	1000771a <main+0x73a>
10007718:	e5f9      	b.n	1000730e <main+0x32e>
1000771a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000771c:	3324      	adds	r3, #36	; 0x24
1000771e:	930e      	str	r3, [sp, #56]	; 0x38
10007720:	2303      	movs	r3, #3
10007722:	930c      	str	r3, [sp, #48]	; 0x30
10007724:	e5ee      	b.n	10007304 <main+0x324>
			switch (tile)
10007726:	2b03      	cmp	r3, #3
10007728:	d100      	bne.n	1000772c <main+0x74c>
1000772a:	e21f      	b.n	10007b6c <main+0xb8c>
1000772c:	d80c      	bhi.n	10007748 <main+0x768>
1000772e:	2b01      	cmp	r3, #1
10007730:	d100      	bne.n	10007734 <main+0x754>
10007732:	e255      	b.n	10007be0 <main+0xc00>
10007734:	2b02      	cmp	r3, #2
10007736:	d000      	beq.n	1000773a <main+0x75a>
10007738:	e5da      	b.n	100072f0 <main+0x310>
				CheckOK[0] = True;
1000773a:	2301      	movs	r3, #1
1000773c:	4a38      	ldr	r2, [pc, #224]	; (10007820 <main+0x840>)
1000773e:	7013      	strb	r3, [r2, #0]
				CheckNext = CHECKB;
10007740:	4a38      	ldr	r2, [pc, #224]	; (10007824 <main+0x844>)
10007742:	3302      	adds	r3, #2
10007744:	6013      	str	r3, [r2, #0]
				break;
10007746:	e5d3      	b.n	100072f0 <main+0x310>
			switch (tile)
10007748:	2b04      	cmp	r3, #4
1000774a:	d000      	beq.n	1000774e <main+0x76e>
1000774c:	e5d0      	b.n	100072f0 <main+0x310>
				CheckOK[2] = True;
1000774e:	2301      	movs	r3, #1
10007750:	4a33      	ldr	r2, [pc, #204]	; (10007820 <main+0x840>)
10007752:	7093      	strb	r3, [r2, #2]
				CheckNext = START;
10007754:	4a33      	ldr	r2, [pc, #204]	; (10007824 <main+0x844>)
10007756:	6013      	str	r3, [r2, #0]
				break;
10007758:	e5ca      	b.n	100072f0 <main+0x310>
			LayerScreen[CARLAYER].img = Car1Img_Copy;
1000775a:	4b24      	ldr	r3, [pc, #144]	; (100077ec <main+0x80c>)
1000775c:	4a32      	ldr	r2, [pc, #200]	; (10007828 <main+0x848>)
1000775e:	625a      	str	r2, [r3, #36]	; 0x24
			break;
10007760:	e53c      	b.n	100071dc <main+0x1fc>
		sleep_ms(250);
10007762:	20fa      	movs	r0, #250	; 0xfa
10007764:	f7fb fe66 	bl	10003434 <sleep_ms>
			if (CarTurn < 1) CarTurn++;
10007768:	4b18      	ldr	r3, [pc, #96]	; (100077cc <main+0x7ec>)
1000776a:	681b      	ldr	r3, [r3, #0]
1000776c:	2b00      	cmp	r3, #0
1000776e:	dc02      	bgt.n	10007776 <main+0x796>
10007770:	4a16      	ldr	r2, [pc, #88]	; (100077cc <main+0x7ec>)
10007772:	3301      	adds	r3, #1
10007774:	6013      	str	r3, [r2, #0]
10007776:	26d0      	movs	r6, #208	; 0xd0
10007778:	2401      	movs	r4, #1
1000777a:	0636      	lsls	r6, r6, #24
1000777c:	6873      	ldr	r3, [r6, #4]
1000777e:	0d1b      	lsrs	r3, r3, #20
	if (!gpio_get(PB_LT))
10007780:	421c      	tst	r4, r3
10007782:	d014      	beq.n	100077ae <main+0x7ce>
10007784:	6873      	ldr	r3, [r6, #4]
10007786:	0d5b      	lsrs	r3, r3, #21
	else if (!gpio_get(PB_RT))
10007788:	421c      	tst	r4, r3
1000778a:	d010      	beq.n	100077ae <main+0x7ce>
1000778c:	6873      	ldr	r3, [r6, #4]
1000778e:	0c1b      	lsrs	r3, r3, #16
	else if (!gpio_get(PB_UP))
10007790:	421c      	tst	r4, r3
10007792:	d00c      	beq.n	100077ae <main+0x7ce>
10007794:	6873      	ldr	r3, [r6, #4]
10007796:	0c9b      	lsrs	r3, r3, #18
	else if (!gpio_get(PB_DN))
10007798:	421c      	tst	r4, r3
1000779a:	d008      	beq.n	100077ae <main+0x7ce>
	char c = getchar_timeout_us(0);
1000779c:	2000      	movs	r0, #0
1000779e:	f7fb f8cd 	bl	1000293c <getchar_timeout_us>
	while (GetChar() != 0) {}
100077a2:	3801      	subs	r0, #1
100077a4:	b2c0      	uxtb	r0, r0
100077a6:	28fd      	cmp	r0, #253	; 0xfd
100077a8:	d900      	bls.n	100077ac <main+0x7cc>
100077aa:	e4a0      	b.n	100070ee <main+0x10e>
100077ac:	e7e6      	b.n	1000777c <main+0x79c>
		sleep_ms(250);
100077ae:	20fa      	movs	r0, #250	; 0xfa
100077b0:	f7fb fe40 	bl	10003434 <sleep_ms>
		return (rVal);
100077b4:	e7e2      	b.n	1000777c <main+0x79c>
				RecordInx[1] = (RecordInx[1] + 1) & (RECORDMAX-1);
100077b6:	23ff      	movs	r3, #255	; 0xff
100077b8:	3201      	adds	r2, #1
100077ba:	401a      	ands	r2, r3
100077bc:	4653      	mov	r3, sl
100077be:	605a      	str	r2, [r3, #4]
100077c0:	e642      	b.n	10007448 <main+0x468>
		sleep_ms(250);
100077c2:	20fa      	movs	r0, #250	; 0xfa
100077c4:	f7fb fe36 	bl	10003434 <sleep_ms>
		return (rVal);
100077c8:	e661      	b.n	1000748e <main+0x4ae>
100077ca:	46c0      	nop			; (mov r8, r8)
100077cc:	2000f640 	.word	0x2000f640
100077d0:	20026360 	.word	0x20026360
100077d4:	3b83126f 	.word	0x3b83126f
100077d8:	422aaaab 	.word	0x422aaaab
100077dc:	40c00000 	.word	0x40c00000
100077e0:	54442d18 	.word	0x54442d18
100077e4:	401921fb 	.word	0x401921fb
100077e8:	40a00000 	.word	0x40a00000
100077ec:	20019bfc 	.word	0x20019bfc
100077f0:	2000763c 	.word	0x2000763c
100077f4:	2001b874 	.word	0x2001b874
100077f8:	49742400 	.word	0x49742400
100077fc:	20002758 	.word	0x20002758
10007800:	2001bc74 	.word	0x2001bc74
10007804:	2001b470 	.word	0x2001b470
10007808:	3ff921fb 	.word	0x3ff921fb
1000780c:	c00921fb 	.word	0xc00921fb
10007810:	400921fb 	.word	0x400921fb
10007814:	382d7365 	.word	0x382d7365
10007818:	bff0c152 	.word	0xbff0c152
1000781c:	3ff0c152 	.word	0x3ff0c152
10007820:	2000f660 	.word	0x2000f660
10007824:	20002764 	.word	0x20002764
10007828:	2000363c 	.word	0x2000363c
		sleep_ms(250);
1000782c:	20fa      	movs	r0, #250	; 0xfa
1000782e:	f7fb fe01 	bl	10003434 <sleep_ms>
			Gear++;
10007832:	4bd2      	ldr	r3, [pc, #840]	; (10007b7c <main+0xb9c>)
10007834:	681b      	ldr	r3, [r3, #0]
10007836:	9308      	str	r3, [sp, #32]
10007838:	3301      	adds	r3, #1
			if (Gear > GEARMAX) Gear = GEARMAX;
1000783a:	2b05      	cmp	r3, #5
1000783c:	dd00      	ble.n	10007840 <main+0x860>
1000783e:	2305      	movs	r3, #5
10007840:	26d0      	movs	r6, #208	; 0xd0
10007842:	2401      	movs	r4, #1
10007844:	4acd      	ldr	r2, [pc, #820]	; (10007b7c <main+0xb9c>)
10007846:	0636      	lsls	r6, r6, #24
10007848:	6013      	str	r3, [r2, #0]
1000784a:	6873      	ldr	r3, [r6, #4]
1000784c:	0d1b      	lsrs	r3, r3, #20
	if (!gpio_get(PB_LT))
1000784e:	421c      	tst	r4, r3
10007850:	d014      	beq.n	1000787c <main+0x89c>
10007852:	6873      	ldr	r3, [r6, #4]
10007854:	0d5b      	lsrs	r3, r3, #21
	else if (!gpio_get(PB_RT))
10007856:	421c      	tst	r4, r3
10007858:	d010      	beq.n	1000787c <main+0x89c>
1000785a:	6873      	ldr	r3, [r6, #4]
1000785c:	0c1b      	lsrs	r3, r3, #16
	else if (!gpio_get(PB_UP))
1000785e:	421c      	tst	r4, r3
10007860:	d00c      	beq.n	1000787c <main+0x89c>
10007862:	6873      	ldr	r3, [r6, #4]
10007864:	0c9b      	lsrs	r3, r3, #18
	else if (!gpio_get(PB_DN))
10007866:	421c      	tst	r4, r3
10007868:	d008      	beq.n	1000787c <main+0x89c>
	char c = getchar_timeout_us(0);
1000786a:	2000      	movs	r0, #0
1000786c:	f7fb f866 	bl	1000293c <getchar_timeout_us>
	while (GetChar() != 0) {}
10007870:	3801      	subs	r0, #1
10007872:	b2c0      	uxtb	r0, r0
10007874:	28fd      	cmp	r0, #253	; 0xfd
10007876:	d900      	bls.n	1000787a <main+0x89a>
10007878:	e439      	b.n	100070ee <main+0x10e>
1000787a:	e7e6      	b.n	1000784a <main+0x86a>
		sleep_ms(250);
1000787c:	20fa      	movs	r0, #250	; 0xfa
1000787e:	f7fb fdd9 	bl	10003434 <sleep_ms>
		return (rVal);
10007882:	e7e2      	b.n	1000784a <main+0x86a>
		sleep_ms(250);
10007884:	20fa      	movs	r0, #250	; 0xfa
10007886:	f7fb fdd5 	bl	10003434 <sleep_ms>
			Gear--;
1000788a:	4bbc      	ldr	r3, [pc, #752]	; (10007b7c <main+0xb9c>)
1000788c:	681b      	ldr	r3, [r3, #0]
1000788e:	9308      	str	r3, [sp, #32]
			if (Gear < GEARMIN) Gear = GEARMIN;
10007890:	3b01      	subs	r3, #1
10007892:	d500      	bpl.n	10007896 <main+0x8b6>
10007894:	2300      	movs	r3, #0
10007896:	26d0      	movs	r6, #208	; 0xd0
10007898:	2401      	movs	r4, #1
1000789a:	4ab8      	ldr	r2, [pc, #736]	; (10007b7c <main+0xb9c>)
1000789c:	0636      	lsls	r6, r6, #24
1000789e:	6013      	str	r3, [r2, #0]
100078a0:	6873      	ldr	r3, [r6, #4]
100078a2:	0d1b      	lsrs	r3, r3, #20
	if (!gpio_get(PB_LT))
100078a4:	421c      	tst	r4, r3
100078a6:	d014      	beq.n	100078d2 <main+0x8f2>
100078a8:	6873      	ldr	r3, [r6, #4]
100078aa:	0d5b      	lsrs	r3, r3, #21
	else if (!gpio_get(PB_RT))
100078ac:	421c      	tst	r4, r3
100078ae:	d010      	beq.n	100078d2 <main+0x8f2>
100078b0:	6873      	ldr	r3, [r6, #4]
100078b2:	0c1b      	lsrs	r3, r3, #16
	else if (!gpio_get(PB_UP))
100078b4:	421c      	tst	r4, r3
100078b6:	d00c      	beq.n	100078d2 <main+0x8f2>
100078b8:	6873      	ldr	r3, [r6, #4]
100078ba:	0c9b      	lsrs	r3, r3, #18
	else if (!gpio_get(PB_DN))
100078bc:	421c      	tst	r4, r3
100078be:	d008      	beq.n	100078d2 <main+0x8f2>
	char c = getchar_timeout_us(0);
100078c0:	2000      	movs	r0, #0
100078c2:	f7fb f83b 	bl	1000293c <getchar_timeout_us>
	while (GetChar() != 0) {}
100078c6:	3801      	subs	r0, #1
100078c8:	b2c0      	uxtb	r0, r0
100078ca:	28fd      	cmp	r0, #253	; 0xfd
100078cc:	d900      	bls.n	100078d0 <main+0x8f0>
100078ce:	e40e      	b.n	100070ee <main+0x10e>
100078d0:	e7e6      	b.n	100078a0 <main+0x8c0>
		sleep_ms(250);
100078d2:	20fa      	movs	r0, #250	; 0xfa
100078d4:	f7fb fdae 	bl	10003434 <sleep_ms>
		return (rVal);
100078d8:	e7e2      	b.n	100078a0 <main+0x8c0>
		switch (GetChar())
100078da:	284b      	cmp	r0, #75	; 0x4b
100078dc:	d0d5      	beq.n	1000788a <main+0x8aa>
100078de:	284c      	cmp	r0, #76	; 0x4c
100078e0:	d100      	bne.n	100078e4 <main+0x904>
100078e2:	e741      	b.n	10007768 <main+0x788>
100078e4:	284a      	cmp	r0, #74	; 0x4a
100078e6:	d100      	bne.n	100078ea <main+0x90a>
100078e8:	e5c7      	b.n	1000747a <main+0x49a>
			printf("\nKeys:\n");
100078ea:	48a5      	ldr	r0, [pc, #660]	; (10007b80 <main+0xba0>)
100078ec:	f7fa ffe6 	bl	100028bc <__wrap_puts>
			printf("Up ... shift gear up\n");
100078f0:	48a4      	ldr	r0, [pc, #656]	; (10007b84 <main+0xba4>)
100078f2:	f7fa ffe3 	bl	100028bc <__wrap_puts>
			printf("Down ... shift gear down\n");
100078f6:	48a4      	ldr	r0, [pc, #656]	; (10007b88 <main+0xba8>)
100078f8:	f7fa ffe0 	bl	100028bc <__wrap_puts>
			printf("Left ... turn left\n");
100078fc:	48a3      	ldr	r0, [pc, #652]	; (10007b8c <main+0xbac>)
100078fe:	f7fa ffdd 	bl	100028bc <__wrap_puts>
10007902:	26d0      	movs	r6, #208	; 0xd0
			printf("Right ... turn right\n");
10007904:	48a2      	ldr	r0, [pc, #648]	; (10007b90 <main+0xbb0>)
10007906:	f7fa ffd9 	bl	100028bc <__wrap_puts>
1000790a:	2401      	movs	r4, #1
1000790c:	0636      	lsls	r6, r6, #24
1000790e:	6873      	ldr	r3, [r6, #4]
10007910:	0d1b      	lsrs	r3, r3, #20
	if (!gpio_get(PB_LT))
10007912:	421c      	tst	r4, r3
10007914:	d015      	beq.n	10007942 <main+0x962>
10007916:	6873      	ldr	r3, [r6, #4]
10007918:	0d5b      	lsrs	r3, r3, #21
	else if (!gpio_get(PB_RT))
1000791a:	421c      	tst	r4, r3
1000791c:	d011      	beq.n	10007942 <main+0x962>
1000791e:	6873      	ldr	r3, [r6, #4]
10007920:	0c1b      	lsrs	r3, r3, #16
	else if (!gpio_get(PB_UP))
10007922:	421c      	tst	r4, r3
10007924:	d00d      	beq.n	10007942 <main+0x962>
10007926:	6873      	ldr	r3, [r6, #4]
10007928:	0c9b      	lsrs	r3, r3, #18
	else if (!gpio_get(PB_DN))
1000792a:	421c      	tst	r4, r3
1000792c:	d009      	beq.n	10007942 <main+0x962>
	char c = getchar_timeout_us(0);
1000792e:	2000      	movs	r0, #0
10007930:	f7fb f804 	bl	1000293c <getchar_timeout_us>
	while (GetChar() != 0) {}
10007934:	3801      	subs	r0, #1
10007936:	b2c0      	uxtb	r0, r0
10007938:	28fd      	cmp	r0, #253	; 0xfd
1000793a:	d901      	bls.n	10007940 <main+0x960>
1000793c:	f7ff fbd7 	bl	100070ee <main+0x10e>
10007940:	e7e5      	b.n	1000790e <main+0x92e>
		sleep_ms(250);
10007942:	20fa      	movs	r0, #250	; 0xfa
10007944:	f7fb fd76 	bl	10003434 <sleep_ms>
		return (rVal);
10007948:	e7e1      	b.n	1000790e <main+0x92e>
				PlaySound(EngineSnd, sizeof(EngineSnd), True, 1.0f);
1000794a:	23fe      	movs	r3, #254	; 0xfe
1000794c:	2201      	movs	r2, #1
1000794e:	4991      	ldr	r1, [pc, #580]	; (10007b94 <main+0xbb4>)
10007950:	4891      	ldr	r0, [pc, #580]	; (10007b98 <main+0xbb8>)
10007952:	059b      	lsls	r3, r3, #22
10007954:	f001 ff9a 	bl	1000988c <_Z9PlaySoundPKhihf>
10007958:	e621      	b.n	1000759e <main+0x5be>
				CarDir -= c;
1000795a:	1c21      	adds	r1, r4, #0
1000795c:	6838      	ldr	r0, [r7, #0]
1000795e:	f7f9 fa8a 	bl	10000e76 <__wrap___aeabi_fsub>
10007962:	1c04      	adds	r4, r0, #0
10007964:	e5db      	b.n	1000751e <main+0x53e>
					float s = 400/(k+200);
10007966:	498d      	ldr	r1, [pc, #564]	; (10007b9c <main+0xbbc>)
10007968:	980d      	ldr	r0, [sp, #52]	; 0x34
1000796a:	f7f9 fa87 	bl	10000e7c <__wrap___aeabi_fadd>
1000796e:	1c01      	adds	r1, r0, #0
10007970:	488b      	ldr	r0, [pc, #556]	; (10007ba0 <main+0xbc0>)
10007972:	f7f9 fa86 	bl	10000e82 <__wrap___aeabi_fdiv>
					int wd = (int)(GHOSTW*s);
10007976:	2186      	movs	r1, #134	; 0x86
10007978:	05c9      	lsls	r1, r1, #23
					float s = 400/(k+200);
1000797a:	1c04      	adds	r4, r0, #0
					int wd = (int)(GHOSTW*s);
1000797c:	f7f9 fa84 	bl	10000e88 <__wrap___aeabi_fmul>
10007980:	f7f9 fafa 	bl	10000f78 <__wrap___aeabi_f2iz>
					int hd = (int)(GHOSTH*s);
10007984:	2185      	movs	r1, #133	; 0x85
					int wd = (int)(GHOSTW*s);
10007986:	0005      	movs	r5, r0
					int hd = (int)(GHOSTH*s);
10007988:	05c9      	lsls	r1, r1, #23
1000798a:	1c20      	adds	r0, r4, #0
1000798c:	f7f9 fa7c 	bl	10000e88 <__wrap___aeabi_fmul>
10007990:	f7f9 faf2 	bl	10000f78 <__wrap___aeabi_f2iz>
10007994:	9010      	str	r0, [sp, #64]	; 0x40
					if (wd < 50) wd = 0;
10007996:	2d31      	cmp	r5, #49	; 0x31
10007998:	dc00      	bgt.n	1000799c <main+0x9bc>
1000799a:	e17e      	b.n	10007c9a <main+0xcba>
					wd = ALIGN4(wd);
1000799c:	2303      	movs	r3, #3
1000799e:	439d      	bics	r5, r3
					int x0 = (int)((tan(a) + 1)*WIDTH/2) - wd/2;
100079a0:	46ac      	mov	ip, r5
100079a2:	0feb      	lsrs	r3, r5, #31
100079a4:	4463      	add	r3, ip
100079a6:	105b      	asrs	r3, r3, #1
100079a8:	425b      	negs	r3, r3
100079aa:	9313      	str	r3, [sp, #76]	; 0x4c
					if (ghost == 1)
100079ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					wd = ALIGN4(wd);
100079ae:	9511      	str	r5, [sp, #68]	; 0x44
					LayerSetW(ghost+1, wd);
100079b0:	b2ac      	uxth	r4, r5
					if (ghost == 1)
100079b2:	2b02      	cmp	r3, #2
100079b4:	d100      	bne.n	100079b8 <main+0x9d8>
100079b6:	e178      	b.n	10007caa <main+0xcca>
						Mat4.PrepDrawImg(GHOSTW, GHOSTH, 0, 0, wd, hd, 0, 0, 0, GHOSTW/2, GHOSTH/2);
100079b8:	2384      	movs	r3, #132	; 0x84
100079ba:	05db      	lsls	r3, r3, #23
100079bc:	9307      	str	r3, [sp, #28]
100079be:	2385      	movs	r3, #133	; 0x85
100079c0:	05db      	lsls	r3, r3, #23
100079c2:	9306      	str	r3, [sp, #24]
100079c4:	2300      	movs	r3, #0
100079c6:	9305      	str	r3, [sp, #20]
100079c8:	9304      	str	r3, [sp, #16]
100079ca:	9303      	str	r3, [sp, #12]
100079cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
100079ce:	2180      	movs	r1, #128	; 0x80
100079d0:	9302      	str	r3, [sp, #8]
100079d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
100079d4:	4873      	ldr	r0, [pc, #460]	; (10007ba4 <main+0xbc4>)
100079d6:	9301      	str	r3, [sp, #4]
100079d8:	2300      	movs	r3, #0
100079da:	2240      	movs	r2, #64	; 0x40
100079dc:	9300      	str	r3, [sp, #0]
100079de:	f001 fc19 	bl	10009214 <_ZN7cMat2Df11PrepDrawImgEiiiiiifffff>
						Mat4.ExportInt(Mat4Int);
100079e2:	4971      	ldr	r1, [pc, #452]	; (10007ba8 <main+0xbc8>)
100079e4:	486f      	ldr	r0, [pc, #444]	; (10007ba4 <main+0xbc4>)
100079e6:	f001 fd0f 	bl	10009408 <_ZNK7cMat2Df9ExportIntEPi>
					LayerSetW(ghost+1, wd);
100079ea:	2230      	movs	r2, #48	; 0x30
100079ec:	466b      	mov	r3, sp
100079ee:	189b      	adds	r3, r3, r2
100079f0:	781b      	ldrb	r3, [r3, #0]
100079f2:	0021      	movs	r1, r4
100079f4:	0018      	movs	r0, r3
100079f6:	001c      	movs	r4, r3
100079f8:	9312      	str	r3, [sp, #72]	; 0x48
100079fa:	f000 fed5 	bl	100087a8 <_Z9LayerSetWht>
					LayerScreen[ghost+1].wb = GHOSTW;
100079fe:	2380      	movs	r3, #128	; 0x80
10007a00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
					LayerSetH(ghost+1, hd);
10007a02:	0020      	movs	r0, r4
					LayerScreen[ghost+1].wb = GHOSTW;
10007a04:	8353      	strh	r3, [r2, #26]
					LayerSetH(ghost+1, hd);
10007a06:	2240      	movs	r2, #64	; 0x40
10007a08:	466b      	mov	r3, sp
10007a0a:	189b      	adds	r3, r3, r2
10007a0c:	8819      	ldrh	r1, [r3, #0]
10007a0e:	f000 ff2b 	bl	10008868 <_Z9LayerSetHht>
					d -= a0 + PI/2;
10007a12:	980f      	ldr	r0, [sp, #60]	; 0x3c
10007a14:	f7f9 faee 	bl	10000ff4 <__wrap___aeabi_f2d>
10007a18:	0004      	movs	r4, r0
10007a1a:	4640      	mov	r0, r8
10007a1c:	000d      	movs	r5, r1
10007a1e:	f7f9 fae9 	bl	10000ff4 <__wrap___aeabi_f2d>
10007a22:	4a62      	ldr	r2, [pc, #392]	; (10007bac <main+0xbcc>)
10007a24:	4b62      	ldr	r3, [pc, #392]	; (10007bb0 <main+0xbd0>)
10007a26:	f7f8 ff0b 	bl	10000840 <__wrap___aeabi_dadd>
10007a2a:	0002      	movs	r2, r0
10007a2c:	000b      	movs	r3, r1
10007a2e:	0020      	movs	r0, r4
10007a30:	0029      	movs	r1, r5
10007a32:	f7f8 fefc 	bl	1000082e <__wrap___aeabi_dsub>
10007a36:	f7f8 ff8f 	bl	10000958 <__wrap___aeabi_d2f>
10007a3a:	4680      	mov	r8, r0
					while (d < -PI) d += PI2;
10007a3c:	f7f9 fada 	bl	10000ff4 <__wrap___aeabi_f2d>
10007a40:	4a5a      	ldr	r2, [pc, #360]	; (10007bac <main+0xbcc>)
10007a42:	4b5c      	ldr	r3, [pc, #368]	; (10007bb4 <main+0xbd4>)
10007a44:	0004      	movs	r4, r0
10007a46:	000d      	movs	r5, r1
10007a48:	f7f8 ff4e 	bl	100008e8 <__wrap___aeabi_dcmplt>
10007a4c:	2800      	cmp	r0, #0
10007a4e:	d016      	beq.n	10007a7e <main+0xa9e>
10007a50:	46b0      	mov	r8, r6
10007a52:	4a56      	ldr	r2, [pc, #344]	; (10007bac <main+0xbcc>)
10007a54:	4b58      	ldr	r3, [pc, #352]	; (10007bb8 <main+0xbd8>)
10007a56:	0020      	movs	r0, r4
10007a58:	0029      	movs	r1, r5
10007a5a:	f7f8 fef1 	bl	10000840 <__wrap___aeabi_dadd>
10007a5e:	f7f8 ff7b 	bl	10000958 <__wrap___aeabi_d2f>
10007a62:	1c06      	adds	r6, r0, #0
10007a64:	f7f9 fac6 	bl	10000ff4 <__wrap___aeabi_f2d>
10007a68:	4a50      	ldr	r2, [pc, #320]	; (10007bac <main+0xbcc>)
10007a6a:	4b52      	ldr	r3, [pc, #328]	; (10007bb4 <main+0xbd4>)
10007a6c:	0004      	movs	r4, r0
10007a6e:	000d      	movs	r5, r1
10007a70:	f7f8 ff3a 	bl	100008e8 <__wrap___aeabi_dcmplt>
10007a74:	2800      	cmp	r0, #0
10007a76:	d1ec      	bne.n	10007a52 <main+0xa72>
10007a78:	4643      	mov	r3, r8
10007a7a:	46b0      	mov	r8, r6
10007a7c:	1c1e      	adds	r6, r3, #0
					while (d > PI) d -= PI2;
10007a7e:	0020      	movs	r0, r4
10007a80:	0029      	movs	r1, r5
10007a82:	4a4a      	ldr	r2, [pc, #296]	; (10007bac <main+0xbcc>)
10007a84:	4b4d      	ldr	r3, [pc, #308]	; (10007bbc <main+0xbdc>)
10007a86:	f7f8 ff3d 	bl	10000904 <__wrap___aeabi_dcmpgt>
10007a8a:	2800      	cmp	r0, #0
10007a8c:	d016      	beq.n	10007abc <main+0xadc>
10007a8e:	46b0      	mov	r8, r6
10007a90:	4a46      	ldr	r2, [pc, #280]	; (10007bac <main+0xbcc>)
10007a92:	4b49      	ldr	r3, [pc, #292]	; (10007bb8 <main+0xbd8>)
10007a94:	0020      	movs	r0, r4
10007a96:	0029      	movs	r1, r5
10007a98:	f7f8 fec9 	bl	1000082e <__wrap___aeabi_dsub>
10007a9c:	f7f8 ff5c 	bl	10000958 <__wrap___aeabi_d2f>
10007aa0:	1c06      	adds	r6, r0, #0
10007aa2:	f7f9 faa7 	bl	10000ff4 <__wrap___aeabi_f2d>
10007aa6:	4a41      	ldr	r2, [pc, #260]	; (10007bac <main+0xbcc>)
10007aa8:	4b44      	ldr	r3, [pc, #272]	; (10007bbc <main+0xbdc>)
10007aaa:	0004      	movs	r4, r0
10007aac:	000d      	movs	r5, r1
10007aae:	f7f8 ff29 	bl	10000904 <__wrap___aeabi_dcmpgt>
10007ab2:	2800      	cmp	r0, #0
10007ab4:	d1ec      	bne.n	10007a90 <main+0xab0>
10007ab6:	4643      	mov	r3, r8
10007ab8:	46b0      	mov	r8, r6
10007aba:	1c1e      	adds	r6, r3, #0
					if ((d >= -PI/4) && (d < PI/4))
10007abc:	0020      	movs	r0, r4
10007abe:	0029      	movs	r1, r5
10007ac0:	4a3a      	ldr	r2, [pc, #232]	; (10007bac <main+0xbcc>)
10007ac2:	4b3f      	ldr	r3, [pc, #252]	; (10007bc0 <main+0xbe0>)
10007ac4:	f7f8 ff16 	bl	100008f4 <__wrap___aeabi_dcmpge>
10007ac8:	2800      	cmp	r0, #0
10007aca:	d100      	bne.n	10007ace <main+0xaee>
10007acc:	e0c7      	b.n	10007c5e <main+0xc7e>
10007ace:	0020      	movs	r0, r4
10007ad0:	0029      	movs	r1, r5
10007ad2:	4a36      	ldr	r2, [pc, #216]	; (10007bac <main+0xbcc>)
10007ad4:	4b3b      	ldr	r3, [pc, #236]	; (10007bc4 <main+0xbe4>)
10007ad6:	f7f8 ff07 	bl	100008e8 <__wrap___aeabi_dcmplt>
10007ada:	2800      	cmp	r0, #0
10007adc:	d100      	bne.n	10007ae0 <main+0xb00>
10007ade:	e0be      	b.n	10007c5e <main+0xc7e>
						LayerScreen[ghost+1].img = Ghost1Img_Copy; // back
10007ae0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10007ae2:	4a39      	ldr	r2, [pc, #228]	; (10007bc8 <main+0xbe8>)
10007ae4:	601a      	str	r2, [r3, #0]
					if ((wd > 0) && (hd > 0) && 
10007ae6:	9d11      	ldr	r5, [sp, #68]	; 0x44
10007ae8:	2d00      	cmp	r5, #0
10007aea:	d03b      	beq.n	10007b64 <main+0xb84>
10007aec:	9b10      	ldr	r3, [sp, #64]	; 0x40
10007aee:	2b00      	cmp	r3, #0
10007af0:	dd38      	ble.n	10007b64 <main+0xb84>
  using ::tan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  tan(float __x)
  { return __builtin_tanf(__x); }
10007af2:	1c30      	adds	r0, r6, #0
10007af4:	f7f9 fabc 	bl	10001070 <__wrap_tanf>
					int x0 = (int)((tan(a) + 1)*WIDTH/2) - wd/2;
10007af8:	21fe      	movs	r1, #254	; 0xfe
10007afa:	0589      	lsls	r1, r1, #22
10007afc:	f7f9 f9be 	bl	10000e7c <__wrap___aeabi_fadd>
10007b00:	4932      	ldr	r1, [pc, #200]	; (10007bcc <main+0xbec>)
10007b02:	f7f9 f9c1 	bl	10000e88 <__wrap___aeabi_fmul>
10007b06:	21fc      	movs	r1, #252	; 0xfc
10007b08:	0589      	lsls	r1, r1, #22
10007b0a:	f7f9 f9bd 	bl	10000e88 <__wrap___aeabi_fmul>
10007b0e:	f7f9 fa33 	bl	10000f78 <__wrap___aeabi_f2iz>
					if ((wd > 0) && (hd > 0) && 
10007b12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
10007b14:	1884      	adds	r4, r0, r2
10007b16:	d425      	bmi.n	10007b64 <main+0xb84>
						(x0 >= 0) && ((x0 + wd) < WIDTH) && 
10007b18:	23a0      	movs	r3, #160	; 0xa0
10007b1a:	1965      	adds	r5, r4, r5
10007b1c:	009b      	lsls	r3, r3, #2
10007b1e:	429d      	cmp	r5, r3
10007b20:	da20      	bge.n	10007b64 <main+0xb84>
  { return __builtin_cosf(__x); }
10007b22:	1c30      	adds	r0, r6, #0
10007b24:	f7f9 fa80 	bl	10001028 <__wrap_cosf>
10007b28:	1c01      	adds	r1, r0, #0
					y2 = cos(a)*k;
10007b2a:	980d      	ldr	r0, [sp, #52]	; 0x34
10007b2c:	f7f9 f9ac 	bl	10000e88 <__wrap___aeabi_fmul>
					int y0 = (int)(TERRAINH/(y2+10)/(y2+10)/(y2+10)) + TEXTH + SKYLINEH;
10007b30:	4927      	ldr	r1, [pc, #156]	; (10007bd0 <main+0xbf0>)
10007b32:	f7f9 f9a3 	bl	10000e7c <__wrap___aeabi_fadd>
10007b36:	1c05      	adds	r5, r0, #0
10007b38:	1c01      	adds	r1, r0, #0
10007b3a:	4826      	ldr	r0, [pc, #152]	; (10007bd4 <main+0xbf4>)
10007b3c:	f7f9 f9a1 	bl	10000e82 <__wrap___aeabi_fdiv>
10007b40:	1c29      	adds	r1, r5, #0
10007b42:	f7f9 f99e 	bl	10000e82 <__wrap___aeabi_fdiv>
10007b46:	1c29      	adds	r1, r5, #0
10007b48:	f7f9 f99b 	bl	10000e82 <__wrap___aeabi_fdiv>
10007b4c:	f7f9 fa14 	bl	10000f78 <__wrap___aeabi_f2iz>
						(x0 >= 0) && ((x0 + wd) < WIDTH) && 
10007b50:	224a      	movs	r2, #74	; 0x4a
10007b52:	1885      	adds	r5, r0, r2
10007b54:	d406      	bmi.n	10007b64 <main+0xb84>
						(y0 >= 0) && ((y0 + hd) < TERRAINH))
10007b56:	9b10      	ldr	r3, [sp, #64]	; 0x40
10007b58:	1958      	adds	r0, r3, r5
10007b5a:	23cb      	movs	r3, #203	; 0xcb
10007b5c:	005b      	lsls	r3, r3, #1
10007b5e:	4298      	cmp	r0, r3
10007b60:	da00      	bge.n	10007b64 <main+0xb84>
10007b62:	e0dc      	b.n	10007d1e <main+0xd3e>
						LayerOff(ghost+1);
10007b64:	9812      	ldr	r0, [sp, #72]	; 0x48
10007b66:	f000 fdb7 	bl	100086d8 <_Z8LayerOffh>
10007b6a:	e5d2      	b.n	10007712 <main+0x732>
				CheckOK[1] = True;
10007b6c:	2301      	movs	r3, #1
10007b6e:	4a1a      	ldr	r2, [pc, #104]	; (10007bd8 <main+0xbf8>)
10007b70:	7053      	strb	r3, [r2, #1]
				CheckNext = CHECKC;
10007b72:	4a1a      	ldr	r2, [pc, #104]	; (10007bdc <main+0xbfc>)
10007b74:	3303      	adds	r3, #3
10007b76:	6013      	str	r3, [r2, #0]
				break;
10007b78:	f7ff fbba 	bl	100072f0 <main+0x310>
10007b7c:	20011bec 	.word	0x20011bec
10007b80:	1003fed4 	.word	0x1003fed4
10007b84:	1003fedc 	.word	0x1003fedc
10007b88:	1003fef4 	.word	0x1003fef4
10007b8c:	1003ff10 	.word	0x1003ff10
10007b90:	1003ff24 	.word	0x1003ff24
10007b94:	000017ae 	.word	0x000017ae
10007b98:	1003e724 	.word	0x1003e724
10007b9c:	43480000 	.word	0x43480000
10007ba0:	43c80000 	.word	0x43c80000
10007ba4:	2001b408 	.word	0x2001b408
10007ba8:	2001b420 	.word	0x2001b420
10007bac:	54442d18 	.word	0x54442d18
10007bb0:	3ff921fb 	.word	0x3ff921fb
10007bb4:	c00921fb 	.word	0xc00921fb
10007bb8:	401921fb 	.word	0x401921fb
10007bbc:	400921fb 	.word	0x400921fb
10007bc0:	bfe921fb 	.word	0xbfe921fb
10007bc4:	3fe921fb 	.word	0x3fe921fb
10007bc8:	20011bf0 	.word	0x20011bf0
10007bcc:	44200000 	.word	0x44200000
10007bd0:	41200000 	.word	0x41200000
10007bd4:	43cb0000 	.word	0x43cb0000
10007bd8:	2000f660 	.word	0x2000f660
10007bdc:	20002764 	.word	0x20002764
				if (Rank > 0) // game started
10007be0:	465a      	mov	r2, fp
10007be2:	6812      	ldr	r2, [r2, #0]
10007be4:	2a00      	cmp	r2, #0
10007be6:	dc00      	bgt.n	10007bea <main+0xc0a>
10007be8:	e08b      	b.n	10007d02 <main+0xd22>
					LastTime = ThisTime;
10007bea:	4b53      	ldr	r3, [pc, #332]	; (10007d38 <main+0xd58>)
10007bec:	4a53      	ldr	r2, [pc, #332]	; (10007d3c <main+0xd5c>)
10007bee:	681b      	ldr	r3, [r3, #0]
					NewBest = False;
10007bf0:	4953      	ldr	r1, [pc, #332]	; (10007d40 <main+0xd60>)
					LastTime = ThisTime;
10007bf2:	6013      	str	r3, [r2, #0]
					NewBest = False;
10007bf4:	2200      	movs	r2, #0
10007bf6:	700a      	strb	r2, [r1, #0]
					if ((LastTime < BestTime) || (BestTime == 0))
10007bf8:	4a52      	ldr	r2, [pc, #328]	; (10007d44 <main+0xd64>)
10007bfa:	6812      	ldr	r2, [r2, #0]
10007bfc:	4293      	cmp	r3, r2
10007bfe:	db01      	blt.n	10007c04 <main+0xc24>
10007c00:	2a00      	cmp	r2, #0
10007c02:	d104      	bne.n	10007c0e <main+0xc2e>
						BestTime = LastTime;
10007c04:	4a4f      	ldr	r2, [pc, #316]	; (10007d44 <main+0xd64>)
						NewBest = True;
10007c06:	494e      	ldr	r1, [pc, #312]	; (10007d40 <main+0xd60>)
						BestTime = LastTime;
10007c08:	6013      	str	r3, [r2, #0]
						NewBest = True;
10007c0a:	2201      	movs	r2, #1
10007c0c:	700a      	strb	r2, [r1, #0]
					if (LastTime < Hist[0])
10007c0e:	4a4e      	ldr	r2, [pc, #312]	; (10007d48 <main+0xd68>)
10007c10:	6812      	ldr	r2, [r2, #0]
10007c12:	4293      	cmp	r3, r2
10007c14:	da63      	bge.n	10007cde <main+0xcfe>
						Hist[2] = Hist[1];
10007c16:	494c      	ldr	r1, [pc, #304]	; (10007d48 <main+0xd68>)
10007c18:	6849      	ldr	r1, [r1, #4]
10007c1a:	9108      	str	r1, [sp, #32]
10007c1c:	494a      	ldr	r1, [pc, #296]	; (10007d48 <main+0xd68>)
10007c1e:	9808      	ldr	r0, [sp, #32]
						Hist[1] = Hist[0];
10007c20:	604a      	str	r2, [r1, #4]
						Hist[0] = LastTime;
10007c22:	600b      	str	r3, [r1, #0]
						Rank = 1;
10007c24:	465a      	mov	r2, fp
10007c26:	2301      	movs	r3, #1
						Hist[2] = Hist[1];
10007c28:	6088      	str	r0, [r1, #8]
						Rank = 1;
10007c2a:	6013      	str	r3, [r2, #0]
					if (RecordInx[1] < 0)
10007c2c:	4653      	mov	r3, sl
10007c2e:	685b      	ldr	r3, [r3, #4]
10007c30:	2b00      	cmp	r3, #0
10007c32:	db62      	blt.n	10007cfa <main+0xd1a>
					else if (RecordInx[2] < 0)
10007c34:	4653      	mov	r3, sl
10007c36:	689b      	ldr	r3, [r3, #8]
10007c38:	2b00      	cmp	r3, #0
10007c3a:	da02      	bge.n	10007c42 <main+0xc62>
						RecordInx[2] = 0;
10007c3c:	2300      	movs	r3, #0
10007c3e:	4652      	mov	r2, sl
10007c40:	6093      	str	r3, [r2, #8]
				StartTime = time_us_64();
10007c42:	f7fb fcdd 	bl	10003600 <time_us_64>
10007c46:	4b41      	ldr	r3, [pc, #260]	; (10007d4c <main+0xd6c>)
				CheckNext = CHECKA;
10007c48:	4a41      	ldr	r2, [pc, #260]	; (10007d50 <main+0xd70>)
				StartTime = time_us_64();
10007c4a:	6018      	str	r0, [r3, #0]
10007c4c:	6059      	str	r1, [r3, #4]
				CheckNext = CHECKA;
10007c4e:	2302      	movs	r3, #2
10007c50:	6013      	str	r3, [r2, #0]
				CheckOK[0] = False;
10007c52:	2300      	movs	r3, #0
10007c54:	4a3f      	ldr	r2, [pc, #252]	; (10007d54 <main+0xd74>)
10007c56:	8013      	strh	r3, [r2, #0]
				CheckOK[2] = False;
10007c58:	7093      	strb	r3, [r2, #2]
				break;
10007c5a:	f7ff fb49 	bl	100072f0 <main+0x310>
					else if ((d < -PI*3/4) || (d >= PI*3/4))
10007c5e:	0020      	movs	r0, r4
10007c60:	0029      	movs	r1, r5
10007c62:	4a3d      	ldr	r2, [pc, #244]	; (10007d58 <main+0xd78>)
10007c64:	4b3d      	ldr	r3, [pc, #244]	; (10007d5c <main+0xd7c>)
10007c66:	f7f8 fe3f 	bl	100008e8 <__wrap___aeabi_dcmplt>
10007c6a:	2800      	cmp	r0, #0
10007c6c:	d111      	bne.n	10007c92 <main+0xcb2>
10007c6e:	0020      	movs	r0, r4
10007c70:	0029      	movs	r1, r5
10007c72:	4a39      	ldr	r2, [pc, #228]	; (10007d58 <main+0xd78>)
10007c74:	4b3a      	ldr	r3, [pc, #232]	; (10007d60 <main+0xd80>)
10007c76:	f7f8 fe3d 	bl	100008f4 <__wrap___aeabi_dcmpge>
10007c7a:	2800      	cmp	r0, #0
10007c7c:	d109      	bne.n	10007c92 <main+0xcb2>
					else if (d < 0)
10007c7e:	2100      	movs	r1, #0
10007c80:	4640      	mov	r0, r8
10007c82:	f7f9 f937 	bl	10000ef4 <__wrap___aeabi_fcmplt>
						LayerScreen[ghost+1].img = Ghost2Img_Copy; // left
10007c86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
					else if (d < 0)
10007c88:	2800      	cmp	r0, #0
10007c8a:	d145      	bne.n	10007d18 <main+0xd38>
						LayerScreen[ghost+1].img = Ghost4Img_Copy; // right
10007c8c:	4a35      	ldr	r2, [pc, #212]	; (10007d64 <main+0xd84>)
10007c8e:	601a      	str	r2, [r3, #0]
10007c90:	e729      	b.n	10007ae6 <main+0xb06>
						LayerScreen[ghost+1].img = Ghost3Img_Copy; // front
10007c92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10007c94:	4a34      	ldr	r2, [pc, #208]	; (10007d68 <main+0xd88>)
10007c96:	601a      	str	r2, [r3, #0]
10007c98:	e725      	b.n	10007ae6 <main+0xb06>
10007c9a:	2300      	movs	r3, #0
10007c9c:	9311      	str	r3, [sp, #68]	; 0x44
10007c9e:	9313      	str	r3, [sp, #76]	; 0x4c
					if (ghost == 1)
10007ca0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10007ca2:	2400      	movs	r4, #0
10007ca4:	2b02      	cmp	r3, #2
10007ca6:	d000      	beq.n	10007caa <main+0xcca>
10007ca8:	e686      	b.n	100079b8 <main+0x9d8>
						Mat3.PrepDrawImg(GHOSTW, GHOSTH, 0, 0, wd, hd, 0, 0, 0, GHOSTW/2, GHOSTH/2);
10007caa:	2384      	movs	r3, #132	; 0x84
10007cac:	05db      	lsls	r3, r3, #23
10007cae:	9307      	str	r3, [sp, #28]
10007cb0:	2385      	movs	r3, #133	; 0x85
10007cb2:	05db      	lsls	r3, r3, #23
10007cb4:	9306      	str	r3, [sp, #24]
10007cb6:	2300      	movs	r3, #0
10007cb8:	9305      	str	r3, [sp, #20]
10007cba:	9304      	str	r3, [sp, #16]
10007cbc:	9303      	str	r3, [sp, #12]
10007cbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
10007cc0:	2240      	movs	r2, #64	; 0x40
10007cc2:	9302      	str	r3, [sp, #8]
10007cc4:	9b11      	ldr	r3, [sp, #68]	; 0x44
10007cc6:	2180      	movs	r1, #128	; 0x80
10007cc8:	9301      	str	r3, [sp, #4]
10007cca:	2300      	movs	r3, #0
10007ccc:	4827      	ldr	r0, [pc, #156]	; (10007d6c <main+0xd8c>)
10007cce:	9300      	str	r3, [sp, #0]
10007cd0:	f001 faa0 	bl	10009214 <_ZN7cMat2Df11PrepDrawImgEiiiiiifffff>
						Mat3.ExportInt(Mat3Int);
10007cd4:	4926      	ldr	r1, [pc, #152]	; (10007d70 <main+0xd90>)
10007cd6:	4825      	ldr	r0, [pc, #148]	; (10007d6c <main+0xd8c>)
10007cd8:	f001 fb96 	bl	10009408 <_ZNK7cMat2Df9ExportIntEPi>
10007cdc:	e685      	b.n	100079ea <main+0xa0a>
						if (LastTime < Hist[1])
10007cde:	4a1a      	ldr	r2, [pc, #104]	; (10007d48 <main+0xd68>)
10007ce0:	6852      	ldr	r2, [r2, #4]
10007ce2:	4293      	cmp	r3, r2
10007ce4:	da14      	bge.n	10007d10 <main+0xd30>
							Hist[2] = Hist[1];
10007ce6:	4918      	ldr	r1, [pc, #96]	; (10007d48 <main+0xd68>)
10007ce8:	608a      	str	r2, [r1, #8]
							Hist[1] = LastTime;
10007cea:	604b      	str	r3, [r1, #4]
							Rank = 2;
10007cec:	465a      	mov	r2, fp
10007cee:	2302      	movs	r3, #2
10007cf0:	6013      	str	r3, [r2, #0]
					if (RecordInx[1] < 0)
10007cf2:	4653      	mov	r3, sl
10007cf4:	685b      	ldr	r3, [r3, #4]
10007cf6:	2b00      	cmp	r3, #0
10007cf8:	da9c      	bge.n	10007c34 <main+0xc54>
						RecordInx[1] = 0;
10007cfa:	2300      	movs	r3, #0
10007cfc:	4652      	mov	r2, sl
10007cfe:	6053      	str	r3, [r2, #4]
10007d00:	e79f      	b.n	10007c42 <main+0xc62>
					Rank = 1;
10007d02:	465a      	mov	r2, fp
10007d04:	6013      	str	r3, [r2, #0]
					RecordStep = (u32)time_us_64();;
10007d06:	f7fb fc7b 	bl	10003600 <time_us_64>
10007d0a:	4b1a      	ldr	r3, [pc, #104]	; (10007d74 <main+0xd94>)
10007d0c:	6018      	str	r0, [r3, #0]
10007d0e:	e798      	b.n	10007c42 <main+0xc62>
							Rank = 3;
10007d10:	2303      	movs	r3, #3
10007d12:	465a      	mov	r2, fp
10007d14:	6013      	str	r3, [r2, #0]
10007d16:	e789      	b.n	10007c2c <main+0xc4c>
						LayerScreen[ghost+1].img = Ghost2Img_Copy; // left
10007d18:	4a17      	ldr	r2, [pc, #92]	; (10007d78 <main+0xd98>)
10007d1a:	601a      	str	r2, [r3, #0]
10007d1c:	e6e3      	b.n	10007ae6 <main+0xb06>
						LayerSetX(ghost+1, x0);
10007d1e:	b221      	sxth	r1, r4
10007d20:	9c12      	ldr	r4, [sp, #72]	; 0x48
10007d22:	0020      	movs	r0, r4
10007d24:	f000 fce8 	bl	100086f8 <_Z9LayerSetXhs>
						LayerSetY(ghost+1, y0);
10007d28:	0020      	movs	r0, r4
10007d2a:	b229      	sxth	r1, r5
10007d2c:	f000 fd32 	bl	10008794 <_Z9LayerSetYhs>
						LayerOn(ghost+1);
10007d30:	0020      	movs	r0, r4
10007d32:	f000 fcc1 	bl	100086b8 <_Z7LayerOnh>
10007d36:	e4ec      	b.n	10007712 <main+0x732>
10007d38:	20026634 	.word	0x20026634
10007d3c:	20019bf0 	.word	0x20019bf0
10007d40:	2003e33f 	.word	0x2003e33f
10007d44:	20003634 	.word	0x20003634
10007d48:	20002768 	.word	0x20002768
10007d4c:	20003408 	.word	0x20003408
10007d50:	20002764 	.word	0x20002764
10007d54:	2000f660 	.word	0x2000f660
10007d58:	7f3321d2 	.word	0x7f3321d2
10007d5c:	c002d97c 	.word	0xc002d97c
10007d60:	4002d97c 	.word	0x4002d97c
10007d64:	20017bf0 	.word	0x20017bf0
10007d68:	20015bf0 	.word	0x20015bf0
10007d6c:	2001b3d8 	.word	0x2001b3d8
10007d70:	2001b3f0 	.word	0x2001b3f0
10007d74:	2001b870 	.word	0x2001b870
10007d78:	20013bf0 	.word	0x20013bf0

10007d7c <_Z10VgaDmaInitv>:
 * \param read_addr Initial read address of transfer.
 * \param trigger True to start the transfer immediately
 */
static inline void dma_channel_set_read_addr(uint channel, const volatile void *read_addr, bool trigger) {
    if (!trigger) {
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10007d7c:	23a0      	movs	r3, #160	; 0xa0
// 0x10 (alias 1):  CTRL        READ_ADDR     WRITE_ADDR    TRANS_COUNT_TRIG
// 0x20 (alias 2):  CTRL        TRANS_COUNT   READ_ADDR     WRITE_ADDR_TRIG
// 0x30 (alias 3):  CTRL        WRITE_ADDR    TRANS_COUNT   READ_ADDR_TRIG ... !

void VgaDmaInit()
{
10007d7e:	b570      	push	{r4, r5, r6, lr}
 * \param trans_count The number of transfers (not NOT bytes, see channel_config_set_transfer_data_size)
 * \param trigger True to start the transfer immediately
 */
static inline void dma_channel_set_trans_count(uint channel, uint32_t trans_count, bool trigger) {
    if (!trigger) {
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10007d80:	2402      	movs	r4, #2
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10007d82:	4a2a      	ldr	r2, [pc, #168]	; (10007e2c <_Z10VgaDmaInitv+0xb0>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10007d84:	492a      	ldr	r1, [pc, #168]	; (10007e30 <_Z10VgaDmaInitv+0xb4>)
10007d86:	05db      	lsls	r3, r3, #23
10007d88:	6019      	str	r1, [r3, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10007d8a:	605a      	str	r2, [r3, #4]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10007d8c:	4a29      	ldr	r2, [pc, #164]	; (10007e34 <_Z10VgaDmaInitv+0xb8>)
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10007d8e:	609c      	str	r4, [r3, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10007d90:	611a      	str	r2, [r3, #16]
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10007d92:	2200      	movs	r2, #0
10007d94:	4b28      	ldr	r3, [pc, #160]	; (10007e38 <_Z10VgaDmaInitv+0xbc>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10007d96:	4829      	ldr	r0, [pc, #164]	; (10007e3c <_Z10VgaDmaInitv+0xc0>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10007d98:	601a      	str	r2, [r3, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10007d9a:	6058      	str	r0, [r3, #4]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10007d9c:	4828      	ldr	r0, [pc, #160]	; (10007e40 <_Z10VgaDmaInitv+0xc4>)
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10007d9e:	609a      	str	r2, [r3, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10007da0:	6118      	str	r0, [r3, #16]
	dma_channel_config cfg;
	int layer;
	for (layer = 0; layer < LAYERS; layer++)
	{
		// layer is not active
		if ((layer > 0) && (LayerModeInx[layer] == LAYERMODE_BASE)) continue;
10007da2:	4b28      	ldr	r3, [pc, #160]	; (10007e44 <_Z10VgaDmaInitv+0xc8>)
10007da4:	7858      	ldrb	r0, [r3, #1]
10007da6:	2800      	cmp	r0, #0
10007da8:	d00d      	beq.n	10007dc6 <_Z10VgaDmaInitv+0x4a>
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10007daa:	4827      	ldr	r0, [pc, #156]	; (10007e48 <_Z10VgaDmaInitv+0xcc>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10007dac:	4d27      	ldr	r5, [pc, #156]	; (10007e4c <_Z10VgaDmaInitv+0xd0>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10007dae:	6001      	str	r1, [r0, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10007db0:	6045      	str	r5, [r0, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10007db2:	6084      	str	r4, [r0, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10007db4:	4c26      	ldr	r4, [pc, #152]	; (10007e50 <_Z10VgaDmaInitv+0xd4>)
10007db6:	6104      	str	r4, [r0, #16]
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10007db8:	4826      	ldr	r0, [pc, #152]	; (10007e54 <_Z10VgaDmaInitv+0xd8>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10007dba:	4c27      	ldr	r4, [pc, #156]	; (10007e58 <_Z10VgaDmaInitv+0xdc>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10007dbc:	6002      	str	r2, [r0, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10007dbe:	6044      	str	r4, [r0, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10007dc0:	6082      	str	r2, [r0, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10007dc2:	4a26      	ldr	r2, [pc, #152]	; (10007e5c <_Z10VgaDmaInitv+0xe0>)
10007dc4:	6102      	str	r2, [r0, #16]
10007dc6:	789a      	ldrb	r2, [r3, #2]
10007dc8:	2a00      	cmp	r2, #0
10007dca:	d00f      	beq.n	10007dec <_Z10VgaDmaInitv+0x70>
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10007dcc:	4a24      	ldr	r2, [pc, #144]	; (10007e60 <_Z10VgaDmaInitv+0xe4>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10007dce:	4825      	ldr	r0, [pc, #148]	; (10007e64 <_Z10VgaDmaInitv+0xe8>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10007dd0:	6011      	str	r1, [r2, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10007dd2:	6050      	str	r0, [r2, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10007dd4:	2002      	movs	r0, #2
10007dd6:	6090      	str	r0, [r2, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10007dd8:	4823      	ldr	r0, [pc, #140]	; (10007e68 <_Z10VgaDmaInitv+0xec>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10007dda:	4c24      	ldr	r4, [pc, #144]	; (10007e6c <_Z10VgaDmaInitv+0xf0>)
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10007ddc:	6110      	str	r0, [r2, #16]
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10007dde:	2000      	movs	r0, #0
10007de0:	4a23      	ldr	r2, [pc, #140]	; (10007e70 <_Z10VgaDmaInitv+0xf4>)
10007de2:	6010      	str	r0, [r2, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10007de4:	6054      	str	r4, [r2, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10007de6:	6090      	str	r0, [r2, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10007de8:	4822      	ldr	r0, [pc, #136]	; (10007e74 <_Z10VgaDmaInitv+0xf8>)
10007dea:	6110      	str	r0, [r2, #16]
10007dec:	78db      	ldrb	r3, [r3, #3]
10007dee:	2b00      	cmp	r3, #0
10007df0:	d00f      	beq.n	10007e12 <_Z10VgaDmaInitv+0x96>
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10007df2:	4b21      	ldr	r3, [pc, #132]	; (10007e78 <_Z10VgaDmaInitv+0xfc>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10007df4:	4a21      	ldr	r2, [pc, #132]	; (10007e7c <_Z10VgaDmaInitv+0x100>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10007df6:	6019      	str	r1, [r3, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10007df8:	605a      	str	r2, [r3, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10007dfa:	2202      	movs	r2, #2
10007dfc:	609a      	str	r2, [r3, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10007dfe:	4a20      	ldr	r2, [pc, #128]	; (10007e80 <_Z10VgaDmaInitv+0x104>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10007e00:	4920      	ldr	r1, [pc, #128]	; (10007e84 <_Z10VgaDmaInitv+0x108>)
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10007e02:	611a      	str	r2, [r3, #16]
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10007e04:	2200      	movs	r2, #0
10007e06:	4b20      	ldr	r3, [pc, #128]	; (10007e88 <_Z10VgaDmaInitv+0x10c>)
10007e08:	601a      	str	r2, [r3, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10007e0a:	6059      	str	r1, [r3, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10007e0c:	609a      	str	r2, [r3, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10007e0e:	4a1f      	ldr	r2, [pc, #124]	; (10007e8c <_Z10VgaDmaInitv+0x110>)
10007e10:	611a      	str	r2, [r3, #16]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10007e12:	2202      	movs	r2, #2
10007e14:	4b1e      	ldr	r3, [pc, #120]	; (10007e90 <_Z10VgaDmaInitv+0x114>)

	// enable DMA channel IRQ0
	dma_channel_set_irq0_enabled(VGA_DMA_PIO0, true);

	// set DMA IRQ handler
	irq_set_exclusive_handler(DMA_IRQ_0, VgaLine);
10007e16:	200b      	movs	r0, #11
10007e18:	601a      	str	r2, [r3, #0]
10007e1a:	491e      	ldr	r1, [pc, #120]	; (10007e94 <_Z10VgaDmaInitv+0x118>)
10007e1c:	f7f9 fe6c 	bl	10001af8 <irq_set_exclusive_handler>

	// set highest IRQ priority
	irq_set_priority(DMA_IRQ_0, 0);
10007e20:	2100      	movs	r1, #0
10007e22:	200b      	movs	r0, #11
10007e24:	f7f9 ff72 	bl	10001d0c <irq_set_priority>
}
10007e28:	bd70      	pop	{r4, r5, r6, pc}
10007e2a:	46c0      	nop			; (mov r8, r8)
10007e2c:	50000078 	.word	0x50000078
10007e30:	2000f668 	.word	0x2000f668
10007e34:	001f84f9 	.word	0x001f84f9
10007e38:	50000040 	.word	0x50000040
10007e3c:	50200010 	.word	0x50200010
10007e40:	0060001b 	.word	0x0060001b
10007e44:	20019bf8 	.word	0x20019bf8
10007e48:	50000080 	.word	0x50000080
10007e4c:	500000f8 	.word	0x500000f8
10007e50:	001f94f9 	.word	0x001f94f9
10007e54:	500000c0 	.word	0x500000c0
10007e58:	50200014 	.word	0x50200014
10007e5c:	0060901b 	.word	0x0060901b
10007e60:	50000100 	.word	0x50000100
10007e64:	50000178 	.word	0x50000178
10007e68:	001fa4f9 	.word	0x001fa4f9
10007e6c:	50200018 	.word	0x50200018
10007e70:	50000140 	.word	0x50000140
10007e74:	0061201b 	.word	0x0061201b
10007e78:	50000180 	.word	0x50000180
10007e7c:	500001f8 	.word	0x500001f8
10007e80:	001fb4f9 	.word	0x001fb4f9
10007e84:	5020001c 	.word	0x5020001c
10007e88:	500001c0 	.word	0x500001c0
10007e8c:	0061b01b 	.word	0x0061b01b
10007e90:	50002404 	.word	0x50002404
10007e94:	20002531 	.word	0x20002531

10007e98 <_Z10VgaPioInitv>:

// initialize VGA PIO
void VgaPioInit()
{
10007e98:	b5f0      	push	{r4, r5, r6, r7, lr}
10007e9a:	46ce      	mov	lr, r9
10007e9c:	4647      	mov	r7, r8
10007e9e:	b580      	push	{r7, lr}
10007ea0:	b099      	sub	sp, #100	; 0x64
	int i;

	// clear PIO instruction memory 
	pio_clear_instruction_memory(VGA_PIO);
10007ea2:	485c      	ldr	r0, [pc, #368]	; (10008014 <_Z10VgaPioInitv+0x17c>)

	// configure main program instructions
	uint16_t ins[32]; // temporary buffer of program instructions
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
10007ea4:	ac08      	add	r4, sp, #32
	pio_clear_instruction_memory(VGA_PIO);
10007ea6:	f7fa fa83 	bl	100023b0 <pio_clear_instruction_memory>
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
10007eaa:	0022      	movs	r2, r4
10007eac:	4b5a      	ldr	r3, [pc, #360]	; (10008018 <_Z10VgaPioInitv+0x180>)
10007eae:	cb23      	ldmia	r3!, {r0, r1, r5}
10007eb0:	c223      	stmia	r2!, {r0, r1, r5}
10007eb2:	cb23      	ldmia	r3!, {r0, r1, r5}
10007eb4:	c223      	stmia	r2!, {r0, r1, r5}
10007eb6:	6819      	ldr	r1, [r3, #0]
	u16 cpp = (u16)CurVmode.cpp; // number of clocks per pixel
10007eb8:	4d58      	ldr	r5, [pc, #352]	; (1000801c <_Z10VgaPioInitv+0x184>)
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
10007eba:	6011      	str	r1, [r2, #0]
10007ebc:	889b      	ldrh	r3, [r3, #4]
	// load main program into PIO's instruction memory
	struct pio_program prg;
	prg.instructions = ins;
	prg.length = vga_program.length;
	prg.origin = BASE_OFFSET;
	pio_add_program(VGA_PIO, &prg);
10007ebe:	4855      	ldr	r0, [pc, #340]	; (10008014 <_Z10VgaPioInitv+0x17c>)
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
10007ec0:	8093      	strh	r3, [r2, #4]
	ins[vga_offset_extra1] |= (cpp-2) << 8; // update waits
10007ec2:	8aee      	ldrh	r6, [r5, #22]
10007ec4:	4b56      	ldr	r3, [pc, #344]	; (10008020 <_Z10VgaPioInitv+0x188>)
10007ec6:	1eb2      	subs	r2, r6, #2
10007ec8:	0212      	lsls	r2, r2, #8
10007eca:	4313      	orrs	r3, r2
10007ecc:	b29b      	uxth	r3, r3
	prg.length = vga_program.length;
10007ece:	466a      	mov	r2, sp
	ins[vga_offset_extra1] |= (cpp-2) << 8; // update waits
10007ed0:	8323      	strh	r3, [r4, #24]
	ins[vga_offset_extra2] |= (cpp-2) << 8; // update waits
10007ed2:	83a3      	strh	r3, [r4, #28]
	prg.length = vga_program.length;
10007ed4:	230f      	movs	r3, #15
	pio_add_program(VGA_PIO, &prg);
10007ed6:	a902      	add	r1, sp, #8
	prg.length = vga_program.length;
10007ed8:	7313      	strb	r3, [r2, #12]
	prg.origin = BASE_OFFSET;
10007eda:	3302      	adds	r3, #2
10007edc:	7353      	strb	r3, [r2, #13]
	prg.instructions = ins;
10007ede:	9402      	str	r4, [sp, #8]
	pio_add_program(VGA_PIO, &prg);
10007ee0:	f7fa fa02 	bl	100022e8 <pio_add_program>

	// load layer program
	if (LayerProgInx != LAYERPROG_BASE)
10007ee4:	4b4f      	ldr	r3, [pc, #316]	; (10008024 <_Z10VgaPioInitv+0x18c>)
10007ee6:	781b      	ldrb	r3, [r3, #0]
10007ee8:	2b00      	cmp	r3, #0
10007eea:	d161      	bne.n	10007fb0 <_Z10VgaPioInitv+0x118>
	{
		// configure layer program instructions
		memcpy(ins, CurLayerProg.ins, CurLayerProg.length*sizeof(uint16_t)); // copy program into buffer
		for (i = 0; i < CurLayerProg.extranum; i++)
10007eec:	2400      	movs	r4, #0
    gpio_set_function(pin, pio == pio0 ? GPIO_FUNC_PIO0 : GPIO_FUNC_PIO1);
10007eee:	0020      	movs	r0, r4
10007ef0:	2106      	movs	r1, #6
		prg.origin = LAYER_OFFSET;
		pio_add_program(VGA_PIO, &prg);
	}

	// connect PIO to the pad
	for (i = VGA_GPIO_FIRST; i <= VGA_GPIO_LAST; i++) pio_gpio_init(VGA_PIO, i);
10007ef2:	3401      	adds	r4, #1
10007ef4:	f7f9 fd7e 	bl	100019f4 <gpio_set_function>
10007ef8:	2c09      	cmp	r4, #9
10007efa:	d1f8      	bne.n	10007eee <_Z10VgaPioInitv+0x56>

	// negative HSYNC output
	if (!CurVmode.psync) gpio_set_outover(VGA_GPIO_SYNC, GPIO_OVERRIDE_INVERT);
10007efc:	2357      	movs	r3, #87	; 0x57
10007efe:	5ceb      	ldrb	r3, [r5, r3]
10007f00:	2b00      	cmp	r3, #0
10007f02:	d100      	bne.n	10007f06 <_Z10VgaPioInitv+0x6e>
10007f04:	e081      	b.n	1000800a <_Z10VgaPioInitv+0x172>

		// get default config
		pio_sm_config cfg = pio_get_default_sm_config();

		// map state machine's OUT and MOV pins	
		sm_config_set_out_pins(&cfg, LayerFirstPin[layer], LayerNumPin[layer]);
10007f06:	4b48      	ldr	r3, [pc, #288]	; (10008028 <_Z10VgaPioInitv+0x190>)
		for (i = 0; i < CurLayerProg.extranum; i++)
10007f08:	2400      	movs	r4, #0
		sm_config_set_out_pins(&cfg, LayerFirstPin[layer], LayerNumPin[layer]);
10007f0a:	4698      	mov	r8, r3
		if ((layer > 0) && (LayerModeInx[layer] == LAYERMODE_BASE)) continue;
10007f0c:	2c00      	cmp	r4, #0
10007f0e:	d003      	beq.n	10007f18 <_Z10VgaPioInitv+0x80>
10007f10:	4b46      	ldr	r3, [pc, #280]	; (1000802c <_Z10VgaPioInitv+0x194>)
10007f12:	5d1b      	ldrb	r3, [r3, r4]
10007f14:	2b00      	cmp	r3, #0
10007f16:	d036      	beq.n	10007f86 <_Z10VgaPioInitv+0xee>
		pio_sm_set_consecutive_pindirs(VGA_PIO, VGA_SM(layer), VGA_GPIO_FIRST, VGA_GPIO_NUM, true);
10007f18:	2301      	movs	r3, #1
10007f1a:	2200      	movs	r2, #0
10007f1c:	0021      	movs	r1, r4
10007f1e:	483d      	ldr	r0, [pc, #244]	; (10008014 <_Z10VgaPioInitv+0x17c>)
10007f20:	9300      	str	r3, [sp, #0]
10007f22:	3308      	adds	r3, #8
10007f24:	f7fa fa60 	bl	100023e8 <pio_sm_set_consecutive_pindirs>
		sm_config_set_out_pins(&cfg, LayerFirstPin[layer], LayerNumPin[layer]);
10007f28:	4643      	mov	r3, r8
10007f2a:	5d1e      	ldrb	r6, [r3, r4]
10007f2c:	4b40      	ldr	r3, [pc, #256]	; (10008030 <_Z10VgaPioInitv+0x198>)
                 (out_count << PIO_SM0_PINCTRL_OUT_COUNT_LSB);
10007f2e:	0536      	lsls	r6, r6, #20
10007f30:	5d1b      	ldrb	r3, [r3, r4]
                 (out_base << PIO_SM0_PINCTRL_OUT_BASE_LSB) |
10007f32:	431e      	orrs	r6, r3
    c->pinctrl = (c->pinctrl & ~(PIO_SM0_PINCTRL_OUT_BASE_BITS | PIO_SM0_PINCTRL_OUT_COUNT_BITS)) |
10007f34:	9607      	str	r6, [sp, #28]

		// join FIFO to send only
		sm_config_set_fifo_join(&cfg, PIO_FIFO_JOIN_TX);

		// PIO clock divider
		sm_config_set_clkdiv(&cfg, CurVmode.div);
10007f36:	8aaf      	ldrh	r7, [r5, #20]
10007f38:	0038      	movs	r0, r7
10007f3a:	f7f8 fff6 	bl	10000f2a <__wrap___aeabi_ui2f>
10007f3e:	4681      	mov	r9, r0
    uint8_t div_frac = (uint8_t) ((div - div_int) * (1u << 8u));
10007f40:	0038      	movs	r0, r7
10007f42:	f7f8 fff7 	bl	10000f34 <__wrap___aeabi_i2f>
10007f46:	1c01      	adds	r1, r0, #0
10007f48:	4648      	mov	r0, r9
10007f4a:	f7f8 ff94 	bl	10000e76 <__wrap___aeabi_fsub>
10007f4e:	2187      	movs	r1, #135	; 0x87
10007f50:	05c9      	lsls	r1, r1, #23
10007f52:	f7f8 ff99 	bl	10000e88 <__wrap___aeabi_fmul>
10007f56:	f7f9 f841 	bl	10000fdc <__wrap___aeabi_f2uiz>
            (div_frac << PIO_SM0_CLKDIV_FRAC_LSB) |
10007f5a:	b2c0      	uxtb	r0, r0
            (div_int << PIO_SM0_CLKDIV_INT_LSB);
10007f5c:	043b      	lsls	r3, r7, #16
            (div_frac << PIO_SM0_CLKDIV_FRAC_LSB) |
10007f5e:	0200      	lsls	r0, r0, #8
10007f60:	4318      	orrs	r0, r3
    c->shiftctrl = (c->shiftctrl &
10007f62:	4b34      	ldr	r3, [pc, #208]	; (10008034 <_Z10VgaPioInitv+0x19c>)
    c->clkdiv =
10007f64:	9004      	str	r0, [sp, #16]
    c->shiftctrl = (c->shiftctrl &
10007f66:	9306      	str	r3, [sp, #24]

		// shift left, autopull, pull threshold
		sm_config_set_out_shift(&cfg, false, true, 32);
	
		// base layer 0
		if (layer == 0)
10007f68:	2c00      	cmp	r4, #0
10007f6a:	d014      	beq.n	10007f96 <_Z10VgaPioInitv+0xfe>
			pio_sm_init(VGA_PIO, VGA_SM0, vga_offset_entry+BASE_OFFSET, &cfg);
		}
		else
		{
			// set wrap
			sm_config_set_wrap(&cfg, CurLayerProg.wrap_target+LAYER_OFFSET, CurLayerProg.wrap+LAYER_OFFSET);
10007f6c:	4a32      	ldr	r2, [pc, #200]	; (10008038 <_Z10VgaPioInitv+0x1a0>)

			// initialize state machine
			pio_sm_init(VGA_PIO, VGA_SM(layer), CurLayerProg.idle+LAYER_OFFSET, &cfg);
10007f6e:	4829      	ldr	r0, [pc, #164]	; (10008014 <_Z10VgaPioInitv+0x17c>)
			sm_config_set_wrap(&cfg, CurLayerProg.wrap_target+LAYER_OFFSET, CurLayerProg.wrap+LAYER_OFFSET);
10007f70:	7a53      	ldrb	r3, [r2, #9]
10007f72:	7a91      	ldrb	r1, [r2, #10]
                  (wrap_target << PIO_SM0_EXECCTRL_WRAP_BOTTOM_LSB) |
10007f74:	01db      	lsls	r3, r3, #7
                  (wrap << PIO_SM0_EXECCTRL_WRAP_TOP_LSB);
10007f76:	0309      	lsls	r1, r1, #12
                  (wrap_target << PIO_SM0_EXECCTRL_WRAP_BOTTOM_LSB) |
10007f78:	430b      	orrs	r3, r1
    c->execctrl = (c->execctrl & ~(PIO_SM0_EXECCTRL_WRAP_TOP_BITS | PIO_SM0_EXECCTRL_WRAP_BOTTOM_BITS)) |
10007f7a:	9305      	str	r3, [sp, #20]
			pio_sm_init(VGA_PIO, VGA_SM(layer), CurLayerProg.idle+LAYER_OFFSET, &cfg);
10007f7c:	0021      	movs	r1, r4
10007f7e:	7ad2      	ldrb	r2, [r2, #11]
10007f80:	ab04      	add	r3, sp, #16
10007f82:	f7fa fa73 	bl	1000246c <pio_sm_init>
	for (layer = 0; layer < LAYERS; layer++)
10007f86:	3401      	adds	r4, #1
10007f88:	2c04      	cmp	r4, #4
10007f8a:	d1bf      	bne.n	10007f0c <_Z10VgaPioInitv+0x74>
		}
	}
}
10007f8c:	b019      	add	sp, #100	; 0x64
10007f8e:	bcc0      	pop	{r6, r7}
10007f90:	46b9      	mov	r9, r7
10007f92:	46b0      	mov	r8, r6
10007f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
10007f96:	4b29      	ldr	r3, [pc, #164]	; (1000803c <_Z10VgaPioInitv+0x1a4>)
			pio_sm_init(VGA_PIO, VGA_SM0, vga_offset_entry+BASE_OFFSET, &cfg);
10007f98:	2213      	movs	r2, #19
10007f9a:	9305      	str	r3, [sp, #20]
    c->pinctrl = (c->pinctrl & ~PIO_SM0_PINCTRL_SIDESET_BASE_BITS) |
10007f9c:	4b28      	ldr	r3, [pc, #160]	; (10008040 <_Z10VgaPioInitv+0x1a8>)
10007f9e:	2100      	movs	r1, #0
10007fa0:	431e      	orrs	r6, r3
10007fa2:	481c      	ldr	r0, [pc, #112]	; (10008014 <_Z10VgaPioInitv+0x17c>)
10007fa4:	ab04      	add	r3, sp, #16
10007fa6:	9607      	str	r6, [sp, #28]
	for (layer = 0; layer < LAYERS; layer++)
10007fa8:	3401      	adds	r4, #1
			pio_sm_init(VGA_PIO, VGA_SM0, vga_offset_entry+BASE_OFFSET, &cfg);
10007faa:	f7fa fa5f 	bl	1000246c <pio_sm_init>
	for (layer = 0; layer < LAYERS; layer++)
10007fae:	e7af      	b.n	10007f10 <_Z10VgaPioInitv+0x78>
		memcpy(ins, CurLayerProg.ins, CurLayerProg.length*sizeof(uint16_t)); // copy program into buffer
10007fb0:	4b21      	ldr	r3, [pc, #132]	; (10008038 <_Z10VgaPioInitv+0x1a0>)
10007fb2:	0020      	movs	r0, r4
10007fb4:	4698      	mov	r8, r3
10007fb6:	7a1b      	ldrb	r3, [r3, #8]
10007fb8:	005a      	lsls	r2, r3, #1
10007fba:	4699      	mov	r9, r3
10007fbc:	4643      	mov	r3, r8
10007fbe:	6819      	ldr	r1, [r3, #0]
10007fc0:	f7f9 f8fe 	bl	100011c0 <__wrap___aeabi_memcpy>
		for (i = 0; i < CurLayerProg.extranum; i++)
10007fc4:	4643      	mov	r3, r8
10007fc6:	7b9b      	ldrb	r3, [r3, #14]
10007fc8:	469c      	mov	ip, r3
10007fca:	2b00      	cmp	r3, #0
10007fcc:	d011      	beq.n	10007ff2 <_Z10VgaPioInitv+0x15a>
10007fce:	4641      	mov	r1, r8
10007fd0:	2000      	movs	r0, #0
10007fd2:	310f      	adds	r1, #15
			int extra = (int)cpp - CurLayerProg.extra[i*2+1];
10007fd4:	784b      	ldrb	r3, [r1, #1]
			ins[CurLayerProg.extra[i*2]] |= extra << 8; // update waits
10007fd6:	780a      	ldrb	r2, [r1, #0]
			int extra = (int)cpp - CurLayerProg.extra[i*2+1];
10007fd8:	1af3      	subs	r3, r6, r3
			ins[CurLayerProg.extra[i*2]] |= extra << 8; // update waits
10007fda:	43df      	mvns	r7, r3
10007fdc:	0052      	lsls	r2, r2, #1
10007fde:	17ff      	asrs	r7, r7, #31
10007fe0:	403b      	ands	r3, r7
10007fe2:	5aa7      	ldrh	r7, [r4, r2]
10007fe4:	021b      	lsls	r3, r3, #8
10007fe6:	433b      	orrs	r3, r7
		for (i = 0; i < CurLayerProg.extranum; i++)
10007fe8:	3001      	adds	r0, #1
			ins[CurLayerProg.extra[i*2]] |= extra << 8; // update waits
10007fea:	52a3      	strh	r3, [r4, r2]
		for (i = 0; i < CurLayerProg.extranum; i++)
10007fec:	3102      	adds	r1, #2
10007fee:	4560      	cmp	r0, ip
10007ff0:	dbf0      	blt.n	10007fd4 <_Z10VgaPioInitv+0x13c>
		prg.length = CurLayerProg.length;
10007ff2:	466b      	mov	r3, sp
10007ff4:	464a      	mov	r2, r9
10007ff6:	731a      	strb	r2, [r3, #12]
		prg.origin = LAYER_OFFSET;
10007ff8:	2300      	movs	r3, #0
10007ffa:	466a      	mov	r2, sp
		pio_add_program(VGA_PIO, &prg);
10007ffc:	a902      	add	r1, sp, #8
10007ffe:	4805      	ldr	r0, [pc, #20]	; (10008014 <_Z10VgaPioInitv+0x17c>)
		prg.instructions = ins;
10008000:	9402      	str	r4, [sp, #8]
		prg.origin = LAYER_OFFSET;
10008002:	7353      	strb	r3, [r2, #13]
		pio_add_program(VGA_PIO, &prg);
10008004:	f7fa f970 	bl	100022e8 <pio_add_program>
10008008:	e770      	b.n	10007eec <_Z10VgaPioInitv+0x54>
	if (!CurVmode.psync) gpio_set_outover(VGA_GPIO_SYNC, GPIO_OVERRIDE_INVERT);
1000800a:	2101      	movs	r1, #1
1000800c:	2008      	movs	r0, #8
1000800e:	f7f9 fd21 	bl	10001a54 <gpio_set_outover>
10008012:	e778      	b.n	10007f06 <_Z10VgaPioInitv+0x6e>
10008014:	50200000 	.word	0x50200000
10008018:	1003ffe0 	.word	0x1003ffe0
1000801c:	20010b7c 	.word	0x20010b7c
10008020:	00006008 	.word	0x00006008
10008024:	2003e33e 	.word	0x2003e33e
10008028:	20002ba0 	.word	0x20002ba0
1000802c:	20019bf8 	.word	0x20019bf8
10008030:	20019bf4 	.word	0x20019bf4
10008034:	40060000 	.word	0x40060000
10008038:	20010b44 	.word	0x20010b44
1000803c:	0001fd80 	.word	0x0001fd80
10008040:	20002000 	.word	0x20002000

10008044 <_Z10VgaBufInitv>:

// initialize scanline buffers
void VgaBufInit()
{
10008044:	b5f0      	push	{r4, r5, r6, r7, lr}
10008046:	464e      	mov	r6, r9
10008048:	4645      	mov	r5, r8
1000804a:	4657      	mov	r7, sl
1000804c:	46de      	mov	lr, fp
	// init HSYNC..back porch buffer
	//  hsync must be min. 3
	//  hback must be min. 13
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
1000804e:	2388      	movs	r3, #136	; 0x88
{
10008050:	b5e0      	push	{r5, r6, r7, lr}
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
10008052:	485f      	ldr	r0, [pc, #380]	; (100081d0 <_Z10VgaBufInitv+0x18c>)
10008054:	4f5f      	ldr	r7, [pc, #380]	; (100081d4 <_Z10VgaBufInitv+0x190>)
10008056:	8c41      	ldrh	r1, [r0, #34]	; 0x22
	LineBufHsBp[1] = BYTESWAP(VGADARK(CurVmode.hback-4-1-9,0)); // back porch - 1 - 9
10008058:	4e5f      	ldr	r6, [pc, #380]	; (100081d8 <_Z10VgaBufInitv+0x194>)
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
1000805a:	1eca      	subs	r2, r1, #3
1000805c:	ba12      	rev	r2, r2
1000805e:	431a      	orrs	r2, r3
10008060:	603a      	str	r2, [r7, #0]
	LineBufHsBp[1] = BYTESWAP(VGADARK(CurVmode.hback-4-1-9,0)); // back porch - 1 - 9
10008062:	8c84      	ldrh	r4, [r0, #36]	; 0x24
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
10008064:	469c      	mov	ip, r3
	LineBufHsBp[1] = BYTESWAP(VGADARK(CurVmode.hback-4-1-9,0)); // back porch - 1 - 9
10008066:	3c0e      	subs	r4, #14
10008068:	0423      	lsls	r3, r4, #16
1000806a:	0225      	lsls	r5, r4, #8
1000806c:	0e2d      	lsrs	r5, r5, #24
1000806e:	4033      	ands	r3, r6
10008070:	432b      	orrs	r3, r5
10008072:	25ff      	movs	r5, #255	; 0xff
10008074:	022d      	lsls	r5, r5, #8
10008076:	402c      	ands	r4, r5
10008078:	4323      	orrs	r3, r4
1000807a:	24a0      	movs	r4, #160	; 0xa0
1000807c:	4323      	orrs	r3, r4
1000807e:	607b      	str	r3, [r7, #4]
	LineBufHsBp[2] = BYTESWAP(VGACMD(vga_offset_irqset+BASE_OFFSET,0)); // IRQ command (takes 9 clock cycles)
10008080:	23c0      	movs	r3, #192	; 0xc0
10008082:	60bb      	str	r3, [r7, #8]
	LineBufHsBp[3] = BYTESWAP(VGACMD(vga_offset_output+BASE_OFFSET, CurVmode.width - 2)); // missing 2 clock cycles after last pixel
10008084:	8803      	ldrh	r3, [r0, #0]
10008086:	3440      	adds	r4, #64	; 0x40
10008088:	3b02      	subs	r3, #2
1000808a:	ba1b      	rev	r3, r3
1000808c:	4323      	orrs	r3, r4
1000808e:	60fb      	str	r3, [r7, #12]

	// init front porch buffer
	//  hfront must be min. 4
	LineBufFp = BYTESWAP(VGADARK(CurVmode.hfront-4,0)); // front porch
10008090:	8c07      	ldrh	r7, [r0, #32]
{
10008092:	b083      	sub	sp, #12
	LineBufFp = BYTESWAP(VGADARK(CurVmode.hfront-4,0)); // front porch
10008094:	3f04      	subs	r7, #4
10008096:	043b      	lsls	r3, r7, #16
10008098:	023c      	lsls	r4, r7, #8
1000809a:	0e24      	lsrs	r4, r4, #24
1000809c:	4033      	ands	r3, r6
1000809e:	4323      	orrs	r3, r4
100080a0:	24a0      	movs	r4, #160	; 0xa0
100080a2:	402f      	ands	r7, r5
100080a4:	433b      	orrs	r3, r7
100080a6:	4f4d      	ldr	r7, [pc, #308]	; (100081dc <_Z10VgaBufInitv+0x198>)
100080a8:	4323      	orrs	r3, r4
100080aa:	603b      	str	r3, [r7, #0]

	// init dark line
	LineBufDark[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
100080ac:	4b4c      	ldr	r3, [pc, #304]	; (100081e0 <_Z10VgaBufInitv+0x19c>)
100080ae:	601a      	str	r2, [r3, #0]
	LineBufDark[1] = BYTESWAP(VGADARK(CurVmode.htot-CurVmode.hsync-4,0)); // dark line
100080b0:	8bc2      	ldrh	r2, [r0, #30]
	LineBufDark[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
100080b2:	4698      	mov	r8, r3
	LineBufDark[1] = BYTESWAP(VGADARK(CurVmode.htot-CurVmode.hsync-4,0)); // dark line
100080b4:	1a57      	subs	r7, r2, r1
100080b6:	1f3b      	subs	r3, r7, #4
100080b8:	4699      	mov	r9, r3
100080ba:	464c      	mov	r4, r9
100080bc:	041b      	lsls	r3, r3, #16
100080be:	0224      	lsls	r4, r4, #8
100080c0:	0e24      	lsrs	r4, r4, #24
100080c2:	4033      	ands	r3, r6
100080c4:	4323      	orrs	r3, r4
100080c6:	464c      	mov	r4, r9
100080c8:	402c      	ands	r4, r5
100080ca:	4323      	orrs	r3, r4
100080cc:	24a0      	movs	r4, #160	; 0xa0
100080ce:	4323      	orrs	r3, r4
100080d0:	4644      	mov	r4, r8
100080d2:	6063      	str	r3, [r4, #4]

	// TV mode
	if (CurVmode.inter)
100080d4:	2356      	movs	r3, #86	; 0x56
100080d6:	5cc3      	ldrb	r3, [r0, r3]
100080d8:	2b00      	cmp	r3, #0
100080da:	d060      	beq.n	1000819e <_Z10VgaBufInitv+0x15a>
	{
		// vertical synchronization
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
100080dc:	4664      	mov	r4, ip
100080de:	0848      	lsrs	r0, r1, #1
100080e0:	1ec3      	subs	r3, r0, #3
100080e2:	ba1b      	rev	r3, r3
100080e4:	431c      	orrs	r4, r3
100080e6:	4b3f      	ldr	r3, [pc, #252]	; (100081e4 <_Z10VgaBufInitv+0x1a0>)
100080e8:	46a0      	mov	r8, r4
100080ea:	601c      	str	r4, [r3, #0]
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line
100080ec:	0854      	lsrs	r4, r2, #1
100080ee:	1a27      	subs	r7, r4, r0
100080f0:	46a1      	mov	r9, r4
100080f2:	1f3c      	subs	r4, r7, #4
100080f4:	46a2      	mov	sl, r4
100080f6:	0427      	lsls	r7, r4, #16
100080f8:	0224      	lsls	r4, r4, #8
100080fa:	4037      	ands	r7, r6
100080fc:	0e24      	lsrs	r4, r4, #24
100080fe:	4327      	orrs	r7, r4
10008100:	4654      	mov	r4, sl
10008102:	402c      	ands	r4, r5
10008104:	4327      	orrs	r7, r4
10008106:	24a0      	movs	r4, #160	; 0xa0
10008108:	433c      	orrs	r4, r7
1000810a:	9401      	str	r4, [sp, #4]
1000810c:	605c      	str	r4, [r3, #4]
		LineBufSync[2] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
1000810e:	4644      	mov	r4, r8
		LineBufSync[3] = BYTESWAP(VGADARK((CurVmode.htot+1)/2-CurVmode.hsync/2-4,0)); // dark line
10008110:	3201      	adds	r2, #1
10008112:	1052      	asrs	r2, r2, #1
10008114:	1a10      	subs	r0, r2, r0
10008116:	3804      	subs	r0, #4
		LineBufSync[2] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
10008118:	609c      	str	r4, [r3, #8]
		LineBufSync[3] = BYTESWAP(VGADARK((CurVmode.htot+1)/2-CurVmode.hsync/2-4,0)); // dark line
1000811a:	0404      	lsls	r4, r0, #16
1000811c:	4034      	ands	r4, r6
1000811e:	46a2      	mov	sl, r4
10008120:	0204      	lsls	r4, r0, #8
10008122:	0e24      	lsrs	r4, r4, #24
10008124:	46a3      	mov	fp, r4
10008126:	4654      	mov	r4, sl
10008128:	465f      	mov	r7, fp
1000812a:	4028      	ands	r0, r5
1000812c:	433c      	orrs	r4, r7
1000812e:	4320      	orrs	r0, r4
10008130:	24a0      	movs	r4, #160	; 0xa0
10008132:	4320      	orrs	r0, r4
10008134:	60d8      	str	r0, [r3, #12]

		LineBufSync[4] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot/2-CurVmode.hsync-3)); // invert dark line
10008136:	4648      	mov	r0, r9
10008138:	4664      	mov	r4, ip
1000813a:	1a40      	subs	r0, r0, r1
1000813c:	3803      	subs	r0, #3
1000813e:	ba00      	rev	r0, r0
10008140:	4320      	orrs	r0, r4
10008142:	6118      	str	r0, [r3, #16]
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10008144:	1f08      	subs	r0, r1, #4
10008146:	4681      	mov	r9, r0
10008148:	0400      	lsls	r0, r0, #16
1000814a:	4006      	ands	r6, r0
1000814c:	4648      	mov	r0, r9
		LineBufSync[6] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,(CurVmode.htot+1)/2-CurVmode.hsync-3)); // invert dark line
1000814e:	1a52      	subs	r2, r2, r1
10008150:	4661      	mov	r1, ip
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10008152:	0200      	lsls	r0, r0, #8
10008154:	0e00      	lsrs	r0, r0, #24
10008156:	4306      	orrs	r6, r0
10008158:	4648      	mov	r0, r9
		LineBufSync[6] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,(CurVmode.htot+1)/2-CurVmode.hsync-3)); // invert dark line
1000815a:	3a03      	subs	r2, #3
1000815c:	ba12      	rev	r2, r2
1000815e:	430a      	orrs	r2, r1
10008160:	619a      	str	r2, [r3, #24]
		LineBufSync[7] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC

		LineBufSync[8] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
10008162:	4642      	mov	r2, r8
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10008164:	4005      	ands	r5, r0
		LineBufSync[9] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line

		// control blocks - initialize to VSYNC
		CtrlBuf1[0] = 4; // send 4x u32
10008166:	2004      	movs	r0, #4
		LineBufSync[8] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
10008168:	621a      	str	r2, [r3, #32]
		LineBufSync[9] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line
1000816a:	9a01      	ldr	r2, [sp, #4]
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000816c:	4335      	orrs	r5, r6
1000816e:	3418      	adds	r4, #24
		LineBufSync[9] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line
10008170:	625a      	str	r2, [r3, #36]	; 0x24
		CtrlBuf1[0] = 4; // send 4x u32
10008172:	491d      	ldr	r1, [pc, #116]	; (100081e8 <_Z10VgaBufInitv+0x1a4>)
		CtrlBuf1[1] = (u32)&LineBufSync[4]; // VSYNC

		CtrlBuf2[0] = 4; // send 4x u32
10008174:	4a1d      	ldr	r2, [pc, #116]	; (100081ec <_Z10VgaBufInitv+0x1a8>)
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10008176:	432c      	orrs	r4, r5
10008178:	615c      	str	r4, [r3, #20]
		LineBufSync[7] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000817a:	61dc      	str	r4, [r3, #28]
		CtrlBuf1[1] = (u32)&LineBufSync[4]; // VSYNC
1000817c:	3310      	adds	r3, #16
		CtrlBuf1[0] = 4; // send 4x u32
1000817e:	6008      	str	r0, [r1, #0]
		CtrlBuf1[1] = (u32)&LineBufSync[4]; // VSYNC
10008180:	604b      	str	r3, [r1, #4]
		CtrlBuf2[0] = 4; // send 4x u32
10008182:	6010      	str	r0, [r2, #0]
		CtrlBuf2[1] = (u32)&LineBufSync[4]; // VSYNC
10008184:	6053      	str	r3, [r2, #4]

		CtrlBuf2[0] = 2; // send 2x u32
		CtrlBuf2[1] = (u32)&LineBufSync[0]; // VSYNC
	}

	CtrlBuf1[2] = 0; // stop mark
10008186:	2300      	movs	r3, #0
10008188:	608b      	str	r3, [r1, #8]
	CtrlBuf1[3] = 0; // stop mark
1000818a:	60cb      	str	r3, [r1, #12]

	CtrlBuf2[2] = 0; // stop mark
1000818c:	6093      	str	r3, [r2, #8]
	CtrlBuf2[3] = 0; // stop mark
1000818e:	60d3      	str	r3, [r2, #12]
}
10008190:	b003      	add	sp, #12
10008192:	bcf0      	pop	{r4, r5, r6, r7}
10008194:	46bb      	mov	fp, r7
10008196:	46b2      	mov	sl, r6
10008198:	46a9      	mov	r9, r5
1000819a:	46a0      	mov	r8, r4
1000819c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
1000819e:	4662      	mov	r2, ip
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
100081a0:	24a0      	movs	r4, #160	; 0xa0
		CtrlBuf1[0] = 2; // send 2x u32
100081a2:	2002      	movs	r0, #2
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
100081a4:	3f03      	subs	r7, #3
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
100081a6:	3904      	subs	r1, #4
100081a8:	ba3f      	rev	r7, r7
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
100081aa:	4317      	orrs	r7, r2
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
100081ac:	040a      	lsls	r2, r1, #16
100081ae:	4016      	ands	r6, r2
100081b0:	020a      	lsls	r2, r1, #8
100081b2:	0e12      	lsrs	r2, r2, #24
100081b4:	4316      	orrs	r6, r2
100081b6:	4029      	ands	r1, r5
100081b8:	4331      	orrs	r1, r6
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
100081ba:	4b0a      	ldr	r3, [pc, #40]	; (100081e4 <_Z10VgaBufInitv+0x1a0>)
		CtrlBuf2[0] = 2; // send 2x u32
100081bc:	4a0b      	ldr	r2, [pc, #44]	; (100081ec <_Z10VgaBufInitv+0x1a8>)
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
100081be:	430c      	orrs	r4, r1
		CtrlBuf1[0] = 2; // send 2x u32
100081c0:	4909      	ldr	r1, [pc, #36]	; (100081e8 <_Z10VgaBufInitv+0x1a4>)
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
100081c2:	601f      	str	r7, [r3, #0]
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
100081c4:	605c      	str	r4, [r3, #4]
		CtrlBuf1[0] = 2; // send 2x u32
100081c6:	6008      	str	r0, [r1, #0]
		CtrlBuf1[1] = (u32)&LineBufSync[0]; // VSYNC
100081c8:	604b      	str	r3, [r1, #4]
		CtrlBuf2[0] = 2; // send 2x u32
100081ca:	6010      	str	r0, [r2, #0]
		CtrlBuf2[1] = (u32)&LineBufSync[0]; // VSYNC
100081cc:	6053      	str	r3, [r2, #4]
100081ce:	e7da      	b.n	10008186 <_Z10VgaBufInitv+0x142>
100081d0:	20010b7c 	.word	0x20010b7c
100081d4:	2001b358 	.word	0x2001b358
100081d8:	00ffff00 	.word	0x00ffff00
100081dc:	2001b354 	.word	0x2001b354
100081e0:	2001b34c 	.word	0x2001b34c
100081e4:	2001b368 	.word	0x2001b368
100081e8:	2000f668 	.word	0x2000f668
100081ec:	200100c8 	.word	0x200100c8

100081f0 <_Z7VgaTermv>:
 *
 * \param channel DMA channel
 */
static inline void dma_channel_abort(uint channel) {
    check_dma_channel_param(channel);
    dma_hw->abort = 1u << channel;
100081f0:	21a0      	movs	r1, #160	; 0xa0
100081f2:	2302      	movs	r3, #2
    // Bit will go 0 once channel has reached safe state
    // (i.e. any in-flight transfers have retired)
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
100081f4:	2002      	movs	r0, #2
    dma_hw->abort = 1u << channel;
100081f6:	4a27      	ldr	r2, [pc, #156]	; (10008294 <_Z7VgaTermv+0xa4>)
100081f8:	05c9      	lsls	r1, r1, #23

// terminate VGA service
void VgaTerm()
{
100081fa:	b570      	push	{r4, r5, r6, lr}
100081fc:	508b      	str	r3, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
100081fe:	588b      	ldr	r3, [r1, r2]
10008200:	4218      	tst	r0, r3
10008202:	d1fc      	bne.n	100081fe <_Z7VgaTermv+0xe>
    dma_hw->abort = 1u << channel;
10008204:	2301      	movs	r3, #1
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
10008206:	20a0      	movs	r0, #160	; 0xa0
    dma_hw->abort = 1u << channel;
10008208:	508b      	str	r3, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
1000820a:	2201      	movs	r2, #1
1000820c:	4921      	ldr	r1, [pc, #132]	; (10008294 <_Z7VgaTermv+0xa4>)
1000820e:	05c0      	lsls	r0, r0, #23
10008210:	5843      	ldr	r3, [r0, r1]
10008212:	421a      	tst	r2, r3
10008214:	d1fc      	bne.n	10008210 <_Z7VgaTermv+0x20>
    dma_hw->abort = 1u << channel;
10008216:	24a0      	movs	r4, #160	; 0xa0
10008218:	2001      	movs	r0, #1
1000821a:	2601      	movs	r6, #1
1000821c:	4a1d      	ldr	r2, [pc, #116]	; (10008294 <_Z7VgaTermv+0xa4>)
1000821e:	05e4      	lsls	r4, r4, #23
10008220:	0031      	movs	r1, r6
10008222:	4081      	lsls	r1, r0
10008224:	50a1      	str	r1, [r4, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
10008226:	58a3      	ldr	r3, [r4, r2]
10008228:	420b      	tst	r3, r1
1000822a:	d1fc      	bne.n	10008226 <_Z7VgaTermv+0x36>
    dma_hw->abort = 1u << channel;
1000822c:	0031      	movs	r1, r6
1000822e:	1e43      	subs	r3, r0, #1
10008230:	4099      	lsls	r1, r3
10008232:	50a1      	str	r1, [r4, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
10008234:	58a3      	ldr	r3, [r4, r2]
10008236:	001d      	movs	r5, r3
10008238:	400d      	ands	r5, r1
1000823a:	420b      	tst	r3, r1
1000823c:	d1fa      	bne.n	10008234 <_Z7VgaTermv+0x44>
	int i;

	// abort DMA channels
	dma_channel_abort(VGA_DMA_PIO0); // pre-abort, could be chaining right now
	dma_channel_abort(VGA_DMA_CB0);
	for (i = 0; i < LAYERS; i++)
1000823e:	3002      	adds	r0, #2
10008240:	2809      	cmp	r0, #9
10008242:	d1ed      	bne.n	10008220 <_Z7VgaTermv+0x30>
		dma_channel_abort(VGA_DMA_PIO(i));
		dma_channel_abort(VGA_DMA_CB(i));
	}

	// disable IRQ0 from DMA0
	irq_set_enabled(DMA_IRQ_0, false);
10008244:	2100      	movs	r1, #0
10008246:	3002      	adds	r0, #2
10008248:	f7f9 fc34 	bl	10001ab4 <irq_set_enabled>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000824c:	2302      	movs	r3, #2
1000824e:	4a12      	ldr	r2, [pc, #72]	; (10008298 <_Z7VgaTermv+0xa8>)
    pio->ctrl = (pio->ctrl & ~mask) | (enabled ? mask : 0u);
10008250:	4812      	ldr	r0, [pc, #72]	; (1000829c <_Z7VgaTermv+0xac>)
10008252:	6013      	str	r3, [r2, #0]
	dma_channel_set_irq0_enabled(VGA_DMA_PIO0, false);

	// Clear the interrupt request for DMA control channel
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
10008254:	4a12      	ldr	r2, [pc, #72]	; (100082a0 <_Z7VgaTermv+0xb0>)
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10008256:	4913      	ldr	r1, [pc, #76]	; (100082a4 <_Z7VgaTermv+0xb4>)
10008258:	50a3      	str	r3, [r4, r2]
1000825a:	220f      	movs	r2, #15
1000825c:	6803      	ldr	r3, [r0, #0]
1000825e:	4393      	bics	r3, r2
10008260:	6003      	str	r3, [r0, #0]
    pio->ctrl |= (mask << PIO_CTRL_SM_RESTART_LSB) & PIO_CTRL_SM_RESTART_BITS;
10008262:	6803      	ldr	r3, [r0, #0]
10008264:	32e1      	adds	r2, #225	; 0xe1
10008266:	4313      	orrs	r3, r2
10008268:	6003      	str	r3, [r0, #0]
1000826a:	2380      	movs	r3, #128	; 0x80
1000826c:	4a0e      	ldr	r2, [pc, #56]	; (100082a8 <_Z7VgaTermv+0xb8>)
1000826e:	061b      	lsls	r3, r3, #24
10008270:	6013      	str	r3, [r2, #0]
10008272:	6013      	str	r3, [r2, #0]

	// clear FIFOs
	for (i = 0; i < LAYERS; i++)
	{
		pio_sm_clear_fifos(VGA_PIO, VGA_SM(i));
		CtrlBufNext[i] = NULL;
10008274:	4a0d      	ldr	r2, [pc, #52]	; (100082ac <_Z7VgaTermv+0xbc>)
10008276:	6015      	str	r5, [r2, #0]
10008278:	600b      	str	r3, [r1, #0]
1000827a:	600b      	str	r3, [r1, #0]
1000827c:	490c      	ldr	r1, [pc, #48]	; (100082b0 <_Z7VgaTermv+0xc0>)
1000827e:	6055      	str	r5, [r2, #4]
10008280:	600b      	str	r3, [r1, #0]
10008282:	600b      	str	r3, [r1, #0]
10008284:	490b      	ldr	r1, [pc, #44]	; (100082b4 <_Z7VgaTermv+0xc4>)
10008286:	6095      	str	r5, [r2, #8]
10008288:	600b      	str	r3, [r1, #0]
1000828a:	600b      	str	r3, [r1, #0]
1000828c:	60d5      	str	r5, [r2, #12]
	}

	// clear PIO instruction memory 
	pio_clear_instruction_memory(VGA_PIO);
1000828e:	f7fa f88f 	bl	100023b0 <pio_clear_instruction_memory>
}
10008292:	bd70      	pop	{r4, r5, r6, pc}
10008294:	00000444 	.word	0x00000444
10008298:	50003404 	.word	0x50003404
1000829c:	50200000 	.word	0x50200000
100082a0:	0000040c 	.word	0x0000040c
100082a4:	502010e8 	.word	0x502010e8
100082a8:	502010d0 	.word	0x502010d0
100082ac:	20010b28 	.word	0x20010b28
100082b0:	50201100 	.word	0x50201100
100082b4:	50201118 	.word	0x50201118

100082b8 <_Z16ScanlineTypeInitPK6sVmode>:

// initialize scanline type table
void ScanlineTypeInit(const sVmode* v)
{
100082b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100082ba:	46c6      	mov	lr, r8
	u8* d = ScanlineType;
	int i, k;

	// line 0 is not used
	*d++ = LINE_DARK;
100082bc:	2305      	movs	r3, #5
{
100082be:	b500      	push	{lr}
	*d++ = LINE_DARK;
100082c0:	4c6b      	ldr	r4, [pc, #428]	; (10008470 <_Z16ScanlineTypeInitPK6sVmode+0x1b8>)
{
100082c2:	0005      	movs	r5, r0
	*d++ = LINE_DARK;
100082c4:	7023      	strb	r3, [r4, #0]

	// progressive mode (VGA 525)
	if (!v->inter)
100082c6:	3351      	adds	r3, #81	; 0x51
100082c8:	5cc3      	ldrb	r3, [r0, r3]
100082ca:	2b00      	cmp	r3, #0
100082cc:	d125      	bne.n	1000831a <_Z16ScanlineTypeInitPK6sVmode+0x62>
	{
		// vertical sync (VGA 2)
		for (i = v->vsync1; i > 0; i--) *d++ = LINE_VSYNC;
100082ce:	8e86      	ldrh	r6, [r0, #52]	; 0x34
	*d++ = LINE_DARK;
100082d0:	3401      	adds	r4, #1
		for (i = v->vsync1; i > 0; i--) *d++ = LINE_VSYNC;
100082d2:	2e00      	cmp	r6, #0
100082d4:	d005      	beq.n	100082e2 <_Z16ScanlineTypeInitPK6sVmode+0x2a>
100082d6:	0020      	movs	r0, r4
100082d8:	0032      	movs	r2, r6
100082da:	2100      	movs	r1, #0
100082dc:	f7f8 ff6a 	bl	100011b4 <__wrap_memset>
100082e0:	1934      	adds	r4, r6, r4

		// dark (VGA 33)
		for (i = v->vback1; i > 0; i--) *d++ = LINE_DARK;
100082e2:	8f2e      	ldrh	r6, [r5, #56]	; 0x38
100082e4:	2e00      	cmp	r6, #0
100082e6:	d005      	beq.n	100082f4 <_Z16ScanlineTypeInitPK6sVmode+0x3c>
100082e8:	0020      	movs	r0, r4
100082ea:	0032      	movs	r2, r6
100082ec:	2105      	movs	r1, #5
100082ee:	f7f8 ff61 	bl	100011b4 <__wrap_memset>
100082f2:	19a4      	adds	r4, r4, r6

		// image (VGA 480)
		for (i = v->vact1; i > 0; i--) *d++ = LINE_IMG;
100082f4:	8f6e      	ldrh	r6, [r5, #58]	; 0x3a
100082f6:	2e00      	cmp	r6, #0
100082f8:	d005      	beq.n	10008306 <_Z16ScanlineTypeInitPK6sVmode+0x4e>
100082fa:	0020      	movs	r0, r4
100082fc:	0032      	movs	r2, r6
100082fe:	2106      	movs	r1, #6
10008300:	f7f8 ff58 	bl	100011b4 <__wrap_memset>
10008304:	19a4      	adds	r4, r4, r6

		// dark (VGA 10)
		for (i = v->vfront1; i > 0; i--) *d++ = LINE_DARK;
10008306:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
10008308:	2a00      	cmp	r2, #0
1000830a:	d003      	beq.n	10008314 <_Z16ScanlineTypeInitPK6sVmode+0x5c>
1000830c:	2105      	movs	r1, #5
1000830e:	0020      	movs	r0, r4
10008310:	f7f8 ff50 	bl	100011b4 <__wrap_memset>
		for (i = v->vfront2; i > 0; i--) *d++ = LINE_DARK;

		// half sync (PAL 3, NTSC 3)
		for (i = v->vpre2/2; i > 0; i--) *d++ = LINE_HHSYNC;
	}
}
10008314:	bc80      	pop	{r7}
10008316:	46b8      	mov	r8, r7
10008318:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (i = v->vsync1/2; i > 0; i--) *d++ = LINE_VVSYNC;
1000831a:	8e83      	ldrh	r3, [r0, #52]	; 0x34
	*d++ = LINE_DARK;
1000831c:	3401      	adds	r4, #1
		for (i = v->vsync1/2; i > 0; i--) *d++ = LINE_VVSYNC;
1000831e:	085e      	lsrs	r6, r3, #1
10008320:	d006      	beq.n	10008330 <_Z16ScanlineTypeInitPK6sVmode+0x78>
10008322:	0020      	movs	r0, r4
10008324:	0032      	movs	r2, r6
10008326:	2101      	movs	r1, #1
10008328:	f7f8 ff44 	bl	100011b4 <__wrap_memset>
		if ((v->vsync1 & 1) != 0) *d++ = LINE_VHSYNC;
1000832c:	8eab      	ldrh	r3, [r5, #52]	; 0x34
		for (i = v->vsync1/2; i > 0; i--) *d++ = LINE_VVSYNC;
1000832e:	1934      	adds	r4, r6, r4
		if ((v->vsync1 & 1) != 0) *d++ = LINE_VHSYNC;
10008330:	07db      	lsls	r3, r3, #31
10008332:	d502      	bpl.n	1000833a <_Z16ScanlineTypeInitPK6sVmode+0x82>
10008334:	2302      	movs	r3, #2
10008336:	7023      	strb	r3, [r4, #0]
10008338:	3401      	adds	r4, #1
		for (i = v->vpost1/2; i > 0; i--) *d++ = LINE_HHSYNC;
1000833a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
1000833c:	0876      	lsrs	r6, r6, #1
1000833e:	d005      	beq.n	1000834c <_Z16ScanlineTypeInitPK6sVmode+0x94>
10008340:	0020      	movs	r0, r4
10008342:	0032      	movs	r2, r6
10008344:	2103      	movs	r1, #3
10008346:	f7f8 ff35 	bl	100011b4 <__wrap_memset>
1000834a:	19a4      	adds	r4, r4, r6
		for (i = v->vback1; i > 0; i--) *d++ = LINE_DARK;
1000834c:	8f2e      	ldrh	r6, [r5, #56]	; 0x38
1000834e:	2e00      	cmp	r6, #0
10008350:	d005      	beq.n	1000835e <_Z16ScanlineTypeInitPK6sVmode+0xa6>
10008352:	0020      	movs	r0, r4
10008354:	0032      	movs	r2, r6
10008356:	2105      	movs	r1, #5
10008358:	f7f8 ff2c 	bl	100011b4 <__wrap_memset>
1000835c:	19a4      	adds	r4, r4, r6
		if (v->odd)
1000835e:	2358      	movs	r3, #88	; 0x58
10008360:	5ceb      	ldrb	r3, [r5, r3]
			for (i = v->vact1; i > 0; i--) *d++ = LINE_IMGODD1; // odd lines 1, 3, 5, ... (PAL)
10008362:	8f6e      	ldrh	r6, [r5, #58]	; 0x3a
		if (v->odd)
10008364:	2b00      	cmp	r3, #0
10008366:	d16e      	bne.n	10008446 <_Z16ScanlineTypeInitPK6sVmode+0x18e>
			for (i = v->vact1; i > 0; i--) *d++ = LINE_IMGEVEN1; // even lines 0, 2, 4, ... (NTSC)
10008368:	2e00      	cmp	r6, #0
1000836a:	d005      	beq.n	10008378 <_Z16ScanlineTypeInitPK6sVmode+0xc0>
1000836c:	0020      	movs	r0, r4
1000836e:	0032      	movs	r2, r6
10008370:	2107      	movs	r1, #7
10008372:	f7f8 ff1f 	bl	100011b4 <__wrap_memset>
10008376:	19a4      	adds	r4, r4, r6
		for (i = v->vfront1; i > 0; i--) *d++ = LINE_DARK;
10008378:	8fae      	ldrh	r6, [r5, #60]	; 0x3c
1000837a:	2e00      	cmp	r6, #0
1000837c:	d005      	beq.n	1000838a <_Z16ScanlineTypeInitPK6sVmode+0xd2>
1000837e:	0020      	movs	r0, r4
10008380:	0032      	movs	r2, r6
10008382:	2105      	movs	r1, #5
10008384:	f7f8 ff16 	bl	100011b4 <__wrap_memset>
10008388:	19a4      	adds	r4, r4, r6
		for (i = v->vpre1/2; i > 0; i--) *d++ = LINE_HHSYNC;
1000838a:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
1000838c:	087e      	lsrs	r6, r7, #1
1000838e:	d006      	beq.n	1000839e <_Z16ScanlineTypeInitPK6sVmode+0xe6>
10008390:	0020      	movs	r0, r4
10008392:	0032      	movs	r2, r6
10008394:	2103      	movs	r1, #3
10008396:	f7f8 ff0d 	bl	100011b4 <__wrap_memset>
		k = v->vpre1 & 1;
1000839a:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
		for (i = v->vpre1/2; i > 0; i--) *d++ = LINE_HHSYNC;
1000839c:	19a4      	adds	r4, r4, r6
		k = v->vpre1 & 1;
1000839e:	2301      	movs	r3, #1
100083a0:	001a      	movs	r2, r3
100083a2:	403a      	ands	r2, r7
		if (k != 0) *d++ = LINE_HVSYNC;
100083a4:	423b      	tst	r3, r7
100083a6:	d002      	beq.n	100083ae <_Z16ScanlineTypeInitPK6sVmode+0xf6>
100083a8:	3303      	adds	r3, #3
100083aa:	7023      	strb	r3, [r4, #0]
100083ac:	3401      	adds	r4, #1
		for (i = (v->vsync2 - k)/2; i > 0; i--) *d++ = LINE_VVSYNC;
100083ae:	2342      	movs	r3, #66	; 0x42
100083b0:	4698      	mov	r8, r3
100083b2:	5aeb      	ldrh	r3, [r5, r3]
100083b4:	1a9a      	subs	r2, r3, r2
100083b6:	0fd6      	lsrs	r6, r2, #31
100083b8:	18b6      	adds	r6, r6, r2
100083ba:	1076      	asrs	r6, r6, #1
100083bc:	d007      	beq.n	100083ce <_Z16ScanlineTypeInitPK6sVmode+0x116>
100083be:	0020      	movs	r0, r4
100083c0:	0032      	movs	r2, r6
100083c2:	2101      	movs	r1, #1
100083c4:	f7f8 fef6 	bl	100011b4 <__wrap_memset>
		if (((v->vsync2 - k) & 1) != 0) *d++ = LINE_VHSYNC;
100083c8:	4643      	mov	r3, r8
100083ca:	5aeb      	ldrh	r3, [r5, r3]
		for (i = (v->vsync2 - k)/2; i > 0; i--) *d++ = LINE_VVSYNC;
100083cc:	19a4      	adds	r4, r4, r6
		if (((v->vsync2 - k) & 1) != 0) *d++ = LINE_VHSYNC;
100083ce:	1bdb      	subs	r3, r3, r7
100083d0:	07db      	lsls	r3, r3, #31
100083d2:	d502      	bpl.n	100083da <_Z16ScanlineTypeInitPK6sVmode+0x122>
100083d4:	2302      	movs	r3, #2
100083d6:	7023      	strb	r3, [r4, #0]
100083d8:	3401      	adds	r4, #1
		for (i = v->vpost2/2; i > 0; i--) *d++ = LINE_HHSYNC;
100083da:	2344      	movs	r3, #68	; 0x44
100083dc:	5aee      	ldrh	r6, [r5, r3]
100083de:	0876      	lsrs	r6, r6, #1
100083e0:	d005      	beq.n	100083ee <_Z16ScanlineTypeInitPK6sVmode+0x136>
100083e2:	0020      	movs	r0, r4
100083e4:	0032      	movs	r2, r6
100083e6:	2103      	movs	r1, #3
100083e8:	f7f8 fee4 	bl	100011b4 <__wrap_memset>
100083ec:	19a4      	adds	r4, r4, r6
		for (i = v->vback2; i > 0; i--) *d++ = LINE_DARK;
100083ee:	2346      	movs	r3, #70	; 0x46
100083f0:	5aee      	ldrh	r6, [r5, r3]
100083f2:	2e00      	cmp	r6, #0
100083f4:	d005      	beq.n	10008402 <_Z16ScanlineTypeInitPK6sVmode+0x14a>
100083f6:	0020      	movs	r0, r4
100083f8:	0032      	movs	r2, r6
100083fa:	2105      	movs	r1, #5
100083fc:	f7f8 feda 	bl	100011b4 <__wrap_memset>
10008400:	19a4      	adds	r4, r4, r6
		if (v->odd)
10008402:	2358      	movs	r3, #88	; 0x58
10008404:	5ceb      	ldrb	r3, [r5, r3]
10008406:	2b00      	cmp	r3, #0
10008408:	d026      	beq.n	10008458 <_Z16ScanlineTypeInitPK6sVmode+0x1a0>
			for (i = v->vact2; i > 0; i--) *d++ = LINE_IMGEVEN2; // even lines 0, 2, 4, ... (PAL)
1000840a:	2348      	movs	r3, #72	; 0x48
1000840c:	5aee      	ldrh	r6, [r5, r3]
1000840e:	2e00      	cmp	r6, #0
10008410:	d005      	beq.n	1000841e <_Z16ScanlineTypeInitPK6sVmode+0x166>
10008412:	0020      	movs	r0, r4
10008414:	0032      	movs	r2, r6
10008416:	2108      	movs	r1, #8
10008418:	f7f8 fecc 	bl	100011b4 <__wrap_memset>
1000841c:	19a4      	adds	r4, r4, r6
		for (i = v->vfront2; i > 0; i--) *d++ = LINE_DARK;
1000841e:	234a      	movs	r3, #74	; 0x4a
10008420:	5aee      	ldrh	r6, [r5, r3]
10008422:	2e00      	cmp	r6, #0
10008424:	d005      	beq.n	10008432 <_Z16ScanlineTypeInitPK6sVmode+0x17a>
10008426:	0020      	movs	r0, r4
10008428:	0032      	movs	r2, r6
1000842a:	2105      	movs	r1, #5
1000842c:	f7f8 fec2 	bl	100011b4 <__wrap_memset>
10008430:	19a4      	adds	r4, r4, r6
		for (i = v->vpre2/2; i > 0; i--) *d++ = LINE_HHSYNC;
10008432:	234c      	movs	r3, #76	; 0x4c
10008434:	5aea      	ldrh	r2, [r5, r3]
10008436:	0852      	lsrs	r2, r2, #1
10008438:	d100      	bne.n	1000843c <_Z16ScanlineTypeInitPK6sVmode+0x184>
1000843a:	e76b      	b.n	10008314 <_Z16ScanlineTypeInitPK6sVmode+0x5c>
1000843c:	2103      	movs	r1, #3
1000843e:	0020      	movs	r0, r4
10008440:	f7f8 feb8 	bl	100011b4 <__wrap_memset>
10008444:	e766      	b.n	10008314 <_Z16ScanlineTypeInitPK6sVmode+0x5c>
			for (i = v->vact1; i > 0; i--) *d++ = LINE_IMGODD1; // odd lines 1, 3, 5, ... (PAL)
10008446:	2e00      	cmp	r6, #0
10008448:	d096      	beq.n	10008378 <_Z16ScanlineTypeInitPK6sVmode+0xc0>
1000844a:	0020      	movs	r0, r4
1000844c:	0032      	movs	r2, r6
1000844e:	2109      	movs	r1, #9
10008450:	f7f8 feb0 	bl	100011b4 <__wrap_memset>
10008454:	19a4      	adds	r4, r4, r6
10008456:	e78f      	b.n	10008378 <_Z16ScanlineTypeInitPK6sVmode+0xc0>
			for (i = v->vact2; i > 0; i--) *d++ = LINE_IMGODD2; // odd lines 1, 3, 5, ... (NTSC)
10008458:	2348      	movs	r3, #72	; 0x48
1000845a:	5aee      	ldrh	r6, [r5, r3]
1000845c:	2e00      	cmp	r6, #0
1000845e:	d0de      	beq.n	1000841e <_Z16ScanlineTypeInitPK6sVmode+0x166>
10008460:	0020      	movs	r0, r4
10008462:	0032      	movs	r2, r6
10008464:	210a      	movs	r1, #10
10008466:	f7f8 fea5 	bl	100011b4 <__wrap_memset>
1000846a:	19a4      	adds	r4, r4, r6
1000846c:	e7d7      	b.n	1000841e <_Z16ScanlineTypeInitPK6sVmode+0x166>
1000846e:	46c0      	nop			; (mov r8, r8)
10008470:	2001c878 	.word	0x2001c878

10008474 <_Z7VgaInitPK6sVmode>:
}

// initialize videomode (returns False on bad configuration)
// - All layer modes must use same layer program (LAYERMODE_BASE = overlapped layers are OFF)
void VgaInit(const sVmode* vmode)
{
10008474:	b5f0      	push	{r4, r5, r6, r7, lr}
10008476:	46de      	mov	lr, fp
10008478:	464e      	mov	r6, r9
1000847a:	4645      	mov	r5, r8
1000847c:	4657      	mov	r7, sl
1000847e:	0004      	movs	r4, r0
10008480:	b5e0      	push	{r5, r6, r7, lr}
10008482:	b083      	sub	sp, #12
10008484:	9001      	str	r0, [sp, #4]
	int i;

	// stop old state
	VgaTerm();
10008486:	f7ff feb3 	bl	100081f0 <_Z7VgaTermv>

	// initialize scanline type table
	ScanlineTypeInit(vmode);
1000848a:	0020      	movs	r0, r4
1000848c:	f7ff ff14 	bl	100082b8 <_Z16ScanlineTypeInitPK6sVmode>
	// prepare render font pixel mask
	for (i = 0; i < 256; i++)
	{
		// higher 4 bits
		u32 m = 0;
		if ((i & B7) != 0) m |= 0xff;
10008490:	2280      	movs	r2, #128	; 0x80
10008492:	4691      	mov	r9, r2
		if ((i & B6) != 0) m |= 0xff << 8;
10008494:	3a40      	subs	r2, #64	; 0x40
10008496:	4690      	mov	r8, r2
		if ((i & B5) != 0) m |= 0xff << 16;
		if ((i & B4) != 0) m |= 0xff << 24;
10008498:	22ff      	movs	r2, #255	; 0xff
		if ((i & B5) != 0) m |= 0xff << 16;
1000849a:	27ff      	movs	r7, #255	; 0xff
		if ((i & B4) != 0) m |= 0xff << 24;
1000849c:	0612      	lsls	r2, r2, #24
	for (i = 0; i < 256; i++)
1000849e:	2300      	movs	r3, #0
		if ((i & B5) != 0) m |= 0xff << 16;
100084a0:	2520      	movs	r5, #32
		if ((i & B4) != 0) m |= 0xff << 24;
100084a2:	2610      	movs	r6, #16
100084a4:	4694      	mov	ip, r2
100084a6:	4956      	ldr	r1, [pc, #344]	; (10008600 <_Z7VgaInitPK6sVmode+0x18c>)
		if ((i & B5) != 0) m |= 0xff << 16;
100084a8:	043f      	lsls	r7, r7, #16
100084aa:	e024      	b.n	100084f6 <_Z7VgaInitPK6sVmode+0x82>
		if ((i & B7) != 0) m |= 0xff;
100084ac:	20ff      	movs	r0, #255	; 0xff
		u32 m = 0;
100084ae:	2200      	movs	r2, #0
		if ((i & B7) != 0) m |= 0xff;
100084b0:	0200      	lsls	r0, r0, #8
		if ((i & B6) != 0) m |= 0xff << 8;
100084b2:	4644      	mov	r4, r8
100084b4:	421c      	tst	r4, r3
100084b6:	d000      	beq.n	100084ba <_Z7VgaInitPK6sVmode+0x46>
100084b8:	0002      	movs	r2, r0
		if ((i & B5) != 0) m |= 0xff << 16;
100084ba:	421d      	tst	r5, r3
100084bc:	d000      	beq.n	100084c0 <_Z7VgaInitPK6sVmode+0x4c>
100084be:	433a      	orrs	r2, r7
		if ((i & B4) != 0) m |= 0xff << 24;
100084c0:	421e      	tst	r6, r3
100084c2:	d001      	beq.n	100084c8 <_Z7VgaInitPK6sVmode+0x54>
100084c4:	4660      	mov	r0, ip
100084c6:	4302      	orrs	r2, r0
		RenderTextMask[2*i] = m;
100084c8:	600a      	str	r2, [r1, #0]

		// lower 4 bits
		m = 0;
		if ((i & B3) != 0) m |= 0xff;
100084ca:	071a      	lsls	r2, r3, #28
100084cc:	d419      	bmi.n	10008502 <_Z7VgaInitPK6sVmode+0x8e>
100084ce:	20ff      	movs	r0, #255	; 0xff
		m = 0;
100084d0:	2200      	movs	r2, #0
		if ((i & B3) != 0) m |= 0xff;
100084d2:	0200      	lsls	r0, r0, #8
		if ((i & B2) != 0) m |= 0xff << 8;
100084d4:	075c      	lsls	r4, r3, #29
100084d6:	d500      	bpl.n	100084da <_Z7VgaInitPK6sVmode+0x66>
100084d8:	0002      	movs	r2, r0
		if ((i & B1) != 0) m |= 0xff << 16;
100084da:	0798      	lsls	r0, r3, #30
100084dc:	d500      	bpl.n	100084e0 <_Z7VgaInitPK6sVmode+0x6c>
100084de:	433a      	orrs	r2, r7
		if ((i & B0) != 0) m |= 0xff << 24;
100084e0:	07d8      	lsls	r0, r3, #31
100084e2:	d501      	bpl.n	100084e8 <_Z7VgaInitPK6sVmode+0x74>
100084e4:	4660      	mov	r0, ip
100084e6:	4302      	orrs	r2, r0
		RenderTextMask[2*i+1] = m;
100084e8:	604a      	str	r2, [r1, #4]
	for (i = 0; i < 256; i++)
100084ea:	2280      	movs	r2, #128	; 0x80
100084ec:	3301      	adds	r3, #1
100084ee:	3108      	adds	r1, #8
100084f0:	0052      	lsls	r2, r2, #1
100084f2:	4293      	cmp	r3, r2
100084f4:	d008      	beq.n	10008508 <_Z7VgaInitPK6sVmode+0x94>
		if ((i & B7) != 0) m |= 0xff;
100084f6:	464a      	mov	r2, r9
100084f8:	421a      	tst	r2, r3
100084fa:	d0d7      	beq.n	100084ac <_Z7VgaInitPK6sVmode+0x38>
100084fc:	22ff      	movs	r2, #255	; 0xff
100084fe:	4841      	ldr	r0, [pc, #260]	; (10008604 <_Z7VgaInitPK6sVmode+0x190>)
10008500:	e7d7      	b.n	100084b2 <_Z7VgaInitPK6sVmode+0x3e>
		if ((i & B3) != 0) m |= 0xff;
10008502:	22ff      	movs	r2, #255	; 0xff
10008504:	483f      	ldr	r0, [pc, #252]	; (10008604 <_Z7VgaInitPK6sVmode+0x190>)
10008506:	e7e5      	b.n	100084d4 <_Z7VgaInitPK6sVmode+0x60>

	// save current videomode
	memcpy(&CurVmode, vmode, sizeof(sVmode));

	// initialize parameters
	ScanLine = 1; // currently processed scanline
10008508:	2401      	movs	r4, #1
	memset(LineBuf0, COL_BLACK, BLACK_MAX);
1000850a:	3281      	adds	r2, #129	; 0x81
1000850c:	2100      	movs	r1, #0
1000850e:	32ff      	adds	r2, #255	; 0xff
10008510:	483d      	ldr	r0, [pc, #244]	; (10008608 <_Z7VgaInitPK6sVmode+0x194>)
10008512:	f7f8 fe4f 	bl	100011b4 <__wrap_memset>
	memcpy(&CurVmode, vmode, sizeof(sVmode));
10008516:	9d01      	ldr	r5, [sp, #4]
10008518:	225c      	movs	r2, #92	; 0x5c
1000851a:	0029      	movs	r1, r5
1000851c:	483b      	ldr	r0, [pc, #236]	; (1000860c <_Z7VgaInitPK6sVmode+0x198>)
1000851e:	f7f8 fe4f 	bl	100011c0 <__wrap___aeabi_memcpy>
	ScanLine = 1; // currently processed scanline
10008522:	4b3b      	ldr	r3, [pc, #236]	; (10008610 <_Z7VgaInitPK6sVmode+0x19c>)
//	Frame = 0;
	BufInx = 0; // at first, control buffer 1 will be sent out
	CtrlBufNext[0] = CtrlBuf2;

	// initialize base layer
	LayerModeInx[0] = LAYERMODE_BASE;
10008524:	483b      	ldr	r0, [pc, #236]	; (10008614 <_Z7VgaInitPK6sVmode+0x1a0>)
	ScanLine = 1; // currently processed scanline
10008526:	601c      	str	r4, [r3, #0]
	BufInx = 0; // at first, control buffer 1 will be sent out
10008528:	2300      	movs	r3, #0
	LayerModeInx[0] = LAYERMODE_BASE;
1000852a:	4681      	mov	r9, r0
	BufInx = 0; // at first, control buffer 1 will be sent out
1000852c:	4a3a      	ldr	r2, [pc, #232]	; (10008618 <_Z7VgaInitPK6sVmode+0x1a4>)
	CtrlBufNext[0] = CtrlBuf2;
1000852e:	493b      	ldr	r1, [pc, #236]	; (1000861c <_Z7VgaInitPK6sVmode+0x1a8>)
	BufInx = 0; // at first, control buffer 1 will be sent out
10008530:	6013      	str	r3, [r2, #0]
	memcpy(&CurLayerMode[0], &LayerMode[LAYERMODE_BASE], sizeof(sLayerMode));
10008532:	4f3b      	ldr	r7, [pc, #236]	; (10008620 <_Z7VgaInitPK6sVmode+0x1ac>)
	CtrlBufNext[0] = CtrlBuf2;
10008534:	4a3b      	ldr	r2, [pc, #236]	; (10008624 <_Z7VgaInitPK6sVmode+0x1b0>)
	LayerModeInx[0] = LAYERMODE_BASE;
10008536:	7003      	strb	r3, [r0, #0]
	memcpy(&CurLayerMode[0], &LayerMode[LAYERMODE_BASE], sizeof(sLayerMode));
10008538:	4b3b      	ldr	r3, [pc, #236]	; (10008628 <_Z7VgaInitPK6sVmode+0x1b4>)
	CtrlBufNext[0] = CtrlBuf2;
1000853a:	6011      	str	r1, [r2, #0]
	memcpy(&CurLayerMode[0], &LayerMode[LAYERMODE_BASE], sizeof(sLayerMode));
1000853c:	0038      	movs	r0, r7
1000853e:	0019      	movs	r1, r3
10008540:	2203      	movs	r2, #3
10008542:	469a      	mov	sl, r3
10008544:	f7f8 fe3c 	bl	100011c0 <__wrap___aeabi_memcpy>
	memset(&LayerScreen[0], 0, sizeof(sLayer));
10008548:	2100      	movs	r1, #0
1000854a:	2224      	movs	r2, #36	; 0x24
1000854c:	4837      	ldr	r0, [pc, #220]	; (1000862c <_Z7VgaInitPK6sVmode+0x1b8>)
1000854e:	f7f8 fe31 	bl	100011b4 <__wrap_memset>

	// save layer modes
	LayerModeInx[1] = vmode->mode[1];
10008552:	4649      	mov	r1, r9
10008554:	7eab      	ldrb	r3, [r5, #26]
	LayerModeInx[2] = vmode->mode[2];
	LayerModeInx[3] = vmode->mode[3];

	LayerMask = B0; // mask of active layers
10008556:	4e36      	ldr	r6, [pc, #216]	; (10008630 <_Z7VgaInitPK6sVmode+0x1bc>)
	LayerModeInx[1] = vmode->mode[1];
10008558:	704b      	strb	r3, [r1, #1]
	LayerModeInx[2] = vmode->mode[2];
1000855a:	7eeb      	ldrb	r3, [r5, #27]
1000855c:	3703      	adds	r7, #3
1000855e:	708b      	strb	r3, [r1, #2]
	LayerModeInx[3] = vmode->mode[3];
10008560:	7f2b      	ldrb	r3, [r5, #28]
	LayerMask = B0; // mask of active layers
10008562:	7034      	strb	r4, [r6, #0]
	LayerModeInx[3] = vmode->mode[3];
10008564:	70cb      	strb	r3, [r1, #3]
	for (i = 1; i < LAYERS; i++)
	{
		memcpy(&CurLayerMode[i], &LayerMode[LayerModeInx[i]], sizeof(sLayerMode));
		if (LayerModeInx[i] != LAYERMODE_BASE) LayerMask |= (1 << i);
10008566:	2301      	movs	r3, #1
10008568:	469b      	mov	fp, r3
		memcpy(&CurLayerMode[i], &LayerMode[LayerModeInx[i]], sizeof(sLayerMode));
1000856a:	464b      	mov	r3, r9
1000856c:	5d1d      	ldrb	r5, [r3, r4]
1000856e:	2203      	movs	r2, #3
10008570:	0069      	lsls	r1, r5, #1
10008572:	1949      	adds	r1, r1, r5
10008574:	0038      	movs	r0, r7
10008576:	4451      	add	r1, sl
10008578:	f7f8 fe22 	bl	100011c0 <__wrap___aeabi_memcpy>
		if (LayerModeInx[i] != LAYERMODE_BASE) LayerMask |= (1 << i);
1000857c:	2d00      	cmp	r5, #0
1000857e:	d004      	beq.n	1000858a <_Z7VgaInitPK6sVmode+0x116>
10008580:	465b      	mov	r3, fp
10008582:	40a3      	lsls	r3, r4
10008584:	7832      	ldrb	r2, [r6, #0]
10008586:	4313      	orrs	r3, r2
10008588:	7033      	strb	r3, [r6, #0]
	for (i = 1; i < LAYERS; i++)
1000858a:	3401      	adds	r4, #1
1000858c:	3703      	adds	r7, #3
1000858e:	2c04      	cmp	r4, #4
10008590:	d1eb      	bne.n	1000856a <_Z7VgaInitPK6sVmode+0xf6>
	}

	// get layer program
	LayerProgInx = vmode->prog;
10008592:	9b01      	ldr	r3, [sp, #4]
	memcpy(&CurLayerProg, &LayerProg[LayerProgInx], sizeof(sLayerProg));
10008594:	4927      	ldr	r1, [pc, #156]	; (10008634 <_Z7VgaInitPK6sVmode+0x1c0>)
	LayerProgInx = vmode->prog;
10008596:	7e1a      	ldrb	r2, [r3, #24]
10008598:	4b27      	ldr	r3, [pc, #156]	; (10008638 <_Z7VgaInitPK6sVmode+0x1c4>)
1000859a:	701a      	strb	r2, [r3, #0]
	memcpy(&CurLayerProg, &LayerProg[LayerProgInx], sizeof(sLayerProg));
1000859c:	0053      	lsls	r3, r2, #1
1000859e:	189b      	adds	r3, r3, r2
100085a0:	4a26      	ldr	r2, [pc, #152]	; (1000863c <_Z7VgaInitPK6sVmode+0x1c8>)
100085a2:	011b      	lsls	r3, r3, #4
100085a4:	189b      	adds	r3, r3, r2
100085a6:	000a      	movs	r2, r1
100085a8:	cb13      	ldmia	r3!, {r0, r1, r4}
100085aa:	c213      	stmia	r2!, {r0, r1, r4}
100085ac:	cb13      	ldmia	r3!, {r0, r1, r4}
100085ae:	c213      	stmia	r2!, {r0, r1, r4}
100085b0:	cb13      	ldmia	r3!, {r0, r1, r4}
100085b2:	c213      	stmia	r2!, {r0, r1, r4}
100085b4:	cb13      	ldmia	r3!, {r0, r1, r4}
100085b6:	c213      	stmia	r2!, {r0, r1, r4}

	// initialize VGA PIO
	VgaPioInit();
100085b8:	f7ff fc6e 	bl	10007e98 <_Z10VgaPioInitv>

	// initialize scanline buffers
	VgaBufInit();
100085bc:	f7ff fd42 	bl	10008044 <_Z10VgaBufInitv>

	// initialize DMA
	VgaDmaInit();
100085c0:	f7ff fbdc 	bl	10007d7c <_Z10VgaDmaInitv>

	// enable DMA IRQ
	irq_set_enabled(DMA_IRQ_0, true);
100085c4:	2101      	movs	r1, #1
100085c6:	200b      	movs	r0, #11
100085c8:	f7f9 fa74 	bl	10001ab4 <irq_set_enabled>
    dma_hw->multi_channel_trigger = chan_mask;
100085cc:	22a0      	movs	r2, #160	; 0xa0
100085ce:	2386      	movs	r3, #134	; 0x86
100085d0:	2101      	movs	r1, #1
100085d2:	05d2      	lsls	r2, r2, #23
100085d4:	00db      	lsls	r3, r3, #3
100085d6:	50d1      	str	r1, [r2, r3]
                 ((mask << PIO_CTRL_SM_ENABLE_LSB) & PIO_CTRL_SM_ENABLE_BITS);
100085d8:	230f      	movs	r3, #15
    pio->ctrl |= ((mask << PIO_CTRL_CLKDIV_RESTART_LSB) & PIO_CTRL_CLKDIV_RESTART_BITS) |
100085da:	4919      	ldr	r1, [pc, #100]	; (10008640 <_Z7VgaInitPK6sVmode+0x1cc>)

	// start DMA with base layer 0
	dma_channel_start(VGA_DMA_CB0);

	// run state machines
	pio_enable_sm_mask_in_sync(VGA_PIO, LayerMask);
100085dc:	7832      	ldrb	r2, [r6, #0]
100085de:	6808      	ldr	r0, [r1, #0]
                 ((mask << PIO_CTRL_SM_ENABLE_LSB) & PIO_CTRL_SM_ENABLE_BITS);
100085e0:	4013      	ands	r3, r2
    pio->ctrl |= ((mask << PIO_CTRL_CLKDIV_RESTART_LSB) & PIO_CTRL_CLKDIV_RESTART_BITS) |
100085e2:	4303      	orrs	r3, r0
100085e4:	20f0      	movs	r0, #240	; 0xf0
100085e6:	0212      	lsls	r2, r2, #8
100085e8:	0100      	lsls	r0, r0, #4
100085ea:	4002      	ands	r2, r0
100085ec:	4313      	orrs	r3, r2
100085ee:	600b      	str	r3, [r1, #0]
}
100085f0:	b003      	add	sp, #12
100085f2:	bcf0      	pop	{r4, r5, r6, r7}
100085f4:	46bb      	mov	fp, r7
100085f6:	46b2      	mov	sl, r6
100085f8:	46a9      	mov	r9, r5
100085fa:	46a0      	mov	r8, r4
100085fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100085fe:	46c0      	nop			; (mov r8, r8)
10008600:	2001c074 	.word	0x2001c074
10008604:	0000ffff 	.word	0x0000ffff
10008608:	20019c8c 	.word	0x20019c8c
1000860c:	20010b7c 	.word	0x20010b7c
10008610:	2001c874 	.word	0x2001c874
10008614:	20019bf8 	.word	0x20019bf8
10008618:	20003638 	.word	0x20003638
1000861c:	200100c8 	.word	0x200100c8
10008620:	20010b38 	.word	0x20010b38
10008624:	20010b28 	.word	0x20010b28
10008628:	100400e4 	.word	0x100400e4
1000862c:	20019bfc 	.word	0x20019bfc
10008630:	2003e33d 	.word	0x2003e33d
10008634:	20010b44 	.word	0x20010b44
10008638:	2003e33e 	.word	0x2003e33e
1000863c:	10040120 	.word	0x10040120
10008640:	50200000 	.word	0x50200000

10008644 <_Z7VgaCorev>:

void (* volatile Core1Fnc)() = NULL; // core 1 remote function

// VGA core
void VgaCore()
{
10008644:	b570      	push	{r4, r5, r6, lr}
			if ((u32)v == (u32)1)
				VgaTerm(); // terminate
			else
				VgaInit(v);
			__dmb();
			VgaVmodeReq = NULL;
10008646:	2600      	movs	r6, #0
10008648:	4d0f      	ldr	r5, [pc, #60]	; (10008688 <_Z7VgaCorev+0x44>)
1000864a:	4c10      	ldr	r4, [pc, #64]	; (1000868c <_Z7VgaCorev+0x48>)
    __asm volatile ("dmb");
1000864c:	f3bf 8f5f 	dmb	sy
		v = VgaVmodeReq;
10008650:	6828      	ldr	r0, [r5, #0]
		if (v != NULL)
10008652:	2800      	cmp	r0, #0
10008654:	d006      	beq.n	10008664 <_Z7VgaCorev+0x20>
			if ((u32)v == (u32)1)
10008656:	2801      	cmp	r0, #1
10008658:	d012      	beq.n	10008680 <_Z7VgaCorev+0x3c>
				VgaInit(v);
1000865a:	f7ff ff0b 	bl	10008474 <_Z7VgaInitPK6sVmode>
1000865e:	f3bf 8f5f 	dmb	sy
			VgaVmodeReq = NULL;
10008662:	602e      	str	r6, [r5, #0]
		}

		// execute remote function
		fnc = Core1Fnc;
10008664:	6823      	ldr	r3, [r4, #0]
		if (fnc != NULL)
10008666:	2b00      	cmp	r3, #0
10008668:	d0f0      	beq.n	1000864c <_Z7VgaCorev+0x8>
		{
			fnc();
1000866a:	4798      	blx	r3
1000866c:	f3bf 8f5f 	dmb	sy
			__dmb();
			Core1Fnc = NULL;
10008670:	6026      	str	r6, [r4, #0]
10008672:	f3bf 8f5f 	dmb	sy
		v = VgaVmodeReq;
10008676:	6828      	ldr	r0, [r5, #0]
		if (v != NULL)
10008678:	2800      	cmp	r0, #0
1000867a:	d0f3      	beq.n	10008664 <_Z7VgaCorev+0x20>
			if ((u32)v == (u32)1)
1000867c:	2801      	cmp	r0, #1
1000867e:	d1ec      	bne.n	1000865a <_Z7VgaCorev+0x16>
				VgaTerm(); // terminate
10008680:	f7ff fdb6 	bl	100081f0 <_Z7VgaTermv>
10008684:	e7eb      	b.n	1000865e <_Z7VgaCorev+0x1a>
10008686:	46c0      	nop			; (mov r8, r8)
10008688:	2003d638 	.word	0x2003d638
1000868c:	2000f664 	.word	0x2000f664

10008690 <_Z10VgaInitReqPK6sVmode>:
}

// request to initialize VGA videomode, NULL=only stop driver (wait to initialization completes)
void VgaInitReq(const sVmode* vmode)
{
	if (vmode == NULL) vmode = (const sVmode*)1;
10008690:	2800      	cmp	r0, #0
10008692:	d00c      	beq.n	100086ae <_Z10VgaInitReqPK6sVmode+0x1e>
10008694:	f3bf 8f5f 	dmb	sy
	__dmb();
	VgaVmodeReq = vmode;
10008698:	4a06      	ldr	r2, [pc, #24]	; (100086b4 <_Z10VgaInitReqPK6sVmode+0x24>)
1000869a:	6010      	str	r0, [r2, #0]
	while (VgaVmodeReq != NULL) { __dmb(); }
1000869c:	6813      	ldr	r3, [r2, #0]
1000869e:	2b00      	cmp	r3, #0
100086a0:	d004      	beq.n	100086ac <_Z10VgaInitReqPK6sVmode+0x1c>
100086a2:	f3bf 8f5f 	dmb	sy
100086a6:	6813      	ldr	r3, [r2, #0]
100086a8:	2b00      	cmp	r3, #0
100086aa:	d1fa      	bne.n	100086a2 <_Z10VgaInitReqPK6sVmode+0x12>
}
100086ac:	4770      	bx	lr
	if (vmode == NULL) vmode = (const sVmode*)1;
100086ae:	3001      	adds	r0, #1
100086b0:	e7f0      	b.n	10008694 <_Z10VgaInitReqPK6sVmode+0x4>
100086b2:	46c0      	nop			; (mov r8, r8)
100086b4:	2003d638 	.word	0x2003d638

100086b8 <_Z7LayerOnh>:
// number of pins of overlapped layer (base layer should stay VGA_GPIO_OUTNUM)
u8 LayerNumPin[LAYERS_MAX] = { VGA_GPIO_OUTNUM, VGA_GPIO_OUTNUM, VGA_GPIO_OUTNUM, VGA_GPIO_OUTNUM};

// set overlapped layer 1..3 ON
void LayerOn(u8 inx)
{
100086b8:	0003      	movs	r3, r0
100086ba:	f3bf 8f5f 	dmb	sy
	__dmb();
	LayerScreen[inx].on = True;
100086be:	00c0      	lsls	r0, r0, #3
100086c0:	18c3      	adds	r3, r0, r3
100086c2:	4804      	ldr	r0, [pc, #16]	; (100086d4 <_Z7LayerOnh+0x1c>)
100086c4:	009b      	lsls	r3, r3, #2
100086c6:	18c0      	adds	r0, r0, r3
100086c8:	2301      	movs	r3, #1
100086ca:	3022      	adds	r0, #34	; 0x22
100086cc:	7003      	strb	r3, [r0, #0]
100086ce:	f3bf 8f5f 	dmb	sy
	__dmb();
}
100086d2:	4770      	bx	lr
100086d4:	20019bfc 	.word	0x20019bfc

100086d8 <_Z8LayerOffh>:

// set overlapped layer 1..3 OFF
void LayerOff(u8 inx)
{
100086d8:	0003      	movs	r3, r0
100086da:	f3bf 8f5f 	dmb	sy
	__dmb();
	LayerScreen[inx].on = False;
100086de:	00c0      	lsls	r0, r0, #3
100086e0:	18c3      	adds	r3, r0, r3
100086e2:	4804      	ldr	r0, [pc, #16]	; (100086f4 <_Z8LayerOffh+0x1c>)
100086e4:	009b      	lsls	r3, r3, #2
100086e6:	18c0      	adds	r0, r0, r3
100086e8:	2300      	movs	r3, #0
100086ea:	3022      	adds	r0, #34	; 0x22
100086ec:	7003      	strb	r3, [r0, #0]
100086ee:	f3bf 8f5f 	dmb	sy
	__dmb();
}
100086f2:	4770      	bx	lr
100086f4:	20019bfc 	.word	0x20019bfc

100086f8 <_Z9LayerSetXhs>:

// set coordinate X of overlapped layer
void LayerSetX(u8 inx, s16 x)
{
100086f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	sLayer* lay = &LayerScreen[inx];
	s32 cppx = lay->cpp*x; // initial delay
100086fa:	00c4      	lsls	r4, r0, #3
100086fc:	4d23      	ldr	r5, [pc, #140]	; (1000878c <_Z9LayerSetXhs+0x94>)
100086fe:	1822      	adds	r2, r4, r0
10008700:	0092      	lsls	r2, r2, #2
10008702:	18aa      	adds	r2, r5, r2
10008704:	0013      	movs	r3, r2
10008706:	3323      	adds	r3, #35	; 0x23
10008708:	781b      	ldrb	r3, [r3, #0]
	if (cppx < 0) cppx = 0;
	u32 w = lay->w; // image width
1000870a:	8ad7      	ldrh	r7, [r2, #22]
	s32 cppx = lay->cpp*x; // initial delay
1000870c:	434b      	muls	r3, r1
	if (cppx < 0) cppx = 0;
1000870e:	43de      	mvns	r6, r3
	u32 init = 0; // init word

	// prepare init word
	switch (lay->mode)
10008710:	7f12      	ldrb	r2, [r2, #28]
10008712:	17f6      	asrs	r6, r6, #31
10008714:	4033      	ands	r3, r6
10008716:	2a12      	cmp	r2, #18
10008718:	d836      	bhi.n	10008788 <_Z9LayerSetXhs+0x90>
1000871a:	4e1d      	ldr	r6, [pc, #116]	; (10008790 <_Z9LayerSetXhs+0x98>)
1000871c:	0092      	lsls	r2, r2, #2
1000871e:	58b6      	ldr	r6, [r6, r2]
10008720:	46b7      	mov	pc, r6
	case LAYERMODE_PERSP2WHITE: // layer with white key color and double pixel image with transformation matrix
	case LAYERMODE_PERSPWHITE: // layer with white key color and image with transformation matrix
	case LAYERMODE_FASTSPRITEWHITE: // layer with fast sprites with white key color
	case LAYERMODE_SPRITEWHITE: // layer with sprites with white key color
	case LAYERMODE_WHITE: // layer with white key color
		init = VGAWHITE(cppx, w);
10008722:	3303      	adds	r3, #3
10008724:	041b      	lsls	r3, r3, #16
10008726:	3f01      	subs	r7, #1
10008728:	433b      	orrs	r3, r7

	case LAYERMODE_RLE: // layer with RLE compression
		init = VGARLE(cppx);
		break;
	}
	lay->init = init; // init word
1000872a:	1824      	adds	r4, r4, r0
1000872c:	00a4      	lsls	r4, r4, #2
1000872e:	192c      	adds	r4, r5, r4
10008730:	60a3      	str	r3, [r4, #8]
	lay->x = x; // start X coordinate
10008732:	8261      	strh	r1, [r4, #18]
}
10008734:	bdf0      	pop	{r4, r5, r6, r7, pc}
		init = VGAKEY(cppx, w, (lay->keycol & 0xff));
10008736:	26ff      	movs	r6, #255	; 0xff
10008738:	1822      	adds	r2, r4, r0
1000873a:	0092      	lsls	r2, r2, #2
1000873c:	18aa      	adds	r2, r5, r2
1000873e:	68d2      	ldr	r2, [r2, #12]
10008740:	02f6      	lsls	r6, r6, #11
10008742:	02d2      	lsls	r2, r2, #11
10008744:	4016      	ands	r6, r2
10008746:	3301      	adds	r3, #1
10008748:	1e7a      	subs	r2, r7, #1
1000874a:	4332      	orrs	r2, r6
1000874c:	04db      	lsls	r3, r3, #19
1000874e:	4313      	orrs	r3, r2
		break;
10008750:	e7eb      	b.n	1000872a <_Z9LayerSetXhs+0x32>
		init = VGAMONO(cppx, w, (lay->keycol & 0xff));
10008752:	26ff      	movs	r6, #255	; 0xff
10008754:	1822      	adds	r2, r4, r0
10008756:	0092      	lsls	r2, r2, #2
10008758:	18aa      	adds	r2, r5, r2
1000875a:	68d2      	ldr	r2, [r2, #12]
1000875c:	0336      	lsls	r6, r6, #12
1000875e:	0312      	lsls	r2, r2, #12
10008760:	4032      	ands	r2, r6
10008762:	051b      	lsls	r3, r3, #20
10008764:	3f01      	subs	r7, #1
10008766:	4313      	orrs	r3, r2
10008768:	007a      	lsls	r2, r7, #1
1000876a:	431a      	orrs	r2, r3
1000876c:	2301      	movs	r3, #1
1000876e:	4313      	orrs	r3, r2
		break;
10008770:	e7db      	b.n	1000872a <_Z9LayerSetXhs+0x32>
		init = VGACOLOR(cppx, w);
10008772:	3302      	adds	r3, #2
10008774:	3f01      	subs	r7, #1
10008776:	051b      	lsls	r3, r3, #20
10008778:	007a      	lsls	r2, r7, #1
1000877a:	431a      	orrs	r2, r3
1000877c:	23ff      	movs	r3, #255	; 0xff
1000877e:	031b      	lsls	r3, r3, #12
10008780:	4313      	orrs	r3, r2
		break;
10008782:	e7d2      	b.n	1000872a <_Z9LayerSetXhs+0x32>
		init = VGARLE(cppx);
10008784:	3301      	adds	r3, #1
		break;
10008786:	e7d0      	b.n	1000872a <_Z9LayerSetXhs+0x32>
	switch (lay->mode)
10008788:	2300      	movs	r3, #0
1000878a:	e7ce      	b.n	1000872a <_Z9LayerSetXhs+0x32>
1000878c:	20019bfc 	.word	0x20019bfc
10008790:	10040000 	.word	0x10040000

10008794 <_Z9LayerSetYhs>:

// set coordinate Y of overlapped layer
void LayerSetY(u8 inx, s16 y)
{
	sLayer* lay = &LayerScreen[inx];
	lay->y = y;
10008794:	00c3      	lsls	r3, r0, #3
10008796:	1818      	adds	r0, r3, r0
10008798:	4b02      	ldr	r3, [pc, #8]	; (100087a4 <_Z9LayerSetYhs+0x10>)
1000879a:	0080      	lsls	r0, r0, #2
1000879c:	1818      	adds	r0, r3, r0
1000879e:	8281      	strh	r1, [r0, #20]
}
100087a0:	4770      	bx	lr
100087a2:	46c0      	nop			; (mov r8, r8)
100087a4:	20019bfc 	.word	0x20019bfc

100087a8 <_Z9LayerSetWht>:

// set width of image of overlapped layer
//   Uses auto pitch wb (full line). Set custom wb after calling this function.
void LayerSetW(u8 inx, u16 w)
{
100087a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	sLayer* lay = &LayerScreen[inx];
	lay->w = w; // image width
100087aa:	00c4      	lsls	r4, r0, #3
100087ac:	4d2c      	ldr	r5, [pc, #176]	; (10008860 <_Z9LayerSetWht+0xb8>)
100087ae:	1826      	adds	r6, r4, r0
100087b0:	00b6      	lsls	r6, r6, #2
100087b2:	19ae      	adds	r6, r5, r6
	Bool mono = (lay->mode == LAYERMODE_MONO);
100087b4:	7f32      	ldrb	r2, [r6, #28]
	lay->w = w; // image width
100087b6:	82f1      	strh	r1, [r6, #22]
	lay->trans = mono ? (((w/8)+3)/4) : (w/4); // transfer count
100087b8:	2a04      	cmp	r2, #4
100087ba:	d01a      	beq.n	100087f2 <_Z9LayerSetWht+0x4a>
100087bc:	088b      	lsrs	r3, r1, #2
100087be:	8233      	strh	r3, [r6, #16]
	s32 cppx = lay->cpp*x; // initial delay
100087c0:	0033      	movs	r3, r6
	lay->wb = mono ? (w/8) : w; // width bytes
100087c2:	8371      	strh	r1, [r6, #26]
	s32 cppx = lay->cpp*x; // initial delay
100087c4:	3323      	adds	r3, #35	; 0x23
100087c6:	2712      	movs	r7, #18
100087c8:	5ff6      	ldrsh	r6, [r6, r7]
100087ca:	781b      	ldrb	r3, [r3, #0]
100087cc:	4373      	muls	r3, r6
	if (cppx < 0) cppx = 0;
100087ce:	43de      	mvns	r6, r3
100087d0:	17f6      	asrs	r6, r6, #31
100087d2:	4033      	ands	r3, r6
	switch (lay->mode)
100087d4:	2a12      	cmp	r2, #18
100087d6:	d840      	bhi.n	1000885a <_Z9LayerSetWht+0xb2>
100087d8:	4e22      	ldr	r6, [pc, #136]	; (10008864 <_Z9LayerSetWht+0xbc>)
100087da:	0092      	lsls	r2, r2, #2
100087dc:	58b2      	ldr	r2, [r6, r2]
100087de:	4697      	mov	pc, r2
		init = VGAWHITE(cppx, w);
100087e0:	3303      	adds	r3, #3
100087e2:	041b      	lsls	r3, r3, #16
100087e4:	3901      	subs	r1, #1
100087e6:	430b      	orrs	r3, r1
	lay->init = init; // init word
100087e8:	1820      	adds	r0, r4, r0
100087ea:	0080      	lsls	r0, r0, #2
100087ec:	1828      	adds	r0, r5, r0
100087ee:	6083      	str	r3, [r0, #8]
	LayerSetX(inx, lay->x); // update init word
}
100087f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	lay->trans = mono ? (((w/8)+3)/4) : (w/4); // transfer count
100087f2:	08ca      	lsrs	r2, r1, #3
100087f4:	1cd3      	adds	r3, r2, #3
100087f6:	109b      	asrs	r3, r3, #2
100087f8:	8233      	strh	r3, [r6, #16]
	s32 cppx = lay->cpp*x; // initial delay
100087fa:	0033      	movs	r3, r6
	lay->wb = mono ? (w/8) : w; // width bytes
100087fc:	8372      	strh	r2, [r6, #26]
	s32 cppx = lay->cpp*x; // initial delay
100087fe:	3323      	adds	r3, #35	; 0x23
10008800:	781b      	ldrb	r3, [r3, #0]
10008802:	2712      	movs	r7, #18
10008804:	5ff2      	ldrsh	r2, [r6, r7]
		init = VGAMONO(cppx, w, (lay->keycol & 0xff));
10008806:	3901      	subs	r1, #1
	s32 cppx = lay->cpp*x; // initial delay
10008808:	435a      	muls	r2, r3
		init = VGAMONO(cppx, w, (lay->keycol & 0xff));
1000880a:	43d3      	mvns	r3, r2
1000880c:	17db      	asrs	r3, r3, #31
1000880e:	401a      	ands	r2, r3
10008810:	0513      	lsls	r3, r2, #20
10008812:	0049      	lsls	r1, r1, #1
10008814:	430b      	orrs	r3, r1
10008816:	21ff      	movs	r1, #255	; 0xff
10008818:	68f2      	ldr	r2, [r6, #12]
1000881a:	0309      	lsls	r1, r1, #12
1000881c:	0312      	lsls	r2, r2, #12
1000881e:	400a      	ands	r2, r1
10008820:	2101      	movs	r1, #1
10008822:	4313      	orrs	r3, r2
10008824:	430b      	orrs	r3, r1
		break;
10008826:	e7df      	b.n	100087e8 <_Z9LayerSetWht+0x40>
		init = VGAKEY(cppx, w, (lay->keycol & 0xff));
10008828:	26ff      	movs	r6, #255	; 0xff
1000882a:	1822      	adds	r2, r4, r0
1000882c:	0092      	lsls	r2, r2, #2
1000882e:	18aa      	adds	r2, r5, r2
10008830:	68d2      	ldr	r2, [r2, #12]
10008832:	02f6      	lsls	r6, r6, #11
10008834:	02d2      	lsls	r2, r2, #11
10008836:	4032      	ands	r2, r6
10008838:	3901      	subs	r1, #1
1000883a:	3301      	adds	r3, #1
1000883c:	4311      	orrs	r1, r2
1000883e:	04db      	lsls	r3, r3, #19
10008840:	430b      	orrs	r3, r1
		break;
10008842:	e7d1      	b.n	100087e8 <_Z9LayerSetWht+0x40>
		init = VGARLE(cppx);
10008844:	3301      	adds	r3, #1
		break;
10008846:	e7cf      	b.n	100087e8 <_Z9LayerSetWht+0x40>
		init = VGACOLOR(cppx, w);
10008848:	3302      	adds	r3, #2
1000884a:	3901      	subs	r1, #1
1000884c:	051b      	lsls	r3, r3, #20
1000884e:	0049      	lsls	r1, r1, #1
10008850:	4319      	orrs	r1, r3
10008852:	23ff      	movs	r3, #255	; 0xff
10008854:	031b      	lsls	r3, r3, #12
10008856:	430b      	orrs	r3, r1
		break;
10008858:	e7c6      	b.n	100087e8 <_Z9LayerSetWht+0x40>
	switch (lay->mode)
1000885a:	2300      	movs	r3, #0
1000885c:	e7c4      	b.n	100087e8 <_Z9LayerSetWht+0x40>
1000885e:	46c0      	nop			; (mov r8, r8)
10008860:	20019bfc 	.word	0x20019bfc
10008864:	1004004c 	.word	0x1004004c

10008868 <_Z9LayerSetHht>:

// set height of image of overlapped layer
void LayerSetH(u8 inx, u16 h)
{
	sLayer* lay = &LayerScreen[inx];
	lay->h = h;
10008868:	00c3      	lsls	r3, r0, #3
1000886a:	1818      	adds	r0, r3, r0
1000886c:	4b02      	ldr	r3, [pc, #8]	; (10008878 <_Z9LayerSetHht+0x10>)
1000886e:	0080      	lsls	r0, r0, #2
10008870:	1818      	adds	r0, r3, r0
10008872:	8301      	strh	r1, [r0, #24]
}
10008874:	4770      	bx	lr
10008876:	46c0      	nop			; (mov r8, r8)
10008878:	20019bfc 	.word	0x20019bfc

1000887c <_Z15LayerPerspSetuphPKhPK6sVmodetthhaPKih>:
//  mat ... integer transformation matrix
//  col ... key color (needed for LAYERMODE_PERSPKEY layer mode)
// Use these functions after layer setup: LayerSetX, LayerSetY, LayerOn
void LayerPerspSetup(u8 inx, const u8* img, const sVmode* vmode, u16 w, u16 h, u8 xbits, u8 ybits,
	s8 horiz, const int* mat, u8 col /* = 0 */)
{
1000887c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000887e:	4657      	mov	r7, sl
10008880:	464e      	mov	r6, r9
10008882:	4645      	mov	r5, r8
10008884:	46de      	mov	lr, fp
10008886:	b5e0      	push	{r5, r6, r7, lr}
10008888:	b085      	sub	sp, #20
1000888a:	4688      	mov	r8, r1
1000888c:	a90e      	add	r1, sp, #56	; 0x38
1000888e:	9200      	str	r2, [sp, #0]
10008890:	880a      	ldrh	r2, [r1, #0]
10008892:	a90f      	add	r1, sp, #60	; 0x3c
10008894:	4692      	mov	sl, r2
10008896:	780a      	ldrb	r2, [r1, #0]
10008898:	a910      	add	r1, sp, #64	; 0x40
1000889a:	4691      	mov	r9, r2
1000889c:	780a      	ldrb	r2, [r1, #0]
1000889e:	a911      	add	r1, sp, #68	; 0x44
100088a0:	9201      	str	r2, [sp, #4]
100088a2:	2200      	movs	r2, #0
100088a4:	568a      	ldrsb	r2, [r1, r2]
100088a6:	a913      	add	r1, sp, #76	; 0x4c
100088a8:	7809      	ldrb	r1, [r1, #0]
100088aa:	9202      	str	r2, [sp, #8]
100088ac:	f3bf 8f5f 	dmb	sy
	LayerScreen[inx].on = False;
100088b0:	00c4      	lsls	r4, r0, #3
100088b2:	4d39      	ldr	r5, [pc, #228]	; (10008998 <_Z15LayerPerspSetuphPKhPK6sVmodetthhaPKih+0x11c>)
100088b4:	9403      	str	r4, [sp, #12]
100088b6:	1824      	adds	r4, r4, r0
100088b8:	00a2      	lsls	r2, r4, #2
100088ba:	18ac      	adds	r4, r5, r2
100088bc:	4694      	mov	ip, r2
100088be:	2222      	movs	r2, #34	; 0x22
100088c0:	4693      	mov	fp, r2
100088c2:	44a3      	add	fp, r4
100088c4:	2700      	movs	r7, #0
100088c6:	465a      	mov	r2, fp
100088c8:	7017      	strb	r7, [r2, #0]
100088ca:	f3bf 8f5f 	dmb	sy
	lay->img = img; // pointer to image data
100088ce:	4662      	mov	r2, ip
100088d0:	4646      	mov	r6, r8
100088d2:	50ae      	str	r6, [r5, r2]
	lay->par = par; // additional parameter
100088d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
	lay->x = 0; // X coordinate
100088d6:	8267      	strh	r7, [r4, #18]
	lay->par = par; // additional parameter
100088d8:	6062      	str	r2, [r4, #4]
	lay->keycol = col | ((u16)col << 8) | ((u32)col << 16) | ((u32)col << 24); // key color
100088da:	040a      	lsls	r2, r1, #16
100088dc:	4694      	mov	ip, r2
100088de:	060a      	lsls	r2, r1, #24
100088e0:	4690      	mov	r8, r2
100088e2:	4662      	mov	r2, ip
100088e4:	4646      	mov	r6, r8
100088e6:	4332      	orrs	r2, r6
100088e8:	4690      	mov	r8, r2
100088ea:	020a      	lsls	r2, r1, #8
100088ec:	4311      	orrs	r1, r2
100088ee:	4642      	mov	r2, r8
100088f0:	4311      	orrs	r1, r2
	lay->h = h; // height of image
100088f2:	4652      	mov	r2, sl
	lay->y = 0; // Y coordinate
100088f4:	82a7      	strh	r7, [r4, #20]
	lay->spritenum = 0; // number of sprites
100088f6:	8427      	strh	r7, [r4, #32]
	lay->cpp = vmode->cpp; // save clocks per pixel
100088f8:	0027      	movs	r7, r4
100088fa:	9e00      	ldr	r6, [sp, #0]
	lay->keycol = col | ((u16)col << 8) | ((u32)col << 16) | ((u32)col << 24); // key color
100088fc:	60e1      	str	r1, [r4, #12]
	lay->h = h; // height of image
100088fe:	8322      	strh	r2, [r4, #24]
	lay->cpp = vmode->cpp; // save clocks per pixel
10008900:	8af2      	ldrh	r2, [r6, #22]
10008902:	3723      	adds	r7, #35	; 0x23
10008904:	703a      	strb	r2, [r7, #0]
	lay->mode = vmode->mode[inx]; // layer mode
10008906:	1832      	adds	r2, r6, r0
10008908:	7e52      	ldrb	r2, [r2, #25]
	lay->w = w; // image width
1000890a:	82e3      	strh	r3, [r4, #22]
	lay->mode = vmode->mode[inx]; // layer mode
1000890c:	7722      	strb	r2, [r4, #28]
	lay->trans = mono ? (((w/8)+3)/4) : (w/4); // transfer count
1000890e:	2a04      	cmp	r2, #4
10008910:	d01f      	beq.n	10008952 <_Z15LayerPerspSetuphPKhPK6sVmodetthhaPKih+0xd6>
10008912:	089f      	lsrs	r7, r3, #2
10008914:	8227      	strh	r7, [r4, #16]
	lay->wb = mono ? (w/8) : w; // width bytes
10008916:	8363      	strh	r3, [r4, #26]
	switch (lay->mode)
10008918:	2a12      	cmp	r2, #18
1000891a:	d83a      	bhi.n	10008992 <_Z15LayerPerspSetuphPKhPK6sVmodetthhaPKih+0x116>
1000891c:	4c1f      	ldr	r4, [pc, #124]	; (1000899c <_Z15LayerPerspSetuphPKhPK6sVmodetthhaPKih+0x120>)
1000891e:	0092      	lsls	r2, r2, #2
10008920:	58a2      	ldr	r2, [r4, r2]
10008922:	4697      	mov	pc, r2
		init = VGAWHITE(cppx, w);
10008924:	1e59      	subs	r1, r3, #1
10008926:	23c0      	movs	r3, #192	; 0xc0
10008928:	029b      	lsls	r3, r3, #10
1000892a:	430b      	orrs	r3, r1
	lay->init = init; // init word
1000892c:	9a03      	ldr	r2, [sp, #12]
1000892e:	4694      	mov	ip, r2
10008930:	4460      	add	r0, ip
10008932:	0080      	lsls	r0, r0, #2
10008934:	182d      	adds	r5, r5, r0
10008936:	60ab      	str	r3, [r5, #8]
	LayerSetup(inx, img, vmode, w, h, col, mat);
	sLayer* lay = &LayerScreen[inx]; // get pointer to layer
	lay->xbits = xbits;
10008938:	464b      	mov	r3, r9
1000893a:	77ab      	strb	r3, [r5, #30]
	lay->ybits = ybits;
1000893c:	9b01      	ldr	r3, [sp, #4]
1000893e:	77eb      	strb	r3, [r5, #31]
	lay->horiz = horiz;
10008940:	9b02      	ldr	r3, [sp, #8]
10008942:	776b      	strb	r3, [r5, #29]
}
10008944:	b005      	add	sp, #20
10008946:	bcf0      	pop	{r4, r5, r6, r7}
10008948:	46bb      	mov	fp, r7
1000894a:	46b2      	mov	sl, r6
1000894c:	46a9      	mov	r9, r5
1000894e:	46a0      	mov	r8, r4
10008950:	bdf0      	pop	{r4, r5, r6, r7, pc}
	lay->trans = mono ? (((w/8)+3)/4) : (w/4); // transfer count
10008952:	08df      	lsrs	r7, r3, #3
10008954:	1cfa      	adds	r2, r7, #3
10008956:	1092      	asrs	r2, r2, #2
10008958:	8222      	strh	r2, [r4, #16]
		init = VGAMONO(cppx, w, (lay->keycol & 0xff));
1000895a:	22ff      	movs	r2, #255	; 0xff
1000895c:	0309      	lsls	r1, r1, #12
1000895e:	0312      	lsls	r2, r2, #12
10008960:	3b01      	subs	r3, #1
10008962:	4011      	ands	r1, r2
10008964:	005b      	lsls	r3, r3, #1
10008966:	430b      	orrs	r3, r1
10008968:	2101      	movs	r1, #1
	lay->wb = mono ? (w/8) : w; // width bytes
1000896a:	8367      	strh	r7, [r4, #26]
		init = VGAMONO(cppx, w, (lay->keycol & 0xff));
1000896c:	430b      	orrs	r3, r1
		break;
1000896e:	e7dd      	b.n	1000892c <_Z15LayerPerspSetuphPKhPK6sVmodetthhaPKih+0xb0>
		init = VGAKEY(cppx, w, (lay->keycol & 0xff));
10008970:	22ff      	movs	r2, #255	; 0xff
10008972:	02c9      	lsls	r1, r1, #11
10008974:	02d2      	lsls	r2, r2, #11
10008976:	3b01      	subs	r3, #1
10008978:	4011      	ands	r1, r2
1000897a:	4319      	orrs	r1, r3
1000897c:	2380      	movs	r3, #128	; 0x80
1000897e:	031b      	lsls	r3, r3, #12
10008980:	430b      	orrs	r3, r1
		break;
10008982:	e7d3      	b.n	1000892c <_Z15LayerPerspSetuphPKhPK6sVmodetthhaPKih+0xb0>
		init = VGACOLOR(cppx, w);
10008984:	4906      	ldr	r1, [pc, #24]	; (100089a0 <_Z15LayerPerspSetuphPKhPK6sVmodetthhaPKih+0x124>)
10008986:	3b01      	subs	r3, #1
10008988:	005b      	lsls	r3, r3, #1
1000898a:	430b      	orrs	r3, r1
		break;
1000898c:	e7ce      	b.n	1000892c <_Z15LayerPerspSetuphPKhPK6sVmodetthhaPKih+0xb0>
	switch (lay->mode)
1000898e:	2301      	movs	r3, #1
10008990:	e7cc      	b.n	1000892c <_Z15LayerPerspSetuphPKhPK6sVmodetthhaPKih+0xb0>
	u32 init = 0; // init word
10008992:	2300      	movs	r3, #0
10008994:	e7ca      	b.n	1000892c <_Z15LayerPerspSetuphPKhPK6sVmodetthhaPKih+0xb0>
10008996:	46c0      	nop			; (mov r8, r8)
10008998:	20019bfc 	.word	0x20019bfc
1000899c:	10040098 	.word	0x10040098
100089a0:	002ff000 	.word	0x002ff000

100089a4 <_Z11ScreenClearP7sScreen>:
100089a4:	f3bf 8f5f 	dmb	sy

// clear screen (set 0 strips, does not modify sprites)
void ScreenClear(sScreen* s)
{
	__dmb();
	s->num = 0;
100089a8:	2300      	movs	r3, #0
100089aa:	8003      	strh	r3, [r0, #0]
100089ac:	f3bf 8f5f 	dmb	sy
	__dmb();
}
100089b0:	4770      	bx	lr
100089b2:	46c0      	nop			; (mov r8, r8)

100089b4 <_Z14ScreenAddStripP7sScreeni>:

// add empty strip to the screen (returns pointer to the strip)
sStrip* ScreenAddStrip(sScreen* s, int height)
{
	int n = s->num;
100089b4:	23e4      	movs	r3, #228	; 0xe4
100089b6:	8802      	ldrh	r2, [r0, #0]
{
100089b8:	b510      	push	{r4, lr}
100089ba:	4353      	muls	r3, r2
	sStrip* t = &s->strip[n];
	t->height = height;
100089bc:	18c4      	adds	r4, r0, r3
100089be:	80a1      	strh	r1, [r4, #4]
	t->num = 0;
100089c0:	2100      	movs	r1, #0
100089c2:	80e1      	strh	r1, [r4, #6]
100089c4:	f3bf 8f5f 	dmb	sy
	__dmb();
	s->num = n + 1;
100089c8:	3201      	adds	r2, #1
100089ca:	8002      	strh	r2, [r0, #0]
100089cc:	f3bf 8f5f 	dmb	sy
	sStrip* t = &s->strip[n];
100089d0:	3304      	adds	r3, #4
100089d2:	18c0      	adds	r0, r0, r3
	__dmb();
	return t;
}
100089d4:	bd10      	pop	{r4, pc}
100089d6:	46c0      	nop			; (mov r8, r8)

100089d8 <_Z13ScreenAddSegmP6sStripi>:

// add empty segment to video strip (returns pointer to the segment and initialises is to defaults)
sSegm* ScreenAddSegm(sStrip* strip, int width)
{
100089d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	int n = strip->num;
	sSegm* g = &strip->seg[n];
	g->width = width;
100089da:	2500      	movs	r5, #0
	int n = strip->num;
100089dc:	8844      	ldrh	r4, [r0, #2]
	g->width = width;
100089de:	040f      	lsls	r7, r1, #16
100089e0:	00e3      	lsls	r3, r4, #3
100089e2:	1b1b      	subs	r3, r3, r4
100089e4:	009b      	lsls	r3, r3, #2
100089e6:	0c3e      	lsrs	r6, r7, #16
100089e8:	18c2      	adds	r2, r0, r3
100089ea:	433e      	orrs	r6, r7
100089ec:	6056      	str	r6, [r2, #4]
	g->wb = width;
	g->offx = 0;
100089ee:	6095      	str	r5, [r2, #8]
	g->offy = 0;
	g->wrapx = width;
100089f0:	8191      	strh	r1, [r2, #12]
	g->wrapy = strip->height;
100089f2:	8801      	ldrh	r1, [r0, #0]
	g->data = NULL;
100089f4:	6115      	str	r5, [r2, #16]
	g->wrapy = strip->height;
100089f6:	81d1      	strh	r1, [r2, #14]
	g->form = GF_COLOR;
100089f8:	8295      	strh	r5, [r2, #20]
	g->dbly = false;
	g->par = 0;
100089fa:	6195      	str	r5, [r2, #24]
	g->par2 = 0;
100089fc:	61d5      	str	r5, [r2, #28]
100089fe:	f3bf 8f5f 	dmb	sy
	__dmb();
	strip->num = n + 1;
10008a02:	3401      	adds	r4, #1
10008a04:	8044      	strh	r4, [r0, #2]
10008a06:	f3bf 8f5f 	dmb	sy
	sSegm* g = &strip->seg[n];
10008a0a:	3304      	adds	r3, #4
10008a0c:	18c0      	adds	r0, r0, r3
	__dmb();
	return g;
}
10008a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10008a10 <_Z16ScreenSegmGraph8P5sSegmPKvi>:
//   data = pointer to data buffer
//   wb = pitch - number of bytes between lines
// To scroll image, set virtual dimension wrapx and wrapy, then shift offx and offy.
void ScreenSegmGraph8(sSegm* segm, const void* data, int wb)
{
	segm->form = GF_COLOR;
10008a10:	2300      	movs	r3, #0
10008a12:	7403      	strb	r3, [r0, #16]
10008a14:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->data = data;
10008a18:	60c1      	str	r1, [r0, #12]
	segm->wb = wb;
10008a1a:	8042      	strh	r2, [r0, #2]
10008a1c:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_GRAPH8;
10008a20:	3301      	adds	r3, #1
10008a22:	7403      	strb	r3, [r0, #16]
10008a24:	f3bf 8f5f 	dmb	sy
	__dmb();
}
10008a28:	4770      	bx	lr
10008a2a:	46c0      	nop			; (mov r8, r8)

10008a2c <_Z15ScreenSegmGTextP5sSegmPKvS2_hhS2_i>:
//   fontheight = font height
//   bg = background color
//   grad = pointer to array of gradient colors
//   wb = pitch - number of bytes between text lines
void ScreenSegmGText(sSegm* segm, const void* data, const void* font, u8 fontheight, u8 bg, const void* grad, int wb)
{
10008a2c:	b530      	push	{r4, r5, lr}
	segm->form = GF_COLOR;
10008a2e:	2500      	movs	r5, #0
{
10008a30:	ac03      	add	r4, sp, #12
10008a32:	7824      	ldrb	r4, [r4, #0]
	segm->form = GF_COLOR;
10008a34:	7405      	strb	r5, [r0, #16]
10008a36:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->data = data;
	segm->par = (u32)font;
	segm->par3 = bg | (fontheight << 8);
10008a3a:	021b      	lsls	r3, r3, #8
10008a3c:	4323      	orrs	r3, r4
10008a3e:	8243      	strh	r3, [r0, #18]
	segm->par2 = (u32)grad;
10008a40:	9b04      	ldr	r3, [sp, #16]
	segm->data = data;
10008a42:	60c1      	str	r1, [r0, #12]
	segm->par2 = (u32)grad;
10008a44:	6183      	str	r3, [r0, #24]
	segm->wb = wb;
10008a46:	9b05      	ldr	r3, [sp, #20]
	segm->par = (u32)font;
10008a48:	6142      	str	r2, [r0, #20]
	segm->wb = wb;
10008a4a:	8043      	strh	r3, [r0, #2]
10008a4c:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_GTEXT;
10008a50:	230e      	movs	r3, #14
10008a52:	7403      	strb	r3, [r0, #16]
10008a54:	f3bf 8f5f 	dmb	sy
	__dmb();
}
10008a58:	bd30      	pop	{r4, r5, pc}
10008a5a:	46c0      	nop			; (mov r8, r8)

10008a5c <_Z20ScreenSegmTilePersp4P5sSegmPKhS2_PKihhha>:
//   tilebits = number of bits of tile width and height
//   horizon = horizon offset/4 (0=do not use perspective projection, <0=vertical flip to display ceiling)
// Use default settings of parameters: offx = 0, offy = 0, wrapx = segment width, wrapy = segment height
void ScreenSegmTilePersp4(sSegm* segm, const u8* map, const u8* tiles, const int* mat, 
	u8 mapwbits, u8 maphbits, u8 tilebits, s8 horizon)
{
10008a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	segm->form = GF_COLOR;
10008a5e:	2600      	movs	r6, #0
{
10008a60:	ac05      	add	r4, sp, #20
10008a62:	7824      	ldrb	r4, [r4, #0]
	segm->form = GF_COLOR;
10008a64:	7406      	strb	r6, [r0, #16]
{
10008a66:	46a4      	mov	ip, r4
10008a68:	ac06      	add	r4, sp, #24
10008a6a:	7825      	ldrb	r5, [r4, #0]
10008a6c:	ac07      	add	r4, sp, #28
10008a6e:	7827      	ldrb	r7, [r4, #0]
10008a70:	ac08      	add	r4, sp, #32
10008a72:	7824      	ldrb	r4, [r4, #0]
10008a74:	b264      	sxtb	r4, r4
10008a76:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->data = map;
10008a7a:	60c1      	str	r1, [r0, #12]
	segm->wb = mapwbits | ((u16)maphbits<<8);
10008a7c:	0229      	lsls	r1, r5, #8
10008a7e:	4665      	mov	r5, ip
	segm->offx = 0;
	segm->offy = 0;
	segm->wrapx = segm->width;
	segm->par = (u32)tiles;
	segm->par2 = (u32)mat;
10008a80:	6183      	str	r3, [r0, #24]
	segm->wb = mapwbits | ((u16)maphbits<<8);
10008a82:	4329      	orrs	r1, r5
	segm->par3 = tilebits | ((u16)horizon<<8);
10008a84:	b2a3      	uxth	r3, r4
	segm->wb = mapwbits | ((u16)maphbits<<8);
10008a86:	8041      	strh	r1, [r0, #2]
	segm->par3 = tilebits | ((u16)horizon<<8);
10008a88:	021b      	lsls	r3, r3, #8
	segm->wrapx = segm->width;
10008a8a:	8801      	ldrh	r1, [r0, #0]
	segm->par3 = tilebits | ((u16)horizon<<8);
10008a8c:	433b      	orrs	r3, r7
	segm->offx = 0;
10008a8e:	6046      	str	r6, [r0, #4]
	segm->wrapx = segm->width;
10008a90:	8101      	strh	r1, [r0, #8]
	segm->par = (u32)tiles;
10008a92:	6142      	str	r2, [r0, #20]
	segm->par3 = tilebits | ((u16)horizon<<8);
10008a94:	8243      	strh	r3, [r0, #18]
10008a96:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_TILEPERSP4;
10008a9a:	231c      	movs	r3, #28
10008a9c:	7403      	strb	r3, [r0, #16]
10008a9e:	f3bf 8f5f 	dmb	sy
	__dmb();
}
10008aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}

10008aa4 <_Z6DecNumPcl>:
	return n;
}

// decode signed number into ASCIIZ text buffer (returns number of digits)
int DecNum(char* buf, s32 num)
{
10008aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
10008aa6:	46ce      	mov	lr, r9
10008aa8:	4647      	mov	r7, r8
10008aaa:	b580      	push	{r7, lr}
10008aac:	4681      	mov	r9, r0
10008aae:	000c      	movs	r4, r1
10008ab0:	b085      	sub	sp, #20
	if (num >= 0) return DecUNum(buf, num);
10008ab2:	2900      	cmp	r1, #0
10008ab4:	db21      	blt.n	10008afa <_Z6DecNumPcl+0x56>
	*d = 0;
10008ab6:	2200      	movs	r2, #0
	char* d = &b[10];
10008ab8:	260e      	movs	r6, #14
	int n = 0;
10008aba:	2500      	movs	r5, #0
	*d = 0;
10008abc:	ab01      	add	r3, sp, #4
10008abe:	729a      	strb	r2, [r3, #10]
	char* d = &b[10];
10008ac0:	446e      	add	r6, sp
		k = num / 10;
10008ac2:	210a      	movs	r1, #10
10008ac4:	0020      	movs	r0, r4
10008ac6:	f7f7 fc55 	bl	10000374 <__wrap___aeabi_uidiv>
10008aca:	0027      	movs	r7, r4
		*d = (char)(num + '0');
10008acc:	210a      	movs	r1, #10
		k = num / 10;
10008ace:	0004      	movs	r4, r0
		*d = (char)(num + '0');
10008ad0:	0038      	movs	r0, r7
10008ad2:	f7f7 fc4f 	bl	10000374 <__wrap___aeabi_uidiv>
		d--;
10008ad6:	3e01      	subs	r6, #1
		*d = (char)(num + '0');
10008ad8:	3130      	adds	r1, #48	; 0x30
10008ada:	002a      	movs	r2, r5
10008adc:	7031      	strb	r1, [r6, #0]
		n++;
10008ade:	3501      	adds	r5, #1
	} while (num != 0);
10008ae0:	2f09      	cmp	r7, #9
10008ae2:	d8ee      	bhi.n	10008ac2 <_Z6DecNumPcl+0x1e>
	memcpy(buf, d, n+1);
10008ae4:	0031      	movs	r1, r6
10008ae6:	4648      	mov	r0, r9
10008ae8:	3202      	adds	r2, #2
10008aea:	f7f8 fb69 	bl	100011c0 <__wrap___aeabi_memcpy>

	num = -num;
	*buf++ = '-';
	return DecUNum(buf, num)+1;
}
10008aee:	0028      	movs	r0, r5
10008af0:	b005      	add	sp, #20
10008af2:	bcc0      	pop	{r6, r7}
10008af4:	46b9      	mov	r9, r7
10008af6:	46b0      	mov	r8, r6
10008af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf++ = '-';
10008afa:	2301      	movs	r3, #1
10008afc:	444b      	add	r3, r9
10008afe:	4698      	mov	r8, r3
10008b00:	232d      	movs	r3, #45	; 0x2d
	*d = 0;
10008b02:	2200      	movs	r2, #0
	*buf++ = '-';
10008b04:	7003      	strb	r3, [r0, #0]
	*d = 0;
10008b06:	ab01      	add	r3, sp, #4
10008b08:	729a      	strb	r2, [r3, #10]
	char* d = &b[10];
10008b0a:	230e      	movs	r3, #14
10008b0c:	446b      	add	r3, sp
10008b0e:	4699      	mov	r9, r3
10008b10:	001e      	movs	r6, r3
	num = -num;
10008b12:	424c      	negs	r4, r1
	int n = 0;
10008b14:	464b      	mov	r3, r9
		k = num / 10;
10008b16:	210a      	movs	r1, #10
10008b18:	0020      	movs	r0, r4
10008b1a:	1b9d      	subs	r5, r3, r6
10008b1c:	0027      	movs	r7, r4
10008b1e:	f7f7 fc29 	bl	10000374 <__wrap___aeabi_uidiv>
		*d = (char)(num + '0');
10008b22:	210a      	movs	r1, #10
		k = num / 10;
10008b24:	0004      	movs	r4, r0
		*d = (char)(num + '0');
10008b26:	0038      	movs	r0, r7
10008b28:	f7f7 fc24 	bl	10000374 <__wrap___aeabi_uidiv>
		d--;
10008b2c:	3e01      	subs	r6, #1
		*d = (char)(num + '0');
10008b2e:	3130      	adds	r1, #48	; 0x30
10008b30:	7031      	strb	r1, [r6, #0]
	} while (num != 0);
10008b32:	2f09      	cmp	r7, #9
10008b34:	d8ee      	bhi.n	10008b14 <_Z6DecNumPcl+0x70>
	memcpy(buf, d, n+1);
10008b36:	3502      	adds	r5, #2
10008b38:	002a      	movs	r2, r5
10008b3a:	0031      	movs	r1, r6
10008b3c:	4640      	mov	r0, r8
10008b3e:	f7f8 fb3f 	bl	100011c0 <__wrap___aeabi_memcpy>
	return DecUNum(buf, num)+1;
10008b42:	e7d4      	b.n	10008aee <_Z6DecNumPcl+0x4a>

10008b44 <_Z12CopyWhiteImgPhPKhi>:

// prepare image with white key transparency (copy and increment pixels)
void CopyWhiteImg(u8* dst, const u8* src, int num)
{
10008b44:	b5f0      	push	{r4, r5, r6, r7, lr}
10008b46:	46d6      	mov	lr, sl
10008b48:	464f      	mov	r7, r9
10008b4a:	4646      	mov	r6, r8
10008b4c:	b5c0      	push	{r6, r7, lr}
	for (; num > 0; num--) *dst++ = *src++ + 1;
10008b4e:	2a00      	cmp	r2, #0
10008b50:	dd3e      	ble.n	10008bd0 <_Z12CopyWhiteImgPhPKhi+0x8c>
10008b52:	2302      	movs	r3, #2
10008b54:	2506      	movs	r5, #6
10008b56:	1c4c      	adds	r4, r1, #1
10008b58:	1b04      	subs	r4, r0, r4
10008b5a:	42a3      	cmp	r3, r4
10008b5c:	419b      	sbcs	r3, r3
10008b5e:	1e54      	subs	r4, r2, #1
10008b60:	42a5      	cmp	r5, r4
10008b62:	41a4      	sbcs	r4, r4
10008b64:	425b      	negs	r3, r3
10008b66:	4264      	negs	r4, r4
10008b68:	421c      	tst	r4, r3
10008b6a:	d036      	beq.n	10008bda <_Z12CopyWhiteImgPhPKhi+0x96>
10008b6c:	0003      	movs	r3, r0
10008b6e:	430b      	orrs	r3, r1
10008b70:	079b      	lsls	r3, r3, #30
10008b72:	d132      	bne.n	10008bda <_Z12CopyWhiteImgPhPKhi+0x96>
10008b74:	4b1d      	ldr	r3, [pc, #116]	; (10008bec <_Z12CopyWhiteImgPhPKhi+0xa8>)
10008b76:	2500      	movs	r5, #0
10008b78:	4698      	mov	r8, r3
10008b7a:	4b1d      	ldr	r3, [pc, #116]	; (10008bf0 <_Z12CopyWhiteImgPhPKhi+0xac>)
10008b7c:	0896      	lsrs	r6, r2, #2
10008b7e:	469c      	mov	ip, r3
10008b80:	4b1c      	ldr	r3, [pc, #112]	; (10008bf4 <_Z12CopyWhiteImgPhPKhi+0xb0>)
10008b82:	00b6      	lsls	r6, r6, #2
10008b84:	469a      	mov	sl, r3
10008b86:	4644      	mov	r4, r8
10008b88:	4667      	mov	r7, ip
10008b8a:	594b      	ldr	r3, [r1, r5]
10008b8c:	405c      	eors	r4, r3
10008b8e:	403c      	ands	r4, r7
10008b90:	4657      	mov	r7, sl
10008b92:	403b      	ands	r3, r7
10008b94:	4f15      	ldr	r7, [pc, #84]	; (10008bec <_Z12CopyWhiteImgPhPKhi+0xa8>)
10008b96:	46b9      	mov	r9, r7
10008b98:	444b      	add	r3, r9
10008b9a:	4063      	eors	r3, r4
10008b9c:	5143      	str	r3, [r0, r5]
10008b9e:	3504      	adds	r5, #4
10008ba0:	42b5      	cmp	r5, r6
10008ba2:	d1f0      	bne.n	10008b86 <_Z12CopyWhiteImgPhPKhi+0x42>
10008ba4:	2303      	movs	r3, #3
10008ba6:	0014      	movs	r4, r2
10008ba8:	439c      	bics	r4, r3
10008baa:	0023      	movs	r3, r4
10008bac:	1900      	adds	r0, r0, r4
10008bae:	1909      	adds	r1, r1, r4
10008bb0:	1b14      	subs	r4, r2, r4
10008bb2:	429a      	cmp	r2, r3
10008bb4:	d00c      	beq.n	10008bd0 <_Z12CopyWhiteImgPhPKhi+0x8c>
10008bb6:	780b      	ldrb	r3, [r1, #0]
10008bb8:	3301      	adds	r3, #1
10008bba:	7003      	strb	r3, [r0, #0]
10008bbc:	2c01      	cmp	r4, #1
10008bbe:	d007      	beq.n	10008bd0 <_Z12CopyWhiteImgPhPKhi+0x8c>
10008bc0:	784b      	ldrb	r3, [r1, #1]
10008bc2:	3301      	adds	r3, #1
10008bc4:	7043      	strb	r3, [r0, #1]
10008bc6:	2c02      	cmp	r4, #2
10008bc8:	d002      	beq.n	10008bd0 <_Z12CopyWhiteImgPhPKhi+0x8c>
10008bca:	788b      	ldrb	r3, [r1, #2]
10008bcc:	3301      	adds	r3, #1
10008bce:	7083      	strb	r3, [r0, #2]
}
10008bd0:	bce0      	pop	{r5, r6, r7}
10008bd2:	46ba      	mov	sl, r7
10008bd4:	46b1      	mov	r9, r6
10008bd6:	46a8      	mov	r8, r5
10008bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (; num > 0; num--) *dst++ = *src++ + 1;
10008bda:	2300      	movs	r3, #0
10008bdc:	5ccc      	ldrb	r4, [r1, r3]
10008bde:	3401      	adds	r4, #1
10008be0:	54c4      	strb	r4, [r0, r3]
10008be2:	3301      	adds	r3, #1
10008be4:	4293      	cmp	r3, r2
10008be6:	d1f9      	bne.n	10008bdc <_Z12CopyWhiteImgPhPKhi+0x98>
10008be8:	e7f2      	b.n	10008bd0 <_Z12CopyWhiteImgPhPKhi+0x8c>
10008bea:	46c0      	nop			; (mov r8, r8)
10008bec:	01010101 	.word	0x01010101
10008bf0:	80808080 	.word	0x80808080
10008bf4:	7f7f7f7f 	.word	0x7f7f7f7f

10008bf8 <_Z9VgaCfgDefP7sVgaCfg>:
};

// initialize default VGA configuration
void VgaCfgDef(sVgaCfg* cfg)
{
	cfg->width = 640;		// width in pixels
10008bf8:	4b06      	ldr	r3, [pc, #24]	; (10008c14 <_Z9VgaCfgDefP7sVgaCfg+0x1c>)
	cfg->height = 480;		// height in lines
	cfg->wfull = 0;			// width of full screen, corresponding to 'hfull' time (0=use 'width' parameter)
	cfg->video = &VideoVGA;		// used video timings
10008bfa:	4a07      	ldr	r2, [pc, #28]	; (10008c18 <_Z9VgaCfgDefP7sVgaCfg+0x20>)
	cfg->width = 640;		// width in pixels
10008bfc:	6003      	str	r3, [r0, #0]
	cfg->wfull = 0;			// width of full screen, corresponding to 'hfull' time (0=use 'width' parameter)
10008bfe:	2300      	movs	r3, #0
	cfg->video = &VideoVGA;		// used video timings
10008c00:	6082      	str	r2, [r0, #8]
	cfg->freq = 120000;		// required minimal system frequency in kHz (real frequency can be higher)
10008c02:	4a06      	ldr	r2, [pc, #24]	; (10008c1c <_Z9VgaCfgDefP7sVgaCfg+0x24>)
	cfg->wfull = 0;			// width of full screen, corresponding to 'hfull' time (0=use 'width' parameter)
10008c04:	8083      	strh	r3, [r0, #4]
	cfg->freq = 120000;		// required minimal system frequency in kHz (real frequency can be higher)
10008c06:	60c2      	str	r2, [r0, #12]
10008c08:	4a05      	ldr	r2, [pc, #20]	; (10008c20 <_Z9VgaCfgDefP7sVgaCfg+0x28>)
	cfg->fmax = 270000;		// maximal system frequency in kHz (limit resolution if needed)
	cfg->mode[0] = LAYERMODE_BASE;	// modes of overlapped layers 0..3 LAYERMODE_* (LAYERMODE_BASE = layer is off)
10008c0a:	6143      	str	r3, [r0, #20]
	cfg->freq = 120000;		// required minimal system frequency in kHz (real frequency can be higher)
10008c0c:	6102      	str	r2, [r0, #16]
	cfg->mode[1] = LAYERMODE_BASE;	// - mode of layer 0 is ignored (always use LAYERMODE_BASE)
	cfg->mode[2] = LAYERMODE_BASE;	// - all overlapped layers must use same layer program
	cfg->mode[3] = LAYERMODE_BASE;
	cfg->dbly = False;		// double in Y direction
10008c0e:	8303      	strh	r3, [r0, #24]
	cfg->lockfreq = False;		// lock required frequency, do not change it
}
10008c10:	4770      	bx	lr
10008c12:	46c0      	nop			; (mov r8, r8)
10008c14:	01e00280 	.word	0x01e00280
10008c18:	1004036c 	.word	0x1004036c
10008c1c:	0001d4c0 	.word	0x0001d4c0
10008c20:	00041eb0 	.word	0x00041eb0

10008c24 <_Z6VgaCfgPK7sVgaCfgP6sVmode>:

// calculate videomode setup
//   cfg ... required configuration
//   vmode ... destination videomode setup for driver
void VgaCfg(const sVgaCfg* cfg, sVmode* vmode)
{
10008c24:	b5f0      	push	{r4, r5, r6, r7, lr}
10008c26:	46de      	mov	lr, fp
10008c28:	4657      	mov	r7, sl
10008c2a:	464e      	mov	r6, r9
10008c2c:	4645      	mov	r5, r8
	int i;

	// prepare layer program, copy layer modes
	u8 prog = LAYERMODE_BASE;
	vmode->mode[0] = prog;
10008c2e:	2300      	movs	r3, #0
{
10008c30:	b5e0      	push	{r5, r6, r7, lr}
	vmode->mode[0] = prog;
10008c32:	764b      	strb	r3, [r1, #25]
	for (i = 1; i < LAYERS; i++)
	{
		if (cfg->mode[i] != LAYERMODE_BASE) prog = LayerMode[cfg->mode[i]].prog;
10008c34:	7d42      	ldrb	r2, [r0, #21]
{
10008c36:	4682      	mov	sl, r0
10008c38:	468b      	mov	fp, r1
10008c3a:	b091      	sub	sp, #68	; 0x44
		if (cfg->mode[i] != LAYERMODE_BASE) prog = LayerMode[cfg->mode[i]].prog;
10008c3c:	2a00      	cmp	r2, #0
10008c3e:	d100      	bne.n	10008c42 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x1e>
10008c40:	e290      	b.n	10009164 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x540>
10008c42:	4bdb      	ldr	r3, [pc, #876]	; (10008fb0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x38c>)
10008c44:	0051      	lsls	r1, r2, #1
10008c46:	1889      	adds	r1, r1, r2
10008c48:	5c59      	ldrb	r1, [r3, r1]
		vmode->mode[i] = cfg->mode[i];
10008c4a:	4658      	mov	r0, fp
10008c4c:	7682      	strb	r2, [r0, #26]
		if (cfg->mode[i] != LAYERMODE_BASE) prog = LayerMode[cfg->mode[i]].prog;
10008c4e:	4652      	mov	r2, sl
10008c50:	7d92      	ldrb	r2, [r2, #22]
10008c52:	2a00      	cmp	r2, #0
10008c54:	d002      	beq.n	10008c5c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x38>
10008c56:	0051      	lsls	r1, r2, #1
10008c58:	1889      	adds	r1, r1, r2
10008c5a:	5c59      	ldrb	r1, [r3, r1]
		vmode->mode[i] = cfg->mode[i];
10008c5c:	4658      	mov	r0, fp
10008c5e:	76c2      	strb	r2, [r0, #27]
		if (cfg->mode[i] != LAYERMODE_BASE) prog = LayerMode[cfg->mode[i]].prog;
10008c60:	4652      	mov	r2, sl
10008c62:	7dd2      	ldrb	r2, [r2, #23]
10008c64:	2a00      	cmp	r2, #0
10008c66:	d002      	beq.n	10008c6e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x4a>
10008c68:	0051      	lsls	r1, r2, #1
10008c6a:	1889      	adds	r1, r1, r2
10008c6c:	5c59      	ldrb	r1, [r3, r1]
		vmode->mode[i] = cfg->mode[i];
10008c6e:	4658      	mov	r0, fp
10008c70:	7702      	strb	r2, [r0, #28]
	}
	vmode->prog = prog;

	// prepare minimal and maximal clocks per pixel
	int mincpp = LayerMode[LAYERMODE_BASE].mincpp;
10008c72:	785a      	ldrb	r2, [r3, #1]
	vmode->prog = prog;
10008c74:	7601      	strb	r1, [r0, #24]
	int mincpp = LayerMode[LAYERMODE_BASE].mincpp;
10008c76:	4694      	mov	ip, r2
	int maxcpp = LayerMode[LAYERMODE_BASE].maxcpp;
	int cpp;
	for (i = 1; i < LAYERS; i++)
	{
		cpp = LayerMode[cfg->mode[i]].mincpp;
10008c78:	4652      	mov	r2, sl
10008c7a:	7d54      	ldrb	r4, [r2, #21]
10008c7c:	7d96      	ldrb	r6, [r2, #22]
10008c7e:	0060      	lsls	r0, r4, #1
10008c80:	0072      	lsls	r2, r6, #1
10008c82:	1991      	adds	r1, r2, r6
10008c84:	1907      	adds	r7, r0, r4
10008c86:	1859      	adds	r1, r3, r1
10008c88:	19df      	adds	r7, r3, r7
10008c8a:	787f      	ldrb	r7, [r7, #1]
10008c8c:	7849      	ldrb	r1, [r1, #1]
	int maxcpp = LayerMode[LAYERMODE_BASE].maxcpp;
10008c8e:	789d      	ldrb	r5, [r3, #2]
		if (cpp > mincpp) mincpp = cpp;
10008c90:	42b9      	cmp	r1, r7
10008c92:	da00      	bge.n	10008c96 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x72>
10008c94:	0039      	movs	r1, r7
10008c96:	4561      	cmp	r1, ip
10008c98:	da00      	bge.n	10008c9c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x78>
10008c9a:	4661      	mov	r1, ip
		cpp = LayerMode[cfg->mode[i]].maxcpp;
10008c9c:	1992      	adds	r2, r2, r6
10008c9e:	1900      	adds	r0, r0, r4
10008ca0:	189a      	adds	r2, r3, r2
10008ca2:	1818      	adds	r0, r3, r0
10008ca4:	7880      	ldrb	r0, [r0, #2]
10008ca6:	7892      	ldrb	r2, [r2, #2]
10008ca8:	4282      	cmp	r2, r0
10008caa:	dd00      	ble.n	10008cae <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x8a>
10008cac:	0002      	movs	r2, r0
10008cae:	42aa      	cmp	r2, r5
10008cb0:	dd00      	ble.n	10008cb4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x90>
10008cb2:	002a      	movs	r2, r5
		cpp = LayerMode[cfg->mode[i]].mincpp;
10008cb4:	4650      	mov	r0, sl
10008cb6:	7dc4      	ldrb	r4, [r0, #23]
10008cb8:	0060      	lsls	r0, r4, #1
10008cba:	1905      	adds	r5, r0, r4
10008cbc:	195d      	adds	r5, r3, r5
10008cbe:	786e      	ldrb	r6, [r5, #1]
10008cc0:	428e      	cmp	r6, r1
10008cc2:	da00      	bge.n	10008cc6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0xa2>
10008cc4:	000e      	movs	r6, r1
		cpp = LayerMode[cfg->mode[i]].maxcpp;
10008cc6:	1900      	adds	r0, r0, r4
10008cc8:	181b      	adds	r3, r3, r0
10008cca:	789c      	ldrb	r4, [r3, #2]
10008ccc:	4294      	cmp	r4, r2
10008cce:	dd00      	ble.n	10008cd2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0xae>
10008cd0:	0014      	movs	r4, r2
		if (cpp < maxcpp) maxcpp = cpp;
	}

	// prepare full width
	int w = cfg->width; // required width
10008cd2:	4653      	mov	r3, sl
	int wfull = cfg->wfull;	// full width
10008cd4:	4652      	mov	r2, sl
	int w = cfg->width; // required width
10008cd6:	881b      	ldrh	r3, [r3, #0]
10008cd8:	9306      	str	r3, [sp, #24]
	int wfull = cfg->wfull;	// full width
10008cda:	8897      	ldrh	r7, [r2, #4]
	if (wfull == 0) wfull = w; // use required width as 100% width
10008cdc:	2f00      	cmp	r7, #0
10008cde:	d100      	bne.n	10008ce2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0xbe>
10008ce0:	001f      	movs	r7, r3

	// prepare maximal active time and maximal pixels
	const sVideo* v = cfg->video;
10008ce2:	4653      	mov	r3, sl
10008ce4:	689b      	ldr	r3, [r3, #8]
10008ce6:	4699      	mov	r9, r3
	float hmax = v->htot - v->hfront - v->hsync - v->hback;
10008ce8:	6859      	ldr	r1, [r3, #4]
10008cea:	6818      	ldr	r0, [r3, #0]
10008cec:	f7f8 f8c3 	bl	10000e76 <__wrap___aeabi_fsub>
10008cf0:	464b      	mov	r3, r9
10008cf2:	6899      	ldr	r1, [r3, #8]
10008cf4:	f7f8 f8bf 	bl	10000e76 <__wrap___aeabi_fsub>
10008cf8:	464b      	mov	r3, r9
10008cfa:	68d9      	ldr	r1, [r3, #12]
10008cfc:	f7f8 f8bb 	bl	10000e76 <__wrap___aeabi_fsub>
	float hfull = v->hfull;
10008d00:	464b      	mov	r3, r9
10008d02:	691b      	ldr	r3, [r3, #16]
	float hmax = v->htot - v->hfront - v->hsync - v->hback;
10008d04:	9007      	str	r0, [sp, #28]
	int wmax = (int)(wfull*hmax/hfull + 0.001f);
10008d06:	0038      	movs	r0, r7
	float hfull = v->hfull;
10008d08:	4698      	mov	r8, r3
	int wmax = (int)(wfull*hmax/hfull + 0.001f);
10008d0a:	f7f8 f913 	bl	10000f34 <__wrap___aeabi_i2f>

	// calculate cpp from required frequency (rounded down), limit minimal cpp
	u32 freq = cfg->freq;
10008d0e:	4653      	mov	r3, sl
10008d10:	68dd      	ldr	r5, [r3, #12]
	int wmax = (int)(wfull*hmax/hfull + 0.001f);
10008d12:	9004      	str	r0, [sp, #16]
	u32 freq = cfg->freq;
10008d14:	950e      	str	r5, [sp, #56]	; 0x38
	cpp = (int)(freq*hfull/1000/wfull + 0.1f);
	if (cpp < mincpp) cpp = mincpp;

	// recalculate frequency if not locked
	if (!cfg->lockfreq)
10008d16:	7e5b      	ldrb	r3, [r3, #25]
10008d18:	2b00      	cmp	r3, #0
10008d1a:	d130      	bne.n	10008d7e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x15a>
	cpp = (int)(freq*hfull/1000/wfull + 0.1f);
10008d1c:	0028      	movs	r0, r5
10008d1e:	f7f8 f904 	bl	10000f2a <__wrap___aeabi_ui2f>
10008d22:	4641      	mov	r1, r8
10008d24:	f7f8 f8b0 	bl	10000e88 <__wrap___aeabi_fmul>
10008d28:	49a2      	ldr	r1, [pc, #648]	; (10008fb4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
10008d2a:	f7f8 f8aa 	bl	10000e82 <__wrap___aeabi_fdiv>
10008d2e:	9904      	ldr	r1, [sp, #16]
10008d30:	f7f8 f8a7 	bl	10000e82 <__wrap___aeabi_fdiv>
10008d34:	49a0      	ldr	r1, [pc, #640]	; (10008fb8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x394>)
10008d36:	f7f8 f8a1 	bl	10000e7c <__wrap___aeabi_fadd>
10008d3a:	f7f8 f91d 	bl	10000f78 <__wrap___aeabi_f2iz>
	{
		int freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
10008d3e:	4286      	cmp	r6, r0
10008d40:	da00      	bge.n	10008d44 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x120>
10008d42:	e240      	b.n	100091c6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5a2>
10008d44:	437e      	muls	r6, r7
10008d46:	0170      	lsls	r0, r6, #5
10008d48:	1b80      	subs	r0, r0, r6
10008d4a:	0080      	lsls	r0, r0, #2
10008d4c:	1980      	adds	r0, r0, r6
10008d4e:	00c0      	lsls	r0, r0, #3
10008d50:	f7f8 f8f0 	bl	10000f34 <__wrap___aeabi_i2f>
10008d54:	4641      	mov	r1, r8
10008d56:	f7f8 f894 	bl	10000e82 <__wrap___aeabi_fdiv>
10008d5a:	21fc      	movs	r1, #252	; 0xfc
10008d5c:	0589      	lsls	r1, r1, #22
10008d5e:	f7f8 f88d 	bl	10000e7c <__wrap___aeabi_fadd>
10008d62:	f7f8 f909 	bl	10000f78 <__wrap___aeabi_f2iz>
10008d66:	30c8      	adds	r0, #200	; 0xc8
		if (freq2 < freq)
10008d68:	4285      	cmp	r5, r0
10008d6a:	d900      	bls.n	10008d6e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x14a>
10008d6c:	e215      	b.n	1000919a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x576>
		{
			cpp++;
			freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
		}
		if (freq2 >= freq) freq = freq2;
10008d6e:	0005      	movs	r5, r0
10008d70:	900e      	str	r0, [sp, #56]	; 0x38
		if (freq > cfg->fmax) freq = cfg->fmax;
10008d72:	4653      	mov	r3, sl
10008d74:	691b      	ldr	r3, [r3, #16]
10008d76:	42ab      	cmp	r3, r5
10008d78:	d201      	bcs.n	10008d7e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x15a>
10008d7a:	001d      	movs	r5, r3
10008d7c:	930e      	str	r3, [sp, #56]	; 0x38

	// find sysclock setup (use set_sys_clock_pll to set sysclock)
	u32 vco;
	u16 fbdiv;
	u8 pd1, pd2;
	FindSysClock(freq, &freq, &vco, &fbdiv, &pd1, &pd2);
10008d7e:	ab0a      	add	r3, sp, #40	; 0x28
10008d80:	469c      	mov	ip, r3
10008d82:	260e      	movs	r6, #14
10008d84:	230d      	movs	r3, #13
10008d86:	4466      	add	r6, ip
10008d88:	4463      	add	r3, ip
10008d8a:	af0d      	add	r7, sp, #52	; 0x34
10008d8c:	a90e      	add	r1, sp, #56	; 0x38
10008d8e:	0028      	movs	r0, r5
10008d90:	9301      	str	r3, [sp, #4]
10008d92:	aa0f      	add	r2, sp, #60	; 0x3c
10008d94:	0033      	movs	r3, r6
10008d96:	9700      	str	r7, [sp, #0]
10008d98:	f000 fbcc 	bl	10009534 <_Z12FindSysClockmPmS_PtPhS1_>

	vmode->freq = freq;
10008d9c:	465b      	mov	r3, fp
10008d9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	vmode->fbdiv = fbdiv;
	vmode->pd1 = pd1;
	vmode->pd2 = pd2;

	// calculate divisor
	cpp = (int)(freq*hfull/1000/wfull + 0.2f);
10008da0:	980e      	ldr	r0, [sp, #56]	; 0x38
	vmode->freq = freq;
10008da2:	609a      	str	r2, [r3, #8]
	vmode->vco = vco;
10008da4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10008da6:	60da      	str	r2, [r3, #12]
	vmode->fbdiv = fbdiv;
10008da8:	465a      	mov	r2, fp
10008daa:	8833      	ldrh	r3, [r6, #0]
10008dac:	8213      	strh	r3, [r2, #16]
	vmode->pd1 = pd1;
10008dae:	783b      	ldrb	r3, [r7, #0]
10008db0:	7493      	strb	r3, [r2, #18]
	vmode->pd2 = pd2;
10008db2:	ab0a      	add	r3, sp, #40	; 0x28
10008db4:	7b5b      	ldrb	r3, [r3, #13]
10008db6:	74d3      	strb	r3, [r2, #19]
	cpp = (int)(freq*hfull/1000/wfull + 0.2f);
10008db8:	f7f8 f8b7 	bl	10000f2a <__wrap___aeabi_ui2f>
10008dbc:	4641      	mov	r1, r8
10008dbe:	9003      	str	r0, [sp, #12]
10008dc0:	f7f8 f862 	bl	10000e88 <__wrap___aeabi_fmul>
10008dc4:	497b      	ldr	r1, [pc, #492]	; (10008fb4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
10008dc6:	f7f8 f85c 	bl	10000e82 <__wrap___aeabi_fdiv>
10008dca:	9904      	ldr	r1, [sp, #16]
10008dcc:	9005      	str	r0, [sp, #20]
10008dce:	f7f8 f858 	bl	10000e82 <__wrap___aeabi_fdiv>
10008dd2:	497a      	ldr	r1, [pc, #488]	; (10008fbc <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x398>)
10008dd4:	4680      	mov	r8, r0
10008dd6:	f7f8 f851 	bl	10000e7c <__wrap___aeabi_fadd>
10008dda:	f7f8 f8cd 	bl	10000f78 <__wrap___aeabi_f2iz>
10008dde:	0005      	movs	r5, r0
	int div = 1;
	while (cpp > maxcpp)
10008de0:	4284      	cmp	r4, r0
10008de2:	db00      	blt.n	10008de6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x1c2>
10008de4:	e20c      	b.n	10009200 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5dc>
	int div = 1;
10008de6:	2701      	movs	r7, #1
10008de8:	4645      	mov	r5, r8
	{
		div++;
10008dea:	3701      	adds	r7, #1
		cpp = (int)(freq*hfull/1000/wfull/div + 0.2f);
10008dec:	0038      	movs	r0, r7
10008dee:	f7f8 f8a1 	bl	10000f34 <__wrap___aeabi_i2f>
10008df2:	1c01      	adds	r1, r0, #0
10008df4:	1c06      	adds	r6, r0, #0
10008df6:	1c28      	adds	r0, r5, #0
10008df8:	f7f8 f843 	bl	10000e82 <__wrap___aeabi_fdiv>
10008dfc:	496f      	ldr	r1, [pc, #444]	; (10008fbc <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x398>)
10008dfe:	f7f8 f83d 	bl	10000e7c <__wrap___aeabi_fadd>
10008e02:	f7f8 f8b9 	bl	10000f78 <__wrap___aeabi_f2iz>
	while (cpp > maxcpp)
10008e06:	4284      	cmp	r4, r0
10008e08:	dbef      	blt.n	10008dea <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x1c6>
	}

	vmode->div = div;
10008e0a:	0005      	movs	r5, r0
	vmode->vback2 = v->vback2 - dh/2; // V back porch (after VSYNC, before image) on subframe 2
	vmode->vfront2 = v->vfront2 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 2
	vmode->vpre2 = v->vpre2; // V sync pre half-pulses on subframe 2

	// frequency
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
10008e0c:	0438      	lsls	r0, r7, #16
10008e0e:	0c00      	lsrs	r0, r0, #16
10008e10:	f7f8 f890 	bl	10000f34 <__wrap___aeabi_i2f>
	vmode->div = div;
10008e14:	b2bc      	uxth	r4, r7
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
10008e16:	9008      	str	r0, [sp, #32]
	vmode->div = div;
10008e18:	465b      	mov	r3, fp
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
10008e1a:	0028      	movs	r0, r5
	vmode->div = div;
10008e1c:	829c      	strh	r4, [r3, #20]
	vmode->cpp = cpp;
10008e1e:	82dd      	strh	r5, [r3, #22]
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
10008e20:	f7f8 f888 	bl	10000f34 <__wrap___aeabi_i2f>
	wmax = (int)(freq*hmax/1000/cpp/div + 0.4f);
10008e24:	9907      	ldr	r1, [sp, #28]
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
10008e26:	1c04      	adds	r4, r0, #0
	wmax = (int)(freq*hmax/1000/cpp/div + 0.4f);
10008e28:	9803      	ldr	r0, [sp, #12]
10008e2a:	f7f8 f82d 	bl	10000e88 <__wrap___aeabi_fmul>
10008e2e:	4961      	ldr	r1, [pc, #388]	; (10008fb4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
10008e30:	f7f8 f827 	bl	10000e82 <__wrap___aeabi_fdiv>
10008e34:	1c21      	adds	r1, r4, #0
10008e36:	f7f8 f824 	bl	10000e82 <__wrap___aeabi_fdiv>
10008e3a:	1c31      	adds	r1, r6, #0
10008e3c:	f7f8 f821 	bl	10000e82 <__wrap___aeabi_fdiv>
10008e40:	495f      	ldr	r1, [pc, #380]	; (10008fc0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x39c>)
10008e42:	f7f8 f81b 	bl	10000e7c <__wrap___aeabi_fadd>
10008e46:	f7f8 f897 	bl	10000f78 <__wrap___aeabi_f2iz>
10008e4a:	0007      	movs	r7, r0
	if (w > wmax) w = wmax;
10008e4c:	9806      	ldr	r0, [sp, #24]
10008e4e:	42b8      	cmp	r0, r7
10008e50:	dd00      	ble.n	10008e54 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x230>
10008e52:	0038      	movs	r0, r7
	w = ALIGN4(w);
10008e54:	2303      	movs	r3, #3
10008e56:	4398      	bics	r0, r3
	vmode->width = w; // active width
10008e58:	465b      	mov	r3, fp
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
10008e5a:	1c21      	adds	r1, r4, #0
	vmode->width = w; // active width
10008e5c:	8018      	strh	r0, [r3, #0]
	w = ALIGN4(w);
10008e5e:	4680      	mov	r8, r0
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
10008e60:	9805      	ldr	r0, [sp, #20]
10008e62:	f7f8 f80e 	bl	10000e82 <__wrap___aeabi_fdiv>
10008e66:	1c31      	adds	r1, r6, #0
10008e68:	f7f8 f80b 	bl	10000e82 <__wrap___aeabi_fdiv>
10008e6c:	4954      	ldr	r1, [pc, #336]	; (10008fc0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x39c>)
10008e6e:	f7f8 f805 	bl	10000e7c <__wrap___aeabi_fadd>
10008e72:	f7f8 f881 	bl	10000f78 <__wrap___aeabi_f2iz>
	vmode->wfull = wfull; // width of full screen (image should be full visible)
10008e76:	465b      	mov	r3, fp
10008e78:	8098      	strh	r0, [r3, #4]
	vmode->wmax = wmax; // maximal width (can be > wfull)
10008e7a:	80df      	strh	r7, [r3, #6]
	int hwidth = w*cpp; // active width in state machine clocks
10008e7c:	4643      	mov	r3, r8
10008e7e:	435d      	muls	r5, r3
	int htot = (int)(freq*v->htot/1000/div + 0.5f);  // total state machine clocks per line
10008e80:	464b      	mov	r3, r9
10008e82:	9f03      	ldr	r7, [sp, #12]
10008e84:	6819      	ldr	r1, [r3, #0]
10008e86:	1c38      	adds	r0, r7, #0
10008e88:	f7f7 fffe 	bl	10000e88 <__wrap___aeabi_fmul>
10008e8c:	4949      	ldr	r1, [pc, #292]	; (10008fb4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
10008e8e:	f7f7 fff8 	bl	10000e82 <__wrap___aeabi_fdiv>
10008e92:	1c31      	adds	r1, r6, #0
10008e94:	f7f7 fff5 	bl	10000e82 <__wrap___aeabi_fdiv>
10008e98:	21fc      	movs	r1, #252	; 0xfc
10008e9a:	0589      	lsls	r1, r1, #22
10008e9c:	f7f7 ffee 	bl	10000e7c <__wrap___aeabi_fadd>
10008ea0:	f7f8 f86a 	bl	10000f78 <__wrap___aeabi_f2iz>
	int hsync = (int)(freq*v->hsync/1000/div + 0.5f); // H sync pulse in state machine clocks (min. 4)
10008ea4:	464b      	mov	r3, r9
	int htot = (int)(freq*v->htot/1000/div + 0.5f);  // total state machine clocks per line
10008ea6:	0004      	movs	r4, r0
	int hsync = (int)(freq*v->hsync/1000/div + 0.5f); // H sync pulse in state machine clocks (min. 4)
10008ea8:	6899      	ldr	r1, [r3, #8]
10008eaa:	1c38      	adds	r0, r7, #0
10008eac:	f7f7 ffec 	bl	10000e88 <__wrap___aeabi_fmul>
10008eb0:	4940      	ldr	r1, [pc, #256]	; (10008fb4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
10008eb2:	f7f7 ffe6 	bl	10000e82 <__wrap___aeabi_fdiv>
10008eb6:	1c31      	adds	r1, r6, #0
10008eb8:	f7f7 ffe3 	bl	10000e82 <__wrap___aeabi_fdiv>
10008ebc:	21fc      	movs	r1, #252	; 0xfc
10008ebe:	0589      	lsls	r1, r1, #22
10008ec0:	f7f7 ffdc 	bl	10000e7c <__wrap___aeabi_fadd>
10008ec4:	f7f8 f858 	bl	10000f78 <__wrap___aeabi_f2iz>
10008ec8:	0007      	movs	r7, r0
	if (hsync < 4)
10008eca:	2803      	cmp	r0, #3
10008ecc:	dc00      	bgt.n	10008ed0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2ac>
10008ece:	e143      	b.n	10009158 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x534>
	vmode->hsync = (u16)hsync; // H sync pulse in state machine clocks (min. 4)
10008ed0:	b283      	uxth	r3, r0
10008ed2:	9304      	str	r3, [sp, #16]
	int hfront = (int)(freq*v->hfront/1000/div + 0.5f); // H front porch in state machine clocks (min. 2)
10008ed4:	464b      	mov	r3, r9
10008ed6:	9803      	ldr	r0, [sp, #12]
10008ed8:	6859      	ldr	r1, [r3, #4]
10008eda:	f7f7 ffd5 	bl	10000e88 <__wrap___aeabi_fmul>
10008ede:	4935      	ldr	r1, [pc, #212]	; (10008fb4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
10008ee0:	f7f7 ffcf 	bl	10000e82 <__wrap___aeabi_fdiv>
10008ee4:	1c31      	adds	r1, r6, #0
10008ee6:	f7f7 ffcc 	bl	10000e82 <__wrap___aeabi_fdiv>
10008eea:	21fc      	movs	r1, #252	; 0xfc
10008eec:	0589      	lsls	r1, r1, #22
10008eee:	f7f7 ffc5 	bl	10000e7c <__wrap___aeabi_fadd>
10008ef2:	f7f8 f841 	bl	10000f78 <__wrap___aeabi_f2iz>
	int hback = (int)(freq*v->hback/1000/div + 0.5f); // H back porch in state machine clocks (min. 13)
10008ef6:	464b      	mov	r3, r9
	int hfront = (int)(freq*v->hfront/1000/div + 0.5f); // H front porch in state machine clocks (min. 2)
10008ef8:	4680      	mov	r8, r0
	int hback = (int)(freq*v->hback/1000/div + 0.5f); // H back porch in state machine clocks (min. 13)
10008efa:	68d9      	ldr	r1, [r3, #12]
10008efc:	9803      	ldr	r0, [sp, #12]
10008efe:	f7f7 ffc3 	bl	10000e88 <__wrap___aeabi_fmul>
10008f02:	492c      	ldr	r1, [pc, #176]	; (10008fb4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
10008f04:	f7f7 ffbd 	bl	10000e82 <__wrap___aeabi_fdiv>
10008f08:	1c31      	adds	r1, r6, #0
10008f0a:	f7f7 ffba 	bl	10000e82 <__wrap___aeabi_fdiv>
10008f0e:	21fc      	movs	r1, #252	; 0xfc
10008f10:	0589      	lsls	r1, r1, #22
10008f12:	f7f7 ffb3 	bl	10000e7c <__wrap___aeabi_fadd>
10008f16:	f7f8 f82f 	bl	10000f78 <__wrap___aeabi_f2iz>
	int d = htot - hfront - hsync - hback - hwidth; // difference
10008f1a:	4643      	mov	r3, r8
10008f1c:	1ae2      	subs	r2, r4, r3
10008f1e:	1bd2      	subs	r2, r2, r7
10008f20:	1a12      	subs	r2, r2, r0
10008f22:	1b52      	subs	r2, r2, r5
	hfront += d/2;
10008f24:	0fd3      	lsrs	r3, r2, #31
10008f26:	189b      	adds	r3, r3, r2
10008f28:	1059      	asrs	r1, r3, #1
10008f2a:	4441      	add	r1, r8
	hback += (d < 0) ? (d-1)/2 : (d+1)/2;
10008f2c:	2a00      	cmp	r2, #0
10008f2e:	da00      	bge.n	10008f32 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x30e>
10008f30:	e161      	b.n	100091f6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5d2>
10008f32:	3201      	adds	r2, #1
10008f34:	1053      	asrs	r3, r2, #1
10008f36:	181b      	adds	r3, r3, r0
	if (hfront < 4)
10008f38:	2903      	cmp	r1, #3
10008f3a:	dc02      	bgt.n	10008f42 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x31e>
		hback -= 4 - hfront;
10008f3c:	18cb      	adds	r3, r1, r3
		hfront = 4;
10008f3e:	2104      	movs	r1, #4
		hback -= 4 - hfront;
10008f40:	3b04      	subs	r3, #4
	if (hback < 13)
10008f42:	2b0c      	cmp	r3, #12
10008f44:	dc00      	bgt.n	10008f48 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x324>
10008f46:	e100      	b.n	1000914a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x526>
	vmode->hback = (u16)hback; // H back porch in state machine clocks (min. 13)
10008f48:	b29a      	uxth	r2, r3
	htot = hfront + hsync + hback + hwidth; // total state machine clocks per line
10008f4a:	187f      	adds	r7, r7, r1
10008f4c:	18fb      	adds	r3, r7, r3
	if (v->inter && ((htot & 1) != 0))
10008f4e:	4648      	mov	r0, r9
	htot = hfront + hsync + hback + hwidth; // total state machine clocks per line
10008f50:	195d      	adds	r5, r3, r5
	if (v->inter && ((htot & 1) != 0))
10008f52:	2334      	movs	r3, #52	; 0x34
10008f54:	5cc0      	ldrb	r0, [r0, r3]
10008f56:	2800      	cmp	r0, #0
10008f58:	d002      	beq.n	10008f60 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x33c>
10008f5a:	07eb      	lsls	r3, r5, #31
10008f5c:	d500      	bpl.n	10008f60 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x33c>
10008f5e:	e119      	b.n	10009194 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x570>
	vmode->htot = (u16)htot; // total state machine clocks per line
10008f60:	465b      	mov	r3, fp
	vmode->hfront = (u16)hfront; // H front porch in state machine clocks (min. 2)
10008f62:	8419      	strh	r1, [r3, #32]
	vmode->hback = (u16)hback; // H back porch in state machine clocks (min. 13)
10008f64:	849a      	strh	r2, [r3, #36]	; 0x24
	vmode->hsync = (u16)hsync; // H sync pulse in state machine clocks (min. 4)
10008f66:	9904      	ldr	r1, [sp, #16]
	if (cfg->dbly) h *= 2; // use double lines
10008f68:	4652      	mov	r2, sl
	vmode->htot = (u16)htot; // total state machine clocks per line
10008f6a:	83dd      	strh	r5, [r3, #30]
	vmode->hsync = (u16)hsync; // H sync pulse in state machine clocks (min. 4)
10008f6c:	8459      	strh	r1, [r3, #34]	; 0x22
	int h = cfg->height; // required height
10008f6e:	4653      	mov	r3, sl
	if (cfg->dbly) h *= 2; // use double lines
10008f70:	7e14      	ldrb	r4, [r2, #24]
	int h = cfg->height; // required height
10008f72:	885b      	ldrh	r3, [r3, #2]
	if (cfg->dbly) h *= 2; // use double lines
10008f74:	2c00      	cmp	r4, #0
10008f76:	d025      	beq.n	10008fc4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3a0>
	vmode->vmax = v->vmax; // maximal height
10008f78:	464a      	mov	r2, r9
10008f7a:	8ad1      	ldrh	r1, [r2, #22]
10008f7c:	465a      	mov	r2, fp
	if (cfg->dbly) h *= 2; // use double lines
10008f7e:	005b      	lsls	r3, r3, #1
	vmode->vmax = v->vmax; // maximal height
10008f80:	85d1      	strh	r1, [r2, #46]	; 0x2e
	if (h > v->vmax) h = v->vmax; // limit height
10008f82:	4299      	cmp	r1, r3
10008f84:	dd00      	ble.n	10008f88 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x364>
10008f86:	e0fe      	b.n	10009186 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x562>
	if (cfg->dbly) h &= ~1; // must be even number if double lines
10008f88:	2301      	movs	r3, #1
10008f8a:	4399      	bics	r1, r3
	if (v->inter) // interlaced
10008f8c:	2800      	cmp	r0, #0
10008f8e:	d100      	bne.n	10008f92 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x36e>
10008f90:	e0f0      	b.n	10009174 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x550>
		if (v->odd) // first frame is odd lines
10008f92:	2336      	movs	r3, #54	; 0x36
10008f94:	464a      	mov	r2, r9
10008f96:	5cd3      	ldrb	r3, [r2, r3]
10008f98:	2b00      	cmp	r3, #0
10008f9a:	d100      	bne.n	10008f9e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x37a>
10008f9c:	e0ee      	b.n	1000917c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x558>
			vact1 = h/2;
10008f9e:	104a      	asrs	r2, r1, #1
			vact2 = (h+1)/2; // if even lines, even frame will have more lines
10008fa0:	0016      	movs	r6, r2
10008fa2:	1c4b      	adds	r3, r1, #1
10008fa4:	105b      	asrs	r3, r3, #1
	vmode->vact2 = vact2; // active scanlines of 2nd subframe
10008fa6:	b298      	uxth	r0, r3
	if (cfg->dbly) h /= 2; // return double lines to single lines
10008fa8:	2c00      	cmp	r4, #0
10008faa:	d016      	beq.n	10008fda <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3b6>
	vmode->vact2 = vact2; // active scanlines of 2nd subframe
10008fac:	0031      	movs	r1, r6
	if (cfg->dbly) h /= 2; // return double lines to single lines
10008fae:	e014      	b.n	10008fda <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3b6>
10008fb0:	100400e4 	.word	0x100400e4
10008fb4:	447a0000 	.word	0x447a0000
10008fb8:	3dcccccd 	.word	0x3dcccccd
10008fbc:	3e4ccccd 	.word	0x3e4ccccd
10008fc0:	3ecccccd 	.word	0x3ecccccd
	vmode->vmax = v->vmax; // maximal height
10008fc4:	464a      	mov	r2, r9
10008fc6:	8ad1      	ldrh	r1, [r2, #22]
10008fc8:	465a      	mov	r2, fp
10008fca:	85d1      	strh	r1, [r2, #46]	; 0x2e
	if (h > v->vmax) h = v->vmax; // limit height
10008fcc:	4299      	cmp	r1, r3
10008fce:	dd00      	ble.n	10008fd2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3ae>
10008fd0:	e0cb      	b.n	1000916a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x546>
	if (v->inter) // interlaced
10008fd2:	2800      	cmp	r0, #0
10008fd4:	d1dd      	bne.n	10008f92 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x36e>
10008fd6:	000a      	movs	r2, r1
	int vact2 = 0;
10008fd8:	2300      	movs	r3, #0
	vmode->height = h;
10008fda:	465c      	mov	r4, fp
10008fdc:	8061      	strh	r1, [r4, #2]
	vmode->vtot = v->vtot; // total scanlines
10008fde:	4649      	mov	r1, r9
10008fe0:	8a8e      	ldrh	r6, [r1, #20]
	vmode->vact1 = vact1; // active scanlines of 1st subframe
10008fe2:	b291      	uxth	r1, r2
10008fe4:	8761      	strh	r1, [r4, #58]	; 0x3a
10008fe6:	9105      	str	r1, [sp, #20]
	int dh = vact1 - v->vact1; // difference
10008fe8:	4649      	mov	r1, r9
	vmode->vtot = v->vtot; // total scanlines
10008fea:	85a6      	strh	r6, [r4, #44]	; 0x2c
	int dh = vact1 - v->vact1; // difference
10008fec:	8bc9      	ldrh	r1, [r1, #30]
10008fee:	1a52      	subs	r2, r2, r1
	vmode->vsync1 = v->vsync1; // V sync (half-)pulses on subframe 1
10008ff0:	4649      	mov	r1, r9
10008ff2:	8b09      	ldrh	r1, [r1, #24]
10008ff4:	86a1      	strh	r1, [r4, #52]	; 0x34
10008ff6:	9104      	str	r1, [sp, #16]
	vmode->vpost1 = v->vpost1; // V sync post (half-)pulses on subframe 1
10008ff8:	4649      	mov	r1, r9
10008ffa:	8b49      	ldrh	r1, [r1, #26]
10008ffc:	86e1      	strh	r1, [r4, #54]	; 0x36
	vmode->vback1 = v->vback1 - dh/2; // V back porch (after VSYNC, before image) on subframe 1
10008ffe:	464c      	mov	r4, r9
	vmode->vpost1 = v->vpost1; // V sync post (half-)pulses on subframe 1
10009000:	9106      	str	r1, [sp, #24]
	vmode->vback1 = v->vback1 - dh/2; // V back porch (after VSYNC, before image) on subframe 1
10009002:	0fd1      	lsrs	r1, r2, #31
10009004:	8ba4      	ldrh	r4, [r4, #28]
10009006:	1889      	adds	r1, r1, r2
10009008:	1049      	asrs	r1, r1, #1
1000900a:	1a61      	subs	r1, r4, r1
1000900c:	b28f      	uxth	r7, r1
1000900e:	4659      	mov	r1, fp
10009010:	870f      	strh	r7, [r1, #56]	; 0x38
	vmode->vfront1 = v->vfront1 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 1
10009012:	4649      	mov	r1, r9
10009014:	8c09      	ldrh	r1, [r1, #32]
10009016:	2a00      	cmp	r2, #0
10009018:	da00      	bge.n	1000901c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3f8>
1000901a:	e0e6      	b.n	100091ea <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5c6>
1000901c:	3201      	adds	r2, #1
1000901e:	1052      	asrs	r2, r2, #1
10009020:	b292      	uxth	r2, r2
10009022:	1a8a      	subs	r2, r1, r2
10009024:	4659      	mov	r1, fp
10009026:	b292      	uxth	r2, r2
10009028:	878a      	strh	r2, [r1, #60]	; 0x3c
1000902a:	9207      	str	r2, [sp, #28]
	vmode->vpre1 = v->vpre1; // V sync pre (half-)pulses on subframe 1
1000902c:	464a      	mov	r2, r9
1000902e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
10009030:	87ca      	strh	r2, [r1, #62]	; 0x3e
10009032:	9209      	str	r2, [sp, #36]	; 0x24
	vmode->vact2 = vact2; // active scanlines of 2nd subframe
10009034:	2248      	movs	r2, #72	; 0x48
10009036:	5288      	strh	r0, [r1, r2]
	dh = vact2 - v->vact2; // difference
10009038:	464a      	mov	r2, r9
1000903a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
	vmode->vsync2 = v->vsync2; // V sync half-pulses on subframe 2
1000903c:	4658      	mov	r0, fp
	dh = vact2 - v->vact2; // difference
1000903e:	1a9b      	subs	r3, r3, r2
	vmode->vsync2 = v->vsync2; // V sync half-pulses on subframe 2
10009040:	464a      	mov	r2, r9
10009042:	8c92      	ldrh	r2, [r2, #36]	; 0x24
10009044:	920a      	str	r2, [sp, #40]	; 0x28
10009046:	0011      	movs	r1, r2
10009048:	2242      	movs	r2, #66	; 0x42
1000904a:	5281      	strh	r1, [r0, r2]
	vmode->vpost2 = v->vpost2; // V sync post half-pulses on subframe 2
1000904c:	464a      	mov	r2, r9
1000904e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
10009050:	0011      	movs	r1, r2
10009052:	920b      	str	r2, [sp, #44]	; 0x2c
10009054:	2244      	movs	r2, #68	; 0x44
10009056:	5281      	strh	r1, [r0, r2]
	vmode->vback2 = v->vback2 - dh/2; // V back porch (after VSYNC, before image) on subframe 2
10009058:	4649      	mov	r1, r9
1000905a:	0fda      	lsrs	r2, r3, #31
1000905c:	8d0c      	ldrh	r4, [r1, #40]	; 0x28
1000905e:	18d2      	adds	r2, r2, r3
10009060:	1052      	asrs	r2, r2, #1
10009062:	1aa4      	subs	r4, r4, r2
10009064:	2246      	movs	r2, #70	; 0x46
10009066:	b2a4      	uxth	r4, r4
10009068:	5284      	strh	r4, [r0, r2]
	vmode->vfront2 = v->vfront2 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 2
1000906a:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
1000906c:	2b00      	cmp	r3, #0
1000906e:	da00      	bge.n	10009072 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x44e>
10009070:	e0b5      	b.n	100091de <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5ba>
10009072:	3301      	adds	r3, #1
10009074:	105b      	asrs	r3, r3, #1
10009076:	b29b      	uxth	r3, r3
10009078:	4659      	mov	r1, fp
1000907a:	1ad3      	subs	r3, r2, r3
1000907c:	224a      	movs	r2, #74	; 0x4a
1000907e:	528b      	strh	r3, [r1, r2]
	vmode->vpre2 = v->vpre2; // V sync pre half-pulses on subframe 2
10009080:	464b      	mov	r3, r9
10009082:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
10009084:	234c      	movs	r3, #76	; 0x4c
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
10009086:	9803      	ldr	r0, [sp, #12]
	vmode->vpre2 = v->vpre2; // V sync pre half-pulses on subframe 2
10009088:	52ca      	strh	r2, [r1, r3]
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
1000908a:	4960      	ldr	r1, [pc, #384]	; (1000920c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5e8>)
1000908c:	f7f7 fefc 	bl	10000e88 <__wrap___aeabi_fmul>
10009090:	9908      	ldr	r1, [sp, #32]
10009092:	f7f7 fef6 	bl	10000e82 <__wrap___aeabi_fdiv>
10009096:	042d      	lsls	r5, r5, #16
10009098:	4680      	mov	r8, r0
1000909a:	0c28      	lsrs	r0, r5, #16
1000909c:	f7f7 ff4a 	bl	10000f34 <__wrap___aeabi_i2f>
100090a0:	1c01      	adds	r1, r0, #0
100090a2:	4640      	mov	r0, r8
100090a4:	f7f7 feed 	bl	10000e82 <__wrap___aeabi_fdiv>
100090a8:	465b      	mov	r3, fp
100090aa:	1c05      	adds	r5, r0, #0
100090ac:	6298      	str	r0, [r3, #40]	; 0x28
	vmode->vfreq = vmode->hfreq / vmode->vtot;
100090ae:	0030      	movs	r0, r6
100090b0:	f7f7 ff40 	bl	10000f34 <__wrap___aeabi_i2f>
100090b4:	1c01      	adds	r1, r0, #0
100090b6:	1c28      	adds	r0, r5, #0
100090b8:	f7f7 fee3 	bl	10000e82 <__wrap___aeabi_fdiv>

	// name
	vmode->name = v->name;	// video timing name
100090bc:	464a      	mov	r2, r9
	vmode->vfreq = vmode->hfreq / vmode->vtot;
100090be:	465b      	mov	r3, fp
	vmode->name = v->name;	// video timing name
100090c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
	vmode->vfreq = vmode->hfreq / vmode->vtot;
100090c2:	6318      	str	r0, [r3, #48]	; 0x30
	vmode->name = v->name;	// video timing name
100090c4:	651a      	str	r2, [r3, #80]	; 0x50

	// flags
	vmode->lockfreq = cfg->lockfreq; // lock current frequency, do not change it
100090c6:	4653      	mov	r3, sl
100090c8:	4659      	mov	r1, fp
100090ca:	7e5a      	ldrb	r2, [r3, #25]
100090cc:	2354      	movs	r3, #84	; 0x54
100090ce:	54ca      	strb	r2, [r1, r3]
	vmode->dbly = cfg->dbly; // double scanlines
100090d0:	4653      	mov	r3, sl
100090d2:	7e1a      	ldrb	r2, [r3, #24]
100090d4:	2355      	movs	r3, #85	; 0x55
100090d6:	54ca      	strb	r2, [r1, r3]
	vmode->inter = v->inter; // interlaced (use sub-frames)
100090d8:	464a      	mov	r2, r9
100090da:	3b21      	subs	r3, #33	; 0x21
100090dc:	5cd1      	ldrb	r1, [r2, r3]
100090de:	4658      	mov	r0, fp
100090e0:	2256      	movs	r2, #86	; 0x56
100090e2:	5481      	strb	r1, [r0, r2]
	vmode->psync = v->psync; // positive synchronization
100090e4:	4649      	mov	r1, r9
100090e6:	3a21      	subs	r2, #33	; 0x21
100090e8:	5c89      	ldrb	r1, [r1, r2]
100090ea:	3222      	adds	r2, #34	; 0x22
100090ec:	5481      	strb	r1, [r0, r2]
	vmode->odd = v->odd; // first sub-frame is odd lines 1, 3, 5,... (PAL)
100090ee:	4649      	mov	r1, r9
100090f0:	3a21      	subs	r2, #33	; 0x21
100090f2:	5c89      	ldrb	r1, [r1, r2]
100090f4:	3222      	adds	r2, #34	; 0x22
100090f6:	5481      	strb	r1, [r0, r2]

	// first active scanline
	if (v->inter)
100090f8:	464a      	mov	r2, r9
100090fa:	5cd3      	ldrb	r3, [r2, r3]
100090fc:	2b00      	cmp	r3, #0
100090fe:	d068      	beq.n	100091d2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5ae>
	{
		// interlaced
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
10009100:	9a06      	ldr	r2, [sp, #24]
		vmode->vfirst2 = vmode->vfirst1 + vmode->vact1 + vmode->vfront1 + 
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
10009102:	990a      	ldr	r1, [sp, #40]	; 0x28
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
10009104:	4694      	mov	ip, r2
10009106:	9b04      	ldr	r3, [sp, #16]
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
10009108:	9a09      	ldr	r2, [sp, #36]	; 0x24
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
1000910a:	4463      	add	r3, ip
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
1000910c:	468c      	mov	ip, r1
1000910e:	990b      	ldr	r1, [sp, #44]	; 0x2c
10009110:	4462      	add	r2, ip
10009112:	468c      	mov	ip, r1
10009114:	9905      	ldr	r1, [sp, #20]
10009116:	4462      	add	r2, ip
10009118:	468c      	mov	ip, r1
1000911a:	9907      	ldr	r1, [sp, #28]
1000911c:	1052      	asrs	r2, r2, #1
1000911e:	4462      	add	r2, ip
10009120:	468c      	mov	ip, r1
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
10009122:	105b      	asrs	r3, r3, #1
10009124:	3301      	adds	r3, #1
10009126:	18fb      	adds	r3, r7, r3
10009128:	b29b      	uxth	r3, r3
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
1000912a:	18a2      	adds	r2, r4, r2
1000912c:	189a      	adds	r2, r3, r2
1000912e:	4462      	add	r2, ip
10009130:	b292      	uxth	r2, r2
10009132:	4658      	mov	r0, fp
10009134:	214e      	movs	r1, #78	; 0x4e
10009136:	5242      	strh	r2, [r0, r1]
10009138:	2240      	movs	r2, #64	; 0x40
1000913a:	5283      	strh	r3, [r0, r2]
	{
		// progressive
		vmode->vfirst1 = vmode->vsync1 + vmode->vback1 + 1;
		vmode->vfirst2 = 0;
	}
}
1000913c:	b011      	add	sp, #68	; 0x44
1000913e:	bcf0      	pop	{r4, r5, r6, r7}
10009140:	46bb      	mov	fp, r7
10009142:	46b2      	mov	sl, r6
10009144:	46a9      	mov	r9, r5
10009146:	46a0      	mov	r8, r4
10009148:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hfront -= 13 - hback;
1000914a:	18c9      	adds	r1, r1, r3
1000914c:	390d      	subs	r1, #13
1000914e:	2902      	cmp	r1, #2
10009150:	db3b      	blt.n	100091ca <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5a6>
10009152:	220d      	movs	r2, #13
		hback = 13;
10009154:	230d      	movs	r3, #13
10009156:	e6f8      	b.n	10008f4a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x326>
		htot -= 4 - hsync;
10009158:	2304      	movs	r3, #4
1000915a:	1824      	adds	r4, r4, r0
		hsync = 4;
1000915c:	2704      	movs	r7, #4
		htot -= 4 - hsync;
1000915e:	3c04      	subs	r4, #4
		hsync = 4;
10009160:	9304      	str	r3, [sp, #16]
10009162:	e6b7      	b.n	10008ed4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2b0>
	u8 prog = LAYERMODE_BASE;
10009164:	2100      	movs	r1, #0
10009166:	4b2a      	ldr	r3, [pc, #168]	; (10009210 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5ec>)
10009168:	e56f      	b.n	10008c4a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x26>
1000916a:	0019      	movs	r1, r3
	if (v->inter) // interlaced
1000916c:	2800      	cmp	r0, #0
1000916e:	d000      	beq.n	10009172 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x54e>
10009170:	e70f      	b.n	10008f92 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x36e>
10009172:	e730      	b.n	10008fd6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3b2>
	if (cfg->dbly) h &= ~1; // must be even number if double lines
10009174:	000a      	movs	r2, r1
	int vact2 = 0;
10009176:	2300      	movs	r3, #0
	if (cfg->dbly) h /= 2; // return double lines to single lines
10009178:	0849      	lsrs	r1, r1, #1
1000917a:	e72e      	b.n	10008fda <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3b6>
			vact1 = (h+1)/2; // if even lines, even frame will have more lines
1000917c:	1c4a      	adds	r2, r1, #1
			vact2 = h/2;
1000917e:	104b      	asrs	r3, r1, #1
10009180:	001e      	movs	r6, r3
			vact1 = (h+1)/2; // if even lines, even frame will have more lines
10009182:	1052      	asrs	r2, r2, #1
			vact2 = h/2;
10009184:	e70f      	b.n	10008fa6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x382>
10009186:	0019      	movs	r1, r3
	if (cfg->dbly) h &= ~1; // must be even number if double lines
10009188:	2301      	movs	r3, #1
1000918a:	4399      	bics	r1, r3
	if (v->inter) // interlaced
1000918c:	2800      	cmp	r0, #0
1000918e:	d000      	beq.n	10009192 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x56e>
10009190:	e6ff      	b.n	10008f92 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x36e>
10009192:	e7ef      	b.n	10009174 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x550>
		htot--;
10009194:	3d01      	subs	r5, #1
		hfront++;
10009196:	3101      	adds	r1, #1
10009198:	e6e2      	b.n	10008f60 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x33c>
			freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
1000919a:	19f6      	adds	r6, r6, r7
1000919c:	0170      	lsls	r0, r6, #5
1000919e:	1b80      	subs	r0, r0, r6
100091a0:	0080      	lsls	r0, r0, #2
100091a2:	1980      	adds	r0, r0, r6
100091a4:	00c0      	lsls	r0, r0, #3
100091a6:	f7f7 fec5 	bl	10000f34 <__wrap___aeabi_i2f>
100091aa:	4641      	mov	r1, r8
100091ac:	f7f7 fe69 	bl	10000e82 <__wrap___aeabi_fdiv>
100091b0:	21fc      	movs	r1, #252	; 0xfc
100091b2:	0589      	lsls	r1, r1, #22
100091b4:	f7f7 fe62 	bl	10000e7c <__wrap___aeabi_fadd>
100091b8:	f7f7 fede 	bl	10000f78 <__wrap___aeabi_f2iz>
100091bc:	30c8      	adds	r0, #200	; 0xc8
		if (freq2 >= freq) freq = freq2;
100091be:	4285      	cmp	r5, r0
100091c0:	d900      	bls.n	100091c4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5a0>
100091c2:	e5d6      	b.n	10008d72 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x14e>
100091c4:	e5d3      	b.n	10008d6e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x14a>
		int freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
100091c6:	0006      	movs	r6, r0
100091c8:	e5bc      	b.n	10008d44 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x120>
100091ca:	2102      	movs	r1, #2
100091cc:	220d      	movs	r2, #13
		hback = 13;
100091ce:	230d      	movs	r3, #13
100091d0:	e6bb      	b.n	10008f4a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x326>
		vmode->vfirst1 = vmode->vsync1 + vmode->vback1 + 1;
100091d2:	9b04      	ldr	r3, [sp, #16]
		vmode->vfirst2 = 0;
100091d4:	2200      	movs	r2, #0
		vmode->vfirst1 = vmode->vsync1 + vmode->vback1 + 1;
100091d6:	3301      	adds	r3, #1
100091d8:	18fb      	adds	r3, r7, r3
100091da:	b29b      	uxth	r3, r3
		vmode->vfirst2 = 0;
100091dc:	e7a9      	b.n	10009132 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x50e>
	vmode->vfront2 = v->vfront2 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 2
100091de:	1e59      	subs	r1, r3, #1
100091e0:	0fcb      	lsrs	r3, r1, #31
100091e2:	185b      	adds	r3, r3, r1
100091e4:	105b      	asrs	r3, r3, #1
100091e6:	b29b      	uxth	r3, r3
100091e8:	e746      	b.n	10009078 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x454>
	vmode->vfront1 = v->vfront1 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 1
100091ea:	1e54      	subs	r4, r2, #1
100091ec:	0fe2      	lsrs	r2, r4, #31
100091ee:	1912      	adds	r2, r2, r4
100091f0:	1052      	asrs	r2, r2, #1
100091f2:	b292      	uxth	r2, r2
100091f4:	e715      	b.n	10009022 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3fe>
	hback += (d < 0) ? (d-1)/2 : (d+1)/2;
100091f6:	3a01      	subs	r2, #1
100091f8:	0fd3      	lsrs	r3, r2, #31
100091fa:	189b      	adds	r3, r3, r2
100091fc:	105b      	asrs	r3, r3, #1
100091fe:	e69a      	b.n	10008f36 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x312>
	while (cpp > maxcpp)
10009200:	23fe      	movs	r3, #254	; 0xfe
10009202:	059b      	lsls	r3, r3, #22
10009204:	2401      	movs	r4, #1
10009206:	9308      	str	r3, [sp, #32]
10009208:	1c1e      	adds	r6, r3, #0
1000920a:	e605      	b.n	10008e18 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x1f4>
1000920c:	447a0000 	.word	0x447a0000
10009210:	100400e4 	.word	0x100400e4

10009214 <_ZN7cMat2Df11PrepDrawImgEiiiiiifffff>:
//  r ... rotate image (angle in radians)
//  tx ... shift in X direction (ws = whole image width)
//  ty ... shift in Y direction (hs = whole image height)
void cMat2Df::PrepDrawImg(int ws, int hs, int x0, int y0, int wd, int hd,
	float shearx, float sheary, float r, float tx, float ty)
{
10009214:	b5f0      	push	{r4, r5, r6, r7, lr}
10009216:	46de      	mov	lr, fp
10009218:	4657      	mov	r7, sl
1000921a:	464e      	mov	r6, r9
1000921c:	4645      	mov	r5, r8
1000921e:	b5e0      	push	{r5, r6, r7, lr}
10009220:	4680      	mov	r8, r0
10009222:	b087      	sub	sp, #28
10009224:	0018      	movs	r0, r3
10009226:	9203      	str	r2, [sp, #12]
10009228:	9102      	str	r1, [sp, #8]
	// initialize to base unit matrix
	this->Unit();

	// set reference point
	this->TransX(x0);
1000922a:	f7f7 fe83 	bl	10000f34 <__wrap___aeabi_i2f>
	//  1  0 tx   m11 m12 m13   m11 m12 m13+tx
	//  0  1  0 * m21 m22 m23 = m21 m22 m23
	//  0  0  1     0   0   1    0   0   1
	inline void TransX(m2type tx)
	{
		m13 += tx;
1000922e:	2100      	movs	r1, #0
10009230:	f7f7 fe24 	bl	10000e7c <__wrap___aeabi_fadd>
10009234:	1c06      	adds	r6, r0, #0
	this->TransY(y0);
10009236:	9810      	ldr	r0, [sp, #64]	; 0x40
10009238:	f7f7 fe7c 	bl	10000f34 <__wrap___aeabi_i2f>
	//  1  0  0   m11 m12 m13   m11 m12 m13
	//  0  1 ty * m21 m22 m23 = m21 m22 m23+ty
	//  0  0  1     0   0   1    0   0   1
	inline void TransY(m2type ty)
	{
		m23 += ty;
1000923c:	2100      	movs	r1, #0
1000923e:	f7f7 fe1d 	bl	10000e7c <__wrap___aeabi_fadd>
10009242:	9001      	str	r0, [sp, #4]
  { return __builtin_sinf(__x); }
10009244:	9815      	ldr	r0, [sp, #84]	; 0x54
10009246:	f7f7 ff01 	bl	1000104c <__wrap_sinf>
1000924a:	1c04      	adds	r4, r0, #0
  { return __builtin_cosf(__x); }
1000924c:	9815      	ldr	r0, [sp, #84]	; 0x54
1000924e:	f7f7 feeb 	bl	10001028 <__wrap_cosf>
	//   0      0   1     0   0   1           0                    0                 1
	inline void RotSC(m2type sina, m2type cosa)
	{
		m2type t1 = m11;
		m2type t2 = m21;
		m11 = t1*cosa - t2*sina;
10009252:	2100      	movs	r1, #0
10009254:	1c05      	adds	r5, r0, #0
10009256:	1c20      	adds	r0, r4, #0
10009258:	f7f7 fe16 	bl	10000e88 <__wrap___aeabi_fmul>
		m21 = t1*sina + t2*cosa;
1000925c:	2100      	movs	r1, #0
		m11 = t1*cosa - t2*sina;
1000925e:	4681      	mov	r9, r0
		m21 = t1*sina + t2*cosa;
10009260:	1c28      	adds	r0, r5, #0
10009262:	f7f7 fe11 	bl	10000e88 <__wrap___aeabi_fmul>
10009266:	1c07      	adds	r7, r0, #0
10009268:	1c01      	adds	r1, r0, #0
1000926a:	1c20      	adds	r0, r4, #0
1000926c:	f7f7 fe06 	bl	10000e7c <__wrap___aeabi_fadd>

		t1 = m12;
		t2 = m22;
		m12 = t1*cosa - t2*sina;
		m22 = t1*sina + t2*cosa;
10009270:	4649      	mov	r1, r9
		m21 = t1*sina + t2*cosa;
10009272:	4682      	mov	sl, r0
		m22 = t1*sina + t2*cosa;
10009274:	1c28      	adds	r0, r5, #0
10009276:	f7f7 fe01 	bl	10000e7c <__wrap___aeabi_fadd>

		t1 = m13;
		t2 = m23;
		m13 = t1*cosa - t2*sina;
		m23 = t1*sina + t2*cosa;
1000927a:	1c21      	adds	r1, r4, #0
		m22 = t1*sina + t2*cosa;
1000927c:	4683      	mov	fp, r0
		m23 = t1*sina + t2*cosa;
1000927e:	1c30      	adds	r0, r6, #0
10009280:	9604      	str	r6, [sp, #16]
10009282:	f7f7 fe01 	bl	10000e88 <__wrap___aeabi_fmul>
10009286:	1c29      	adds	r1, r5, #0
10009288:	1c06      	adds	r6, r0, #0
1000928a:	9801      	ldr	r0, [sp, #4]
1000928c:	f7f7 fdfc 	bl	10000e88 <__wrap___aeabi_fmul>
10009290:	1c01      	adds	r1, r0, #0
10009292:	1c30      	adds	r0, r6, #0
10009294:	f7f7 fdf2 	bl	10000e7c <__wrap___aeabi_fadd>
	//  1  dx 0   m11 m12 m13   m11+m21*dx m12+m22*dx m13+m23*dx
	//  0  1  0 * m21 m22 m23 = m21        m22        m23
	//  0  0  1     0   0   1     0          0          1
	inline void ShearX(m2type dx)
	{
		m11 += m21*dx;
10009298:	4653      	mov	r3, sl
		m23 = t1*sina + t2*cosa;
1000929a:	1c06      	adds	r6, r0, #0
		m11 += m21*dx;
1000929c:	4651      	mov	r1, sl
1000929e:	9813      	ldr	r0, [sp, #76]	; 0x4c
100092a0:	9305      	str	r3, [sp, #20]
100092a2:	f7f7 fdf1 	bl	10000e88 <__wrap___aeabi_fmul>
		m11 = t1*cosa - t2*sina;
100092a6:	4649      	mov	r1, r9
		m11 += m21*dx;
100092a8:	4682      	mov	sl, r0
		m11 = t1*cosa - t2*sina;
100092aa:	1c28      	adds	r0, r5, #0
100092ac:	f7f7 fde3 	bl	10000e76 <__wrap___aeabi_fsub>
100092b0:	1c01      	adds	r1, r0, #0
		m11 += m21*dx;
100092b2:	4650      	mov	r0, sl
100092b4:	f7f7 fde2 	bl	10000e7c <__wrap___aeabi_fadd>
		m12 += m22*dx;
100092b8:	4659      	mov	r1, fp
		m11 += m21*dx;
100092ba:	4682      	mov	sl, r0
		m12 += m22*dx;
100092bc:	9813      	ldr	r0, [sp, #76]	; 0x4c
100092be:	f7f7 fde3 	bl	10000e88 <__wrap___aeabi_fmul>
		m12 = t1*cosa - t2*sina;
100092c2:	1c21      	adds	r1, r4, #0
		m12 += m22*dx;
100092c4:	4681      	mov	r9, r0
		m12 = t1*cosa - t2*sina;
100092c6:	1c38      	adds	r0, r7, #0
100092c8:	f7f7 fdd5 	bl	10000e76 <__wrap___aeabi_fsub>
100092cc:	1c01      	adds	r1, r0, #0
		m12 += m22*dx;
100092ce:	4648      	mov	r0, r9
100092d0:	f7f7 fdd4 	bl	10000e7c <__wrap___aeabi_fadd>
		m13 = t1*cosa - t2*sina;
100092d4:	1c29      	adds	r1, r5, #0
		m12 += m22*dx;
100092d6:	1c07      	adds	r7, r0, #0
		m13 = t1*cosa - t2*sina;
100092d8:	9804      	ldr	r0, [sp, #16]
100092da:	f7f7 fdd5 	bl	10000e88 <__wrap___aeabi_fmul>
100092de:	1c21      	adds	r1, r4, #0
100092e0:	1c05      	adds	r5, r0, #0
100092e2:	9801      	ldr	r0, [sp, #4]
100092e4:	f7f7 fdd0 	bl	10000e88 <__wrap___aeabi_fmul>
100092e8:	1c01      	adds	r1, r0, #0
100092ea:	1c28      	adds	r0, r5, #0
100092ec:	f7f7 fdc3 	bl	10000e76 <__wrap___aeabi_fsub>
		m13 += m23*dx;
100092f0:	1c31      	adds	r1, r6, #0
		m13 = t1*cosa - t2*sina;
100092f2:	1c04      	adds	r4, r0, #0
		m13 += m23*dx;
100092f4:	9813      	ldr	r0, [sp, #76]	; 0x4c
100092f6:	f7f7 fdc7 	bl	10000e88 <__wrap___aeabi_fmul>
100092fa:	1c01      	adds	r1, r0, #0
100092fc:	1c20      	adds	r0, r4, #0
100092fe:	f7f7 fdbd 	bl	10000e7c <__wrap___aeabi_fadd>
	//  1  0  0   m11 m12 m13   m11        m12        m13
	//  dy 1  0 * m21 m22 m23 = m21+m11*dy m22+m12*dy m23+m13*dy
	//  0  0  1     0   0   1     0          0          1
	inline void ShearY(m2type dy)
	{
		m21 += m11*dy;
10009302:	4651      	mov	r1, sl
		m13 += m23*dx;
10009304:	1c05      	adds	r5, r0, #0
		m21 += m11*dy;
10009306:	9814      	ldr	r0, [sp, #80]	; 0x50
10009308:	f7f7 fdbe 	bl	10000e88 <__wrap___aeabi_fmul>
1000930c:	9905      	ldr	r1, [sp, #20]
1000930e:	f7f7 fdb5 	bl	10000e7c <__wrap___aeabi_fadd>
		m22 += m12*dy;
10009312:	1c39      	adds	r1, r7, #0
		m21 += m11*dy;
10009314:	4681      	mov	r9, r0
		m22 += m12*dy;
10009316:	9814      	ldr	r0, [sp, #80]	; 0x50
10009318:	f7f7 fdb6 	bl	10000e88 <__wrap___aeabi_fmul>
1000931c:	4659      	mov	r1, fp
1000931e:	f7f7 fdad 	bl	10000e7c <__wrap___aeabi_fadd>
		m23 += m13*dy;
10009322:	1c29      	adds	r1, r5, #0
		m22 += m12*dy;
10009324:	9001      	str	r0, [sp, #4]
		m23 += m13*dy;
10009326:	9814      	ldr	r0, [sp, #80]	; 0x50
10009328:	f7f7 fdae 	bl	10000e88 <__wrap___aeabi_fmul>
1000932c:	1c31      	adds	r1, r6, #0
1000932e:	f7f7 fda5 	bl	10000e7c <__wrap___aeabi_fadd>
	// shear after scalling and before rotation
	this->ShearX(shearx);
	this->ShearY(sheary);

	// scale image to destination size
	this->ScaleX((wd == 0) ? 0 : (1.0f/wd));
10009332:	9b11      	ldr	r3, [sp, #68]	; 0x44
10009334:	2400      	movs	r4, #0
10009336:	1c06      	adds	r6, r0, #0
10009338:	2b00      	cmp	r3, #0
1000933a:	d008      	beq.n	1000934e <_ZN7cMat2Df11PrepDrawImgEiiiiiifffff+0x13a>
1000933c:	0018      	movs	r0, r3
1000933e:	f7f7 fdf9 	bl	10000f34 <__wrap___aeabi_i2f>
10009342:	1c01      	adds	r1, r0, #0
10009344:	20fe      	movs	r0, #254	; 0xfe
10009346:	0580      	lsls	r0, r0, #22
10009348:	f7f7 fd9b 	bl	10000e82 <__wrap___aeabi_fdiv>
1000934c:	1c04      	adds	r4, r0, #0
		m11 *= sx;
1000934e:	4651      	mov	r1, sl
10009350:	1c20      	adds	r0, r4, #0
10009352:	f7f7 fd99 	bl	10000e88 <__wrap___aeabi_fmul>
		m12 *= sx;
10009356:	1c39      	adds	r1, r7, #0
		m11 *= sx;
10009358:	4683      	mov	fp, r0
		m12 *= sx;
1000935a:	1c20      	adds	r0, r4, #0
1000935c:	f7f7 fd94 	bl	10000e88 <__wrap___aeabi_fmul>
		m13 *= sx;
10009360:	1c29      	adds	r1, r5, #0
		m12 *= sx;
10009362:	4682      	mov	sl, r0
		m13 *= sx;
10009364:	1c20      	adds	r0, r4, #0
10009366:	f7f7 fd8f 	bl	10000e88 <__wrap___aeabi_fmul>
	this->ScaleY((hd == 0) ? 0 : (1.0f/hd));
1000936a:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000936c:	2500      	movs	r5, #0
1000936e:	1c07      	adds	r7, r0, #0
10009370:	2b00      	cmp	r3, #0
10009372:	d008      	beq.n	10009386 <_ZN7cMat2Df11PrepDrawImgEiiiiiifffff+0x172>
10009374:	0018      	movs	r0, r3
10009376:	f7f7 fddd 	bl	10000f34 <__wrap___aeabi_i2f>
1000937a:	1c01      	adds	r1, r0, #0
1000937c:	20fe      	movs	r0, #254	; 0xfe
1000937e:	0580      	lsls	r0, r0, #22
10009380:	f7f7 fd7f 	bl	10000e82 <__wrap___aeabi_fdiv>
10009384:	1c05      	adds	r5, r0, #0

	// resize from image size to unit size
	this->ScaleX(ws);
10009386:	9802      	ldr	r0, [sp, #8]
10009388:	f7f7 fdd4 	bl	10000f34 <__wrap___aeabi_i2f>
		m11 *= sx;
1000938c:	4659      	mov	r1, fp
1000938e:	1c04      	adds	r4, r0, #0
10009390:	f7f7 fd7a 	bl	10000e88 <__wrap___aeabi_fmul>
10009394:	4643      	mov	r3, r8
		m12 *= sx;
10009396:	4651      	mov	r1, sl
		m11 *= sx;
10009398:	6018      	str	r0, [r3, #0]
		m12 *= sx;
1000939a:	1c20      	adds	r0, r4, #0
1000939c:	f7f7 fd74 	bl	10000e88 <__wrap___aeabi_fmul>
100093a0:	4643      	mov	r3, r8
100093a2:	6058      	str	r0, [r3, #4]
	this->ScaleY(hs);
100093a4:	9803      	ldr	r0, [sp, #12]
100093a6:	f7f7 fdc5 	bl	10000f34 <__wrap___aeabi_i2f>
100093aa:	4682      	mov	sl, r0
		m21 *= sy;
100093ac:	4649      	mov	r1, r9
100093ae:	1c28      	adds	r0, r5, #0
100093b0:	f7f7 fd6a 	bl	10000e88 <__wrap___aeabi_fmul>
100093b4:	4651      	mov	r1, sl
100093b6:	f7f7 fd67 	bl	10000e88 <__wrap___aeabi_fmul>
100093ba:	4643      	mov	r3, r8
		m22 *= sy;
100093bc:	9901      	ldr	r1, [sp, #4]
		m21 *= sy;
100093be:	60d8      	str	r0, [r3, #12]
		m22 *= sy;
100093c0:	1c28      	adds	r0, r5, #0
100093c2:	f7f7 fd61 	bl	10000e88 <__wrap___aeabi_fmul>
100093c6:	4651      	mov	r1, sl
100093c8:	f7f7 fd5e 	bl	10000e88 <__wrap___aeabi_fmul>
100093cc:	4643      	mov	r3, r8
		m13 *= sx;
100093ce:	1c39      	adds	r1, r7, #0
		m22 *= sy;
100093d0:	6118      	str	r0, [r3, #16]
		m13 *= sx;
100093d2:	1c20      	adds	r0, r4, #0
100093d4:	f7f7 fd58 	bl	10000e88 <__wrap___aeabi_fmul>
		m13 += tx;
100093d8:	9916      	ldr	r1, [sp, #88]	; 0x58
100093da:	f7f7 fd4f 	bl	10000e7c <__wrap___aeabi_fadd>
100093de:	4643      	mov	r3, r8
		m23 *= sy;
100093e0:	1c31      	adds	r1, r6, #0
		m13 += tx;
100093e2:	6098      	str	r0, [r3, #8]
		m23 *= sy;
100093e4:	1c28      	adds	r0, r5, #0
100093e6:	f7f7 fd4f 	bl	10000e88 <__wrap___aeabi_fmul>
100093ea:	4651      	mov	r1, sl
100093ec:	f7f7 fd4c 	bl	10000e88 <__wrap___aeabi_fmul>
		m23 += ty;
100093f0:	9917      	ldr	r1, [sp, #92]	; 0x5c
100093f2:	f7f7 fd43 	bl	10000e7c <__wrap___aeabi_fadd>
100093f6:	4643      	mov	r3, r8
100093f8:	6158      	str	r0, [r3, #20]

	// shift
	this->TransX(tx);
	this->TransY(ty);
}
100093fa:	b007      	add	sp, #28
100093fc:	bcf0      	pop	{r4, r5, r6, r7}
100093fe:	46bb      	mov	fp, r7
10009400:	46b2      	mov	sl, r6
10009402:	46a9      	mov	r9, r5
10009404:	46a0      	mov	r8, r4
10009406:	bdf0      	pop	{r4, r5, r6, r7, pc}

10009408 <_ZNK7cMat2Df9ExportIntEPi>:

// export matrix to int array[6]
void cMat2Df::ExportInt(int* mat) const
{
10009408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000940a:	000c      	movs	r4, r1
	mat[0] = TOFRACT(m11);
1000940c:	218b      	movs	r1, #139	; 0x8b
1000940e:	6807      	ldr	r7, [r0, #0]
10009410:	05c9      	lsls	r1, r1, #23
{
10009412:	0005      	movs	r5, r0
	mat[0] = TOFRACT(m11);
10009414:	1c38      	adds	r0, r7, #0
10009416:	f7f7 fd37 	bl	10000e88 <__wrap___aeabi_fmul>
1000941a:	2100      	movs	r1, #0
1000941c:	1c06      	adds	r6, r0, #0
1000941e:	1c38      	adds	r0, r7, #0
10009420:	f7f7 fd68 	bl	10000ef4 <__wrap___aeabi_fcmplt>
10009424:	2800      	cmp	r0, #0
10009426:	d000      	beq.n	1000942a <_ZNK7cMat2Df9ExportIntEPi+0x22>
10009428:	e072      	b.n	10009510 <_ZNK7cMat2Df9ExportIntEPi+0x108>
1000942a:	21fc      	movs	r1, #252	; 0xfc
1000942c:	0589      	lsls	r1, r1, #22
1000942e:	1c30      	adds	r0, r6, #0
10009430:	f7f7 fd24 	bl	10000e7c <__wrap___aeabi_fadd>
10009434:	f7f7 fda0 	bl	10000f78 <__wrap___aeabi_f2iz>
	mat[1] = TOFRACT(m12);
10009438:	218b      	movs	r1, #139	; 0x8b
1000943a:	686f      	ldr	r7, [r5, #4]
	mat[0] = TOFRACT(m11);
1000943c:	6020      	str	r0, [r4, #0]
	mat[1] = TOFRACT(m12);
1000943e:	05c9      	lsls	r1, r1, #23
10009440:	1c38      	adds	r0, r7, #0
10009442:	f7f7 fd21 	bl	10000e88 <__wrap___aeabi_fmul>
10009446:	2100      	movs	r1, #0
10009448:	1c06      	adds	r6, r0, #0
1000944a:	1c38      	adds	r0, r7, #0
1000944c:	f7f7 fd52 	bl	10000ef4 <__wrap___aeabi_fcmplt>
10009450:	2800      	cmp	r0, #0
10009452:	d000      	beq.n	10009456 <_ZNK7cMat2Df9ExportIntEPi+0x4e>
10009454:	e06b      	b.n	1000952e <_ZNK7cMat2Df9ExportIntEPi+0x126>
10009456:	21fc      	movs	r1, #252	; 0xfc
10009458:	0589      	lsls	r1, r1, #22
1000945a:	1c30      	adds	r0, r6, #0
1000945c:	f7f7 fd0e 	bl	10000e7c <__wrap___aeabi_fadd>
10009460:	f7f7 fd8a 	bl	10000f78 <__wrap___aeabi_f2iz>
	mat[2] = TOFRACT(m13);
10009464:	218b      	movs	r1, #139	; 0x8b
10009466:	68af      	ldr	r7, [r5, #8]
	mat[1] = TOFRACT(m12);
10009468:	6060      	str	r0, [r4, #4]
	mat[2] = TOFRACT(m13);
1000946a:	05c9      	lsls	r1, r1, #23
1000946c:	1c38      	adds	r0, r7, #0
1000946e:	f7f7 fd0b 	bl	10000e88 <__wrap___aeabi_fmul>
10009472:	2100      	movs	r1, #0
10009474:	1c06      	adds	r6, r0, #0
10009476:	1c38      	adds	r0, r7, #0
10009478:	f7f7 fd3c 	bl	10000ef4 <__wrap___aeabi_fcmplt>
1000947c:	2800      	cmp	r0, #0
1000947e:	d153      	bne.n	10009528 <_ZNK7cMat2Df9ExportIntEPi+0x120>
10009480:	21fc      	movs	r1, #252	; 0xfc
10009482:	0589      	lsls	r1, r1, #22
10009484:	1c30      	adds	r0, r6, #0
10009486:	f7f7 fcf9 	bl	10000e7c <__wrap___aeabi_fadd>
1000948a:	f7f7 fd75 	bl	10000f78 <__wrap___aeabi_f2iz>
	mat[3] = TOFRACT(m21);
1000948e:	218b      	movs	r1, #139	; 0x8b
10009490:	68ef      	ldr	r7, [r5, #12]
	mat[2] = TOFRACT(m13);
10009492:	60a0      	str	r0, [r4, #8]
	mat[3] = TOFRACT(m21);
10009494:	05c9      	lsls	r1, r1, #23
10009496:	1c38      	adds	r0, r7, #0
10009498:	f7f7 fcf6 	bl	10000e88 <__wrap___aeabi_fmul>
1000949c:	2100      	movs	r1, #0
1000949e:	1c06      	adds	r6, r0, #0
100094a0:	1c38      	adds	r0, r7, #0
100094a2:	f7f7 fd27 	bl	10000ef4 <__wrap___aeabi_fcmplt>
100094a6:	2800      	cmp	r0, #0
100094a8:	d13b      	bne.n	10009522 <_ZNK7cMat2Df9ExportIntEPi+0x11a>
100094aa:	21fc      	movs	r1, #252	; 0xfc
100094ac:	0589      	lsls	r1, r1, #22
100094ae:	1c30      	adds	r0, r6, #0
100094b0:	f7f7 fce4 	bl	10000e7c <__wrap___aeabi_fadd>
100094b4:	f7f7 fd60 	bl	10000f78 <__wrap___aeabi_f2iz>
	mat[4] = TOFRACT(m22);
100094b8:	218b      	movs	r1, #139	; 0x8b
100094ba:	692f      	ldr	r7, [r5, #16]
	mat[3] = TOFRACT(m21);
100094bc:	60e0      	str	r0, [r4, #12]
	mat[4] = TOFRACT(m22);
100094be:	05c9      	lsls	r1, r1, #23
100094c0:	1c38      	adds	r0, r7, #0
100094c2:	f7f7 fce1 	bl	10000e88 <__wrap___aeabi_fmul>
100094c6:	2100      	movs	r1, #0
100094c8:	1c06      	adds	r6, r0, #0
100094ca:	1c38      	adds	r0, r7, #0
100094cc:	f7f7 fd12 	bl	10000ef4 <__wrap___aeabi_fcmplt>
100094d0:	2800      	cmp	r0, #0
100094d2:	d123      	bne.n	1000951c <_ZNK7cMat2Df9ExportIntEPi+0x114>
100094d4:	21fc      	movs	r1, #252	; 0xfc
100094d6:	0589      	lsls	r1, r1, #22
100094d8:	1c30      	adds	r0, r6, #0
100094da:	f7f7 fccf 	bl	10000e7c <__wrap___aeabi_fadd>
100094de:	f7f7 fd4b 	bl	10000f78 <__wrap___aeabi_f2iz>
	mat[5] = TOFRACT(m23);
100094e2:	218b      	movs	r1, #139	; 0x8b
100094e4:	696e      	ldr	r6, [r5, #20]
	mat[4] = TOFRACT(m22);
100094e6:	6120      	str	r0, [r4, #16]
	mat[5] = TOFRACT(m23);
100094e8:	05c9      	lsls	r1, r1, #23
100094ea:	1c30      	adds	r0, r6, #0
100094ec:	f7f7 fccc 	bl	10000e88 <__wrap___aeabi_fmul>
100094f0:	2100      	movs	r1, #0
100094f2:	1c05      	adds	r5, r0, #0
100094f4:	1c30      	adds	r0, r6, #0
100094f6:	f7f7 fcfd 	bl	10000ef4 <__wrap___aeabi_fcmplt>
100094fa:	2800      	cmp	r0, #0
100094fc:	d10b      	bne.n	10009516 <_ZNK7cMat2Df9ExportIntEPi+0x10e>
100094fe:	21fc      	movs	r1, #252	; 0xfc
10009500:	0589      	lsls	r1, r1, #22
10009502:	1c28      	adds	r0, r5, #0
10009504:	f7f7 fcba 	bl	10000e7c <__wrap___aeabi_fadd>
10009508:	f7f7 fd36 	bl	10000f78 <__wrap___aeabi_f2iz>
1000950c:	6160      	str	r0, [r4, #20]
}
1000950e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	mat[0] = TOFRACT(m11);
10009510:	21bf      	movs	r1, #191	; 0xbf
10009512:	0609      	lsls	r1, r1, #24
10009514:	e78b      	b.n	1000942e <_ZNK7cMat2Df9ExportIntEPi+0x26>
	mat[5] = TOFRACT(m23);
10009516:	21bf      	movs	r1, #191	; 0xbf
10009518:	0609      	lsls	r1, r1, #24
1000951a:	e7f2      	b.n	10009502 <_ZNK7cMat2Df9ExportIntEPi+0xfa>
	mat[4] = TOFRACT(m22);
1000951c:	21bf      	movs	r1, #191	; 0xbf
1000951e:	0609      	lsls	r1, r1, #24
10009520:	e7da      	b.n	100094d8 <_ZNK7cMat2Df9ExportIntEPi+0xd0>
	mat[3] = TOFRACT(m21);
10009522:	21bf      	movs	r1, #191	; 0xbf
10009524:	0609      	lsls	r1, r1, #24
10009526:	e7c2      	b.n	100094ae <_ZNK7cMat2Df9ExportIntEPi+0xa6>
	mat[2] = TOFRACT(m13);
10009528:	21bf      	movs	r1, #191	; 0xbf
1000952a:	0609      	lsls	r1, r1, #24
1000952c:	e7aa      	b.n	10009484 <_ZNK7cMat2Df9ExportIntEPi+0x7c>
	mat[1] = TOFRACT(m12);
1000952e:	21bf      	movs	r1, #191	; 0xbf
10009530:	0609      	lsls	r1, r1, #24
10009532:	e792      	b.n	1000945a <_ZNK7cMat2Df9ExportIntEPi+0x52>

10009534 <_Z12FindSysClockmPmS_PtPhS1_>:
//  outfbdiv ... output fbdiv (16..320)
//  outpd1 ... output postdiv1 (1..7)
//  outpd2 ... output postdiv2 (1..7)
// Returns true if precise frequency has been found, or near frequency used otherwise.
bool FindSysClock(u32 reqkhz, u32* outkhz, u32* outvco, u16* outfbdiv, u8* outpd1, u8* outpd2)
{
10009534:	b5f0      	push	{r4, r5, r6, r7, lr}
10009536:	46de      	mov	lr, fp
10009538:	464e      	mov	r6, r9
1000953a:	4657      	mov	r7, sl
1000953c:	4645      	mov	r5, r8
1000953e:	b5e0      	push	{r5, r6, r7, lr}
10009540:	b087      	sub	sp, #28
10009542:	9000      	str	r0, [sp, #0]
	// get reference frequency in kHz (should be 12 MHz)
	u32 input = clock_get_hz(clk_ref)/1000;
10009544:	2004      	movs	r0, #4
{
10009546:	468a      	mov	sl, r1
10009548:	4691      	mov	r9, r2
1000954a:	9304      	str	r3, [sp, #16]
	u32 input = clock_get_hz(clk_ref)/1000;
1000954c:	f7f8 f902 	bl	10001754 <clock_get_hz>
10009550:	21fa      	movs	r1, #250	; 0xfa
10009552:	0089      	lsls	r1, r1, #2
10009554:	f7f6 ff0e 	bl	10000374 <__wrap___aeabi_uidiv>
	*outkhz = 0;
10009558:	2300      	movs	r3, #0
1000955a:	4651      	mov	r1, sl
1000955c:	4684      	mov	ip, r0
1000955e:	4a8e      	ldr	r2, [pc, #568]	; (10009798 <_Z12FindSysClockmPmS_PtPhS1_+0x264>)
10009560:	600b      	str	r3, [r1, #0]
10009562:	0083      	lsls	r3, r0, #2
10009564:	4463      	add	r3, ip
10009566:	4694      	mov	ip, r2
10009568:	019b      	lsls	r3, r3, #6
1000956a:	4463      	add	r3, ip
1000956c:	9302      	str	r3, [sp, #8]
						*outpd2 = pd2;
1000956e:	464b      	mov	r3, r9
	*outkhz = 0;
10009570:	25a0      	movs	r5, #160	; 0xa0
						*outpd2 = pd2;
10009572:	46d1      	mov	r9, sl
10009574:	469a      	mov	sl, r3
	*outkhz = 0;
10009576:	4e89      	ldr	r6, [pc, #548]	; (1000979c <_Z12FindSysClockmPmS_PtPhS1_+0x268>)
	u32 input = clock_get_hz(clk_ref)/1000;
10009578:	9005      	str	r0, [sp, #20]
	*outkhz = 0;
1000957a:	006d      	lsls	r5, r5, #1
		vco = fbdiv * input;
1000957c:	4a88      	ldr	r2, [pc, #544]	; (100097a0 <_Z12FindSysClockmPmS_PtPhS1_+0x26c>)
1000957e:	9b02      	ldr	r3, [sp, #8]
10009580:	4694      	mov	ip, r2
10009582:	001c      	movs	r4, r3
		if ((vco >= vcomin) && (vco <= vcomax))
10009584:	4a87      	ldr	r2, [pc, #540]	; (100097a4 <_Z12FindSysClockmPmS_PtPhS1_+0x270>)
10009586:	4464      	add	r4, ip
10009588:	4293      	cmp	r3, r2
1000958a:	d900      	bls.n	1000958e <_Z12FindSysClockmPmS_PtPhS1_+0x5a>
1000958c:	e0dd      	b.n	1000974a <_Z12FindSysClockmPmS_PtPhS1_+0x216>
1000958e:	2306      	movs	r3, #6
10009590:	9503      	str	r5, [sp, #12]
10009592:	4698      	mov	r8, r3
10009594:	e0b4      	b.n	10009700 <_Z12FindSysClockmPmS_PtPhS1_+0x1cc>
					khz = vco / (pd1 * pd2);
10009596:	4641      	mov	r1, r8
10009598:	0020      	movs	r0, r4
1000959a:	4369      	muls	r1, r5
1000959c:	f7f6 feea 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
100095a0:	9b00      	ldr	r3, [sp, #0]
100095a2:	1ac3      	subs	r3, r0, r3
100095a4:	17da      	asrs	r2, r3, #31
100095a6:	189b      	adds	r3, r3, r2
100095a8:	4053      	eors	r3, r2
					if (margin < margin_best)
100095aa:	42b3      	cmp	r3, r6
100095ac:	d20c      	bcs.n	100095c8 <_Z12FindSysClockmPmS_PtPhS1_+0x94>
						*outkhz = khz;
100095ae:	464a      	mov	r2, r9
100095b0:	6010      	str	r0, [r2, #0]
						*outvco = vco;
100095b2:	4652      	mov	r2, sl
						*outpd2 = pd2;
100095b4:	001e      	movs	r6, r3
						*outvco = vco;
100095b6:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
100095b8:	9903      	ldr	r1, [sp, #12]
100095ba:	9a04      	ldr	r2, [sp, #16]
100095bc:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
100095be:	9a10      	ldr	r2, [sp, #64]	; 0x40
100095c0:	9901      	ldr	r1, [sp, #4]
100095c2:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
100095c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
100095c6:	7017      	strb	r7, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
100095c8:	1e7b      	subs	r3, r7, #1
100095ca:	b2db      	uxtb	r3, r3
100095cc:	469b      	mov	fp, r3
100095ce:	2b00      	cmp	r3, #0
100095d0:	d100      	bne.n	100095d4 <_Z12FindSysClockmPmS_PtPhS1_+0xa0>
100095d2:	e091      	b.n	100096f8 <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
100095d4:	0019      	movs	r1, r3
100095d6:	0020      	movs	r0, r4
100095d8:	4369      	muls	r1, r5
100095da:	f7f6 fecb 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
100095de:	9b00      	ldr	r3, [sp, #0]
100095e0:	1ac3      	subs	r3, r0, r3
100095e2:	17da      	asrs	r2, r3, #31
100095e4:	189b      	adds	r3, r3, r2
100095e6:	4053      	eors	r3, r2
					if (margin < margin_best)
100095e8:	42b3      	cmp	r3, r6
100095ea:	d20d      	bcs.n	10009608 <_Z12FindSysClockmPmS_PtPhS1_+0xd4>
						*outkhz = khz;
100095ec:	464a      	mov	r2, r9
100095ee:	6010      	str	r0, [r2, #0]
						*outvco = vco;
100095f0:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
100095f2:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
100095f4:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
100095f6:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
100095f8:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
100095fa:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
100095fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
100095fe:	9901      	ldr	r1, [sp, #4]
10009600:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
10009602:	4659      	mov	r1, fp
10009604:	9a11      	ldr	r2, [sp, #68]	; 0x44
10009606:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
10009608:	1ebb      	subs	r3, r7, #2
1000960a:	b2db      	uxtb	r3, r3
1000960c:	469b      	mov	fp, r3
1000960e:	2b00      	cmp	r3, #0
10009610:	d072      	beq.n	100096f8 <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
10009612:	0019      	movs	r1, r3
10009614:	0020      	movs	r0, r4
10009616:	4369      	muls	r1, r5
10009618:	f7f6 feac 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
1000961c:	9b00      	ldr	r3, [sp, #0]
1000961e:	1ac3      	subs	r3, r0, r3
10009620:	17da      	asrs	r2, r3, #31
10009622:	189b      	adds	r3, r3, r2
10009624:	4053      	eors	r3, r2
					if (margin < margin_best)
10009626:	429e      	cmp	r6, r3
10009628:	d90d      	bls.n	10009646 <_Z12FindSysClockmPmS_PtPhS1_+0x112>
						*outkhz = khz;
1000962a:	464a      	mov	r2, r9
1000962c:	6010      	str	r0, [r2, #0]
						*outvco = vco;
1000962e:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
10009630:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
10009632:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
10009634:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
10009636:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
10009638:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
1000963a:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000963c:	9901      	ldr	r1, [sp, #4]
1000963e:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
10009640:	4659      	mov	r1, fp
10009642:	9a11      	ldr	r2, [sp, #68]	; 0x44
10009644:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
10009646:	1efb      	subs	r3, r7, #3
10009648:	b2db      	uxtb	r3, r3
1000964a:	469b      	mov	fp, r3
1000964c:	2b00      	cmp	r3, #0
1000964e:	d053      	beq.n	100096f8 <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
10009650:	0019      	movs	r1, r3
10009652:	0020      	movs	r0, r4
10009654:	4369      	muls	r1, r5
10009656:	f7f6 fe8d 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
1000965a:	9b00      	ldr	r3, [sp, #0]
1000965c:	1ac3      	subs	r3, r0, r3
1000965e:	17da      	asrs	r2, r3, #31
10009660:	189b      	adds	r3, r3, r2
10009662:	4053      	eors	r3, r2
					if (margin < margin_best)
10009664:	429e      	cmp	r6, r3
10009666:	d90d      	bls.n	10009684 <_Z12FindSysClockmPmS_PtPhS1_+0x150>
						*outkhz = khz;
10009668:	464a      	mov	r2, r9
1000966a:	6010      	str	r0, [r2, #0]
						*outvco = vco;
1000966c:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
1000966e:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
10009670:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
10009672:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
10009674:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
10009676:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
10009678:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000967a:	9901      	ldr	r1, [sp, #4]
1000967c:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
1000967e:	4659      	mov	r1, fp
10009680:	9a11      	ldr	r2, [sp, #68]	; 0x44
10009682:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
10009684:	1f3b      	subs	r3, r7, #4
10009686:	b2db      	uxtb	r3, r3
10009688:	469b      	mov	fp, r3
1000968a:	2b00      	cmp	r3, #0
1000968c:	d034      	beq.n	100096f8 <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
1000968e:	0019      	movs	r1, r3
10009690:	0020      	movs	r0, r4
10009692:	4369      	muls	r1, r5
10009694:	f7f6 fe6e 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10009698:	9b00      	ldr	r3, [sp, #0]
1000969a:	1ac3      	subs	r3, r0, r3
1000969c:	17da      	asrs	r2, r3, #31
1000969e:	189b      	adds	r3, r3, r2
100096a0:	4053      	eors	r3, r2
					if (margin < margin_best)
100096a2:	429e      	cmp	r6, r3
100096a4:	d90d      	bls.n	100096c2 <_Z12FindSysClockmPmS_PtPhS1_+0x18e>
						*outkhz = khz;
100096a6:	464a      	mov	r2, r9
100096a8:	6010      	str	r0, [r2, #0]
						*outvco = vco;
100096aa:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
100096ac:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
100096ae:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
100096b0:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
100096b2:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
100096b4:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
100096b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
100096b8:	9901      	ldr	r1, [sp, #4]
100096ba:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
100096bc:	4659      	mov	r1, fp
100096be:	9a11      	ldr	r2, [sp, #68]	; 0x44
100096c0:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
100096c2:	2f05      	cmp	r7, #5
100096c4:	d018      	beq.n	100096f8 <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
100096c6:	0029      	movs	r1, r5
100096c8:	0020      	movs	r0, r4
100096ca:	f7f6 fe53 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
100096ce:	9b00      	ldr	r3, [sp, #0]
100096d0:	1ac3      	subs	r3, r0, r3
100096d2:	17da      	asrs	r2, r3, #31
100096d4:	189b      	adds	r3, r3, r2
100096d6:	4053      	eors	r3, r2
					if (margin < margin_best)
100096d8:	429e      	cmp	r6, r3
100096da:	d90d      	bls.n	100096f8 <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
						*outkhz = khz;
100096dc:	464a      	mov	r2, r9
100096de:	6010      	str	r0, [r2, #0]
						*outvco = vco;
100096e0:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
100096e2:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
100096e4:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
100096e6:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
100096e8:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
100096ea:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
100096ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
100096ee:	9901      	ldr	r1, [sp, #4]
100096f0:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
100096f2:	2101      	movs	r1, #1
100096f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
100096f6:	7011      	strb	r1, [r2, #0]
			for (pd1 = 7; pd1 >= 1; pd1--)
100096f8:	2301      	movs	r3, #1
100096fa:	425b      	negs	r3, r3
100096fc:	469c      	mov	ip, r3
100096fe:	44e0      	add	r8, ip
				for (pd2 = pd1; pd2 >= 1; pd2--)
10009700:	4643      	mov	r3, r8
10009702:	b2df      	uxtb	r7, r3
10009704:	1c7b      	adds	r3, r7, #1
10009706:	b2da      	uxtb	r2, r3
10009708:	4643      	mov	r3, r8
1000970a:	1c5d      	adds	r5, r3, #1
					khz = vco / (pd1 * pd2);
1000970c:	0029      	movs	r1, r5
1000970e:	0020      	movs	r0, r4
10009710:	4369      	muls	r1, r5
10009712:	9201      	str	r2, [sp, #4]
10009714:	f7f6 fe2e 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10009718:	9b00      	ldr	r3, [sp, #0]
1000971a:	1ac3      	subs	r3, r0, r3
1000971c:	17d9      	asrs	r1, r3, #31
1000971e:	185b      	adds	r3, r3, r1
10009720:	404b      	eors	r3, r1
					if (margin < margin_best)
10009722:	429e      	cmp	r6, r3
10009724:	d90c      	bls.n	10009740 <_Z12FindSysClockmPmS_PtPhS1_+0x20c>
						*outkhz = khz;
10009726:	4649      	mov	r1, r9
10009728:	6008      	str	r0, [r1, #0]
						*outvco = vco;
1000972a:	4651      	mov	r1, sl
						*outpd2 = pd2;
1000972c:	001e      	movs	r6, r3
						*outvco = vco;
1000972e:	600c      	str	r4, [r1, #0]
						*outfbdiv = fbdiv;
10009730:	9803      	ldr	r0, [sp, #12]
10009732:	9904      	ldr	r1, [sp, #16]
						*outpd1 = pd1;
10009734:	9a01      	ldr	r2, [sp, #4]
						*outfbdiv = fbdiv;
10009736:	8008      	strh	r0, [r1, #0]
						*outpd1 = pd1;
10009738:	9910      	ldr	r1, [sp, #64]	; 0x40
1000973a:	700a      	strb	r2, [r1, #0]
						*outpd2 = pd2;
1000973c:	9911      	ldr	r1, [sp, #68]	; 0x44
1000973e:	700a      	strb	r2, [r1, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
10009740:	4643      	mov	r3, r8
10009742:	2b00      	cmp	r3, #0
10009744:	d000      	beq.n	10009748 <_Z12FindSysClockmPmS_PtPhS1_+0x214>
10009746:	e726      	b.n	10009596 <_Z12FindSysClockmPmS_PtPhS1_+0x62>
10009748:	9d03      	ldr	r5, [sp, #12]
			if (fbdiv < 16) break;
1000974a:	9b02      	ldr	r3, [sp, #8]
1000974c:	9a05      	ldr	r2, [sp, #20]
			fbdiv--;
1000974e:	3d01      	subs	r5, #1
			if (fbdiv < 16) break;
10009750:	1a9b      	subs	r3, r3, r2
			fbdiv--;
10009752:	b2ad      	uxth	r5, r5
			if (fbdiv < 16) break;
10009754:	9302      	str	r3, [sp, #8]
10009756:	2d0f      	cmp	r5, #15
10009758:	d000      	beq.n	1000975c <_Z12FindSysClockmPmS_PtPhS1_+0x228>
1000975a:	e70f      	b.n	1000957c <_Z12FindSysClockmPmS_PtPhS1_+0x48>
	return (*outkhz == reqkhz) && (*outvco == *outkhz * *outpd1 * *outpd2);
1000975c:	4653      	mov	r3, sl
1000975e:	46ca      	mov	sl, r9
10009760:	4699      	mov	r9, r3
10009762:	4653      	mov	r3, sl
10009764:	9a00      	ldr	r2, [sp, #0]
10009766:	681b      	ldr	r3, [r3, #0]
10009768:	2000      	movs	r0, #0
1000976a:	429a      	cmp	r2, r3
1000976c:	d10d      	bne.n	1000978a <_Z12FindSysClockmPmS_PtPhS1_+0x256>
1000976e:	9b10      	ldr	r3, [sp, #64]	; 0x40
10009770:	9a11      	ldr	r2, [sp, #68]	; 0x44
10009772:	781b      	ldrb	r3, [r3, #0]
10009774:	7810      	ldrb	r0, [r2, #0]
10009776:	4358      	muls	r0, r3
10009778:	9b00      	ldr	r3, [sp, #0]
1000977a:	4343      	muls	r3, r0
1000977c:	0018      	movs	r0, r3
1000977e:	464b      	mov	r3, r9
10009780:	681b      	ldr	r3, [r3, #0]
10009782:	1ac0      	subs	r0, r0, r3
10009784:	4243      	negs	r3, r0
10009786:	4158      	adcs	r0, r3
10009788:	b2c0      	uxtb	r0, r0

	// find PLL setup
	return vcocalc(reqkhz, input, 400000, 1600000, false,  outkhz, outvco, outfbdiv, outpd1, outpd2);
}
1000978a:	b007      	add	sp, #28
1000978c:	bcf0      	pop	{r4, r5, r6, r7}
1000978e:	46bb      	mov	fp, r7
10009790:	46b2      	mov	sl, r6
10009792:	46a9      	mov	r9, r5
10009794:	46a0      	mov	r8, r4
10009796:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009798:	fff9e580 	.word	0xfff9e580
1000979c:	000186a0 	.word	0x000186a0
100097a0:	00061a80 	.word	0x00061a80
100097a4:	00124f80 	.word	0x00124f80

100097a8 <_Z9PWMSndIrqv>:
 *  \ingroup hardware_pwm
 *
 * \param slice_num PWM slice number
 */
static inline void pwm_clear_irq(uint slice_num) {
    pwm_hw->intr = 1u << slice_num;
100097a8:	2102      	movs	r1, #2
100097aa:	23a4      	movs	r3, #164	; 0xa4
100097ac:	4a11      	ldr	r2, [pc, #68]	; (100097f4 <_Z9PWMSndIrqv+0x4c>)
const u8* NextSound = NULL; // next sound to play repeated sound
int NextSoundCnt = 0; // counter of next sound (0=no repeated sound)

// PWM sound interrupt service
void PWMSndIrq()
{
100097ae:	b5f0      	push	{r4, r5, r6, r7, lr}

	// default sample if no sound		
	u8 samp = 128;

	// check if sound is playing
	int cnt = SoundCnt;
100097b0:	4c11      	ldr	r4, [pc, #68]	; (100097f8 <_Z9PWMSndIrqv+0x50>)
100097b2:	50d1      	str	r1, [r2, r3]
100097b4:	6822      	ldr	r2, [r4, #0]
	if (cnt > 0)
100097b6:	317e      	adds	r1, #126	; 0x7e
100097b8:	2a00      	cmp	r2, #0
100097ba:	dd12      	ble.n	100097e2 <_Z9PWMSndIrqv+0x3a>
		// get next sample
		const u8* snd = CurSound;
		samp = *snd;

		// increment pointer accumulator
		int acc = SoundAcc + SoundInc;
100097bc:	4e0f      	ldr	r6, [pc, #60]	; (100097fc <_Z9PWMSndIrqv+0x54>)
100097be:	4f10      	ldr	r7, [pc, #64]	; (10009800 <_Z9PWMSndIrqv+0x58>)
		const u8* snd = CurSound;
100097c0:	4d10      	ldr	r5, [pc, #64]	; (10009804 <_Z9PWMSndIrqv+0x5c>)
		int acc = SoundAcc + SoundInc;
100097c2:	683f      	ldr	r7, [r7, #0]
100097c4:	6833      	ldr	r3, [r6, #0]
		const u8* snd = CurSound;
100097c6:	6828      	ldr	r0, [r5, #0]
		int acc = SoundAcc + SoundInc;
100097c8:	19db      	adds	r3, r3, r7
		int i = acc >> SNDFRAC; // whole increment
100097ca:	129f      	asrs	r7, r3, #10
		snd += i;
		cnt -= i;
		acc &= (SNDINT-1);
100097cc:	059b      	lsls	r3, r3, #22
		samp = *snd;
100097ce:	7801      	ldrb	r1, [r0, #0]
		cnt -= i;
100097d0:	1bd2      	subs	r2, r2, r7
		acc &= (SNDINT-1);
100097d2:	0d9b      	lsrs	r3, r3, #22
		snd += i;
100097d4:	19c0      	adds	r0, r0, r7

		// repeated sample
		if (cnt <= 0)
100097d6:	2a00      	cmp	r2, #0
100097d8:	dd06      	ble.n	100097e8 <_Z9PWMSndIrqv+0x40>
			cnt = NextSoundCnt;
			snd = NextSound;
		}

		// save new pointer
		SoundCnt = cnt;
100097da:	6022      	str	r2, [r4, #0]
		SoundAcc = acc;
		CurSound = snd;
100097dc:	6028      	str	r0, [r5, #0]
		SoundAcc = acc;
100097de:	6033      	str	r3, [r6, #0]
	}

	// write PWM sample
	((u16*)&pwm_hw->slice[PWMSND_SLICE].cc)[PWMSND_CHAN] = samp;
100097e0:	b289      	uxth	r1, r1
100097e2:	4a09      	ldr	r2, [pc, #36]	; (10009808 <_Z9PWMSndIrqv+0x60>)
100097e4:	8011      	strh	r1, [r2, #0]
}
100097e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			cnt = NextSoundCnt;
100097e8:	4a08      	ldr	r2, [pc, #32]	; (1000980c <_Z9PWMSndIrqv+0x64>)
			snd = NextSound;
100097ea:	4809      	ldr	r0, [pc, #36]	; (10009810 <_Z9PWMSndIrqv+0x68>)
			cnt = NextSoundCnt;
100097ec:	6812      	ldr	r2, [r2, #0]
			snd = NextSound;
100097ee:	6800      	ldr	r0, [r0, #0]
100097f0:	e7f3      	b.n	100097da <_Z9PWMSndIrqv+0x32>
100097f2:	46c0      	nop			; (mov r8, r8)
100097f4:	40050000 	.word	0x40050000
100097f8:	2002635c 	.word	0x2002635c
100097fc:	20026358 	.word	0x20026358
10009800:	20002ba8 	.word	0x20002ba8
10009804:	20010b74 	.word	0x20010b74
10009808:	40050022 	.word	0x40050022
1000980c:	2001b454 	.word	0x2001b454
10009810:	2001b450 	.word	0x2001b450

10009814 <_Z10PWMSndInitv>:

// initialize PWM sound output
//  GP19 ... MOSI + sound output (PWM1 B)
void PWMSndInit()
{
10009814:	b570      	push	{r4, r5, r6, lr}
	// set GPIO function to PWM
	gpio_set_function(PWMSND_GPIO, GPIO_FUNC_PWM);

	// set IRQ handler
	SoundCnt = 0;
10009816:	2500      	movs	r5, #0
	gpio_set_function(PWMSND_GPIO, GPIO_FUNC_PWM);
10009818:	2104      	movs	r1, #4
1000981a:	2013      	movs	r0, #19
1000981c:	f7f8 f8ea 	bl	100019f4 <gpio_set_function>
	SoundCnt = 0;
10009820:	4b14      	ldr	r3, [pc, #80]	; (10009874 <_Z10PWMSndInitv+0x60>)
10009822:	22a4      	movs	r2, #164	; 0xa4
10009824:	601d      	str	r5, [r3, #0]
10009826:	2302      	movs	r3, #2
10009828:	4c13      	ldr	r4, [pc, #76]	; (10009878 <_Z10PWMSndInitv+0x64>)
	pwm_clear_irq(PWMSND_SLICE);
	pwm_set_irq_enabled(PWMSND_SLICE, true);
	irq_set_exclusive_handler(PWM_IRQ_WRAP, PWMSndIrq);
1000982a:	2004      	movs	r0, #4
1000982c:	50a3      	str	r3, [r4, r2]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000982e:	4a13      	ldr	r2, [pc, #76]	; (1000987c <_Z10PWMSndInitv+0x68>)
10009830:	4913      	ldr	r1, [pc, #76]	; (10009880 <_Z10PWMSndInitv+0x6c>)
10009832:	6013      	str	r3, [r2, #0]
10009834:	f7f8 f960 	bl	10001af8 <irq_set_exclusive_handler>
	irq_set_enabled(PWM_IRQ_WRAP, true);
10009838:	2101      	movs	r1, #1
1000983a:	2004      	movs	r0, #4
1000983c:	f7f8 f93a 	bl	10001ab4 <irq_set_enabled>
	pwm_config cfg = pwm_get_default_config();

	// set clock divider (INT = 0..255, FRAC = 1/16..15/16)
	//  125 MHz: 125000000/5644800 = 22.144, INT=22, FRAC=2,
	//     real sample rate = 125000000/(22+2/16)/256 = 22069Hz
	pwm_config_set_clkdiv(&cfg, (float)clock_get_hz(clk_sys)/PWMSND_CLOCK + 0.03f); // 0.03f = rounding 0.5/16
10009840:	2005      	movs	r0, #5
10009842:	f7f7 ff87 	bl	10001754 <clock_get_hz>
10009846:	f7f7 fb70 	bl	10000f2a <__wrap___aeabi_ui2f>
1000984a:	490e      	ldr	r1, [pc, #56]	; (10009884 <_Z10PWMSndInitv+0x70>)
1000984c:	f7f7 fb19 	bl	10000e82 <__wrap___aeabi_fdiv>
10009850:	490d      	ldr	r1, [pc, #52]	; (10009888 <_Z10PWMSndInitv+0x74>)
10009852:	f7f7 fb13 	bl	10000e7c <__wrap___aeabi_fadd>
    c->div = (uint32_t)(div * (float)(1u << PWM_CH1_DIV_INT_LSB));
10009856:	2183      	movs	r1, #131	; 0x83
10009858:	05c9      	lsls	r1, r1, #23
1000985a:	f7f7 fb15 	bl	10000e88 <__wrap___aeabi_fmul>
1000985e:	f7f7 fbbd 	bl	10000fdc <__wrap___aeabi_f2uiz>
    pwm_hw->slice[slice_num].top = c->top;
10009862:	23ff      	movs	r3, #255	; 0xff
    pwm_hw->slice[slice_num].csr = 0;
10009864:	6165      	str	r5, [r4, #20]
    pwm_hw->slice[slice_num].ctr = PWM_CH0_CTR_RESET;
10009866:	61e5      	str	r5, [r4, #28]
    pwm_hw->slice[slice_num].cc = PWM_CH0_CC_RESET;
10009868:	6225      	str	r5, [r4, #32]
    pwm_hw->slice[slice_num].top = c->top;
1000986a:	6263      	str	r3, [r4, #36]	; 0x24
    pwm_hw->slice[slice_num].csr = c->csr | (!!start << PWM_CH0_CSR_EN_LSB);
1000986c:	3bfe      	subs	r3, #254	; 0xfe
    pwm_hw->slice[slice_num].div = c->div;
1000986e:	61a0      	str	r0, [r4, #24]
    pwm_hw->slice[slice_num].csr = c->csr | (!!start << PWM_CH0_CSR_EN_LSB);
10009870:	6163      	str	r3, [r4, #20]
	// set period to 256 cycles
	pwm_config_set_wrap(&cfg, PWMSND_TOP);

	// start PWM
	pwm_init(PWMSND_SLICE, &cfg, True);
}
10009872:	bd70      	pop	{r4, r5, r6, pc}
10009874:	2002635c 	.word	0x2002635c
10009878:	40050000 	.word	0x40050000
1000987c:	400520a8 	.word	0x400520a8
10009880:	100097a9 	.word	0x100097a9
10009884:	4aac4400 	.word	0x4aac4400
10009888:	3cf5c28f 	.word	0x3cf5c28f

1000988c <_Z9PlaySoundPKhihf>:
//  snd = pointer to sound
//  len = length of sound in number of samples
//  speed = relative speed (1=normal)
//  rep = True to repeat sample
void PlaySound(const u8* snd, int len, Bool rep /* = False */, float speed /* = 1.0f */)
{
1000988c:	b570      	push	{r4, r5, r6, lr}
1000988e:	0005      	movs	r5, r0
10009890:	000c      	movs	r4, r1
10009892:	1c18      	adds	r0, r3, #0
10009894:	f3bf 8f5f 	dmb	sy
	// stop current sound
	__dmb();
	SoundCnt = 0;
10009898:	2300      	movs	r3, #0
1000989a:	4e11      	ldr	r6, [pc, #68]	; (100098e0 <_Z9PlaySoundPKhihf+0x54>)
1000989c:	6033      	str	r3, [r6, #0]
1000989e:	f3bf 8f5f 	dmb	sy
	__dmb();

	// repeated sound
	NextSoundCnt = 0;
100098a2:	4910      	ldr	r1, [pc, #64]	; (100098e4 <_Z9PlaySoundPKhihf+0x58>)
100098a4:	600b      	str	r3, [r1, #0]
	if (rep)
100098a6:	2a00      	cmp	r2, #0
100098a8:	d002      	beq.n	100098b0 <_Z9PlaySoundPKhihf+0x24>
	{
		NextSound = snd;
100098aa:	4b0f      	ldr	r3, [pc, #60]	; (100098e8 <_Z9PlaySoundPKhihf+0x5c>)
		NextSoundCnt = len;
100098ac:	600c      	str	r4, [r1, #0]
		NextSound = snd;
100098ae:	601d      	str	r5, [r3, #0]
	}

	// sound speed
	SoundInc = (int)(SNDINT*speed + 0.5f);
100098b0:	2189      	movs	r1, #137	; 0x89
100098b2:	05c9      	lsls	r1, r1, #23
100098b4:	f7f7 fae8 	bl	10000e88 <__wrap___aeabi_fmul>
100098b8:	21fc      	movs	r1, #252	; 0xfc
100098ba:	0589      	lsls	r1, r1, #22
100098bc:	f7f7 fade 	bl	10000e7c <__wrap___aeabi_fadd>
100098c0:	f7f7 fb5a 	bl	10000f78 <__wrap___aeabi_f2iz>
	SoundAcc = 0;
100098c4:	2200      	movs	r2, #0
	SoundInc = (int)(SNDINT*speed + 0.5f);
100098c6:	4b09      	ldr	r3, [pc, #36]	; (100098ec <_Z9PlaySoundPKhihf+0x60>)
100098c8:	6018      	str	r0, [r3, #0]
	SoundAcc = 0;
100098ca:	4b09      	ldr	r3, [pc, #36]	; (100098f0 <_Z9PlaySoundPKhihf+0x64>)
100098cc:	601a      	str	r2, [r3, #0]

	// start current sound
	CurSound = snd;
100098ce:	4b09      	ldr	r3, [pc, #36]	; (100098f4 <_Z9PlaySoundPKhihf+0x68>)
100098d0:	601d      	str	r5, [r3, #0]
100098d2:	f3bf 8f5f 	dmb	sy
	__dmb();
	SoundCnt = len;
100098d6:	6034      	str	r4, [r6, #0]
100098d8:	f3bf 8f5f 	dmb	sy
	__dmb();
}
100098dc:	bd70      	pop	{r4, r5, r6, pc}
100098de:	46c0      	nop			; (mov r8, r8)
100098e0:	2002635c 	.word	0x2002635c
100098e4:	2001b454 	.word	0x2001b454
100098e8:	2001b450 	.word	0x2001b450
100098ec:	20002ba8 	.word	0x20002ba8
100098f0:	20026358 	.word	0x20026358
100098f4:	20010b74 	.word	0x20010b74

100098f8 <_Z9StopSoundv>:
100098f8:	f3bf 8f5f 	dmb	sy

// stop playing sound
void StopSound()
{
	__dmb();
	SoundCnt = 0;
100098fc:	2200      	movs	r2, #0
100098fe:	4b02      	ldr	r3, [pc, #8]	; (10009908 <_Z9StopSoundv+0x10>)
10009900:	601a      	str	r2, [r3, #0]
10009902:	f3bf 8f5f 	dmb	sy
	__dmb();
}
10009906:	4770      	bx	lr
10009908:	2002635c 	.word	0x2002635c

1000990c <_Z10SpeedSoundf>:

// update sound speed (1=normal speed)
void SpeedSound(float speed)
{
	SoundInc = (int)(SNDINT*speed + 0.5f);
1000990c:	2189      	movs	r1, #137	; 0x89
{
1000990e:	b510      	push	{r4, lr}
	SoundInc = (int)(SNDINT*speed + 0.5f);
10009910:	05c9      	lsls	r1, r1, #23
10009912:	f7f7 fab9 	bl	10000e88 <__wrap___aeabi_fmul>
10009916:	21fc      	movs	r1, #252	; 0xfc
10009918:	0589      	lsls	r1, r1, #22
1000991a:	f7f7 faaf 	bl	10000e7c <__wrap___aeabi_fadd>
1000991e:	f7f7 fb2b 	bl	10000f78 <__wrap___aeabi_f2iz>
10009922:	4b01      	ldr	r3, [pc, #4]	; (10009928 <_Z10SpeedSoundf+0x1c>)
10009924:	6018      	str	r0, [r3, #0]
}
10009926:	bd10      	pop	{r4, pc}
10009928:	20002ba8 	.word	0x20002ba8

1000992c <_Z12PlayingSoundv>:

// check if playing sound
Bool PlayingSound()
{
	return SoundCnt > 0;
1000992c:	4b02      	ldr	r3, [pc, #8]	; (10009938 <_Z12PlayingSoundv+0xc>)
1000992e:	681b      	ldr	r3, [r3, #0]
10009930:	17d8      	asrs	r0, r3, #31
10009932:	1ac0      	subs	r0, r0, r3
10009934:	0fc0      	lsrs	r0, r0, #31
}
10009936:	4770      	bx	lr
10009938:	2002635c 	.word	0x2002635c

1000993c <calloc>:
1000993c:	0003      	movs	r3, r0
1000993e:	b510      	push	{r4, lr}
10009940:	000a      	movs	r2, r1
10009942:	4903      	ldr	r1, [pc, #12]	; (10009950 <calloc+0x14>)
10009944:	6808      	ldr	r0, [r1, #0]
10009946:	0019      	movs	r1, r3
10009948:	f000 f804 	bl	10009954 <_calloc_r>
1000994c:	bd10      	pop	{r4, pc}
1000994e:	46c0      	nop			; (mov r8, r8)
10009950:	20002bac 	.word	0x20002bac

10009954 <_calloc_r>:
10009954:	b570      	push	{r4, r5, r6, lr}
10009956:	0c0b      	lsrs	r3, r1, #16
10009958:	2400      	movs	r4, #0
1000995a:	0c15      	lsrs	r5, r2, #16
1000995c:	2b00      	cmp	r3, #0
1000995e:	d128      	bne.n	100099b2 <_calloc_r+0x5e>
10009960:	2d00      	cmp	r5, #0
10009962:	d137      	bne.n	100099d4 <_calloc_r+0x80>
10009964:	b28b      	uxth	r3, r1
10009966:	b291      	uxth	r1, r2
10009968:	4359      	muls	r1, r3
1000996a:	f000 f851 	bl	10009a10 <_malloc_r>
1000996e:	1e05      	subs	r5, r0, #0
10009970:	d019      	beq.n	100099a6 <_calloc_r+0x52>
10009972:	0003      	movs	r3, r0
10009974:	3b08      	subs	r3, #8
10009976:	685a      	ldr	r2, [r3, #4]
10009978:	2303      	movs	r3, #3
1000997a:	439a      	bics	r2, r3
1000997c:	3a04      	subs	r2, #4
1000997e:	2a24      	cmp	r2, #36	; 0x24
10009980:	d813      	bhi.n	100099aa <_calloc_r+0x56>
10009982:	0003      	movs	r3, r0
10009984:	2a13      	cmp	r2, #19
10009986:	d90a      	bls.n	1000999e <_calloc_r+0x4a>
10009988:	6004      	str	r4, [r0, #0]
1000998a:	6044      	str	r4, [r0, #4]
1000998c:	3308      	adds	r3, #8
1000998e:	2a1b      	cmp	r2, #27
10009990:	d905      	bls.n	1000999e <_calloc_r+0x4a>
10009992:	6084      	str	r4, [r0, #8]
10009994:	60c4      	str	r4, [r0, #12]
10009996:	2a24      	cmp	r2, #36	; 0x24
10009998:	d025      	beq.n	100099e6 <_calloc_r+0x92>
1000999a:	0003      	movs	r3, r0
1000999c:	3310      	adds	r3, #16
1000999e:	2200      	movs	r2, #0
100099a0:	601a      	str	r2, [r3, #0]
100099a2:	605a      	str	r2, [r3, #4]
100099a4:	609a      	str	r2, [r3, #8]
100099a6:	0028      	movs	r0, r5
100099a8:	bd70      	pop	{r4, r5, r6, pc}
100099aa:	2100      	movs	r1, #0
100099ac:	f7f7 fc02 	bl	100011b4 <__wrap_memset>
100099b0:	e7f9      	b.n	100099a6 <_calloc_r+0x52>
100099b2:	2d00      	cmp	r5, #0
100099b4:	d111      	bne.n	100099da <_calloc_r+0x86>
100099b6:	1c15      	adds	r5, r2, #0
100099b8:	b289      	uxth	r1, r1
100099ba:	b292      	uxth	r2, r2
100099bc:	434a      	muls	r2, r1
100099be:	b2ad      	uxth	r5, r5
100099c0:	b29b      	uxth	r3, r3
100099c2:	436b      	muls	r3, r5
100099c4:	0c11      	lsrs	r1, r2, #16
100099c6:	185b      	adds	r3, r3, r1
100099c8:	0c19      	lsrs	r1, r3, #16
100099ca:	d106      	bne.n	100099da <_calloc_r+0x86>
100099cc:	0419      	lsls	r1, r3, #16
100099ce:	b292      	uxth	r2, r2
100099d0:	4311      	orrs	r1, r2
100099d2:	e7ca      	b.n	1000996a <_calloc_r+0x16>
100099d4:	1c2b      	adds	r3, r5, #0
100099d6:	1c0d      	adds	r5, r1, #0
100099d8:	e7ee      	b.n	100099b8 <_calloc_r+0x64>
100099da:	f000 f809 	bl	100099f0 <__errno>
100099de:	230c      	movs	r3, #12
100099e0:	2500      	movs	r5, #0
100099e2:	6003      	str	r3, [r0, #0]
100099e4:	e7df      	b.n	100099a6 <_calloc_r+0x52>
100099e6:	0003      	movs	r3, r0
100099e8:	6104      	str	r4, [r0, #16]
100099ea:	3318      	adds	r3, #24
100099ec:	6144      	str	r4, [r0, #20]
100099ee:	e7d6      	b.n	1000999e <_calloc_r+0x4a>

100099f0 <__errno>:
100099f0:	4b01      	ldr	r3, [pc, #4]	; (100099f8 <__errno+0x8>)
100099f2:	6818      	ldr	r0, [r3, #0]
100099f4:	4770      	bx	lr
100099f6:	46c0      	nop			; (mov r8, r8)
100099f8:	20002bac 	.word	0x20002bac

100099fc <malloc>:
100099fc:	b510      	push	{r4, lr}
100099fe:	4b03      	ldr	r3, [pc, #12]	; (10009a0c <malloc+0x10>)
10009a00:	0001      	movs	r1, r0
10009a02:	6818      	ldr	r0, [r3, #0]
10009a04:	f000 f804 	bl	10009a10 <_malloc_r>
10009a08:	bd10      	pop	{r4, pc}
10009a0a:	46c0      	nop			; (mov r8, r8)
10009a0c:	20002bac 	.word	0x20002bac

10009a10 <_malloc_r>:
10009a10:	b5f0      	push	{r4, r5, r6, r7, lr}
10009a12:	464e      	mov	r6, r9
10009a14:	4645      	mov	r5, r8
10009a16:	46de      	mov	lr, fp
10009a18:	4657      	mov	r7, sl
10009a1a:	b5e0      	push	{r5, r6, r7, lr}
10009a1c:	000d      	movs	r5, r1
10009a1e:	350b      	adds	r5, #11
10009a20:	0006      	movs	r6, r0
10009a22:	b083      	sub	sp, #12
10009a24:	2d16      	cmp	r5, #22
10009a26:	d822      	bhi.n	10009a6e <_malloc_r+0x5e>
10009a28:	2910      	cmp	r1, #16
10009a2a:	d900      	bls.n	10009a2e <_malloc_r+0x1e>
10009a2c:	e0b2      	b.n	10009b94 <_malloc_r+0x184>
10009a2e:	f000 fab1 	bl	10009f94 <__malloc_lock>
10009a32:	2510      	movs	r5, #16
10009a34:	2318      	movs	r3, #24
10009a36:	2002      	movs	r0, #2
10009a38:	4fcc      	ldr	r7, [pc, #816]	; (10009d6c <_malloc_r+0x35c>)
10009a3a:	18fb      	adds	r3, r7, r3
10009a3c:	001a      	movs	r2, r3
10009a3e:	685c      	ldr	r4, [r3, #4]
10009a40:	3a08      	subs	r2, #8
10009a42:	4294      	cmp	r4, r2
10009a44:	d100      	bne.n	10009a48 <_malloc_r+0x38>
10009a46:	e0b5      	b.n	10009bb4 <_malloc_r+0x1a4>
10009a48:	2303      	movs	r3, #3
10009a4a:	6862      	ldr	r2, [r4, #4]
10009a4c:	439a      	bics	r2, r3
10009a4e:	0013      	movs	r3, r2
10009a50:	68e2      	ldr	r2, [r4, #12]
10009a52:	68a1      	ldr	r1, [r4, #8]
10009a54:	60ca      	str	r2, [r1, #12]
10009a56:	6091      	str	r1, [r2, #8]
10009a58:	2201      	movs	r2, #1
10009a5a:	18e3      	adds	r3, r4, r3
10009a5c:	6859      	ldr	r1, [r3, #4]
10009a5e:	0030      	movs	r0, r6
10009a60:	430a      	orrs	r2, r1
10009a62:	605a      	str	r2, [r3, #4]
10009a64:	f000 fa9e 	bl	10009fa4 <__malloc_unlock>
10009a68:	0020      	movs	r0, r4
10009a6a:	3008      	adds	r0, #8
10009a6c:	e095      	b.n	10009b9a <_malloc_r+0x18a>
10009a6e:	2307      	movs	r3, #7
10009a70:	439d      	bics	r5, r3
10009a72:	d500      	bpl.n	10009a76 <_malloc_r+0x66>
10009a74:	e08e      	b.n	10009b94 <_malloc_r+0x184>
10009a76:	42a9      	cmp	r1, r5
10009a78:	d900      	bls.n	10009a7c <_malloc_r+0x6c>
10009a7a:	e08b      	b.n	10009b94 <_malloc_r+0x184>
10009a7c:	f000 fa8a 	bl	10009f94 <__malloc_lock>
10009a80:	23fc      	movs	r3, #252	; 0xfc
10009a82:	005b      	lsls	r3, r3, #1
10009a84:	429d      	cmp	r5, r3
10009a86:	d200      	bcs.n	10009a8a <_malloc_r+0x7a>
10009a88:	e1a7      	b.n	10009dda <_malloc_r+0x3ca>
10009a8a:	0a68      	lsrs	r0, r5, #9
10009a8c:	d100      	bne.n	10009a90 <_malloc_r+0x80>
10009a8e:	e08b      	b.n	10009ba8 <_malloc_r+0x198>
10009a90:	2804      	cmp	r0, #4
10009a92:	d900      	bls.n	10009a96 <_malloc_r+0x86>
10009a94:	e17a      	b.n	10009d8c <_malloc_r+0x37c>
10009a96:	2338      	movs	r3, #56	; 0x38
10009a98:	4698      	mov	r8, r3
10009a9a:	09a8      	lsrs	r0, r5, #6
10009a9c:	4480      	add	r8, r0
10009a9e:	3039      	adds	r0, #57	; 0x39
10009aa0:	00c1      	lsls	r1, r0, #3
10009aa2:	4fb2      	ldr	r7, [pc, #712]	; (10009d6c <_malloc_r+0x35c>)
10009aa4:	1879      	adds	r1, r7, r1
10009aa6:	684c      	ldr	r4, [r1, #4]
10009aa8:	3908      	subs	r1, #8
10009aaa:	42a1      	cmp	r1, r4
10009aac:	d00e      	beq.n	10009acc <_malloc_r+0xbc>
10009aae:	2303      	movs	r3, #3
10009ab0:	469c      	mov	ip, r3
10009ab2:	e004      	b.n	10009abe <_malloc_r+0xae>
10009ab4:	2a00      	cmp	r2, #0
10009ab6:	dacb      	bge.n	10009a50 <_malloc_r+0x40>
10009ab8:	68e4      	ldr	r4, [r4, #12]
10009aba:	42a1      	cmp	r1, r4
10009abc:	d006      	beq.n	10009acc <_malloc_r+0xbc>
10009abe:	4662      	mov	r2, ip
10009ac0:	6863      	ldr	r3, [r4, #4]
10009ac2:	4393      	bics	r3, r2
10009ac4:	1b5a      	subs	r2, r3, r5
10009ac6:	2a0f      	cmp	r2, #15
10009ac8:	ddf4      	ble.n	10009ab4 <_malloc_r+0xa4>
10009aca:	4640      	mov	r0, r8
10009acc:	003a      	movs	r2, r7
10009ace:	693c      	ldr	r4, [r7, #16]
10009ad0:	3208      	adds	r2, #8
10009ad2:	4294      	cmp	r4, r2
10009ad4:	d100      	bne.n	10009ad8 <_malloc_r+0xc8>
10009ad6:	e078      	b.n	10009bca <_malloc_r+0x1ba>
10009ad8:	2303      	movs	r3, #3
10009ada:	6861      	ldr	r1, [r4, #4]
10009adc:	4399      	bics	r1, r3
10009ade:	4689      	mov	r9, r1
10009ae0:	000b      	movs	r3, r1
10009ae2:	1b49      	subs	r1, r1, r5
10009ae4:	290f      	cmp	r1, #15
10009ae6:	dd00      	ble.n	10009aea <_malloc_r+0xda>
10009ae8:	e17b      	b.n	10009de2 <_malloc_r+0x3d2>
10009aea:	617a      	str	r2, [r7, #20]
10009aec:	613a      	str	r2, [r7, #16]
10009aee:	2900      	cmp	r1, #0
10009af0:	dab2      	bge.n	10009a58 <_malloc_r+0x48>
10009af2:	2280      	movs	r2, #128	; 0x80
10009af4:	0092      	lsls	r2, r2, #2
10009af6:	4591      	cmp	r9, r2
10009af8:	d300      	bcc.n	10009afc <_malloc_r+0xec>
10009afa:	e10f      	b.n	10009d1c <_malloc_r+0x30c>
10009afc:	0959      	lsrs	r1, r3, #5
10009afe:	08da      	lsrs	r2, r3, #3
10009b00:	2301      	movs	r3, #1
10009b02:	408b      	lsls	r3, r1
10009b04:	00d2      	lsls	r2, r2, #3
10009b06:	6879      	ldr	r1, [r7, #4]
10009b08:	19d2      	adds	r2, r2, r7
10009b0a:	430b      	orrs	r3, r1
10009b0c:	6891      	ldr	r1, [r2, #8]
10009b0e:	607b      	str	r3, [r7, #4]
10009b10:	60e2      	str	r2, [r4, #12]
10009b12:	60a1      	str	r1, [r4, #8]
10009b14:	6094      	str	r4, [r2, #8]
10009b16:	60cc      	str	r4, [r1, #12]
10009b18:	2101      	movs	r1, #1
10009b1a:	1082      	asrs	r2, r0, #2
10009b1c:	4091      	lsls	r1, r2
10009b1e:	4299      	cmp	r1, r3
10009b20:	d859      	bhi.n	10009bd6 <_malloc_r+0x1c6>
10009b22:	420b      	tst	r3, r1
10009b24:	d105      	bne.n	10009b32 <_malloc_r+0x122>
10009b26:	2203      	movs	r2, #3
10009b28:	4390      	bics	r0, r2
10009b2a:	0049      	lsls	r1, r1, #1
10009b2c:	3004      	adds	r0, #4
10009b2e:	420b      	tst	r3, r1
10009b30:	d0fb      	beq.n	10009b2a <_malloc_r+0x11a>
10009b32:	2303      	movs	r3, #3
10009b34:	4698      	mov	r8, r3
10009b36:	00c3      	lsls	r3, r0, #3
10009b38:	4699      	mov	r9, r3
10009b3a:	44b9      	add	r9, r7
10009b3c:	46cc      	mov	ip, r9
10009b3e:	4682      	mov	sl, r0
10009b40:	4663      	mov	r3, ip
10009b42:	68dc      	ldr	r4, [r3, #12]
10009b44:	45a4      	cmp	ip, r4
10009b46:	d107      	bne.n	10009b58 <_malloc_r+0x148>
10009b48:	e12c      	b.n	10009da4 <_malloc_r+0x394>
10009b4a:	2a00      	cmp	r2, #0
10009b4c:	db00      	blt.n	10009b50 <_malloc_r+0x140>
10009b4e:	e135      	b.n	10009dbc <_malloc_r+0x3ac>
10009b50:	68e4      	ldr	r4, [r4, #12]
10009b52:	45a4      	cmp	ip, r4
10009b54:	d100      	bne.n	10009b58 <_malloc_r+0x148>
10009b56:	e125      	b.n	10009da4 <_malloc_r+0x394>
10009b58:	4642      	mov	r2, r8
10009b5a:	6863      	ldr	r3, [r4, #4]
10009b5c:	4393      	bics	r3, r2
10009b5e:	1b5a      	subs	r2, r3, r5
10009b60:	2a0f      	cmp	r2, #15
10009b62:	ddf2      	ble.n	10009b4a <_malloc_r+0x13a>
10009b64:	2001      	movs	r0, #1
10009b66:	4680      	mov	r8, r0
10009b68:	1961      	adds	r1, r4, r5
10009b6a:	4305      	orrs	r5, r0
10009b6c:	6065      	str	r5, [r4, #4]
10009b6e:	68a0      	ldr	r0, [r4, #8]
10009b70:	68e5      	ldr	r5, [r4, #12]
10009b72:	3708      	adds	r7, #8
10009b74:	60c5      	str	r5, [r0, #12]
10009b76:	60a8      	str	r0, [r5, #8]
10009b78:	4640      	mov	r0, r8
10009b7a:	4310      	orrs	r0, r2
10009b7c:	60f9      	str	r1, [r7, #12]
10009b7e:	60b9      	str	r1, [r7, #8]
10009b80:	6048      	str	r0, [r1, #4]
10009b82:	60cf      	str	r7, [r1, #12]
10009b84:	0030      	movs	r0, r6
10009b86:	608f      	str	r7, [r1, #8]
10009b88:	50e2      	str	r2, [r4, r3]
10009b8a:	f000 fa0b 	bl	10009fa4 <__malloc_unlock>
10009b8e:	0020      	movs	r0, r4
10009b90:	3008      	adds	r0, #8
10009b92:	e002      	b.n	10009b9a <_malloc_r+0x18a>
10009b94:	230c      	movs	r3, #12
10009b96:	2000      	movs	r0, #0
10009b98:	6033      	str	r3, [r6, #0]
10009b9a:	b003      	add	sp, #12
10009b9c:	bcf0      	pop	{r4, r5, r6, r7}
10009b9e:	46bb      	mov	fp, r7
10009ba0:	46b2      	mov	sl, r6
10009ba2:	46a9      	mov	r9, r5
10009ba4:	46a0      	mov	r8, r4
10009ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009ba8:	2180      	movs	r1, #128	; 0x80
10009baa:	233f      	movs	r3, #63	; 0x3f
10009bac:	2040      	movs	r0, #64	; 0x40
10009bae:	4698      	mov	r8, r3
10009bb0:	0089      	lsls	r1, r1, #2
10009bb2:	e776      	b.n	10009aa2 <_malloc_r+0x92>
10009bb4:	68dc      	ldr	r4, [r3, #12]
10009bb6:	3002      	adds	r0, #2
10009bb8:	42a3      	cmp	r3, r4
10009bba:	d000      	beq.n	10009bbe <_malloc_r+0x1ae>
10009bbc:	e744      	b.n	10009a48 <_malloc_r+0x38>
10009bbe:	003a      	movs	r2, r7
10009bc0:	693c      	ldr	r4, [r7, #16]
10009bc2:	3208      	adds	r2, #8
10009bc4:	4294      	cmp	r4, r2
10009bc6:	d000      	beq.n	10009bca <_malloc_r+0x1ba>
10009bc8:	e786      	b.n	10009ad8 <_malloc_r+0xc8>
10009bca:	2101      	movs	r1, #1
10009bcc:	687b      	ldr	r3, [r7, #4]
10009bce:	1082      	asrs	r2, r0, #2
10009bd0:	4091      	lsls	r1, r2
10009bd2:	4299      	cmp	r1, r3
10009bd4:	d9a5      	bls.n	10009b22 <_malloc_r+0x112>
10009bd6:	2303      	movs	r3, #3
10009bd8:	68bc      	ldr	r4, [r7, #8]
10009bda:	6862      	ldr	r2, [r4, #4]
10009bdc:	439a      	bics	r2, r3
10009bde:	4691      	mov	r9, r2
10009be0:	4295      	cmp	r5, r2
10009be2:	d803      	bhi.n	10009bec <_malloc_r+0x1dc>
10009be4:	1b53      	subs	r3, r2, r5
10009be6:	2b0f      	cmp	r3, #15
10009be8:	dd00      	ble.n	10009bec <_malloc_r+0x1dc>
10009bea:	e089      	b.n	10009d00 <_malloc_r+0x2f0>
10009bec:	0023      	movs	r3, r4
10009bee:	444b      	add	r3, r9
10009bf0:	4a5f      	ldr	r2, [pc, #380]	; (10009d70 <_malloc_r+0x360>)
10009bf2:	9301      	str	r3, [sp, #4]
10009bf4:	4b5f      	ldr	r3, [pc, #380]	; (10009d74 <_malloc_r+0x364>)
10009bf6:	4693      	mov	fp, r2
10009bf8:	681b      	ldr	r3, [r3, #0]
10009bfa:	6812      	ldr	r2, [r2, #0]
10009bfc:	18eb      	adds	r3, r5, r3
10009bfe:	3201      	adds	r2, #1
10009c00:	d100      	bne.n	10009c04 <_malloc_r+0x1f4>
10009c02:	e13d      	b.n	10009e80 <_malloc_r+0x470>
10009c04:	4a5c      	ldr	r2, [pc, #368]	; (10009d78 <_malloc_r+0x368>)
10009c06:	4694      	mov	ip, r2
10009c08:	4463      	add	r3, ip
10009c0a:	0b1b      	lsrs	r3, r3, #12
10009c0c:	031b      	lsls	r3, r3, #12
10009c0e:	9300      	str	r3, [sp, #0]
10009c10:	0030      	movs	r0, r6
10009c12:	9900      	ldr	r1, [sp, #0]
10009c14:	f000 f9ce 	bl	10009fb4 <_sbrk_r>
10009c18:	0003      	movs	r3, r0
10009c1a:	4680      	mov	r8, r0
10009c1c:	3301      	adds	r3, #1
10009c1e:	d100      	bne.n	10009c22 <_malloc_r+0x212>
10009c20:	e0fa      	b.n	10009e18 <_malloc_r+0x408>
10009c22:	9b01      	ldr	r3, [sp, #4]
10009c24:	4283      	cmp	r3, r0
10009c26:	d900      	bls.n	10009c2a <_malloc_r+0x21a>
10009c28:	e0f4      	b.n	10009e14 <_malloc_r+0x404>
10009c2a:	4b54      	ldr	r3, [pc, #336]	; (10009d7c <_malloc_r+0x36c>)
10009c2c:	9800      	ldr	r0, [sp, #0]
10009c2e:	001a      	movs	r2, r3
10009c30:	469a      	mov	sl, r3
10009c32:	6812      	ldr	r2, [r2, #0]
10009c34:	0003      	movs	r3, r0
10009c36:	4694      	mov	ip, r2
10009c38:	4651      	mov	r1, sl
10009c3a:	4463      	add	r3, ip
10009c3c:	600b      	str	r3, [r1, #0]
10009c3e:	9901      	ldr	r1, [sp, #4]
10009c40:	001a      	movs	r2, r3
10009c42:	4541      	cmp	r1, r8
10009c44:	d100      	bne.n	10009c48 <_malloc_r+0x238>
10009c46:	e151      	b.n	10009eec <_malloc_r+0x4dc>
10009c48:	465b      	mov	r3, fp
10009c4a:	681b      	ldr	r3, [r3, #0]
10009c4c:	3301      	adds	r3, #1
10009c4e:	d100      	bne.n	10009c52 <_malloc_r+0x242>
10009c50:	e156      	b.n	10009f00 <_malloc_r+0x4f0>
10009c52:	4643      	mov	r3, r8
10009c54:	9901      	ldr	r1, [sp, #4]
10009c56:	1a5b      	subs	r3, r3, r1
10009c58:	189a      	adds	r2, r3, r2
10009c5a:	4653      	mov	r3, sl
10009c5c:	601a      	str	r2, [r3, #0]
10009c5e:	2307      	movs	r3, #7
10009c60:	4642      	mov	r2, r8
10009c62:	4641      	mov	r1, r8
10009c64:	401a      	ands	r2, r3
10009c66:	9201      	str	r2, [sp, #4]
10009c68:	4219      	tst	r1, r3
10009c6a:	d100      	bne.n	10009c6e <_malloc_r+0x25e>
10009c6c:	e112      	b.n	10009e94 <_malloc_r+0x484>
10009c6e:	2308      	movs	r3, #8
10009c70:	4698      	mov	r8, r3
10009c72:	1a88      	subs	r0, r1, r2
10009c74:	4b42      	ldr	r3, [pc, #264]	; (10009d80 <_malloc_r+0x370>)
10009c76:	9900      	ldr	r1, [sp, #0]
10009c78:	4480      	add	r8, r0
10009c7a:	4441      	add	r1, r8
10009c7c:	1a9b      	subs	r3, r3, r2
10009c7e:	1a5b      	subs	r3, r3, r1
10009c80:	051b      	lsls	r3, r3, #20
10009c82:	0d1b      	lsrs	r3, r3, #20
10009c84:	9100      	str	r1, [sp, #0]
10009c86:	0030      	movs	r0, r6
10009c88:	0019      	movs	r1, r3
10009c8a:	469b      	mov	fp, r3
10009c8c:	f000 f992 	bl	10009fb4 <_sbrk_r>
10009c90:	1c43      	adds	r3, r0, #1
10009c92:	d100      	bne.n	10009c96 <_malloc_r+0x286>
10009c94:	e150      	b.n	10009f38 <_malloc_r+0x528>
10009c96:	4643      	mov	r3, r8
10009c98:	1ac0      	subs	r0, r0, r3
10009c9a:	0003      	movs	r3, r0
10009c9c:	445b      	add	r3, fp
10009c9e:	9300      	str	r3, [sp, #0]
10009ca0:	4653      	mov	r3, sl
10009ca2:	4652      	mov	r2, sl
10009ca4:	681b      	ldr	r3, [r3, #0]
10009ca6:	2101      	movs	r1, #1
10009ca8:	445b      	add	r3, fp
10009caa:	6013      	str	r3, [r2, #0]
10009cac:	4642      	mov	r2, r8
10009cae:	4640      	mov	r0, r8
10009cb0:	60ba      	str	r2, [r7, #8]
10009cb2:	9a00      	ldr	r2, [sp, #0]
10009cb4:	430a      	orrs	r2, r1
10009cb6:	6042      	str	r2, [r0, #4]
10009cb8:	42bc      	cmp	r4, r7
10009cba:	d100      	bne.n	10009cbe <_malloc_r+0x2ae>
10009cbc:	e124      	b.n	10009f08 <_malloc_r+0x4f8>
10009cbe:	464a      	mov	r2, r9
10009cc0:	2a0f      	cmp	r2, #15
10009cc2:	d800      	bhi.n	10009cc6 <_malloc_r+0x2b6>
10009cc4:	e122      	b.n	10009f0c <_malloc_r+0x4fc>
10009cc6:	2007      	movs	r0, #7
10009cc8:	3a0c      	subs	r2, #12
10009cca:	4382      	bics	r2, r0
10009ccc:	6860      	ldr	r0, [r4, #4]
10009cce:	4001      	ands	r1, r0
10009cd0:	2005      	movs	r0, #5
10009cd2:	4311      	orrs	r1, r2
10009cd4:	6061      	str	r1, [r4, #4]
10009cd6:	18a1      	adds	r1, r4, r2
10009cd8:	6048      	str	r0, [r1, #4]
10009cda:	6088      	str	r0, [r1, #8]
10009cdc:	2a0f      	cmp	r2, #15
10009cde:	d900      	bls.n	10009ce2 <_malloc_r+0x2d2>
10009ce0:	e135      	b.n	10009f4e <_malloc_r+0x53e>
10009ce2:	4642      	mov	r2, r8
10009ce4:	4644      	mov	r4, r8
10009ce6:	6852      	ldr	r2, [r2, #4]
10009ce8:	4926      	ldr	r1, [pc, #152]	; (10009d84 <_malloc_r+0x374>)
10009cea:	6808      	ldr	r0, [r1, #0]
10009cec:	4298      	cmp	r0, r3
10009cee:	d200      	bcs.n	10009cf2 <_malloc_r+0x2e2>
10009cf0:	600b      	str	r3, [r1, #0]
10009cf2:	4925      	ldr	r1, [pc, #148]	; (10009d88 <_malloc_r+0x378>)
10009cf4:	6808      	ldr	r0, [r1, #0]
10009cf6:	4298      	cmp	r0, r3
10009cf8:	d300      	bcc.n	10009cfc <_malloc_r+0x2ec>
10009cfa:	e08f      	b.n	10009e1c <_malloc_r+0x40c>
10009cfc:	600b      	str	r3, [r1, #0]
10009cfe:	e08d      	b.n	10009e1c <_malloc_r+0x40c>
10009d00:	2201      	movs	r2, #1
10009d02:	0029      	movs	r1, r5
10009d04:	4313      	orrs	r3, r2
10009d06:	4311      	orrs	r1, r2
10009d08:	1965      	adds	r5, r4, r5
10009d0a:	6061      	str	r1, [r4, #4]
10009d0c:	0030      	movs	r0, r6
10009d0e:	60bd      	str	r5, [r7, #8]
10009d10:	606b      	str	r3, [r5, #4]
10009d12:	f000 f947 	bl	10009fa4 <__malloc_unlock>
10009d16:	0020      	movs	r0, r4
10009d18:	3008      	adds	r0, #8
10009d1a:	e73e      	b.n	10009b9a <_malloc_r+0x18a>
10009d1c:	0a5a      	lsrs	r2, r3, #9
10009d1e:	2a04      	cmp	r2, #4
10009d20:	d972      	bls.n	10009e08 <_malloc_r+0x3f8>
10009d22:	2a14      	cmp	r2, #20
10009d24:	d900      	bls.n	10009d28 <_malloc_r+0x318>
10009d26:	e0c5      	b.n	10009eb4 <_malloc_r+0x4a4>
10009d28:	0011      	movs	r1, r2
10009d2a:	325c      	adds	r2, #92	; 0x5c
10009d2c:	315b      	adds	r1, #91	; 0x5b
10009d2e:	00d2      	lsls	r2, r2, #3
10009d30:	2308      	movs	r3, #8
10009d32:	425b      	negs	r3, r3
10009d34:	469c      	mov	ip, r3
10009d36:	18ba      	adds	r2, r7, r2
10009d38:	4494      	add	ip, r2
10009d3a:	4663      	mov	r3, ip
10009d3c:	689a      	ldr	r2, [r3, #8]
10009d3e:	2303      	movs	r3, #3
10009d40:	4698      	mov	r8, r3
10009d42:	4594      	cmp	ip, r2
10009d44:	d100      	bne.n	10009d48 <_malloc_r+0x338>
10009d46:	e09e      	b.n	10009e86 <_malloc_r+0x476>
10009d48:	4643      	mov	r3, r8
10009d4a:	6851      	ldr	r1, [r2, #4]
10009d4c:	4399      	bics	r1, r3
10009d4e:	4549      	cmp	r1, r9
10009d50:	d902      	bls.n	10009d58 <_malloc_r+0x348>
10009d52:	6892      	ldr	r2, [r2, #8]
10009d54:	4594      	cmp	ip, r2
10009d56:	d1f7      	bne.n	10009d48 <_malloc_r+0x338>
10009d58:	68d3      	ldr	r3, [r2, #12]
10009d5a:	469c      	mov	ip, r3
10009d5c:	687b      	ldr	r3, [r7, #4]
10009d5e:	4661      	mov	r1, ip
10009d60:	60a2      	str	r2, [r4, #8]
10009d62:	60e1      	str	r1, [r4, #12]
10009d64:	608c      	str	r4, [r1, #8]
10009d66:	60d4      	str	r4, [r2, #12]
10009d68:	e6d6      	b.n	10009b18 <_malloc_r+0x108>
10009d6a:	46c0      	nop			; (mov r8, r8)
10009d6c:	20002fd8 	.word	0x20002fd8
10009d70:	200033e0 	.word	0x200033e0
10009d74:	2003d6cc 	.word	0x2003d6cc
10009d78:	0000100f 	.word	0x0000100f
10009d7c:	2003d69c 	.word	0x2003d69c
10009d80:	00001008 	.word	0x00001008
10009d84:	2003d6c4 	.word	0x2003d6c4
10009d88:	2003d6c8 	.word	0x2003d6c8
10009d8c:	2814      	cmp	r0, #20
10009d8e:	d952      	bls.n	10009e36 <_malloc_r+0x426>
10009d90:	2854      	cmp	r0, #84	; 0x54
10009d92:	d900      	bls.n	10009d96 <_malloc_r+0x386>
10009d94:	e096      	b.n	10009ec4 <_malloc_r+0x4b4>
10009d96:	236e      	movs	r3, #110	; 0x6e
10009d98:	4698      	mov	r8, r3
10009d9a:	0b28      	lsrs	r0, r5, #12
10009d9c:	4480      	add	r8, r0
10009d9e:	306f      	adds	r0, #111	; 0x6f
10009da0:	00c1      	lsls	r1, r0, #3
10009da2:	e67e      	b.n	10009aa2 <_malloc_r+0x92>
10009da4:	2308      	movs	r3, #8
10009da6:	469b      	mov	fp, r3
10009da8:	3b07      	subs	r3, #7
10009daa:	44dc      	add	ip, fp
10009dac:	469b      	mov	fp, r3
10009dae:	44da      	add	sl, fp
10009db0:	4643      	mov	r3, r8
10009db2:	4652      	mov	r2, sl
10009db4:	4213      	tst	r3, r2
10009db6:	d000      	beq.n	10009dba <_malloc_r+0x3aa>
10009db8:	e6c2      	b.n	10009b40 <_malloc_r+0x130>
10009dba:	e04c      	b.n	10009e56 <_malloc_r+0x446>
10009dbc:	2201      	movs	r2, #1
10009dbe:	18e3      	adds	r3, r4, r3
10009dc0:	6859      	ldr	r1, [r3, #4]
10009dc2:	0030      	movs	r0, r6
10009dc4:	430a      	orrs	r2, r1
10009dc6:	605a      	str	r2, [r3, #4]
10009dc8:	68e3      	ldr	r3, [r4, #12]
10009dca:	68a2      	ldr	r2, [r4, #8]
10009dcc:	60d3      	str	r3, [r2, #12]
10009dce:	609a      	str	r2, [r3, #8]
10009dd0:	f000 f8e8 	bl	10009fa4 <__malloc_unlock>
10009dd4:	0020      	movs	r0, r4
10009dd6:	3008      	adds	r0, #8
10009dd8:	e6df      	b.n	10009b9a <_malloc_r+0x18a>
10009dda:	002b      	movs	r3, r5
10009ddc:	08e8      	lsrs	r0, r5, #3
10009dde:	3308      	adds	r3, #8
10009de0:	e62a      	b.n	10009a38 <_malloc_r+0x28>
10009de2:	2301      	movs	r3, #1
10009de4:	1960      	adds	r0, r4, r5
10009de6:	431d      	orrs	r5, r3
10009de8:	6065      	str	r5, [r4, #4]
10009dea:	6178      	str	r0, [r7, #20]
10009dec:	6138      	str	r0, [r7, #16]
10009dee:	60c2      	str	r2, [r0, #12]
10009df0:	6082      	str	r2, [r0, #8]
10009df2:	001a      	movs	r2, r3
10009df4:	464b      	mov	r3, r9
10009df6:	430a      	orrs	r2, r1
10009df8:	6042      	str	r2, [r0, #4]
10009dfa:	0030      	movs	r0, r6
10009dfc:	50e1      	str	r1, [r4, r3]
10009dfe:	f000 f8d1 	bl	10009fa4 <__malloc_unlock>
10009e02:	0020      	movs	r0, r4
10009e04:	3008      	adds	r0, #8
10009e06:	e6c8      	b.n	10009b9a <_malloc_r+0x18a>
10009e08:	099a      	lsrs	r2, r3, #6
10009e0a:	0011      	movs	r1, r2
10009e0c:	3239      	adds	r2, #57	; 0x39
10009e0e:	3138      	adds	r1, #56	; 0x38
10009e10:	00d2      	lsls	r2, r2, #3
10009e12:	e78d      	b.n	10009d30 <_malloc_r+0x320>
10009e14:	42bc      	cmp	r4, r7
10009e16:	d060      	beq.n	10009eda <_malloc_r+0x4ca>
10009e18:	68bc      	ldr	r4, [r7, #8]
10009e1a:	6862      	ldr	r2, [r4, #4]
10009e1c:	2303      	movs	r3, #3
10009e1e:	439a      	bics	r2, r3
10009e20:	1b53      	subs	r3, r2, r5
10009e22:	4295      	cmp	r5, r2
10009e24:	d802      	bhi.n	10009e2c <_malloc_r+0x41c>
10009e26:	2b0f      	cmp	r3, #15
10009e28:	dd00      	ble.n	10009e2c <_malloc_r+0x41c>
10009e2a:	e769      	b.n	10009d00 <_malloc_r+0x2f0>
10009e2c:	0030      	movs	r0, r6
10009e2e:	f000 f8b9 	bl	10009fa4 <__malloc_unlock>
10009e32:	2000      	movs	r0, #0
10009e34:	e6b1      	b.n	10009b9a <_malloc_r+0x18a>
10009e36:	235b      	movs	r3, #91	; 0x5b
10009e38:	4698      	mov	r8, r3
10009e3a:	4480      	add	r8, r0
10009e3c:	305c      	adds	r0, #92	; 0x5c
10009e3e:	00c1      	lsls	r1, r0, #3
10009e40:	e62f      	b.n	10009aa2 <_malloc_r+0x92>
10009e42:	2308      	movs	r3, #8
10009e44:	425b      	negs	r3, r3
10009e46:	469c      	mov	ip, r3
10009e48:	44e1      	add	r9, ip
10009e4a:	464b      	mov	r3, r9
10009e4c:	689b      	ldr	r3, [r3, #8]
10009e4e:	3801      	subs	r0, #1
10009e50:	454b      	cmp	r3, r9
10009e52:	d000      	beq.n	10009e56 <_malloc_r+0x446>
10009e54:	e098      	b.n	10009f88 <_malloc_r+0x578>
10009e56:	4643      	mov	r3, r8
10009e58:	4203      	tst	r3, r0
10009e5a:	d1f2      	bne.n	10009e42 <_malloc_r+0x432>
10009e5c:	687b      	ldr	r3, [r7, #4]
10009e5e:	438b      	bics	r3, r1
10009e60:	607b      	str	r3, [r7, #4]
10009e62:	0049      	lsls	r1, r1, #1
10009e64:	4299      	cmp	r1, r3
10009e66:	d900      	bls.n	10009e6a <_malloc_r+0x45a>
10009e68:	e6b5      	b.n	10009bd6 <_malloc_r+0x1c6>
10009e6a:	2900      	cmp	r1, #0
10009e6c:	d104      	bne.n	10009e78 <_malloc_r+0x468>
10009e6e:	e6b2      	b.n	10009bd6 <_malloc_r+0x1c6>
10009e70:	2204      	movs	r2, #4
10009e72:	4694      	mov	ip, r2
10009e74:	0049      	lsls	r1, r1, #1
10009e76:	44e2      	add	sl, ip
10009e78:	420b      	tst	r3, r1
10009e7a:	d0f9      	beq.n	10009e70 <_malloc_r+0x460>
10009e7c:	4650      	mov	r0, sl
10009e7e:	e65a      	b.n	10009b36 <_malloc_r+0x126>
10009e80:	3310      	adds	r3, #16
10009e82:	9300      	str	r3, [sp, #0]
10009e84:	e6c4      	b.n	10009c10 <_malloc_r+0x200>
10009e86:	1089      	asrs	r1, r1, #2
10009e88:	3b02      	subs	r3, #2
10009e8a:	408b      	lsls	r3, r1
10009e8c:	6879      	ldr	r1, [r7, #4]
10009e8e:	430b      	orrs	r3, r1
10009e90:	607b      	str	r3, [r7, #4]
10009e92:	e764      	b.n	10009d5e <_malloc_r+0x34e>
10009e94:	9b00      	ldr	r3, [sp, #0]
10009e96:	0030      	movs	r0, r6
10009e98:	4443      	add	r3, r8
10009e9a:	425b      	negs	r3, r3
10009e9c:	051b      	lsls	r3, r3, #20
10009e9e:	0d1b      	lsrs	r3, r3, #20
10009ea0:	0019      	movs	r1, r3
10009ea2:	469b      	mov	fp, r3
10009ea4:	f000 f886 	bl	10009fb4 <_sbrk_r>
10009ea8:	1c43      	adds	r3, r0, #1
10009eaa:	d000      	beq.n	10009eae <_malloc_r+0x49e>
10009eac:	e6f3      	b.n	10009c96 <_malloc_r+0x286>
10009eae:	2300      	movs	r3, #0
10009eb0:	469b      	mov	fp, r3
10009eb2:	e6f5      	b.n	10009ca0 <_malloc_r+0x290>
10009eb4:	2a54      	cmp	r2, #84	; 0x54
10009eb6:	d82b      	bhi.n	10009f10 <_malloc_r+0x500>
10009eb8:	0b1a      	lsrs	r2, r3, #12
10009eba:	0011      	movs	r1, r2
10009ebc:	326f      	adds	r2, #111	; 0x6f
10009ebe:	316e      	adds	r1, #110	; 0x6e
10009ec0:	00d2      	lsls	r2, r2, #3
10009ec2:	e735      	b.n	10009d30 <_malloc_r+0x320>
10009ec4:	23aa      	movs	r3, #170	; 0xaa
10009ec6:	005b      	lsls	r3, r3, #1
10009ec8:	4298      	cmp	r0, r3
10009eca:	d82b      	bhi.n	10009f24 <_malloc_r+0x514>
10009ecc:	3bdd      	subs	r3, #221	; 0xdd
10009ece:	4698      	mov	r8, r3
10009ed0:	0be8      	lsrs	r0, r5, #15
10009ed2:	4480      	add	r8, r0
10009ed4:	3078      	adds	r0, #120	; 0x78
10009ed6:	00c1      	lsls	r1, r0, #3
10009ed8:	e5e3      	b.n	10009aa2 <_malloc_r+0x92>
10009eda:	4b2c      	ldr	r3, [pc, #176]	; (10009f8c <_malloc_r+0x57c>)
10009edc:	9a00      	ldr	r2, [sp, #0]
10009ede:	469a      	mov	sl, r3
10009ee0:	681b      	ldr	r3, [r3, #0]
10009ee2:	469c      	mov	ip, r3
10009ee4:	4653      	mov	r3, sl
10009ee6:	4462      	add	r2, ip
10009ee8:	601a      	str	r2, [r3, #0]
10009eea:	e6ad      	b.n	10009c48 <_malloc_r+0x238>
10009eec:	0509      	lsls	r1, r1, #20
10009eee:	d000      	beq.n	10009ef2 <_malloc_r+0x4e2>
10009ef0:	e6aa      	b.n	10009c48 <_malloc_r+0x238>
10009ef2:	0002      	movs	r2, r0
10009ef4:	68bc      	ldr	r4, [r7, #8]
10009ef6:	444a      	add	r2, r9
10009ef8:	3101      	adds	r1, #1
10009efa:	430a      	orrs	r2, r1
10009efc:	6062      	str	r2, [r4, #4]
10009efe:	e6f3      	b.n	10009ce8 <_malloc_r+0x2d8>
10009f00:	465b      	mov	r3, fp
10009f02:	4642      	mov	r2, r8
10009f04:	601a      	str	r2, [r3, #0]
10009f06:	e6aa      	b.n	10009c5e <_malloc_r+0x24e>
10009f08:	4644      	mov	r4, r8
10009f0a:	e6ed      	b.n	10009ce8 <_malloc_r+0x2d8>
10009f0c:	6041      	str	r1, [r0, #4]
10009f0e:	e78d      	b.n	10009e2c <_malloc_r+0x41c>
10009f10:	21aa      	movs	r1, #170	; 0xaa
10009f12:	0049      	lsls	r1, r1, #1
10009f14:	428a      	cmp	r2, r1
10009f16:	d824      	bhi.n	10009f62 <_malloc_r+0x552>
10009f18:	0bda      	lsrs	r2, r3, #15
10009f1a:	0011      	movs	r1, r2
10009f1c:	3278      	adds	r2, #120	; 0x78
10009f1e:	3177      	adds	r1, #119	; 0x77
10009f20:	00d2      	lsls	r2, r2, #3
10009f22:	e705      	b.n	10009d30 <_malloc_r+0x320>
10009f24:	4b1a      	ldr	r3, [pc, #104]	; (10009f90 <_malloc_r+0x580>)
10009f26:	4298      	cmp	r0, r3
10009f28:	d824      	bhi.n	10009f74 <_malloc_r+0x564>
10009f2a:	237c      	movs	r3, #124	; 0x7c
10009f2c:	4698      	mov	r8, r3
10009f2e:	0ca8      	lsrs	r0, r5, #18
10009f30:	4480      	add	r8, r0
10009f32:	307d      	adds	r0, #125	; 0x7d
10009f34:	00c1      	lsls	r1, r0, #3
10009f36:	e5b4      	b.n	10009aa2 <_malloc_r+0x92>
10009f38:	9a00      	ldr	r2, [sp, #0]
10009f3a:	9b01      	ldr	r3, [sp, #4]
10009f3c:	4694      	mov	ip, r2
10009f3e:	4642      	mov	r2, r8
10009f40:	3b08      	subs	r3, #8
10009f42:	4463      	add	r3, ip
10009f44:	1a9b      	subs	r3, r3, r2
10009f46:	9300      	str	r3, [sp, #0]
10009f48:	2300      	movs	r3, #0
10009f4a:	469b      	mov	fp, r3
10009f4c:	e6a8      	b.n	10009ca0 <_malloc_r+0x290>
10009f4e:	0021      	movs	r1, r4
10009f50:	0030      	movs	r0, r6
10009f52:	3108      	adds	r1, #8
10009f54:	f000 f8bc 	bl	1000a0d0 <_free_r>
10009f58:	4653      	mov	r3, sl
10009f5a:	68bc      	ldr	r4, [r7, #8]
10009f5c:	681b      	ldr	r3, [r3, #0]
10009f5e:	6862      	ldr	r2, [r4, #4]
10009f60:	e6c2      	b.n	10009ce8 <_malloc_r+0x2d8>
10009f62:	490b      	ldr	r1, [pc, #44]	; (10009f90 <_malloc_r+0x580>)
10009f64:	428a      	cmp	r2, r1
10009f66:	d80b      	bhi.n	10009f80 <_malloc_r+0x570>
10009f68:	0c9a      	lsrs	r2, r3, #18
10009f6a:	0011      	movs	r1, r2
10009f6c:	327d      	adds	r2, #125	; 0x7d
10009f6e:	317c      	adds	r1, #124	; 0x7c
10009f70:	00d2      	lsls	r2, r2, #3
10009f72:	e6dd      	b.n	10009d30 <_malloc_r+0x320>
10009f74:	21fe      	movs	r1, #254	; 0xfe
10009f76:	237e      	movs	r3, #126	; 0x7e
10009f78:	207f      	movs	r0, #127	; 0x7f
10009f7a:	4698      	mov	r8, r3
10009f7c:	0089      	lsls	r1, r1, #2
10009f7e:	e590      	b.n	10009aa2 <_malloc_r+0x92>
10009f80:	22fe      	movs	r2, #254	; 0xfe
10009f82:	217e      	movs	r1, #126	; 0x7e
10009f84:	0092      	lsls	r2, r2, #2
10009f86:	e6d3      	b.n	10009d30 <_malloc_r+0x320>
10009f88:	687b      	ldr	r3, [r7, #4]
10009f8a:	e76a      	b.n	10009e62 <_malloc_r+0x452>
10009f8c:	2003d69c 	.word	0x2003d69c
10009f90:	00000554 	.word	0x00000554

10009f94 <__malloc_lock>:
10009f94:	b510      	push	{r4, lr}
10009f96:	4802      	ldr	r0, [pc, #8]	; (10009fa0 <__malloc_lock+0xc>)
10009f98:	f000 f97c 	bl	1000a294 <__retarget_lock_acquire_recursive>
10009f9c:	bd10      	pop	{r4, pc}
10009f9e:	46c0      	nop			; (mov r8, r8)
10009fa0:	2003d698 	.word	0x2003d698

10009fa4 <__malloc_unlock>:
10009fa4:	b510      	push	{r4, lr}
10009fa6:	4802      	ldr	r0, [pc, #8]	; (10009fb0 <__malloc_unlock+0xc>)
10009fa8:	f000 f976 	bl	1000a298 <__retarget_lock_release_recursive>
10009fac:	bd10      	pop	{r4, pc}
10009fae:	46c0      	nop			; (mov r8, r8)
10009fb0:	2003d698 	.word	0x2003d698

10009fb4 <_sbrk_r>:
10009fb4:	2300      	movs	r3, #0
10009fb6:	b570      	push	{r4, r5, r6, lr}
10009fb8:	4d06      	ldr	r5, [pc, #24]	; (10009fd4 <_sbrk_r+0x20>)
10009fba:	0004      	movs	r4, r0
10009fbc:	0008      	movs	r0, r1
10009fbe:	602b      	str	r3, [r5, #0]
10009fc0:	f7f8 fb68 	bl	10002694 <_sbrk>
10009fc4:	1c43      	adds	r3, r0, #1
10009fc6:	d000      	beq.n	10009fca <_sbrk_r+0x16>
10009fc8:	bd70      	pop	{r4, r5, r6, pc}
10009fca:	682b      	ldr	r3, [r5, #0]
10009fcc:	2b00      	cmp	r3, #0
10009fce:	d0fb      	beq.n	10009fc8 <_sbrk_r+0x14>
10009fd0:	6023      	str	r3, [r4, #0]
10009fd2:	e7f9      	b.n	10009fc8 <_sbrk_r+0x14>
10009fd4:	2003dc74 	.word	0x2003dc74

10009fd8 <strlen>:
10009fd8:	b510      	push	{r4, lr}
10009fda:	0783      	lsls	r3, r0, #30
10009fdc:	d00a      	beq.n	10009ff4 <strlen+0x1c>
10009fde:	0003      	movs	r3, r0
10009fe0:	2103      	movs	r1, #3
10009fe2:	e002      	b.n	10009fea <strlen+0x12>
10009fe4:	3301      	adds	r3, #1
10009fe6:	420b      	tst	r3, r1
10009fe8:	d005      	beq.n	10009ff6 <strlen+0x1e>
10009fea:	781a      	ldrb	r2, [r3, #0]
10009fec:	2a00      	cmp	r2, #0
10009fee:	d1f9      	bne.n	10009fe4 <strlen+0xc>
10009ff0:	1a18      	subs	r0, r3, r0
10009ff2:	bd10      	pop	{r4, pc}
10009ff4:	0003      	movs	r3, r0
10009ff6:	6819      	ldr	r1, [r3, #0]
10009ff8:	4a0c      	ldr	r2, [pc, #48]	; (1000a02c <strlen+0x54>)
10009ffa:	4c0d      	ldr	r4, [pc, #52]	; (1000a030 <strlen+0x58>)
10009ffc:	188a      	adds	r2, r1, r2
10009ffe:	438a      	bics	r2, r1
1000a000:	4222      	tst	r2, r4
1000a002:	d10f      	bne.n	1000a024 <strlen+0x4c>
1000a004:	6859      	ldr	r1, [r3, #4]
1000a006:	4a09      	ldr	r2, [pc, #36]	; (1000a02c <strlen+0x54>)
1000a008:	3304      	adds	r3, #4
1000a00a:	188a      	adds	r2, r1, r2
1000a00c:	438a      	bics	r2, r1
1000a00e:	4222      	tst	r2, r4
1000a010:	d108      	bne.n	1000a024 <strlen+0x4c>
1000a012:	6859      	ldr	r1, [r3, #4]
1000a014:	4a05      	ldr	r2, [pc, #20]	; (1000a02c <strlen+0x54>)
1000a016:	3304      	adds	r3, #4
1000a018:	188a      	adds	r2, r1, r2
1000a01a:	438a      	bics	r2, r1
1000a01c:	4222      	tst	r2, r4
1000a01e:	d0f1      	beq.n	1000a004 <strlen+0x2c>
1000a020:	e000      	b.n	1000a024 <strlen+0x4c>
1000a022:	3301      	adds	r3, #1
1000a024:	781a      	ldrb	r2, [r3, #0]
1000a026:	2a00      	cmp	r2, #0
1000a028:	d1fb      	bne.n	1000a022 <strlen+0x4a>
1000a02a:	e7e1      	b.n	10009ff0 <strlen+0x18>
1000a02c:	fefefeff 	.word	0xfefefeff
1000a030:	80808080 	.word	0x80808080

1000a034 <_malloc_trim_r>:
1000a034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a036:	000c      	movs	r4, r1
1000a038:	0005      	movs	r5, r0
1000a03a:	f7ff ffab 	bl	10009f94 <__malloc_lock>
1000a03e:	4f20      	ldr	r7, [pc, #128]	; (1000a0c0 <_malloc_trim_r+0x8c>)
1000a040:	68bb      	ldr	r3, [r7, #8]
1000a042:	685e      	ldr	r6, [r3, #4]
1000a044:	2303      	movs	r3, #3
1000a046:	439e      	bics	r6, r3
1000a048:	4b1e      	ldr	r3, [pc, #120]	; (1000a0c4 <_malloc_trim_r+0x90>)
1000a04a:	1b34      	subs	r4, r6, r4
1000a04c:	469c      	mov	ip, r3
1000a04e:	4464      	add	r4, ip
1000a050:	0b24      	lsrs	r4, r4, #12
1000a052:	3c01      	subs	r4, #1
1000a054:	3311      	adds	r3, #17
1000a056:	0324      	lsls	r4, r4, #12
1000a058:	429c      	cmp	r4, r3
1000a05a:	db07      	blt.n	1000a06c <_malloc_trim_r+0x38>
1000a05c:	2100      	movs	r1, #0
1000a05e:	0028      	movs	r0, r5
1000a060:	f7ff ffa8 	bl	10009fb4 <_sbrk_r>
1000a064:	68bb      	ldr	r3, [r7, #8]
1000a066:	199b      	adds	r3, r3, r6
1000a068:	4298      	cmp	r0, r3
1000a06a:	d004      	beq.n	1000a076 <_malloc_trim_r+0x42>
1000a06c:	0028      	movs	r0, r5
1000a06e:	f7ff ff99 	bl	10009fa4 <__malloc_unlock>
1000a072:	2000      	movs	r0, #0
1000a074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a076:	0028      	movs	r0, r5
1000a078:	4261      	negs	r1, r4
1000a07a:	f7ff ff9b 	bl	10009fb4 <_sbrk_r>
1000a07e:	1c43      	adds	r3, r0, #1
1000a080:	d00d      	beq.n	1000a09e <_malloc_trim_r+0x6a>
1000a082:	2201      	movs	r2, #1
1000a084:	68bb      	ldr	r3, [r7, #8]
1000a086:	1b36      	subs	r6, r6, r4
1000a088:	4316      	orrs	r6, r2
1000a08a:	605e      	str	r6, [r3, #4]
1000a08c:	4b0e      	ldr	r3, [pc, #56]	; (1000a0c8 <_malloc_trim_r+0x94>)
1000a08e:	0028      	movs	r0, r5
1000a090:	681a      	ldr	r2, [r3, #0]
1000a092:	1b14      	subs	r4, r2, r4
1000a094:	601c      	str	r4, [r3, #0]
1000a096:	f7ff ff85 	bl	10009fa4 <__malloc_unlock>
1000a09a:	2001      	movs	r0, #1
1000a09c:	e7ea      	b.n	1000a074 <_malloc_trim_r+0x40>
1000a09e:	2100      	movs	r1, #0
1000a0a0:	0028      	movs	r0, r5
1000a0a2:	f7ff ff87 	bl	10009fb4 <_sbrk_r>
1000a0a6:	68ba      	ldr	r2, [r7, #8]
1000a0a8:	1a83      	subs	r3, r0, r2
1000a0aa:	2b0f      	cmp	r3, #15
1000a0ac:	ddde      	ble.n	1000a06c <_malloc_trim_r+0x38>
1000a0ae:	4907      	ldr	r1, [pc, #28]	; (1000a0cc <_malloc_trim_r+0x98>)
1000a0b0:	6809      	ldr	r1, [r1, #0]
1000a0b2:	1a40      	subs	r0, r0, r1
1000a0b4:	4904      	ldr	r1, [pc, #16]	; (1000a0c8 <_malloc_trim_r+0x94>)
1000a0b6:	6008      	str	r0, [r1, #0]
1000a0b8:	2101      	movs	r1, #1
1000a0ba:	430b      	orrs	r3, r1
1000a0bc:	6053      	str	r3, [r2, #4]
1000a0be:	e7d5      	b.n	1000a06c <_malloc_trim_r+0x38>
1000a0c0:	20002fd8 	.word	0x20002fd8
1000a0c4:	00000fef 	.word	0x00000fef
1000a0c8:	2003d69c 	.word	0x2003d69c
1000a0cc:	200033e0 	.word	0x200033e0

1000a0d0 <_free_r>:
1000a0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a0d2:	46c6      	mov	lr, r8
1000a0d4:	0005      	movs	r5, r0
1000a0d6:	000c      	movs	r4, r1
1000a0d8:	b500      	push	{lr}
1000a0da:	2900      	cmp	r1, #0
1000a0dc:	d04f      	beq.n	1000a17e <_free_r+0xae>
1000a0de:	f7ff ff59 	bl	10009f94 <__malloc_lock>
1000a0e2:	0021      	movs	r1, r4
1000a0e4:	3908      	subs	r1, #8
1000a0e6:	684c      	ldr	r4, [r1, #4]
1000a0e8:	2601      	movs	r6, #1
1000a0ea:	0022      	movs	r2, r4
1000a0ec:	2003      	movs	r0, #3
1000a0ee:	43b2      	bics	r2, r6
1000a0f0:	188f      	adds	r7, r1, r2
1000a0f2:	687b      	ldr	r3, [r7, #4]
1000a0f4:	4383      	bics	r3, r0
1000a0f6:	4862      	ldr	r0, [pc, #392]	; (1000a280 <_free_r+0x1b0>)
1000a0f8:	4698      	mov	r8, r3
1000a0fa:	6883      	ldr	r3, [r0, #8]
1000a0fc:	42bb      	cmp	r3, r7
1000a0fe:	d06a      	beq.n	1000a1d6 <_free_r+0x106>
1000a100:	4643      	mov	r3, r8
1000a102:	607b      	str	r3, [r7, #4]
1000a104:	4226      	tst	r6, r4
1000a106:	d11e      	bne.n	1000a146 <_free_r+0x76>
1000a108:	2308      	movs	r3, #8
1000a10a:	469c      	mov	ip, r3
1000a10c:	680c      	ldr	r4, [r1, #0]
1000a10e:	4484      	add	ip, r0
1000a110:	1b09      	subs	r1, r1, r4
1000a112:	1912      	adds	r2, r2, r4
1000a114:	688c      	ldr	r4, [r1, #8]
1000a116:	4564      	cmp	r4, ip
1000a118:	d04f      	beq.n	1000a1ba <_free_r+0xea>
1000a11a:	68cb      	ldr	r3, [r1, #12]
1000a11c:	60e3      	str	r3, [r4, #12]
1000a11e:	609c      	str	r4, [r3, #8]
1000a120:	4643      	mov	r3, r8
1000a122:	18fc      	adds	r4, r7, r3
1000a124:	6864      	ldr	r4, [r4, #4]
1000a126:	4234      	tst	r4, r6
1000a128:	d111      	bne.n	1000a14e <_free_r+0x7e>
1000a12a:	68bb      	ldr	r3, [r7, #8]
1000a12c:	4c55      	ldr	r4, [pc, #340]	; (1000a284 <_free_r+0x1b4>)
1000a12e:	4442      	add	r2, r8
1000a130:	42a3      	cmp	r3, r4
1000a132:	d100      	bne.n	1000a136 <_free_r+0x66>
1000a134:	e07e      	b.n	1000a234 <_free_r+0x164>
1000a136:	68fc      	ldr	r4, [r7, #12]
1000a138:	60dc      	str	r4, [r3, #12]
1000a13a:	60a3      	str	r3, [r4, #8]
1000a13c:	2301      	movs	r3, #1
1000a13e:	4313      	orrs	r3, r2
1000a140:	604b      	str	r3, [r1, #4]
1000a142:	508a      	str	r2, [r1, r2]
1000a144:	e006      	b.n	1000a154 <_free_r+0x84>
1000a146:	18fc      	adds	r4, r7, r3
1000a148:	6864      	ldr	r4, [r4, #4]
1000a14a:	4234      	tst	r4, r6
1000a14c:	d0ed      	beq.n	1000a12a <_free_r+0x5a>
1000a14e:	4316      	orrs	r6, r2
1000a150:	604e      	str	r6, [r1, #4]
1000a152:	603a      	str	r2, [r7, #0]
1000a154:	2380      	movs	r3, #128	; 0x80
1000a156:	009b      	lsls	r3, r3, #2
1000a158:	429a      	cmp	r2, r3
1000a15a:	d213      	bcs.n	1000a184 <_free_r+0xb4>
1000a15c:	0954      	lsrs	r4, r2, #5
1000a15e:	08d3      	lsrs	r3, r2, #3
1000a160:	2201      	movs	r2, #1
1000a162:	40a2      	lsls	r2, r4
1000a164:	6844      	ldr	r4, [r0, #4]
1000a166:	00db      	lsls	r3, r3, #3
1000a168:	4322      	orrs	r2, r4
1000a16a:	6042      	str	r2, [r0, #4]
1000a16c:	1818      	adds	r0, r3, r0
1000a16e:	6883      	ldr	r3, [r0, #8]
1000a170:	60c8      	str	r0, [r1, #12]
1000a172:	608b      	str	r3, [r1, #8]
1000a174:	6081      	str	r1, [r0, #8]
1000a176:	60d9      	str	r1, [r3, #12]
1000a178:	0028      	movs	r0, r5
1000a17a:	f7ff ff13 	bl	10009fa4 <__malloc_unlock>
1000a17e:	bc80      	pop	{r7}
1000a180:	46b8      	mov	r8, r7
1000a182:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a184:	0a53      	lsrs	r3, r2, #9
1000a186:	2b04      	cmp	r3, #4
1000a188:	d83e      	bhi.n	1000a208 <_free_r+0x138>
1000a18a:	0994      	lsrs	r4, r2, #6
1000a18c:	0026      	movs	r6, r4
1000a18e:	3439      	adds	r4, #57	; 0x39
1000a190:	3638      	adds	r6, #56	; 0x38
1000a192:	00e4      	lsls	r4, r4, #3
1000a194:	1904      	adds	r4, r0, r4
1000a196:	6823      	ldr	r3, [r4, #0]
1000a198:	3c08      	subs	r4, #8
1000a19a:	2703      	movs	r7, #3
1000a19c:	429c      	cmp	r4, r3
1000a19e:	d042      	beq.n	1000a226 <_free_r+0x156>
1000a1a0:	6858      	ldr	r0, [r3, #4]
1000a1a2:	43b8      	bics	r0, r7
1000a1a4:	4290      	cmp	r0, r2
1000a1a6:	d902      	bls.n	1000a1ae <_free_r+0xde>
1000a1a8:	689b      	ldr	r3, [r3, #8]
1000a1aa:	429c      	cmp	r4, r3
1000a1ac:	d1f8      	bne.n	1000a1a0 <_free_r+0xd0>
1000a1ae:	68dc      	ldr	r4, [r3, #12]
1000a1b0:	60cc      	str	r4, [r1, #12]
1000a1b2:	608b      	str	r3, [r1, #8]
1000a1b4:	60a1      	str	r1, [r4, #8]
1000a1b6:	60d9      	str	r1, [r3, #12]
1000a1b8:	e7de      	b.n	1000a178 <_free_r+0xa8>
1000a1ba:	4643      	mov	r3, r8
1000a1bc:	18f8      	adds	r0, r7, r3
1000a1be:	6840      	ldr	r0, [r0, #4]
1000a1c0:	4230      	tst	r0, r6
1000a1c2:	d157      	bne.n	1000a274 <_free_r+0x1a4>
1000a1c4:	68fb      	ldr	r3, [r7, #12]
1000a1c6:	68b8      	ldr	r0, [r7, #8]
1000a1c8:	4442      	add	r2, r8
1000a1ca:	4316      	orrs	r6, r2
1000a1cc:	60c3      	str	r3, [r0, #12]
1000a1ce:	6098      	str	r0, [r3, #8]
1000a1d0:	604e      	str	r6, [r1, #4]
1000a1d2:	508a      	str	r2, [r1, r2]
1000a1d4:	e7d0      	b.n	1000a178 <_free_r+0xa8>
1000a1d6:	0013      	movs	r3, r2
1000a1d8:	4443      	add	r3, r8
1000a1da:	4226      	tst	r6, r4
1000a1dc:	d106      	bne.n	1000a1ec <_free_r+0x11c>
1000a1de:	680a      	ldr	r2, [r1, #0]
1000a1e0:	1a89      	subs	r1, r1, r2
1000a1e2:	688c      	ldr	r4, [r1, #8]
1000a1e4:	189b      	adds	r3, r3, r2
1000a1e6:	68ca      	ldr	r2, [r1, #12]
1000a1e8:	60e2      	str	r2, [r4, #12]
1000a1ea:	6094      	str	r4, [r2, #8]
1000a1ec:	2201      	movs	r2, #1
1000a1ee:	431a      	orrs	r2, r3
1000a1f0:	604a      	str	r2, [r1, #4]
1000a1f2:	4a25      	ldr	r2, [pc, #148]	; (1000a288 <_free_r+0x1b8>)
1000a1f4:	6081      	str	r1, [r0, #8]
1000a1f6:	6812      	ldr	r2, [r2, #0]
1000a1f8:	429a      	cmp	r2, r3
1000a1fa:	d8bd      	bhi.n	1000a178 <_free_r+0xa8>
1000a1fc:	4b23      	ldr	r3, [pc, #140]	; (1000a28c <_free_r+0x1bc>)
1000a1fe:	0028      	movs	r0, r5
1000a200:	6819      	ldr	r1, [r3, #0]
1000a202:	f7ff ff17 	bl	1000a034 <_malloc_trim_r>
1000a206:	e7b7      	b.n	1000a178 <_free_r+0xa8>
1000a208:	2b14      	cmp	r3, #20
1000a20a:	d907      	bls.n	1000a21c <_free_r+0x14c>
1000a20c:	2b54      	cmp	r3, #84	; 0x54
1000a20e:	d81a      	bhi.n	1000a246 <_free_r+0x176>
1000a210:	0b14      	lsrs	r4, r2, #12
1000a212:	0026      	movs	r6, r4
1000a214:	346f      	adds	r4, #111	; 0x6f
1000a216:	366e      	adds	r6, #110	; 0x6e
1000a218:	00e4      	lsls	r4, r4, #3
1000a21a:	e7bb      	b.n	1000a194 <_free_r+0xc4>
1000a21c:	001e      	movs	r6, r3
1000a21e:	335c      	adds	r3, #92	; 0x5c
1000a220:	365b      	adds	r6, #91	; 0x5b
1000a222:	00dc      	lsls	r4, r3, #3
1000a224:	e7b6      	b.n	1000a194 <_free_r+0xc4>
1000a226:	2201      	movs	r2, #1
1000a228:	10b6      	asrs	r6, r6, #2
1000a22a:	40b2      	lsls	r2, r6
1000a22c:	6846      	ldr	r6, [r0, #4]
1000a22e:	4332      	orrs	r2, r6
1000a230:	6042      	str	r2, [r0, #4]
1000a232:	e7bd      	b.n	1000a1b0 <_free_r+0xe0>
1000a234:	60d9      	str	r1, [r3, #12]
1000a236:	6099      	str	r1, [r3, #8]
1000a238:	60cb      	str	r3, [r1, #12]
1000a23a:	608b      	str	r3, [r1, #8]
1000a23c:	2301      	movs	r3, #1
1000a23e:	4313      	orrs	r3, r2
1000a240:	604b      	str	r3, [r1, #4]
1000a242:	508a      	str	r2, [r1, r2]
1000a244:	e798      	b.n	1000a178 <_free_r+0xa8>
1000a246:	24aa      	movs	r4, #170	; 0xaa
1000a248:	0064      	lsls	r4, r4, #1
1000a24a:	42a3      	cmp	r3, r4
1000a24c:	d805      	bhi.n	1000a25a <_free_r+0x18a>
1000a24e:	0bd4      	lsrs	r4, r2, #15
1000a250:	0026      	movs	r6, r4
1000a252:	3478      	adds	r4, #120	; 0x78
1000a254:	3677      	adds	r6, #119	; 0x77
1000a256:	00e4      	lsls	r4, r4, #3
1000a258:	e79c      	b.n	1000a194 <_free_r+0xc4>
1000a25a:	4c0d      	ldr	r4, [pc, #52]	; (1000a290 <_free_r+0x1c0>)
1000a25c:	42a3      	cmp	r3, r4
1000a25e:	d805      	bhi.n	1000a26c <_free_r+0x19c>
1000a260:	0c94      	lsrs	r4, r2, #18
1000a262:	0026      	movs	r6, r4
1000a264:	347d      	adds	r4, #125	; 0x7d
1000a266:	367c      	adds	r6, #124	; 0x7c
1000a268:	00e4      	lsls	r4, r4, #3
1000a26a:	e793      	b.n	1000a194 <_free_r+0xc4>
1000a26c:	24fe      	movs	r4, #254	; 0xfe
1000a26e:	267e      	movs	r6, #126	; 0x7e
1000a270:	00a4      	lsls	r4, r4, #2
1000a272:	e78f      	b.n	1000a194 <_free_r+0xc4>
1000a274:	0033      	movs	r3, r6
1000a276:	4313      	orrs	r3, r2
1000a278:	604b      	str	r3, [r1, #4]
1000a27a:	603a      	str	r2, [r7, #0]
1000a27c:	e77c      	b.n	1000a178 <_free_r+0xa8>
1000a27e:	46c0      	nop			; (mov r8, r8)
1000a280:	20002fd8 	.word	0x20002fd8
1000a284:	20002fe0 	.word	0x20002fe0
1000a288:	200033e4 	.word	0x200033e4
1000a28c:	2003d6cc 	.word	0x2003d6cc
1000a290:	00000554 	.word	0x00000554

1000a294 <__retarget_lock_acquire_recursive>:
1000a294:	4770      	bx	lr
1000a296:	46c0      	nop			; (mov r8, r8)

1000a298 <__retarget_lock_release_recursive>:
1000a298:	4770      	bx	lr
1000a29a:	46c0      	nop			; (mov r8, r8)

1000a29c <_fini>:
1000a29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a29e:	46c0      	nop			; (mov r8, r8)

1000a2a0 <__mutex_exit_veneer>:
1000a2a0:	b401      	push	{r0}
1000a2a2:	4802      	ldr	r0, [pc, #8]	; (1000a2ac <__mutex_exit_veneer+0xc>)
1000a2a4:	4684      	mov	ip, r0
1000a2a6:	bc01      	pop	{r0}
1000a2a8:	4760      	bx	ip
1000a2aa:	bf00      	nop
1000a2ac:	2000204d 	.word	0x2000204d

1000a2b0 <____aeabi_ldiv0_veneer>:
1000a2b0:	b401      	push	{r0}
1000a2b2:	4802      	ldr	r0, [pc, #8]	; (1000a2bc <____aeabi_ldiv0_veneer+0xc>)
1000a2b4:	4684      	mov	ip, r0
1000a2b6:	bc01      	pop	{r0}
1000a2b8:	4760      	bx	ip
1000a2ba:	bf00      	nop
1000a2bc:	2000264d 	.word	0x2000264d

1000a2c0 <____aeabi_idiv0_veneer>:
1000a2c0:	b401      	push	{r0}
1000a2c2:	4802      	ldr	r0, [pc, #8]	; (1000a2cc <____aeabi_idiv0_veneer+0xc>)
1000a2c4:	4684      	mov	ip, r0
1000a2c6:	bc01      	pop	{r0}
1000a2c8:	4760      	bx	ip
1000a2ca:	bf00      	nop
1000a2cc:	2000264d 	.word	0x2000264d

1000a2d0 <__mutex_try_enter_veneer>:
1000a2d0:	b401      	push	{r0}
1000a2d2:	4802      	ldr	r0, [pc, #8]	; (1000a2dc <__mutex_try_enter_veneer+0xc>)
1000a2d4:	4684      	mov	ip, r0
1000a2d6:	bc01      	pop	{r0}
1000a2d8:	4760      	bx	ip
1000a2da:	bf00      	nop
1000a2dc:	20001f71 	.word	0x20001f71

1000a2e0 <__mutex_enter_timeout_ms_veneer>:
1000a2e0:	b401      	push	{r0}
1000a2e2:	4802      	ldr	r0, [pc, #8]	; (1000a2ec <__mutex_enter_timeout_ms_veneer+0xc>)
1000a2e4:	4684      	mov	ip, r0
1000a2e6:	bc01      	pop	{r0}
1000a2e8:	4760      	bx	ip
1000a2ea:	bf00      	nop
1000a2ec:	20001fb5 	.word	0x20001fb5

1000a2f0 <__flash_do_cmd.constprop.0_veneer>:
1000a2f0:	b401      	push	{r0}
1000a2f2:	4802      	ldr	r0, [pc, #8]	; (1000a2fc <__flash_do_cmd.constprop.0_veneer+0xc>)
1000a2f4:	4684      	mov	ip, r0
1000a2f6:	bc01      	pop	{r0}
1000a2f8:	4760      	bx	ip
1000a2fa:	bf00      	nop
1000a2fc:	20001e81 	.word	0x20001e81

1000a300 <__mutex_enter_blocking_veneer>:
1000a300:	b401      	push	{r0}
1000a302:	4802      	ldr	r0, [pc, #8]	; (1000a30c <__mutex_enter_blocking_veneer+0xc>)
1000a304:	4684      	mov	ip, r0
1000a306:	bc01      	pop	{r0}
1000a308:	4760      	bx	ip
1000a30a:	bf00      	nop
1000a30c:	20001f25 	.word	0x20001f25

Disassembly of section .data:

200000c0 <RenderAText>:
200000c0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
200000c2:	4644      	mov	r4, r8
200000c4:	b410      	push	{r4}
200000c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
200000c8:	4e49      	ldr	r6, [pc, #292]	; (200001f0 <RenderAText_pSioBase>)
200000ca:	6632      	str	r2, [r6, #96]	; 0x60
200000cc:	8a62      	ldrh	r2, [r4, #18]
200000ce:	6672      	str	r2, [r6, #100]	; 0x64
200000d0:	8925      	ldrh	r5, [r4, #8]
200000d2:	2703      	movs	r7, #3
200000d4:	43bd      	bics	r5, r7
200000d6:	9509      	str	r5, [sp, #36]	; 0x24
200000d8:	43b9      	bics	r1, r7
200000da:	43bb      	bics	r3, r7
200000dc:	9303      	str	r3, [sp, #12]
200000de:	6f75      	ldr	r5, [r6, #116]	; 0x74
200000e0:	6f32      	ldr	r2, [r6, #112]	; 0x70
200000e2:	022d      	lsls	r5, r5, #8
200000e4:	6963      	ldr	r3, [r4, #20]
200000e6:	442b      	add	r3, r5
200000e8:	8865      	ldrh	r5, [r4, #2]
200000ea:	436a      	muls	r2, r5
200000ec:	68e5      	ldr	r5, [r4, #12]
200000ee:	442a      	add	r2, r5
200000f0:	9202      	str	r2, [sp, #8]
200000f2:	08ce      	lsrs	r6, r1, #3
200000f4:	4432      	add	r2, r6
200000f6:	4432      	add	r2, r6
200000f8:	69a5      	ldr	r5, [r4, #24]
200000fa:	46a8      	mov	r8, r5
200000fc:	4d3b      	ldr	r5, [pc, #236]	; (200001ec <RenderAText_Addr>)
200000fe:	46ae      	mov	lr, r5
20000100:	074e      	lsls	r6, r1, #29
20000102:	d521      	bpl.n	20000148 <RenderAText+0x88>
20000104:	7856      	ldrb	r6, [r2, #1]
20000106:	4645      	mov	r5, r8
20000108:	0934      	lsrs	r4, r6, #4
2000010a:	5d2c      	ldrb	r4, [r5, r4]
2000010c:	0736      	lsls	r6, r6, #28
2000010e:	0f36      	lsrs	r6, r6, #28
20000110:	5dae      	ldrb	r6, [r5, r6]
20000112:	0225      	lsls	r5, r4, #8
20000114:	4325      	orrs	r5, r4
20000116:	042c      	lsls	r4, r5, #16
20000118:	432c      	orrs	r4, r5
2000011a:	0235      	lsls	r5, r6, #8
2000011c:	4335      	orrs	r5, r6
2000011e:	042e      	lsls	r6, r5, #16
20000120:	432e      	orrs	r6, r5
20000122:	4066      	eors	r6, r4
20000124:	7815      	ldrb	r5, [r2, #0]
20000126:	5d5d      	ldrb	r5, [r3, r5]
20000128:	3202      	adds	r2, #2
2000012a:	00ed      	lsls	r5, r5, #3
2000012c:	4475      	add	r5, lr
2000012e:	686f      	ldr	r7, [r5, #4]
20000130:	4037      	ands	r7, r6
20000132:	4067      	eors	r7, r4
20000134:	c080      	stmia	r0!, {r7}
20000136:	3104      	adds	r1, #4
20000138:	9f09      	ldr	r7, [sp, #36]	; 0x24
2000013a:	42b9      	cmp	r1, r7
2000013c:	d301      	bcc.n	20000142 <RenderAText+0x82>
2000013e:	2100      	movs	r1, #0
20000140:	9a02      	ldr	r2, [sp, #8]
20000142:	9f03      	ldr	r7, [sp, #12]
20000144:	3f04      	subs	r7, #4
20000146:	9703      	str	r7, [sp, #12]
20000148:	9f09      	ldr	r7, [sp, #36]	; 0x24
2000014a:	1a7f      	subs	r7, r7, r1

2000014c <RenderAText_OutLoop>:
2000014c:	9e03      	ldr	r6, [sp, #12]
2000014e:	42b7      	cmp	r7, r6
20000150:	d900      	bls.n	20000154 <RenderAText_OutLoop+0x8>
20000152:	4637      	mov	r7, r6
20000154:	2f08      	cmp	r7, #8
20000156:	d220      	bcs.n	2000019a <RenderAText_Last+0x3e>
20000158:	2f04      	cmp	r7, #4
2000015a:	d31b      	bcc.n	20000194 <RenderAText_Last+0x38>

2000015c <RenderAText_Last>:
2000015c:	7856      	ldrb	r6, [r2, #1]
2000015e:	4645      	mov	r5, r8
20000160:	0934      	lsrs	r4, r6, #4
20000162:	5d2c      	ldrb	r4, [r5, r4]
20000164:	0736      	lsls	r6, r6, #28
20000166:	0f36      	lsrs	r6, r6, #28
20000168:	5dae      	ldrb	r6, [r5, r6]
2000016a:	0225      	lsls	r5, r4, #8
2000016c:	4325      	orrs	r5, r4
2000016e:	042c      	lsls	r4, r5, #16
20000170:	432c      	orrs	r4, r5
20000172:	0235      	lsls	r5, r6, #8
20000174:	4335      	orrs	r5, r6
20000176:	042e      	lsls	r6, r5, #16
20000178:	432e      	orrs	r6, r5
2000017a:	4066      	eors	r6, r4
2000017c:	7815      	ldrb	r5, [r2, #0]
2000017e:	5d5d      	ldrb	r5, [r3, r5]
20000180:	3202      	adds	r2, #2
20000182:	00ed      	lsls	r5, r5, #3
20000184:	4475      	add	r5, lr
20000186:	6829      	ldr	r1, [r5, #0]
20000188:	4031      	ands	r1, r6
2000018a:	4061      	eors	r1, r4
2000018c:	c002      	stmia	r0!, {r1}
2000018e:	9a02      	ldr	r2, [sp, #8]
20000190:	2f04      	cmp	r7, #4
20000192:	d8db      	bhi.n	2000014c <RenderAText_OutLoop>
20000194:	bc10      	pop	{r4}
20000196:	46a0      	mov	r8, r4
20000198:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
2000019a:	08b9      	lsrs	r1, r7, #2
2000019c:	008d      	lsls	r5, r1, #2
2000019e:	1b76      	subs	r6, r6, r5
200001a0:	9603      	str	r6, [sp, #12]
200001a2:	3901      	subs	r1, #1

200001a4 <RenderAText_InLoop>:
200001a4:	7856      	ldrb	r6, [r2, #1]
200001a6:	4645      	mov	r5, r8
200001a8:	0934      	lsrs	r4, r6, #4
200001aa:	5d2c      	ldrb	r4, [r5, r4]
200001ac:	0736      	lsls	r6, r6, #28
200001ae:	0f36      	lsrs	r6, r6, #28
200001b0:	5dae      	ldrb	r6, [r5, r6]
200001b2:	0225      	lsls	r5, r4, #8
200001b4:	4325      	orrs	r5, r4
200001b6:	042c      	lsls	r4, r5, #16
200001b8:	432c      	orrs	r4, r5
200001ba:	0235      	lsls	r5, r6, #8
200001bc:	4335      	orrs	r5, r6
200001be:	042e      	lsls	r6, r5, #16
200001c0:	432e      	orrs	r6, r5
200001c2:	4066      	eors	r6, r4
200001c4:	7815      	ldrb	r5, [r2, #0]
200001c6:	5d5d      	ldrb	r5, [r3, r5]
200001c8:	3202      	adds	r2, #2
200001ca:	00ed      	lsls	r5, r5, #3
200001cc:	4475      	add	r5, lr
200001ce:	682f      	ldr	r7, [r5, #0]
200001d0:	4037      	ands	r7, r6
200001d2:	4067      	eors	r7, r4
200001d4:	c080      	stmia	r0!, {r7}
200001d6:	686f      	ldr	r7, [r5, #4]
200001d8:	4037      	ands	r7, r6
200001da:	4067      	eors	r7, r4
200001dc:	c080      	stmia	r0!, {r7}
200001de:	3902      	subs	r1, #2
200001e0:	d8e0      	bhi.n	200001a4 <RenderAText_InLoop>
200001e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
200001e4:	d0ba      	beq.n	2000015c <RenderAText_Last>
200001e6:	9a02      	ldr	r2, [sp, #8]
200001e8:	e7b0      	b.n	2000014c <RenderAText_OutLoop>
200001ea:	46c0      	nop			; (mov r8, r8)

200001ec <RenderAText_Addr>:
200001ec:	2001c074 	.word	0x2001c074

200001f0 <RenderAText_pSioBase>:
200001f0:	d0000000 	.word	0xd0000000

200001f4 <RenderAttrib8>:
200001f4:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
200001f6:	4644      	mov	r4, r8
200001f8:	b410      	push	{r4}
200001fa:	9c08      	ldr	r4, [sp, #32]
200001fc:	8925      	ldrh	r5, [r4, #8]
200001fe:	2703      	movs	r7, #3
20000200:	43bd      	bics	r5, r7
20000202:	9508      	str	r5, [sp, #32]
20000204:	43b9      	bics	r1, r7
20000206:	43bb      	bics	r3, r7
20000208:	9302      	str	r3, [sp, #8]
2000020a:	08d3      	lsrs	r3, r2, #3
2000020c:	8865      	ldrh	r5, [r4, #2]
2000020e:	436b      	muls	r3, r5
20000210:	6967      	ldr	r7, [r4, #20]
20000212:	443b      	add	r3, r7
20000214:	436a      	muls	r2, r5
20000216:	68e5      	ldr	r5, [r4, #12]
20000218:	442a      	add	r2, r5
2000021a:	9201      	str	r2, [sp, #4]
2000021c:	1a9b      	subs	r3, r3, r2
2000021e:	08ce      	lsrs	r6, r1, #3
20000220:	4432      	add	r2, r6
20000222:	69a5      	ldr	r5, [r4, #24]
20000224:	46a8      	mov	r8, r5
20000226:	4d39      	ldr	r5, [pc, #228]	; (2000030c <RenderAttrib8_Addr>)
20000228:	46ae      	mov	lr, r5
2000022a:	074e      	lsls	r6, r1, #29
2000022c:	d520      	bpl.n	20000270 <RenderAttrib8+0x7c>
2000022e:	5cd6      	ldrb	r6, [r2, r3]
20000230:	4645      	mov	r5, r8
20000232:	0934      	lsrs	r4, r6, #4
20000234:	5d2c      	ldrb	r4, [r5, r4]
20000236:	0736      	lsls	r6, r6, #28
20000238:	0f36      	lsrs	r6, r6, #28
2000023a:	5dae      	ldrb	r6, [r5, r6]
2000023c:	0225      	lsls	r5, r4, #8
2000023e:	4325      	orrs	r5, r4
20000240:	042c      	lsls	r4, r5, #16
20000242:	432c      	orrs	r4, r5
20000244:	0235      	lsls	r5, r6, #8
20000246:	4335      	orrs	r5, r6
20000248:	042e      	lsls	r6, r5, #16
2000024a:	432e      	orrs	r6, r5
2000024c:	4066      	eors	r6, r4
2000024e:	7815      	ldrb	r5, [r2, #0]
20000250:	3201      	adds	r2, #1
20000252:	00ed      	lsls	r5, r5, #3
20000254:	4475      	add	r5, lr
20000256:	686f      	ldr	r7, [r5, #4]
20000258:	4037      	ands	r7, r6
2000025a:	4067      	eors	r7, r4
2000025c:	c080      	stmia	r0!, {r7}
2000025e:	3104      	adds	r1, #4
20000260:	9f08      	ldr	r7, [sp, #32]
20000262:	42b9      	cmp	r1, r7
20000264:	d301      	bcc.n	2000026a <RenderAttrib8+0x76>
20000266:	2100      	movs	r1, #0
20000268:	9a01      	ldr	r2, [sp, #4]
2000026a:	9f02      	ldr	r7, [sp, #8]
2000026c:	3f04      	subs	r7, #4
2000026e:	9702      	str	r7, [sp, #8]
20000270:	9f08      	ldr	r7, [sp, #32]
20000272:	1a7f      	subs	r7, r7, r1

20000274 <RenderAttrib8_OutLoop>:
20000274:	9e02      	ldr	r6, [sp, #8]
20000276:	42b7      	cmp	r7, r6
20000278:	d900      	bls.n	2000027c <RenderAttrib8_OutLoop+0x8>
2000027a:	4637      	mov	r7, r6
2000027c:	2f08      	cmp	r7, #8
2000027e:	d21f      	bcs.n	200002c0 <RenderAttrib8_Last+0x3c>
20000280:	2f04      	cmp	r7, #4
20000282:	d31a      	bcc.n	200002ba <RenderAttrib8_Last+0x36>

20000284 <RenderAttrib8_Last>:
20000284:	5cd6      	ldrb	r6, [r2, r3]
20000286:	4645      	mov	r5, r8
20000288:	0934      	lsrs	r4, r6, #4
2000028a:	5d2c      	ldrb	r4, [r5, r4]
2000028c:	0736      	lsls	r6, r6, #28
2000028e:	0f36      	lsrs	r6, r6, #28
20000290:	5dae      	ldrb	r6, [r5, r6]
20000292:	0225      	lsls	r5, r4, #8
20000294:	4325      	orrs	r5, r4
20000296:	042c      	lsls	r4, r5, #16
20000298:	432c      	orrs	r4, r5
2000029a:	0235      	lsls	r5, r6, #8
2000029c:	4335      	orrs	r5, r6
2000029e:	042e      	lsls	r6, r5, #16
200002a0:	432e      	orrs	r6, r5
200002a2:	4066      	eors	r6, r4
200002a4:	7815      	ldrb	r5, [r2, #0]
200002a6:	3201      	adds	r2, #1
200002a8:	00ed      	lsls	r5, r5, #3
200002aa:	4475      	add	r5, lr
200002ac:	6829      	ldr	r1, [r5, #0]
200002ae:	4031      	ands	r1, r6
200002b0:	4061      	eors	r1, r4
200002b2:	c002      	stmia	r0!, {r1}
200002b4:	9a01      	ldr	r2, [sp, #4]
200002b6:	2f04      	cmp	r7, #4
200002b8:	d8dc      	bhi.n	20000274 <RenderAttrib8_OutLoop>
200002ba:	bc10      	pop	{r4}
200002bc:	46a0      	mov	r8, r4
200002be:	bdfc      	pop	{r2, r3, r4, r5, r6, r7, pc}
200002c0:	08b9      	lsrs	r1, r7, #2
200002c2:	008d      	lsls	r5, r1, #2
200002c4:	1b76      	subs	r6, r6, r5
200002c6:	9602      	str	r6, [sp, #8]
200002c8:	3901      	subs	r1, #1

200002ca <RenderAttrib8_InLoop>:
200002ca:	5cd6      	ldrb	r6, [r2, r3]
200002cc:	4645      	mov	r5, r8
200002ce:	0934      	lsrs	r4, r6, #4
200002d0:	5d2c      	ldrb	r4, [r5, r4]
200002d2:	0736      	lsls	r6, r6, #28
200002d4:	0f36      	lsrs	r6, r6, #28
200002d6:	5dae      	ldrb	r6, [r5, r6]
200002d8:	0225      	lsls	r5, r4, #8
200002da:	4325      	orrs	r5, r4
200002dc:	042c      	lsls	r4, r5, #16
200002de:	432c      	orrs	r4, r5
200002e0:	0235      	lsls	r5, r6, #8
200002e2:	4335      	orrs	r5, r6
200002e4:	042e      	lsls	r6, r5, #16
200002e6:	432e      	orrs	r6, r5
200002e8:	4066      	eors	r6, r4
200002ea:	7817      	ldrb	r7, [r2, #0]
200002ec:	3201      	adds	r2, #1
200002ee:	00ff      	lsls	r7, r7, #3
200002f0:	4477      	add	r7, lr
200002f2:	683d      	ldr	r5, [r7, #0]
200002f4:	4035      	ands	r5, r6
200002f6:	4065      	eors	r5, r4
200002f8:	687f      	ldr	r7, [r7, #4]
200002fa:	4037      	ands	r7, r6
200002fc:	4067      	eors	r7, r4
200002fe:	c0a0      	stmia	r0!, {r5, r7}
20000300:	3902      	subs	r1, #2
20000302:	d8e2      	bhi.n	200002ca <RenderAttrib8_InLoop>
20000304:	9f08      	ldr	r7, [sp, #32]
20000306:	d0bd      	beq.n	20000284 <RenderAttrib8_Last>
20000308:	9a01      	ldr	r2, [sp, #4]
2000030a:	e7b3      	b.n	20000274 <RenderAttrib8_OutLoop>

2000030c <RenderAttrib8_Addr>:
2000030c:	2001c074 	.word	0x2001c074

20000310 <MemSet4>:
20000310:	b5f0      	push	{r4, r5, r6, r7, lr}
20000312:	460b      	mov	r3, r1
20000314:	460c      	mov	r4, r1
20000316:	460d      	mov	r5, r1
20000318:	460e      	mov	r6, r1
2000031a:	460f      	mov	r7, r1
2000031c:	e004      	b.n	20000328 <MemSet4+0x18>
2000031e:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000320:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000322:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000324:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000326:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000328:	3a1e      	subs	r2, #30
2000032a:	daf8      	bge.n	2000031e <MemSet4+0xe>
2000032c:	321e      	adds	r2, #30
2000032e:	e000      	b.n	20000332 <MemSet4+0x22>
20000330:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000332:	3a06      	subs	r2, #6
20000334:	dafc      	bge.n	20000330 <MemSet4+0x20>
20000336:	3206      	adds	r2, #6
20000338:	e000      	b.n	2000033c <MemSet4+0x2c>
2000033a:	c002      	stmia	r0!, {r1}
2000033c:	3a01      	subs	r2, #1
2000033e:	dafc      	bge.n	2000033a <MemSet4+0x2a>
20000340:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

20000344 <RenderCText>:
20000344:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000346:	9c08      	ldr	r4, [sp, #32]
20000348:	4e40      	ldr	r6, [pc, #256]	; (2000044c <RenderCText_pSioBase>)
2000034a:	6632      	str	r2, [r6, #96]	; 0x60
2000034c:	8a62      	ldrh	r2, [r4, #18]
2000034e:	6672      	str	r2, [r6, #100]	; 0x64
20000350:	8925      	ldrh	r5, [r4, #8]
20000352:	2703      	movs	r7, #3
20000354:	43bd      	bics	r5, r7
20000356:	9508      	str	r5, [sp, #32]
20000358:	43b9      	bics	r1, r7
2000035a:	43bb      	bics	r3, r7
2000035c:	9302      	str	r3, [sp, #8]
2000035e:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000360:	6f32      	ldr	r2, [r6, #112]	; 0x70
20000362:	022d      	lsls	r5, r5, #8
20000364:	6963      	ldr	r3, [r4, #20]
20000366:	442b      	add	r3, r5
20000368:	8865      	ldrh	r5, [r4, #2]
2000036a:	436a      	muls	r2, r5
2000036c:	68e5      	ldr	r5, [r4, #12]
2000036e:	442a      	add	r2, r5
20000370:	9201      	str	r2, [sp, #4]
20000372:	08ce      	lsrs	r6, r1, #3
20000374:	4432      	add	r2, r6
20000376:	4432      	add	r2, r6
20000378:	4432      	add	r2, r6
2000037a:	4d33      	ldr	r5, [pc, #204]	; (20000448 <RenderCText_Addr>)
2000037c:	46ae      	mov	lr, r5
2000037e:	074e      	lsls	r6, r1, #29
20000380:	d51c      	bpl.n	200003bc <RenderCText+0x78>
20000382:	7815      	ldrb	r5, [r2, #0]
20000384:	5d5d      	ldrb	r5, [r3, r5]
20000386:	7854      	ldrb	r4, [r2, #1]
20000388:	0227      	lsls	r7, r4, #8
2000038a:	4327      	orrs	r7, r4
2000038c:	043c      	lsls	r4, r7, #16
2000038e:	433c      	orrs	r4, r7
20000390:	7896      	ldrb	r6, [r2, #2]
20000392:	3203      	adds	r2, #3
20000394:	0237      	lsls	r7, r6, #8
20000396:	4337      	orrs	r7, r6
20000398:	043e      	lsls	r6, r7, #16
2000039a:	433e      	orrs	r6, r7
2000039c:	4066      	eors	r6, r4
2000039e:	00ed      	lsls	r5, r5, #3
200003a0:	4475      	add	r5, lr
200003a2:	686f      	ldr	r7, [r5, #4]
200003a4:	4037      	ands	r7, r6
200003a6:	4067      	eors	r7, r4
200003a8:	c080      	stmia	r0!, {r7}
200003aa:	3104      	adds	r1, #4
200003ac:	9f08      	ldr	r7, [sp, #32]
200003ae:	42b9      	cmp	r1, r7
200003b0:	d301      	bcc.n	200003b6 <RenderCText+0x72>
200003b2:	2100      	movs	r1, #0
200003b4:	9a01      	ldr	r2, [sp, #4]
200003b6:	9f02      	ldr	r7, [sp, #8]
200003b8:	3f04      	subs	r7, #4
200003ba:	9702      	str	r7, [sp, #8]
200003bc:	9f08      	ldr	r7, [sp, #32]
200003be:	1a7f      	subs	r7, r7, r1

200003c0 <RenderCText_OutLoop>:
200003c0:	9e02      	ldr	r6, [sp, #8]
200003c2:	42b7      	cmp	r7, r6
200003c4:	d900      	bls.n	200003c8 <RenderCText_OutLoop+0x8>
200003c6:	4637      	mov	r7, r6
200003c8:	2f08      	cmp	r7, #8
200003ca:	d219      	bcs.n	20000400 <RenderCText_Last+0x30>
200003cc:	2f04      	cmp	r7, #4
200003ce:	d316      	bcc.n	200003fe <RenderCText_Last+0x2e>

200003d0 <RenderCText_Last>:
200003d0:	7815      	ldrb	r5, [r2, #0]
200003d2:	5d5d      	ldrb	r5, [r3, r5]
200003d4:	7854      	ldrb	r4, [r2, #1]
200003d6:	0221      	lsls	r1, r4, #8
200003d8:	4321      	orrs	r1, r4
200003da:	040c      	lsls	r4, r1, #16
200003dc:	430c      	orrs	r4, r1
200003de:	7896      	ldrb	r6, [r2, #2]
200003e0:	3203      	adds	r2, #3
200003e2:	0231      	lsls	r1, r6, #8
200003e4:	4331      	orrs	r1, r6
200003e6:	040e      	lsls	r6, r1, #16
200003e8:	430e      	orrs	r6, r1
200003ea:	4066      	eors	r6, r4
200003ec:	00ed      	lsls	r5, r5, #3
200003ee:	4475      	add	r5, lr
200003f0:	6829      	ldr	r1, [r5, #0]
200003f2:	4031      	ands	r1, r6
200003f4:	4061      	eors	r1, r4
200003f6:	c002      	stmia	r0!, {r1}
200003f8:	9a01      	ldr	r2, [sp, #4]
200003fa:	2f04      	cmp	r7, #4
200003fc:	d8e0      	bhi.n	200003c0 <RenderCText_OutLoop>
200003fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000400:	08b9      	lsrs	r1, r7, #2
20000402:	008d      	lsls	r5, r1, #2
20000404:	1b76      	subs	r6, r6, r5
20000406:	9602      	str	r6, [sp, #8]
20000408:	3901      	subs	r1, #1

2000040a <RenderCText_InLoop>:
2000040a:	7815      	ldrb	r5, [r2, #0]
2000040c:	5d5d      	ldrb	r5, [r3, r5]
2000040e:	7854      	ldrb	r4, [r2, #1]
20000410:	0227      	lsls	r7, r4, #8
20000412:	4327      	orrs	r7, r4
20000414:	043c      	lsls	r4, r7, #16
20000416:	433c      	orrs	r4, r7
20000418:	7896      	ldrb	r6, [r2, #2]
2000041a:	3203      	adds	r2, #3
2000041c:	0237      	lsls	r7, r6, #8
2000041e:	4337      	orrs	r7, r6
20000420:	043e      	lsls	r6, r7, #16
20000422:	433e      	orrs	r6, r7
20000424:	4066      	eors	r6, r4
20000426:	00ed      	lsls	r5, r5, #3
20000428:	4475      	add	r5, lr
2000042a:	682f      	ldr	r7, [r5, #0]
2000042c:	4037      	ands	r7, r6
2000042e:	4067      	eors	r7, r4
20000430:	c080      	stmia	r0!, {r7}
20000432:	686f      	ldr	r7, [r5, #4]
20000434:	4037      	ands	r7, r6
20000436:	4067      	eors	r7, r4
20000438:	c080      	stmia	r0!, {r7}
2000043a:	3902      	subs	r1, #2
2000043c:	d8e5      	bhi.n	2000040a <RenderCText_InLoop>
2000043e:	9f08      	ldr	r7, [sp, #32]
20000440:	d0c6      	beq.n	200003d0 <RenderCText_Last>
20000442:	9a01      	ldr	r2, [sp, #4]
20000444:	e7bc      	b.n	200003c0 <RenderCText_OutLoop>
20000446:	46c0      	nop			; (mov r8, r8)

20000448 <RenderCText_Addr>:
20000448:	2001c074 	.word	0x2001c074

2000044c <RenderCText_pSioBase>:
2000044c:	d0000000 	.word	0xd0000000

20000450 <RenderDText>:
20000450:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000452:	4644      	mov	r4, r8
20000454:	b410      	push	{r4}
20000456:	9c09      	ldr	r4, [sp, #36]	; 0x24
20000458:	4e68      	ldr	r6, [pc, #416]	; (200005fc <RenderDText_pSioBase>)
2000045a:	6632      	str	r2, [r6, #96]	; 0x60
2000045c:	7ce2      	ldrb	r2, [r4, #19]
2000045e:	6672      	str	r2, [r6, #100]	; 0x64
20000460:	8925      	ldrh	r5, [r4, #8]
20000462:	2703      	movs	r7, #3
20000464:	43bd      	bics	r5, r7
20000466:	9509      	str	r5, [sp, #36]	; 0x24
20000468:	43b9      	bics	r1, r7
2000046a:	43bb      	bics	r3, r7
2000046c:	9303      	str	r3, [sp, #12]
2000046e:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000470:	6f32      	ldr	r2, [r6, #112]	; 0x70
20000472:	022d      	lsls	r5, r5, #8
20000474:	6963      	ldr	r3, [r4, #20]
20000476:	442b      	add	r3, r5
20000478:	4698      	mov	r8, r3
2000047a:	8865      	ldrh	r5, [r4, #2]
2000047c:	436a      	muls	r2, r5
2000047e:	68e5      	ldr	r5, [r4, #12]
20000480:	442a      	add	r2, r5
20000482:	9202      	str	r2, [sp, #8]
20000484:	69a3      	ldr	r3, [r4, #24]
20000486:	9301      	str	r3, [sp, #4]
20000488:	08ce      	lsrs	r6, r1, #3
2000048a:	00b6      	lsls	r6, r6, #2
2000048c:	4433      	add	r3, r6
2000048e:	090e      	lsrs	r6, r1, #4
20000490:	4432      	add	r2, r6
20000492:	7ca4      	ldrb	r4, [r4, #18]
20000494:	0225      	lsls	r5, r4, #8
20000496:	4325      	orrs	r5, r4
20000498:	042c      	lsls	r4, r5, #16
2000049a:	432c      	orrs	r4, r5
2000049c:	4d56      	ldr	r5, [pc, #344]	; (200005f8 <RenderDText_Addr>)
2000049e:	46ae      	mov	lr, r5
200004a0:	070e      	lsls	r6, r1, #28
200004a2:	d037      	beq.n	20000514 <RenderDText+0xc4>
200004a4:	0f35      	lsrs	r5, r6, #28
200004a6:	2610      	movs	r6, #16
200004a8:	1b76      	subs	r6, r6, r5
200004aa:	1989      	adds	r1, r1, r6
200004ac:	9f03      	ldr	r7, [sp, #12]
200004ae:	1bbf      	subs	r7, r7, r6
200004b0:	9703      	str	r7, [sp, #12]
200004b2:	b402      	push	{r1}
200004b4:	7817      	ldrb	r7, [r2, #0]
200004b6:	3201      	adds	r2, #1
200004b8:	4447      	add	r7, r8
200004ba:	783f      	ldrb	r7, [r7, #0]
200004bc:	cb40      	ldmia	r3!, {r6}
200004be:	4066      	eors	r6, r4
200004c0:	00ff      	lsls	r7, r7, #3
200004c2:	4477      	add	r7, lr
200004c4:	6839      	ldr	r1, [r7, #0]
200004c6:	4031      	ands	r1, r6
200004c8:	4061      	eors	r1, r4
200004ca:	2d04      	cmp	r5, #4
200004cc:	d806      	bhi.n	200004dc <RenderDText+0x8c>
200004ce:	0c09      	lsrs	r1, r1, #16
200004d0:	7001      	strb	r1, [r0, #0]
200004d2:	7041      	strb	r1, [r0, #1]
200004d4:	0a09      	lsrs	r1, r1, #8
200004d6:	7081      	strb	r1, [r0, #2]
200004d8:	70c1      	strb	r1, [r0, #3]
200004da:	3004      	adds	r0, #4
200004dc:	cb40      	ldmia	r3!, {r6}
200004de:	4066      	eors	r6, r4
200004e0:	6879      	ldr	r1, [r7, #4]
200004e2:	4031      	ands	r1, r6
200004e4:	4061      	eors	r1, r4
200004e6:	2d08      	cmp	r5, #8
200004e8:	d806      	bhi.n	200004f8 <RenderDText+0xa8>
200004ea:	7001      	strb	r1, [r0, #0]
200004ec:	7041      	strb	r1, [r0, #1]
200004ee:	0a09      	lsrs	r1, r1, #8
200004f0:	7081      	strb	r1, [r0, #2]
200004f2:	70c1      	strb	r1, [r0, #3]
200004f4:	0209      	lsls	r1, r1, #8
200004f6:	3004      	adds	r0, #4
200004f8:	0c09      	lsrs	r1, r1, #16
200004fa:	7001      	strb	r1, [r0, #0]
200004fc:	7041      	strb	r1, [r0, #1]
200004fe:	0a09      	lsrs	r1, r1, #8
20000500:	7081      	strb	r1, [r0, #2]
20000502:	70c1      	strb	r1, [r0, #3]
20000504:	3004      	adds	r0, #4
20000506:	bc02      	pop	{r1}
20000508:	9f09      	ldr	r7, [sp, #36]	; 0x24
2000050a:	42b9      	cmp	r1, r7
2000050c:	d302      	bcc.n	20000514 <RenderDText+0xc4>
2000050e:	2100      	movs	r1, #0
20000510:	9a02      	ldr	r2, [sp, #8]
20000512:	9b01      	ldr	r3, [sp, #4]
20000514:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000516:	1a7f      	subs	r7, r7, r1

20000518 <RenderDText_OutLoop>:
20000518:	9e03      	ldr	r6, [sp, #12]
2000051a:	42b7      	cmp	r7, r6
2000051c:	d900      	bls.n	20000520 <RenderDText_OutLoop+0x8>
2000051e:	4637      	mov	r7, r6
20000520:	2f10      	cmp	r7, #16
20000522:	d232      	bcs.n	2000058a <RenderDText_Last+0x60>
20000524:	2f04      	cmp	r7, #4
20000526:	d32d      	bcc.n	20000584 <RenderDText_Last+0x5a>
20000528:	4639      	mov	r1, r7

2000052a <RenderDText_Last>:
2000052a:	b480      	push	{r7}
2000052c:	7817      	ldrb	r7, [r2, #0]
2000052e:	3201      	adds	r2, #1
20000530:	4447      	add	r7, r8
20000532:	783f      	ldrb	r7, [r7, #0]
20000534:	cb40      	ldmia	r3!, {r6}
20000536:	4066      	eors	r6, r4
20000538:	00ff      	lsls	r7, r7, #3
2000053a:	4477      	add	r7, lr
2000053c:	683d      	ldr	r5, [r7, #0]
2000053e:	4035      	ands	r5, r6
20000540:	4065      	eors	r5, r4
20000542:	7005      	strb	r5, [r0, #0]
20000544:	7045      	strb	r5, [r0, #1]
20000546:	0a2d      	lsrs	r5, r5, #8
20000548:	7085      	strb	r5, [r0, #2]
2000054a:	70c5      	strb	r5, [r0, #3]
2000054c:	3004      	adds	r0, #4
2000054e:	2904      	cmp	r1, #4
20000550:	d913      	bls.n	2000057a <RenderDText_Last+0x50>
20000552:	0a2d      	lsrs	r5, r5, #8
20000554:	7005      	strb	r5, [r0, #0]
20000556:	7045      	strb	r5, [r0, #1]
20000558:	0a2d      	lsrs	r5, r5, #8
2000055a:	7085      	strb	r5, [r0, #2]
2000055c:	70c5      	strb	r5, [r0, #3]
2000055e:	3004      	adds	r0, #4
20000560:	2908      	cmp	r1, #8
20000562:	d90a      	bls.n	2000057a <RenderDText_Last+0x50>
20000564:	cb40      	ldmia	r3!, {r6}
20000566:	4066      	eors	r6, r4
20000568:	687f      	ldr	r7, [r7, #4]
2000056a:	4037      	ands	r7, r6
2000056c:	4067      	eors	r7, r4
2000056e:	7007      	strb	r7, [r0, #0]
20000570:	7047      	strb	r7, [r0, #1]
20000572:	0a3f      	lsrs	r7, r7, #8
20000574:	7087      	strb	r7, [r0, #2]
20000576:	70c7      	strb	r7, [r0, #3]
20000578:	3004      	adds	r0, #4
2000057a:	bc80      	pop	{r7}
2000057c:	9a02      	ldr	r2, [sp, #8]
2000057e:	9b01      	ldr	r3, [sp, #4]
20000580:	2f10      	cmp	r7, #16
20000582:	d2c9      	bcs.n	20000518 <RenderDText_OutLoop>
20000584:	bc10      	pop	{r4}
20000586:	46a0      	mov	r8, r4
20000588:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
2000058a:	08b9      	lsrs	r1, r7, #2
2000058c:	008d      	lsls	r5, r1, #2
2000058e:	1b76      	subs	r6, r6, r5
20000590:	9603      	str	r6, [sp, #12]
20000592:	3903      	subs	r1, #3

20000594 <RenderDText_InLoop>:
20000594:	7817      	ldrb	r7, [r2, #0]
20000596:	3201      	adds	r2, #1
20000598:	4447      	add	r7, r8
2000059a:	783f      	ldrb	r7, [r7, #0]
2000059c:	cb40      	ldmia	r3!, {r6}
2000059e:	4066      	eors	r6, r4
200005a0:	00ff      	lsls	r7, r7, #3
200005a2:	4477      	add	r7, lr
200005a4:	683d      	ldr	r5, [r7, #0]
200005a6:	4035      	ands	r5, r6
200005a8:	4065      	eors	r5, r4
200005aa:	7005      	strb	r5, [r0, #0]
200005ac:	7045      	strb	r5, [r0, #1]
200005ae:	0a2d      	lsrs	r5, r5, #8
200005b0:	7085      	strb	r5, [r0, #2]
200005b2:	70c5      	strb	r5, [r0, #3]
200005b4:	0a2d      	lsrs	r5, r5, #8
200005b6:	7105      	strb	r5, [r0, #4]
200005b8:	7145      	strb	r5, [r0, #5]
200005ba:	0a2d      	lsrs	r5, r5, #8
200005bc:	7185      	strb	r5, [r0, #6]
200005be:	71c5      	strb	r5, [r0, #7]
200005c0:	3008      	adds	r0, #8
200005c2:	cb40      	ldmia	r3!, {r6}
200005c4:	4066      	eors	r6, r4
200005c6:	687f      	ldr	r7, [r7, #4]
200005c8:	4037      	ands	r7, r6
200005ca:	4067      	eors	r7, r4
200005cc:	7007      	strb	r7, [r0, #0]
200005ce:	7047      	strb	r7, [r0, #1]
200005d0:	0a3f      	lsrs	r7, r7, #8
200005d2:	7087      	strb	r7, [r0, #2]
200005d4:	70c7      	strb	r7, [r0, #3]
200005d6:	0a3f      	lsrs	r7, r7, #8
200005d8:	7107      	strb	r7, [r0, #4]
200005da:	7147      	strb	r7, [r0, #5]
200005dc:	0a3f      	lsrs	r7, r7, #8
200005de:	7187      	strb	r7, [r0, #6]
200005e0:	71c7      	strb	r7, [r0, #7]
200005e2:	3008      	adds	r0, #8
200005e4:	3904      	subs	r1, #4
200005e6:	d8d5      	bhi.n	20000594 <RenderDText_InLoop>
200005e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
200005ea:	3103      	adds	r1, #3
200005ec:	0089      	lsls	r1, r1, #2
200005ee:	d19c      	bne.n	2000052a <RenderDText_Last>
200005f0:	9a02      	ldr	r2, [sp, #8]
200005f2:	9b01      	ldr	r3, [sp, #4]
200005f4:	e790      	b.n	20000518 <RenderDText_OutLoop>
200005f6:	46c0      	nop			; (mov r8, r8)

200005f8 <RenderDText_Addr>:
200005f8:	2001c074 	.word	0x2001c074

200005fc <RenderDText_pSioBase>:
200005fc:	d0000000 	.word	0xd0000000

20000600 <RenderFastSprite>:
20000600:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000602:	6817      	ldr	r7, [r2, #0]
20000604:	46be      	mov	lr, r7
20000606:	8c17      	ldrh	r7, [r2, #32]
20000608:	9701      	str	r7, [sp, #4]
2000060a:	8ad2      	ldrh	r2, [r2, #22]
2000060c:	2100      	movs	r1, #0
2000060e:	9f01      	ldr	r7, [sp, #4]
20000610:	3f01      	subs	r7, #1
20000612:	d332      	bcc.n	2000067a <RenderFastSprite+0x7a>
20000614:	9701      	str	r7, [sp, #4]
20000616:	4677      	mov	r7, lr
20000618:	cf08      	ldmia	r7!, {r3}
2000061a:	46be      	mov	lr, r7
2000061c:	8a5f      	ldrh	r7, [r3, #18]
2000061e:	b23f      	sxth	r7, r7
20000620:	9c00      	ldr	r4, [sp, #0]
20000622:	1be4      	subs	r4, r4, r7
20000624:	d4f3      	bmi.n	2000060e <RenderFastSprite+0xe>
20000626:	8adf      	ldrh	r7, [r3, #22]
20000628:	42bc      	cmp	r4, r7
2000062a:	daf0      	bge.n	2000060e <RenderFastSprite+0xe>
2000062c:	685f      	ldr	r7, [r3, #4]
2000062e:	5d3d      	ldrb	r5, [r7, r4]
20000630:	00ad      	lsls	r5, r5, #2
20000632:	689f      	ldr	r7, [r3, #8]
20000634:	5d3e      	ldrb	r6, [r7, r4]
20000636:	00b6      	lsls	r6, r6, #2
20000638:	8b1f      	ldrh	r7, [r3, #24]
2000063a:	437c      	muls	r4, r7
2000063c:	681f      	ldr	r7, [r3, #0]
2000063e:	443c      	add	r4, r7
20000640:	8a1b      	ldrh	r3, [r3, #16]
20000642:	b21b      	sxth	r3, r3
20000644:	195b      	adds	r3, r3, r5
20000646:	1acf      	subs	r7, r1, r3
20000648:	dd02      	ble.n	20000650 <RenderFastSprite+0x50>
2000064a:	19ed      	adds	r5, r5, r7
2000064c:	1bf6      	subs	r6, r6, r7
2000064e:	460b      	mov	r3, r1
20000650:	1ad7      	subs	r7, r2, r3
20000652:	42be      	cmp	r6, r7
20000654:	dd00      	ble.n	20000658 <RenderFastSprite+0x58>
20000656:	463e      	mov	r6, r7
20000658:	2703      	movs	r7, #3
2000065a:	43bb      	bics	r3, r7
2000065c:	43bd      	bics	r5, r7
2000065e:	43be      	bics	r6, r7
20000660:	ddd5      	ble.n	2000060e <RenderFastSprite+0xe>
20000662:	1a5f      	subs	r7, r3, r1
20000664:	dd04      	ble.n	20000670 <RenderFastSprite+0x70>
20000666:	08bf      	lsrs	r7, r7, #2
20000668:	c080      	stmia	r0!, {r7}
2000066a:	9f02      	ldr	r7, [sp, #8]
2000066c:	c080      	stmia	r0!, {r7}
2000066e:	4619      	mov	r1, r3
20000670:	1967      	adds	r7, r4, r5
20000672:	08b4      	lsrs	r4, r6, #2
20000674:	c090      	stmia	r0!, {r4, r7}
20000676:	1989      	adds	r1, r1, r6
20000678:	e7c9      	b.n	2000060e <RenderFastSprite+0xe>
2000067a:	1a52      	subs	r2, r2, r1
2000067c:	d902      	bls.n	20000684 <RenderFastSprite+0x84>
2000067e:	0892      	lsrs	r2, r2, #2
20000680:	9b02      	ldr	r3, [sp, #8]
20000682:	c00c      	stmia	r0!, {r2, r3}
20000684:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

20000688 <RenderFText>:
20000688:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
2000068a:	9c08      	ldr	r4, [sp, #32]
2000068c:	4e3a      	ldr	r6, [pc, #232]	; (20000778 <RenderFText_pSioBase>)
2000068e:	6632      	str	r2, [r6, #96]	; 0x60
20000690:	8a62      	ldrh	r2, [r4, #18]
20000692:	6672      	str	r2, [r6, #100]	; 0x64
20000694:	8925      	ldrh	r5, [r4, #8]
20000696:	2703      	movs	r7, #3
20000698:	43bd      	bics	r5, r7
2000069a:	9508      	str	r5, [sp, #32]
2000069c:	43b9      	bics	r1, r7
2000069e:	43bb      	bics	r3, r7
200006a0:	9302      	str	r3, [sp, #8]
200006a2:	6f75      	ldr	r5, [r6, #116]	; 0x74
200006a4:	6f32      	ldr	r2, [r6, #112]	; 0x70
200006a6:	022d      	lsls	r5, r5, #8
200006a8:	6963      	ldr	r3, [r4, #20]
200006aa:	442b      	add	r3, r5
200006ac:	8865      	ldrh	r5, [r4, #2]
200006ae:	436a      	muls	r2, r5
200006b0:	68e5      	ldr	r5, [r4, #12]
200006b2:	442a      	add	r2, r5
200006b4:	9201      	str	r2, [sp, #4]
200006b6:	08ce      	lsrs	r6, r1, #3
200006b8:	0076      	lsls	r6, r6, #1
200006ba:	4432      	add	r2, r6
200006bc:	7e24      	ldrb	r4, [r4, #24]
200006be:	0225      	lsls	r5, r4, #8
200006c0:	4325      	orrs	r5, r4
200006c2:	042c      	lsls	r4, r5, #16
200006c4:	432c      	orrs	r4, r5
200006c6:	4d2b      	ldr	r5, [pc, #172]	; (20000774 <RenderFText_Addr>)
200006c8:	46ae      	mov	lr, r5
200006ca:	074e      	lsls	r6, r1, #29
200006cc:	d517      	bpl.n	200006fe <RenderFText+0x76>
200006ce:	7815      	ldrb	r5, [r2, #0]
200006d0:	5d5d      	ldrb	r5, [r3, r5]
200006d2:	7856      	ldrb	r6, [r2, #1]
200006d4:	3202      	adds	r2, #2
200006d6:	0237      	lsls	r7, r6, #8
200006d8:	4337      	orrs	r7, r6
200006da:	043e      	lsls	r6, r7, #16
200006dc:	433e      	orrs	r6, r7
200006de:	4066      	eors	r6, r4
200006e0:	00ed      	lsls	r5, r5, #3
200006e2:	4475      	add	r5, lr
200006e4:	686f      	ldr	r7, [r5, #4]
200006e6:	4037      	ands	r7, r6
200006e8:	4067      	eors	r7, r4
200006ea:	c080      	stmia	r0!, {r7}
200006ec:	3104      	adds	r1, #4
200006ee:	9f08      	ldr	r7, [sp, #32]
200006f0:	42b9      	cmp	r1, r7
200006f2:	d301      	bcc.n	200006f8 <RenderFText+0x70>
200006f4:	2100      	movs	r1, #0
200006f6:	9a01      	ldr	r2, [sp, #4]
200006f8:	9f02      	ldr	r7, [sp, #8]
200006fa:	3f04      	subs	r7, #4
200006fc:	9702      	str	r7, [sp, #8]
200006fe:	9f08      	ldr	r7, [sp, #32]
20000700:	1a7f      	subs	r7, r7, r1

20000702 <RenderFText_OutLoop>:
20000702:	9e02      	ldr	r6, [sp, #8]
20000704:	42b7      	cmp	r7, r6
20000706:	d900      	bls.n	2000070a <RenderFText_OutLoop+0x8>
20000708:	4637      	mov	r7, r6
2000070a:	2f08      	cmp	r7, #8
2000070c:	d214      	bcs.n	20000738 <RenderFText_Last+0x26>
2000070e:	2f04      	cmp	r7, #4
20000710:	d311      	bcc.n	20000736 <RenderFText_Last+0x24>

20000712 <RenderFText_Last>:
20000712:	7815      	ldrb	r5, [r2, #0]
20000714:	5d5d      	ldrb	r5, [r3, r5]
20000716:	7856      	ldrb	r6, [r2, #1]
20000718:	3202      	adds	r2, #2
2000071a:	0231      	lsls	r1, r6, #8
2000071c:	4331      	orrs	r1, r6
2000071e:	040e      	lsls	r6, r1, #16
20000720:	430e      	orrs	r6, r1
20000722:	4066      	eors	r6, r4
20000724:	00ed      	lsls	r5, r5, #3
20000726:	4475      	add	r5, lr
20000728:	6829      	ldr	r1, [r5, #0]
2000072a:	4031      	ands	r1, r6
2000072c:	4061      	eors	r1, r4
2000072e:	c002      	stmia	r0!, {r1}
20000730:	9a01      	ldr	r2, [sp, #4]
20000732:	2f04      	cmp	r7, #4
20000734:	d8e5      	bhi.n	20000702 <RenderFText_OutLoop>
20000736:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000738:	08b9      	lsrs	r1, r7, #2
2000073a:	008d      	lsls	r5, r1, #2
2000073c:	1b76      	subs	r6, r6, r5
2000073e:	9602      	str	r6, [sp, #8]
20000740:	3901      	subs	r1, #1

20000742 <RenderFText_InLoop>:
20000742:	7815      	ldrb	r5, [r2, #0]
20000744:	5d5d      	ldrb	r5, [r3, r5]
20000746:	7856      	ldrb	r6, [r2, #1]
20000748:	3202      	adds	r2, #2
2000074a:	0237      	lsls	r7, r6, #8
2000074c:	4337      	orrs	r7, r6
2000074e:	043e      	lsls	r6, r7, #16
20000750:	433e      	orrs	r6, r7
20000752:	4066      	eors	r6, r4
20000754:	00ed      	lsls	r5, r5, #3
20000756:	4475      	add	r5, lr
20000758:	682f      	ldr	r7, [r5, #0]
2000075a:	4037      	ands	r7, r6
2000075c:	4067      	eors	r7, r4
2000075e:	c080      	stmia	r0!, {r7}
20000760:	686f      	ldr	r7, [r5, #4]
20000762:	4037      	ands	r7, r6
20000764:	4067      	eors	r7, r4
20000766:	c080      	stmia	r0!, {r7}
20000768:	3902      	subs	r1, #2
2000076a:	d8ea      	bhi.n	20000742 <RenderFText_InLoop>
2000076c:	9f08      	ldr	r7, [sp, #32]
2000076e:	d0d0      	beq.n	20000712 <RenderFText_Last>
20000770:	9a01      	ldr	r2, [sp, #4]
20000772:	e7c6      	b.n	20000702 <RenderFText_OutLoop>

20000774 <RenderFText_Addr>:
20000774:	2001c074 	.word	0x2001c074

20000778 <RenderFText_pSioBase>:
20000778:	d0000000 	.word	0xd0000000

2000077c <RenderGraph1>:
2000077c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000077e:	9c06      	ldr	r4, [sp, #24]
20000780:	8925      	ldrh	r5, [r4, #8]
20000782:	2703      	movs	r7, #3
20000784:	43bd      	bics	r5, r7
20000786:	9506      	str	r5, [sp, #24]
20000788:	43b9      	bics	r1, r7
2000078a:	43bb      	bics	r3, r7
2000078c:	9300      	str	r3, [sp, #0]
2000078e:	8865      	ldrh	r5, [r4, #2]
20000790:	436a      	muls	r2, r5
20000792:	68e5      	ldr	r5, [r4, #12]
20000794:	442a      	add	r2, r5
20000796:	4696      	mov	lr, r2
20000798:	08ca      	lsrs	r2, r1, #3
2000079a:	4472      	add	r2, lr
2000079c:	7d66      	ldrb	r6, [r4, #21]
2000079e:	0237      	lsls	r7, r6, #8
200007a0:	4337      	orrs	r7, r6
200007a2:	043e      	lsls	r6, r7, #16
200007a4:	433e      	orrs	r6, r7
200007a6:	7d24      	ldrb	r4, [r4, #20]
200007a8:	0225      	lsls	r5, r4, #8
200007aa:	4325      	orrs	r5, r4
200007ac:	042c      	lsls	r4, r5, #16
200007ae:	432c      	orrs	r4, r5
200007b0:	4066      	eors	r6, r4
200007b2:	4b20      	ldr	r3, [pc, #128]	; (20000834 <RenderGraph1_Addr>)
200007b4:	074d      	lsls	r5, r1, #29
200007b6:	d510      	bpl.n	200007da <RenderGraph1+0x5e>
200007b8:	7815      	ldrb	r5, [r2, #0]
200007ba:	3201      	adds	r2, #1
200007bc:	00ed      	lsls	r5, r5, #3
200007be:	441d      	add	r5, r3
200007c0:	686f      	ldr	r7, [r5, #4]
200007c2:	4037      	ands	r7, r6
200007c4:	4067      	eors	r7, r4
200007c6:	c080      	stmia	r0!, {r7}
200007c8:	3104      	adds	r1, #4
200007ca:	9f06      	ldr	r7, [sp, #24]
200007cc:	42b9      	cmp	r1, r7
200007ce:	d301      	bcc.n	200007d4 <RenderGraph1+0x58>
200007d0:	2100      	movs	r1, #0
200007d2:	4672      	mov	r2, lr
200007d4:	9f00      	ldr	r7, [sp, #0]
200007d6:	3f04      	subs	r7, #4
200007d8:	9700      	str	r7, [sp, #0]
200007da:	9f06      	ldr	r7, [sp, #24]
200007dc:	1a7f      	subs	r7, r7, r1

200007de <RenderGraph1_OutLoop>:
200007de:	9d00      	ldr	r5, [sp, #0]
200007e0:	42af      	cmp	r7, r5
200007e2:	d900      	bls.n	200007e6 <RenderGraph1_OutLoop+0x8>
200007e4:	462f      	mov	r7, r5
200007e6:	2f08      	cmp	r7, #8
200007e8:	d20d      	bcs.n	20000806 <RenderGraph1_Last+0x18>
200007ea:	2f04      	cmp	r7, #4
200007ec:	d30a      	bcc.n	20000804 <RenderGraph1_Last+0x16>

200007ee <RenderGraph1_Last>:
200007ee:	7815      	ldrb	r5, [r2, #0]
200007f0:	3201      	adds	r2, #1
200007f2:	00ed      	lsls	r5, r5, #3
200007f4:	441d      	add	r5, r3
200007f6:	6829      	ldr	r1, [r5, #0]
200007f8:	4031      	ands	r1, r6
200007fa:	4061      	eors	r1, r4
200007fc:	c002      	stmia	r0!, {r1}
200007fe:	4672      	mov	r2, lr
20000800:	2f04      	cmp	r7, #4
20000802:	d8ec      	bhi.n	200007de <RenderGraph1_OutLoop>
20000804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20000806:	08b9      	lsrs	r1, r7, #2
20000808:	008f      	lsls	r7, r1, #2
2000080a:	1bed      	subs	r5, r5, r7
2000080c:	9500      	str	r5, [sp, #0]
2000080e:	3901      	subs	r1, #1

20000810 <RenderGraph1_InLoop>:
20000810:	7815      	ldrb	r5, [r2, #0]
20000812:	3201      	adds	r2, #1
20000814:	00ed      	lsls	r5, r5, #3
20000816:	441d      	add	r5, r3
20000818:	682f      	ldr	r7, [r5, #0]
2000081a:	4037      	ands	r7, r6
2000081c:	4067      	eors	r7, r4
2000081e:	c080      	stmia	r0!, {r7}
20000820:	686f      	ldr	r7, [r5, #4]
20000822:	4037      	ands	r7, r6
20000824:	4067      	eors	r7, r4
20000826:	c080      	stmia	r0!, {r7}
20000828:	3902      	subs	r1, #2
2000082a:	d8f1      	bhi.n	20000810 <RenderGraph1_InLoop>
2000082c:	9f06      	ldr	r7, [sp, #24]
2000082e:	d0de      	beq.n	200007ee <RenderGraph1_Last>
20000830:	4672      	mov	r2, lr
20000832:	e7d4      	b.n	200007de <RenderGraph1_OutLoop>

20000834 <RenderGraph1_Addr>:
20000834:	2001c074 	.word	0x2001c074

20000838 <RenderGraph2>:
20000838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000083a:	9c06      	ldr	r4, [sp, #24]
2000083c:	8927      	ldrh	r7, [r4, #8]
2000083e:	2603      	movs	r6, #3
20000840:	43b7      	bics	r7, r6
20000842:	43b1      	bics	r1, r6
20000844:	43b3      	bics	r3, r6
20000846:	9300      	str	r3, [sp, #0]
20000848:	8865      	ldrh	r5, [r4, #2]
2000084a:	436a      	muls	r2, r5
2000084c:	68e5      	ldr	r5, [r4, #12]
2000084e:	442a      	add	r2, r5
20000850:	4696      	mov	lr, r2
20000852:	088e      	lsrs	r6, r1, #2
20000854:	4432      	add	r2, r6
20000856:	6963      	ldr	r3, [r4, #20]
20000858:	1a7e      	subs	r6, r7, r1

2000085a <RenderGraph2_OutLoop>:
2000085a:	9c00      	ldr	r4, [sp, #0]
2000085c:	42a6      	cmp	r6, r4
2000085e:	d900      	bls.n	20000862 <RenderGraph2_OutLoop+0x8>
20000860:	4626      	mov	r6, r4
20000862:	2e04      	cmp	r6, #4
20000864:	d200      	bcs.n	20000868 <RenderGraph2_OutLoop+0xe>
20000866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20000868:	08b1      	lsrs	r1, r6, #2
2000086a:	008e      	lsls	r6, r1, #2
2000086c:	1ba4      	subs	r4, r4, r6
2000086e:	9400      	str	r4, [sp, #0]
20000870:	0849      	lsrs	r1, r1, #1
20000872:	d306      	bcc.n	20000882 <RenderGraph2_InLoop>
20000874:	7814      	ldrb	r4, [r2, #0]
20000876:	3201      	adds	r2, #1
20000878:	00a4      	lsls	r4, r4, #2
2000087a:	591d      	ldr	r5, [r3, r4]
2000087c:	c020      	stmia	r0!, {r5}
2000087e:	4209      	tst	r1, r1
20000880:	d009      	beq.n	20000896 <RenderGraph2_EndLoop>

20000882 <RenderGraph2_InLoop>:
20000882:	7814      	ldrb	r4, [r2, #0]
20000884:	00a4      	lsls	r4, r4, #2
20000886:	591d      	ldr	r5, [r3, r4]
20000888:	7854      	ldrb	r4, [r2, #1]
2000088a:	3202      	adds	r2, #2
2000088c:	00a4      	lsls	r4, r4, #2
2000088e:	591e      	ldr	r6, [r3, r4]
20000890:	c060      	stmia	r0!, {r5, r6}
20000892:	3901      	subs	r1, #1
20000894:	d1f5      	bne.n	20000882 <RenderGraph2_InLoop>

20000896 <RenderGraph2_EndLoop>:
20000896:	463e      	mov	r6, r7
20000898:	4672      	mov	r2, lr
2000089a:	e7de      	b.n	2000085a <RenderGraph2_OutLoop>

2000089c <RenderGraph4>:
2000089c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000089e:	9c06      	ldr	r4, [sp, #24]
200008a0:	8927      	ldrh	r7, [r4, #8]
200008a2:	2603      	movs	r6, #3
200008a4:	43b7      	bics	r7, r6
200008a6:	9706      	str	r7, [sp, #24]
200008a8:	43b1      	bics	r1, r6
200008aa:	43b3      	bics	r3, r6
200008ac:	9300      	str	r3, [sp, #0]
200008ae:	8865      	ldrh	r5, [r4, #2]
200008b0:	436a      	muls	r2, r5
200008b2:	68e5      	ldr	r5, [r4, #12]
200008b4:	442a      	add	r2, r5
200008b6:	4696      	mov	lr, r2
200008b8:	084e      	lsrs	r6, r1, #1
200008ba:	4432      	add	r2, r6
200008bc:	6963      	ldr	r3, [r4, #20]
200008be:	9e06      	ldr	r6, [sp, #24]
200008c0:	1a76      	subs	r6, r6, r1

200008c2 <RenderGraph4_OutLoop>:
200008c2:	9c00      	ldr	r4, [sp, #0]
200008c4:	42a6      	cmp	r6, r4
200008c6:	d900      	bls.n	200008ca <RenderGraph4_OutLoop+0x8>
200008c8:	4626      	mov	r6, r4
200008ca:	2e04      	cmp	r6, #4
200008cc:	d200      	bcs.n	200008d0 <RenderGraph4_OutLoop+0xe>
200008ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
200008d0:	08b1      	lsrs	r1, r6, #2
200008d2:	008e      	lsls	r6, r1, #2
200008d4:	1ba4      	subs	r4, r4, r6
200008d6:	9400      	str	r4, [sp, #0]
200008d8:	0849      	lsrs	r1, r1, #1
200008da:	d30b      	bcc.n	200008f4 <RenderGraph4_InLoop>
200008dc:	7814      	ldrb	r4, [r2, #0]
200008de:	0064      	lsls	r4, r4, #1
200008e0:	5b1d      	ldrh	r5, [r3, r4]
200008e2:	7854      	ldrb	r4, [r2, #1]
200008e4:	3202      	adds	r2, #2
200008e6:	0064      	lsls	r4, r4, #1
200008e8:	5b1e      	ldrh	r6, [r3, r4]
200008ea:	0436      	lsls	r6, r6, #16
200008ec:	4335      	orrs	r5, r6
200008ee:	c020      	stmia	r0!, {r5}
200008f0:	4209      	tst	r1, r1
200008f2:	d013      	beq.n	2000091c <RenderGraph4_EndLoop>

200008f4 <RenderGraph4_InLoop>:
200008f4:	7814      	ldrb	r4, [r2, #0]
200008f6:	0064      	lsls	r4, r4, #1
200008f8:	5b1d      	ldrh	r5, [r3, r4]
200008fa:	7854      	ldrb	r4, [r2, #1]
200008fc:	0064      	lsls	r4, r4, #1
200008fe:	5b1e      	ldrh	r6, [r3, r4]
20000900:	0436      	lsls	r6, r6, #16
20000902:	4335      	orrs	r5, r6
20000904:	7894      	ldrb	r4, [r2, #2]
20000906:	0064      	lsls	r4, r4, #1
20000908:	5b1e      	ldrh	r6, [r3, r4]
2000090a:	78d4      	ldrb	r4, [r2, #3]
2000090c:	3204      	adds	r2, #4
2000090e:	0064      	lsls	r4, r4, #1
20000910:	5b1f      	ldrh	r7, [r3, r4]
20000912:	043f      	lsls	r7, r7, #16
20000914:	433e      	orrs	r6, r7
20000916:	c060      	stmia	r0!, {r5, r6}
20000918:	3901      	subs	r1, #1
2000091a:	d1eb      	bne.n	200008f4 <RenderGraph4_InLoop>

2000091c <RenderGraph4_EndLoop>:
2000091c:	9e06      	ldr	r6, [sp, #24]
2000091e:	4672      	mov	r2, lr
20000920:	e7cf      	b.n	200008c2 <RenderGraph4_OutLoop>

20000922 <RenderGrad1>:
20000922:	2200      	movs	r2, #0

20000924 <RenderGrad2>:
20000924:	07d2      	lsls	r2, r2, #31
20000926:	0fd2      	lsrs	r2, r2, #31

20000928 <RenderGraph8>:
20000928:	b5f0      	push	{r4, r5, r6, r7, lr}
2000092a:	9c05      	ldr	r4, [sp, #20]
2000092c:	8927      	ldrh	r7, [r4, #8]
2000092e:	2603      	movs	r6, #3
20000930:	43b7      	bics	r7, r6
20000932:	43b1      	bics	r1, r6
20000934:	43b3      	bics	r3, r6
20000936:	8865      	ldrh	r5, [r4, #2]
20000938:	436a      	muls	r2, r5
2000093a:	68e5      	ldr	r5, [r4, #12]
2000093c:	1954      	adds	r4, r2, r5
2000093e:	1862      	adds	r2, r4, r1
20000940:	1a79      	subs	r1, r7, r1
20000942:	421b      	tst	r3, r3
20000944:	d008      	beq.n	20000958 <RenderGraph8+0x30>
20000946:	4299      	cmp	r1, r3
20000948:	d900      	bls.n	2000094c <RenderGraph8+0x24>
2000094a:	4619      	mov	r1, r3
2000094c:	1a5b      	subs	r3, r3, r1
2000094e:	0889      	lsrs	r1, r1, #2
20000950:	c006      	stmia	r0!, {r1, r2}
20000952:	4639      	mov	r1, r7
20000954:	4622      	mov	r2, r4
20000956:	e7f4      	b.n	20000942 <RenderGraph8+0x1a>
20000958:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

2000095c <RenderGraph8Mat>:
2000095c:	b5f0      	push	{r4, r5, r6, r7, lr}
2000095e:	0859      	lsrs	r1, r3, #1
20000960:	4249      	negs	r1, r1
20000962:	468e      	mov	lr, r1
20000964:	089f      	lsrs	r7, r3, #2
20000966:	9c05      	ldr	r4, [sp, #20]
20000968:	8961      	ldrh	r1, [r4, #10]
2000096a:	0849      	lsrs	r1, r1, #1
2000096c:	4249      	negs	r1, r1
2000096e:	1889      	adds	r1, r1, r2
20000970:	468c      	mov	ip, r1
20000972:	8b21      	ldrh	r1, [r4, #24]
20000974:	8b62      	ldrh	r2, [r4, #26]
20000976:	4b2c      	ldr	r3, [pc, #176]	; (20000a28 <RenderGraph8Mat_Interp>)
20000978:	68e6      	ldr	r6, [r4, #12]
2000097a:	611e      	str	r6, [r3, #16]
2000097c:	4e2b      	ldr	r6, [pc, #172]	; (20000a2c <RenderGraph8Mat_Ctrl>)
2000097e:	1a76      	subs	r6, r6, r1
20000980:	014d      	lsls	r5, r1, #5
20000982:	432e      	orrs	r6, r5
20000984:	3901      	subs	r1, #1
20000986:	188d      	adds	r5, r1, r2
20000988:	02ad      	lsls	r5, r5, #10
2000098a:	432e      	orrs	r6, r5
2000098c:	631e      	str	r6, [r3, #48]	; 0x30
2000098e:	4e27      	ldr	r6, [pc, #156]	; (20000a2c <RenderGraph8Mat_Ctrl>)
20000990:	0289      	lsls	r1, r1, #10
20000992:	430e      	orrs	r6, r1
20000994:	62de      	str	r6, [r3, #44]	; 0x2c
20000996:	6964      	ldr	r4, [r4, #20]
20000998:	6825      	ldr	r5, [r4, #0]
2000099a:	609d      	str	r5, [r3, #8]
2000099c:	68e6      	ldr	r6, [r4, #12]
2000099e:	60de      	str	r6, [r3, #12]
200009a0:	4672      	mov	r2, lr
200009a2:	4355      	muls	r5, r2
200009a4:	4372      	muls	r2, r6
200009a6:	6861      	ldr	r1, [r4, #4]
200009a8:	4666      	mov	r6, ip
200009aa:	4371      	muls	r1, r6
200009ac:	186d      	adds	r5, r5, r1
200009ae:	68a1      	ldr	r1, [r4, #8]
200009b0:	186d      	adds	r5, r5, r1
200009b2:	601d      	str	r5, [r3, #0]
200009b4:	6921      	ldr	r1, [r4, #16]
200009b6:	4371      	muls	r1, r6
200009b8:	1852      	adds	r2, r2, r1
200009ba:	6961      	ldr	r1, [r4, #20]
200009bc:	1852      	adds	r2, r2, r1
200009be:	605a      	str	r2, [r3, #4]
200009c0:	087f      	lsrs	r7, r7, #1
200009c2:	d30e      	bcc.n	200009e2 <RenderGraph8Mat+0x86>
200009c4:	69dc      	ldr	r4, [r3, #28]
200009c6:	7826      	ldrb	r6, [r4, #0]
200009c8:	69dc      	ldr	r4, [r3, #28]
200009ca:	7825      	ldrb	r5, [r4, #0]
200009cc:	022d      	lsls	r5, r5, #8
200009ce:	432e      	orrs	r6, r5
200009d0:	69dc      	ldr	r4, [r3, #28]
200009d2:	7825      	ldrb	r5, [r4, #0]
200009d4:	042d      	lsls	r5, r5, #16
200009d6:	432e      	orrs	r6, r5
200009d8:	69dc      	ldr	r4, [r3, #28]
200009da:	7825      	ldrb	r5, [r4, #0]
200009dc:	062d      	lsls	r5, r5, #24
200009de:	432e      	orrs	r6, r5
200009e0:	c040      	stmia	r0!, {r6}
200009e2:	423f      	tst	r7, r7
200009e4:	d01e      	beq.n	20000a24 <RenderGraph8Mat+0xc8>
200009e6:	69dc      	ldr	r4, [r3, #28]
200009e8:	7821      	ldrb	r1, [r4, #0]
200009ea:	69dc      	ldr	r4, [r3, #28]
200009ec:	7824      	ldrb	r4, [r4, #0]
200009ee:	0224      	lsls	r4, r4, #8
200009f0:	4321      	orrs	r1, r4
200009f2:	69dc      	ldr	r4, [r3, #28]
200009f4:	7824      	ldrb	r4, [r4, #0]
200009f6:	0424      	lsls	r4, r4, #16
200009f8:	4321      	orrs	r1, r4
200009fa:	69dc      	ldr	r4, [r3, #28]
200009fc:	7824      	ldrb	r4, [r4, #0]
200009fe:	0624      	lsls	r4, r4, #24
20000a00:	4321      	orrs	r1, r4
20000a02:	69dc      	ldr	r4, [r3, #28]
20000a04:	7822      	ldrb	r2, [r4, #0]
20000a06:	69dc      	ldr	r4, [r3, #28]
20000a08:	7824      	ldrb	r4, [r4, #0]
20000a0a:	0224      	lsls	r4, r4, #8
20000a0c:	4322      	orrs	r2, r4
20000a0e:	69dc      	ldr	r4, [r3, #28]
20000a10:	7824      	ldrb	r4, [r4, #0]
20000a12:	0424      	lsls	r4, r4, #16
20000a14:	4322      	orrs	r2, r4
20000a16:	69dc      	ldr	r4, [r3, #28]
20000a18:	7824      	ldrb	r4, [r4, #0]
20000a1a:	0624      	lsls	r4, r4, #24
20000a1c:	4322      	orrs	r2, r4
20000a1e:	c006      	stmia	r0!, {r1, r2}
20000a20:	3f01      	subs	r7, #1
20000a22:	d1e0      	bne.n	200009e6 <RenderGraph8Mat+0x8a>
20000a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000a26:	46c0      	nop			; (mov r8, r8)

20000a28 <RenderGraph8Mat_Interp>:
20000a28:	d00000c0 	.word	0xd00000c0

20000a2c <RenderGraph8Mat_Ctrl>:
20000a2c:	0004000c 	.word	0x0004000c

20000a30 <RenderGraph8Persp>:
20000a30:	b5f0      	push	{r4, r5, r6, r7, lr}
20000a32:	9c05      	ldr	r4, [sp, #20]
20000a34:	8961      	ldrh	r1, [r4, #10]
20000a36:	1a52      	subs	r2, r2, r1
20000a38:	4694      	mov	ip, r2
20000a3a:	030e      	lsls	r6, r1, #12
20000a3c:	4d38      	ldr	r5, [pc, #224]	; (20000b20 <RenderGraph8Persp_pSioBase>)
20000a3e:	662e      	str	r6, [r5, #96]	; 0x60
20000a40:	8a66      	ldrh	r6, [r4, #18]
20000a42:	1852      	adds	r2, r2, r1
20000a44:	18b6      	adds	r6, r6, r2
20000a46:	3601      	adds	r6, #1
20000a48:	666e      	str	r6, [r5, #100]	; 0x64
20000a4a:	085d      	lsrs	r5, r3, #1
20000a4c:	426d      	negs	r5, r5
20000a4e:	46ae      	mov	lr, r5
20000a50:	089f      	lsrs	r7, r3, #2
20000a52:	8b21      	ldrh	r1, [r4, #24]
20000a54:	8b62      	ldrh	r2, [r4, #26]
20000a56:	4b33      	ldr	r3, [pc, #204]	; (20000b24 <RenderGraph8Persp_Interp>)
20000a58:	68e6      	ldr	r6, [r4, #12]
20000a5a:	611e      	str	r6, [r3, #16]
20000a5c:	4e32      	ldr	r6, [pc, #200]	; (20000b28 <RenderGraph8Persp_Ctrl>)
20000a5e:	1a76      	subs	r6, r6, r1
20000a60:	014d      	lsls	r5, r1, #5
20000a62:	432e      	orrs	r6, r5
20000a64:	3901      	subs	r1, #1
20000a66:	188d      	adds	r5, r1, r2
20000a68:	02ad      	lsls	r5, r5, #10
20000a6a:	432e      	orrs	r6, r5
20000a6c:	631e      	str	r6, [r3, #48]	; 0x30
20000a6e:	4e2e      	ldr	r6, [pc, #184]	; (20000b28 <RenderGraph8Persp_Ctrl>)
20000a70:	0289      	lsls	r1, r1, #10
20000a72:	430e      	orrs	r6, r1
20000a74:	62de      	str	r6, [r3, #44]	; 0x2c
20000a76:	6964      	ldr	r4, [r4, #20]
20000a78:	4929      	ldr	r1, [pc, #164]	; (20000b20 <RenderGraph8Persp_pSioBase>)
20000a7a:	6f09      	ldr	r1, [r1, #112]	; 0x70
20000a7c:	6825      	ldr	r5, [r4, #0]
20000a7e:	434d      	muls	r5, r1
20000a80:	132d      	asrs	r5, r5, #12
20000a82:	609d      	str	r5, [r3, #8]
20000a84:	68e6      	ldr	r6, [r4, #12]
20000a86:	434e      	muls	r6, r1
20000a88:	1336      	asrs	r6, r6, #12
20000a8a:	60de      	str	r6, [r3, #12]
20000a8c:	4672      	mov	r2, lr
20000a8e:	4355      	muls	r5, r2
20000a90:	4372      	muls	r2, r6
20000a92:	468e      	mov	lr, r1
20000a94:	6866      	ldr	r6, [r4, #4]
20000a96:	4371      	muls	r1, r6
20000a98:	1309      	asrs	r1, r1, #12
20000a9a:	4666      	mov	r6, ip
20000a9c:	4371      	muls	r1, r6
20000a9e:	186d      	adds	r5, r5, r1
20000aa0:	68a1      	ldr	r1, [r4, #8]
20000aa2:	186d      	adds	r5, r5, r1
20000aa4:	601d      	str	r5, [r3, #0]
20000aa6:	6921      	ldr	r1, [r4, #16]
20000aa8:	4675      	mov	r5, lr
20000aaa:	4369      	muls	r1, r5
20000aac:	1309      	asrs	r1, r1, #12
20000aae:	4371      	muls	r1, r6
20000ab0:	1852      	adds	r2, r2, r1
20000ab2:	6961      	ldr	r1, [r4, #20]
20000ab4:	1852      	adds	r2, r2, r1
20000ab6:	605a      	str	r2, [r3, #4]
20000ab8:	087f      	lsrs	r7, r7, #1
20000aba:	d30e      	bcc.n	20000ada <RenderGraph8Persp+0xaa>
20000abc:	69dc      	ldr	r4, [r3, #28]
20000abe:	7826      	ldrb	r6, [r4, #0]
20000ac0:	69dc      	ldr	r4, [r3, #28]
20000ac2:	7825      	ldrb	r5, [r4, #0]
20000ac4:	022d      	lsls	r5, r5, #8
20000ac6:	432e      	orrs	r6, r5
20000ac8:	69dc      	ldr	r4, [r3, #28]
20000aca:	7825      	ldrb	r5, [r4, #0]
20000acc:	042d      	lsls	r5, r5, #16
20000ace:	432e      	orrs	r6, r5
20000ad0:	69dc      	ldr	r4, [r3, #28]
20000ad2:	7825      	ldrb	r5, [r4, #0]
20000ad4:	062d      	lsls	r5, r5, #24
20000ad6:	432e      	orrs	r6, r5
20000ad8:	c040      	stmia	r0!, {r6}
20000ada:	423f      	tst	r7, r7
20000adc:	d01e      	beq.n	20000b1c <RenderGraph8Persp+0xec>
20000ade:	69dc      	ldr	r4, [r3, #28]
20000ae0:	7821      	ldrb	r1, [r4, #0]
20000ae2:	69dc      	ldr	r4, [r3, #28]
20000ae4:	7824      	ldrb	r4, [r4, #0]
20000ae6:	0224      	lsls	r4, r4, #8
20000ae8:	4321      	orrs	r1, r4
20000aea:	69dc      	ldr	r4, [r3, #28]
20000aec:	7824      	ldrb	r4, [r4, #0]
20000aee:	0424      	lsls	r4, r4, #16
20000af0:	4321      	orrs	r1, r4
20000af2:	69dc      	ldr	r4, [r3, #28]
20000af4:	7824      	ldrb	r4, [r4, #0]
20000af6:	0624      	lsls	r4, r4, #24
20000af8:	4321      	orrs	r1, r4
20000afa:	69dc      	ldr	r4, [r3, #28]
20000afc:	7822      	ldrb	r2, [r4, #0]
20000afe:	69dc      	ldr	r4, [r3, #28]
20000b00:	7824      	ldrb	r4, [r4, #0]
20000b02:	0224      	lsls	r4, r4, #8
20000b04:	4322      	orrs	r2, r4
20000b06:	69dc      	ldr	r4, [r3, #28]
20000b08:	7824      	ldrb	r4, [r4, #0]
20000b0a:	0424      	lsls	r4, r4, #16
20000b0c:	4322      	orrs	r2, r4
20000b0e:	69dc      	ldr	r4, [r3, #28]
20000b10:	7824      	ldrb	r4, [r4, #0]
20000b12:	0624      	lsls	r4, r4, #24
20000b14:	4322      	orrs	r2, r4
20000b16:	c006      	stmia	r0!, {r1, r2}
20000b18:	3f01      	subs	r7, #1
20000b1a:	d1e0      	bne.n	20000ade <RenderGraph8Persp+0xae>
20000b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000b1e:	46c0      	nop			; (mov r8, r8)

20000b20 <RenderGraph8Persp_pSioBase>:
20000b20:	d0000000 	.word	0xd0000000

20000b24 <RenderGraph8Persp_Interp>:
20000b24:	d00000c0 	.word	0xd00000c0

20000b28 <RenderGraph8Persp_Ctrl>:
20000b28:	0004000c 	.word	0x0004000c

20000b2c <RenderGText>:
20000b2c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000b2e:	4644      	mov	r4, r8
20000b30:	b410      	push	{r4}
20000b32:	9c09      	ldr	r4, [sp, #36]	; 0x24
20000b34:	4e3a      	ldr	r6, [pc, #232]	; (20000c20 <RenderGText_pSioBase>)
20000b36:	6632      	str	r2, [r6, #96]	; 0x60
20000b38:	8a62      	ldrh	r2, [r4, #18]
20000b3a:	6672      	str	r2, [r6, #100]	; 0x64
20000b3c:	8925      	ldrh	r5, [r4, #8]
20000b3e:	2703      	movs	r7, #3
20000b40:	43bd      	bics	r5, r7
20000b42:	9509      	str	r5, [sp, #36]	; 0x24
20000b44:	43b9      	bics	r1, r7
20000b46:	43bb      	bics	r3, r7
20000b48:	9303      	str	r3, [sp, #12]
20000b4a:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000b4c:	6f32      	ldr	r2, [r6, #112]	; 0x70
20000b4e:	022d      	lsls	r5, r5, #8
20000b50:	6963      	ldr	r3, [r4, #20]
20000b52:	442b      	add	r3, r5
20000b54:	4698      	mov	r8, r3
20000b56:	8865      	ldrh	r5, [r4, #2]
20000b58:	436a      	muls	r2, r5
20000b5a:	68e5      	ldr	r5, [r4, #12]
20000b5c:	442a      	add	r2, r5
20000b5e:	9202      	str	r2, [sp, #8]
20000b60:	69a3      	ldr	r3, [r4, #24]
20000b62:	9301      	str	r3, [sp, #4]
20000b64:	440b      	add	r3, r1
20000b66:	08ce      	lsrs	r6, r1, #3
20000b68:	4432      	add	r2, r6
20000b6a:	7ca4      	ldrb	r4, [r4, #18]
20000b6c:	0225      	lsls	r5, r4, #8
20000b6e:	4325      	orrs	r5, r4
20000b70:	042c      	lsls	r4, r5, #16
20000b72:	432c      	orrs	r4, r5
20000b74:	4d29      	ldr	r5, [pc, #164]	; (20000c1c <RenderGText_Addr>)
20000b76:	46ae      	mov	lr, r5
20000b78:	074e      	lsls	r6, r1, #29
20000b7a:	d515      	bpl.n	20000ba8 <RenderGText+0x7c>
20000b7c:	7815      	ldrb	r5, [r2, #0]
20000b7e:	3201      	adds	r2, #1
20000b80:	4445      	add	r5, r8
20000b82:	782d      	ldrb	r5, [r5, #0]
20000b84:	cb40      	ldmia	r3!, {r6}
20000b86:	4066      	eors	r6, r4
20000b88:	00ed      	lsls	r5, r5, #3
20000b8a:	4475      	add	r5, lr
20000b8c:	686f      	ldr	r7, [r5, #4]
20000b8e:	4037      	ands	r7, r6
20000b90:	4067      	eors	r7, r4
20000b92:	c080      	stmia	r0!, {r7}
20000b94:	3104      	adds	r1, #4
20000b96:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000b98:	42b9      	cmp	r1, r7
20000b9a:	d302      	bcc.n	20000ba2 <RenderGText+0x76>
20000b9c:	2100      	movs	r1, #0
20000b9e:	9a02      	ldr	r2, [sp, #8]
20000ba0:	9b01      	ldr	r3, [sp, #4]
20000ba2:	9f03      	ldr	r7, [sp, #12]
20000ba4:	3f04      	subs	r7, #4
20000ba6:	9703      	str	r7, [sp, #12]
20000ba8:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000baa:	1a7f      	subs	r7, r7, r1

20000bac <RenderGText_OutLoop>:
20000bac:	9e03      	ldr	r6, [sp, #12]
20000bae:	42b7      	cmp	r7, r6
20000bb0:	d900      	bls.n	20000bb4 <RenderGText_OutLoop+0x8>
20000bb2:	4637      	mov	r7, r6
20000bb4:	2f08      	cmp	r7, #8
20000bb6:	d214      	bcs.n	20000be2 <RenderGText_Last+0x26>
20000bb8:	2f04      	cmp	r7, #4
20000bba:	d30f      	bcc.n	20000bdc <RenderGText_Last+0x20>

20000bbc <RenderGText_Last>:
20000bbc:	7815      	ldrb	r5, [r2, #0]
20000bbe:	3201      	adds	r2, #1
20000bc0:	4445      	add	r5, r8
20000bc2:	782d      	ldrb	r5, [r5, #0]
20000bc4:	cb40      	ldmia	r3!, {r6}
20000bc6:	4066      	eors	r6, r4
20000bc8:	00ed      	lsls	r5, r5, #3
20000bca:	4475      	add	r5, lr
20000bcc:	6829      	ldr	r1, [r5, #0]
20000bce:	4031      	ands	r1, r6
20000bd0:	4061      	eors	r1, r4
20000bd2:	c002      	stmia	r0!, {r1}
20000bd4:	9a02      	ldr	r2, [sp, #8]
20000bd6:	9b01      	ldr	r3, [sp, #4]
20000bd8:	2f04      	cmp	r7, #4
20000bda:	d8e7      	bhi.n	20000bac <RenderGText_OutLoop>
20000bdc:	bc10      	pop	{r4}
20000bde:	46a0      	mov	r8, r4
20000be0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000be2:	08b9      	lsrs	r1, r7, #2
20000be4:	008d      	lsls	r5, r1, #2
20000be6:	1b76      	subs	r6, r6, r5
20000be8:	9603      	str	r6, [sp, #12]
20000bea:	3901      	subs	r1, #1

20000bec <RenderGText_InLoop>:
20000bec:	7817      	ldrb	r7, [r2, #0]
20000bee:	3201      	adds	r2, #1
20000bf0:	4447      	add	r7, r8
20000bf2:	783f      	ldrb	r7, [r7, #0]
20000bf4:	cb40      	ldmia	r3!, {r6}
20000bf6:	4066      	eors	r6, r4
20000bf8:	00ff      	lsls	r7, r7, #3
20000bfa:	4477      	add	r7, lr
20000bfc:	683d      	ldr	r5, [r7, #0]
20000bfe:	4035      	ands	r5, r6
20000c00:	4065      	eors	r5, r4
20000c02:	cb40      	ldmia	r3!, {r6}
20000c04:	4066      	eors	r6, r4
20000c06:	687f      	ldr	r7, [r7, #4]
20000c08:	4037      	ands	r7, r6
20000c0a:	4067      	eors	r7, r4
20000c0c:	c0a0      	stmia	r0!, {r5, r7}
20000c0e:	3902      	subs	r1, #2
20000c10:	d8ec      	bhi.n	20000bec <RenderGText_InLoop>
20000c12:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000c14:	d0d2      	beq.n	20000bbc <RenderGText_Last>
20000c16:	9a02      	ldr	r2, [sp, #8]
20000c18:	9b01      	ldr	r3, [sp, #4]
20000c1a:	e7c7      	b.n	20000bac <RenderGText_OutLoop>

20000c1c <RenderGText_Addr>:
20000c1c:	2001c074 	.word	0x2001c074

20000c20 <RenderGText_pSioBase>:
20000c20:	d0000000 	.word	0xd0000000

20000c24 <RenderLevel>:
20000c24:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000c26:	9c08      	ldr	r4, [sp, #32]
20000c28:	8925      	ldrh	r5, [r4, #8]
20000c2a:	2703      	movs	r7, #3
20000c2c:	43bd      	bics	r5, r7
20000c2e:	9508      	str	r5, [sp, #32]
20000c30:	43b9      	bics	r1, r7
20000c32:	43bb      	bics	r3, r7
20000c34:	9302      	str	r3, [sp, #8]
20000c36:	8965      	ldrh	r5, [r4, #10]
20000c38:	3d01      	subs	r5, #1
20000c3a:	1aad      	subs	r5, r5, r2
20000c3c:	7e23      	ldrb	r3, [r4, #24]
20000c3e:	9300      	str	r3, [sp, #0]
20000c40:	68e2      	ldr	r2, [r4, #12]
20000c42:	9201      	str	r2, [sp, #4]
20000c44:	440a      	add	r2, r1
20000c46:	7d66      	ldrb	r6, [r4, #21]
20000c48:	0233      	lsls	r3, r6, #8
20000c4a:	4333      	orrs	r3, r6
20000c4c:	041e      	lsls	r6, r3, #16
20000c4e:	431e      	orrs	r6, r3
20000c50:	7d24      	ldrb	r4, [r4, #20]
20000c52:	0223      	lsls	r3, r4, #8
20000c54:	4323      	orrs	r3, r4
20000c56:	041c      	lsls	r4, r3, #16
20000c58:	431c      	orrs	r4, r3
20000c5a:	4066      	eors	r6, r4
20000c5c:	4b4c      	ldr	r3, [pc, #304]	; (20000d90 <RenderLevel_Addr>)
20000c5e:	469e      	mov	lr, r3
20000c60:	9f08      	ldr	r7, [sp, #32]
20000c62:	1a7f      	subs	r7, r7, r1
20000c64:	2f04      	cmp	r7, #4
20000c66:	d801      	bhi.n	20000c6c <RenderLevel_OutLoop>
20000c68:	9f08      	ldr	r7, [sp, #32]
20000c6a:	e007      	b.n	20000c7c <RenderLevel_Last>

20000c6c <RenderLevel_OutLoop>:
20000c6c:	9b02      	ldr	r3, [sp, #8]
20000c6e:	429f      	cmp	r7, r3
20000c70:	d900      	bls.n	20000c74 <RenderLevel_OutLoop+0x8>
20000c72:	461f      	mov	r7, r3
20000c74:	2f08      	cmp	r7, #8
20000c76:	d231      	bcs.n	20000cdc <RenderLevel_Last2+0x30>
20000c78:	2f04      	cmp	r7, #4
20000c7a:	d32e      	bcc.n	20000cda <RenderLevel_Last2+0x2e>

20000c7c <RenderLevel_Last>:
20000c7c:	9b00      	ldr	r3, [sp, #0]
20000c7e:	429d      	cmp	r5, r3
20000c80:	d314      	bcc.n	20000cac <RenderLevel_Last2>
20000c82:	2100      	movs	r1, #0
20000c84:	7813      	ldrb	r3, [r2, #0]
20000c86:	42ab      	cmp	r3, r5
20000c88:	4149      	adcs	r1, r1
20000c8a:	7853      	ldrb	r3, [r2, #1]
20000c8c:	42ab      	cmp	r3, r5
20000c8e:	4149      	adcs	r1, r1
20000c90:	7893      	ldrb	r3, [r2, #2]
20000c92:	42ab      	cmp	r3, r5
20000c94:	4149      	adcs	r1, r1
20000c96:	78d3      	ldrb	r3, [r2, #3]
20000c98:	42ab      	cmp	r3, r5
20000c9a:	4149      	adcs	r1, r1
20000c9c:	3204      	adds	r2, #4
20000c9e:	00c9      	lsls	r1, r1, #3
20000ca0:	4471      	add	r1, lr
20000ca2:	6849      	ldr	r1, [r1, #4]
20000ca4:	4031      	ands	r1, r6
20000ca6:	4061      	eors	r1, r4
20000ca8:	c002      	stmia	r0!, {r1}
20000caa:	e013      	b.n	20000cd4 <RenderLevel_Last2+0x28>

20000cac <RenderLevel_Last2>:
20000cac:	2100      	movs	r1, #0
20000cae:	7813      	ldrb	r3, [r2, #0]
20000cb0:	429d      	cmp	r5, r3
20000cb2:	4149      	adcs	r1, r1
20000cb4:	7853      	ldrb	r3, [r2, #1]
20000cb6:	429d      	cmp	r5, r3
20000cb8:	4149      	adcs	r1, r1
20000cba:	7893      	ldrb	r3, [r2, #2]
20000cbc:	429d      	cmp	r5, r3
20000cbe:	4149      	adcs	r1, r1
20000cc0:	78d3      	ldrb	r3, [r2, #3]
20000cc2:	429d      	cmp	r5, r3
20000cc4:	4149      	adcs	r1, r1
20000cc6:	3204      	adds	r2, #4
20000cc8:	00c9      	lsls	r1, r1, #3
20000cca:	4471      	add	r1, lr
20000ccc:	6849      	ldr	r1, [r1, #4]
20000cce:	4031      	ands	r1, r6
20000cd0:	4061      	eors	r1, r4
20000cd2:	c002      	stmia	r0!, {r1}
20000cd4:	9a01      	ldr	r2, [sp, #4]
20000cd6:	2f04      	cmp	r7, #4
20000cd8:	d8c8      	bhi.n	20000c6c <RenderLevel_OutLoop>
20000cda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000cdc:	08b9      	lsrs	r1, r7, #2
20000cde:	008f      	lsls	r7, r1, #2
20000ce0:	1bdb      	subs	r3, r3, r7
20000ce2:	9302      	str	r3, [sp, #8]
20000ce4:	3901      	subs	r1, #1
20000ce6:	9b00      	ldr	r3, [sp, #0]
20000ce8:	429d      	cmp	r5, r3
20000cea:	d328      	bcc.n	20000d3e <RenderLevel_InLoopBot>

20000cec <RenderLevel_InLoopTop>:
20000cec:	2700      	movs	r7, #0
20000cee:	7813      	ldrb	r3, [r2, #0]
20000cf0:	42ab      	cmp	r3, r5
20000cf2:	417f      	adcs	r7, r7
20000cf4:	7853      	ldrb	r3, [r2, #1]
20000cf6:	42ab      	cmp	r3, r5
20000cf8:	417f      	adcs	r7, r7
20000cfa:	7893      	ldrb	r3, [r2, #2]
20000cfc:	42ab      	cmp	r3, r5
20000cfe:	417f      	adcs	r7, r7
20000d00:	78d3      	ldrb	r3, [r2, #3]
20000d02:	42ab      	cmp	r3, r5
20000d04:	417f      	adcs	r7, r7
20000d06:	7913      	ldrb	r3, [r2, #4]
20000d08:	42ab      	cmp	r3, r5
20000d0a:	417f      	adcs	r7, r7
20000d0c:	7953      	ldrb	r3, [r2, #5]
20000d0e:	42ab      	cmp	r3, r5
20000d10:	417f      	adcs	r7, r7
20000d12:	7993      	ldrb	r3, [r2, #6]
20000d14:	42ab      	cmp	r3, r5
20000d16:	417f      	adcs	r7, r7
20000d18:	79d3      	ldrb	r3, [r2, #7]
20000d1a:	42ab      	cmp	r3, r5
20000d1c:	417f      	adcs	r7, r7
20000d1e:	3208      	adds	r2, #8
20000d20:	00ff      	lsls	r7, r7, #3
20000d22:	4477      	add	r7, lr
20000d24:	683b      	ldr	r3, [r7, #0]
20000d26:	4033      	ands	r3, r6
20000d28:	4063      	eors	r3, r4
20000d2a:	687f      	ldr	r7, [r7, #4]
20000d2c:	4037      	ands	r7, r6
20000d2e:	4067      	eors	r7, r4
20000d30:	c088      	stmia	r0!, {r3, r7}
20000d32:	3902      	subs	r1, #2
20000d34:	d8da      	bhi.n	20000cec <RenderLevel_InLoopTop>
20000d36:	9f08      	ldr	r7, [sp, #32]
20000d38:	d0a0      	beq.n	20000c7c <RenderLevel_Last>
20000d3a:	9a01      	ldr	r2, [sp, #4]
20000d3c:	e796      	b.n	20000c6c <RenderLevel_OutLoop>

20000d3e <RenderLevel_InLoopBot>:
20000d3e:	2700      	movs	r7, #0
20000d40:	7813      	ldrb	r3, [r2, #0]
20000d42:	429d      	cmp	r5, r3
20000d44:	417f      	adcs	r7, r7
20000d46:	7853      	ldrb	r3, [r2, #1]
20000d48:	429d      	cmp	r5, r3
20000d4a:	417f      	adcs	r7, r7
20000d4c:	7893      	ldrb	r3, [r2, #2]
20000d4e:	429d      	cmp	r5, r3
20000d50:	417f      	adcs	r7, r7
20000d52:	78d3      	ldrb	r3, [r2, #3]
20000d54:	429d      	cmp	r5, r3
20000d56:	417f      	adcs	r7, r7
20000d58:	7913      	ldrb	r3, [r2, #4]
20000d5a:	429d      	cmp	r5, r3
20000d5c:	417f      	adcs	r7, r7
20000d5e:	7953      	ldrb	r3, [r2, #5]
20000d60:	429d      	cmp	r5, r3
20000d62:	417f      	adcs	r7, r7
20000d64:	7993      	ldrb	r3, [r2, #6]
20000d66:	429d      	cmp	r5, r3
20000d68:	417f      	adcs	r7, r7
20000d6a:	79d3      	ldrb	r3, [r2, #7]
20000d6c:	429d      	cmp	r5, r3
20000d6e:	417f      	adcs	r7, r7
20000d70:	3208      	adds	r2, #8
20000d72:	00ff      	lsls	r7, r7, #3
20000d74:	4477      	add	r7, lr
20000d76:	683b      	ldr	r3, [r7, #0]
20000d78:	4033      	ands	r3, r6
20000d7a:	4063      	eors	r3, r4
20000d7c:	687f      	ldr	r7, [r7, #4]
20000d7e:	4037      	ands	r7, r6
20000d80:	4067      	eors	r7, r4
20000d82:	c088      	stmia	r0!, {r3, r7}
20000d84:	3902      	subs	r1, #2
20000d86:	d8da      	bhi.n	20000d3e <RenderLevel_InLoopBot>
20000d88:	9f08      	ldr	r7, [sp, #32]
20000d8a:	d0d5      	beq.n	20000d38 <RenderLevel_InLoopTop+0x4c>
20000d8c:	9a01      	ldr	r2, [sp, #4]
20000d8e:	e76d      	b.n	20000c6c <RenderLevel_OutLoop>

20000d90 <RenderLevel_Addr>:
20000d90:	2001c074 	.word	0x2001c074

20000d94 <RenderLevelGrad>:
20000d94:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000d96:	9c08      	ldr	r4, [sp, #32]
20000d98:	8925      	ldrh	r5, [r4, #8]
20000d9a:	2703      	movs	r7, #3
20000d9c:	43bd      	bics	r5, r7
20000d9e:	9508      	str	r5, [sp, #32]
20000da0:	43b9      	bics	r1, r7
20000da2:	43bb      	bics	r3, r7
20000da4:	9302      	str	r3, [sp, #8]
20000da6:	8965      	ldrh	r5, [r4, #10]
20000da8:	3d01      	subs	r5, #1
20000daa:	1aad      	subs	r5, r5, r2
20000dac:	68e2      	ldr	r2, [r4, #12]
20000dae:	9201      	str	r2, [sp, #4]
20000db0:	440a      	add	r2, r1
20000db2:	6966      	ldr	r6, [r4, #20]
20000db4:	5d76      	ldrb	r6, [r6, r5]
20000db6:	0233      	lsls	r3, r6, #8
20000db8:	4333      	orrs	r3, r6
20000dba:	041e      	lsls	r6, r3, #16
20000dbc:	431e      	orrs	r6, r3
20000dbe:	69a4      	ldr	r4, [r4, #24]
20000dc0:	5d64      	ldrb	r4, [r4, r5]
20000dc2:	0223      	lsls	r3, r4, #8
20000dc4:	4323      	orrs	r3, r4
20000dc6:	041c      	lsls	r4, r3, #16
20000dc8:	431c      	orrs	r4, r3
20000dca:	4066      	eors	r6, r4
20000dcc:	4b2a      	ldr	r3, [pc, #168]	; (20000e78 <RenderLevelGrad_Addr>)
20000dce:	469e      	mov	lr, r3
20000dd0:	9f08      	ldr	r7, [sp, #32]
20000dd2:	1a7f      	subs	r7, r7, r1
20000dd4:	2f04      	cmp	r7, #4
20000dd6:	d801      	bhi.n	20000ddc <RenderLevelGrad_OutLoop>
20000dd8:	9f08      	ldr	r7, [sp, #32]
20000dda:	e007      	b.n	20000dec <RenderLevelGrad_Last>

20000ddc <RenderLevelGrad_OutLoop>:
20000ddc:	9b02      	ldr	r3, [sp, #8]
20000dde:	429f      	cmp	r7, r3
20000de0:	d900      	bls.n	20000de4 <RenderLevelGrad_OutLoop+0x8>
20000de2:	461f      	mov	r7, r3
20000de4:	2f08      	cmp	r7, #8
20000de6:	d219      	bcs.n	20000e1c <RenderLevelGrad_Last+0x30>
20000de8:	2f04      	cmp	r7, #4
20000dea:	d316      	bcc.n	20000e1a <RenderLevelGrad_Last+0x2e>

20000dec <RenderLevelGrad_Last>:
20000dec:	2100      	movs	r1, #0
20000dee:	7813      	ldrb	r3, [r2, #0]
20000df0:	42ab      	cmp	r3, r5
20000df2:	4149      	adcs	r1, r1
20000df4:	7853      	ldrb	r3, [r2, #1]
20000df6:	42ab      	cmp	r3, r5
20000df8:	4149      	adcs	r1, r1
20000dfa:	7893      	ldrb	r3, [r2, #2]
20000dfc:	42ab      	cmp	r3, r5
20000dfe:	4149      	adcs	r1, r1
20000e00:	78d3      	ldrb	r3, [r2, #3]
20000e02:	42ab      	cmp	r3, r5
20000e04:	4149      	adcs	r1, r1
20000e06:	3204      	adds	r2, #4
20000e08:	00c9      	lsls	r1, r1, #3
20000e0a:	4471      	add	r1, lr
20000e0c:	6849      	ldr	r1, [r1, #4]
20000e0e:	4031      	ands	r1, r6
20000e10:	4061      	eors	r1, r4
20000e12:	c002      	stmia	r0!, {r1}
20000e14:	9a01      	ldr	r2, [sp, #4]
20000e16:	2f04      	cmp	r7, #4
20000e18:	d8e0      	bhi.n	20000ddc <RenderLevelGrad_OutLoop>
20000e1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000e1c:	08b9      	lsrs	r1, r7, #2
20000e1e:	008f      	lsls	r7, r1, #2
20000e20:	1bdb      	subs	r3, r3, r7
20000e22:	9302      	str	r3, [sp, #8]
20000e24:	3901      	subs	r1, #1

20000e26 <RenderLevelGrad_InLoopTop>:
20000e26:	2700      	movs	r7, #0
20000e28:	7813      	ldrb	r3, [r2, #0]
20000e2a:	42ab      	cmp	r3, r5
20000e2c:	417f      	adcs	r7, r7
20000e2e:	7853      	ldrb	r3, [r2, #1]
20000e30:	42ab      	cmp	r3, r5
20000e32:	417f      	adcs	r7, r7
20000e34:	7893      	ldrb	r3, [r2, #2]
20000e36:	42ab      	cmp	r3, r5
20000e38:	417f      	adcs	r7, r7
20000e3a:	78d3      	ldrb	r3, [r2, #3]
20000e3c:	42ab      	cmp	r3, r5
20000e3e:	417f      	adcs	r7, r7
20000e40:	7913      	ldrb	r3, [r2, #4]
20000e42:	42ab      	cmp	r3, r5
20000e44:	417f      	adcs	r7, r7
20000e46:	7953      	ldrb	r3, [r2, #5]
20000e48:	42ab      	cmp	r3, r5
20000e4a:	417f      	adcs	r7, r7
20000e4c:	7993      	ldrb	r3, [r2, #6]
20000e4e:	42ab      	cmp	r3, r5
20000e50:	417f      	adcs	r7, r7
20000e52:	79d3      	ldrb	r3, [r2, #7]
20000e54:	42ab      	cmp	r3, r5
20000e56:	417f      	adcs	r7, r7
20000e58:	3208      	adds	r2, #8
20000e5a:	00ff      	lsls	r7, r7, #3
20000e5c:	4477      	add	r7, lr
20000e5e:	683b      	ldr	r3, [r7, #0]
20000e60:	4033      	ands	r3, r6
20000e62:	4063      	eors	r3, r4
20000e64:	687f      	ldr	r7, [r7, #4]
20000e66:	4037      	ands	r7, r6
20000e68:	4067      	eors	r7, r4
20000e6a:	c088      	stmia	r0!, {r3, r7}
20000e6c:	3902      	subs	r1, #2
20000e6e:	d8da      	bhi.n	20000e26 <RenderLevelGrad_InLoopTop>
20000e70:	9f08      	ldr	r7, [sp, #32]
20000e72:	d0bb      	beq.n	20000dec <RenderLevelGrad_Last>
20000e74:	9a01      	ldr	r2, [sp, #4]
20000e76:	e7b1      	b.n	20000ddc <RenderLevelGrad_OutLoop>

20000e78 <RenderLevelGrad_Addr>:
20000e78:	2001c074 	.word	0x2001c074

20000e7c <RenderMText>:
20000e7c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000e7e:	9c08      	ldr	r4, [sp, #32]
20000e80:	4e34      	ldr	r6, [pc, #208]	; (20000f54 <RenderMText_pSioBase>)
20000e82:	6632      	str	r2, [r6, #96]	; 0x60
20000e84:	8a62      	ldrh	r2, [r4, #18]
20000e86:	6672      	str	r2, [r6, #100]	; 0x64
20000e88:	8925      	ldrh	r5, [r4, #8]
20000e8a:	2703      	movs	r7, #3
20000e8c:	43bd      	bics	r5, r7
20000e8e:	9508      	str	r5, [sp, #32]
20000e90:	43b9      	bics	r1, r7
20000e92:	43bb      	bics	r3, r7
20000e94:	9302      	str	r3, [sp, #8]
20000e96:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000e98:	6f32      	ldr	r2, [r6, #112]	; 0x70
20000e9a:	022d      	lsls	r5, r5, #8
20000e9c:	6963      	ldr	r3, [r4, #20]
20000e9e:	442b      	add	r3, r5
20000ea0:	8865      	ldrh	r5, [r4, #2]
20000ea2:	436a      	muls	r2, r5
20000ea4:	68e5      	ldr	r5, [r4, #12]
20000ea6:	442a      	add	r2, r5
20000ea8:	9201      	str	r2, [sp, #4]
20000eaa:	08ce      	lsrs	r6, r1, #3
20000eac:	4432      	add	r2, r6
20000eae:	7e66      	ldrb	r6, [r4, #25]
20000eb0:	0237      	lsls	r7, r6, #8
20000eb2:	4337      	orrs	r7, r6
20000eb4:	043e      	lsls	r6, r7, #16
20000eb6:	433e      	orrs	r6, r7
20000eb8:	7e24      	ldrb	r4, [r4, #24]
20000eba:	0225      	lsls	r5, r4, #8
20000ebc:	4325      	orrs	r5, r4
20000ebe:	042c      	lsls	r4, r5, #16
20000ec0:	432c      	orrs	r4, r5
20000ec2:	4066      	eors	r6, r4
20000ec4:	4d22      	ldr	r5, [pc, #136]	; (20000f50 <RenderMText_Addr>)
20000ec6:	46ae      	mov	lr, r5
20000ec8:	074d      	lsls	r5, r1, #29
20000eca:	d511      	bpl.n	20000ef0 <RenderMText+0x74>
20000ecc:	7815      	ldrb	r5, [r2, #0]
20000ece:	5d5d      	ldrb	r5, [r3, r5]
20000ed0:	3201      	adds	r2, #1
20000ed2:	00ed      	lsls	r5, r5, #3
20000ed4:	4475      	add	r5, lr
20000ed6:	686f      	ldr	r7, [r5, #4]
20000ed8:	4037      	ands	r7, r6
20000eda:	4067      	eors	r7, r4
20000edc:	c080      	stmia	r0!, {r7}
20000ede:	3104      	adds	r1, #4
20000ee0:	9f08      	ldr	r7, [sp, #32]
20000ee2:	42b9      	cmp	r1, r7
20000ee4:	d301      	bcc.n	20000eea <RenderMText+0x6e>
20000ee6:	2100      	movs	r1, #0
20000ee8:	9a01      	ldr	r2, [sp, #4]
20000eea:	9f02      	ldr	r7, [sp, #8]
20000eec:	3f04      	subs	r7, #4
20000eee:	9702      	str	r7, [sp, #8]
20000ef0:	9f08      	ldr	r7, [sp, #32]
20000ef2:	1a7f      	subs	r7, r7, r1

20000ef4 <RenderMText_OutLoop>:
20000ef4:	9d02      	ldr	r5, [sp, #8]
20000ef6:	42af      	cmp	r7, r5
20000ef8:	d900      	bls.n	20000efc <RenderMText_OutLoop+0x8>
20000efa:	462f      	mov	r7, r5
20000efc:	2f08      	cmp	r7, #8
20000efe:	d20e      	bcs.n	20000f1e <RenderMText_Last+0x1a>
20000f00:	2f04      	cmp	r7, #4
20000f02:	d30b      	bcc.n	20000f1c <RenderMText_Last+0x18>

20000f04 <RenderMText_Last>:
20000f04:	7815      	ldrb	r5, [r2, #0]
20000f06:	5d5d      	ldrb	r5, [r3, r5]
20000f08:	3201      	adds	r2, #1
20000f0a:	00ed      	lsls	r5, r5, #3
20000f0c:	4475      	add	r5, lr
20000f0e:	6829      	ldr	r1, [r5, #0]
20000f10:	4031      	ands	r1, r6
20000f12:	4061      	eors	r1, r4
20000f14:	c002      	stmia	r0!, {r1}
20000f16:	9a01      	ldr	r2, [sp, #4]
20000f18:	2f04      	cmp	r7, #4
20000f1a:	d8eb      	bhi.n	20000ef4 <RenderMText_OutLoop>
20000f1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000f1e:	08b9      	lsrs	r1, r7, #2
20000f20:	008f      	lsls	r7, r1, #2
20000f22:	1bed      	subs	r5, r5, r7
20000f24:	9502      	str	r5, [sp, #8]
20000f26:	3901      	subs	r1, #1

20000f28 <RenderMText_InLoop>:
20000f28:	7815      	ldrb	r5, [r2, #0]
20000f2a:	5d5d      	ldrb	r5, [r3, r5]
20000f2c:	3201      	adds	r2, #1
20000f2e:	00ed      	lsls	r5, r5, #3
20000f30:	4475      	add	r5, lr
20000f32:	682f      	ldr	r7, [r5, #0]
20000f34:	4037      	ands	r7, r6
20000f36:	4067      	eors	r7, r4
20000f38:	c080      	stmia	r0!, {r7}
20000f3a:	686f      	ldr	r7, [r5, #4]
20000f3c:	4037      	ands	r7, r6
20000f3e:	4067      	eors	r7, r4
20000f40:	c080      	stmia	r0!, {r7}
20000f42:	3902      	subs	r1, #2
20000f44:	d8f0      	bhi.n	20000f28 <RenderMText_InLoop>
20000f46:	9f08      	ldr	r7, [sp, #32]
20000f48:	d0dc      	beq.n	20000f04 <RenderMText_Last>
20000f4a:	9a01      	ldr	r2, [sp, #4]
20000f4c:	e7d2      	b.n	20000ef4 <RenderMText_OutLoop>
20000f4e:	46c0      	nop			; (mov r8, r8)

20000f50 <RenderMText_Addr>:
20000f50:	2001c074 	.word	0x2001c074

20000f54 <RenderMText_pSioBase>:
20000f54:	d0000000 	.word	0xd0000000

20000f58 <RenderOscil>:
20000f58:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000f5a:	9c08      	ldr	r4, [sp, #32]
20000f5c:	8925      	ldrh	r5, [r4, #8]
20000f5e:	2703      	movs	r7, #3
20000f60:	43bd      	bics	r5, r7
20000f62:	9508      	str	r5, [sp, #32]
20000f64:	43b9      	bics	r1, r7
20000f66:	43bb      	bics	r3, r7
20000f68:	9302      	str	r3, [sp, #8]
20000f6a:	8965      	ldrh	r5, [r4, #10]
20000f6c:	3d01      	subs	r5, #1
20000f6e:	1aad      	subs	r5, r5, r2
20000f70:	7e23      	ldrb	r3, [r4, #24]
20000f72:	469e      	mov	lr, r3
20000f74:	68e2      	ldr	r2, [r4, #12]
20000f76:	9201      	str	r2, [sp, #4]
20000f78:	440a      	add	r2, r1
20000f7a:	7d66      	ldrb	r6, [r4, #21]
20000f7c:	0233      	lsls	r3, r6, #8
20000f7e:	4333      	orrs	r3, r6
20000f80:	041e      	lsls	r6, r3, #16
20000f82:	431e      	orrs	r6, r3
20000f84:	7d24      	ldrb	r4, [r4, #20]
20000f86:	0223      	lsls	r3, r4, #8
20000f88:	4323      	orrs	r3, r4
20000f8a:	041c      	lsls	r4, r3, #16
20000f8c:	431c      	orrs	r4, r3
20000f8e:	4066      	eors	r6, r4
20000f90:	9f08      	ldr	r7, [sp, #32]
20000f92:	1a7f      	subs	r7, r7, r1
20000f94:	2f04      	cmp	r7, #4
20000f96:	d801      	bhi.n	20000f9c <RenderOscil_OutLoop>
20000f98:	9f08      	ldr	r7, [sp, #32]
20000f9a:	e007      	b.n	20000fac <RenderOscil_Last>

20000f9c <RenderOscil_OutLoop>:
20000f9c:	9b02      	ldr	r3, [sp, #8]
20000f9e:	429f      	cmp	r7, r3
20000fa0:	d900      	bls.n	20000fa4 <RenderOscil_OutLoop+0x8>
20000fa2:	461f      	mov	r7, r3
20000fa4:	2f08      	cmp	r7, #8
20000fa6:	d21e      	bcs.n	20000fe6 <RenderOscil_Last+0x3a>
20000fa8:	2f04      	cmp	r7, #4
20000faa:	d31b      	bcc.n	20000fe4 <RenderOscil_Last+0x38>

20000fac <RenderOscil_Last>:
20000fac:	2100      	movs	r1, #0
20000fae:	7813      	ldrb	r3, [r2, #0]
20000fb0:	1b5b      	subs	r3, r3, r5
20000fb2:	459e      	cmp	lr, r3
20000fb4:	4149      	adcs	r1, r1
20000fb6:	7853      	ldrb	r3, [r2, #1]
20000fb8:	1b5b      	subs	r3, r3, r5
20000fba:	459e      	cmp	lr, r3
20000fbc:	4149      	adcs	r1, r1
20000fbe:	7893      	ldrb	r3, [r2, #2]
20000fc0:	1b5b      	subs	r3, r3, r5
20000fc2:	459e      	cmp	lr, r3
20000fc4:	4149      	adcs	r1, r1
20000fc6:	78d3      	ldrb	r3, [r2, #3]
20000fc8:	1b5b      	subs	r3, r3, r5
20000fca:	459e      	cmp	lr, r3
20000fcc:	4149      	adcs	r1, r1
20000fce:	3204      	adds	r2, #4
20000fd0:	00c9      	lsls	r1, r1, #3
20000fd2:	4b20      	ldr	r3, [pc, #128]	; (20001054 <RenderOscil_Addr>)
20000fd4:	4419      	add	r1, r3
20000fd6:	6849      	ldr	r1, [r1, #4]
20000fd8:	4031      	ands	r1, r6
20000fda:	4061      	eors	r1, r4
20000fdc:	c002      	stmia	r0!, {r1}
20000fde:	9a01      	ldr	r2, [sp, #4]
20000fe0:	2f04      	cmp	r7, #4
20000fe2:	d8db      	bhi.n	20000f9c <RenderOscil_OutLoop>
20000fe4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000fe6:	08b9      	lsrs	r1, r7, #2
20000fe8:	008f      	lsls	r7, r1, #2
20000fea:	1bdb      	subs	r3, r3, r7
20000fec:	9302      	str	r3, [sp, #8]
20000fee:	3901      	subs	r1, #1

20000ff0 <RenderOscil_InLoop>:
20000ff0:	2700      	movs	r7, #0
20000ff2:	7813      	ldrb	r3, [r2, #0]
20000ff4:	1b5b      	subs	r3, r3, r5
20000ff6:	459e      	cmp	lr, r3
20000ff8:	417f      	adcs	r7, r7
20000ffa:	7853      	ldrb	r3, [r2, #1]
20000ffc:	1b5b      	subs	r3, r3, r5
20000ffe:	459e      	cmp	lr, r3
20001000:	417f      	adcs	r7, r7
20001002:	7893      	ldrb	r3, [r2, #2]
20001004:	1b5b      	subs	r3, r3, r5
20001006:	459e      	cmp	lr, r3
20001008:	417f      	adcs	r7, r7
2000100a:	78d3      	ldrb	r3, [r2, #3]
2000100c:	1b5b      	subs	r3, r3, r5
2000100e:	459e      	cmp	lr, r3
20001010:	417f      	adcs	r7, r7
20001012:	7913      	ldrb	r3, [r2, #4]
20001014:	1b5b      	subs	r3, r3, r5
20001016:	459e      	cmp	lr, r3
20001018:	417f      	adcs	r7, r7
2000101a:	7953      	ldrb	r3, [r2, #5]
2000101c:	1b5b      	subs	r3, r3, r5
2000101e:	459e      	cmp	lr, r3
20001020:	417f      	adcs	r7, r7
20001022:	7993      	ldrb	r3, [r2, #6]
20001024:	1b5b      	subs	r3, r3, r5
20001026:	459e      	cmp	lr, r3
20001028:	417f      	adcs	r7, r7
2000102a:	79d3      	ldrb	r3, [r2, #7]
2000102c:	1b5b      	subs	r3, r3, r5
2000102e:	459e      	cmp	lr, r3
20001030:	417f      	adcs	r7, r7
20001032:	3208      	adds	r2, #8
20001034:	00ff      	lsls	r7, r7, #3
20001036:	4b07      	ldr	r3, [pc, #28]	; (20001054 <RenderOscil_Addr>)
20001038:	441f      	add	r7, r3
2000103a:	683b      	ldr	r3, [r7, #0]
2000103c:	4033      	ands	r3, r6
2000103e:	4063      	eors	r3, r4
20001040:	687f      	ldr	r7, [r7, #4]
20001042:	4037      	ands	r7, r6
20001044:	4067      	eors	r7, r4
20001046:	c088      	stmia	r0!, {r3, r7}
20001048:	3902      	subs	r1, #2
2000104a:	d8d1      	bhi.n	20000ff0 <RenderOscil_InLoop>
2000104c:	9f08      	ldr	r7, [sp, #32]
2000104e:	d0ad      	beq.n	20000fac <RenderOscil_Last>
20001050:	9a01      	ldr	r2, [sp, #4]
20001052:	e7a3      	b.n	20000f9c <RenderOscil_OutLoop>

20001054 <RenderOscil_Addr>:
20001054:	2001c074 	.word	0x2001c074

20001058 <RenderOscLine>:
20001058:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
2000105a:	9c07      	ldr	r4, [sp, #28]
2000105c:	8925      	ldrh	r5, [r4, #8]
2000105e:	086d      	lsrs	r5, r5, #1
20001060:	9507      	str	r5, [sp, #28]
20001062:	0849      	lsrs	r1, r1, #1
20001064:	085b      	lsrs	r3, r3, #1
20001066:	9301      	str	r3, [sp, #4]
20001068:	8965      	ldrh	r5, [r4, #10]
2000106a:	3d01      	subs	r5, #1
2000106c:	1aad      	subs	r5, r5, r2
2000106e:	46ae      	mov	lr, r5
20001070:	68e2      	ldr	r2, [r4, #12]
20001072:	9200      	str	r2, [sp, #0]
20001074:	440a      	add	r2, r1
20001076:	7d66      	ldrb	r6, [r4, #21]
20001078:	0237      	lsls	r7, r6, #8
2000107a:	433e      	orrs	r6, r7
2000107c:	7d24      	ldrb	r4, [r4, #20]
2000107e:	0227      	lsls	r7, r4, #8
20001080:	433c      	orrs	r4, r7
20001082:	9f07      	ldr	r7, [sp, #28]
20001084:	1a79      	subs	r1, r7, r1

20001086 <RenderOscLine_OutLoop>:
20001086:	9b01      	ldr	r3, [sp, #4]
20001088:	4299      	cmp	r1, r3
2000108a:	d900      	bls.n	2000108e <RenderOscLine_OutLoop+0x8>
2000108c:	4619      	mov	r1, r3
2000108e:	2900      	cmp	r1, #0
20001090:	d01b      	beq.n	200010ca <RenderOscLine_Stop>
20001092:	1a5b      	subs	r3, r3, r1
20001094:	9301      	str	r3, [sp, #4]
20001096:	7815      	ldrb	r5, [r2, #0]

20001098 <RenderOscLine_InLoop>:
20001098:	7813      	ldrb	r3, [r2, #0]
2000109a:	3201      	adds	r2, #1
2000109c:	4627      	mov	r7, r4
2000109e:	4573      	cmp	r3, lr
200010a0:	d00a      	beq.n	200010b8 <RenderOscLine_InLoop+0x20>
200010a2:	d303      	bcc.n	200010ac <RenderOscLine_InLoop+0x14>
200010a4:	42ab      	cmp	r3, r5
200010a6:	d901      	bls.n	200010ac <RenderOscLine_InLoop+0x14>
200010a8:	45ae      	cmp	lr, r5
200010aa:	d805      	bhi.n	200010b8 <RenderOscLine_InLoop+0x20>
200010ac:	42ab      	cmp	r3, r5
200010ae:	d204      	bcs.n	200010ba <RenderOscLine_InLoop+0x22>
200010b0:	4573      	cmp	r3, lr
200010b2:	d202      	bcs.n	200010ba <RenderOscLine_InLoop+0x22>
200010b4:	45ae      	cmp	lr, r5
200010b6:	d200      	bcs.n	200010ba <RenderOscLine_InLoop+0x22>
200010b8:	4637      	mov	r7, r6
200010ba:	8007      	strh	r7, [r0, #0]
200010bc:	3002      	adds	r0, #2
200010be:	461d      	mov	r5, r3
200010c0:	3901      	subs	r1, #1
200010c2:	d1e9      	bne.n	20001098 <RenderOscLine_InLoop>
200010c4:	9907      	ldr	r1, [sp, #28]
200010c6:	9a00      	ldr	r2, [sp, #0]
200010c8:	e7dd      	b.n	20001086 <RenderOscLine_OutLoop>

200010ca <RenderOscLine_Stop>:
200010ca:	bdfc      	pop	{r2, r3, r4, r5, r6, r7, pc}

200010cc <RenderOscLine_Addr>:
200010cc:	2001c074 	.word	0x2001c074

200010d0 <RenderPersp>:
200010d0:	b5f0      	push	{r4, r5, r6, r7, lr}
200010d2:	4e41      	ldr	r6, [pc, #260]	; (200011d8 <RenderPersp_pSioBase>)
200010d4:	8b15      	ldrh	r5, [r2, #24]
200010d6:	7f54      	ldrb	r4, [r2, #29]
200010d8:	b264      	sxtb	r4, r4
200010da:	00a4      	lsls	r4, r4, #2
200010dc:	d107      	bne.n	200010ee <RenderPersp+0x1e>
200010de:	086d      	lsrs	r5, r5, #1
200010e0:	1b49      	subs	r1, r1, r5
200010e2:	468c      	mov	ip, r1
200010e4:	2501      	movs	r5, #1
200010e6:	6675      	str	r5, [r6, #100]	; 0x64
200010e8:	032d      	lsls	r5, r5, #12
200010ea:	6635      	str	r5, [r6, #96]	; 0x60
200010ec:	e009      	b.n	20001102 <RenderPersp+0x32>
200010ee:	d502      	bpl.n	200010f6 <RenderPersp+0x26>
200010f0:	1a69      	subs	r1, r5, r1
200010f2:	3901      	subs	r1, #1
200010f4:	4264      	negs	r4, r4
200010f6:	1b4f      	subs	r7, r1, r5
200010f8:	46bc      	mov	ip, r7
200010fa:	032d      	lsls	r5, r5, #12
200010fc:	6635      	str	r5, [r6, #96]	; 0x60
200010fe:	1909      	adds	r1, r1, r4
20001100:	6671      	str	r1, [r6, #100]	; 0x64
20001102:	8ad3      	ldrh	r3, [r2, #22]
20001104:	085d      	lsrs	r5, r3, #1
20001106:	426d      	negs	r5, r5
20001108:	46ae      	mov	lr, r5
2000110a:	089f      	lsrs	r7, r3, #2
2000110c:	7f91      	ldrb	r1, [r2, #30]
2000110e:	7fd4      	ldrb	r4, [r2, #31]
20001110:	4b32      	ldr	r3, [pc, #200]	; (200011dc <RenderPersp_Interp>)
20001112:	6816      	ldr	r6, [r2, #0]
20001114:	611e      	str	r6, [r3, #16]
20001116:	4e32      	ldr	r6, [pc, #200]	; (200011e0 <RenderPersp_Ctrl>)
20001118:	1a76      	subs	r6, r6, r1
2000111a:	014d      	lsls	r5, r1, #5
2000111c:	432e      	orrs	r6, r5
2000111e:	3901      	subs	r1, #1
20001120:	190d      	adds	r5, r1, r4
20001122:	02ad      	lsls	r5, r5, #10
20001124:	432e      	orrs	r6, r5
20001126:	631e      	str	r6, [r3, #48]	; 0x30
20001128:	4e2d      	ldr	r6, [pc, #180]	; (200011e0 <RenderPersp_Ctrl>)
2000112a:	0289      	lsls	r1, r1, #10
2000112c:	430e      	orrs	r6, r1
2000112e:	62de      	str	r6, [r3, #44]	; 0x2c
20001130:	6854      	ldr	r4, [r2, #4]
20001132:	4929      	ldr	r1, [pc, #164]	; (200011d8 <RenderPersp_pSioBase>)
20001134:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001136:	6825      	ldr	r5, [r4, #0]
20001138:	434d      	muls	r5, r1
2000113a:	132d      	asrs	r5, r5, #12
2000113c:	609d      	str	r5, [r3, #8]
2000113e:	68e6      	ldr	r6, [r4, #12]
20001140:	434e      	muls	r6, r1
20001142:	1336      	asrs	r6, r6, #12
20001144:	60de      	str	r6, [r3, #12]
20001146:	4672      	mov	r2, lr
20001148:	4355      	muls	r5, r2
2000114a:	4372      	muls	r2, r6
2000114c:	468e      	mov	lr, r1
2000114e:	6866      	ldr	r6, [r4, #4]
20001150:	4371      	muls	r1, r6
20001152:	1309      	asrs	r1, r1, #12
20001154:	4666      	mov	r6, ip
20001156:	4371      	muls	r1, r6
20001158:	186d      	adds	r5, r5, r1
2000115a:	68a1      	ldr	r1, [r4, #8]
2000115c:	186d      	adds	r5, r5, r1
2000115e:	601d      	str	r5, [r3, #0]
20001160:	6921      	ldr	r1, [r4, #16]
20001162:	4675      	mov	r5, lr
20001164:	4369      	muls	r1, r5
20001166:	1309      	asrs	r1, r1, #12
20001168:	4371      	muls	r1, r6
2000116a:	1852      	adds	r2, r2, r1
2000116c:	6961      	ldr	r1, [r4, #20]
2000116e:	1852      	adds	r2, r2, r1
20001170:	605a      	str	r2, [r3, #4]
20001172:	087f      	lsrs	r7, r7, #1
20001174:	d30e      	bcc.n	20001194 <RenderPersp+0xc4>
20001176:	69dc      	ldr	r4, [r3, #28]
20001178:	7826      	ldrb	r6, [r4, #0]
2000117a:	69dc      	ldr	r4, [r3, #28]
2000117c:	7825      	ldrb	r5, [r4, #0]
2000117e:	022d      	lsls	r5, r5, #8
20001180:	432e      	orrs	r6, r5
20001182:	69dc      	ldr	r4, [r3, #28]
20001184:	7825      	ldrb	r5, [r4, #0]
20001186:	042d      	lsls	r5, r5, #16
20001188:	432e      	orrs	r6, r5
2000118a:	69dc      	ldr	r4, [r3, #28]
2000118c:	7825      	ldrb	r5, [r4, #0]
2000118e:	062d      	lsls	r5, r5, #24
20001190:	432e      	orrs	r6, r5
20001192:	c040      	stmia	r0!, {r6}
20001194:	423f      	tst	r7, r7
20001196:	d01e      	beq.n	200011d6 <RenderPersp+0x106>
20001198:	69dc      	ldr	r4, [r3, #28]
2000119a:	7821      	ldrb	r1, [r4, #0]
2000119c:	69dc      	ldr	r4, [r3, #28]
2000119e:	7824      	ldrb	r4, [r4, #0]
200011a0:	0224      	lsls	r4, r4, #8
200011a2:	4321      	orrs	r1, r4
200011a4:	69dc      	ldr	r4, [r3, #28]
200011a6:	7824      	ldrb	r4, [r4, #0]
200011a8:	0424      	lsls	r4, r4, #16
200011aa:	4321      	orrs	r1, r4
200011ac:	69dc      	ldr	r4, [r3, #28]
200011ae:	7824      	ldrb	r4, [r4, #0]
200011b0:	0624      	lsls	r4, r4, #24
200011b2:	4321      	orrs	r1, r4
200011b4:	69dc      	ldr	r4, [r3, #28]
200011b6:	7822      	ldrb	r2, [r4, #0]
200011b8:	69dc      	ldr	r4, [r3, #28]
200011ba:	7824      	ldrb	r4, [r4, #0]
200011bc:	0224      	lsls	r4, r4, #8
200011be:	4322      	orrs	r2, r4
200011c0:	69dc      	ldr	r4, [r3, #28]
200011c2:	7824      	ldrb	r4, [r4, #0]
200011c4:	0424      	lsls	r4, r4, #16
200011c6:	4322      	orrs	r2, r4
200011c8:	69dc      	ldr	r4, [r3, #28]
200011ca:	7824      	ldrb	r4, [r4, #0]
200011cc:	0624      	lsls	r4, r4, #24
200011ce:	4322      	orrs	r2, r4
200011d0:	c006      	stmia	r0!, {r1, r2}
200011d2:	3f01      	subs	r7, #1
200011d4:	d1e0      	bne.n	20001198 <RenderPersp+0xc8>
200011d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

200011d8 <RenderPersp_pSioBase>:
200011d8:	d0000000 	.word	0xd0000000

200011dc <RenderPersp_Interp>:
200011dc:	d00000c0 	.word	0xd00000c0

200011e0 <RenderPersp_Ctrl>:
200011e0:	0004000c 	.word	0x0004000c

200011e4 <RenderPersp2>:
200011e4:	b5f0      	push	{r4, r5, r6, r7, lr}
200011e6:	4e3c      	ldr	r6, [pc, #240]	; (200012d8 <RenderPersp_pSioBase>)
200011e8:	8b15      	ldrh	r5, [r2, #24]
200011ea:	7f54      	ldrb	r4, [r2, #29]
200011ec:	b264      	sxtb	r4, r4
200011ee:	00a4      	lsls	r4, r4, #2
200011f0:	d107      	bne.n	20001202 <RenderPersp2+0x1e>
200011f2:	086d      	lsrs	r5, r5, #1
200011f4:	1b49      	subs	r1, r1, r5
200011f6:	468c      	mov	ip, r1
200011f8:	2501      	movs	r5, #1
200011fa:	6675      	str	r5, [r6, #100]	; 0x64
200011fc:	032d      	lsls	r5, r5, #12
200011fe:	6635      	str	r5, [r6, #96]	; 0x60
20001200:	e009      	b.n	20001216 <RenderPersp2+0x32>
20001202:	d502      	bpl.n	2000120a <RenderPersp2+0x26>
20001204:	1a69      	subs	r1, r5, r1
20001206:	3901      	subs	r1, #1
20001208:	4264      	negs	r4, r4
2000120a:	1b4f      	subs	r7, r1, r5
2000120c:	46bc      	mov	ip, r7
2000120e:	032d      	lsls	r5, r5, #12
20001210:	6635      	str	r5, [r6, #96]	; 0x60
20001212:	1909      	adds	r1, r1, r4
20001214:	6671      	str	r1, [r6, #100]	; 0x64
20001216:	8ad3      	ldrh	r3, [r2, #22]
20001218:	085d      	lsrs	r5, r3, #1
2000121a:	426d      	negs	r5, r5
2000121c:	46ae      	mov	lr, r5
2000121e:	089f      	lsrs	r7, r3, #2
20001220:	7f91      	ldrb	r1, [r2, #30]
20001222:	7fd4      	ldrb	r4, [r2, #31]
20001224:	4b2d      	ldr	r3, [pc, #180]	; (200012dc <RenderPersp_Interp>)
20001226:	6816      	ldr	r6, [r2, #0]
20001228:	611e      	str	r6, [r3, #16]
2000122a:	4e2d      	ldr	r6, [pc, #180]	; (200012e0 <RenderPersp_Ctrl>)
2000122c:	1a76      	subs	r6, r6, r1
2000122e:	014d      	lsls	r5, r1, #5
20001230:	432e      	orrs	r6, r5
20001232:	3901      	subs	r1, #1
20001234:	190d      	adds	r5, r1, r4
20001236:	02ad      	lsls	r5, r5, #10
20001238:	432e      	orrs	r6, r5
2000123a:	631e      	str	r6, [r3, #48]	; 0x30
2000123c:	4e28      	ldr	r6, [pc, #160]	; (200012e0 <RenderPersp_Ctrl>)
2000123e:	0289      	lsls	r1, r1, #10
20001240:	430e      	orrs	r6, r1
20001242:	62de      	str	r6, [r3, #44]	; 0x2c
20001244:	6854      	ldr	r4, [r2, #4]
20001246:	4924      	ldr	r1, [pc, #144]	; (200012d8 <RenderPersp_pSioBase>)
20001248:	6f09      	ldr	r1, [r1, #112]	; 0x70
2000124a:	6825      	ldr	r5, [r4, #0]
2000124c:	434d      	muls	r5, r1
2000124e:	12ed      	asrs	r5, r5, #11
20001250:	609d      	str	r5, [r3, #8]
20001252:	106d      	asrs	r5, r5, #1
20001254:	68e6      	ldr	r6, [r4, #12]
20001256:	434e      	muls	r6, r1
20001258:	12f6      	asrs	r6, r6, #11
2000125a:	60de      	str	r6, [r3, #12]
2000125c:	1076      	asrs	r6, r6, #1
2000125e:	4672      	mov	r2, lr
20001260:	4355      	muls	r5, r2
20001262:	4372      	muls	r2, r6
20001264:	468e      	mov	lr, r1
20001266:	6866      	ldr	r6, [r4, #4]
20001268:	4371      	muls	r1, r6
2000126a:	1309      	asrs	r1, r1, #12
2000126c:	4666      	mov	r6, ip
2000126e:	4371      	muls	r1, r6
20001270:	186d      	adds	r5, r5, r1
20001272:	68a1      	ldr	r1, [r4, #8]
20001274:	186d      	adds	r5, r5, r1
20001276:	601d      	str	r5, [r3, #0]
20001278:	6921      	ldr	r1, [r4, #16]
2000127a:	4675      	mov	r5, lr
2000127c:	4369      	muls	r1, r5
2000127e:	1309      	asrs	r1, r1, #12
20001280:	4371      	muls	r1, r6
20001282:	1852      	adds	r2, r2, r1
20001284:	6961      	ldr	r1, [r4, #20]
20001286:	1852      	adds	r2, r2, r1
20001288:	605a      	str	r2, [r3, #4]
2000128a:	087f      	lsrs	r7, r7, #1
2000128c:	d30a      	bcc.n	200012a4 <RenderPersp2+0xc0>
2000128e:	69dc      	ldr	r4, [r3, #28]
20001290:	7821      	ldrb	r1, [r4, #0]
20001292:	020c      	lsls	r4, r1, #8
20001294:	4321      	orrs	r1, r4
20001296:	69dc      	ldr	r4, [r3, #28]
20001298:	7824      	ldrb	r4, [r4, #0]
2000129a:	0424      	lsls	r4, r4, #16
2000129c:	4321      	orrs	r1, r4
2000129e:	0224      	lsls	r4, r4, #8
200012a0:	4321      	orrs	r1, r4
200012a2:	c002      	stmia	r0!, {r1}
200012a4:	423f      	tst	r7, r7
200012a6:	d016      	beq.n	200012d6 <RenderPersp2+0xf2>
200012a8:	69dc      	ldr	r4, [r3, #28]
200012aa:	7821      	ldrb	r1, [r4, #0]
200012ac:	020c      	lsls	r4, r1, #8
200012ae:	4321      	orrs	r1, r4
200012b0:	69dc      	ldr	r4, [r3, #28]
200012b2:	7824      	ldrb	r4, [r4, #0]
200012b4:	0424      	lsls	r4, r4, #16
200012b6:	4321      	orrs	r1, r4
200012b8:	0224      	lsls	r4, r4, #8
200012ba:	4321      	orrs	r1, r4
200012bc:	69dc      	ldr	r4, [r3, #28]
200012be:	7822      	ldrb	r2, [r4, #0]
200012c0:	0214      	lsls	r4, r2, #8
200012c2:	4322      	orrs	r2, r4
200012c4:	69dc      	ldr	r4, [r3, #28]
200012c6:	7824      	ldrb	r4, [r4, #0]
200012c8:	0424      	lsls	r4, r4, #16
200012ca:	4322      	orrs	r2, r4
200012cc:	0224      	lsls	r4, r4, #8
200012ce:	4322      	orrs	r2, r4
200012d0:	c006      	stmia	r0!, {r1, r2}
200012d2:	3f01      	subs	r7, #1
200012d4:	d1e8      	bne.n	200012a8 <RenderPersp2+0xc4>
200012d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

200012d8 <RenderPersp_pSioBase>:
200012d8:	d0000000 	.word	0xd0000000

200012dc <RenderPersp_Interp>:
200012dc:	d00000c0 	.word	0xd00000c0

200012e0 <RenderPersp_Ctrl>:
200012e0:	0004000c 	.word	0x0004000c

200012e4 <RenderPlane2>:
200012e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200012e6:	9c06      	ldr	r4, [sp, #24]
200012e8:	8927      	ldrh	r7, [r4, #8]
200012ea:	2603      	movs	r6, #3
200012ec:	43b7      	bics	r7, r6
200012ee:	9706      	str	r7, [sp, #24]
200012f0:	43b1      	bics	r1, r6
200012f2:	43b3      	bics	r3, r6
200012f4:	9300      	str	r3, [sp, #0]
200012f6:	8865      	ldrh	r5, [r4, #2]
200012f8:	436a      	muls	r2, r5
200012fa:	68e5      	ldr	r5, [r4, #12]
200012fc:	442a      	add	r2, r5
200012fe:	4696      	mov	lr, r2
20001300:	08ce      	lsrs	r6, r1, #3
20001302:	4432      	add	r2, r6
20001304:	6963      	ldr	r3, [r4, #20]
20001306:	69a7      	ldr	r7, [r4, #24]
20001308:	074d      	lsls	r5, r1, #29
2000130a:	d512      	bpl.n	20001332 <RenderPlane2+0x4e>
2000130c:	7815      	ldrb	r5, [r2, #0]
2000130e:	5cd6      	ldrb	r6, [r2, r3]
20001310:	3201      	adds	r2, #1
20001312:	0736      	lsls	r6, r6, #28
20001314:	0db6      	lsrs	r6, r6, #22
20001316:	072d      	lsls	r5, r5, #28
20001318:	0ead      	lsrs	r5, r5, #26
2000131a:	4335      	orrs	r5, r6
2000131c:	597d      	ldr	r5, [r7, r5]
2000131e:	c020      	stmia	r0!, {r5}
20001320:	3104      	adds	r1, #4
20001322:	9e06      	ldr	r6, [sp, #24]
20001324:	42b1      	cmp	r1, r6
20001326:	d301      	bcc.n	2000132c <RenderPlane2+0x48>
20001328:	2100      	movs	r1, #0
2000132a:	4672      	mov	r2, lr
2000132c:	9e00      	ldr	r6, [sp, #0]
2000132e:	3e04      	subs	r6, #4
20001330:	9600      	str	r6, [sp, #0]
20001332:	9e06      	ldr	r6, [sp, #24]
20001334:	1a76      	subs	r6, r6, r1

20001336 <RenderPlane2_OutLoop>:
20001336:	9c00      	ldr	r4, [sp, #0]
20001338:	42a6      	cmp	r6, r4
2000133a:	d900      	bls.n	2000133e <RenderPlane2_OutLoop+0x8>
2000133c:	4626      	mov	r6, r4
2000133e:	2e08      	cmp	r6, #8
20001340:	d20f      	bcs.n	20001362 <RenderPlane2_Last+0x1c>
20001342:	2e04      	cmp	r6, #4
20001344:	d30c      	bcc.n	20001360 <RenderPlane2_Last+0x1a>

20001346 <RenderPlane2_Last>:
20001346:	7815      	ldrb	r5, [r2, #0]
20001348:	5cd4      	ldrb	r4, [r2, r3]
2000134a:	3201      	adds	r2, #1
2000134c:	0924      	lsrs	r4, r4, #4
2000134e:	0224      	lsls	r4, r4, #8
20001350:	432c      	orrs	r4, r5
20001352:	0924      	lsrs	r4, r4, #4
20001354:	00a4      	lsls	r4, r4, #2
20001356:	593c      	ldr	r4, [r7, r4]
20001358:	c010      	stmia	r0!, {r4}
2000135a:	4672      	mov	r2, lr
2000135c:	2e04      	cmp	r6, #4
2000135e:	d8ea      	bhi.n	20001336 <RenderPlane2_OutLoop>
20001360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20001362:	08b1      	lsrs	r1, r6, #2
20001364:	008e      	lsls	r6, r1, #2
20001366:	1ba4      	subs	r4, r4, r6
20001368:	9400      	str	r4, [sp, #0]
2000136a:	3901      	subs	r1, #1

2000136c <RenderPlane2_InLoop>:
2000136c:	7815      	ldrb	r5, [r2, #0]
2000136e:	5cd6      	ldrb	r6, [r2, r3]
20001370:	3201      	adds	r2, #1
20001372:	0934      	lsrs	r4, r6, #4
20001374:	0224      	lsls	r4, r4, #8
20001376:	432c      	orrs	r4, r5
20001378:	0924      	lsrs	r4, r4, #4
2000137a:	00a4      	lsls	r4, r4, #2
2000137c:	593c      	ldr	r4, [r7, r4]
2000137e:	0736      	lsls	r6, r6, #28
20001380:	0db6      	lsrs	r6, r6, #22
20001382:	072d      	lsls	r5, r5, #28
20001384:	0ead      	lsrs	r5, r5, #26
20001386:	4335      	orrs	r5, r6
20001388:	597d      	ldr	r5, [r7, r5]
2000138a:	c030      	stmia	r0!, {r4, r5}
2000138c:	3902      	subs	r1, #2
2000138e:	d8ed      	bhi.n	2000136c <RenderPlane2_InLoop>

20001390 <RenderPlane2_EndLoop>:
20001390:	9e06      	ldr	r6, [sp, #24]
20001392:	d0d8      	beq.n	20001346 <RenderPlane2_Last>
20001394:	4672      	mov	r2, lr
20001396:	e7ce      	b.n	20001336 <RenderPlane2_OutLoop>

20001398 <RenderProgress>:
20001398:	b5f0      	push	{r4, r5, r6, r7, lr}
2000139a:	9c05      	ldr	r4, [sp, #20]
2000139c:	0889      	lsrs	r1, r1, #2
2000139e:	68e5      	ldr	r5, [r4, #12]
200013a0:	5caa      	ldrb	r2, [r5, r2]
200013a2:	089b      	lsrs	r3, r3, #2
200013a4:	8927      	ldrh	r7, [r4, #8]
200013a6:	08bf      	lsrs	r7, r7, #2
200013a8:	46be      	mov	lr, r7
200013aa:	69a5      	ldr	r5, [r4, #24]
200013ac:	6964      	ldr	r4, [r4, #20]
200013ae:	421b      	tst	r3, r3
200013b0:	d017      	beq.n	200013e2 <RenderProgress+0x4a>
200013b2:	4677      	mov	r7, lr
200013b4:	1a7f      	subs	r7, r7, r1
200013b6:	429f      	cmp	r7, r3
200013b8:	d900      	bls.n	200013bc <RenderProgress+0x24>
200013ba:	461f      	mov	r7, r3
200013bc:	1bdb      	subs	r3, r3, r7
200013be:	4291      	cmp	r1, r2
200013c0:	d208      	bcs.n	200013d4 <RenderProgress+0x3c>
200013c2:	1a56      	subs	r6, r2, r1
200013c4:	42be      	cmp	r6, r7
200013c6:	d900      	bls.n	200013ca <RenderProgress+0x32>
200013c8:	463e      	mov	r6, r7
200013ca:	1bbf      	subs	r7, r7, r6
200013cc:	c040      	stmia	r0!, {r6}
200013ce:	1866      	adds	r6, r4, r1
200013d0:	c040      	stmia	r0!, {r6}
200013d2:	4611      	mov	r1, r2
200013d4:	423f      	tst	r7, r7
200013d6:	d002      	beq.n	200013de <RenderProgress+0x46>
200013d8:	c080      	stmia	r0!, {r7}
200013da:	186e      	adds	r6, r5, r1
200013dc:	c040      	stmia	r0!, {r6}
200013de:	2100      	movs	r1, #0
200013e0:	e7e5      	b.n	200013ae <RenderProgress+0x16>
200013e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

200013e4 <RenderSprite>:
200013e4:	b5f0      	push	{r4, r5, r6, r7, lr}
200013e6:	6817      	ldr	r7, [r2, #0]
200013e8:	8ad6      	ldrh	r6, [r2, #22]
200013ea:	8c12      	ldrh	r2, [r2, #32]
200013ec:	3a01      	subs	r2, #1
200013ee:	d324      	bcc.n	2000143a <RenderSprite+0x56>
200013f0:	b407      	push	{r0, r1, r2}
200013f2:	cf08      	ldmia	r7!, {r3}
200013f4:	8a5c      	ldrh	r4, [r3, #18]
200013f6:	b224      	sxth	r4, r4
200013f8:	1b09      	subs	r1, r1, r4
200013fa:	d41c      	bmi.n	20001436 <RenderSprite+0x52>
200013fc:	8adc      	ldrh	r4, [r3, #22]
200013fe:	42a1      	cmp	r1, r4
20001400:	da19      	bge.n	20001436 <RenderSprite+0x52>
20001402:	685c      	ldr	r4, [r3, #4]
20001404:	5c65      	ldrb	r5, [r4, r1]
20001406:	689c      	ldr	r4, [r3, #8]
20001408:	5c62      	ldrb	r2, [r4, r1]
2000140a:	8b1c      	ldrh	r4, [r3, #24]
2000140c:	4361      	muls	r1, r4
2000140e:	681c      	ldr	r4, [r3, #0]
20001410:	4421      	add	r1, r4
20001412:	8a1c      	ldrh	r4, [r3, #16]
20001414:	b224      	sxth	r4, r4
20001416:	7b1b      	ldrb	r3, [r3, #12]
20001418:	1964      	adds	r4, r4, r5
2000141a:	d502      	bpl.n	20001422 <RenderSprite+0x3e>
2000141c:	1b2d      	subs	r5, r5, r4
2000141e:	1912      	adds	r2, r2, r4
20001420:	2400      	movs	r4, #0
20001422:	1949      	adds	r1, r1, r5
20001424:	1b35      	subs	r5, r6, r4
20001426:	42aa      	cmp	r2, r5
20001428:	dd00      	ble.n	2000142c <RenderSprite+0x48>
2000142a:	462a      	mov	r2, r5
2000142c:	4212      	tst	r2, r2
2000142e:	dd02      	ble.n	20001436 <RenderSprite+0x52>
20001430:	1900      	adds	r0, r0, r4
20001432:	f000 fc11 	bl	20001c58 <BlitKey>
20001436:	bc07      	pop	{r0, r1, r2}
20001438:	e7d8      	b.n	200013ec <RenderSprite+0x8>
2000143a:	bdf0      	pop	{r4, r5, r6, r7, pc}

2000143c <RenderTile>:
2000143c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
2000143e:	9c08      	ldr	r4, [sp, #32]
20001440:	4d2f      	ldr	r5, [pc, #188]	; (20001500 <RenderTile_pSioBase>)
20001442:	662a      	str	r2, [r5, #96]	; 0x60
20001444:	69a2      	ldr	r2, [r4, #24]
20001446:	666a      	str	r2, [r5, #100]	; 0x64
20001448:	8927      	ldrh	r7, [r4, #8]
2000144a:	2603      	movs	r6, #3
2000144c:	43b7      	bics	r7, r6
2000144e:	9700      	str	r7, [sp, #0]
20001450:	43b1      	bics	r1, r6
20001452:	43b3      	bics	r3, r6
20001454:	9301      	str	r3, [sp, #4]
20001456:	8a63      	ldrh	r3, [r4, #18]
20001458:	9302      	str	r3, [sp, #8]
2000145a:	6f6e      	ldr	r6, [r5, #116]	; 0x74
2000145c:	6f2f      	ldr	r7, [r5, #112]	; 0x70
2000145e:	6629      	str	r1, [r5, #96]	; 0x60
20001460:	666b      	str	r3, [r5, #100]	; 0x64
20001462:	435a      	muls	r2, r3
20001464:	8863      	ldrh	r3, [r4, #2]
20001466:	435f      	muls	r7, r3
20001468:	68e3      	ldr	r3, [r4, #12]
2000146a:	18ff      	adds	r7, r7, r3
2000146c:	46be      	mov	lr, r7
2000146e:	9b02      	ldr	r3, [sp, #8]
20001470:	435e      	muls	r6, r3
20001472:	6964      	ldr	r4, [r4, #20]
20001474:	19a4      	adds	r4, r4, r6
20001476:	6f6e      	ldr	r6, [r5, #116]	; 0x74
20001478:	6f2d      	ldr	r5, [r5, #112]	; 0x70
2000147a:	197f      	adds	r7, r7, r5
2000147c:	4236      	tst	r6, r6
2000147e:	d011      	beq.n	200014a4 <RenderTile+0x68>
20001480:	1b9d      	subs	r5, r3, r6
20001482:	1949      	adds	r1, r1, r5
20001484:	9b01      	ldr	r3, [sp, #4]
20001486:	1b5b      	subs	r3, r3, r5
20001488:	9301      	str	r3, [sp, #4]
2000148a:	08ad      	lsrs	r5, r5, #2
2000148c:	c020      	stmia	r0!, {r5}
2000148e:	783b      	ldrb	r3, [r7, #0]
20001490:	3701      	adds	r7, #1
20001492:	4353      	muls	r3, r2
20001494:	4423      	add	r3, r4
20001496:	4433      	add	r3, r6
20001498:	c008      	stmia	r0!, {r3}
2000149a:	9b00      	ldr	r3, [sp, #0]
2000149c:	4299      	cmp	r1, r3
2000149e:	d301      	bcc.n	200014a4 <RenderTile+0x68>
200014a0:	2100      	movs	r1, #0
200014a2:	4677      	mov	r7, lr
200014a4:	9b00      	ldr	r3, [sp, #0]
200014a6:	1a5d      	subs	r5, r3, r1
200014a8:	9b01      	ldr	r3, [sp, #4]

200014aa <RenderTile_OutLoop>:
200014aa:	429d      	cmp	r5, r3
200014ac:	d900      	bls.n	200014b0 <RenderTile_OutLoop+0x6>
200014ae:	461d      	mov	r5, r3
200014b0:	9902      	ldr	r1, [sp, #8]
200014b2:	428d      	cmp	r5, r1
200014b4:	d20e      	bcs.n	200014d4 <RenderTile_Last+0x18>
200014b6:	2d04      	cmp	r5, #4
200014b8:	d30b      	bcc.n	200014d2 <RenderTile_Last+0x16>
200014ba:	4629      	mov	r1, r5

200014bc <RenderTile_Last>:
200014bc:	088e      	lsrs	r6, r1, #2
200014be:	c040      	stmia	r0!, {r6}
200014c0:	783e      	ldrb	r6, [r7, #0]
200014c2:	3701      	adds	r7, #1
200014c4:	4356      	muls	r6, r2
200014c6:	4426      	add	r6, r4
200014c8:	c040      	stmia	r0!, {r6}
200014ca:	4677      	mov	r7, lr
200014cc:	9e02      	ldr	r6, [sp, #8]
200014ce:	42b5      	cmp	r5, r6
200014d0:	d2eb      	bcs.n	200014aa <RenderTile_OutLoop>
200014d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
200014d4:	08a9      	lsrs	r1, r5, #2
200014d6:	008d      	lsls	r5, r1, #2
200014d8:	1b5b      	subs	r3, r3, r5
200014da:	9d02      	ldr	r5, [sp, #8]
200014dc:	08ad      	lsrs	r5, r5, #2
200014de:	1b49      	subs	r1, r1, r5
200014e0:	3101      	adds	r1, #1

200014e2 <RenderTile_InLoop>:
200014e2:	783e      	ldrb	r6, [r7, #0]
200014e4:	3701      	adds	r7, #1
200014e6:	4356      	muls	r6, r2
200014e8:	4426      	add	r6, r4
200014ea:	c060      	stmia	r0!, {r5, r6}
200014ec:	1b49      	subs	r1, r1, r5
200014ee:	d8f8      	bhi.n	200014e2 <RenderTile_InLoop>
200014f0:	1949      	adds	r1, r1, r5
200014f2:	3901      	subs	r1, #1
200014f4:	9d00      	ldr	r5, [sp, #0]
200014f6:	0089      	lsls	r1, r1, #2
200014f8:	d1e0      	bne.n	200014bc <RenderTile_Last>
200014fa:	4677      	mov	r7, lr
200014fc:	e7d5      	b.n	200014aa <RenderTile_OutLoop>
200014fe:	46c0      	nop			; (mov r8, r8)

20001500 <RenderTile_pSioBase>:
20001500:	d0000000 	.word	0xd0000000

20001504 <RenderTile2>:
20001504:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
20001506:	9c07      	ldr	r4, [sp, #28]
20001508:	4d2c      	ldr	r5, [pc, #176]	; (200015bc <RenderTile_pSioBase>)
2000150a:	662a      	str	r2, [r5, #96]	; 0x60
2000150c:	8b22      	ldrh	r2, [r4, #24]
2000150e:	666a      	str	r2, [r5, #100]	; 0x64
20001510:	8927      	ldrh	r7, [r4, #8]
20001512:	2603      	movs	r6, #3
20001514:	43b7      	bics	r7, r6
20001516:	9700      	str	r7, [sp, #0]
20001518:	43b1      	bics	r1, r6
2000151a:	43b3      	bics	r3, r6
2000151c:	9301      	str	r3, [sp, #4]
2000151e:	8a63      	ldrh	r3, [r4, #18]
20001520:	6f6e      	ldr	r6, [r5, #116]	; 0x74
20001522:	6f2f      	ldr	r7, [r5, #112]	; 0x70
20001524:	6629      	str	r1, [r5, #96]	; 0x60
20001526:	666b      	str	r3, [r5, #100]	; 0x64
20001528:	8862      	ldrh	r2, [r4, #2]
2000152a:	4357      	muls	r7, r2
2000152c:	68e2      	ldr	r2, [r4, #12]
2000152e:	18bf      	adds	r7, r7, r2
20001530:	46be      	mov	lr, r7
20001532:	8b62      	ldrh	r2, [r4, #26]
20001534:	4356      	muls	r6, r2
20001536:	6964      	ldr	r4, [r4, #20]
20001538:	19a4      	adds	r4, r4, r6
2000153a:	6f6e      	ldr	r6, [r5, #116]	; 0x74
2000153c:	6f2d      	ldr	r5, [r5, #112]	; 0x70
2000153e:	197f      	adds	r7, r7, r5
20001540:	4236      	tst	r6, r6
20001542:	d011      	beq.n	20001568 <RenderTile2+0x64>
20001544:	1b9d      	subs	r5, r3, r6
20001546:	1949      	adds	r1, r1, r5
20001548:	9a01      	ldr	r2, [sp, #4]
2000154a:	1b52      	subs	r2, r2, r5
2000154c:	9201      	str	r2, [sp, #4]
2000154e:	08ad      	lsrs	r5, r5, #2
20001550:	c020      	stmia	r0!, {r5}
20001552:	783a      	ldrb	r2, [r7, #0]
20001554:	3701      	adds	r7, #1
20001556:	435a      	muls	r2, r3
20001558:	4422      	add	r2, r4
2000155a:	4432      	add	r2, r6
2000155c:	c004      	stmia	r0!, {r2}
2000155e:	9a00      	ldr	r2, [sp, #0]
20001560:	4291      	cmp	r1, r2
20001562:	d301      	bcc.n	20001568 <RenderTile2+0x64>
20001564:	2100      	movs	r1, #0
20001566:	4677      	mov	r7, lr
20001568:	9a00      	ldr	r2, [sp, #0]
2000156a:	1a55      	subs	r5, r2, r1
2000156c:	9a01      	ldr	r2, [sp, #4]

2000156e <RenderTile_OutLoop>:
2000156e:	4295      	cmp	r5, r2
20001570:	d900      	bls.n	20001574 <RenderTile_OutLoop+0x6>
20001572:	4615      	mov	r5, r2
20001574:	429d      	cmp	r5, r3
20001576:	d20d      	bcs.n	20001594 <RenderTile_Last+0x16>
20001578:	2d04      	cmp	r5, #4
2000157a:	d30a      	bcc.n	20001592 <RenderTile_Last+0x14>
2000157c:	4629      	mov	r1, r5

2000157e <RenderTile_Last>:
2000157e:	088e      	lsrs	r6, r1, #2
20001580:	c040      	stmia	r0!, {r6}
20001582:	783e      	ldrb	r6, [r7, #0]
20001584:	3701      	adds	r7, #1
20001586:	435e      	muls	r6, r3
20001588:	4426      	add	r6, r4
2000158a:	c040      	stmia	r0!, {r6}
2000158c:	4677      	mov	r7, lr
2000158e:	429d      	cmp	r5, r3
20001590:	d2ed      	bcs.n	2000156e <RenderTile_OutLoop>
20001592:	bdfc      	pop	{r2, r3, r4, r5, r6, r7, pc}
20001594:	08a9      	lsrs	r1, r5, #2
20001596:	008d      	lsls	r5, r1, #2
20001598:	1b52      	subs	r2, r2, r5
2000159a:	089d      	lsrs	r5, r3, #2
2000159c:	1b49      	subs	r1, r1, r5
2000159e:	3101      	adds	r1, #1

200015a0 <RenderTile_InLoop>:
200015a0:	783e      	ldrb	r6, [r7, #0]
200015a2:	3701      	adds	r7, #1
200015a4:	435e      	muls	r6, r3
200015a6:	4426      	add	r6, r4
200015a8:	c060      	stmia	r0!, {r5, r6}
200015aa:	1b49      	subs	r1, r1, r5
200015ac:	d8f8      	bhi.n	200015a0 <RenderTile_InLoop>
200015ae:	1949      	adds	r1, r1, r5
200015b0:	3901      	subs	r1, #1
200015b2:	9d00      	ldr	r5, [sp, #0]
200015b4:	0089      	lsls	r1, r1, #2
200015b6:	d1e2      	bne.n	2000157e <RenderTile_Last>
200015b8:	4677      	mov	r7, lr
200015ba:	e7d8      	b.n	2000156e <RenderTile_OutLoop>

200015bc <RenderTile_pSioBase>:
200015bc:	d0000000 	.word	0xd0000000

200015c0 <RenderTilePersp>:
200015c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200015c2:	9c06      	ldr	r4, [sp, #24]
200015c4:	4e5c      	ldr	r6, [pc, #368]	; (20001738 <RenderTilePersp_pSioBase>)
200015c6:	8965      	ldrh	r5, [r4, #10]
200015c8:	7ce1      	ldrb	r1, [r4, #19]
200015ca:	b249      	sxtb	r1, r1
200015cc:	0089      	lsls	r1, r1, #2
200015ce:	d107      	bne.n	200015e0 <RenderTilePersp+0x20>
200015d0:	086d      	lsrs	r5, r5, #1
200015d2:	1b52      	subs	r2, r2, r5
200015d4:	4694      	mov	ip, r2
200015d6:	2501      	movs	r5, #1
200015d8:	6675      	str	r5, [r6, #100]	; 0x64
200015da:	032d      	lsls	r5, r5, #12
200015dc:	6635      	str	r5, [r6, #96]	; 0x60
200015de:	e009      	b.n	200015f4 <RenderTilePersp+0x34>
200015e0:	d502      	bpl.n	200015e8 <RenderTilePersp+0x28>
200015e2:	1aaa      	subs	r2, r5, r2
200015e4:	3a01      	subs	r2, #1
200015e6:	4249      	negs	r1, r1
200015e8:	1b57      	subs	r7, r2, r5
200015ea:	46bc      	mov	ip, r7
200015ec:	032d      	lsls	r5, r5, #12
200015ee:	6635      	str	r5, [r6, #96]	; 0x60
200015f0:	1852      	adds	r2, r2, r1
200015f2:	6672      	str	r2, [r6, #100]	; 0x64
200015f4:	085d      	lsrs	r5, r3, #1
200015f6:	426d      	negs	r5, r5
200015f8:	46ae      	mov	lr, r5
200015fa:	089f      	lsrs	r7, r3, #2
200015fc:	4b4f      	ldr	r3, [pc, #316]	; (2000173c <RenderTilePersp_Interp>)
200015fe:	68e6      	ldr	r6, [r4, #12]
20001600:	611e      	str	r6, [r3, #16]
20001602:	4e4f      	ldr	r6, [pc, #316]	; (20001740 <RenderTilePersp_Ctrl>)
20001604:	7ca1      	ldrb	r1, [r4, #18]
20001606:	9100      	str	r1, [sp, #0]
20001608:	1876      	adds	r6, r6, r1
2000160a:	78a2      	ldrb	r2, [r4, #2]
2000160c:	1e55      	subs	r5, r2, #1
2000160e:	02ad      	lsls	r5, r5, #10
20001610:	432e      	orrs	r6, r5
20001612:	62de      	str	r6, [r3, #44]	; 0x2c
20001614:	1ab6      	subs	r6, r6, r2
20001616:	0152      	lsls	r2, r2, #5
20001618:	4316      	orrs	r6, r2
2000161a:	78e2      	ldrb	r2, [r4, #3]
2000161c:	0292      	lsls	r2, r2, #10
2000161e:	18b6      	adds	r6, r6, r2
20001620:	631e      	str	r6, [r3, #48]	; 0x30
20001622:	6966      	ldr	r6, [r4, #20]
20001624:	651e      	str	r6, [r3, #80]	; 0x50
20001626:	4e46      	ldr	r6, [pc, #280]	; (20001740 <RenderTilePersp_Ctrl>)
20001628:	1e4d      	subs	r5, r1, #1
2000162a:	02ad      	lsls	r5, r5, #10
2000162c:	432e      	orrs	r6, r5
2000162e:	66de      	str	r6, [r3, #108]	; 0x6c
20001630:	1a76      	subs	r6, r6, r1
20001632:	014d      	lsls	r5, r1, #5
20001634:	432e      	orrs	r6, r5
20001636:	0289      	lsls	r1, r1, #10
20001638:	1876      	adds	r6, r6, r1
2000163a:	671e      	str	r6, [r3, #112]	; 0x70
2000163c:	69a4      	ldr	r4, [r4, #24]
2000163e:	493e      	ldr	r1, [pc, #248]	; (20001738 <RenderTilePersp_pSioBase>)
20001640:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001642:	6825      	ldr	r5, [r4, #0]
20001644:	434d      	muls	r5, r1
20001646:	132d      	asrs	r5, r5, #12
20001648:	609d      	str	r5, [r3, #8]
2000164a:	649d      	str	r5, [r3, #72]	; 0x48
2000164c:	68e6      	ldr	r6, [r4, #12]
2000164e:	434e      	muls	r6, r1
20001650:	1336      	asrs	r6, r6, #12
20001652:	60de      	str	r6, [r3, #12]
20001654:	64de      	str	r6, [r3, #76]	; 0x4c
20001656:	4672      	mov	r2, lr
20001658:	4355      	muls	r5, r2
2000165a:	4372      	muls	r2, r6
2000165c:	468e      	mov	lr, r1
2000165e:	6866      	ldr	r6, [r4, #4]
20001660:	4371      	muls	r1, r6
20001662:	1309      	asrs	r1, r1, #12
20001664:	4666      	mov	r6, ip
20001666:	4371      	muls	r1, r6
20001668:	186d      	adds	r5, r5, r1
2000166a:	68a1      	ldr	r1, [r4, #8]
2000166c:	186d      	adds	r5, r5, r1
2000166e:	601d      	str	r5, [r3, #0]
20001670:	641d      	str	r5, [r3, #64]	; 0x40
20001672:	6921      	ldr	r1, [r4, #16]
20001674:	4675      	mov	r5, lr
20001676:	4369      	muls	r1, r5
20001678:	1309      	asrs	r1, r1, #12
2000167a:	4371      	muls	r1, r6
2000167c:	1852      	adds	r2, r2, r1
2000167e:	6961      	ldr	r1, [r4, #20]
20001680:	1852      	adds	r2, r2, r1
20001682:	605a      	str	r2, [r3, #4]
20001684:	645a      	str	r2, [r3, #68]	; 0x44
20001686:	9e00      	ldr	r6, [sp, #0]
20001688:	0076      	lsls	r6, r6, #1
2000168a:	087f      	lsrs	r7, r7, #1
2000168c:	d31a      	bcc.n	200016c4 <RenderTilePersp+0x104>
2000168e:	69dc      	ldr	r4, [r3, #28]
20001690:	7824      	ldrb	r4, [r4, #0]
20001692:	40b4      	lsls	r4, r6
20001694:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001696:	5d29      	ldrb	r1, [r5, r4]
20001698:	69dc      	ldr	r4, [r3, #28]
2000169a:	7824      	ldrb	r4, [r4, #0]
2000169c:	40b4      	lsls	r4, r6
2000169e:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016a0:	5d2c      	ldrb	r4, [r5, r4]
200016a2:	0224      	lsls	r4, r4, #8
200016a4:	4321      	orrs	r1, r4
200016a6:	69dc      	ldr	r4, [r3, #28]
200016a8:	7824      	ldrb	r4, [r4, #0]
200016aa:	40b4      	lsls	r4, r6
200016ac:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016ae:	5d2c      	ldrb	r4, [r5, r4]
200016b0:	0424      	lsls	r4, r4, #16
200016b2:	4321      	orrs	r1, r4
200016b4:	69dc      	ldr	r4, [r3, #28]
200016b6:	7824      	ldrb	r4, [r4, #0]
200016b8:	40b4      	lsls	r4, r6
200016ba:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016bc:	5d2c      	ldrb	r4, [r5, r4]
200016be:	0624      	lsls	r4, r4, #24
200016c0:	4321      	orrs	r1, r4
200016c2:	c002      	stmia	r0!, {r1}
200016c4:	423f      	tst	r7, r7
200016c6:	d036      	beq.n	20001736 <RenderTilePersp+0x176>
200016c8:	69dc      	ldr	r4, [r3, #28]
200016ca:	7824      	ldrb	r4, [r4, #0]
200016cc:	40b4      	lsls	r4, r6
200016ce:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016d0:	5d29      	ldrb	r1, [r5, r4]
200016d2:	69dc      	ldr	r4, [r3, #28]
200016d4:	7824      	ldrb	r4, [r4, #0]
200016d6:	40b4      	lsls	r4, r6
200016d8:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016da:	5d2c      	ldrb	r4, [r5, r4]
200016dc:	0224      	lsls	r4, r4, #8
200016de:	4321      	orrs	r1, r4
200016e0:	69dc      	ldr	r4, [r3, #28]
200016e2:	7824      	ldrb	r4, [r4, #0]
200016e4:	40b4      	lsls	r4, r6
200016e6:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016e8:	5d2c      	ldrb	r4, [r5, r4]
200016ea:	0424      	lsls	r4, r4, #16
200016ec:	4321      	orrs	r1, r4
200016ee:	69dc      	ldr	r4, [r3, #28]
200016f0:	7824      	ldrb	r4, [r4, #0]
200016f2:	40b4      	lsls	r4, r6
200016f4:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016f6:	5d2c      	ldrb	r4, [r5, r4]
200016f8:	0624      	lsls	r4, r4, #24
200016fa:	4321      	orrs	r1, r4
200016fc:	69dc      	ldr	r4, [r3, #28]
200016fe:	7824      	ldrb	r4, [r4, #0]
20001700:	40b4      	lsls	r4, r6
20001702:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001704:	5d2a      	ldrb	r2, [r5, r4]
20001706:	69dc      	ldr	r4, [r3, #28]
20001708:	7824      	ldrb	r4, [r4, #0]
2000170a:	40b4      	lsls	r4, r6
2000170c:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000170e:	5d2c      	ldrb	r4, [r5, r4]
20001710:	0224      	lsls	r4, r4, #8
20001712:	4322      	orrs	r2, r4
20001714:	69dc      	ldr	r4, [r3, #28]
20001716:	7824      	ldrb	r4, [r4, #0]
20001718:	40b4      	lsls	r4, r6
2000171a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000171c:	5d2c      	ldrb	r4, [r5, r4]
2000171e:	0424      	lsls	r4, r4, #16
20001720:	4322      	orrs	r2, r4
20001722:	69dc      	ldr	r4, [r3, #28]
20001724:	7824      	ldrb	r4, [r4, #0]
20001726:	40b4      	lsls	r4, r6
20001728:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000172a:	5d2c      	ldrb	r4, [r5, r4]
2000172c:	0624      	lsls	r4, r4, #24
2000172e:	4322      	orrs	r2, r4
20001730:	c006      	stmia	r0!, {r1, r2}
20001732:	3f01      	subs	r7, #1
20001734:	d1c8      	bne.n	200016c8 <RenderTilePersp+0x108>
20001736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

20001738 <RenderTilePersp_pSioBase>:
20001738:	d0000000 	.word	0xd0000000

2000173c <RenderTilePersp_Interp>:
2000173c:	d0000080 	.word	0xd0000080

20001740 <RenderTilePersp_Ctrl>:
20001740:	0004000c 	.word	0x0004000c

20001744 <RenderTilePersp15>:
20001744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001746:	9c06      	ldr	r4, [sp, #24]
20001748:	4e57      	ldr	r6, [pc, #348]	; (200018a8 <RenderTilePersp_pSioBase>)
2000174a:	8965      	ldrh	r5, [r4, #10]
2000174c:	7ce1      	ldrb	r1, [r4, #19]
2000174e:	b249      	sxtb	r1, r1
20001750:	0089      	lsls	r1, r1, #2
20001752:	d107      	bne.n	20001764 <RenderTilePersp15+0x20>
20001754:	086d      	lsrs	r5, r5, #1
20001756:	1b52      	subs	r2, r2, r5
20001758:	4694      	mov	ip, r2
2000175a:	2501      	movs	r5, #1
2000175c:	6675      	str	r5, [r6, #100]	; 0x64
2000175e:	032d      	lsls	r5, r5, #12
20001760:	6635      	str	r5, [r6, #96]	; 0x60
20001762:	e009      	b.n	20001778 <RenderTilePersp15+0x34>
20001764:	d502      	bpl.n	2000176c <RenderTilePersp15+0x28>
20001766:	1aaa      	subs	r2, r5, r2
20001768:	3a01      	subs	r2, #1
2000176a:	4249      	negs	r1, r1
2000176c:	1b57      	subs	r7, r2, r5
2000176e:	46bc      	mov	ip, r7
20001770:	032d      	lsls	r5, r5, #12
20001772:	6635      	str	r5, [r6, #96]	; 0x60
20001774:	1852      	adds	r2, r2, r1
20001776:	6672      	str	r2, [r6, #100]	; 0x64
20001778:	085d      	lsrs	r5, r3, #1
2000177a:	426d      	negs	r5, r5
2000177c:	46ae      	mov	lr, r5
2000177e:	089f      	lsrs	r7, r3, #2
20001780:	4b4a      	ldr	r3, [pc, #296]	; (200018ac <RenderTilePersp_Interp>)
20001782:	68e6      	ldr	r6, [r4, #12]
20001784:	611e      	str	r6, [r3, #16]
20001786:	4e4a      	ldr	r6, [pc, #296]	; (200018b0 <RenderTilePersp_Ctrl>)
20001788:	7ca1      	ldrb	r1, [r4, #18]
2000178a:	9100      	str	r1, [sp, #0]
2000178c:	1876      	adds	r6, r6, r1
2000178e:	78a2      	ldrb	r2, [r4, #2]
20001790:	1e55      	subs	r5, r2, #1
20001792:	02ad      	lsls	r5, r5, #10
20001794:	432e      	orrs	r6, r5
20001796:	62de      	str	r6, [r3, #44]	; 0x2c
20001798:	1ab6      	subs	r6, r6, r2
2000179a:	0152      	lsls	r2, r2, #5
2000179c:	4316      	orrs	r6, r2
2000179e:	78e2      	ldrb	r2, [r4, #3]
200017a0:	0292      	lsls	r2, r2, #10
200017a2:	18b6      	adds	r6, r6, r2
200017a4:	631e      	str	r6, [r3, #48]	; 0x30
200017a6:	6966      	ldr	r6, [r4, #20]
200017a8:	651e      	str	r6, [r3, #80]	; 0x50
200017aa:	4e41      	ldr	r6, [pc, #260]	; (200018b0 <RenderTilePersp_Ctrl>)
200017ac:	1e4d      	subs	r5, r1, #1
200017ae:	02ad      	lsls	r5, r5, #10
200017b0:	432e      	orrs	r6, r5
200017b2:	66de      	str	r6, [r3, #108]	; 0x6c
200017b4:	1a76      	subs	r6, r6, r1
200017b6:	014d      	lsls	r5, r1, #5
200017b8:	432e      	orrs	r6, r5
200017ba:	0289      	lsls	r1, r1, #10
200017bc:	1876      	adds	r6, r6, r1
200017be:	671e      	str	r6, [r3, #112]	; 0x70
200017c0:	69a4      	ldr	r4, [r4, #24]
200017c2:	4939      	ldr	r1, [pc, #228]	; (200018a8 <RenderTilePersp_pSioBase>)
200017c4:	6f09      	ldr	r1, [r1, #112]	; 0x70
200017c6:	6825      	ldr	r5, [r4, #0]
200017c8:	434d      	muls	r5, r1
200017ca:	132d      	asrs	r5, r5, #12
200017cc:	106a      	asrs	r2, r5, #1
200017ce:	1952      	adds	r2, r2, r5
200017d0:	609a      	str	r2, [r3, #8]
200017d2:	649a      	str	r2, [r3, #72]	; 0x48
200017d4:	68e6      	ldr	r6, [r4, #12]
200017d6:	434e      	muls	r6, r1
200017d8:	1336      	asrs	r6, r6, #12
200017da:	1072      	asrs	r2, r6, #1
200017dc:	1992      	adds	r2, r2, r6
200017de:	60da      	str	r2, [r3, #12]
200017e0:	64da      	str	r2, [r3, #76]	; 0x4c
200017e2:	4672      	mov	r2, lr
200017e4:	4355      	muls	r5, r2
200017e6:	4372      	muls	r2, r6
200017e8:	468e      	mov	lr, r1
200017ea:	6866      	ldr	r6, [r4, #4]
200017ec:	4371      	muls	r1, r6
200017ee:	1309      	asrs	r1, r1, #12
200017f0:	4666      	mov	r6, ip
200017f2:	4371      	muls	r1, r6
200017f4:	186d      	adds	r5, r5, r1
200017f6:	68a1      	ldr	r1, [r4, #8]
200017f8:	186d      	adds	r5, r5, r1
200017fa:	601d      	str	r5, [r3, #0]
200017fc:	641d      	str	r5, [r3, #64]	; 0x40
200017fe:	6921      	ldr	r1, [r4, #16]
20001800:	4675      	mov	r5, lr
20001802:	4369      	muls	r1, r5
20001804:	1309      	asrs	r1, r1, #12
20001806:	4371      	muls	r1, r6
20001808:	1852      	adds	r2, r2, r1
2000180a:	6961      	ldr	r1, [r4, #20]
2000180c:	1852      	adds	r2, r2, r1
2000180e:	605a      	str	r2, [r3, #4]
20001810:	645a      	str	r2, [r3, #68]	; 0x44
20001812:	9e00      	ldr	r6, [sp, #0]
20001814:	0076      	lsls	r6, r6, #1
20001816:	087f      	lsrs	r7, r7, #1
20001818:	d315      	bcc.n	20001846 <RenderTilePersp15+0x102>
2000181a:	69dc      	ldr	r4, [r3, #28]
2000181c:	7824      	ldrb	r4, [r4, #0]
2000181e:	40b4      	lsls	r4, r6
20001820:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001822:	5d29      	ldrb	r1, [r5, r4]
20001824:	69dc      	ldr	r4, [r3, #28]
20001826:	7824      	ldrb	r4, [r4, #0]
20001828:	40b4      	lsls	r4, r6
2000182a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000182c:	5d2c      	ldrb	r4, [r5, r4]
2000182e:	0224      	lsls	r4, r4, #8
20001830:	4321      	orrs	r1, r4
20001832:	69dc      	ldr	r4, [r3, #28]
20001834:	7824      	ldrb	r4, [r4, #0]
20001836:	40b4      	lsls	r4, r6
20001838:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000183a:	5d2c      	ldrb	r4, [r5, r4]
2000183c:	0424      	lsls	r4, r4, #16
2000183e:	4321      	orrs	r1, r4
20001840:	0224      	lsls	r4, r4, #8
20001842:	4321      	orrs	r1, r4
20001844:	c002      	stmia	r0!, {r1}
20001846:	423f      	tst	r7, r7
20001848:	d02c      	beq.n	200018a4 <RenderTilePersp15+0x160>
2000184a:	69dc      	ldr	r4, [r3, #28]
2000184c:	7824      	ldrb	r4, [r4, #0]
2000184e:	40b4      	lsls	r4, r6
20001850:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001852:	5d29      	ldrb	r1, [r5, r4]
20001854:	69dc      	ldr	r4, [r3, #28]
20001856:	7824      	ldrb	r4, [r4, #0]
20001858:	40b4      	lsls	r4, r6
2000185a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000185c:	5d2c      	ldrb	r4, [r5, r4]
2000185e:	0224      	lsls	r4, r4, #8
20001860:	4321      	orrs	r1, r4
20001862:	69dc      	ldr	r4, [r3, #28]
20001864:	7824      	ldrb	r4, [r4, #0]
20001866:	40b4      	lsls	r4, r6
20001868:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000186a:	5d2c      	ldrb	r4, [r5, r4]
2000186c:	0424      	lsls	r4, r4, #16
2000186e:	4321      	orrs	r1, r4
20001870:	0224      	lsls	r4, r4, #8
20001872:	4321      	orrs	r1, r4
20001874:	69dc      	ldr	r4, [r3, #28]
20001876:	7824      	ldrb	r4, [r4, #0]
20001878:	40b4      	lsls	r4, r6
2000187a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000187c:	5d2a      	ldrb	r2, [r5, r4]
2000187e:	69dc      	ldr	r4, [r3, #28]
20001880:	7824      	ldrb	r4, [r4, #0]
20001882:	40b4      	lsls	r4, r6
20001884:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001886:	5d2c      	ldrb	r4, [r5, r4]
20001888:	0224      	lsls	r4, r4, #8
2000188a:	4322      	orrs	r2, r4
2000188c:	69dc      	ldr	r4, [r3, #28]
2000188e:	7824      	ldrb	r4, [r4, #0]
20001890:	40b4      	lsls	r4, r6
20001892:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001894:	5d2c      	ldrb	r4, [r5, r4]
20001896:	0424      	lsls	r4, r4, #16
20001898:	4322      	orrs	r2, r4
2000189a:	0224      	lsls	r4, r4, #8
2000189c:	4322      	orrs	r2, r4
2000189e:	c006      	stmia	r0!, {r1, r2}
200018a0:	3f01      	subs	r7, #1
200018a2:	d1d2      	bne.n	2000184a <RenderTilePersp15+0x106>
200018a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
200018a6:	46c0      	nop			; (mov r8, r8)

200018a8 <RenderTilePersp_pSioBase>:
200018a8:	d0000000 	.word	0xd0000000

200018ac <RenderTilePersp_Interp>:
200018ac:	d0000080 	.word	0xd0000080

200018b0 <RenderTilePersp_Ctrl>:
200018b0:	0004000c 	.word	0x0004000c

200018b4 <RenderTilePersp2>:
200018b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200018b6:	9c06      	ldr	r4, [sp, #24]
200018b8:	4e4e      	ldr	r6, [pc, #312]	; (200019f4 <RenderTilePersp_pSioBase>)
200018ba:	8965      	ldrh	r5, [r4, #10]
200018bc:	7ce1      	ldrb	r1, [r4, #19]
200018be:	b249      	sxtb	r1, r1
200018c0:	0089      	lsls	r1, r1, #2
200018c2:	d107      	bne.n	200018d4 <RenderTilePersp2+0x20>
200018c4:	086d      	lsrs	r5, r5, #1
200018c6:	1b52      	subs	r2, r2, r5
200018c8:	4694      	mov	ip, r2
200018ca:	2501      	movs	r5, #1
200018cc:	6675      	str	r5, [r6, #100]	; 0x64
200018ce:	032d      	lsls	r5, r5, #12
200018d0:	6635      	str	r5, [r6, #96]	; 0x60
200018d2:	e009      	b.n	200018e8 <RenderTilePersp2+0x34>
200018d4:	d502      	bpl.n	200018dc <RenderTilePersp2+0x28>
200018d6:	1aaa      	subs	r2, r5, r2
200018d8:	3a01      	subs	r2, #1
200018da:	4249      	negs	r1, r1
200018dc:	1b57      	subs	r7, r2, r5
200018de:	46bc      	mov	ip, r7
200018e0:	032d      	lsls	r5, r5, #12
200018e2:	6635      	str	r5, [r6, #96]	; 0x60
200018e4:	1852      	adds	r2, r2, r1
200018e6:	6672      	str	r2, [r6, #100]	; 0x64
200018e8:	085d      	lsrs	r5, r3, #1
200018ea:	426d      	negs	r5, r5
200018ec:	46ae      	mov	lr, r5
200018ee:	089f      	lsrs	r7, r3, #2
200018f0:	4b41      	ldr	r3, [pc, #260]	; (200019f8 <RenderTilePersp_Interp>)
200018f2:	68e6      	ldr	r6, [r4, #12]
200018f4:	611e      	str	r6, [r3, #16]
200018f6:	4e41      	ldr	r6, [pc, #260]	; (200019fc <RenderTilePersp_Ctrl>)
200018f8:	7ca1      	ldrb	r1, [r4, #18]
200018fa:	9100      	str	r1, [sp, #0]
200018fc:	1876      	adds	r6, r6, r1
200018fe:	78a2      	ldrb	r2, [r4, #2]
20001900:	1e55      	subs	r5, r2, #1
20001902:	02ad      	lsls	r5, r5, #10
20001904:	432e      	orrs	r6, r5
20001906:	62de      	str	r6, [r3, #44]	; 0x2c
20001908:	1ab6      	subs	r6, r6, r2
2000190a:	0152      	lsls	r2, r2, #5
2000190c:	4316      	orrs	r6, r2
2000190e:	78e2      	ldrb	r2, [r4, #3]
20001910:	0292      	lsls	r2, r2, #10
20001912:	18b6      	adds	r6, r6, r2
20001914:	631e      	str	r6, [r3, #48]	; 0x30
20001916:	6966      	ldr	r6, [r4, #20]
20001918:	651e      	str	r6, [r3, #80]	; 0x50
2000191a:	4e38      	ldr	r6, [pc, #224]	; (200019fc <RenderTilePersp_Ctrl>)
2000191c:	1e4d      	subs	r5, r1, #1
2000191e:	02ad      	lsls	r5, r5, #10
20001920:	432e      	orrs	r6, r5
20001922:	66de      	str	r6, [r3, #108]	; 0x6c
20001924:	1a76      	subs	r6, r6, r1
20001926:	014d      	lsls	r5, r1, #5
20001928:	432e      	orrs	r6, r5
2000192a:	0289      	lsls	r1, r1, #10
2000192c:	1876      	adds	r6, r6, r1
2000192e:	671e      	str	r6, [r3, #112]	; 0x70
20001930:	69a4      	ldr	r4, [r4, #24]
20001932:	4930      	ldr	r1, [pc, #192]	; (200019f4 <RenderTilePersp_pSioBase>)
20001934:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001936:	6825      	ldr	r5, [r4, #0]
20001938:	434d      	muls	r5, r1
2000193a:	12ed      	asrs	r5, r5, #11
2000193c:	609d      	str	r5, [r3, #8]
2000193e:	649d      	str	r5, [r3, #72]	; 0x48
20001940:	106d      	asrs	r5, r5, #1
20001942:	68e6      	ldr	r6, [r4, #12]
20001944:	434e      	muls	r6, r1
20001946:	12f6      	asrs	r6, r6, #11
20001948:	60de      	str	r6, [r3, #12]
2000194a:	64de      	str	r6, [r3, #76]	; 0x4c
2000194c:	1076      	asrs	r6, r6, #1
2000194e:	4672      	mov	r2, lr
20001950:	4355      	muls	r5, r2
20001952:	4372      	muls	r2, r6
20001954:	468e      	mov	lr, r1
20001956:	6866      	ldr	r6, [r4, #4]
20001958:	4371      	muls	r1, r6
2000195a:	1309      	asrs	r1, r1, #12
2000195c:	4666      	mov	r6, ip
2000195e:	4371      	muls	r1, r6
20001960:	186d      	adds	r5, r5, r1
20001962:	68a1      	ldr	r1, [r4, #8]
20001964:	186d      	adds	r5, r5, r1
20001966:	601d      	str	r5, [r3, #0]
20001968:	641d      	str	r5, [r3, #64]	; 0x40
2000196a:	6921      	ldr	r1, [r4, #16]
2000196c:	4675      	mov	r5, lr
2000196e:	4369      	muls	r1, r5
20001970:	1309      	asrs	r1, r1, #12
20001972:	4371      	muls	r1, r6
20001974:	1852      	adds	r2, r2, r1
20001976:	6961      	ldr	r1, [r4, #20]
20001978:	1852      	adds	r2, r2, r1
2000197a:	605a      	str	r2, [r3, #4]
2000197c:	645a      	str	r2, [r3, #68]	; 0x44
2000197e:	9e00      	ldr	r6, [sp, #0]
20001980:	0076      	lsls	r6, r6, #1
20001982:	087f      	lsrs	r7, r7, #1
20001984:	d310      	bcc.n	200019a8 <RenderTilePersp2+0xf4>
20001986:	69dc      	ldr	r4, [r3, #28]
20001988:	7824      	ldrb	r4, [r4, #0]
2000198a:	40b4      	lsls	r4, r6
2000198c:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000198e:	5d29      	ldrb	r1, [r5, r4]
20001990:	020c      	lsls	r4, r1, #8
20001992:	4321      	orrs	r1, r4
20001994:	69dc      	ldr	r4, [r3, #28]
20001996:	7824      	ldrb	r4, [r4, #0]
20001998:	40b4      	lsls	r4, r6
2000199a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000199c:	5d2c      	ldrb	r4, [r5, r4]
2000199e:	0424      	lsls	r4, r4, #16
200019a0:	4321      	orrs	r1, r4
200019a2:	0224      	lsls	r4, r4, #8
200019a4:	4321      	orrs	r1, r4
200019a6:	c002      	stmia	r0!, {r1}
200019a8:	423f      	tst	r7, r7
200019aa:	d022      	beq.n	200019f2 <RenderTilePersp2+0x13e>
200019ac:	69dc      	ldr	r4, [r3, #28]
200019ae:	7824      	ldrb	r4, [r4, #0]
200019b0:	40b4      	lsls	r4, r6
200019b2:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019b4:	5d29      	ldrb	r1, [r5, r4]
200019b6:	020c      	lsls	r4, r1, #8
200019b8:	4321      	orrs	r1, r4
200019ba:	69dc      	ldr	r4, [r3, #28]
200019bc:	7824      	ldrb	r4, [r4, #0]
200019be:	40b4      	lsls	r4, r6
200019c0:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019c2:	5d2c      	ldrb	r4, [r5, r4]
200019c4:	0424      	lsls	r4, r4, #16
200019c6:	4321      	orrs	r1, r4
200019c8:	0224      	lsls	r4, r4, #8
200019ca:	4321      	orrs	r1, r4
200019cc:	69dc      	ldr	r4, [r3, #28]
200019ce:	7824      	ldrb	r4, [r4, #0]
200019d0:	40b4      	lsls	r4, r6
200019d2:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019d4:	5d2a      	ldrb	r2, [r5, r4]
200019d6:	0214      	lsls	r4, r2, #8
200019d8:	4322      	orrs	r2, r4
200019da:	69dc      	ldr	r4, [r3, #28]
200019dc:	7824      	ldrb	r4, [r4, #0]
200019de:	40b4      	lsls	r4, r6
200019e0:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019e2:	5d2c      	ldrb	r4, [r5, r4]
200019e4:	0424      	lsls	r4, r4, #16
200019e6:	4322      	orrs	r2, r4
200019e8:	0224      	lsls	r4, r4, #8
200019ea:	4322      	orrs	r2, r4
200019ec:	c006      	stmia	r0!, {r1, r2}
200019ee:	3f01      	subs	r7, #1
200019f0:	d1dc      	bne.n	200019ac <RenderTilePersp2+0xf8>
200019f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

200019f4 <RenderTilePersp_pSioBase>:
200019f4:	d0000000 	.word	0xd0000000

200019f8 <RenderTilePersp_Interp>:
200019f8:	d0000080 	.word	0xd0000080

200019fc <RenderTilePersp_Ctrl>:
200019fc:	0004000c 	.word	0x0004000c

20001a00 <RenderTilePersp3>:
20001a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001a02:	9c06      	ldr	r4, [sp, #24]
20001a04:	4e48      	ldr	r6, [pc, #288]	; (20001b28 <RenderTilePersp_pSioBase>)
20001a06:	8965      	ldrh	r5, [r4, #10]
20001a08:	7ce1      	ldrb	r1, [r4, #19]
20001a0a:	b249      	sxtb	r1, r1
20001a0c:	0089      	lsls	r1, r1, #2
20001a0e:	d107      	bne.n	20001a20 <RenderTilePersp3+0x20>
20001a10:	086d      	lsrs	r5, r5, #1
20001a12:	1b52      	subs	r2, r2, r5
20001a14:	4694      	mov	ip, r2
20001a16:	2501      	movs	r5, #1
20001a18:	6675      	str	r5, [r6, #100]	; 0x64
20001a1a:	032d      	lsls	r5, r5, #12
20001a1c:	6635      	str	r5, [r6, #96]	; 0x60
20001a1e:	e009      	b.n	20001a34 <RenderTilePersp3+0x34>
20001a20:	d502      	bpl.n	20001a28 <RenderTilePersp3+0x28>
20001a22:	1aaa      	subs	r2, r5, r2
20001a24:	3a01      	subs	r2, #1
20001a26:	4249      	negs	r1, r1
20001a28:	1b57      	subs	r7, r2, r5
20001a2a:	46bc      	mov	ip, r7
20001a2c:	032d      	lsls	r5, r5, #12
20001a2e:	6635      	str	r5, [r6, #96]	; 0x60
20001a30:	1852      	adds	r2, r2, r1
20001a32:	6672      	str	r2, [r6, #100]	; 0x64
20001a34:	085d      	lsrs	r5, r3, #1
20001a36:	426d      	negs	r5, r5
20001a38:	46ae      	mov	lr, r5
20001a3a:	089f      	lsrs	r7, r3, #2
20001a3c:	4b3b      	ldr	r3, [pc, #236]	; (20001b2c <RenderTilePersp_Interp>)
20001a3e:	68e6      	ldr	r6, [r4, #12]
20001a40:	611e      	str	r6, [r3, #16]
20001a42:	4e3b      	ldr	r6, [pc, #236]	; (20001b30 <RenderTilePersp_Ctrl>)
20001a44:	7ca1      	ldrb	r1, [r4, #18]
20001a46:	9100      	str	r1, [sp, #0]
20001a48:	1876      	adds	r6, r6, r1
20001a4a:	78a2      	ldrb	r2, [r4, #2]
20001a4c:	1e55      	subs	r5, r2, #1
20001a4e:	02ad      	lsls	r5, r5, #10
20001a50:	432e      	orrs	r6, r5
20001a52:	62de      	str	r6, [r3, #44]	; 0x2c
20001a54:	1ab6      	subs	r6, r6, r2
20001a56:	0152      	lsls	r2, r2, #5
20001a58:	4316      	orrs	r6, r2
20001a5a:	78e2      	ldrb	r2, [r4, #3]
20001a5c:	0292      	lsls	r2, r2, #10
20001a5e:	18b6      	adds	r6, r6, r2
20001a60:	631e      	str	r6, [r3, #48]	; 0x30
20001a62:	6966      	ldr	r6, [r4, #20]
20001a64:	651e      	str	r6, [r3, #80]	; 0x50
20001a66:	4e32      	ldr	r6, [pc, #200]	; (20001b30 <RenderTilePersp_Ctrl>)
20001a68:	1e4d      	subs	r5, r1, #1
20001a6a:	02ad      	lsls	r5, r5, #10
20001a6c:	432e      	orrs	r6, r5
20001a6e:	66de      	str	r6, [r3, #108]	; 0x6c
20001a70:	1a76      	subs	r6, r6, r1
20001a72:	014d      	lsls	r5, r1, #5
20001a74:	432e      	orrs	r6, r5
20001a76:	0289      	lsls	r1, r1, #10
20001a78:	1876      	adds	r6, r6, r1
20001a7a:	671e      	str	r6, [r3, #112]	; 0x70
20001a7c:	69a4      	ldr	r4, [r4, #24]
20001a7e:	492a      	ldr	r1, [pc, #168]	; (20001b28 <RenderTilePersp_pSioBase>)
20001a80:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001a82:	6825      	ldr	r5, [r4, #0]
20001a84:	434d      	muls	r5, r1
20001a86:	132d      	asrs	r5, r5, #12
20001a88:	006a      	lsls	r2, r5, #1
20001a8a:	1952      	adds	r2, r2, r5
20001a8c:	609a      	str	r2, [r3, #8]
20001a8e:	649a      	str	r2, [r3, #72]	; 0x48
20001a90:	68e6      	ldr	r6, [r4, #12]
20001a92:	434e      	muls	r6, r1
20001a94:	1336      	asrs	r6, r6, #12
20001a96:	0072      	lsls	r2, r6, #1
20001a98:	1992      	adds	r2, r2, r6
20001a9a:	60da      	str	r2, [r3, #12]
20001a9c:	64da      	str	r2, [r3, #76]	; 0x4c
20001a9e:	4672      	mov	r2, lr
20001aa0:	4355      	muls	r5, r2
20001aa2:	4372      	muls	r2, r6
20001aa4:	468e      	mov	lr, r1
20001aa6:	6866      	ldr	r6, [r4, #4]
20001aa8:	4371      	muls	r1, r6
20001aaa:	1309      	asrs	r1, r1, #12
20001aac:	4666      	mov	r6, ip
20001aae:	4371      	muls	r1, r6
20001ab0:	186d      	adds	r5, r5, r1
20001ab2:	68a1      	ldr	r1, [r4, #8]
20001ab4:	186d      	adds	r5, r5, r1
20001ab6:	601d      	str	r5, [r3, #0]
20001ab8:	641d      	str	r5, [r3, #64]	; 0x40
20001aba:	6921      	ldr	r1, [r4, #16]
20001abc:	4675      	mov	r5, lr
20001abe:	4369      	muls	r1, r5
20001ac0:	1309      	asrs	r1, r1, #12
20001ac2:	4371      	muls	r1, r6
20001ac4:	1852      	adds	r2, r2, r1
20001ac6:	6961      	ldr	r1, [r4, #20]
20001ac8:	1852      	adds	r2, r2, r1
20001aca:	605a      	str	r2, [r3, #4]
20001acc:	645a      	str	r2, [r3, #68]	; 0x44
20001ace:	9e00      	ldr	r6, [sp, #0]
20001ad0:	0076      	lsls	r6, r6, #1
20001ad2:	087f      	lsrs	r7, r7, #1
20001ad4:	d309      	bcc.n	20001aea <RenderTilePersp3+0xea>
20001ad6:	69dc      	ldr	r4, [r3, #28]
20001ad8:	7824      	ldrb	r4, [r4, #0]
20001ada:	40b4      	lsls	r4, r6
20001adc:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001ade:	5d29      	ldrb	r1, [r5, r4]
20001ae0:	020c      	lsls	r4, r1, #8
20001ae2:	4321      	orrs	r1, r4
20001ae4:	040c      	lsls	r4, r1, #16
20001ae6:	4321      	orrs	r1, r4
20001ae8:	c002      	stmia	r0!, {r1}
20001aea:	423f      	tst	r7, r7
20001aec:	d01b      	beq.n	20001b26 <RenderTilePersp3+0x126>
20001aee:	69dc      	ldr	r4, [r3, #28]
20001af0:	7824      	ldrb	r4, [r4, #0]
20001af2:	40b4      	lsls	r4, r6
20001af4:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001af6:	5d29      	ldrb	r1, [r5, r4]
20001af8:	020c      	lsls	r4, r1, #8
20001afa:	4321      	orrs	r1, r4
20001afc:	69dc      	ldr	r4, [r3, #28]
20001afe:	7824      	ldrb	r4, [r4, #0]
20001b00:	40b4      	lsls	r4, r6
20001b02:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001b04:	5d2c      	ldrb	r4, [r5, r4]
20001b06:	0424      	lsls	r4, r4, #16
20001b08:	4321      	orrs	r1, r4
20001b0a:	0224      	lsls	r4, r4, #8
20001b0c:	4321      	orrs	r1, r4
20001b0e:	69dc      	ldr	r4, [r3, #28]
20001b10:	7824      	ldrb	r4, [r4, #0]
20001b12:	40b4      	lsls	r4, r6
20001b14:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001b16:	5d2a      	ldrb	r2, [r5, r4]
20001b18:	0214      	lsls	r4, r2, #8
20001b1a:	4322      	orrs	r2, r4
20001b1c:	0414      	lsls	r4, r2, #16
20001b1e:	4322      	orrs	r2, r4
20001b20:	c006      	stmia	r0!, {r1, r2}
20001b22:	3f01      	subs	r7, #1
20001b24:	d1e3      	bne.n	20001aee <RenderTilePersp3+0xee>
20001b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

20001b28 <RenderTilePersp_pSioBase>:
20001b28:	d0000000 	.word	0xd0000000

20001b2c <RenderTilePersp_Interp>:
20001b2c:	d0000080 	.word	0xd0000080

20001b30 <RenderTilePersp_Ctrl>:
20001b30:	0004000c 	.word	0x0004000c

20001b34 <RenderTilePersp4>:
20001b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001b36:	9c06      	ldr	r4, [sp, #24]
20001b38:	4e44      	ldr	r6, [pc, #272]	; (20001c4c <RenderTilePersp_pSioBase>)
20001b3a:	8965      	ldrh	r5, [r4, #10]
20001b3c:	7ce1      	ldrb	r1, [r4, #19]
20001b3e:	b249      	sxtb	r1, r1
20001b40:	0089      	lsls	r1, r1, #2
20001b42:	d107      	bne.n	20001b54 <RenderTilePersp4+0x20>
20001b44:	086d      	lsrs	r5, r5, #1
20001b46:	1b52      	subs	r2, r2, r5
20001b48:	4694      	mov	ip, r2
20001b4a:	2501      	movs	r5, #1
20001b4c:	6675      	str	r5, [r6, #100]	; 0x64
20001b4e:	032d      	lsls	r5, r5, #12
20001b50:	6635      	str	r5, [r6, #96]	; 0x60
20001b52:	e009      	b.n	20001b68 <RenderTilePersp4+0x34>
20001b54:	d502      	bpl.n	20001b5c <RenderTilePersp4+0x28>
20001b56:	1aaa      	subs	r2, r5, r2
20001b58:	3a01      	subs	r2, #1
20001b5a:	4249      	negs	r1, r1
20001b5c:	1b57      	subs	r7, r2, r5
20001b5e:	46bc      	mov	ip, r7
20001b60:	032d      	lsls	r5, r5, #12
20001b62:	6635      	str	r5, [r6, #96]	; 0x60
20001b64:	1852      	adds	r2, r2, r1
20001b66:	6672      	str	r2, [r6, #100]	; 0x64
20001b68:	085d      	lsrs	r5, r3, #1
20001b6a:	426d      	negs	r5, r5
20001b6c:	46ae      	mov	lr, r5
20001b6e:	089f      	lsrs	r7, r3, #2
20001b70:	4b37      	ldr	r3, [pc, #220]	; (20001c50 <RenderTilePersp_Interp>)
20001b72:	68e6      	ldr	r6, [r4, #12]
20001b74:	611e      	str	r6, [r3, #16]
20001b76:	4e37      	ldr	r6, [pc, #220]	; (20001c54 <RenderTilePersp_Ctrl>)
20001b78:	7ca1      	ldrb	r1, [r4, #18]
20001b7a:	9100      	str	r1, [sp, #0]
20001b7c:	1876      	adds	r6, r6, r1
20001b7e:	78a2      	ldrb	r2, [r4, #2]
20001b80:	1e55      	subs	r5, r2, #1
20001b82:	02ad      	lsls	r5, r5, #10
20001b84:	432e      	orrs	r6, r5
20001b86:	62de      	str	r6, [r3, #44]	; 0x2c
20001b88:	1ab6      	subs	r6, r6, r2
20001b8a:	0152      	lsls	r2, r2, #5
20001b8c:	4316      	orrs	r6, r2
20001b8e:	78e2      	ldrb	r2, [r4, #3]
20001b90:	0292      	lsls	r2, r2, #10
20001b92:	18b6      	adds	r6, r6, r2
20001b94:	631e      	str	r6, [r3, #48]	; 0x30
20001b96:	6966      	ldr	r6, [r4, #20]
20001b98:	651e      	str	r6, [r3, #80]	; 0x50
20001b9a:	4e2e      	ldr	r6, [pc, #184]	; (20001c54 <RenderTilePersp_Ctrl>)
20001b9c:	1e4d      	subs	r5, r1, #1
20001b9e:	02ad      	lsls	r5, r5, #10
20001ba0:	432e      	orrs	r6, r5
20001ba2:	66de      	str	r6, [r3, #108]	; 0x6c
20001ba4:	1a76      	subs	r6, r6, r1
20001ba6:	014d      	lsls	r5, r1, #5
20001ba8:	432e      	orrs	r6, r5
20001baa:	0289      	lsls	r1, r1, #10
20001bac:	1876      	adds	r6, r6, r1
20001bae:	671e      	str	r6, [r3, #112]	; 0x70
20001bb0:	69a4      	ldr	r4, [r4, #24]
20001bb2:	4926      	ldr	r1, [pc, #152]	; (20001c4c <RenderTilePersp_pSioBase>)
20001bb4:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001bb6:	6825      	ldr	r5, [r4, #0]
20001bb8:	434d      	muls	r5, r1
20001bba:	12ad      	asrs	r5, r5, #10
20001bbc:	609d      	str	r5, [r3, #8]
20001bbe:	649d      	str	r5, [r3, #72]	; 0x48
20001bc0:	10ad      	asrs	r5, r5, #2
20001bc2:	68e6      	ldr	r6, [r4, #12]
20001bc4:	434e      	muls	r6, r1
20001bc6:	12b6      	asrs	r6, r6, #10
20001bc8:	60de      	str	r6, [r3, #12]
20001bca:	64de      	str	r6, [r3, #76]	; 0x4c
20001bcc:	10b6      	asrs	r6, r6, #2
20001bce:	4672      	mov	r2, lr
20001bd0:	4355      	muls	r5, r2
20001bd2:	4372      	muls	r2, r6
20001bd4:	468e      	mov	lr, r1
20001bd6:	6866      	ldr	r6, [r4, #4]
20001bd8:	4371      	muls	r1, r6
20001bda:	1309      	asrs	r1, r1, #12
20001bdc:	4666      	mov	r6, ip
20001bde:	4371      	muls	r1, r6
20001be0:	186d      	adds	r5, r5, r1
20001be2:	68a1      	ldr	r1, [r4, #8]
20001be4:	186d      	adds	r5, r5, r1
20001be6:	601d      	str	r5, [r3, #0]
20001be8:	641d      	str	r5, [r3, #64]	; 0x40
20001bea:	6921      	ldr	r1, [r4, #16]
20001bec:	4675      	mov	r5, lr
20001bee:	4369      	muls	r1, r5
20001bf0:	1309      	asrs	r1, r1, #12
20001bf2:	4371      	muls	r1, r6
20001bf4:	1852      	adds	r2, r2, r1
20001bf6:	6961      	ldr	r1, [r4, #20]
20001bf8:	1852      	adds	r2, r2, r1
20001bfa:	605a      	str	r2, [r3, #4]
20001bfc:	645a      	str	r2, [r3, #68]	; 0x44
20001bfe:	9e00      	ldr	r6, [sp, #0]
20001c00:	0076      	lsls	r6, r6, #1
20001c02:	087f      	lsrs	r7, r7, #1
20001c04:	d309      	bcc.n	20001c1a <RenderTilePersp4+0xe6>
20001c06:	69dc      	ldr	r4, [r3, #28]
20001c08:	7824      	ldrb	r4, [r4, #0]
20001c0a:	40b4      	lsls	r4, r6
20001c0c:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001c0e:	5d29      	ldrb	r1, [r5, r4]
20001c10:	020c      	lsls	r4, r1, #8
20001c12:	4321      	orrs	r1, r4
20001c14:	040c      	lsls	r4, r1, #16
20001c16:	4321      	orrs	r1, r4
20001c18:	c002      	stmia	r0!, {r1}
20001c1a:	423f      	tst	r7, r7
20001c1c:	d014      	beq.n	20001c48 <RenderTilePersp4+0x114>
20001c1e:	69dc      	ldr	r4, [r3, #28]
20001c20:	7824      	ldrb	r4, [r4, #0]
20001c22:	40b4      	lsls	r4, r6
20001c24:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001c26:	5d29      	ldrb	r1, [r5, r4]
20001c28:	020c      	lsls	r4, r1, #8
20001c2a:	4321      	orrs	r1, r4
20001c2c:	040c      	lsls	r4, r1, #16
20001c2e:	4321      	orrs	r1, r4
20001c30:	69dc      	ldr	r4, [r3, #28]
20001c32:	7824      	ldrb	r4, [r4, #0]
20001c34:	40b4      	lsls	r4, r6
20001c36:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001c38:	5d2a      	ldrb	r2, [r5, r4]
20001c3a:	0214      	lsls	r4, r2, #8
20001c3c:	4322      	orrs	r2, r4
20001c3e:	0414      	lsls	r4, r2, #16
20001c40:	4322      	orrs	r2, r4
20001c42:	c006      	stmia	r0!, {r1, r2}
20001c44:	3f01      	subs	r7, #1
20001c46:	d1ea      	bne.n	20001c1e <RenderTilePersp4+0xea>
20001c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20001c4a:	46c0      	nop			; (mov r8, r8)

20001c4c <RenderTilePersp_pSioBase>:
20001c4c:	d0000000 	.word	0xd0000000

20001c50 <RenderTilePersp_Interp>:
20001c50:	d0000080 	.word	0xd0000080

20001c54 <RenderTilePersp_Ctrl>:
20001c54:	0004000c 	.word	0x0004000c

20001c58 <BlitKey>:
20001c58:	b510      	push	{r4, lr}
20001c5a:	4686      	mov	lr, r0
20001c5c:	08d4      	lsrs	r4, r2, #3
20001c5e:	00e4      	lsls	r4, r4, #3
20001c60:	4062      	eors	r2, r4
20001c62:	4420      	add	r0, r4
20001c64:	4421      	add	r1, r4
20001c66:	a413      	add	r4, pc, #76	; (adr r4, 20001cb4 <BlitKey+0x5c>)
20001c68:	00d2      	lsls	r2, r2, #3
20001c6a:	1aa4      	subs	r4, r4, r2
20001c6c:	3401      	adds	r4, #1
20001c6e:	4720      	bx	r4
20001c70:	3808      	subs	r0, #8
20001c72:	3908      	subs	r1, #8
20001c74:	79cc      	ldrb	r4, [r1, #7]
20001c76:	429c      	cmp	r4, r3
20001c78:	d000      	beq.n	20001c7c <BlitKey+0x24>
20001c7a:	71c4      	strb	r4, [r0, #7]
20001c7c:	798c      	ldrb	r4, [r1, #6]
20001c7e:	429c      	cmp	r4, r3
20001c80:	d000      	beq.n	20001c84 <BlitKey+0x2c>
20001c82:	7184      	strb	r4, [r0, #6]
20001c84:	794c      	ldrb	r4, [r1, #5]
20001c86:	429c      	cmp	r4, r3
20001c88:	d000      	beq.n	20001c8c <BlitKey+0x34>
20001c8a:	7144      	strb	r4, [r0, #5]
20001c8c:	790c      	ldrb	r4, [r1, #4]
20001c8e:	429c      	cmp	r4, r3
20001c90:	d000      	beq.n	20001c94 <BlitKey+0x3c>
20001c92:	7104      	strb	r4, [r0, #4]
20001c94:	78cc      	ldrb	r4, [r1, #3]
20001c96:	429c      	cmp	r4, r3
20001c98:	d000      	beq.n	20001c9c <BlitKey+0x44>
20001c9a:	70c4      	strb	r4, [r0, #3]
20001c9c:	788c      	ldrb	r4, [r1, #2]
20001c9e:	429c      	cmp	r4, r3
20001ca0:	d000      	beq.n	20001ca4 <BlitKey+0x4c>
20001ca2:	7084      	strb	r4, [r0, #2]
20001ca4:	784c      	ldrb	r4, [r1, #1]
20001ca6:	429c      	cmp	r4, r3
20001ca8:	d000      	beq.n	20001cac <BlitKey+0x54>
20001caa:	7044      	strb	r4, [r0, #1]
20001cac:	780c      	ldrb	r4, [r1, #0]
20001cae:	429c      	cmp	r4, r3
20001cb0:	d000      	beq.n	20001cb4 <BlitKey+0x5c>
20001cb2:	7004      	strb	r4, [r0, #0]
20001cb4:	4570      	cmp	r0, lr
20001cb6:	d8db      	bhi.n	20001c70 <BlitKey+0x18>
20001cb8:	bd10      	pop	{r4, pc}
20001cba:	46c0      	nop			; (mov r8, r8)

20001cbc <Render>:
20001cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
20001cbe:	b085      	sub	sp, #20
20001cc0:	9001      	str	r0, [sp, #4]
20001cc2:	9102      	str	r1, [sp, #8]
20001cc4:	9304      	str	r3, [sp, #16]
20001cc6:	4c31      	ldr	r4, [pc, #196]	; (20001d8c <Render_pScreenAddr>)
20001cc8:	6824      	ldr	r4, [r4, #0]
20001cca:	2c00      	cmp	r4, #0
20001ccc:	d055      	beq.n	20001d7a <Render_Clear>
20001cce:	8825      	ldrh	r5, [r4, #0]
20001cd0:	422d      	tst	r5, r5
20001cd2:	d052      	beq.n	20001d7a <Render_Clear>
20001cd4:	3404      	adds	r4, #4

20001cd6 <Render_StripLoop>:
20001cd6:	8823      	ldrh	r3, [r4, #0]
20001cd8:	429a      	cmp	r2, r3
20001cda:	d304      	bcc.n	20001ce6 <Render_StripOK>
20001cdc:	1ad2      	subs	r2, r2, r3
20001cde:	34e4      	adds	r4, #228	; 0xe4
20001ce0:	3d01      	subs	r5, #1
20001ce2:	d1f8      	bne.n	20001cd6 <Render_StripLoop>
20001ce4:	e049      	b.n	20001d7a <Render_Clear>

20001ce6 <Render_StripOK>:
20001ce6:	9203      	str	r2, [sp, #12]
20001ce8:	8865      	ldrh	r5, [r4, #2]
20001cea:	422d      	tst	r5, r5
20001cec:	d045      	beq.n	20001d7a <Render_Clear>
20001cee:	3404      	adds	r4, #4

20001cf0 <Render_SegmLoop>:
20001cf0:	9a04      	ldr	r2, [sp, #16]
20001cf2:	4212      	tst	r2, r2
20001cf4:	d041      	beq.n	20001d7a <Render_Clear>
20001cf6:	8823      	ldrh	r3, [r4, #0]
20001cf8:	4293      	cmp	r3, r2
20001cfa:	d300      	bcc.n	20001cfe <Render_SegmLoop+0xe>
20001cfc:	4613      	mov	r3, r2
20001cfe:	421b      	tst	r3, r3
20001d00:	d038      	beq.n	20001d74 <Render_SegmNext>
20001d02:	1ad2      	subs	r2, r2, r3
20001d04:	9204      	str	r2, [sp, #16]
20001d06:	88e2      	ldrh	r2, [r4, #6]
20001d08:	b212      	sxth	r2, r2
20001d0a:	9903      	ldr	r1, [sp, #12]
20001d0c:	440a      	add	r2, r1
20001d0e:	7c61      	ldrb	r1, [r4, #17]
20001d10:	4209      	tst	r1, r1
20001d12:	d000      	beq.n	20001d16 <Render_SegmLoop+0x26>
20001d14:	1052      	asrs	r2, r2, #1
20001d16:	8961      	ldrh	r1, [r4, #10]
20001d18:	1a52      	subs	r2, r2, r1
20001d1a:	d5fd      	bpl.n	20001d18 <Render_SegmLoop+0x28>
20001d1c:	1852      	adds	r2, r2, r1
20001d1e:	d4fd      	bmi.n	20001d1c <Render_SegmLoop+0x2c>
20001d20:	88a1      	ldrh	r1, [r4, #4]
20001d22:	b209      	sxth	r1, r1
20001d24:	8920      	ldrh	r0, [r4, #8]
20001d26:	1a09      	subs	r1, r1, r0
20001d28:	d5fd      	bpl.n	20001d26 <Render_SegmLoop+0x36>
20001d2a:	1809      	adds	r1, r1, r0
20001d2c:	d4fd      	bmi.n	20001d2a <Render_SegmLoop+0x3a>
20001d2e:	7c20      	ldrb	r0, [r4, #16]
20001d30:	4200      	tst	r0, r0
20001d32:	d10d      	bne.n	20001d50 <Render_SegmLoop+0x60>
20001d34:	0852      	lsrs	r2, r2, #1
20001d36:	6961      	ldr	r1, [r4, #20]
20001d38:	d300      	bcc.n	20001d3c <Render_SegmLoop+0x4c>
20001d3a:	69a1      	ldr	r1, [r4, #24]
20001d3c:	089a      	lsrs	r2, r3, #2
20001d3e:	9e01      	ldr	r6, [sp, #4]
20001d40:	c604      	stmia	r6!, {r2}
20001d42:	9802      	ldr	r0, [sp, #8]
20001d44:	c601      	stmia	r6!, {r0}
20001d46:	9601      	str	r6, [sp, #4]
20001d48:	f7fe fae2 	bl	20000310 <MemSet4>
20001d4c:	9002      	str	r0, [sp, #8]
20001d4e:	e011      	b.n	20001d74 <Render_SegmNext>
20001d50:	9400      	str	r4, [sp, #0]
20001d52:	a710      	add	r7, pc, #64	; (adr r7, 20001d94 <Render_FncAddr>)
20001d54:	0086      	lsls	r6, r0, #2
20001d56:	59bf      	ldr	r7, [r7, r6]
20001d58:	2806      	cmp	r0, #6
20001d5a:	d803      	bhi.n	20001d64 <Render_SegmLoop+0x74>
20001d5c:	9801      	ldr	r0, [sp, #4]
20001d5e:	47b8      	blx	r7
20001d60:	9001      	str	r0, [sp, #4]
20001d62:	e007      	b.n	20001d74 <Render_SegmNext>
20001d64:	0898      	lsrs	r0, r3, #2
20001d66:	9e01      	ldr	r6, [sp, #4]
20001d68:	c601      	stmia	r6!, {r0}
20001d6a:	9802      	ldr	r0, [sp, #8]
20001d6c:	c601      	stmia	r6!, {r0}
20001d6e:	9601      	str	r6, [sp, #4]
20001d70:	47b8      	blx	r7
20001d72:	9002      	str	r0, [sp, #8]

20001d74 <Render_SegmNext>:
20001d74:	341c      	adds	r4, #28
20001d76:	3d01      	subs	r5, #1
20001d78:	d1ba      	bne.n	20001cf0 <Render_SegmLoop>

20001d7a <Render_Clear>:
20001d7a:	9801      	ldr	r0, [sp, #4]
20001d7c:	9904      	ldr	r1, [sp, #16]
20001d7e:	0889      	lsrs	r1, r1, #2
20001d80:	d001      	beq.n	20001d86 <Render_Clear+0xc>
20001d82:	4a03      	ldr	r2, [pc, #12]	; (20001d90 <Render_LineBuf0Addr>)
20001d84:	c006      	stmia	r0!, {r1, r2}
20001d86:	b005      	add	sp, #20
20001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
20001d8a:	46c0      	nop			; (mov r8, r8)

20001d8c <Render_pScreenAddr>:
20001d8c:	20002ba4 	.word	0x20002ba4

20001d90 <Render_LineBuf0Addr>:
20001d90:	20019c8c 	.word	0x20019c8c

20001d94 <Render_FncAddr>:
20001d94:	20000311 	.word	0x20000311
20001d98:	20000929 	.word	0x20000929
20001d9c:	2000143d 	.word	0x2000143d
20001da0:	20001505 	.word	0x20001505
20001da4:	20001399 	.word	0x20001399
20001da8:	20000923 	.word	0x20000923
20001dac:	20000925 	.word	0x20000925
20001db0:	2000089d 	.word	0x2000089d
20001db4:	20000839 	.word	0x20000839
20001db8:	2000077d 	.word	0x2000077d
20001dbc:	20000e7d 	.word	0x20000e7d
20001dc0:	200000c1 	.word	0x200000c1
20001dc4:	20000689 	.word	0x20000689
20001dc8:	20000345 	.word	0x20000345
20001dcc:	20000b2d 	.word	0x20000b2d
20001dd0:	20000451 	.word	0x20000451
20001dd4:	20000c25 	.word	0x20000c25
20001dd8:	20000d95 	.word	0x20000d95
20001ddc:	20000f59 	.word	0x20000f59
20001de0:	20001059 	.word	0x20001059
20001de4:	200012e5 	.word	0x200012e5
20001de8:	200001f5 	.word	0x200001f5
20001dec:	2000095d 	.word	0x2000095d
20001df0:	20000a31 	.word	0x20000a31
20001df4:	200015c1 	.word	0x200015c1
20001df8:	20001745 	.word	0x20001745
20001dfc:	200018b5 	.word	0x200018b5
20001e00:	20001a01 	.word	0x20001a01
20001e04:	20001b35 	.word	0x20001b35

20001e08 <flash_init_boot2_copyout>:
    if (boot2_copyout_valid)
20001e08:	4808      	ldr	r0, [pc, #32]	; (20001e2c <flash_init_boot2_copyout+0x24>)
static void __no_inline_not_in_flash_func(flash_init_boot2_copyout)() {
20001e0a:	b510      	push	{r4, lr}
    if (boot2_copyout_valid)
20001e0c:	7803      	ldrb	r3, [r0, #0]
20001e0e:	2b00      	cmp	r3, #0
20001e10:	d10a      	bne.n	20001e28 <flash_init_boot2_copyout+0x20>
20001e12:	2380      	movs	r3, #128	; 0x80
20001e14:	4906      	ldr	r1, [pc, #24]	; (20001e30 <flash_init_boot2_copyout+0x28>)
    for (int i = 0; i < BOOT2_SIZE_WORDS; ++i)
20001e16:	4a07      	ldr	r2, [pc, #28]	; (20001e34 <flash_init_boot2_copyout+0x2c>)
20001e18:	055b      	lsls	r3, r3, #21
        boot2_copyout[i] = ((uint32_t *)XIP_BASE)[i];
20001e1a:	681c      	ldr	r4, [r3, #0]
20001e1c:	50cc      	str	r4, [r1, r3]
    for (int i = 0; i < BOOT2_SIZE_WORDS; ++i)
20001e1e:	3304      	adds	r3, #4
20001e20:	4293      	cmp	r3, r2
20001e22:	d1fa      	bne.n	20001e1a <flash_init_boot2_copyout+0x12>
    boot2_copyout_valid = true;
20001e24:	2301      	movs	r3, #1
20001e26:	7003      	strb	r3, [r0, #0]
}
20001e28:	bd10      	pop	{r4, pc}
20001e2a:	46c0      	nop			; (mov r8, r8)
20001e2c:	2003e344 	.word	0x2003e344
20001e30:	1003db18 	.word	0x1003db18
20001e34:	10000100 	.word	0x10000100

20001e38 <flash_enable_xip_via_boot2>:
static void __no_inline_not_in_flash_func(flash_enable_xip_via_boot2)() {
20001e38:	b510      	push	{r4, lr}
    ((void (*)(void))boot2_copyout+1)();
20001e3a:	4b02      	ldr	r3, [pc, #8]	; (20001e44 <flash_enable_xip_via_boot2+0xc>)
20001e3c:	3301      	adds	r3, #1
20001e3e:	4798      	blx	r3
}
20001e40:	bd10      	pop	{r4, pc}
20001e42:	46c0      	nop			; (mov r8, r8)
20001e44:	2003db18 	.word	0x2003db18

20001e48 <flash_cs_force.constprop.0>:
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
20001e48:	4b03      	ldr	r3, [pc, #12]	; (20001e58 <flash_cs_force.constprop.0+0x10>)
20001e4a:	681a      	ldr	r2, [r3, #0]
20001e4c:	23c0      	movs	r3, #192	; 0xc0
20001e4e:	009b      	lsls	r3, r3, #2
20001e50:	4393      	bics	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
20001e52:	4a02      	ldr	r2, [pc, #8]	; (20001e5c <flash_cs_force.constprop.0+0x14>)
20001e54:	6013      	str	r3, [r2, #0]
}
20001e56:	4770      	bx	lr
20001e58:	4001800c 	.word	0x4001800c
20001e5c:	4001900c 	.word	0x4001900c

20001e60 <flash_cs_force.constprop.1>:
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
20001e60:	4b05      	ldr	r3, [pc, #20]	; (20001e78 <flash_cs_force.constprop.1+0x18>)
20001e62:	681a      	ldr	r2, [r3, #0]
20001e64:	2380      	movs	r3, #128	; 0x80
20001e66:	009b      	lsls	r3, r3, #2
20001e68:	4053      	eors	r3, r2
20001e6a:	22c0      	movs	r2, #192	; 0xc0
20001e6c:	0092      	lsls	r2, r2, #2
20001e6e:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
20001e70:	4a02      	ldr	r2, [pc, #8]	; (20001e7c <flash_cs_force.constprop.1+0x1c>)
20001e72:	6013      	str	r3, [r2, #0]
20001e74:	4770      	bx	lr
20001e76:	46c0      	nop			; (mov r8, r8)
20001e78:	4001800c 	.word	0x4001800c
20001e7c:	4001900c 	.word	0x4001900c

20001e80 <flash_do_cmd.constprop.0>:
static void __no_inline_not_in_flash_func(flash_do_cmd)(const uint8_t *txbuf, uint8_t *rxbuf, size_t count) {
20001e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001e82:	46ce      	mov	lr, r9
20001e84:	4647      	mov	r7, r8
20001e86:	4681      	mov	r9, r0
20001e88:	b580      	push	{r7, lr}
    void (*connect_internal_flash)(void) = (void(*)(void))rom_func_lookup(rom_table_code('I', 'F'));
20001e8a:	4823      	ldr	r0, [pc, #140]	; (20001f18 <flash_do_cmd.constprop.0+0x98>)
static void __no_inline_not_in_flash_func(flash_do_cmd)(const uint8_t *txbuf, uint8_t *rxbuf, size_t count) {
20001e8c:	000e      	movs	r6, r1
    void (*connect_internal_flash)(void) = (void(*)(void))rom_func_lookup(rom_table_code('I', 'F'));
20001e8e:	f000 fbdf 	bl	20002650 <__rom_func_lookup_veneer>
20001e92:	0005      	movs	r5, r0
    void (*flash_exit_xip)(void) = (void(*)(void))rom_func_lookup(rom_table_code('E', 'X'));
20001e94:	4821      	ldr	r0, [pc, #132]	; (20001f1c <flash_do_cmd.constprop.0+0x9c>)
20001e96:	f000 fbdb 	bl	20002650 <__rom_func_lookup_veneer>
20001e9a:	0004      	movs	r4, r0
    void (*flash_flush_cache)(void) = (void(*)(void))rom_func_lookup(rom_table_code('F', 'C'));
20001e9c:	4820      	ldr	r0, [pc, #128]	; (20001f20 <flash_do_cmd.constprop.0+0xa0>)
20001e9e:	f000 fbd7 	bl	20002650 <__rom_func_lookup_veneer>
20001ea2:	4680      	mov	r8, r0
    flash_init_boot2_copyout();
20001ea4:	f7ff ffb0 	bl	20001e08 <flash_init_boot2_copyout>
    connect_internal_flash();
20001ea8:	47a8      	blx	r5
    flash_exit_xip();
20001eaa:	47a0      	blx	r4
    flash_cs_force(0);
20001eac:	f7ff ffd8 	bl	20001e60 <flash_cs_force.constprop.1>
        uint32_t flags = ssi_hw->sr;
20001eb0:	21c0      	movs	r1, #192	; 0xc0
    size_t rx_remaining = count;
20001eb2:	240d      	movs	r4, #13
    size_t tx_remaining = count;
20001eb4:	220d      	movs	r2, #13
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
20001eb6:	2708      	movs	r7, #8
        bool can_put = !!(flags & SSI_SR_TFNF_BITS);
20001eb8:	2002      	movs	r0, #2
        uint32_t flags = ssi_hw->sr;
20001eba:	0549      	lsls	r1, r1, #21
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
20001ebc:	003d      	movs	r5, r7
        uint32_t flags = ssi_hw->sr;
20001ebe:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
20001ec0:	401d      	ands	r5, r3
        if (can_put && tx_remaining && rx_remaining - tx_remaining < max_in_flight) {
20001ec2:	4218      	tst	r0, r3
20001ec4:	d00b      	beq.n	20001ede <flash_do_cmd.constprop.0+0x5e>
20001ec6:	2a00      	cmp	r2, #0
20001ec8:	d009      	beq.n	20001ede <flash_do_cmd.constprop.0+0x5e>
20001eca:	1aa3      	subs	r3, r4, r2
20001ecc:	2b0d      	cmp	r3, #13
20001ece:	d81e      	bhi.n	20001f0e <flash_do_cmd.constprop.0+0x8e>
            ssi_hw->dr0 = *txbuf++;
20001ed0:	464b      	mov	r3, r9
20001ed2:	781b      	ldrb	r3, [r3, #0]
            --tx_remaining;
20001ed4:	3a01      	subs	r2, #1
            ssi_hw->dr0 = *txbuf++;
20001ed6:	660b      	str	r3, [r1, #96]	; 0x60
20001ed8:	2301      	movs	r3, #1
20001eda:	469c      	mov	ip, r3
20001edc:	44e1      	add	r9, ip
        if (can_get && rx_remaining) {
20001ede:	0013      	movs	r3, r2
20001ee0:	2d00      	cmp	r5, #0
20001ee2:	d10b      	bne.n	20001efc <flash_do_cmd.constprop.0+0x7c>
    while (tx_remaining || rx_remaining) {
20001ee4:	4323      	orrs	r3, r4
20001ee6:	2b00      	cmp	r3, #0
20001ee8:	d1e8      	bne.n	20001ebc <flash_do_cmd.constprop.0+0x3c>
    flash_cs_force(1);
20001eea:	f7ff ffad 	bl	20001e48 <flash_cs_force.constprop.0>
    flash_flush_cache();
20001eee:	47c0      	blx	r8
    flash_enable_xip_via_boot2();
20001ef0:	f7ff ffa2 	bl	20001e38 <flash_enable_xip_via_boot2>
}
20001ef4:	bcc0      	pop	{r6, r7}
20001ef6:	46b9      	mov	r9, r7
20001ef8:	46b0      	mov	r8, r6
20001efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (can_get && rx_remaining) {
20001efc:	2c00      	cmp	r4, #0
20001efe:	d0f2      	beq.n	20001ee6 <flash_do_cmd.constprop.0+0x66>
            *rxbuf++ = ssi_hw->dr0;
20001f00:	6e0b      	ldr	r3, [r1, #96]	; 0x60
            --rx_remaining;
20001f02:	3c01      	subs	r4, #1
            *rxbuf++ = ssi_hw->dr0;
20001f04:	7033      	strb	r3, [r6, #0]
    while (tx_remaining || rx_remaining) {
20001f06:	0023      	movs	r3, r4
            *rxbuf++ = ssi_hw->dr0;
20001f08:	3601      	adds	r6, #1
    while (tx_remaining || rx_remaining) {
20001f0a:	4313      	orrs	r3, r2
20001f0c:	e7eb      	b.n	20001ee6 <flash_do_cmd.constprop.0+0x66>
        if (can_get && rx_remaining) {
20001f0e:	2d00      	cmp	r5, #0
20001f10:	d0d4      	beq.n	20001ebc <flash_do_cmd.constprop.0+0x3c>
20001f12:	2c00      	cmp	r4, #0
20001f14:	d0d2      	beq.n	20001ebc <flash_do_cmd.constprop.0+0x3c>
20001f16:	e7f3      	b.n	20001f00 <flash_do_cmd.constprop.0+0x80>
20001f18:	00004649 	.word	0x00004649
20001f1c:	00005845 	.word	0x00005845
20001f20:	00004346 	.word	0x00004346

20001f24 <mutex_enter_blocking>:

void __time_critical_func(mutex_enter_blocking)(mutex_t *mtx) {
20001f24:	b510      	push	{r4, lr}
    assert(mtx->core.spin_lock);
    bool block = true;
    do {
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001f26:	6802      	ldr	r2, [r0, #0]
    *lock = 0;
20001f28:	2400      	movs	r4, #0
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001f2a:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20001f2e:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20001f30:	6813      	ldr	r3, [r2, #0]
20001f32:	2b00      	cmp	r3, #0
20001f34:	d0fc      	beq.n	20001f30 <mutex_enter_blocking+0xc>
    __asm volatile ("dmb");
20001f36:	f3bf 8f5f 	dmb	sy
        if (mtx->owner < 0) {
20001f3a:	7903      	ldrb	r3, [r0, #4]
20001f3c:	2b7f      	cmp	r3, #127	; 0x7f
20001f3e:	d80b      	bhi.n	20001f58 <mutex_enter_blocking+0x34>
            mtx->owner = get_core_num();
            block = false;
        }
        spin_unlock(mtx->core.spin_lock, save);
20001f40:	6803      	ldr	r3, [r0, #0]
20001f42:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20001f46:	601c      	str	r4, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20001f48:	f381 8810 	msr	PRIMASK, r1
    __asm volatile ("wfe");
20001f4c:	bf20      	wfe
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001f4e:	6802      	ldr	r2, [r0, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001f50:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20001f54:	b672      	cpsid	i
inline static void spin_lock_unsafe_blocking(spin_lock_t *lock) {
20001f56:	e7eb      	b.n	20001f30 <mutex_enter_blocking+0xc>
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
20001f58:	23d0      	movs	r3, #208	; 0xd0
20001f5a:	061b      	lsls	r3, r3, #24
            mtx->owner = get_core_num();
20001f5c:	681b      	ldr	r3, [r3, #0]
20001f5e:	7103      	strb	r3, [r0, #4]
        spin_unlock(mtx->core.spin_lock, save);
20001f60:	6803      	ldr	r3, [r0, #0]
    __asm volatile ("dmb");
20001f62:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20001f66:	2200      	movs	r2, #0
20001f68:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20001f6a:	f381 8810 	msr	PRIMASK, r1
        if (block) {
            __wfe();
        }
    } while (block);
}
20001f6e:	bd10      	pop	{r4, pc}

20001f70 <mutex_try_enter>:

bool __time_critical_func(mutex_try_enter)(mutex_t *mtx, uint32_t *owner_out) {
20001f70:	0003      	movs	r3, r0
    bool entered;
    uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001f72:	6800      	ldr	r0, [r0, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001f74:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
20001f78:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20001f7a:	6802      	ldr	r2, [r0, #0]
20001f7c:	2a00      	cmp	r2, #0
20001f7e:	d0fc      	beq.n	20001f7a <mutex_try_enter+0xa>
    __asm volatile ("dmb");
20001f80:	f3bf 8f5f 	dmb	sy
    if (mtx->owner < 0) {
20001f84:	2204      	movs	r2, #4
20001f86:	569a      	ldrsb	r2, [r3, r2]
20001f88:	2a00      	cmp	r2, #0
20001f8a:	db0b      	blt.n	20001fa4 <mutex_try_enter+0x34>
        mtx->owner = get_core_num();
        entered = true;
    } else {
        if (owner_out) *owner_out = mtx->owner;
20001f8c:	2900      	cmp	r1, #0
20001f8e:	d00f      	beq.n	20001fb0 <mutex_try_enter+0x40>
        entered = false;
20001f90:	2000      	movs	r0, #0
        if (owner_out) *owner_out = mtx->owner;
20001f92:	600a      	str	r2, [r1, #0]
    }
    spin_unlock(mtx->core.spin_lock, save);
20001f94:	681b      	ldr	r3, [r3, #0]
20001f96:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20001f9a:	2200      	movs	r2, #0
20001f9c:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20001f9e:	f38c 8810 	msr	PRIMASK, ip
    return entered;
}
20001fa2:	4770      	bx	lr
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
20001fa4:	22d0      	movs	r2, #208	; 0xd0
20001fa6:	0612      	lsls	r2, r2, #24
        mtx->owner = get_core_num();
20001fa8:	6812      	ldr	r2, [r2, #0]
        entered = true;
20001faa:	2001      	movs	r0, #1
        mtx->owner = get_core_num();
20001fac:	711a      	strb	r2, [r3, #4]
        entered = true;
20001fae:	e7f1      	b.n	20001f94 <mutex_try_enter+0x24>
        entered = false;
20001fb0:	2000      	movs	r0, #0
20001fb2:	e7ef      	b.n	20001f94 <mutex_try_enter+0x24>

20001fb4 <mutex_enter_timeout_ms>:

bool __time_critical_func(mutex_enter_timeout_ms)(mutex_t *mtx, uint32_t timeout_ms) {
20001fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
20001fb6:	46c6      	mov	lr, r8
20001fb8:	b500      	push	{lr}
20001fba:	000c      	movs	r4, r1
20001fbc:	4680      	mov	r8, r0
    update_us_since_boot(&t, time_us_64());
20001fbe:	f000 fb5f 	bl	20002680 <__time_us_64_veneer>
    uint64_t delayed = base + ms * 1000ull;
20001fc2:	22fa      	movs	r2, #250	; 0xfa
    update_us_since_boot(&t, time_us_64());
20001fc4:	0006      	movs	r6, r0
20001fc6:	000f      	movs	r7, r1
    uint64_t delayed = base + ms * 1000ull;
20001fc8:	0020      	movs	r0, r4
20001fca:	2300      	movs	r3, #0
20001fcc:	2100      	movs	r1, #0
20001fce:	0092      	lsls	r2, r2, #2
20001fd0:	f000 fb4e 	bl	20002670 <____wrap___aeabi_lmul_veneer>
20001fd4:	1980      	adds	r0, r0, r6
20001fd6:	4179      	adcs	r1, r7
20001fd8:	0004      	movs	r4, r0
20001fda:	000d      	movs	r5, r1
    if (delayed < base) {
20001fdc:	428f      	cmp	r7, r1
20001fde:	d830      	bhi.n	20002042 <mutex_enter_timeout_ms+0x8e>
20001fe0:	d02d      	beq.n	2000203e <mutex_enter_timeout_ms+0x8a>
    *lock = 0;
20001fe2:	2600      	movs	r6, #0

bool __time_critical_func(mutex_enter_block_until)(mutex_t *mtx, absolute_time_t until) {
    assert(mtx->core.spin_lock);
    bool block = true;
    do {
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001fe4:	4643      	mov	r3, r8
20001fe6:	681a      	ldr	r2, [r3, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001fe8:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20001fec:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20001fee:	6813      	ldr	r3, [r2, #0]
20001ff0:	2b00      	cmp	r3, #0
20001ff2:	d0fc      	beq.n	20001fee <mutex_enter_timeout_ms+0x3a>
    __asm volatile ("dmb");
20001ff4:	f3bf 8f5f 	dmb	sy
        if (mtx->owner < 0) {
20001ff8:	4643      	mov	r3, r8
20001ffa:	791b      	ldrb	r3, [r3, #4]
20001ffc:	2b7f      	cmp	r3, #127	; 0x7f
20001ffe:	d80e      	bhi.n	2000201e <mutex_enter_timeout_ms+0x6a>
            mtx->owner = get_core_num();
            block = false;
        }
        spin_unlock(mtx->core.spin_lock, save);
20002000:	4643      	mov	r3, r8
20002002:	681b      	ldr	r3, [r3, #0]
20002004:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20002008:	601e      	str	r6, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
2000200a:	f381 8810 	msr	PRIMASK, r1
        if (block) {
            if (best_effort_wfe_or_timeout(until)) {
2000200e:	0020      	movs	r0, r4
20002010:	0029      	movs	r1, r5
20002012:	f000 fb25 	bl	20002660 <__best_effort_wfe_or_timeout_veneer>
20002016:	2800      	cmp	r0, #0
20002018:	d0e4      	beq.n	20001fe4 <mutex_enter_timeout_ms+0x30>
                return false;
2000201a:	2000      	movs	r0, #0
2000201c:	e00c      	b.n	20002038 <mutex_enter_timeout_ms+0x84>
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
2000201e:	23d0      	movs	r3, #208	; 0xd0
            mtx->owner = get_core_num();
20002020:	4642      	mov	r2, r8
20002022:	061b      	lsls	r3, r3, #24
20002024:	681b      	ldr	r3, [r3, #0]
20002026:	7113      	strb	r3, [r2, #4]
        spin_unlock(mtx->core.spin_lock, save);
20002028:	6813      	ldr	r3, [r2, #0]
    __asm volatile ("dmb");
2000202a:	f3bf 8f5f 	dmb	sy
    *lock = 0;
2000202e:	2200      	movs	r2, #0
20002030:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20002032:	f381 8810 	msr	PRIMASK, r1
            }
        }
    } while (block);
    return true;
20002036:	2001      	movs	r0, #1
}
20002038:	bc80      	pop	{r7}
2000203a:	46b8      	mov	r8, r7
2000203c:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000203e:	4286      	cmp	r6, r0
20002040:	d9cf      	bls.n	20001fe2 <mutex_enter_timeout_ms+0x2e>
        delayed = (uint64_t)-1;
20002042:	2401      	movs	r4, #1
20002044:	4264      	negs	r4, r4
20002046:	17e5      	asrs	r5, r4, #31
20002048:	e7cb      	b.n	20001fe2 <mutex_enter_timeout_ms+0x2e>
2000204a:	46c0      	nop			; (mov r8, r8)

2000204c <mutex_exit>:
}

void __time_critical_func(mutex_exit)(mutex_t *mtx) {
    uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
2000204c:	6802      	ldr	r2, [r0, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
2000204e:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20002052:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20002054:	6813      	ldr	r3, [r2, #0]
20002056:	2b00      	cmp	r3, #0
20002058:	d0fc      	beq.n	20002054 <mutex_exit+0x8>
    __asm volatile ("dmb");
2000205a:	f3bf 8f5f 	dmb	sy
    assert(mtx->owner >= 0);
    mtx->owner = -1;
2000205e:	23ff      	movs	r3, #255	; 0xff
20002060:	7103      	strb	r3, [r0, #4]
    __asm volatile ("sev");
20002062:	bf40      	sev
    __sev();
    spin_unlock(mtx->core.spin_lock, save);
20002064:	6803      	ldr	r3, [r0, #0]
    __asm volatile ("dmb");
20002066:	f3bf 8f5f 	dmb	sy
    *lock = 0;
2000206a:	2200      	movs	r2, #0
2000206c:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
2000206e:	f381 8810 	msr	PRIMASK, r1
}
20002072:	4770      	bx	lr

20002074 <_Z13VgaBufProcessv>:
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
20002074:	22a0      	movs	r2, #160	; 0xa0
{
20002076:	b5f0      	push	{r4, r5, r6, r7, lr}
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
20002078:	2102      	movs	r1, #2
{
2000207a:	46de      	mov	lr, fp
2000207c:	4657      	mov	r7, sl
2000207e:	464e      	mov	r6, r9
20002080:	4645      	mov	r5, r8
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
20002082:	4b7d      	ldr	r3, [pc, #500]	; (20002278 <_Z13VgaBufProcessv+0x204>)
20002084:	05d2      	lsls	r2, r2, #23
{
20002086:	b5e0      	push	{r5, r6, r7, lr}
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
20002088:	50d1      	str	r1, [r2, r3]
	BufInx = bufinx ^ 1;
2000208a:	2301      	movs	r3, #1
	int bufinx = BufInx;
2000208c:	497b      	ldr	r1, [pc, #492]	; (2000227c <_Z13VgaBufProcessv+0x208>)
	hw_divider_save_state(&DividerState);
2000208e:	487c      	ldr	r0, [pc, #496]	; (20002280 <_Z13VgaBufProcessv+0x20c>)
	int bufinx = BufInx;
20002090:	680f      	ldr	r7, [r1, #0]
{
20002092:	b083      	sub	sp, #12
	BufInx = bufinx ^ 1;
20002094:	407b      	eors	r3, r7
20002096:	600b      	str	r3, [r1, #0]
        dma_channel_hw_addr(channel)->al3_read_addr_trig = (uintptr_t) read_addr;
20002098:	4b7a      	ldr	r3, [pc, #488]	; (20002284 <_Z13VgaBufProcessv+0x210>)
2000209a:	681b      	ldr	r3, [r3, #0]
2000209c:	63d3      	str	r3, [r2, #60]	; 0x3c
	hw_divider_save_state(&DividerState);
2000209e:	f000 faf7 	bl	20002690 <__hw_divider_save_state_veneer>
	int line = ScanLine;	// current scanline
200020a2:	4b79      	ldr	r3, [pc, #484]	; (20002288 <_Z13VgaBufProcessv+0x214>)
	if (line > CurVmode.vtot) // last scanline?
200020a4:	4979      	ldr	r1, [pc, #484]	; (2000228c <_Z13VgaBufProcessv+0x218>)
	int line = ScanLine;	// current scanline
200020a6:	681a      	ldr	r2, [r3, #0]
	if (line > CurVmode.vtot) // last scanline?
200020a8:	8d88      	ldrh	r0, [r1, #44]	; 0x2c
	line++; 		// new current scanline
200020aa:	3201      	adds	r2, #1
	if (line > CurVmode.vtot) // last scanline?
200020ac:	4290      	cmp	r0, r2
200020ae:	da04      	bge.n	200020ba <_Z13VgaBufProcessv+0x46>
		Frame++;	// increment frame counter
200020b0:	4877      	ldr	r0, [pc, #476]	; (20002290 <_Z13VgaBufProcessv+0x21c>)
200020b2:	6802      	ldr	r2, [r0, #0]
200020b4:	3201      	adds	r2, #1
200020b6:	6002      	str	r2, [r0, #0]
		line = 1; 	// restart scanline
200020b8:	2201      	movs	r2, #1
	ScanLine = line;	// store new scanline
200020ba:	601a      	str	r2, [r3, #0]
	u8 linetype = ScanlineType[line];
200020bc:	4b75      	ldr	r3, [pc, #468]	; (20002294 <_Z13VgaBufProcessv+0x220>)
	switch (linetype)
200020be:	5c9b      	ldrb	r3, [r3, r2]
200020c0:	3b06      	subs	r3, #6
200020c2:	b2db      	uxtb	r3, r3
200020c4:	2b04      	cmp	r3, #4
200020c6:	d862      	bhi.n	2000218e <_Z13VgaBufProcessv+0x11a>
200020c8:	4873      	ldr	r0, [pc, #460]	; (20002298 <_Z13VgaBufProcessv+0x224>)
200020ca:	009b      	lsls	r3, r3, #2
200020cc:	58c3      	ldr	r3, [r0, r3]
200020ce:	469f      	mov	pc, r3
		y0 = line - CurVmode.vfirst1;
200020d0:	2340      	movs	r3, #64	; 0x40
		y0 = line - CurVmode.vfirst2;
200020d2:	5acb      	ldrh	r3, [r1, r3]
200020d4:	1ad2      	subs	r2, r2, r3
		if (CurVmode.dbly) y0 >>= 1;
200020d6:	2355      	movs	r3, #85	; 0x55
200020d8:	5ccb      	ldrb	r3, [r1, r3]
200020da:	2b00      	cmp	r3, #0
200020dc:	d000      	beq.n	200020e0 <_Z13VgaBufProcessv+0x6c>
200020de:	1052      	asrs	r2, r2, #1
		y0 = (y0 << 1) + 1;
200020e0:	0052      	lsls	r2, r2, #1
200020e2:	1c53      	adds	r3, r2, #1
		VSync = False;	// not vsync
200020e4:	2200      	movs	r2, #0
		y0 = (y0 << 1) + 1;
200020e6:	9300      	str	r3, [sp, #0]
		VSync = False;	// not vsync
200020e8:	4b6c      	ldr	r3, [pc, #432]	; (2000229c <_Z13VgaBufProcessv+0x228>)
200020ea:	701a      	strb	r2, [r3, #0]
	if (y0 >= 0)
200020ec:	9b00      	ldr	r3, [sp, #0]
200020ee:	2b00      	cmp	r3, #0
200020f0:	db25      	blt.n	2000213e <_Z13VgaBufProcessv+0xca>
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
200020f2:	4c6b      	ldr	r4, [pc, #428]	; (200022a0 <_Z13VgaBufProcessv+0x22c>)
    dma_hw->abort = 1u << channel;
200020f4:	21a0      	movs	r1, #160	; 0xa0
		for (layer = 1; layer < LAYERS; layer++)
200020f6:	2301      	movs	r3, #1
200020f8:	46a4      	mov	ip, r4
200020fa:	46bb      	mov	fp, r7
    return timer_hw->timerawl;
200020fc:	4a69      	ldr	r2, [pc, #420]	; (200022a4 <_Z13VgaBufProcessv+0x230>)
200020fe:	486a      	ldr	r0, [pc, #424]	; (200022a8 <_Z13VgaBufProcessv+0x234>)
20002100:	4690      	mov	r8, r2
	if (y0 >= 0)
20002102:	4d6a      	ldr	r5, [pc, #424]	; (200022ac <_Z13VgaBufProcessv+0x238>)
20002104:	4a6a      	ldr	r2, [pc, #424]	; (200022b0 <_Z13VgaBufProcessv+0x23c>)
20002106:	05c9      	lsls	r1, r1, #23
			if (CtrlBufNext[layer] == NULL) continue;
20002108:	4e5e      	ldr	r6, [pc, #376]	; (20002284 <_Z13VgaBufProcessv+0x210>)
2000210a:	009c      	lsls	r4, r3, #2
2000210c:	5934      	ldr	r4, [r6, r4]
2000210e:	9401      	str	r4, [sp, #4]
20002110:	2c00      	cmp	r4, #0
20002112:	d00e      	beq.n	20002132 <_Z13VgaBufProcessv+0xbe>
			if (!s->on || (s->w <= 0) || (y0 < s->y) || (y0 >= s->y + s->h)) continue;
20002114:	7b84      	ldrb	r4, [r0, #14]
20002116:	2c00      	cmp	r4, #0
20002118:	d00b      	beq.n	20002132 <_Z13VgaBufProcessv+0xbe>
2000211a:	8844      	ldrh	r4, [r0, #2]
2000211c:	2c00      	cmp	r4, #0
2000211e:	d008      	beq.n	20002132 <_Z13VgaBufProcessv+0xbe>
20002120:	2400      	movs	r4, #0
20002122:	5f07      	ldrsh	r7, [r0, r4]
20002124:	9e00      	ldr	r6, [sp, #0]
20002126:	42b7      	cmp	r7, r6
20002128:	dc03      	bgt.n	20002132 <_Z13VgaBufProcessv+0xbe>
2000212a:	8884      	ldrh	r4, [r0, #4]
2000212c:	19e4      	adds	r4, r4, r7
2000212e:	42b4      	cmp	r4, r6
20002130:	dc31      	bgt.n	20002196 <_Z13VgaBufProcessv+0x122>
		for (layer = 1; layer < LAYERS; layer++)
20002132:	3301      	adds	r3, #1
20002134:	3518      	adds	r5, #24
20002136:	3024      	adds	r0, #36	; 0x24
20002138:	2b04      	cmp	r3, #4
2000213a:	d1e5      	bne.n	20002108 <_Z13VgaBufProcessv+0x94>
2000213c:	465f      	mov	r7, fp
}
2000213e:	0038      	movs	r0, r7
20002140:	b003      	add	sp, #12
20002142:	bcf0      	pop	{r4, r5, r6, r7}
20002144:	46bb      	mov	fp, r7
20002146:	46b2      	mov	sl, r6
20002148:	46a9      	mov	r9, r5
2000214a:	46a0      	mov	r8, r4
2000214c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		y0 = line - CurVmode.vfirst2;
2000214e:	234e      	movs	r3, #78	; 0x4e
20002150:	e7bf      	b.n	200020d2 <_Z13VgaBufProcessv+0x5e>
		y0 = line - CurVmode.vfirst1;
20002152:	2340      	movs	r3, #64	; 0x40
20002154:	5acb      	ldrh	r3, [r1, r3]
20002156:	1ad2      	subs	r2, r2, r3
		if (CurVmode.dbly) y0 >>= 1;
20002158:	2355      	movs	r3, #85	; 0x55
		y0 = line - CurVmode.vfirst1;
2000215a:	9200      	str	r2, [sp, #0]
		if (CurVmode.dbly) y0 >>= 1;
2000215c:	5ccb      	ldrb	r3, [r1, r3]
2000215e:	2b00      	cmp	r3, #0
20002160:	d001      	beq.n	20002166 <_Z13VgaBufProcessv+0xf2>
20002162:	1053      	asrs	r3, r2, #1
20002164:	9300      	str	r3, [sp, #0]
		VSync = False;	// not vsync
20002166:	2200      	movs	r2, #0
20002168:	4b4c      	ldr	r3, [pc, #304]	; (2000229c <_Z13VgaBufProcessv+0x228>)
2000216a:	701a      	strb	r2, [r3, #0]
		break;
2000216c:	e7be      	b.n	200020ec <_Z13VgaBufProcessv+0x78>
		y0 = line - CurVmode.vfirst1;
2000216e:	2340      	movs	r3, #64	; 0x40
		y0 = line - CurVmode.vfirst2;
20002170:	5acb      	ldrh	r3, [r1, r3]
20002172:	1ad2      	subs	r2, r2, r3
		if (CurVmode.dbly) y0 >>= 1;
20002174:	2355      	movs	r3, #85	; 0x55
20002176:	5ccb      	ldrb	r3, [r1, r3]
20002178:	2b00      	cmp	r3, #0
2000217a:	d000      	beq.n	2000217e <_Z13VgaBufProcessv+0x10a>
2000217c:	1052      	asrs	r2, r2, #1
		y0 <<= 1;
2000217e:	0053      	lsls	r3, r2, #1
		VSync = False;	// not vsync
20002180:	2200      	movs	r2, #0
		y0 <<= 1;
20002182:	9300      	str	r3, [sp, #0]
		VSync = False;	// not vsync
20002184:	4b45      	ldr	r3, [pc, #276]	; (2000229c <_Z13VgaBufProcessv+0x228>)
20002186:	701a      	strb	r2, [r3, #0]
		break;
20002188:	e7b0      	b.n	200020ec <_Z13VgaBufProcessv+0x78>
		y0 = line - CurVmode.vfirst2;
2000218a:	234e      	movs	r3, #78	; 0x4e
2000218c:	e7f0      	b.n	20002170 <_Z13VgaBufProcessv+0xfc>
		VSync = True;	// vsync
2000218e:	2201      	movs	r2, #1
20002190:	4b42      	ldr	r3, [pc, #264]	; (2000229c <_Z13VgaBufProcessv+0x228>)
20002192:	701a      	strb	r2, [r3, #0]
	if (y0 >= 0)
20002194:	e7d3      	b.n	2000213e <_Z13VgaBufProcessv+0xca>
20002196:	4644      	mov	r4, r8
20002198:	6aa4      	ldr	r4, [r4, #40]	; 0x28
2000219a:	46a2      	mov	sl, r4
2000219c:	1d2c      	adds	r4, r5, #4
2000219e:	46a1      	mov	r9, r4
				if (a <= CurLayerProg.maxidle+LAYER_OFFSET) break;
200021a0:	4c44      	ldr	r4, [pc, #272]	; (200022b4 <_Z13VgaBufProcessv+0x240>)
200021a2:	7b67      	ldrb	r7, [r4, #13]
200021a4:	464c      	mov	r4, r9
200021a6:	4699      	mov	r9, r3
200021a8:	0003      	movs	r3, r0
200021aa:	4650      	mov	r0, sl
200021ac:	469a      	mov	sl, r3
200021ae:	0023      	movs	r3, r4
200021b0:	e004      	b.n	200021bc <_Z13VgaBufProcessv+0x148>
200021b2:	4644      	mov	r4, r8
200021b4:	6aa4      	ldr	r4, [r4, #40]	; 0x28
			} while ((u32)(time_us_32() - t1) < (u32)10); // wait max. 10 us, low resolution can take long time
200021b6:	1a24      	subs	r4, r4, r0
200021b8:	2c09      	cmp	r4, #9
200021ba:	d804      	bhi.n	200021c6 <_Z13VgaBufProcessv+0x152>
				if (a <= CurLayerProg.maxidle+LAYER_OFFSET) break;
200021bc:	261f      	movs	r6, #31
				u8 a = *(volatile u8*)&VGA_PIO->sm[sm].addr & 0x1f;
200021be:	781c      	ldrb	r4, [r3, #0]
				if (a <= CurLayerProg.maxidle+LAYER_OFFSET) break;
200021c0:	4034      	ands	r4, r6
200021c2:	42a7      	cmp	r7, r4
200021c4:	d3f5      	bcc.n	200021b2 <_Z13VgaBufProcessv+0x13e>
200021c6:	464b      	mov	r3, r9
200021c8:	2701      	movs	r7, #1
200021ca:	005c      	lsls	r4, r3, #1
200021cc:	4650      	mov	r0, sl
			dma_channel_abort(VGA_DMA_PIO(layer));
200021ce:	46a2      	mov	sl, r4
200021d0:	3401      	adds	r4, #1
200021d2:	40a7      	lsls	r7, r4
200021d4:	508f      	str	r7, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
200021d6:	588c      	ldr	r4, [r1, r2]
200021d8:	423c      	tst	r4, r7
200021da:	d1fc      	bne.n	200021d6 <_Z13VgaBufProcessv+0x162>
    dma_hw->abort = 1u << channel;
200021dc:	2401      	movs	r4, #1
200021de:	4656      	mov	r6, sl
200021e0:	40b4      	lsls	r4, r6
200021e2:	4699      	mov	r9, r3
200021e4:	508c      	str	r4, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
200021e6:	588b      	ldr	r3, [r1, r2]
200021e8:	4223      	tst	r3, r4
200021ea:	d1fc      	bne.n	200021e6 <_Z13VgaBufProcessv+0x172>
    dma_hw->abort = 1u << channel;
200021ec:	003b      	movs	r3, r7
200021ee:	508f      	str	r7, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
200021f0:	588f      	ldr	r7, [r1, r2]
200021f2:	423b      	tst	r3, r7
200021f4:	d1fc      	bne.n	200021f0 <_Z13VgaBufProcessv+0x17c>
    dma_hw->abort = 1u << channel;
200021f6:	464b      	mov	r3, r9
200021f8:	508c      	str	r4, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
200021fa:	588f      	ldr	r7, [r1, r2]
200021fc:	423c      	tst	r4, r7
200021fe:	d1fc      	bne.n	200021fa <_Z13VgaBufProcessv+0x186>
20002200:	2701      	movs	r7, #1
20002202:	4664      	mov	r4, ip
20002204:	409f      	lsls	r7, r3
20002206:	4666      	mov	r6, ip
20002208:	6824      	ldr	r4, [r4, #0]
    pio->sm[sm].instr = instr;
2000220a:	449a      	add	sl, r3
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
2000220c:	43bc      	bics	r4, r7
2000220e:	6034      	str	r4, [r6, #0]
20002210:	2480      	movs	r4, #128	; 0x80
20002212:	2680      	movs	r6, #128	; 0x80
20002214:	0164      	lsls	r4, r4, #5
20002216:	432c      	orrs	r4, r5
20002218:	0636      	lsls	r6, r6, #24
2000221a:	6026      	str	r6, [r4, #0]
2000221c:	6026      	str	r6, [r4, #0]
    pio->ctrl |= 1u << (PIO_CTRL_SM_RESTART_LSB + sm);
2000221e:	4664      	mov	r4, ip
20002220:	2601      	movs	r6, #1
20002222:	6824      	ldr	r4, [r4, #0]
20002224:	46a1      	mov	r9, r4
20002226:	1d1c      	adds	r4, r3, #4
20002228:	40a6      	lsls	r6, r4
2000222a:	0034      	movs	r4, r6
2000222c:	464e      	mov	r6, r9
2000222e:	4334      	orrs	r4, r6
20002230:	4666      	mov	r6, ip
20002232:	6034      	str	r4, [r6, #0]
20002234:	261f      	movs	r6, #31
20002236:	4c1f      	ldr	r4, [pc, #124]	; (200022b4 <_Z13VgaBufProcessv+0x240>)
20002238:	7ae4      	ldrb	r4, [r4, #11]
2000223a:	4034      	ands	r4, r6
2000223c:	0026      	movs	r6, r4
    pio->sm[sm].instr = instr;
2000223e:	4654      	mov	r4, sl
20002240:	00e4      	lsls	r4, r4, #3
20002242:	46a2      	mov	sl, r4
20002244:	4c1c      	ldr	r4, [pc, #112]	; (200022b8 <_Z13VgaBufProcessv+0x244>)
20002246:	46a1      	mov	r9, r4
20002248:	44ca      	add	sl, r9
2000224a:	4654      	mov	r4, sl
2000224c:	6026      	str	r6, [r4, #0]
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
2000224e:	4664      	mov	r4, ip
20002250:	6824      	ldr	r4, [r4, #0]
20002252:	261f      	movs	r6, #31
20002254:	43bc      	bics	r4, r7
20002256:	4327      	orrs	r7, r4
20002258:	4664      	mov	r4, ip
2000225a:	6027      	str	r7, [r4, #0]
2000225c:	4c15      	ldr	r4, [pc, #84]	; (200022b4 <_Z13VgaBufProcessv+0x240>)
2000225e:	7b24      	ldrb	r4, [r4, #12]
20002260:	4034      	ands	r4, r6
    pio->sm[sm].instr = instr;
20002262:	4656      	mov	r6, sl
20002264:	6034      	str	r4, [r6, #0]
    return &dma_hw->ch[channel];
20002266:	26a0      	movs	r6, #160	; 0xa0
20002268:	05f6      	lsls	r6, r6, #23
2000226a:	46b1      	mov	r9, r6
2000226c:	01dc      	lsls	r4, r3, #7
        dma_channel_hw_addr(channel)->al3_read_addr_trig = (uintptr_t) read_addr;
2000226e:	9e01      	ldr	r6, [sp, #4]
20002270:	444c      	add	r4, r9
20002272:	63e6      	str	r6, [r4, #60]	; 0x3c
20002274:	e75d      	b.n	20002132 <_Z13VgaBufProcessv+0xbe>
20002276:	46c0      	nop			; (mov r8, r8)
20002278:	0000040c 	.word	0x0000040c
2000227c:	20003638 	.word	0x20003638
20002280:	20010bd8 	.word	0x20010bd8
20002284:	20010b28 	.word	0x20010b28
20002288:	2001c874 	.word	0x2001c874
2000228c:	20010b7c 	.word	0x20010b7c
20002290:	20011be8 	.word	0x20011be8
20002294:	2001c878 	.word	0x2001c878
20002298:	1003ff6c 	.word	0x1003ff6c
2000229c:	2003e340 	.word	0x2003e340
200022a0:	50200000 	.word	0x50200000
200022a4:	40054000 	.word	0x40054000
200022a8:	20019c34 	.word	0x20019c34
200022ac:	502000e8 	.word	0x502000e8
200022b0:	00000444 	.word	0x00000444
200022b4:	20010b44 	.word	0x20010b44
200022b8:	502000d8 	.word	0x502000d8

200022bc <_Z12VgaBufRenderPmS_Phi>:
{
200022bc:	b5f0      	push	{r4, r5, r6, r7, lr}
200022be:	46de      	mov	lr, fp
200022c0:	4657      	mov	r7, sl
200022c2:	464e      	mov	r6, r9
200022c4:	4645      	mov	r5, r8
200022c6:	4699      	mov	r9, r3
	*cbuf++ = 4; // send 4x u32
200022c8:	2304      	movs	r3, #4
{
200022ca:	0004      	movs	r4, r0
200022cc:	4693      	mov	fp, r2
200022ce:	b5e0      	push	{r5, r6, r7, lr}
	*cbuf++ = 4; // send 4x u32
200022d0:	6003      	str	r3, [r0, #0]
	*cbuf++ = (u32)LineBufHsBp; // HSYNC + back porch
200022d2:	4b8b      	ldr	r3, [pc, #556]	; (20002500 <_Z12VgaBufRenderPmS_Phi+0x244>)
{
200022d4:	000e      	movs	r6, r1
	*cbuf++ = (u32)LineBufHsBp; // HSYNC + back porch
200022d6:	6063      	str	r3, [r4, #4]
	cbuf = Render(cbuf, dbuf, y0, CurVmode.width);
200022d8:	4b8a      	ldr	r3, [pc, #552]	; (20002504 <_Z12VgaBufRenderPmS_Phi+0x248>)
200022da:	464a      	mov	r2, r9
200022dc:	881b      	ldrh	r3, [r3, #0]
{
200022de:	b085      	sub	sp, #20
	cbuf = Render(cbuf, dbuf, y0, CurVmode.width);
200022e0:	4659      	mov	r1, fp
	*cbuf++ = (u32)LineBufHsBp; // HSYNC + back porch
200022e2:	3008      	adds	r0, #8
	cbuf = Render(cbuf, dbuf, y0, CurVmode.width);
200022e4:	f7ff fcea 	bl	20001cbc <Render>
	*cbuf++ = 1; // send 1x u32
200022e8:	2301      	movs	r3, #1
200022ea:	6003      	str	r3, [r0, #0]
	*cbuf++ = (u32)&LineBufFp; // front porch
200022ec:	3307      	adds	r3, #7
200022ee:	469c      	mov	ip, r3
200022f0:	4484      	add	ip, r0
200022f2:	4663      	mov	r3, ip
200022f4:	9300      	str	r3, [sp, #0]
200022f6:	4b84      	ldr	r3, [pc, #528]	; (20002508 <_Z12VgaBufRenderPmS_Phi+0x24c>)
200022f8:	4c84      	ldr	r4, [pc, #528]	; (2000250c <_Z12VgaBufRenderPmS_Phi+0x250>)
200022fa:	6043      	str	r3, [r0, #4]
	for (layer = 1; layer < LAYERS; layer++)
200022fc:	4b84      	ldr	r3, [pc, #528]	; (20002510 <_Z12VgaBufRenderPmS_Phi+0x254>)
200022fe:	4f85      	ldr	r7, [pc, #532]	; (20002514 <_Z12VgaBufRenderPmS_Phi+0x258>)
20002300:	4698      	mov	r8, r3
20002302:	4b85      	ldr	r3, [pc, #532]	; (20002518 <_Z12VgaBufRenderPmS_Phi+0x25c>)
20002304:	4d85      	ldr	r5, [pc, #532]	; (2000251c <_Z12VgaBufRenderPmS_Phi+0x260>)
20002306:	469a      	mov	sl, r3
		switch(mode)
20002308:	464b      	mov	r3, r9
2000230a:	46b1      	mov	r9, r6
2000230c:	4656      	mov	r6, sl
2000230e:	469a      	mov	sl, r3
		cbuf0 += CtrlBufSize[layer-1];
20002310:	6823      	ldr	r3, [r4, #0]
20002312:	009b      	lsls	r3, r3, #2
20002314:	4499      	add	r9, r3
		dbuf += LineBufSize[layer-1];
20002316:	4643      	mov	r3, r8
20002318:	681b      	ldr	r3, [r3, #0]
2000231a:	469c      	mov	ip, r3
		CtrlBufNext[layer] = NULL;
2000231c:	2300      	movs	r3, #0
2000231e:	607b      	str	r3, [r7, #4]
		int mode = LayerModeInx[layer];
20002320:	7873      	ldrb	r3, [r6, #1]
		dbuf += LineBufSize[layer-1];
20002322:	44e3      	add	fp, ip
		if (mode == LAYERMODE_BASE) continue;
20002324:	2b00      	cmp	r3, #0
20002326:	d038      	beq.n	2000239a <_Z12VgaBufRenderPmS_Phi+0xde>
		if (!s->on || (s->w <= 0) || (y0 < s->y) || (y0 >= s->y + s->h)) continue;
20002328:	2222      	movs	r2, #34	; 0x22
2000232a:	5caa      	ldrb	r2, [r5, r2]
2000232c:	2a00      	cmp	r2, #0
2000232e:	d034      	beq.n	2000239a <_Z12VgaBufRenderPmS_Phi+0xde>
20002330:	8aea      	ldrh	r2, [r5, #22]
20002332:	2a00      	cmp	r2, #0
20002334:	d031      	beq.n	2000239a <_Z12VgaBufRenderPmS_Phi+0xde>
20002336:	2114      	movs	r1, #20
20002338:	5e6a      	ldrsh	r2, [r5, r1]
2000233a:	4552      	cmp	r2, sl
2000233c:	dc2d      	bgt.n	2000239a <_Z12VgaBufRenderPmS_Phi+0xde>
2000233e:	8b29      	ldrh	r1, [r5, #24]
20002340:	1889      	adds	r1, r1, r2
20002342:	4551      	cmp	r1, sl
20002344:	dd29      	ble.n	2000239a <_Z12VgaBufRenderPmS_Phi+0xde>
		int y = y0 - s->y;
20002346:	4651      	mov	r1, sl
20002348:	1a8a      	subs	r2, r1, r2
2000234a:	9203      	str	r2, [sp, #12]
		CtrlBufNext[layer] = cbuf2;
2000234c:	464a      	mov	r2, r9
		*cbuf2++ = 1;
2000234e:	4649      	mov	r1, r9
		CtrlBufNext[layer] = cbuf2;
20002350:	607a      	str	r2, [r7, #4]
		*cbuf2++ = 1;
20002352:	2201      	movs	r2, #1
20002354:	600a      	str	r2, [r1, #0]
		*cbuf2++ = (u32)dbuf2;
20002356:	4659      	mov	r1, fp
20002358:	464a      	mov	r2, r9
2000235a:	6051      	str	r1, [r2, #4]
		*(u32*)dbuf2 = BYTESWAP(s->init);
2000235c:	68aa      	ldr	r2, [r5, #8]
		switch(mode)
2000235e:	3b06      	subs	r3, #6
20002360:	ba12      	rev	r2, r2
		*(u32*)dbuf2 = BYTESWAP(s->init);
20002362:	c104      	stmia	r1!, {r2}
		switch(mode)
20002364:	b2db      	uxtb	r3, r3
		*(u32*)dbuf2 = BYTESWAP(s->init);
20002366:	9101      	str	r1, [sp, #4]
		switch(mode)
20002368:	2b0c      	cmp	r3, #12
2000236a:	d900      	bls.n	2000236e <_Z12VgaBufRenderPmS_Phi+0xb2>
2000236c:	e094      	b.n	20002498 <_Z12VgaBufRenderPmS_Phi+0x1dc>
2000236e:	4a6c      	ldr	r2, [pc, #432]	; (20002520 <_Z12VgaBufRenderPmS_Phi+0x264>)
20002370:	009b      	lsls	r3, r3, #2
20002372:	58d3      	ldr	r3, [r2, r3]
20002374:	469f      	mov	pc, r3
				MemSet4((u32*)dbuf2, s->keycol, s->w/4);
20002376:	8aea      	ldrh	r2, [r5, #22]
20002378:	68e9      	ldr	r1, [r5, #12]
2000237a:	0892      	lsrs	r2, r2, #2
2000237c:	9801      	ldr	r0, [sp, #4]
2000237e:	f7fd ffc7 	bl	20000310 <MemSet4>
				cbuf2 = RenderFastSprite(cbuf2, y, s, dbuf2);
20002382:	4648      	mov	r0, r9
20002384:	002a      	movs	r2, r5
20002386:	9b01      	ldr	r3, [sp, #4]
20002388:	9903      	ldr	r1, [sp, #12]
2000238a:	3008      	adds	r0, #8
2000238c:	f7fe f938 	bl	20000600 <RenderFastSprite>
20002390:	9002      	str	r0, [sp, #8]
		*cbuf2++ = 0; // end mark
20002392:	2200      	movs	r2, #0
20002394:	9b02      	ldr	r3, [sp, #8]
20002396:	601a      	str	r2, [r3, #0]
		*cbuf2++ = 0; // end mark
20002398:	605a      	str	r2, [r3, #4]
	for (layer = 1; layer < LAYERS; layer++)
2000239a:	2304      	movs	r3, #4
2000239c:	469c      	mov	ip, r3
2000239e:	4b61      	ldr	r3, [pc, #388]	; (20002524 <_Z12VgaBufRenderPmS_Phi+0x268>)
200023a0:	3404      	adds	r4, #4
200023a2:	44e0      	add	r8, ip
200023a4:	3704      	adds	r7, #4
200023a6:	3601      	adds	r6, #1
200023a8:	3524      	adds	r5, #36	; 0x24
200023aa:	42a3      	cmp	r3, r4
200023ac:	d1b0      	bne.n	20002310 <_Z12VgaBufRenderPmS_Phi+0x54>
}
200023ae:	9800      	ldr	r0, [sp, #0]
200023b0:	b005      	add	sp, #20
200023b2:	bcf0      	pop	{r4, r5, r6, r7}
200023b4:	46bb      	mov	fp, r7
200023b6:	46b2      	mov	sl, r6
200023b8:	46a9      	mov	r9, r5
200023ba:	46a0      	mov	r8, r4
200023bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				int x = s->x; // destination coordinate X
200023be:	2112      	movs	r1, #18
200023c0:	5e6b      	ldrsh	r3, [r5, r1]
				int w = s->w; // destination width
200023c2:	8aea      	ldrh	r2, [r5, #22]
				if (x < 0)
200023c4:	2b00      	cmp	r3, #0
200023c6:	da00      	bge.n	200023ca <_Z12VgaBufRenderPmS_Phi+0x10e>
200023c8:	e07d      	b.n	200024c6 <_Z12VgaBufRenderPmS_Phi+0x20a>
					if (x + w > CurVmode.width)
200023ca:	494e      	ldr	r1, [pc, #312]	; (20002504 <_Z12VgaBufRenderPmS_Phi+0x248>)
200023cc:	18d0      	adds	r0, r2, r3
200023ce:	8809      	ldrh	r1, [r1, #0]
200023d0:	468c      	mov	ip, r1
					x = 0;
200023d2:	2100      	movs	r1, #0
					if (x + w > CurVmode.width)
200023d4:	4560      	cmp	r0, ip
200023d6:	dd01      	ble.n	200023dc <_Z12VgaBufRenderPmS_Phi+0x120>
						w = CurVmode.width - x; // limit W
200023d8:	4662      	mov	r2, ip
200023da:	1ad2      	subs	r2, r2, r3
				w = ALIGN4(w);
200023dc:	2303      	movs	r3, #3
200023de:	0010      	movs	r0, r2
200023e0:	4398      	bics	r0, r3
				if (w <= 0)
200023e2:	2800      	cmp	r0, #0
200023e4:	dd36      	ble.n	20002454 <_Z12VgaBufRenderPmS_Phi+0x198>
					*cbuf2++ = w/4;
200023e6:	464b      	mov	r3, r9
200023e8:	1092      	asrs	r2, r2, #2
200023ea:	609a      	str	r2, [r3, #8]
					*cbuf2++ = (u32)&dbuf2[x];
200023ec:	2310      	movs	r3, #16
200023ee:	9801      	ldr	r0, [sp, #4]
200023f0:	444b      	add	r3, r9
200023f2:	4684      	mov	ip, r0
200023f4:	9302      	str	r3, [sp, #8]
200023f6:	464b      	mov	r3, r9
200023f8:	4461      	add	r1, ip
200023fa:	60d9      	str	r1, [r3, #12]
					RenderPersp(dbuf2, y, s);
200023fc:	002a      	movs	r2, r5
200023fe:	9903      	ldr	r1, [sp, #12]
20002400:	f7fe fe66 	bl	200010d0 <RenderPersp>
20002404:	e7c5      	b.n	20002392 <_Z12VgaBufRenderPmS_Phi+0xd6>
				*cbuf2++ = s->trans;
20002406:	464a      	mov	r2, r9
20002408:	8a2b      	ldrh	r3, [r5, #16]
2000240a:	6093      	str	r3, [r2, #8]
				*cbuf2++ = (u32)dbuf2;
2000240c:	2310      	movs	r3, #16
2000240e:	444b      	add	r3, r9
20002410:	9302      	str	r3, [sp, #8]
20002412:	9b01      	ldr	r3, [sp, #4]
20002414:	60d3      	str	r3, [r2, #12]
				MemSet4((u32*)dbuf2, s->keycol, s->w/4);
20002416:	8aea      	ldrh	r2, [r5, #22]
20002418:	68e9      	ldr	r1, [r5, #12]
2000241a:	0018      	movs	r0, r3
2000241c:	0892      	lsrs	r2, r2, #2
2000241e:	f7fd ff77 	bl	20000310 <MemSet4>
				RenderSprite(dbuf2, y, s);
20002422:	002a      	movs	r2, r5
20002424:	9903      	ldr	r1, [sp, #12]
20002426:	9801      	ldr	r0, [sp, #4]
20002428:	f7fe ffdc 	bl	200013e4 <RenderSprite>
			break;
2000242c:	e7b1      	b.n	20002392 <_Z12VgaBufRenderPmS_Phi+0xd6>
				int x = s->x; // destination coordinate X
2000242e:	2112      	movs	r1, #18
20002430:	5e6b      	ldrsh	r3, [r5, r1]
				int w = s->w; // destination width
20002432:	8aea      	ldrh	r2, [r5, #22]
				if (x < 0)
20002434:	2b00      	cmp	r3, #0
20002436:	db3a      	blt.n	200024ae <_Z12VgaBufRenderPmS_Phi+0x1f2>
					if (x + w > CurVmode.width)
20002438:	4932      	ldr	r1, [pc, #200]	; (20002504 <_Z12VgaBufRenderPmS_Phi+0x248>)
2000243a:	18d0      	adds	r0, r2, r3
2000243c:	8809      	ldrh	r1, [r1, #0]
2000243e:	468c      	mov	ip, r1
					x = 0;
20002440:	2100      	movs	r1, #0
					if (x + w > CurVmode.width)
20002442:	4560      	cmp	r0, ip
20002444:	dd01      	ble.n	2000244a <_Z12VgaBufRenderPmS_Phi+0x18e>
						w = CurVmode.width - x; // limit W
20002446:	4662      	mov	r2, ip
20002448:	1ad2      	subs	r2, r2, r3
				w = ALIGN4(w);
2000244a:	2303      	movs	r3, #3
2000244c:	0010      	movs	r0, r2
2000244e:	4398      	bics	r0, r3
				if (w <= 0)
20002450:	2800      	cmp	r0, #0
20002452:	dc44      	bgt.n	200024de <_Z12VgaBufRenderPmS_Phi+0x222>
					*cbuf2++ = 1;
20002454:	2301      	movs	r3, #1
20002456:	464a      	mov	r2, r9
20002458:	6093      	str	r3, [r2, #8]
					*cbuf2++ = (u32)dbuf2;
2000245a:	330f      	adds	r3, #15
2000245c:	444b      	add	r3, r9
2000245e:	9302      	str	r3, [sp, #8]
20002460:	464b      	mov	r3, r9
20002462:	9a01      	ldr	r2, [sp, #4]
20002464:	60da      	str	r2, [r3, #12]
					*(u32*)dbuf2 = s->keycol;
20002466:	465b      	mov	r3, fp
20002468:	68ea      	ldr	r2, [r5, #12]
2000246a:	605a      	str	r2, [r3, #4]
2000246c:	e791      	b.n	20002392 <_Z12VgaBufRenderPmS_Phi+0xd6>
				int n = row[y+1] - row[y];
2000246e:	9a03      	ldr	r2, [sp, #12]
				u16* row = (u16*)s->par;
20002470:	6869      	ldr	r1, [r5, #4]
				int n = row[y+1] - row[y];
20002472:	3201      	adds	r2, #1
20002474:	0052      	lsls	r2, r2, #1
20002476:	188b      	adds	r3, r1, r2
20002478:	5a8a      	ldrh	r2, [r1, r2]
				*cbuf2++ = n;
2000247a:	4649      	mov	r1, r9
				int n = row[y+1] - row[y];
2000247c:	3b02      	subs	r3, #2
2000247e:	881b      	ldrh	r3, [r3, #0]
20002480:	1ad2      	subs	r2, r2, r3
				*cbuf2++ = n;
20002482:	608a      	str	r2, [r1, #8]
				*cbuf2++ = (u32)&s->img[row[y]*4];
20002484:	2210      	movs	r2, #16
20002486:	444a      	add	r2, r9
20002488:	9202      	str	r2, [sp, #8]
2000248a:	009b      	lsls	r3, r3, #2
				*cbuf2++ = (u32)&s->img[y*s->wb];
2000248c:	682a      	ldr	r2, [r5, #0]
2000248e:	4694      	mov	ip, r2
20002490:	464a      	mov	r2, r9
20002492:	4463      	add	r3, ip
20002494:	60d3      	str	r3, [r2, #12]
			break;
20002496:	e77c      	b.n	20002392 <_Z12VgaBufRenderPmS_Phi+0xd6>
				*cbuf2++ = s->trans;
20002498:	464a      	mov	r2, r9
2000249a:	8a2b      	ldrh	r3, [r5, #16]
2000249c:	6093      	str	r3, [r2, #8]
				*cbuf2++ = (u32)&s->img[y*s->wb];
2000249e:	2310      	movs	r3, #16
200024a0:	444b      	add	r3, r9
200024a2:	9a03      	ldr	r2, [sp, #12]
200024a4:	9302      	str	r3, [sp, #8]
200024a6:	8b6b      	ldrh	r3, [r5, #26]
200024a8:	435a      	muls	r2, r3
200024aa:	0013      	movs	r3, r2
200024ac:	e7ee      	b.n	2000248c <_Z12VgaBufRenderPmS_Phi+0x1d0>
					x = ALIGN4(x+4098) - 4096; // round X to 4-pixels
200024ae:	491e      	ldr	r1, [pc, #120]	; (20002528 <_Z12VgaBufRenderPmS_Phi+0x26c>)
200024b0:	468c      	mov	ip, r1
200024b2:	2103      	movs	r1, #3
200024b4:	4463      	add	r3, ip
200024b6:	438b      	bics	r3, r1
200024b8:	491c      	ldr	r1, [pc, #112]	; (2000252c <_Z12VgaBufRenderPmS_Phi+0x270>)
200024ba:	1859      	adds	r1, r3, r1
					w += x;	// decrease W
200024bc:	1852      	adds	r2, r2, r1
					x = -x; // start offset of X
200024be:	2180      	movs	r1, #128	; 0x80
200024c0:	0149      	lsls	r1, r1, #5
200024c2:	1ac9      	subs	r1, r1, r3
200024c4:	e7c1      	b.n	2000244a <_Z12VgaBufRenderPmS_Phi+0x18e>
					x = ALIGN4(x+4098) - 4096; // round X to 4-pixels
200024c6:	4918      	ldr	r1, [pc, #96]	; (20002528 <_Z12VgaBufRenderPmS_Phi+0x26c>)
200024c8:	468c      	mov	ip, r1
200024ca:	2103      	movs	r1, #3
200024cc:	4463      	add	r3, ip
200024ce:	438b      	bics	r3, r1
200024d0:	4916      	ldr	r1, [pc, #88]	; (2000252c <_Z12VgaBufRenderPmS_Phi+0x270>)
200024d2:	1859      	adds	r1, r3, r1
					w += x;	// decrease W
200024d4:	1852      	adds	r2, r2, r1
					x = -x; // start offset of X
200024d6:	2180      	movs	r1, #128	; 0x80
200024d8:	0149      	lsls	r1, r1, #5
200024da:	1ac9      	subs	r1, r1, r3
200024dc:	e77e      	b.n	200023dc <_Z12VgaBufRenderPmS_Phi+0x120>
					*cbuf2++ = w/4;
200024de:	464b      	mov	r3, r9
200024e0:	1092      	asrs	r2, r2, #2
200024e2:	609a      	str	r2, [r3, #8]
					*cbuf2++ = (u32)&dbuf2[x];
200024e4:	2310      	movs	r3, #16
200024e6:	9801      	ldr	r0, [sp, #4]
200024e8:	444b      	add	r3, r9
200024ea:	4684      	mov	ip, r0
200024ec:	9302      	str	r3, [sp, #8]
200024ee:	464b      	mov	r3, r9
200024f0:	4461      	add	r1, ip
200024f2:	60d9      	str	r1, [r3, #12]
					RenderPersp2(dbuf2, y, s);
200024f4:	002a      	movs	r2, r5
200024f6:	9903      	ldr	r1, [sp, #12]
200024f8:	f7fe fe74 	bl	200011e4 <RenderPersp2>
200024fc:	e749      	b.n	20002392 <_Z12VgaBufRenderPmS_Phi+0xd6>
200024fe:	46c0      	nop			; (mov r8, r8)
20002500:	2001b358 	.word	0x2001b358
20002504:	20010b7c 	.word	0x20010b7c
20002508:	2001b354 	.word	0x2001b354
2000250c:	20002b80 	.word	0x20002b80
20002510:	20002b90 	.word	0x20002b90
20002514:	20010b28 	.word	0x20010b28
20002518:	20019bf8 	.word	0x20019bf8
2000251c:	20019c20 	.word	0x20019c20
20002520:	1003ff80 	.word	0x1003ff80
20002524:	20002b8c 	.word	0x20002b8c
20002528:	00001002 	.word	0x00001002
2000252c:	fffff000 	.word	0xfffff000

20002530 <VgaLine>:
{
20002530:	b570      	push	{r4, r5, r6, lr}
	int bufinx = VgaBufProcess();
20002532:	f7ff fd9f 	bl	20002074 <_Z13VgaBufProcessv>
	if (bufinx == 0)
20002536:	2800      	cmp	r0, #0
20002538:	d013      	beq.n	20002562 <VgaLine+0x32>
		cbuf = CtrlBuf2;
2000253a:	4838      	ldr	r0, [pc, #224]	; (2000261c <VgaLine+0xec>)
		dbuf = LineBuf2;
2000253c:	4a38      	ldr	r2, [pc, #224]	; (20002620 <VgaLine+0xf0>)
	CtrlBufNext[0] = cbuf;
2000253e:	4b39      	ldr	r3, [pc, #228]	; (20002624 <VgaLine+0xf4>)
	if (line > CurVmode.vtot) line = 1;
20002540:	4d39      	ldr	r5, [pc, #228]	; (20002628 <VgaLine+0xf8>)
	CtrlBufNext[0] = cbuf;
20002542:	6018      	str	r0, [r3, #0]
	int line = ScanLine;	// current scanline
20002544:	4b39      	ldr	r3, [pc, #228]	; (2000262c <VgaLine+0xfc>)
	if (line > CurVmode.vtot) line = 1;
20002546:	8da9      	ldrh	r1, [r5, #44]	; 0x2c
	int line = ScanLine;	// current scanline
20002548:	681b      	ldr	r3, [r3, #0]
	line++; // next line to render
2000254a:	3301      	adds	r3, #1
	if (line > CurVmode.vtot) line = 1;
2000254c:	4299      	cmp	r1, r3
2000254e:	da00      	bge.n	20002552 <VgaLine+0x22>
20002550:	2301      	movs	r3, #1
	u8 linetype = ScanlineType[line];
20002552:	4937      	ldr	r1, [pc, #220]	; (20002630 <VgaLine+0x100>)
	switch (linetype)
20002554:	5ccc      	ldrb	r4, [r1, r3]
20002556:	2c0a      	cmp	r4, #10
20002558:	d85e      	bhi.n	20002618 <VgaLine+0xe8>
2000255a:	4936      	ldr	r1, [pc, #216]	; (20002634 <VgaLine+0x104>)
2000255c:	00a4      	lsls	r4, r4, #2
2000255e:	5909      	ldr	r1, [r1, r4]
20002560:	468f      	mov	pc, r1
		cbuf = CtrlBuf1;
20002562:	4835      	ldr	r0, [pc, #212]	; (20002638 <VgaLine+0x108>)
		dbuf = LineBuf1;
20002564:	4a35      	ldr	r2, [pc, #212]	; (2000263c <VgaLine+0x10c>)
20002566:	e7ea      	b.n	2000253e <VgaLine+0xe>
		y0 = line - CurVmode.vfirst1;
20002568:	2140      	movs	r1, #64	; 0x40
		y0 = line - CurVmode.vfirst2;
2000256a:	5a69      	ldrh	r1, [r5, r1]
2000256c:	1a5b      	subs	r3, r3, r1
		if (CurVmode.dbly) y0 >>= 1;
2000256e:	2155      	movs	r1, #85	; 0x55
20002570:	5c69      	ldrb	r1, [r5, r1]
20002572:	2900      	cmp	r1, #0
20002574:	d000      	beq.n	20002578 <VgaLine+0x48>
20002576:	105b      	asrs	r3, r3, #1
		y0 = (y0 << 1) + 1;
20002578:	005b      	lsls	r3, r3, #1
2000257a:	3301      	adds	r3, #1
		cbuf = VgaBufRender(cbuf, cbuf0, dbuf, y0);
2000257c:	0001      	movs	r1, r0
2000257e:	f7ff fe9d 	bl	200022bc <_Z12VgaBufRenderPmS_Phi>
20002582:	0003      	movs	r3, r0
	*cbuf++ = 0; // end mark
20002584:	2200      	movs	r2, #0
	hw_divider_restore_state(&DividerState);
20002586:	482e      	ldr	r0, [pc, #184]	; (20002640 <VgaLine+0x110>)
	*cbuf++ = 0; // end mark
20002588:	601a      	str	r2, [r3, #0]
	*cbuf++ = 0; // end mark
2000258a:	605a      	str	r2, [r3, #4]
	hw_divider_restore_state(&DividerState);
2000258c:	f000 f888 	bl	200026a0 <__hw_divider_restore_state_veneer>
}
20002590:	bd70      	pop	{r4, r5, r6, pc}
		y0 = line - CurVmode.vfirst2;
20002592:	214e      	movs	r1, #78	; 0x4e
20002594:	e7e9      	b.n	2000256a <VgaLine+0x3a>
		*cbuf++ = 2; // send 2x u32
20002596:	2302      	movs	r3, #2
		*cbuf++ = 4;	// send 4x u32
20002598:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)&LineBufSync[0]; // half + half
2000259a:	0003      	movs	r3, r0
2000259c:	4a29      	ldr	r2, [pc, #164]	; (20002644 <VgaLine+0x114>)
2000259e:	3308      	adds	r3, #8
200025a0:	6042      	str	r2, [r0, #4]
		break;
200025a2:	e7ef      	b.n	20002584 <VgaLine+0x54>
		*cbuf++ = 4;	// send 4x u32
200025a4:	2304      	movs	r3, #4
200025a6:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)&LineBufSync[4]; // VSYNC
200025a8:	0003      	movs	r3, r0
200025aa:	4a26      	ldr	r2, [pc, #152]	; (20002644 <VgaLine+0x114>)
200025ac:	3308      	adds	r3, #8
200025ae:	3210      	adds	r2, #16
200025b0:	6042      	str	r2, [r0, #4]
		break;
200025b2:	e7e7      	b.n	20002584 <VgaLine+0x54>
		*cbuf++ = 4;	// send 4x u32
200025b4:	2304      	movs	r3, #4
200025b6:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)&LineBufSync[6]; // VSYNC + half
200025b8:	0003      	movs	r3, r0
200025ba:	4a22      	ldr	r2, [pc, #136]	; (20002644 <VgaLine+0x114>)
200025bc:	3308      	adds	r3, #8
200025be:	3218      	adds	r2, #24
200025c0:	6042      	str	r2, [r0, #4]
		break;
200025c2:	e7df      	b.n	20002584 <VgaLine+0x54>
		*cbuf++ = 4;	// send 4x u32
200025c4:	2304      	movs	r3, #4
200025c6:	e7e7      	b.n	20002598 <VgaLine+0x68>
		*cbuf++ = 4;	// send 4x u32
200025c8:	2304      	movs	r3, #4
200025ca:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)&LineBufSync[2]; // half + VSYNC
200025cc:	0003      	movs	r3, r0
200025ce:	4a1d      	ldr	r2, [pc, #116]	; (20002644 <VgaLine+0x114>)
200025d0:	3308      	adds	r3, #8
200025d2:	3208      	adds	r2, #8
200025d4:	6042      	str	r2, [r0, #4]
		break;
200025d6:	e7d5      	b.n	20002584 <VgaLine+0x54>
		*cbuf++ = 2; // send 2x u32
200025d8:	2302      	movs	r3, #2
200025da:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)LineBufDark; // dark
200025dc:	0003      	movs	r3, r0
200025de:	4a1a      	ldr	r2, [pc, #104]	; (20002648 <VgaLine+0x118>)
200025e0:	3308      	adds	r3, #8
200025e2:	6042      	str	r2, [r0, #4]
		break;
200025e4:	e7ce      	b.n	20002584 <VgaLine+0x54>
		y0 = line - CurVmode.vfirst1;
200025e6:	2140      	movs	r1, #64	; 0x40
200025e8:	5a69      	ldrh	r1, [r5, r1]
200025ea:	1a5b      	subs	r3, r3, r1
		if (CurVmode.dbly) y0 >>= 1;
200025ec:	2155      	movs	r1, #85	; 0x55
200025ee:	5c69      	ldrb	r1, [r5, r1]
200025f0:	2900      	cmp	r1, #0
200025f2:	d0c3      	beq.n	2000257c <VgaLine+0x4c>
200025f4:	105b      	asrs	r3, r3, #1
		cbuf = VgaBufRender(cbuf, cbuf0, dbuf, y0);
200025f6:	e7c1      	b.n	2000257c <VgaLine+0x4c>
		y0 = line - CurVmode.vfirst1;
200025f8:	2140      	movs	r1, #64	; 0x40
		y0 = line - CurVmode.vfirst2;
200025fa:	5a69      	ldrh	r1, [r5, r1]
200025fc:	1a5b      	subs	r3, r3, r1
		if (CurVmode.dbly) y0 >>= 1;
200025fe:	2155      	movs	r1, #85	; 0x55
20002600:	5c69      	ldrb	r1, [r5, r1]
20002602:	2900      	cmp	r1, #0
20002604:	d000      	beq.n	20002608 <VgaLine+0xd8>
20002606:	105b      	asrs	r3, r3, #1
		y0 <<= 1;
20002608:	005b      	lsls	r3, r3, #1
		cbuf = VgaBufRender(cbuf, cbuf0, dbuf, y0);
2000260a:	0001      	movs	r1, r0
2000260c:	f7ff fe56 	bl	200022bc <_Z12VgaBufRenderPmS_Phi>
20002610:	0003      	movs	r3, r0
		break;
20002612:	e7b7      	b.n	20002584 <VgaLine+0x54>
		y0 = line - CurVmode.vfirst2;
20002614:	214e      	movs	r1, #78	; 0x4e
20002616:	e7f0      	b.n	200025fa <VgaLine+0xca>
	switch (linetype)
20002618:	0003      	movs	r3, r0
2000261a:	e7b3      	b.n	20002584 <VgaLine+0x54>
2000261c:	200100c8 	.word	0x200100c8
20002620:	2001a92c 	.word	0x2001a92c
20002624:	20010b28 	.word	0x20010b28
20002628:	20010b7c 	.word	0x20010b7c
2000262c:	2001c874 	.word	0x2001c874
20002630:	2001c878 	.word	0x2001c878
20002634:	1003ffb4 	.word	0x1003ffb4
20002638:	2000f668 	.word	0x2000f668
2000263c:	20019f0c 	.word	0x20019f0c
20002640:	20010bd8 	.word	0x20010bd8
20002644:	2001b368 	.word	0x2001b368
20002648:	2001b34c 	.word	0x2001b34c

2000264c <__aeabi_idiv0>:
2000264c:	4770      	bx	lr
2000264e:	46c0      	nop			; (mov r8, r8)

20002650 <__rom_func_lookup_veneer>:
20002650:	b401      	push	{r0}
20002652:	4802      	ldr	r0, [pc, #8]	; (2000265c <__rom_func_lookup_veneer+0xc>)
20002654:	4684      	mov	ip, r0
20002656:	bc01      	pop	{r0}
20002658:	4760      	bx	ip
2000265a:	bf00      	nop
2000265c:	10001201 	.word	0x10001201

20002660 <__best_effort_wfe_or_timeout_veneer>:
20002660:	b401      	push	{r0}
20002662:	4802      	ldr	r0, [pc, #8]	; (2000266c <__best_effort_wfe_or_timeout_veneer+0xc>)
20002664:	4684      	mov	ip, r0
20002666:	bc01      	pop	{r0}
20002668:	4760      	bx	ip
2000266a:	bf00      	nop
2000266c:	100034ed 	.word	0x100034ed

20002670 <____wrap___aeabi_lmul_veneer>:
20002670:	b401      	push	{r0}
20002672:	4802      	ldr	r0, [pc, #8]	; (2000267c <____wrap___aeabi_lmul_veneer+0xc>)
20002674:	4684      	mov	ip, r0
20002676:	bc01      	pop	{r0}
20002678:	4760      	bx	ip
2000267a:	bf00      	nop
2000267c:	100011cd 	.word	0x100011cd

20002680 <__time_us_64_veneer>:
20002680:	b401      	push	{r0}
20002682:	4802      	ldr	r0, [pc, #8]	; (2000268c <__time_us_64_veneer+0xc>)
20002684:	4684      	mov	ip, r0
20002686:	bc01      	pop	{r0}
20002688:	4760      	bx	ip
2000268a:	bf00      	nop
2000268c:	10003601 	.word	0x10003601

20002690 <__hw_divider_save_state_veneer>:
20002690:	b401      	push	{r0}
20002692:	4802      	ldr	r0, [pc, #8]	; (2000269c <__hw_divider_save_state_veneer+0xc>)
20002694:	4684      	mov	ip, r0
20002696:	bc01      	pop	{r0}
20002698:	4760      	bx	ip
2000269a:	bf00      	nop
2000269c:	100007f9 	.word	0x100007f9

200026a0 <__hw_divider_restore_state_veneer>:
200026a0:	b401      	push	{r0}
200026a2:	4802      	ldr	r0, [pc, #8]	; (200026ac <__hw_divider_restore_state_veneer+0xc>)
200026a4:	4684      	mov	ip, r0
200026a6:	bc01      	pop	{r0}
200026a8:	4760      	bx	ip
200026aa:	bf00      	nop
200026ac:	10000815 	.word	0x10000815

200026b0 <aeabi_bits_funcs>:
200026b0:	00003350 	.word	0x00003350
200026b4:	0000334c 	.word	0x0000334c
200026b8:	00003354 	.word	0x00003354
200026bc:	00003352 	.word	0x00003352

200026c0 <aeabi_bits_funcs_end>:
200026c0:	00000000 	.word	0x00000000
200026c4:	00010000 	.word	0x00010000
	...
200026d0:	00020000 	.word	0x00020000
	...
200026dc:	00030000 	.word	0x00030000
	...
200026e8:	00ff0000 	.word	0x00ff0000
200026ec:	00000000 	.word	0x00000000

200026f0 <irq_handler_chain_first_slot>:
200026f0:	b500      	push	{lr}
200026f2:	6848      	ldr	r0, [r1, #4]
200026f4:	3101      	adds	r1, #1
200026f6:	468e      	mov	lr, r1
200026f8:	4700      	bx	r0

200026fa <irq_handler_chain_remove_tail>:
200026fa:	4670      	mov	r0, lr
200026fc:	3809      	subs	r0, #9
200026fe:	4901      	ldr	r1, [pc, #4]	; (20002704 <irq_handler_chain_remove_tail+0xa>)
20002700:	4788      	blx	r1
20002702:	bd00      	pop	{pc}
20002704:	10001d35 	.word	0x10001d35

20002708 <aeabi_mem_funcs>:
20002708:	0000534d 	.word	0x0000534d
2000270c:	0000434d 	.word	0x0000434d
20002710:	00003453 	.word	0x00003453
20002714:	00003443 	.word	0x00003443

20002718 <stdio_usb>:
20002718:	10002a6d 00000000 10002a05 00000000     m*.......*......
20002728:	00000100                                ....

2000272c <striped_spin_lock_num>:
2000272c:	00000010                                ....

20002730 <_usbd_qdef>:
20002730:	2003da40 000c0010 00000000 00000000     @.. ............
	...

20002750 <ep_dir_string>:
20002750:	1000a61c 1000a620                       .... ...

20002758 <CarX>:
20002758:	44080000                                ...D

2000275c <CarY>:
2000275c:	44780000                                ..xD

20002760 <CheckCol>:
20002760:	00e0fc53                                S...

20002764 <CheckNext>:
20002764:	00000001                                ....

20002768 <Hist>:
20002768:	3b9aca00 3b9aca00 3b9aca00              ...;...;...;

20002774 <RecordInx>:
20002774:	00000000 ffffffff ffffffff              ............

20002780 <TileMap>:
	...
20002888:	06060807 06060606 06060606 0c0b0606     ................
	...
200028a8:	00000a09 00000000 00000000 0e0d0000     ................
	...
200028c8:	00000005 00000000 00000000 05000000     ................
	...
200028e8:	07000005 06060608 00000c0b 02000000     ................
	...
20002908:	09000005 0000000a 00000e0d 05000000     ................
	...
20002928:	05000005 00000000 00100f00 14130000     ................
	...
20002948:	03000001 00000000 06121100 16150606     ................
	...
20002968:	05000005 00000000 00000000 00000000     ................
	...
20002988:	0f000005 00000010 00000000 00000000     ................
	...
200029a8:	11000005 06060612 06060606 000c0b06     ................
	...
200029c8:	00000005 00000000 00000000 000e0d00     ................
	...
200029e8:	0000100f 00000000 00000000 00050000     ................
	...
20002a08:	06061211 06060606 000c0b06 00040000     ................
	...
20002a30:	000e0d00 00050000 00000000 00000000     ................
	...
20002a50:	100f0000 00141300 00000000 00000000     ................
	...
20002a70:	12110000 00161506 00000000 00000000     ................
	...

20002b80 <CtrlBufSize>:
20002b80:	000000a6 000000a6 000000a6 000000a6     ................

20002b90 <LineBufSize>:
20002b90:	00000288 00000288 00000288 00000288     ................

20002ba0 <LayerNumPin>:
20002ba0:	08080808                                ....

20002ba4 <pScreen>:
20002ba4:	2001cb34                                4.. 

20002ba8 <SoundInc>:
20002ba8:	00000400                                ....

20002bac <_impure_ptr>:
20002bac:	20002bb0                                .+. 

20002bb0 <impure_data>:
20002bb0:	00000000 20002e9c 20002f04 20002f6c     ....... ./. l/. 
	...
20002c58:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20002c68:	0005deec 0000000b 00000000 00000000     ................
	...

20002fd8 <__malloc_av_>:
	...
20002fe0:	20002fd8 20002fd8 20002fe0 20002fe0     ./. ./. ./. ./. 
20002ff0:	20002fe8 20002fe8 20002ff0 20002ff0     ./. ./. ./. ./. 
20003000:	20002ff8 20002ff8 20003000 20003000     ./. ./. .0. .0. 
20003010:	20003008 20003008 20003010 20003010     .0. .0. .0. .0. 
20003020:	20003018 20003018 20003020 20003020     .0. .0.  0.  0. 
20003030:	20003028 20003028 20003030 20003030     (0. (0. 00. 00. 
20003040:	20003038 20003038 20003040 20003040     80. 80. @0. @0. 
20003050:	20003048 20003048 20003050 20003050     H0. H0. P0. P0. 
20003060:	20003058 20003058 20003060 20003060     X0. X0. `0. `0. 
20003070:	20003068 20003068 20003070 20003070     h0. h0. p0. p0. 
20003080:	20003078 20003078 20003080 20003080     x0. x0. .0. .0. 
20003090:	20003088 20003088 20003090 20003090     .0. .0. .0. .0. 
200030a0:	20003098 20003098 200030a0 200030a0     .0. .0. .0. .0. 
200030b0:	200030a8 200030a8 200030b0 200030b0     .0. .0. .0. .0. 
200030c0:	200030b8 200030b8 200030c0 200030c0     .0. .0. .0. .0. 
200030d0:	200030c8 200030c8 200030d0 200030d0     .0. .0. .0. .0. 
200030e0:	200030d8 200030d8 200030e0 200030e0     .0. .0. .0. .0. 
200030f0:	200030e8 200030e8 200030f0 200030f0     .0. .0. .0. .0. 
20003100:	200030f8 200030f8 20003100 20003100     .0. .0. .1. .1. 
20003110:	20003108 20003108 20003110 20003110     .1. .1. .1. .1. 
20003120:	20003118 20003118 20003120 20003120     .1. .1.  1.  1. 
20003130:	20003128 20003128 20003130 20003130     (1. (1. 01. 01. 
20003140:	20003138 20003138 20003140 20003140     81. 81. @1. @1. 
20003150:	20003148 20003148 20003150 20003150     H1. H1. P1. P1. 
20003160:	20003158 20003158 20003160 20003160     X1. X1. `1. `1. 
20003170:	20003168 20003168 20003170 20003170     h1. h1. p1. p1. 
20003180:	20003178 20003178 20003180 20003180     x1. x1. .1. .1. 
20003190:	20003188 20003188 20003190 20003190     .1. .1. .1. .1. 
200031a0:	20003198 20003198 200031a0 200031a0     .1. .1. .1. .1. 
200031b0:	200031a8 200031a8 200031b0 200031b0     .1. .1. .1. .1. 
200031c0:	200031b8 200031b8 200031c0 200031c0     .1. .1. .1. .1. 
200031d0:	200031c8 200031c8 200031d0 200031d0     .1. .1. .1. .1. 
200031e0:	200031d8 200031d8 200031e0 200031e0     .1. .1. .1. .1. 
200031f0:	200031e8 200031e8 200031f0 200031f0     .1. .1. .1. .1. 
20003200:	200031f8 200031f8 20003200 20003200     .1. .1. .2. .2. 
20003210:	20003208 20003208 20003210 20003210     .2. .2. .2. .2. 
20003220:	20003218 20003218 20003220 20003220     .2. .2.  2.  2. 
20003230:	20003228 20003228 20003230 20003230     (2. (2. 02. 02. 
20003240:	20003238 20003238 20003240 20003240     82. 82. @2. @2. 
20003250:	20003248 20003248 20003250 20003250     H2. H2. P2. P2. 
20003260:	20003258 20003258 20003260 20003260     X2. X2. `2. `2. 
20003270:	20003268 20003268 20003270 20003270     h2. h2. p2. p2. 
20003280:	20003278 20003278 20003280 20003280     x2. x2. .2. .2. 
20003290:	20003288 20003288 20003290 20003290     .2. .2. .2. .2. 
200032a0:	20003298 20003298 200032a0 200032a0     .2. .2. .2. .2. 
200032b0:	200032a8 200032a8 200032b0 200032b0     .2. .2. .2. .2. 
200032c0:	200032b8 200032b8 200032c0 200032c0     .2. .2. .2. .2. 
200032d0:	200032c8 200032c8 200032d0 200032d0     .2. .2. .2. .2. 
200032e0:	200032d8 200032d8 200032e0 200032e0     .2. .2. .2. .2. 
200032f0:	200032e8 200032e8 200032f0 200032f0     .2. .2. .2. .2. 
20003300:	200032f8 200032f8 20003300 20003300     .2. .2. .3. .3. 
20003310:	20003308 20003308 20003310 20003310     .3. .3. .3. .3. 
20003320:	20003318 20003318 20003320 20003320     .3. .3.  3.  3. 
20003330:	20003328 20003328 20003330 20003330     (3. (3. 03. 03. 
20003340:	20003338 20003338 20003340 20003340     83. 83. @3. @3. 
20003350:	20003348 20003348 20003350 20003350     H3. H3. P3. P3. 
20003360:	20003358 20003358 20003360 20003360     X3. X3. `3. `3. 
20003370:	20003368 20003368 20003370 20003370     h3. h3. p3. p3. 
20003380:	20003378 20003378 20003380 20003380     x3. x3. .3. .3. 
20003390:	20003388 20003388 20003390 20003390     .3. .3. .3. .3. 
200033a0:	20003398 20003398 200033a0 200033a0     .3. .3. .3. .3. 
200033b0:	200033a8 200033a8 200033b0 200033b0     .3. .3. .3. .3. 
200033c0:	200033b8 200033b8 200033c0 200033c0     .3. .3. .3. .3. 
200033d0:	200033c8 200033c8 200033d0 200033d0     .3. .3. .3. .3. 

200033e0 <__malloc_sbrk_base>:
200033e0:	ffffffff                                ....

200033e4 <__malloc_trim_threshold>:
200033e4:	00020000                                ....

200033e8 <print_mutex>:
	...

200033f0 <__mutex_array_end>:
200033f0:	100011a5 	.word	0x100011a5
200033f4:	1000030d 	.word	0x1000030d
200033f8:	10001779 	.word	0x10001779
200033fc:	10001839 	.word	0x10001839

20003400 <__frame_dummy_init_array_entry>:
20003400:	100002ed 100037c1                       .....7..
