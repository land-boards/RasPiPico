
build/program.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <__boot2_start__>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592102 	.word	0x61592102
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	7a4eb274 	.word	0x7a4eb274

Disassembly of section .text:

10000100 <__logical_binary_start>:
10000100:	20042000 	.word	0x20042000
10000104:	100001f7 	.word	0x100001f7
10000108:	100001c3 	.word	0x100001c3
1000010c:	100001c5 	.word	0x100001c5
10000110:	100001c1 	.word	0x100001c1
10000114:	100001c1 	.word	0x100001c1
10000118:	100001c1 	.word	0x100001c1
1000011c:	100001c1 	.word	0x100001c1
10000120:	100001c1 	.word	0x100001c1
10000124:	100001c1 	.word	0x100001c1
10000128:	100001c1 	.word	0x100001c1
1000012c:	100001c7 	.word	0x100001c7
10000130:	100001c1 	.word	0x100001c1
10000134:	100001c1 	.word	0x100001c1
10000138:	100001c9 	.word	0x100001c9
1000013c:	100001cb 	.word	0x100001cb
10000140:	100001cd 	.word	0x100001cd
10000144:	100001cd 	.word	0x100001cd
10000148:	100001cd 	.word	0x100001cd
1000014c:	100001cd 	.word	0x100001cd
10000150:	100001cd 	.word	0x100001cd
10000154:	100001cd 	.word	0x100001cd
10000158:	100001cd 	.word	0x100001cd
1000015c:	100001cd 	.word	0x100001cd
10000160:	100001cd 	.word	0x100001cd
10000164:	100001cd 	.word	0x100001cd
10000168:	100001cd 	.word	0x100001cd
1000016c:	100001cd 	.word	0x100001cd
10000170:	100001cd 	.word	0x100001cd
10000174:	100001cd 	.word	0x100001cd
10000178:	100001cd 	.word	0x100001cd
1000017c:	100001cd 	.word	0x100001cd
10000180:	100001cd 	.word	0x100001cd
10000184:	100001cd 	.word	0x100001cd
10000188:	100001cd 	.word	0x100001cd
1000018c:	100001cd 	.word	0x100001cd
10000190:	100001cd 	.word	0x100001cd
10000194:	100001cd 	.word	0x100001cd
10000198:	100001cd 	.word	0x100001cd
1000019c:	100001cd 	.word	0x100001cd
100001a0:	100001cd 	.word	0x100001cd
100001a4:	100001cd 	.word	0x100001cd
100001a8:	100001cd 	.word	0x100001cd
100001ac:	100001cd 	.word	0x100001cd
100001b0:	100001cd 	.word	0x100001cd
100001b4:	100001cd 	.word	0x100001cd
100001b8:	100001cd 	.word	0x100001cd
100001bc:	100001cd 	.word	0x100001cd

100001c0 <isr_invalid>:
100001c0:	be00      	bkpt	0x0000

100001c2 <isr_nmi>:
100001c2:	be00      	bkpt	0x0000

100001c4 <isr_hardfault>:
100001c4:	be00      	bkpt	0x0000

100001c6 <isr_svcall>:
100001c6:	be00      	bkpt	0x0000

100001c8 <isr_pendsv>:
100001c8:	be00      	bkpt	0x0000

100001ca <isr_systick>:
100001ca:	be00      	bkpt	0x0000

100001cc <__unhandled_user_irq>:
100001cc:	f000 f84b 	bl	10000266 <__get_current_exception>
100001d0:	3810      	subs	r0, #16

100001d2 <unhandled_user_irq_num_in_r0>:
100001d2:	be00      	bkpt	0x0000

100001d4 <binary_info_header>:
100001d4:	7188ebf2 	.word	0x7188ebf2
100001d8:	10002d5c 	.word	0x10002d5c
100001dc:	10002d78 	.word	0x10002d78
100001e0:	10000234 	.word	0x10000234
100001e4:	e71aa390 	.word	0xe71aa390

100001e8 <_entry_point>:
100001e8:	2000      	movs	r0, #0
100001ea:	4921      	ldr	r1, [pc, #132]	; (10000270 <__get_current_exception+0xa>)
100001ec:	6008      	str	r0, [r1, #0]
100001ee:	c806      	ldmia	r0!, {r1, r2}
100001f0:	f381 8808 	msr	MSP, r1
100001f4:	4710      	bx	r2

100001f6 <_reset_handler>:
100001f6:	481f      	ldr	r0, [pc, #124]	; (10000274 <__get_current_exception+0xe>)
100001f8:	6800      	ldr	r0, [r0, #0]
100001fa:	2800      	cmp	r0, #0
100001fc:	d12f      	bne.n	1000025e <hold_non_core0_in_bootrom>
100001fe:	a40d      	add	r4, pc, #52	; (adr r4, 10000234 <data_cpy_table>)
10000200:	cc0e      	ldmia	r4!, {r1, r2, r3}
10000202:	2900      	cmp	r1, #0
10000204:	d002      	beq.n	1000020c <_reset_handler+0x16>
10000206:	f000 f812 	bl	1000022e <data_cpy>
1000020a:	e7f9      	b.n	10000200 <_reset_handler+0xa>
1000020c:	491a      	ldr	r1, [pc, #104]	; (10000278 <__get_current_exception+0x12>)
1000020e:	4a1b      	ldr	r2, [pc, #108]	; (1000027c <__get_current_exception+0x16>)
10000210:	2000      	movs	r0, #0
10000212:	e000      	b.n	10000216 <bss_fill_test>

10000214 <bss_fill_loop>:
10000214:	c101      	stmia	r1!, {r0}

10000216 <bss_fill_test>:
10000216:	4291      	cmp	r1, r2
10000218:	d1fc      	bne.n	10000214 <bss_fill_loop>

1000021a <platform_entry>:
1000021a:	4919      	ldr	r1, [pc, #100]	; (10000280 <__get_current_exception+0x1a>)
1000021c:	4788      	blx	r1
1000021e:	4919      	ldr	r1, [pc, #100]	; (10000284 <__get_current_exception+0x1e>)
10000220:	4788      	blx	r1
10000222:	4919      	ldr	r1, [pc, #100]	; (10000288 <__get_current_exception+0x22>)
10000224:	4788      	blx	r1
10000226:	be00      	bkpt	0x0000
10000228:	e7fd      	b.n	10000226 <platform_entry+0xc>

1000022a <data_cpy_loop>:
1000022a:	c901      	ldmia	r1!, {r0}
1000022c:	c201      	stmia	r2!, {r0}

1000022e <data_cpy>:
1000022e:	429a      	cmp	r2, r3
10000230:	d3fb      	bcc.n	1000022a <data_cpy_loop>
10000232:	4770      	bx	lr

10000234 <data_cpy_table>:
10000234:	10002d78 	.word	0x10002d78
10000238:	200000c0 	.word	0x200000c0
1000023c:	2000a080 	.word	0x2000a080
10000240:	1000cd38 	.word	0x1000cd38
10000244:	20040000 	.word	0x20040000
10000248:	20040000 	.word	0x20040000
1000024c:	1000cd38 	.word	0x1000cd38
10000250:	20041000 	.word	0x20041000
10000254:	20041000 	.word	0x20041000
10000258:	00000000 	.word	0x00000000
1000025c:	4770      	bx	lr

1000025e <hold_non_core0_in_bootrom>:
1000025e:	480b      	ldr	r0, [pc, #44]	; (1000028c <__get_current_exception+0x26>)
10000260:	f000 fade 	bl	10000820 <rom_func_lookup>
10000264:	4700      	bx	r0

10000266 <__get_current_exception>:
10000266:	f3ef 8005 	mrs	r0, IPSR
1000026a:	b2c0      	uxtb	r0, r0
1000026c:	4770      	bx	lr
1000026e:	0000      	.short	0x0000
10000270:	e000ed08 	.word	0xe000ed08
10000274:	d0000000 	.word	0xd0000000
10000278:	2000a080 	.word	0x2000a080
1000027c:	2000a458 	.word	0x2000a458
10000280:	100015fd 	.word	0x100015fd
10000284:	10002215 	.word	0x10002215
10000288:	1000171d 	.word	0x1000171d
1000028c:	00005657 	.word	0x00005657

10000290 <__bi_46>:
10000290:	50520006 5360b3ab 10002ca0              ..RP..`S.,..

1000029c <__bi_34>:
1000029c:	50520006 02031c86 10002ca8              ..RP.....,..

100002a8 <__bi_26>:
100002a8:	50520006 9da22254 10002cb0              ..RPT"...,..

100002b4 <__bi_18>:
100002b4:	50520005 68f465de 1000cd38              ..RP.e.h8...

100002c0 <_init>:
100002c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100002c2:	46c0      	nop			; (mov r8, r8)

100002c4 <__do_global_dtors_aux>:
100002c4:	b510      	push	{r4, lr}
100002c6:	4c06      	ldr	r4, [pc, #24]	; (100002e0 <__do_global_dtors_aux+0x1c>)
100002c8:	7823      	ldrb	r3, [r4, #0]
100002ca:	2b00      	cmp	r3, #0
100002cc:	d107      	bne.n	100002de <__do_global_dtors_aux+0x1a>
100002ce:	4b05      	ldr	r3, [pc, #20]	; (100002e4 <__do_global_dtors_aux+0x20>)
100002d0:	2b00      	cmp	r3, #0
100002d2:	d002      	beq.n	100002da <__do_global_dtors_aux+0x16>
100002d4:	4804      	ldr	r0, [pc, #16]	; (100002e8 <__do_global_dtors_aux+0x24>)
100002d6:	e000      	b.n	100002da <__do_global_dtors_aux+0x16>
100002d8:	bf00      	nop
100002da:	2301      	movs	r3, #1
100002dc:	7023      	strb	r3, [r4, #0]
100002de:	bd10      	pop	{r4, pc}
100002e0:	2000a280 	.word	0x2000a280
100002e4:	00000000 	.word	0x00000000
100002e8:	10002c68 	.word	0x10002c68

100002ec <frame_dummy>:
100002ec:	4b04      	ldr	r3, [pc, #16]	; (10000300 <frame_dummy+0x14>)
100002ee:	b510      	push	{r4, lr}
100002f0:	2b00      	cmp	r3, #0
100002f2:	d003      	beq.n	100002fc <frame_dummy+0x10>
100002f4:	4903      	ldr	r1, [pc, #12]	; (10000304 <frame_dummy+0x18>)
100002f6:	4804      	ldr	r0, [pc, #16]	; (10000308 <frame_dummy+0x1c>)
100002f8:	e000      	b.n	100002fc <frame_dummy+0x10>
100002fa:	bf00      	nop
100002fc:	bd10      	pop	{r4, pc}
100002fe:	46c0      	nop			; (mov r8, r8)
10000300:	00000000 	.word	0x00000000
10000304:	2000a284 	.word	0x2000a284
10000308:	10002c68 	.word	0x10002c68

1000030c <__aeabi_bits_init>:
1000030c:	4801      	ldr	r0, [pc, #4]	; (10000314 <__aeabi_bits_init+0x8>)
1000030e:	2104      	movs	r1, #4
10000310:	4b01      	ldr	r3, [pc, #4]	; (10000318 <__aeabi_bits_init+0xc>)
10000312:	4718      	bx	r3
10000314:	200002b0 	.word	0x200002b0
10000318:	10000841 	.word	0x10000841

1000031c <__wrap___aeabi_uidiv>:
1000031c:	4a13      	ldr	r2, [pc, #76]	; (1000036c <divmod_u32u32_savestate+0x20>)
1000031e:	6f93      	ldr	r3, [r2, #120]	; 0x78
10000320:	089b      	lsrs	r3, r3, #2
10000322:	d213      	bcs.n	1000034c <divmod_u32u32_savestate>

10000324 <divmod_u32u32_unsafe>:
10000324:	6610      	str	r0, [r2, #96]	; 0x60
10000326:	6651      	str	r1, [r2, #100]	; 0x64
10000328:	2900      	cmp	r1, #0
1000032a:	d005      	beq.n	10000338 <divmod_u32u32_unsafe+0x14>
1000032c:	e7ff      	b.n	1000032e <divmod_u32u32_unsafe+0xa>
1000032e:	e7ff      	b.n	10000330 <divmod_u32u32_unsafe+0xc>
10000330:	e7ff      	b.n	10000332 <divmod_u32u32_unsafe+0xe>
10000332:	6f51      	ldr	r1, [r2, #116]	; 0x74
10000334:	6f10      	ldr	r0, [r2, #112]	; 0x70
10000336:	4770      	bx	lr
10000338:	b504      	push	{r2, lr}
1000033a:	2800      	cmp	r0, #0
1000033c:	d001      	beq.n	10000342 <divmod_u32u32_unsafe+0x1e>
1000033e:	2000      	movs	r0, #0
10000340:	43c0      	mvns	r0, r0
10000342:	f002 fc71 	bl	10002c28 <____aeabi_idiv0_veneer>
10000346:	2100      	movs	r1, #0
10000348:	bd04      	pop	{r2, pc}
1000034a:	46c0      	nop			; (mov r8, r8)

1000034c <divmod_u32u32_savestate>:
1000034c:	6f93      	ldr	r3, [r2, #120]	; 0x78
1000034e:	085b      	lsrs	r3, r3, #1
10000350:	d3fd      	bcc.n	1000034e <divmod_u32u32_savestate+0x2>
10000352:	b5f0      	push	{r4, r5, r6, r7, lr}
10000354:	6e94      	ldr	r4, [r2, #104]	; 0x68
10000356:	6ed5      	ldr	r5, [r2, #108]	; 0x6c
10000358:	6f57      	ldr	r7, [r2, #116]	; 0x74
1000035a:	6f16      	ldr	r6, [r2, #112]	; 0x70
1000035c:	f7ff ffe2 	bl	10000324 <divmod_u32u32_unsafe>
10000360:	6694      	str	r4, [r2, #104]	; 0x68
10000362:	66d5      	str	r5, [r2, #108]	; 0x6c
10000364:	6757      	str	r7, [r2, #116]	; 0x74
10000366:	6716      	str	r6, [r2, #112]	; 0x70
10000368:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000036a:	0000      	.short	0x0000
1000036c:	d0000000 	.word	0xd0000000

10000370 <__wrap___aeabi_ldivmod>:
10000370:	4694      	mov	ip, r2
10000372:	4a4e      	ldr	r2, [pc, #312]	; (100004ac <udiv0+0x1a>)
10000374:	6f92      	ldr	r2, [r2, #120]	; 0x78
10000376:	0892      	lsrs	r2, r2, #2
10000378:	4662      	mov	r2, ip
1000037a:	d201      	bcs.n	10000380 <divmod_s64s64_savestate>
1000037c:	e030      	b.n	100003e0 <divmod_s64s64_unsafe>
1000037e:	46c0      	nop			; (mov r8, r8)

10000380 <divmod_s64s64_savestate>:
10000380:	b5f0      	push	{r4, r5, r6, r7, lr}
10000382:	4e4a      	ldr	r6, [pc, #296]	; (100004ac <udiv0+0x1a>)
10000384:	6fb5      	ldr	r5, [r6, #120]	; 0x78
10000386:	086d      	lsrs	r5, r5, #1
10000388:	d3fc      	bcc.n	10000384 <divmod_s64s64_savestate+0x4>
1000038a:	6e34      	ldr	r4, [r6, #96]	; 0x60
1000038c:	6e75      	ldr	r5, [r6, #100]	; 0x64
1000038e:	6f77      	ldr	r7, [r6, #116]	; 0x74
10000390:	6f36      	ldr	r6, [r6, #112]	; 0x70
10000392:	f000 f825 	bl	100003e0 <divmod_s64s64_unsafe>
10000396:	4694      	mov	ip, r2
10000398:	4a44      	ldr	r2, [pc, #272]	; (100004ac <udiv0+0x1a>)
1000039a:	6614      	str	r4, [r2, #96]	; 0x60
1000039c:	6655      	str	r5, [r2, #100]	; 0x64
1000039e:	6757      	str	r7, [r2, #116]	; 0x74
100003a0:	6716      	str	r6, [r2, #112]	; 0x70
100003a2:	4662      	mov	r2, ip
100003a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100003a6:	46c0      	nop			; (mov r8, r8)

100003a8 <__wrap___aeabi_uldivmod>:
100003a8:	4694      	mov	ip, r2
100003aa:	4a40      	ldr	r2, [pc, #256]	; (100004ac <udiv0+0x1a>)
100003ac:	6f92      	ldr	r2, [r2, #120]	; 0x78
100003ae:	0892      	lsrs	r2, r2, #2
100003b0:	4662      	mov	r2, ip
100003b2:	d201      	bcs.n	100003b8 <divmod_u64u64_savestate>
100003b4:	e058      	b.n	10000468 <divmod_u64u64_unsafe>
100003b6:	46c0      	nop			; (mov r8, r8)

100003b8 <divmod_u64u64_savestate>:
100003b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100003ba:	4e3c      	ldr	r6, [pc, #240]	; (100004ac <udiv0+0x1a>)
100003bc:	6fb5      	ldr	r5, [r6, #120]	; 0x78
100003be:	086d      	lsrs	r5, r5, #1
100003c0:	d3fc      	bcc.n	100003bc <divmod_u64u64_savestate+0x4>
100003c2:	6e34      	ldr	r4, [r6, #96]	; 0x60
100003c4:	6e75      	ldr	r5, [r6, #100]	; 0x64
100003c6:	6f77      	ldr	r7, [r6, #116]	; 0x74
100003c8:	6f36      	ldr	r6, [r6, #112]	; 0x70
100003ca:	f000 f84d 	bl	10000468 <divmod_u64u64_unsafe>
100003ce:	4694      	mov	ip, r2
100003d0:	4a36      	ldr	r2, [pc, #216]	; (100004ac <udiv0+0x1a>)
100003d2:	6614      	str	r4, [r2, #96]	; 0x60
100003d4:	6655      	str	r5, [r2, #100]	; 0x64
100003d6:	6757      	str	r7, [r2, #116]	; 0x74
100003d8:	6716      	str	r6, [r2, #112]	; 0x70
100003da:	4662      	mov	r2, ip
100003dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100003de:	46c0      	nop			; (mov r8, r8)

100003e0 <divmod_s64s64_unsafe>:
100003e0:	2b00      	cmp	r3, #0
100003e2:	db24      	blt.n	1000042e <l41_1+0x26>
100003e4:	d011      	beq.n	1000040a <l41_1+0x2>
100003e6:	2900      	cmp	r1, #0
100003e8:	da3e      	bge.n	10000468 <divmod_u64u64_unsafe>
100003ea:	b500      	push	{lr}
100003ec:	43c9      	mvns	r1, r1
100003ee:	4240      	negs	r0, r0
100003f0:	d100      	bne.n	100003f4 <l39_1>
100003f2:	3101      	adds	r1, #1

100003f4 <l39_1>:
100003f4:	f000 f838 	bl	10000468 <divmod_u64u64_unsafe>
100003f8:	43c9      	mvns	r1, r1
100003fa:	4240      	negs	r0, r0
100003fc:	d100      	bne.n	10000400 <l40_1>
100003fe:	3101      	adds	r1, #1

10000400 <l40_1>:
10000400:	43db      	mvns	r3, r3
10000402:	4252      	negs	r2, r2
10000404:	d100      	bne.n	10000408 <l41_1>
10000406:	3301      	adds	r3, #1

10000408 <l41_1>:
10000408:	bd00      	pop	{pc}
1000040a:	2a00      	cmp	r2, #0
1000040c:	d1eb      	bne.n	100003e6 <divmod_s64s64_unsafe+0x6>
1000040e:	2800      	cmp	r0, #0
10000410:	d101      	bne.n	10000416 <l41_1+0xe>
10000412:	2900      	cmp	r1, #0
10000414:	d005      	beq.n	10000422 <l41_1+0x1a>
10000416:	2000      	movs	r0, #0
10000418:	0fc9      	lsrs	r1, r1, #31
1000041a:	07c9      	lsls	r1, r1, #31
1000041c:	d101      	bne.n	10000422 <l41_1+0x1a>
1000041e:	43c0      	mvns	r0, r0
10000420:	0841      	lsrs	r1, r0, #1
10000422:	b500      	push	{lr}
10000424:	f002 fbf8 	bl	10002c18 <____aeabi_ldiv0_veneer>
10000428:	2200      	movs	r2, #0
1000042a:	2300      	movs	r3, #0
1000042c:	bd00      	pop	{pc}
1000042e:	b500      	push	{lr}
10000430:	2900      	cmp	r1, #0
10000432:	db0a      	blt.n	1000044a <l43_1+0x2>
10000434:	43db      	mvns	r3, r3
10000436:	4252      	negs	r2, r2
10000438:	d100      	bne.n	1000043c <l42_1>
1000043a:	3301      	adds	r3, #1

1000043c <l42_1>:
1000043c:	f000 f814 	bl	10000468 <divmod_u64u64_unsafe>
10000440:	43c9      	mvns	r1, r1
10000442:	4240      	negs	r0, r0
10000444:	d100      	bne.n	10000448 <l43_1>
10000446:	3101      	adds	r1, #1

10000448 <l43_1>:
10000448:	bd00      	pop	{pc}
1000044a:	43c9      	mvns	r1, r1
1000044c:	4240      	negs	r0, r0
1000044e:	d100      	bne.n	10000452 <l44_1>
10000450:	3101      	adds	r1, #1

10000452 <l44_1>:
10000452:	43db      	mvns	r3, r3
10000454:	4252      	negs	r2, r2
10000456:	d100      	bne.n	1000045a <l45_1>
10000458:	3301      	adds	r3, #1

1000045a <l45_1>:
1000045a:	f000 f805 	bl	10000468 <divmod_u64u64_unsafe>
1000045e:	43db      	mvns	r3, r3
10000460:	4252      	negs	r2, r2
10000462:	d100      	bne.n	10000466 <l46_1>
10000464:	3301      	adds	r3, #1

10000466 <l46_1>:
10000466:	bd00      	pop	{pc}

10000468 <divmod_u64u64_unsafe>:
10000468:	2900      	cmp	r1, #0
1000046a:	d123      	bne.n	100004b4 <y64>
1000046c:	2b00      	cmp	r3, #0
1000046e:	d118      	bne.n	100004a2 <udiv0+0x10>
10000470:	2a00      	cmp	r2, #0
10000472:	d00c      	beq.n	1000048e <divmod_u64u64_unsafe+0x26>
10000474:	46bc      	mov	ip, r7
10000476:	4f0d      	ldr	r7, [pc, #52]	; (100004ac <udiv0+0x1a>)
10000478:	6638      	str	r0, [r7, #96]	; 0x60
1000047a:	667a      	str	r2, [r7, #100]	; 0x64
1000047c:	2100      	movs	r1, #0
1000047e:	2300      	movs	r3, #0
10000480:	e7ff      	b.n	10000482 <divmod_u64u64_unsafe+0x1a>
10000482:	e7ff      	b.n	10000484 <divmod_u64u64_unsafe+0x1c>
10000484:	e7ff      	b.n	10000486 <divmod_u64u64_unsafe+0x1e>
10000486:	6f7a      	ldr	r2, [r7, #116]	; 0x74
10000488:	6f38      	ldr	r0, [r7, #112]	; 0x70
1000048a:	4667      	mov	r7, ip
1000048c:	4770      	bx	lr
1000048e:	2800      	cmp	r0, #0
10000490:	d001      	beq.n	10000496 <udiv0+0x4>

10000492 <udiv0>:
10000492:	4807      	ldr	r0, [pc, #28]	; (100004b0 <udiv0+0x1e>)
10000494:	0001      	movs	r1, r0
10000496:	b500      	push	{lr}
10000498:	f002 fbbe 	bl	10002c18 <____aeabi_ldiv0_veneer>
1000049c:	2200      	movs	r2, #0
1000049e:	2300      	movs	r3, #0
100004a0:	bd00      	pop	{pc}
100004a2:	0002      	movs	r2, r0
100004a4:	000b      	movs	r3, r1
100004a6:	2000      	movs	r0, #0
100004a8:	2100      	movs	r1, #0
100004aa:	4770      	bx	lr
100004ac:	d0000000 	.word	0xd0000000
100004b0:	ffffffff 	.word	0xffffffff

100004b4 <y64>:
100004b4:	2b00      	cmp	r3, #0
100004b6:	d000      	beq.n	100004ba <y64+0x6>
100004b8:	e0bd      	b.n	10000636 <y64_x48>
100004ba:	0c13      	lsrs	r3, r2, #16
100004bc:	d126      	bne.n	1000050c <y64_x32>
100004be:	2a00      	cmp	r2, #0
100004c0:	d0e7      	beq.n	10000492 <udiv0>
100004c2:	b480      	push	{r7}
100004c4:	4f10      	ldr	r7, [pc, #64]	; (10000508 <y64+0x54>)
100004c6:	6639      	str	r1, [r7, #96]	; 0x60
100004c8:	667a      	str	r2, [r7, #100]	; 0x64
100004ca:	e7ff      	b.n	100004cc <y64+0x18>
100004cc:	e7ff      	b.n	100004ce <y64+0x1a>
100004ce:	b430      	push	{r4, r5}
100004d0:	0c04      	lsrs	r4, r0, #16
100004d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
100004d4:	6f39      	ldr	r1, [r7, #112]	; 0x70
100004d6:	041b      	lsls	r3, r3, #16
100004d8:	4323      	orrs	r3, r4
100004da:	663b      	str	r3, [r7, #96]	; 0x60
100004dc:	e7ff      	b.n	100004de <y64+0x2a>
100004de:	e7ff      	b.n	100004e0 <y64+0x2c>
100004e0:	e7ff      	b.n	100004e2 <y64+0x2e>
100004e2:	46c0      	nop			; (mov r8, r8)
100004e4:	b284      	uxth	r4, r0
100004e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
100004e8:	6f3d      	ldr	r5, [r7, #112]	; 0x70
100004ea:	041b      	lsls	r3, r3, #16
100004ec:	4323      	orrs	r3, r4
100004ee:	663b      	str	r3, [r7, #96]	; 0x60
100004f0:	e7ff      	b.n	100004f2 <y64+0x3e>
100004f2:	e7ff      	b.n	100004f4 <y64+0x40>
100004f4:	46c0      	nop			; (mov r8, r8)
100004f6:	2300      	movs	r3, #0
100004f8:	042c      	lsls	r4, r5, #16
100004fa:	0c2d      	lsrs	r5, r5, #16
100004fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
100004fe:	6f38      	ldr	r0, [r7, #112]	; 0x70
10000500:	1900      	adds	r0, r0, r4
10000502:	4169      	adcs	r1, r5
10000504:	bcb0      	pop	{r4, r5, r7}
10000506:	4770      	bx	lr
10000508:	d0000000 	.word	0xd0000000

1000050c <y64_x32>:
1000050c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000050e:	4694      	mov	ip, r2
10000510:	2500      	movs	r5, #0
10000512:	0e14      	lsrs	r4, r2, #24
10000514:	d101      	bne.n	1000051a <y64_x32+0xe>
10000516:	0212      	lsls	r2, r2, #8
10000518:	3508      	adds	r5, #8
1000051a:	0f14      	lsrs	r4, r2, #28
1000051c:	d101      	bne.n	10000522 <y64_x32+0x16>
1000051e:	0112      	lsls	r2, r2, #4
10000520:	3504      	adds	r5, #4
10000522:	0f94      	lsrs	r4, r2, #30
10000524:	d101      	bne.n	1000052a <y64_x32+0x1e>
10000526:	0092      	lsls	r2, r2, #2
10000528:	3502      	adds	r5, #2
1000052a:	0fd4      	lsrs	r4, r2, #31
1000052c:	d101      	bne.n	10000532 <y64_x32+0x26>
1000052e:	0052      	lsls	r2, r2, #1
10000530:	3501      	adds	r5, #1
10000532:	0bd4      	lsrs	r4, r2, #15
10000534:	3401      	adds	r4, #1
10000536:	4f25      	ldr	r7, [pc, #148]	; (100005cc <y64_x32+0xc0>)
10000538:	667c      	str	r4, [r7, #100]	; 0x64
1000053a:	4c25      	ldr	r4, [pc, #148]	; (100005d0 <y64_x32+0xc4>)
1000053c:	663c      	str	r4, [r7, #96]	; 0x60
1000053e:	0c0e      	lsrs	r6, r1, #16
10000540:	b293      	uxth	r3, r2
10000542:	e7ff      	b.n	10000544 <y64_x32+0x38>
10000544:	e7ff      	b.n	10000546 <y64_x32+0x3a>
10000546:	e7ff      	b.n	10000548 <y64_x32+0x3c>
10000548:	6f3c      	ldr	r4, [r7, #112]	; 0x70
1000054a:	4366      	muls	r6, r4
1000054c:	0c36      	lsrs	r6, r6, #16
1000054e:	0377      	lsls	r7, r6, #13
10000550:	46be      	mov	lr, r7
10000552:	4373      	muls	r3, r6
10000554:	0bdf      	lsrs	r7, r3, #15
10000556:	045b      	lsls	r3, r3, #17
10000558:	1ac0      	subs	r0, r0, r3
1000055a:	41b9      	sbcs	r1, r7
1000055c:	0c13      	lsrs	r3, r2, #16
1000055e:	4373      	muls	r3, r6
10000560:	18db      	adds	r3, r3, r3
10000562:	1ac9      	subs	r1, r1, r3
10000564:	08ce      	lsrs	r6, r1, #3
10000566:	4366      	muls	r6, r4
10000568:	0c36      	lsrs	r6, r6, #16
1000056a:	44b6      	add	lr, r6
1000056c:	b293      	uxth	r3, r2
1000056e:	4373      	muls	r3, r6
10000570:	0f1f      	lsrs	r7, r3, #28
10000572:	011b      	lsls	r3, r3, #4
10000574:	1ac0      	subs	r0, r0, r3
10000576:	41b9      	sbcs	r1, r7
10000578:	0c13      	lsrs	r3, r2, #16
1000057a:	4373      	muls	r3, r6
1000057c:	0b1f      	lsrs	r7, r3, #12
1000057e:	051b      	lsls	r3, r3, #20
10000580:	1ac0      	subs	r0, r0, r3
10000582:	41b9      	sbcs	r1, r7
10000584:	0d86      	lsrs	r6, r0, #22
10000586:	028f      	lsls	r7, r1, #10
10000588:	433e      	orrs	r6, r7
1000058a:	4366      	muls	r6, r4
1000058c:	0c36      	lsrs	r6, r6, #16
1000058e:	2d09      	cmp	r5, #9
10000590:	db24      	blt.n	100005dc <last0>
10000592:	0a52      	lsrs	r2, r2, #9
10000594:	4372      	muls	r2, r6
10000596:	1a80      	subs	r0, r0, r2
10000598:	0377      	lsls	r7, r6, #13
1000059a:	0a46      	lsrs	r6, r0, #9
1000059c:	4366      	muls	r6, r4
1000059e:	0c36      	lsrs	r6, r6, #16
100005a0:	2316      	movs	r3, #22
100005a2:	1b5b      	subs	r3, r3, r5
100005a4:	40de      	lsrs	r6, r3
100005a6:	40df      	lsrs	r7, r3
100005a8:	19bf      	adds	r7, r7, r6
100005aa:	4664      	mov	r4, ip
100005ac:	4366      	muls	r6, r4
100005ae:	1b82      	subs	r2, r0, r6
100005b0:	4670      	mov	r0, lr
100005b2:	3504      	adds	r5, #4
100005b4:	3306      	adds	r3, #6
100005b6:	0001      	movs	r1, r0
100005b8:	40d9      	lsrs	r1, r3
100005ba:	40a8      	lsls	r0, r5
100005bc:	19c0      	adds	r0, r0, r7
100005be:	d300      	bcc.n	100005c2 <y64_x32+0xb6>
100005c0:	3101      	adds	r1, #1
100005c2:	42a2      	cmp	r2, r4
100005c4:	d206      	bcs.n	100005d4 <y64_x32+0xc8>
100005c6:	2300      	movs	r3, #0
100005c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100005ca:	0000      	.short	0x0000
100005cc:	d0000000 	.word	0xd0000000
100005d0:	ffffffff 	.word	0xffffffff
100005d4:	1b12      	subs	r2, r2, r4
100005d6:	3001      	adds	r0, #1
100005d8:	d3f3      	bcc.n	100005c2 <y64_x32+0xb6>
100005da:	e7f1      	b.n	100005c0 <y64_x32+0xb4>

100005dc <last0>:
100005dc:	2709      	movs	r7, #9
100005de:	1b7f      	subs	r7, r7, r5
100005e0:	40fe      	lsrs	r6, r7
100005e2:	4664      	mov	r4, ip
100005e4:	b2a2      	uxth	r2, r4
100005e6:	4372      	muls	r2, r6
100005e8:	1a80      	subs	r0, r0, r2
100005ea:	d200      	bcs.n	100005ee <last0+0x12>
100005ec:	3901      	subs	r1, #1
100005ee:	0c22      	lsrs	r2, r4, #16
100005f0:	4372      	muls	r2, r6
100005f2:	0c13      	lsrs	r3, r2, #16
100005f4:	0412      	lsls	r2, r2, #16
100005f6:	1a82      	subs	r2, r0, r2
100005f8:	4199      	sbcs	r1, r3
100005fa:	000b      	movs	r3, r1
100005fc:	4670      	mov	r0, lr
100005fe:	3504      	adds	r5, #4
10000600:	3713      	adds	r7, #19
10000602:	0001      	movs	r1, r0
10000604:	40f9      	lsrs	r1, r7
10000606:	40a8      	lsls	r0, r5
10000608:	1980      	adds	r0, r0, r6
1000060a:	d300      	bcc.n	1000060e <last0+0x32>
1000060c:	3101      	adds	r1, #1
1000060e:	2b00      	cmp	r3, #0
10000610:	d102      	bne.n	10000618 <last0+0x3c>
10000612:	42a2      	cmp	r2, r4
10000614:	d20a      	bcs.n	1000062c <last0+0x50>
10000616:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000618:	3001      	adds	r0, #1
1000061a:	d300      	bcc.n	1000061e <last0+0x42>
1000061c:	3101      	adds	r1, #1
1000061e:	1b12      	subs	r2, r2, r4
10000620:	d2fa      	bcs.n	10000618 <last0+0x3c>
10000622:	3b01      	subs	r3, #1
10000624:	d1f8      	bne.n	10000618 <last0+0x3c>
10000626:	42a2      	cmp	r2, r4
10000628:	d200      	bcs.n	1000062c <last0+0x50>
1000062a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000062c:	3001      	adds	r0, #1
1000062e:	d300      	bcc.n	10000632 <last0+0x56>
10000630:	3101      	adds	r1, #1
10000632:	1b12      	subs	r2, r2, r4
10000634:	e7f7      	b.n	10000626 <last0+0x4a>

10000636 <y64_x48>:
10000636:	b5f0      	push	{r4, r5, r6, r7, lr}
10000638:	0c1c      	lsrs	r4, r3, #16
1000063a:	d000      	beq.n	1000063e <y64_x48+0x8>
1000063c:	e080      	b.n	10000740 <y64_x64>
1000063e:	b40c      	push	{r2, r3}
10000640:	2500      	movs	r5, #0
10000642:	0a1c      	lsrs	r4, r3, #8
10000644:	d104      	bne.n	10000650 <y64_x48+0x1a>
10000646:	021b      	lsls	r3, r3, #8
10000648:	0e16      	lsrs	r6, r2, #24
1000064a:	4333      	orrs	r3, r6
1000064c:	0212      	lsls	r2, r2, #8
1000064e:	3508      	adds	r5, #8
10000650:	0b1c      	lsrs	r4, r3, #12
10000652:	d104      	bne.n	1000065e <y64_x48+0x28>
10000654:	011b      	lsls	r3, r3, #4
10000656:	0f16      	lsrs	r6, r2, #28
10000658:	4333      	orrs	r3, r6
1000065a:	0112      	lsls	r2, r2, #4
1000065c:	3504      	adds	r5, #4
1000065e:	0b9c      	lsrs	r4, r3, #14
10000660:	d104      	bne.n	1000066c <y64_x48+0x36>
10000662:	009b      	lsls	r3, r3, #2
10000664:	0f96      	lsrs	r6, r2, #30
10000666:	4333      	orrs	r3, r6
10000668:	0092      	lsls	r2, r2, #2
1000066a:	3502      	adds	r5, #2
1000066c:	0bdc      	lsrs	r4, r3, #15
1000066e:	d102      	bne.n	10000676 <y64_x48+0x40>
10000670:	1892      	adds	r2, r2, r2
10000672:	415b      	adcs	r3, r3
10000674:	3501      	adds	r5, #1
10000676:	001c      	movs	r4, r3
10000678:	1897      	adds	r7, r2, r2
1000067a:	4164      	adcs	r4, r4
1000067c:	3401      	adds	r4, #1
1000067e:	4f46      	ldr	r7, [pc, #280]	; (10000798 <y64_x64+0x58>)
10000680:	667c      	str	r4, [r7, #100]	; 0x64
10000682:	4c46      	ldr	r4, [pc, #280]	; (1000079c <y64_x64+0x5c>)
10000684:	663c      	str	r4, [r7, #96]	; 0x60
10000686:	0c0e      	lsrs	r6, r1, #16
10000688:	e7ff      	b.n	1000068a <y64_x48+0x54>
1000068a:	e7ff      	b.n	1000068c <y64_x48+0x56>
1000068c:	e7ff      	b.n	1000068e <y64_x48+0x58>
1000068e:	46c0      	nop			; (mov r8, r8)
10000690:	6f3c      	ldr	r4, [r7, #112]	; 0x70
10000692:	4366      	muls	r6, r4
10000694:	0c36      	lsrs	r6, r6, #16
10000696:	0377      	lsls	r7, r6, #13
10000698:	46be      	mov	lr, r7
1000069a:	b297      	uxth	r7, r2
1000069c:	4377      	muls	r7, r6
1000069e:	1bc0      	subs	r0, r0, r7
100006a0:	d200      	bcs.n	100006a4 <y64_x48+0x6e>
100006a2:	3901      	subs	r1, #1
100006a4:	1bc0      	subs	r0, r0, r7
100006a6:	d200      	bcs.n	100006aa <y64_x48+0x74>
100006a8:	3901      	subs	r1, #1
100006aa:	b29f      	uxth	r7, r3
100006ac:	4377      	muls	r7, r6
100006ae:	1bc9      	subs	r1, r1, r7
100006b0:	1bc9      	subs	r1, r1, r7
100006b2:	0c17      	lsrs	r7, r2, #16
100006b4:	4377      	muls	r7, r6
100006b6:	047e      	lsls	r6, r7, #17
100006b8:	0bff      	lsrs	r7, r7, #15
100006ba:	1b80      	subs	r0, r0, r6
100006bc:	41b9      	sbcs	r1, r7
100006be:	08ce      	lsrs	r6, r1, #3
100006c0:	4366      	muls	r6, r4
100006c2:	0c36      	lsrs	r6, r6, #16
100006c4:	2d0c      	cmp	r5, #12
100006c6:	db33      	blt.n	10000730 <last1>
100006c8:	44b6      	add	lr, r6
100006ca:	0b12      	lsrs	r2, r2, #12
100006cc:	051f      	lsls	r7, r3, #20
100006ce:	433a      	orrs	r2, r7
100006d0:	0b1b      	lsrs	r3, r3, #12
100006d2:	b297      	uxth	r7, r2
100006d4:	4377      	muls	r7, r6
100006d6:	1bc0      	subs	r0, r0, r7
100006d8:	d200      	bcs.n	100006dc <y64_x48+0xa6>
100006da:	3901      	subs	r1, #1
100006dc:	b29f      	uxth	r7, r3
100006de:	4377      	muls	r7, r6
100006e0:	1bc9      	subs	r1, r1, r7
100006e2:	0c17      	lsrs	r7, r2, #16
100006e4:	4377      	muls	r7, r6
100006e6:	043e      	lsls	r6, r7, #16
100006e8:	0c3f      	lsrs	r7, r7, #16
100006ea:	1b80      	subs	r0, r0, r6
100006ec:	41b9      	sbcs	r1, r7
100006ee:	0d86      	lsrs	r6, r0, #22
100006f0:	028f      	lsls	r7, r1, #10
100006f2:	433e      	orrs	r6, r7
100006f4:	4366      	muls	r6, r4
100006f6:	2729      	movs	r7, #41	; 0x29
100006f8:	1b7f      	subs	r7, r7, r5
100006fa:	40fe      	lsrs	r6, r7
100006fc:	3d0c      	subs	r5, #12
100006fe:	4677      	mov	r7, lr
10000700:	40af      	lsls	r7, r5
10000702:	19bf      	adds	r7, r7, r6
10000704:	bc30      	pop	{r4, r5}
10000706:	b2a2      	uxth	r2, r4
10000708:	b2ab      	uxth	r3, r5
1000070a:	4372      	muls	r2, r6
1000070c:	4373      	muls	r3, r6
1000070e:	1a80      	subs	r0, r0, r2
10000710:	4199      	sbcs	r1, r3
10000712:	0c22      	lsrs	r2, r4, #16
10000714:	4372      	muls	r2, r6
10000716:	0c13      	lsrs	r3, r2, #16
10000718:	0412      	lsls	r2, r2, #16
1000071a:	1a80      	subs	r0, r0, r2
1000071c:	4199      	sbcs	r1, r3
1000071e:	0002      	movs	r2, r0
10000720:	000b      	movs	r3, r1
10000722:	3701      	adds	r7, #1
10000724:	1b00      	subs	r0, r0, r4
10000726:	41a9      	sbcs	r1, r5
10000728:	d2f9      	bcs.n	1000071e <y64_x48+0xe8>
1000072a:	1e78      	subs	r0, r7, #1
1000072c:	2100      	movs	r1, #0
1000072e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000730 <last1>:
10000730:	270c      	movs	r7, #12
10000732:	1b7f      	subs	r7, r7, r5
10000734:	40fe      	lsrs	r6, r7
10000736:	4677      	mov	r7, lr
10000738:	0b7f      	lsrs	r7, r7, #13
1000073a:	40af      	lsls	r7, r5
1000073c:	19ff      	adds	r7, r7, r7
1000073e:	e7e0      	b.n	10000702 <y64_x48+0xcc>

10000740 <y64_x64>:
10000740:	2400      	movs	r4, #0
10000742:	1c5d      	adds	r5, r3, #1
10000744:	d007      	beq.n	10000756 <y64_x64+0x16>
10000746:	4f14      	ldr	r7, [pc, #80]	; (10000798 <y64_x64+0x58>)
10000748:	667d      	str	r5, [r7, #100]	; 0x64
1000074a:	6639      	str	r1, [r7, #96]	; 0x60
1000074c:	e7ff      	b.n	1000074e <y64_x64+0xe>
1000074e:	e7ff      	b.n	10000750 <y64_x64+0x10>
10000750:	e7ff      	b.n	10000752 <y64_x64+0x12>
10000752:	e7ff      	b.n	10000754 <y64_x64+0x14>
10000754:	6f3c      	ldr	r4, [r7, #112]	; 0x70
10000756:	b295      	uxth	r5, r2
10000758:	b29e      	uxth	r6, r3
1000075a:	4365      	muls	r5, r4
1000075c:	4366      	muls	r6, r4
1000075e:	1b40      	subs	r0, r0, r5
10000760:	41b1      	sbcs	r1, r6
10000762:	0c15      	lsrs	r5, r2, #16
10000764:	0c1e      	lsrs	r6, r3, #16
10000766:	4365      	muls	r5, r4
10000768:	4366      	muls	r6, r4
1000076a:	0436      	lsls	r6, r6, #16
1000076c:	0c2f      	lsrs	r7, r5, #16
1000076e:	433e      	orrs	r6, r7
10000770:	042d      	lsls	r5, r5, #16
10000772:	1b40      	subs	r0, r0, r5
10000774:	41b1      	sbcs	r1, r6
10000776:	4299      	cmp	r1, r3
10000778:	d204      	bcs.n	10000784 <y64_x64+0x44>
1000077a:	0002      	movs	r2, r0
1000077c:	000b      	movs	r3, r1
1000077e:	0020      	movs	r0, r4
10000780:	2100      	movs	r1, #0
10000782:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000784:	d101      	bne.n	1000078a <y64_x64+0x4a>
10000786:	4290      	cmp	r0, r2
10000788:	d3f7      	bcc.n	1000077a <y64_x64+0x3a>
1000078a:	1a80      	subs	r0, r0, r2
1000078c:	4199      	sbcs	r1, r3
1000078e:	3401      	adds	r4, #1
10000790:	4299      	cmp	r1, r3
10000792:	d3f2      	bcc.n	1000077a <y64_x64+0x3a>
10000794:	e7f6      	b.n	10000784 <y64_x64+0x44>
10000796:	0000      	.short	0x0000
10000798:	d0000000 	.word	0xd0000000
1000079c:	ffffffff 	.word	0xffffffff

100007a0 <double_table_shim_on_use_helper>:
100007a0:	b507      	push	{r0, r1, r2, lr}
100007a2:	4660      	mov	r0, ip
100007a4:	8801      	ldrh	r1, [r0, #0]
100007a6:	0a0a      	lsrs	r2, r1, #8
100007a8:	3002      	adds	r0, #2
100007aa:	2adf      	cmp	r2, #223	; 0xdf
100007ac:	d1fa      	bne.n	100007a4 <double_table_shim_on_use_helper+0x4>
100007ae:	b2c9      	uxtb	r1, r1
100007b0:	0882      	lsrs	r2, r0, #2
100007b2:	d304      	bcc.n	100007be <double_table_shim_on_use_helper+0x1e>
100007b4:	8802      	ldrh	r2, [r0, #0]
100007b6:	8840      	ldrh	r0, [r0, #2]
100007b8:	0400      	lsls	r0, r0, #16
100007ba:	4310      	orrs	r0, r2
100007bc:	e000      	b.n	100007c0 <double_table_shim_on_use_helper+0x20>
100007be:	6800      	ldr	r0, [r0, #0]
100007c0:	4a01      	ldr	r2, [pc, #4]	; (100007c8 <double_table_shim_on_use_helper+0x28>)
100007c2:	5050      	str	r0, [r2, r1]
100007c4:	9003      	str	r0, [sp, #12]
100007c6:	bd07      	pop	{r0, r1, r2, pc}
100007c8:	2000a080 	.word	0x2000a080

100007cc <float_table_shim_on_use_helper>:
100007cc:	b507      	push	{r0, r1, r2, lr}
100007ce:	4660      	mov	r0, ip
100007d0:	8801      	ldrh	r1, [r0, #0]
100007d2:	0a0a      	lsrs	r2, r1, #8
100007d4:	3002      	adds	r0, #2
100007d6:	2adf      	cmp	r2, #223	; 0xdf
100007d8:	d1fa      	bne.n	100007d0 <float_table_shim_on_use_helper+0x4>
100007da:	b2c9      	uxtb	r1, r1
100007dc:	0882      	lsrs	r2, r0, #2
100007de:	d304      	bcc.n	100007ea <float_table_shim_on_use_helper+0x1e>
100007e0:	8802      	ldrh	r2, [r0, #0]
100007e2:	8840      	ldrh	r0, [r0, #2]
100007e4:	0400      	lsls	r0, r0, #16
100007e6:	4310      	orrs	r0, r2
100007e8:	e000      	b.n	100007ec <float_table_shim_on_use_helper+0x20>
100007ea:	6800      	ldr	r0, [r0, #0]
100007ec:	4a01      	ldr	r2, [pc, #4]	; (100007f4 <float_table_shim_on_use_helper+0x28>)
100007ee:	5050      	str	r0, [r2, r1]
100007f0:	9003      	str	r0, [sp, #12]
100007f2:	bd07      	pop	{r0, r1, r2, pc}
100007f4:	2000a180 	.word	0x2000a180

100007f8 <__aeabi_mem_init>:
100007f8:	4801      	ldr	r0, [pc, #4]	; (10000800 <__aeabi_mem_init+0x8>)
100007fa:	2104      	movs	r1, #4
100007fc:	4b01      	ldr	r3, [pc, #4]	; (10000804 <__aeabi_mem_init+0xc>)
100007fe:	4718      	bx	r3
10000800:	20000308 	.word	0x20000308
10000804:	10000841 	.word	0x10000841

10000808 <__wrap_memset>:
10000808:	4b01      	ldr	r3, [pc, #4]	; (10000810 <__wrap_memset+0x8>)
1000080a:	681b      	ldr	r3, [r3, #0]
1000080c:	4718      	bx	r3
1000080e:	0000      	.short	0x0000
10000810:	20000308 	.word	0x20000308

10000814 <__wrap___aeabi_memcpy>:
10000814:	4b01      	ldr	r3, [pc, #4]	; (1000081c <__wrap___aeabi_memcpy+0x8>)
10000816:	685b      	ldr	r3, [r3, #4]
10000818:	4718      	bx	r3
1000081a:	0000      	.short	0x0000
1000081c:	20000308 	.word	0x20000308

10000820 <rom_func_lookup>:
// Convert a 16 bit pointer stored at the given rom address into a 32 bit pointer
#define rom_hword_as_ptr(rom_address) (void *)(uintptr_t)(*(uint16_t *)rom_address)

void *rom_func_lookup(uint32_t code) {
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
10000820:	2314      	movs	r3, #20
void *rom_func_lookup(uint32_t code) {
10000822:	b510      	push	{r4, lr}
10000824:	0001      	movs	r1, r0
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
10000826:	8818      	ldrh	r0, [r3, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10000828:	3304      	adds	r3, #4
1000082a:	881b      	ldrh	r3, [r3, #0]
    return rom_table_lookup(func_table, code);
1000082c:	4798      	blx	r3
}
1000082e:	bd10      	pop	{r4, pc}

10000830 <rom_data_lookup>:

void *rom_data_lookup(uint32_t code) {
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
    uint16_t *data_table = (uint16_t *) rom_hword_as_ptr(0x16);
10000830:	2316      	movs	r3, #22
void *rom_data_lookup(uint32_t code) {
10000832:	b510      	push	{r4, lr}
10000834:	0001      	movs	r1, r0
    uint16_t *data_table = (uint16_t *) rom_hword_as_ptr(0x16);
10000836:	8818      	ldrh	r0, [r3, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10000838:	3302      	adds	r3, #2
1000083a:	881b      	ldrh	r3, [r3, #0]
    return rom_table_lookup(data_table, code);
1000083c:	4798      	blx	r3
}
1000083e:	bd10      	pop	{r4, pc}

10000840 <rom_funcs_lookup>:
/// \end::table_lookup[]

bool rom_funcs_lookup(uint32_t *table, unsigned int count) {
10000840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10000842:	4647      	mov	r7, r8
10000844:	46ce      	mov	lr, r9
10000846:	b580      	push	{r7, lr}
10000848:	1e0f      	subs	r7, r1, #0
    bool ok = true;
    for (unsigned int i = 0; i < count; i++) {
1000084a:	d019      	beq.n	10000880 <rom_funcs_lookup+0x40>
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
1000084c:	2314      	movs	r3, #20
1000084e:	4699      	mov	r9, r3
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10000850:	3304      	adds	r3, #4
10000852:	0004      	movs	r4, r0
    for (unsigned int i = 0; i < count; i++) {
10000854:	2500      	movs	r5, #0
    bool ok = true;
10000856:	2601      	movs	r6, #1
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10000858:	4698      	mov	r8, r3
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
1000085a:	464b      	mov	r3, r9
1000085c:	8818      	ldrh	r0, [r3, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
1000085e:	4643      	mov	r3, r8
    return rom_table_lookup(func_table, code);
10000860:	6821      	ldr	r1, [r4, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10000862:	881b      	ldrh	r3, [r3, #0]
    return rom_table_lookup(func_table, code);
10000864:	4798      	blx	r3
        table[i] = (uintptr_t) rom_func_lookup(table[i]);
10000866:	c401      	stmia	r4!, {r0}
        if (!table[i]) ok = false;
10000868:	1e43      	subs	r3, r0, #1
1000086a:	4198      	sbcs	r0, r3
    for (unsigned int i = 0; i < count; i++) {
1000086c:	3501      	adds	r5, #1
        if (!table[i]) ok = false;
1000086e:	4240      	negs	r0, r0
10000870:	4006      	ands	r6, r0
    for (unsigned int i = 0; i < count; i++) {
10000872:	42af      	cmp	r7, r5
10000874:	d1f1      	bne.n	1000085a <rom_funcs_lookup+0x1a>
    }
    return ok;
}
10000876:	0030      	movs	r0, r6
10000878:	bcc0      	pop	{r6, r7}
1000087a:	46b9      	mov	r9, r7
1000087c:	46b0      	mov	r8, r6
1000087e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool ok = true;
10000880:	2601      	movs	r6, #1
10000882:	e7f8      	b.n	10000876 <rom_funcs_lookup+0x36>

10000884 <hw_claim_or_assert>:
    }
    hw_claim_unlock(save);
    return rc;
}

void hw_claim_or_assert(uint8_t *bits, uint bit_index, const char *message) {
10000884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10000886:	46ce      	mov	lr, r9
10000888:	4647      	mov	r7, r8
1000088a:	4691      	mov	r9, r2
1000088c:	b580      	push	{r7, lr}
 *
 * \return The prior interrupt enable status for restoration later via restore_interrupts()
 */
inline static uint32_t save_and_disable_interrupts() {
    uint32_t status;
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
1000088e:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10000892:	b672      	cpsid	i
 */
inline static void spin_lock_unsafe_blocking(spin_lock_t *lock) {
    // Note we don't do a wfe or anything, because by convention these spin_locks are VERY SHORT LIVED and NEVER BLOCK and run
    // with INTERRUPTS disabled (to ensure that)... therefore nothing on our core could be blocking us, so we just need to wait on another core
    // anyway which should be finished soon
    while (__builtin_expect(!*lock, 0));
10000894:	4d10      	ldr	r5, [pc, #64]	; (100008d8 <hw_claim_or_assert+0x54>)
10000896:	682b      	ldr	r3, [r5, #0]
10000898:	2b00      	cmp	r3, #0
1000089a:	d0fc      	beq.n	10000896 <hw_claim_or_assert+0x12>
    __asm volatile ("dmb");
1000089c:	f3bf 8f5f 	dmb	sy
    uint32_t save = hw_claim_lock();
    if (bits[bit_index >> 3u] & (1u << (bit_index & 7u))) {
100008a0:	08cb      	lsrs	r3, r1, #3
100008a2:	5cc4      	ldrb	r4, [r0, r3]
100008a4:	18c7      	adds	r7, r0, r3
100008a6:	2007      	movs	r0, #7
100008a8:	0026      	movs	r6, r4
100008aa:	2301      	movs	r3, #1
100008ac:	4008      	ands	r0, r1
100008ae:	40c6      	lsrs	r6, r0
100008b0:	001a      	movs	r2, r3
100008b2:	4032      	ands	r2, r6
100008b4:	4233      	tst	r3, r6
100008b6:	d10b      	bne.n	100008d0 <hw_claim_or_assert+0x4c>
        panic(message, bit_index);
    } else {
        bits[bit_index >> 3u] |= (1u << (bit_index & 7u));
100008b8:	4083      	lsls	r3, r0
100008ba:	4323      	orrs	r3, r4
100008bc:	703b      	strb	r3, [r7, #0]
100008be:	f3bf 8f5f 	dmb	sy
 *
 * \param lock Spinlock instance
 */
inline static void spin_unlock_unsafe(spin_lock_t *lock) {
    __mem_fence_release();
    *lock = 0;
100008c2:	602a      	str	r2, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100008c4:	f38c 8810 	msr	PRIMASK, ip
    }
    hw_claim_unlock(save);
}
100008c8:	bcc0      	pop	{r6, r7}
100008ca:	46b9      	mov	r9, r7
100008cc:	46b0      	mov	r8, r6
100008ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        panic(message, bit_index);
100008d0:	4648      	mov	r0, r9
100008d2:	f000 ff25 	bl	10001720 <panic>
100008d6:	46c0      	nop			; (mov r8, r8)
100008d8:	d000012c 	.word	0xd000012c

100008dc <clock_configure>:
    hw_clear_bits(&clock->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clk_index] = 0;
}

/// \tag::clock_configure[]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
100008dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100008de:	464f      	mov	r7, r9
100008e0:	4646      	mov	r6, r8
100008e2:	46d6      	mov	lr, sl
100008e4:	b5c0      	push	{r6, r7, lr}
100008e6:	0017      	movs	r7, r2
    uint32_t div;

    assert(src_freq >= freq);

    if (freq > src_freq)
100008e8:	9a08      	ldr	r2, [sp, #32]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
100008ea:	0005      	movs	r5, r0
100008ec:	4688      	mov	r8, r1
    if (freq > src_freq)
100008ee:	429a      	cmp	r2, r3
100008f0:	d865      	bhi.n	100009be <clock_configure+0xe2>
        return false;

    // Div register is 24.8 int.frac divider so multiply by 2^8 (left shift by 8)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
100008f2:	0e19      	lsrs	r1, r3, #24
100008f4:	0218      	lsls	r0, r3, #8
100008f6:	2300      	movs	r3, #0
100008f8:	f7ff fd56 	bl	100003a8 <__wrap___aeabi_uldivmod>

    clock_hw_t *clock = &clocks_hw->clk[clk_index];
100008fc:	4b31      	ldr	r3, [pc, #196]	; (100009c4 <clock_configure+0xe8>)
100008fe:	006c      	lsls	r4, r5, #1
10000900:	469c      	mov	ip, r3
10000902:	1964      	adds	r4, r4, r5
10000904:	00a4      	lsls	r4, r4, #2
10000906:	4464      	add	r4, ip

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock->div)
10000908:	6863      	ldr	r3, [r4, #4]
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
1000090a:	4681      	mov	r9, r0
    if (div > clock->div)
1000090c:	4298      	cmp	r0, r3
1000090e:	d900      	bls.n	10000912 <clock_configure+0x36>
        clock->div = div;
10000910:	6060      	str	r0, [r4, #4]
    return clk_index == clk_sys || clk_index == clk_ref;
10000912:	1f2b      	subs	r3, r5, #4
10000914:	b2db      	uxtb	r3, r3
10000916:	469a      	mov	sl, r3

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10000918:	2b01      	cmp	r3, #1
1000091a:	d92c      	bls.n	10000976 <clock_configure+0x9a>
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000091c:	23c0      	movs	r3, #192	; 0xc0
1000091e:	2280      	movs	r2, #128	; 0x80
    // If no glitchless mux, cleanly stop the clock to avoid glitches
    // propagating when changing aux mux. Note it would be a really bad idea
    // to do this on one of the glitchless clocks (clk_sys, clk_ref).
    else {
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_GPOUT0_CTRL_ENABLE_BITS);
        if (configured_freq[clk_index] > 0) {
10000920:	4e29      	ldr	r6, [pc, #164]	; (100009c8 <clock_configure+0xec>)
10000922:	00ad      	lsls	r5, r5, #2
10000924:	019b      	lsls	r3, r3, #6
10000926:	5971      	ldr	r1, [r6, r5]
10000928:	4323      	orrs	r3, r4
1000092a:	0112      	lsls	r2, r2, #4
1000092c:	601a      	str	r2, [r3, #0]
1000092e:	2900      	cmp	r1, #0
10000930:	d005      	beq.n	1000093e <clock_configure+0x62>
            // Delay for 3 cycles of the target clock, for ENABLE propagation.
            // Note XOSC_COUNT is not helpful here because XOSC is not
            // necessarily running, nor is timer... so, 3 cycles per loop:
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10000932:	6970      	ldr	r0, [r6, #20]
10000934:	f7ff fcf2 	bl	1000031c <__wrap___aeabi_uidiv>
10000938:	3001      	adds	r0, #1
            asm volatile (
1000093a:	3801      	subs	r0, #1
1000093c:	d1fd      	bne.n	1000093a <clock_configure+0x5e>
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000093e:	6822      	ldr	r2, [r4, #0]
            );
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock->ctrl,
10000940:	017f      	lsls	r7, r7, #5
10000942:	407a      	eors	r2, r7
10000944:	27e0      	movs	r7, #224	; 0xe0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000946:	2380      	movs	r3, #128	; 0x80
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000948:	4017      	ands	r7, r2
        (auxsrc << CLOCKS_CLK_SYS_CTRL_AUXSRC_LSB),
        CLOCKS_CLK_SYS_CTRL_AUXSRC_BITS
    );

    if (has_glitchless_mux(clk_index)) {
1000094a:	4652      	mov	r2, sl
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000094c:	015b      	lsls	r3, r3, #5
1000094e:	4323      	orrs	r3, r4
10000950:	601f      	str	r7, [r3, #0]
10000952:	2a01      	cmp	r2, #1
10000954:	d926      	bls.n	100009a4 <clock_configure+0xc8>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000956:	2380      	movs	r3, #128	; 0x80
10000958:	2280      	movs	r2, #128	; 0x80
1000095a:	019b      	lsls	r3, r3, #6
1000095c:	4323      	orrs	r3, r4
1000095e:	0112      	lsls	r2, r2, #4
10000960:	601a      	str	r2, [r3, #0]

    hw_set_bits(&clock->ctrl, CLOCKS_CLK_GPOUT0_CTRL_ENABLE_BITS);

    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock->div = div;
10000962:	464b      	mov	r3, r9

    // Store the configured frequency
    configured_freq[clk_index] = freq;
10000964:	2001      	movs	r0, #1
    clock->div = div;
10000966:	6063      	str	r3, [r4, #4]
    configured_freq[clk_index] = freq;
10000968:	9b08      	ldr	r3, [sp, #32]
1000096a:	5173      	str	r3, [r6, r5]

    return true;
}
1000096c:	bce0      	pop	{r5, r6, r7}
1000096e:	46ba      	mov	sl, r7
10000970:	46b1      	mov	r9, r6
10000972:	46a8      	mov	r8, r5
10000974:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10000976:	4643      	mov	r3, r8
10000978:	2b01      	cmp	r3, #1
1000097a:	d1cf      	bne.n	1000091c <clock_configure+0x40>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000097c:	23c0      	movs	r3, #192	; 0xc0
1000097e:	2203      	movs	r2, #3
10000980:	019b      	lsls	r3, r3, #6
10000982:	4323      	orrs	r3, r4
10000984:	601a      	str	r2, [r3, #0]
        while (!(clock->selected & 1u))
10000986:	3a02      	subs	r2, #2
10000988:	68a3      	ldr	r3, [r4, #8]
1000098a:	421a      	tst	r2, r3
1000098c:	d0fc      	beq.n	10000988 <clock_configure+0xac>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000098e:	23e0      	movs	r3, #224	; 0xe0
10000990:	6822      	ldr	r2, [r4, #0]
    hw_write_masked(&clock->ctrl,
10000992:	017f      	lsls	r7, r7, #5
10000994:	4057      	eors	r7, r2
10000996:	401f      	ands	r7, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000998:	2380      	movs	r3, #128	; 0x80
1000099a:	015b      	lsls	r3, r3, #5
1000099c:	4323      	orrs	r3, r4
1000099e:	4e0a      	ldr	r6, [pc, #40]	; (100009c8 <clock_configure+0xec>)
100009a0:	601f      	str	r7, [r3, #0]
    return clk_index == clk_sys || clk_index == clk_ref;
100009a2:	00ad      	lsls	r5, r5, #2
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100009a4:	4642      	mov	r2, r8
100009a6:	6821      	ldr	r1, [r4, #0]
100009a8:	4051      	eors	r1, r2
100009aa:	2203      	movs	r2, #3
100009ac:	400a      	ands	r2, r1
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100009ae:	601a      	str	r2, [r3, #0]
        while (!(clock->selected & (1u << src)))
100009b0:	2201      	movs	r2, #1
100009b2:	4643      	mov	r3, r8
100009b4:	409a      	lsls	r2, r3
100009b6:	68a3      	ldr	r3, [r4, #8]
100009b8:	421a      	tst	r2, r3
100009ba:	d0fc      	beq.n	100009b6 <clock_configure+0xda>
100009bc:	e7cb      	b.n	10000956 <clock_configure+0x7a>
        return false;
100009be:	2000      	movs	r0, #0
100009c0:	e7d4      	b.n	1000096c <clock_configure+0x90>
100009c2:	46c0      	nop			; (mov r8, r8)
100009c4:	40008000 	.word	0x40008000
100009c8:	2000a3e4 	.word	0x2000a3e4

100009cc <clocks_init>:
/// \end::clock_configure[]

void clocks_init(void) {
100009cc:	b530      	push	{r4, r5, lr}
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
100009ce:	200c      	movs	r0, #12
void clocks_init(void) {
100009d0:	b083      	sub	sp, #12
    watchdog_start_tick(XOSC_MHZ);
100009d2:	f001 fbdb 	bl	1000218c <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
100009d6:	f000 fdbb 	bl	10001550 <running_on_fpga>
100009da:	2800      	cmp	r0, #0
100009dc:	d00e      	beq.n	100009fc <clocks_init+0x30>
        for (uint i = 0; i < CLK_COUNT; i++) {
            configured_freq[i] = 48 * MHZ;
100009de:	4b9a      	ldr	r3, [pc, #616]	; (10000c48 <clocks_init+0x27c>)
100009e0:	4a9a      	ldr	r2, [pc, #616]	; (10000c4c <clocks_init+0x280>)
100009e2:	601a      	str	r2, [r3, #0]
100009e4:	605a      	str	r2, [r3, #4]
100009e6:	609a      	str	r2, [r3, #8]
100009e8:	60da      	str	r2, [r3, #12]
100009ea:	611a      	str	r2, [r3, #16]
100009ec:	615a      	str	r2, [r3, #20]
100009ee:	619a      	str	r2, [r3, #24]
100009f0:	61da      	str	r2, [r3, #28]
100009f2:	621a      	str	r2, [r3, #32]
        }
        configured_freq[clk_rtc] = 46875;
100009f4:	4a96      	ldr	r2, [pc, #600]	; (10000c50 <clocks_init+0x284>)
100009f6:	625a      	str	r2, [r3, #36]	; 0x24
    clock_configure(clk_peri,
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * MHZ,
                    125 * MHZ);
}
100009f8:	b003      	add	sp, #12
100009fa:	bd30      	pop	{r4, r5, pc}
    clocks_hw->resus.ctrl = 0;
100009fc:	4c95      	ldr	r4, [pc, #596]	; (10000c54 <clocks_init+0x288>)
100009fe:	67a0      	str	r0, [r4, #120]	; 0x78
    xosc_init();
10000a00:	f001 fbcc 	bl	1000219c <xosc_init>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000a04:	2201      	movs	r2, #1
10000a06:	4b94      	ldr	r3, [pc, #592]	; (10000c58 <clocks_init+0x28c>)
10000a08:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_sys].selected != 0x1)
10000a0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
10000a0c:	2b01      	cmp	r3, #1
10000a0e:	d1fc      	bne.n	10000a0a <clocks_init+0x3e>
10000a10:	2203      	movs	r2, #3
10000a12:	4b92      	ldr	r3, [pc, #584]	; (10000c5c <clocks_init+0x290>)
10000a14:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_ref].selected != 0x1)
10000a16:	4a8f      	ldr	r2, [pc, #572]	; (10000c54 <clocks_init+0x288>)
10000a18:	6b93      	ldr	r3, [r2, #56]	; 0x38
10000a1a:	2b01      	cmp	r3, #1
10000a1c:	d1fc      	bne.n	10000a18 <clocks_init+0x4c>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000a1e:	22c0      	movs	r2, #192	; 0xc0
10000a20:	4b8f      	ldr	r3, [pc, #572]	; (10000c60 <clocks_init+0x294>)
10000a22:	0192      	lsls	r2, r2, #6
10000a24:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000a26:	4b8f      	ldr	r3, [pc, #572]	; (10000c64 <clocks_init+0x298>)
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
10000a28:	498f      	ldr	r1, [pc, #572]	; (10000c68 <clocks_init+0x29c>)
10000a2a:	601a      	str	r2, [r3, #0]
10000a2c:	0010      	movs	r0, r2
10000a2e:	688b      	ldr	r3, [r1, #8]
10000a30:	4398      	bics	r0, r3
10000a32:	1e03      	subs	r3, r0, #0
10000a34:	d1fa      	bne.n	10000a2c <clocks_init+0x60>
    pll_init(pll_sys, 1, 1500 * MHZ, 6, 2);
10000a36:	2402      	movs	r4, #2
10000a38:	2101      	movs	r1, #1
10000a3a:	4a8c      	ldr	r2, [pc, #560]	; (10000c6c <clocks_init+0x2a0>)
10000a3c:	488c      	ldr	r0, [pc, #560]	; (10000c70 <clocks_init+0x2a4>)
10000a3e:	3306      	adds	r3, #6
10000a40:	9400      	str	r4, [sp, #0]
10000a42:	f000 fd8d 	bl	10001560 <pll_init>
    pll_init(pll_usb, 1, 480 * MHZ, 5, 2);
10000a46:	2305      	movs	r3, #5
10000a48:	4a8a      	ldr	r2, [pc, #552]	; (10000c74 <clocks_init+0x2a8>)
10000a4a:	2101      	movs	r1, #1
10000a4c:	488a      	ldr	r0, [pc, #552]	; (10000c78 <clocks_init+0x2ac>)
10000a4e:	9400      	str	r4, [sp, #0]
10000a50:	f000 fd86 	bl	10001560 <pll_init>
    if (div > clock->div)
10000a54:	4b89      	ldr	r3, [pc, #548]	; (10000c7c <clocks_init+0x2b0>)
10000a56:	685a      	ldr	r2, [r3, #4]
10000a58:	2aff      	cmp	r2, #255	; 0xff
10000a5a:	d802      	bhi.n	10000a62 <clocks_init+0x96>
        clock->div = div;
10000a5c:	2280      	movs	r2, #128	; 0x80
10000a5e:	0052      	lsls	r2, r2, #1
10000a60:	605a      	str	r2, [r3, #4]
10000a62:	2280      	movs	r2, #128	; 0x80
        if (configured_freq[clk_index] > 0) {
10000a64:	4c78      	ldr	r4, [pc, #480]	; (10000c48 <clocks_init+0x27c>)
10000a66:	4b7d      	ldr	r3, [pc, #500]	; (10000c5c <clocks_init+0x290>)
10000a68:	6921      	ldr	r1, [r4, #16]
10000a6a:	0112      	lsls	r2, r2, #4
10000a6c:	4d83      	ldr	r5, [pc, #524]	; (10000c7c <clocks_init+0x2b0>)
10000a6e:	601a      	str	r2, [r3, #0]
10000a70:	2900      	cmp	r1, #0
10000a72:	d005      	beq.n	10000a80 <clocks_init+0xb4>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10000a74:	6960      	ldr	r0, [r4, #20]
10000a76:	f7ff fc51 	bl	1000031c <__wrap___aeabi_uidiv>
10000a7a:	3001      	adds	r0, #1
            asm volatile (
10000a7c:	3801      	subs	r0, #1
10000a7e:	d1fd      	bne.n	10000a7c <clocks_init+0xb0>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000a80:	21e0      	movs	r1, #224	; 0xe0
10000a82:	4b7e      	ldr	r3, [pc, #504]	; (10000c7c <clocks_init+0x2b0>)
10000a84:	2002      	movs	r0, #2
10000a86:	681a      	ldr	r2, [r3, #0]
10000a88:	4011      	ands	r1, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000a8a:	2280      	movs	r2, #128	; 0x80
10000a8c:	0152      	lsls	r2, r2, #5
10000a8e:	432a      	orrs	r2, r5
10000a90:	6011      	str	r1, [r2, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000a92:	6819      	ldr	r1, [r3, #0]
10000a94:	4048      	eors	r0, r1
10000a96:	2103      	movs	r1, #3
10000a98:	4001      	ands	r1, r0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000a9a:	6011      	str	r1, [r2, #0]
        while (!(clock->selected & (1u << src)))
10000a9c:	2104      	movs	r1, #4
10000a9e:	689a      	ldr	r2, [r3, #8]
10000aa0:	4211      	tst	r1, r2
10000aa2:	d0fc      	beq.n	10000a9e <clocks_init+0xd2>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000aa4:	2280      	movs	r2, #128	; 0x80
10000aa6:	2180      	movs	r1, #128	; 0x80
10000aa8:	0192      	lsls	r2, r2, #6
10000aaa:	432a      	orrs	r2, r5
10000aac:	0109      	lsls	r1, r1, #4
10000aae:	6011      	str	r1, [r2, #0]
    clock->div = div;
10000ab0:	2280      	movs	r2, #128	; 0x80
10000ab2:	0052      	lsls	r2, r2, #1
10000ab4:	605a      	str	r2, [r3, #4]
    configured_freq[clk_index] = freq;
10000ab6:	4b72      	ldr	r3, [pc, #456]	; (10000c80 <clocks_init+0x2b4>)
10000ab8:	6123      	str	r3, [r4, #16]
    if (div > clock->div)
10000aba:	4b72      	ldr	r3, [pc, #456]	; (10000c84 <clocks_init+0x2b8>)
10000abc:	6859      	ldr	r1, [r3, #4]
10000abe:	29ff      	cmp	r1, #255	; 0xff
10000ac0:	d800      	bhi.n	10000ac4 <clocks_init+0xf8>
        clock->div = div;
10000ac2:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000ac4:	2103      	movs	r1, #3
10000ac6:	4a64      	ldr	r2, [pc, #400]	; (10000c58 <clocks_init+0x28c>)
10000ac8:	4b6e      	ldr	r3, [pc, #440]	; (10000c84 <clocks_init+0x2b8>)
10000aca:	6011      	str	r1, [r2, #0]
        while (!(clock->selected & 1u))
10000acc:	3902      	subs	r1, #2
10000ace:	689a      	ldr	r2, [r3, #8]
10000ad0:	4211      	tst	r1, r2
10000ad2:	d0fc      	beq.n	10000ace <clocks_init+0x102>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000ad4:	20e0      	movs	r0, #224	; 0xe0
10000ad6:	681a      	ldr	r2, [r3, #0]
10000ad8:	4010      	ands	r0, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000ada:	2280      	movs	r2, #128	; 0x80
10000adc:	0152      	lsls	r2, r2, #5
10000ade:	431a      	orrs	r2, r3
10000ae0:	6010      	str	r0, [r2, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000ae2:	6818      	ldr	r0, [r3, #0]
10000ae4:	4048      	eors	r0, r1
10000ae6:	2103      	movs	r1, #3
10000ae8:	4001      	ands	r1, r0
        while (!(clock->selected & (1u << src)))
10000aea:	2002      	movs	r0, #2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000aec:	6011      	str	r1, [r2, #0]
10000aee:	4965      	ldr	r1, [pc, #404]	; (10000c84 <clocks_init+0x2b8>)
10000af0:	688a      	ldr	r2, [r1, #8]
10000af2:	4210      	tst	r0, r2
10000af4:	d0fc      	beq.n	10000af0 <clocks_init+0x124>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000af6:	2280      	movs	r2, #128	; 0x80
10000af8:	0192      	lsls	r2, r2, #6
10000afa:	4313      	orrs	r3, r2
10000afc:	2280      	movs	r2, #128	; 0x80
10000afe:	0112      	lsls	r2, r2, #4
10000b00:	601a      	str	r2, [r3, #0]
    clock->div = div;
10000b02:	2280      	movs	r2, #128	; 0x80
    configured_freq[clk_index] = freq;
10000b04:	4b60      	ldr	r3, [pc, #384]	; (10000c88 <clocks_init+0x2bc>)
    clock->div = div;
10000b06:	0052      	lsls	r2, r2, #1
10000b08:	604a      	str	r2, [r1, #4]
    configured_freq[clk_index] = freq;
10000b0a:	6163      	str	r3, [r4, #20]
    if (div > clock->div)
10000b0c:	4b5f      	ldr	r3, [pc, #380]	; (10000c8c <clocks_init+0x2c0>)
10000b0e:	6859      	ldr	r1, [r3, #4]
10000b10:	29ff      	cmp	r1, #255	; 0xff
10000b12:	d800      	bhi.n	10000b16 <clocks_init+0x14a>
        clock->div = div;
10000b14:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000b16:	2280      	movs	r2, #128	; 0x80
10000b18:	4b5d      	ldr	r3, [pc, #372]	; (10000c90 <clocks_init+0x2c4>)
        if (configured_freq[clk_index] > 0) {
10000b1a:	69e1      	ldr	r1, [r4, #28]
10000b1c:	0112      	lsls	r2, r2, #4
10000b1e:	4d5b      	ldr	r5, [pc, #364]	; (10000c8c <clocks_init+0x2c0>)
10000b20:	601a      	str	r2, [r3, #0]
10000b22:	2900      	cmp	r1, #0
10000b24:	d005      	beq.n	10000b32 <clocks_init+0x166>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10000b26:	6960      	ldr	r0, [r4, #20]
10000b28:	f7ff fbf8 	bl	1000031c <__wrap___aeabi_uidiv>
10000b2c:	3001      	adds	r0, #1
            asm volatile (
10000b2e:	3801      	subs	r0, #1
10000b30:	d1fd      	bne.n	10000b2e <clocks_init+0x162>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000b32:	22e0      	movs	r2, #224	; 0xe0
10000b34:	4955      	ldr	r1, [pc, #340]	; (10000c8c <clocks_init+0x2c0>)
10000b36:	680b      	ldr	r3, [r1, #0]
10000b38:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000b3a:	2380      	movs	r3, #128	; 0x80
10000b3c:	015b      	lsls	r3, r3, #5
10000b3e:	432b      	orrs	r3, r5
10000b40:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000b42:	2380      	movs	r3, #128	; 0x80
10000b44:	2280      	movs	r2, #128	; 0x80
10000b46:	019b      	lsls	r3, r3, #6
10000b48:	432b      	orrs	r3, r5
10000b4a:	0112      	lsls	r2, r2, #4
10000b4c:	601a      	str	r2, [r3, #0]
    clock->div = div;
10000b4e:	2280      	movs	r2, #128	; 0x80
    configured_freq[clk_index] = freq;
10000b50:	4b3e      	ldr	r3, [pc, #248]	; (10000c4c <clocks_init+0x280>)
    clock->div = div;
10000b52:	0052      	lsls	r2, r2, #1
10000b54:	604a      	str	r2, [r1, #4]
    configured_freq[clk_index] = freq;
10000b56:	61e3      	str	r3, [r4, #28]
    if (div > clock->div)
10000b58:	4b4e      	ldr	r3, [pc, #312]	; (10000c94 <clocks_init+0x2c8>)
10000b5a:	6859      	ldr	r1, [r3, #4]
10000b5c:	29ff      	cmp	r1, #255	; 0xff
10000b5e:	d800      	bhi.n	10000b62 <clocks_init+0x196>
        clock->div = div;
10000b60:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000b62:	2280      	movs	r2, #128	; 0x80
10000b64:	4b4c      	ldr	r3, [pc, #304]	; (10000c98 <clocks_init+0x2cc>)
        if (configured_freq[clk_index] > 0) {
10000b66:	6a21      	ldr	r1, [r4, #32]
10000b68:	0112      	lsls	r2, r2, #4
10000b6a:	4d4a      	ldr	r5, [pc, #296]	; (10000c94 <clocks_init+0x2c8>)
10000b6c:	601a      	str	r2, [r3, #0]
10000b6e:	2900      	cmp	r1, #0
10000b70:	d005      	beq.n	10000b7e <clocks_init+0x1b2>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10000b72:	6960      	ldr	r0, [r4, #20]
10000b74:	f7ff fbd2 	bl	1000031c <__wrap___aeabi_uidiv>
10000b78:	3001      	adds	r0, #1
            asm volatile (
10000b7a:	3801      	subs	r0, #1
10000b7c:	d1fd      	bne.n	10000b7a <clocks_init+0x1ae>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000b7e:	22e0      	movs	r2, #224	; 0xe0
10000b80:	4944      	ldr	r1, [pc, #272]	; (10000c94 <clocks_init+0x2c8>)
10000b82:	680b      	ldr	r3, [r1, #0]
10000b84:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000b86:	2380      	movs	r3, #128	; 0x80
10000b88:	015b      	lsls	r3, r3, #5
10000b8a:	432b      	orrs	r3, r5
10000b8c:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000b8e:	2380      	movs	r3, #128	; 0x80
10000b90:	2280      	movs	r2, #128	; 0x80
10000b92:	019b      	lsls	r3, r3, #6
10000b94:	432b      	orrs	r3, r5
10000b96:	0112      	lsls	r2, r2, #4
10000b98:	601a      	str	r2, [r3, #0]
    clock->div = div;
10000b9a:	2380      	movs	r3, #128	; 0x80
    if (div > clock->div)
10000b9c:	2280      	movs	r2, #128	; 0x80
    clock->div = div;
10000b9e:	005b      	lsls	r3, r3, #1
10000ba0:	604b      	str	r3, [r1, #4]
    configured_freq[clk_index] = freq;
10000ba2:	4b2a      	ldr	r3, [pc, #168]	; (10000c4c <clocks_init+0x280>)
    if (div > clock->div)
10000ba4:	02d2      	lsls	r2, r2, #11
    configured_freq[clk_index] = freq;
10000ba6:	6223      	str	r3, [r4, #32]
    if (div > clock->div)
10000ba8:	4b3c      	ldr	r3, [pc, #240]	; (10000c9c <clocks_init+0x2d0>)
10000baa:	6859      	ldr	r1, [r3, #4]
10000bac:	4291      	cmp	r1, r2
10000bae:	d200      	bcs.n	10000bb2 <clocks_init+0x1e6>
        clock->div = div;
10000bb0:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000bb2:	2280      	movs	r2, #128	; 0x80
10000bb4:	4b3a      	ldr	r3, [pc, #232]	; (10000ca0 <clocks_init+0x2d4>)
        if (configured_freq[clk_index] > 0) {
10000bb6:	6a61      	ldr	r1, [r4, #36]	; 0x24
10000bb8:	0112      	lsls	r2, r2, #4
10000bba:	4d38      	ldr	r5, [pc, #224]	; (10000c9c <clocks_init+0x2d0>)
10000bbc:	601a      	str	r2, [r3, #0]
10000bbe:	2900      	cmp	r1, #0
10000bc0:	d005      	beq.n	10000bce <clocks_init+0x202>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10000bc2:	6960      	ldr	r0, [r4, #20]
10000bc4:	f7ff fbaa 	bl	1000031c <__wrap___aeabi_uidiv>
10000bc8:	3001      	adds	r0, #1
            asm volatile (
10000bca:	3801      	subs	r0, #1
10000bcc:	d1fd      	bne.n	10000bca <clocks_init+0x1fe>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000bce:	22e0      	movs	r2, #224	; 0xe0
10000bd0:	4932      	ldr	r1, [pc, #200]	; (10000c9c <clocks_init+0x2d0>)
10000bd2:	680b      	ldr	r3, [r1, #0]
10000bd4:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000bd6:	2380      	movs	r3, #128	; 0x80
10000bd8:	015b      	lsls	r3, r3, #5
10000bda:	432b      	orrs	r3, r5
10000bdc:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000bde:	2380      	movs	r3, #128	; 0x80
10000be0:	2280      	movs	r2, #128	; 0x80
10000be2:	019b      	lsls	r3, r3, #6
10000be4:	432b      	orrs	r3, r5
10000be6:	0112      	lsls	r2, r2, #4
10000be8:	601a      	str	r2, [r3, #0]
    clock->div = div;
10000bea:	2380      	movs	r3, #128	; 0x80
10000bec:	02db      	lsls	r3, r3, #11
10000bee:	604b      	str	r3, [r1, #4]
    configured_freq[clk_index] = freq;
10000bf0:	4b17      	ldr	r3, [pc, #92]	; (10000c50 <clocks_init+0x284>)
10000bf2:	6263      	str	r3, [r4, #36]	; 0x24
    if (div > clock->div)
10000bf4:	4b2b      	ldr	r3, [pc, #172]	; (10000ca4 <clocks_init+0x2d8>)
10000bf6:	685a      	ldr	r2, [r3, #4]
10000bf8:	2aff      	cmp	r2, #255	; 0xff
10000bfa:	d802      	bhi.n	10000c02 <clocks_init+0x236>
        clock->div = div;
10000bfc:	2280      	movs	r2, #128	; 0x80
10000bfe:	0052      	lsls	r2, r2, #1
10000c00:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000c02:	2280      	movs	r2, #128	; 0x80
10000c04:	4b28      	ldr	r3, [pc, #160]	; (10000ca8 <clocks_init+0x2dc>)
        if (configured_freq[clk_index] > 0) {
10000c06:	69a1      	ldr	r1, [r4, #24]
10000c08:	0112      	lsls	r2, r2, #4
10000c0a:	4d26      	ldr	r5, [pc, #152]	; (10000ca4 <clocks_init+0x2d8>)
10000c0c:	601a      	str	r2, [r3, #0]
10000c0e:	2900      	cmp	r1, #0
10000c10:	d005      	beq.n	10000c1e <clocks_init+0x252>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10000c12:	6960      	ldr	r0, [r4, #20]
10000c14:	f7ff fb82 	bl	1000031c <__wrap___aeabi_uidiv>
10000c18:	3001      	adds	r0, #1
            asm volatile (
10000c1a:	3801      	subs	r0, #1
10000c1c:	d1fd      	bne.n	10000c1a <clocks_init+0x24e>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000c1e:	22e0      	movs	r2, #224	; 0xe0
10000c20:	4920      	ldr	r1, [pc, #128]	; (10000ca4 <clocks_init+0x2d8>)
10000c22:	680b      	ldr	r3, [r1, #0]
10000c24:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000c26:	2380      	movs	r3, #128	; 0x80
10000c28:	015b      	lsls	r3, r3, #5
10000c2a:	432b      	orrs	r3, r5
10000c2c:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000c2e:	2380      	movs	r3, #128	; 0x80
10000c30:	2280      	movs	r2, #128	; 0x80
10000c32:	019b      	lsls	r3, r3, #6
10000c34:	432b      	orrs	r3, r5
10000c36:	0112      	lsls	r2, r2, #4
10000c38:	601a      	str	r2, [r3, #0]
    clock->div = div;
10000c3a:	2380      	movs	r3, #128	; 0x80
10000c3c:	005b      	lsls	r3, r3, #1
10000c3e:	604b      	str	r3, [r1, #4]
    configured_freq[clk_index] = freq;
10000c40:	4b11      	ldr	r3, [pc, #68]	; (10000c88 <clocks_init+0x2bc>)
10000c42:	61a3      	str	r3, [r4, #24]
    return true;
10000c44:	e6d8      	b.n	100009f8 <clocks_init+0x2c>
10000c46:	46c0      	nop			; (mov r8, r8)
10000c48:	2000a3e4 	.word	0x2000a3e4
10000c4c:	02dc6c00 	.word	0x02dc6c00
10000c50:	0000b71b 	.word	0x0000b71b
10000c54:	40008000 	.word	0x40008000
10000c58:	4000b03c 	.word	0x4000b03c
10000c5c:	4000b030 	.word	0x4000b030
10000c60:	4000e000 	.word	0x4000e000
10000c64:	4000f000 	.word	0x4000f000
10000c68:	4000c000 	.word	0x4000c000
10000c6c:	59682f00 	.word	0x59682f00
10000c70:	40028000 	.word	0x40028000
10000c74:	1c9c3800 	.word	0x1c9c3800
10000c78:	4002c000 	.word	0x4002c000
10000c7c:	40008030 	.word	0x40008030
10000c80:	00b71b00 	.word	0x00b71b00
10000c84:	4000803c 	.word	0x4000803c
10000c88:	07735940 	.word	0x07735940
10000c8c:	40008054 	.word	0x40008054
10000c90:	4000b054 	.word	0x4000b054
10000c94:	40008060 	.word	0x40008060
10000c98:	4000b060 	.word	0x4000b060
10000c9c:	4000806c 	.word	0x4000806c
10000ca0:	4000b06c 	.word	0x4000b06c
10000ca4:	40008048 	.word	0x40008048
10000ca8:	4000b048 	.word	0x4000b048

10000cac <clock_get_hz>:

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(enum clock_index clk_index) {
    return configured_freq[clk_index];
10000cac:	4b01      	ldr	r3, [pc, #4]	; (10000cb4 <clock_get_hz+0x8>)
10000cae:	0080      	lsls	r0, r0, #2
10000cb0:	58c0      	ldr	r0, [r0, r3]
}
10000cb2:	4770      	bx	lr
10000cb4:	2000a3e4 	.word	0x2000a3e4

10000cb8 <__aeabi_double_init>:

bool running_on_fpga();
uint8_t rp2040_chip_version();

static inline uint8_t rp2040_rom_version() {
    return *(uint8_t*)0x13;
10000cb8:	2313      	movs	r3, #19
    panic("missing double function");
}
#endif
extern void double_table_shim_on_use_helper();

void __aeabi_double_init() {
10000cba:	b570      	push	{r4, r5, r6, lr}
    int rom_version = rp2040_rom_version();
10000cbc:	781d      	ldrb	r5, [r3, #0]
#if PICO_DOUBLE_SUPPORT_ROM_V1
    if (rom_version == 1) {
10000cbe:	2d01      	cmp	r5, #1
10000cc0:	d010      	beq.n	10000ce4 <__aeabi_double_init+0x2c>
        for(uint i=0;i<SF_TABLE_V2_SIZE/4;i++) {
            sd_table[i] = (uintptr_t)missing_double_func_shim;
        }
    }
#endif
    if (rom_version >= 2) {
10000cc2:	dd0b      	ble.n	10000cdc <__aeabi_double_init+0x24>
        void *rom_table = rom_data_lookup(rom_table_code('S', 'D'));
10000cc4:	4819      	ldr	r0, [pc, #100]	; (10000d2c <__aeabi_double_init+0x74>)
10000cc6:	f7ff fdb3 	bl	10000830 <rom_data_lookup>
        assert(*((uint8_t *)(((void *)rom_data_lookup(rom_table_code('S', 'F')))-2)) * 4 >= SF_TABLE_V2_SIZE);
        memcpy(&sd_table, rom_table, SF_TABLE_V2_SIZE);
10000cca:	4c19      	ldr	r4, [pc, #100]	; (10000d30 <__aeabi_double_init+0x78>)
        void *rom_table = rom_data_lookup(rom_table_code('S', 'D'));
10000ccc:	0001      	movs	r1, r0
        memcpy(&sd_table, rom_table, SF_TABLE_V2_SIZE);
10000cce:	2280      	movs	r2, #128	; 0x80
10000cd0:	0020      	movs	r0, r4
10000cd2:	f7ff fd9f 	bl	10000814 <__wrap___aeabi_memcpy>
                panic(NULL);
            }
#endif
        }
    }
    if (rom_version < 3) {
10000cd6:	2d02      	cmp	r5, #2
10000cd8:	d001      	beq.n	10000cde <__aeabi_double_init+0x26>
        // we use the unused entry for SINCOS
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
    }
}
10000cda:	bd70      	pop	{r4, r5, r6, pc}
10000cdc:	4c14      	ldr	r4, [pc, #80]	; (10000d30 <__aeabi_double_init+0x78>)
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
10000cde:	4b15      	ldr	r3, [pc, #84]	; (10000d34 <__aeabi_double_init+0x7c>)
10000ce0:	64a3      	str	r3, [r4, #72]	; 0x48
}
10000ce2:	e7fa      	b.n	10000cda <__aeabi_double_init+0x22>
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
10000ce4:	4b13      	ldr	r3, [pc, #76]	; (10000d34 <__aeabi_double_init+0x7c>)
            sd_table[i] = (uintptr_t)double_table_shim_on_use_helper;
10000ce6:	4c12      	ldr	r4, [pc, #72]	; (10000d30 <__aeabi_double_init+0x78>)
10000ce8:	6023      	str	r3, [r4, #0]
10000cea:	6063      	str	r3, [r4, #4]
10000cec:	60a3      	str	r3, [r4, #8]
10000cee:	60e3      	str	r3, [r4, #12]
10000cf0:	6123      	str	r3, [r4, #16]
10000cf2:	6163      	str	r3, [r4, #20]
10000cf4:	61a3      	str	r3, [r4, #24]
10000cf6:	61e3      	str	r3, [r4, #28]
10000cf8:	6223      	str	r3, [r4, #32]
10000cfa:	6263      	str	r3, [r4, #36]	; 0x24
10000cfc:	62a3      	str	r3, [r4, #40]	; 0x28
10000cfe:	62e3      	str	r3, [r4, #44]	; 0x2c
10000d00:	6323      	str	r3, [r4, #48]	; 0x30
10000d02:	6363      	str	r3, [r4, #52]	; 0x34
10000d04:	63a3      	str	r3, [r4, #56]	; 0x38
10000d06:	63e3      	str	r3, [r4, #60]	; 0x3c
10000d08:	6423      	str	r3, [r4, #64]	; 0x40
10000d0a:	6463      	str	r3, [r4, #68]	; 0x44
10000d0c:	64a3      	str	r3, [r4, #72]	; 0x48
10000d0e:	64e3      	str	r3, [r4, #76]	; 0x4c
10000d10:	6523      	str	r3, [r4, #80]	; 0x50
10000d12:	6563      	str	r3, [r4, #84]	; 0x54
10000d14:	65a3      	str	r3, [r4, #88]	; 0x58
10000d16:	65e3      	str	r3, [r4, #92]	; 0x5c
10000d18:	6623      	str	r3, [r4, #96]	; 0x60
10000d1a:	6663      	str	r3, [r4, #100]	; 0x64
10000d1c:	66a3      	str	r3, [r4, #104]	; 0x68
10000d1e:	66e3      	str	r3, [r4, #108]	; 0x6c
10000d20:	6723      	str	r3, [r4, #112]	; 0x70
10000d22:	6763      	str	r3, [r4, #116]	; 0x74
10000d24:	67a3      	str	r3, [r4, #120]	; 0x78
10000d26:	67e3      	str	r3, [r4, #124]	; 0x7c
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
10000d28:	64a3      	str	r3, [r4, #72]	; 0x48
10000d2a:	e7d6      	b.n	10000cda <__aeabi_double_init+0x22>
10000d2c:	00004453 	.word	0x00004453
10000d30:	2000a080 	.word	0x2000a080
10000d34:	100007a1 	.word	0x100007a1

10000d38 <flash_get_unique_id>:
// Use standard RUID command to get a unique identifier for the flash (and
// hence the board)

static_assert(FLASH_UNIQUE_ID_SIZE_BYTES == FLASH_RUID_DATA_BYTES, "");

void flash_get_unique_id(uint8_t *id_out) {
10000d38:	b530      	push	{r4, r5, lr}
#if PICO_NO_FLASH
    panic_unsupported();
#else
    uint8_t txbuf[FLASH_RUID_TOTAL_BYTES] = {0};
10000d3a:	2500      	movs	r5, #0
void flash_get_unique_id(uint8_t *id_out) {
10000d3c:	b089      	sub	sp, #36	; 0x24
10000d3e:	0004      	movs	r4, r0
    uint8_t txbuf[FLASH_RUID_TOTAL_BYTES] = {0};
10000d40:	2209      	movs	r2, #9
10000d42:	2100      	movs	r1, #0
10000d44:	a801      	add	r0, sp, #4
10000d46:	9500      	str	r5, [sp, #0]
10000d48:	f7ff fd5e 	bl	10000808 <__wrap_memset>
    uint8_t rxbuf[FLASH_RUID_TOTAL_BYTES] = {0};
10000d4c:	2209      	movs	r2, #9
10000d4e:	2100      	movs	r1, #0
10000d50:	a805      	add	r0, sp, #20
10000d52:	9504      	str	r5, [sp, #16]
10000d54:	f7ff fd58 	bl	10000808 <__wrap_memset>
    txbuf[0] = FLASH_RUID_CMD;
10000d58:	234b      	movs	r3, #75	; 0x4b
10000d5a:	466a      	mov	r2, sp
    flash_do_cmd(txbuf, rxbuf, FLASH_RUID_TOTAL_BYTES);
10000d5c:	4668      	mov	r0, sp
    txbuf[0] = FLASH_RUID_CMD;
10000d5e:	7013      	strb	r3, [r2, #0]
    flash_do_cmd(txbuf, rxbuf, FLASH_RUID_TOTAL_BYTES);
10000d60:	a904      	add	r1, sp, #16
10000d62:	f001 ff71 	bl	10002c48 <__flash_do_cmd.constprop.0_veneer>
    for (int i = 0; i < FLASH_RUID_DATA_BYTES; i++)
        id_out[i] = rxbuf[i + 1 + FLASH_RUID_DUMMY_BYTES];
10000d66:	2115      	movs	r1, #21
10000d68:	2208      	movs	r2, #8
10000d6a:	0020      	movs	r0, r4
10000d6c:	4469      	add	r1, sp
10000d6e:	f7ff fd51 	bl	10000814 <__wrap___aeabi_memcpy>
#endif
}
10000d72:	b009      	add	sp, #36	; 0x24
10000d74:	bd30      	pop	{r4, r5, pc}
10000d76:	46c0      	nop			; (mov r8, r8)

10000d78 <__aeabi_float_init>:
10000d78:	2313      	movs	r3, #19
static __attribute__((noreturn)) void missing_float_func_shim() {
    panic("");
}
#endif

void __aeabi_float_init() {
10000d7a:	b510      	push	{r4, lr}
    int rom_version = rp2040_rom_version();
    void *rom_table = rom_data_lookup(rom_table_code('S', 'F'));
10000d7c:	4812      	ldr	r0, [pc, #72]	; (10000dc8 <__aeabi_float_init+0x50>)
    int rom_version = rp2040_rom_version();
10000d7e:	781c      	ldrb	r4, [r3, #0]
    void *rom_table = rom_data_lookup(rom_table_code('S', 'F'));
10000d80:	f7ff fd56 	bl	10000830 <rom_data_lookup>
10000d84:	0001      	movs	r1, r0
#if PICO_FLOAT_SUPPORT_ROM_V1
    if (rom_version == 1) {
10000d86:	2c01      	cmp	r4, #1
10000d88:	d00a      	beq.n	10000da0 <__aeabi_float_init+0x28>
        for(uint i=0;i<SF_TABLE_V2_SIZE/4;i++) {
            if (!sf_table[i]) sf_table[i] = (uintptr_t)missing_float_func_shim;
        }
    }
#endif
    if (rom_version >= 2) {
10000d8a:	dd03      	ble.n	10000d94 <__aeabi_float_init+0x1c>
        assert(*((uint8_t *)(rom_table-2)) * 4 >= SF_TABLE_V2_SIZE);
        memcpy(&sf_table, rom_table, SF_TABLE_V2_SIZE);
10000d8c:	2280      	movs	r2, #128	; 0x80
10000d8e:	480f      	ldr	r0, [pc, #60]	; (10000dcc <__aeabi_float_init+0x54>)
10000d90:	f7ff fd40 	bl	10000814 <__wrap___aeabi_memcpy>
    }
    sf_clz_func = rom_func_lookup(rom_table_code('L', '3'));
10000d94:	480e      	ldr	r0, [pc, #56]	; (10000dd0 <__aeabi_float_init+0x58>)
10000d96:	f7ff fd43 	bl	10000820 <rom_func_lookup>
10000d9a:	4b0e      	ldr	r3, [pc, #56]	; (10000dd4 <__aeabi_float_init+0x5c>)
10000d9c:	6018      	str	r0, [r3, #0]
}
10000d9e:	bd10      	pop	{r4, pc}
        memcpy(&sf_table, rom_table, SF_TABLE_V1_SIZE);
10000da0:	4c0a      	ldr	r4, [pc, #40]	; (10000dcc <__aeabi_float_init+0x54>)
10000da2:	2254      	movs	r2, #84	; 0x54
10000da4:	0020      	movs	r0, r4
10000da6:	f7ff fd35 	bl	10000814 <__wrap___aeabi_memcpy>
            sf_table[i] = (uintptr_t)float_table_shim_on_use_helper;
10000daa:	4b0b      	ldr	r3, [pc, #44]	; (10000dd8 <__aeabi_float_init+0x60>)
10000dac:	6563      	str	r3, [r4, #84]	; 0x54
10000dae:	65a3      	str	r3, [r4, #88]	; 0x58
10000db0:	65e3      	str	r3, [r4, #92]	; 0x5c
10000db2:	6623      	str	r3, [r4, #96]	; 0x60
10000db4:	6663      	str	r3, [r4, #100]	; 0x64
10000db6:	66a3      	str	r3, [r4, #104]	; 0x68
10000db8:	66e3      	str	r3, [r4, #108]	; 0x6c
10000dba:	6723      	str	r3, [r4, #112]	; 0x70
10000dbc:	6763      	str	r3, [r4, #116]	; 0x74
10000dbe:	67a3      	str	r3, [r4, #120]	; 0x78
10000dc0:	67e3      	str	r3, [r4, #124]	; 0x7c
        sf_table[SF_TABLE_FLOAT2INT/4] = sf_table[SF_TABLE_FLOAT2FIX/4] = (uintptr_t)float_table_shim_on_use_helper;
10000dc2:	6223      	str	r3, [r4, #32]
10000dc4:	61e3      	str	r3, [r4, #28]
    if (rom_version >= 2) {
10000dc6:	e7e5      	b.n	10000d94 <__aeabi_float_init+0x1c>
10000dc8:	00004653 	.word	0x00004653
10000dcc:	2000a180 	.word	0x2000a180
10000dd0:	0000334c 	.word	0x0000334c
10000dd4:	2000a43c 	.word	0x2000a43c
10000dd8:	100007cd 	.word	0x100007cd

10000ddc <gpio_set_function>:
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, enum gpio_function fn) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    invalid_params_if(GPIO, fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&padsbank0_hw->io[gpio],
10000ddc:	4a09      	ldr	r2, [pc, #36]	; (10000e04 <gpio_set_function+0x28>)
10000dde:	0083      	lsls	r3, r0, #2
10000de0:	4694      	mov	ip, r2
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000de2:	2240      	movs	r2, #64	; 0x40
10000de4:	4463      	add	r3, ip
void gpio_set_function(uint gpio, enum gpio_function fn) {
10000de6:	b510      	push	{r4, lr}
10000de8:	681c      	ldr	r4, [r3, #0]
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
10000dea:	00c0      	lsls	r0, r0, #3
10000dec:	4062      	eors	r2, r4
10000dee:	24c0      	movs	r4, #192	; 0xc0
10000df0:	4014      	ands	r4, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000df2:	2280      	movs	r2, #128	; 0x80
10000df4:	0152      	lsls	r2, r2, #5
10000df6:	4313      	orrs	r3, r2
10000df8:	601c      	str	r4, [r3, #0]
10000dfa:	4b03      	ldr	r3, [pc, #12]	; (10000e08 <gpio_set_function+0x2c>)
10000dfc:	469c      	mov	ip, r3
10000dfe:	4460      	add	r0, ip
10000e00:	6041      	str	r1, [r0, #4]
}
10000e02:	bd10      	pop	{r4, pc}
10000e04:	4001c004 	.word	0x4001c004
10000e08:	40014000 	.word	0x40014000

10000e0c <irq_set_enabled>:
    invalid_params_if(IRQ, num >= NUM_IRQS);
}

void irq_set_enabled(uint num, bool enabled) {
    check_irq_param(num);
    irq_set_mask_enabled(1u << num, enabled);
10000e0c:	2301      	movs	r3, #1
10000e0e:	4083      	lsls	r3, r0
    check_irq_param(num);
    return 0 != ((1u << num) & *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)));
}

void irq_set_mask_enabled(uint32_t mask, bool enabled) {
    if (enabled) {
10000e10:	2900      	cmp	r1, #0
10000e12:	d004      	beq.n	10000e1e <irq_set_enabled+0x12>
        // Clear pending before enable
        // (if IRQ is actually asserted, it will immediately re-pend)
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICPR_OFFSET)) = mask;
10000e14:	4a03      	ldr	r2, [pc, #12]	; (10000e24 <irq_set_enabled+0x18>)
10000e16:	6013      	str	r3, [r2, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)) = mask;
10000e18:	4a03      	ldr	r2, [pc, #12]	; (10000e28 <irq_set_enabled+0x1c>)
10000e1a:	6013      	str	r3, [r2, #0]
}
10000e1c:	4770      	bx	lr
    } else {
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
10000e1e:	4a03      	ldr	r2, [pc, #12]	; (10000e2c <irq_set_enabled+0x20>)
10000e20:	6013      	str	r3, [r2, #0]
}
10000e22:	e7fb      	b.n	10000e1c <irq_set_enabled+0x10>
10000e24:	e000e280 	.word	0xe000e280
10000e28:	e000e100 	.word	0xe000e100
10000e2c:	e000e180 	.word	0xe000e180

10000e30 <irq_get_vtable_handler>:
    return (irq_handler_t *) scb_hw->vtor;
10000e30:	4b02      	ldr	r3, [pc, #8]	; (10000e3c <irq_get_vtable_handler+0xc>)
    return (uintptr_t)raw_handler - (uintptr_t)irq_handler_chain_slots < sizeof(irq_handler_chain_slots);
}

irq_handler_t irq_get_vtable_handler(uint num) {
    check_irq_param(num);
    return get_vtable()[16 + num];
10000e32:	3010      	adds	r0, #16
    return (irq_handler_t *) scb_hw->vtor;
10000e34:	689b      	ldr	r3, [r3, #8]
    return get_vtable()[16 + num];
10000e36:	0080      	lsls	r0, r0, #2
10000e38:	58c0      	ldr	r0, [r0, r3]
}
10000e3a:	4770      	bx	lr
10000e3c:	e000ed00 	.word	0xe000ed00

10000e40 <irq_set_exclusive_handler>:

void irq_set_exclusive_handler(uint num, irq_handler_t handler) {
10000e40:	b570      	push	{r4, r5, r6, lr}
10000e42:	000d      	movs	r5, r1
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10000e44:	f3ef 8610 	mrs	r6, PRIMASK
    __asm volatile ("cpsid i");
10000e48:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10000e4a:	4a0f      	ldr	r2, [pc, #60]	; (10000e88 <irq_set_exclusive_handler+0x48>)
10000e4c:	6813      	ldr	r3, [r2, #0]
10000e4e:	2b00      	cmp	r3, #0
10000e50:	d0fc      	beq.n	10000e4c <irq_set_exclusive_handler+0xc>
    __asm volatile ("dmb");
10000e52:	f3bf 8f5f 	dmb	sy
    return (irq_handler_t *) scb_hw->vtor;
10000e56:	4b0d      	ldr	r3, [pc, #52]	; (10000e8c <irq_set_exclusive_handler+0x4c>)
    return get_vtable()[16 + num];
10000e58:	3010      	adds	r0, #16
    return (irq_handler_t *) scb_hw->vtor;
10000e5a:	689b      	ldr	r3, [r3, #8]
    return get_vtable()[16 + num];
10000e5c:	0084      	lsls	r4, r0, #2
10000e5e:	591b      	ldr	r3, [r3, r4]
    check_irq_param(num);
#if !PICO_NO_RAM_VECTOR_TABLE
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
    uint32_t save = spin_lock_blocking(lock);
    __unused irq_handler_t current = irq_get_vtable_handler(num);
    hard_assert(current == __unhandled_user_irq || current == handler);
10000e60:	4a0b      	ldr	r2, [pc, #44]	; (10000e90 <irq_set_exclusive_handler+0x50>)
10000e62:	4293      	cmp	r3, r2
10000e64:	d003      	beq.n	10000e6e <irq_set_exclusive_handler+0x2e>
10000e66:	429d      	cmp	r5, r3
10000e68:	d001      	beq.n	10000e6e <irq_set_exclusive_handler+0x2e>

#ifdef NDEBUG
extern void hard_assertion_failure();
static inline void hard_assert(bool condition, ...) {
    if (!condition)
        hard_assertion_failure();
10000e6a:	f000 fc71 	bl	10001750 <hard_assertion_failure>
    return (irq_handler_t *) scb_hw->vtor;
10000e6e:	4b07      	ldr	r3, [pc, #28]	; (10000e8c <irq_set_exclusive_handler+0x4c>)
10000e70:	689b      	ldr	r3, [r3, #8]
    get_vtable()[16 + num] = handler;
10000e72:	511d      	str	r5, [r3, r4]
10000e74:	f3bf 8f5f 	dmb	sy
10000e78:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10000e7c:	2200      	movs	r2, #0
10000e7e:	4b02      	ldr	r3, [pc, #8]	; (10000e88 <irq_set_exclusive_handler+0x48>)
10000e80:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10000e82:	f386 8810 	msr	PRIMASK, r6
    set_raw_irq_handler_and_unlock(num, handler, save);
#else
    panic_unsupported();
#endif
}
10000e86:	bd70      	pop	{r4, r5, r6, pc}
10000e88:	d0000124 	.word	0xd0000124
10000e8c:	e000ed00 	.word	0xe000ed00
10000e90:	100001cd 	.word	0x100001cd

10000e94 <irq_remove_handler>:
    }
    set_raw_irq_handler_and_unlock(num, vtable_handler, save);
#endif
}

void irq_remove_handler(uint num, irq_handler_t handler) {
10000e94:	b5f0      	push	{r4, r5, r6, r7, lr}
10000e96:	46de      	mov	lr, fp
10000e98:	4657      	mov	r7, sl
10000e9a:	464e      	mov	r6, r9
10000e9c:	4645      	mov	r5, r8
10000e9e:	b5e0      	push	{r5, r6, r7, lr}
10000ea0:	000c      	movs	r4, r1
10000ea2:	b083      	sub	sp, #12
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10000ea4:	f3ef 8a10 	mrs	sl, PRIMASK
    __asm volatile ("cpsid i");
10000ea8:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10000eaa:	4a5e      	ldr	r2, [pc, #376]	; (10001024 <irq_remove_handler+0x190>)
10000eac:	6813      	ldr	r3, [r2, #0]
10000eae:	2b00      	cmp	r3, #0
10000eb0:	d0fc      	beq.n	10000eac <irq_remove_handler+0x18>
    __asm volatile ("dmb");
10000eb2:	f3bf 8f5f 	dmb	sy
#if !PICO_NO_RAM_VECTOR_TABLE
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
    uint32_t save = spin_lock_blocking(lock);
    irq_handler_t vtable_handler = get_vtable()[16 + num];
10000eb6:	2210      	movs	r2, #16
10000eb8:	4691      	mov	r9, r2
10000eba:	4481      	add	r9, r0
10000ebc:	464a      	mov	r2, r9
    return (irq_handler_t *) scb_hw->vtor;
10000ebe:	4b5a      	ldr	r3, [pc, #360]	; (10001028 <irq_remove_handler+0x194>)
    irq_handler_t vtable_handler = get_vtable()[16 + num];
10000ec0:	0096      	lsls	r6, r2, #2
    return (irq_handler_t *) scb_hw->vtor;
10000ec2:	689b      	ldr	r3, [r3, #8]
    irq_handler_t vtable_handler = get_vtable()[16 + num];
10000ec4:	599d      	ldr	r5, [r3, r6]
    if (vtable_handler != __unhandled_user_irq && vtable_handler != handler) {
10000ec6:	4b59      	ldr	r3, [pc, #356]	; (1000102c <irq_remove_handler+0x198>)
10000ec8:	4698      	mov	r8, r3
10000eca:	429d      	cmp	r5, r3
10000ecc:	d005      	beq.n	10000eda <irq_remove_handler+0x46>
10000ece:	42a5      	cmp	r5, r4
10000ed0:	d016      	beq.n	10000f00 <irq_remove_handler+0x6c>
    return (uintptr_t)raw_handler - (uintptr_t)irq_handler_chain_slots < sizeof(irq_handler_chain_slots);
10000ed2:	4f57      	ldr	r7, [pc, #348]	; (10001030 <irq_remove_handler+0x19c>)
10000ed4:	1beb      	subs	r3, r5, r7
#if !PICO_DISABLE_SHARED_IRQ_HANDLERS && PICO_MAX_SHARED_IRQ_HANDLERS
        if (is_shared_irq_raw_handler(vtable_handler)) {
10000ed6:	2b2f      	cmp	r3, #47	; 0x2f
10000ed8:	d914      	bls.n	10000f04 <irq_remove_handler+0x70>
    return (irq_handler_t *) scb_hw->vtor;
10000eda:	4b53      	ldr	r3, [pc, #332]	; (10001028 <irq_remove_handler+0x194>)
10000edc:	689b      	ldr	r3, [r3, #8]
    get_vtable()[16 + num] = handler;
10000ede:	519d      	str	r5, [r3, r6]
10000ee0:	f3bf 8f5f 	dmb	sy
10000ee4:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10000ee8:	2200      	movs	r2, #0
10000eea:	4b4e      	ldr	r3, [pc, #312]	; (10001024 <irq_remove_handler+0x190>)
10000eec:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10000eee:	f38a 8810 	msr	PRIMASK, sl
    }
    set_raw_irq_handler_and_unlock(num, vtable_handler, save);
#else
    panic_unsupported();
#endif
}
10000ef2:	b003      	add	sp, #12
10000ef4:	bcf0      	pop	{r4, r5, r6, r7}
10000ef6:	46bb      	mov	fp, r7
10000ef8:	46b2      	mov	sl, r6
10000efa:	46a9      	mov	r9, r5
10000efc:	46a0      	mov	r8, r4
10000efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vtable_handler = __unhandled_user_irq;
10000f00:	001d      	movs	r5, r3
10000f02:	e7ea      	b.n	10000eda <irq_remove_handler+0x46>
    return 0 != ((1u << num) & *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)));
10000f04:	2301      	movs	r3, #1
10000f06:	4083      	lsls	r3, r0
10000f08:	469b      	mov	fp, r3
10000f0a:	465a      	mov	r2, fp
10000f0c:	4b49      	ldr	r3, [pc, #292]	; (10001034 <irq_remove_handler+0x1a0>)
10000f0e:	681b      	ldr	r3, [r3, #0]
10000f10:	401a      	ands	r2, r3
10000f12:	9200      	str	r2, [sp, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
10000f14:	465a      	mov	r2, fp
10000f16:	4b48      	ldr	r3, [pc, #288]	; (10001038 <irq_remove_handler+0x1a4>)
10000f18:	601a      	str	r2, [r3, #0]
    __asm volatile ("dmb");
10000f1a:	f3bf 8f5f 	dmb	sy
            uint exception = __get_current_exception();
10000f1e:	f7ff f9a2 	bl	10000266 <__get_current_exception>
10000f22:	9001      	str	r0, [sp, #4]
            hard_assert(!exception || exception == num + 16);
10000f24:	2800      	cmp	r0, #0
10000f26:	d003      	beq.n	10000f30 <irq_remove_handler+0x9c>
10000f28:	4581      	cmp	r9, r0
10000f2a:	d001      	beq.n	10000f30 <irq_remove_handler+0x9c>
10000f2c:	f000 fc10 	bl	10001750 <hard_assertion_failure>
    return (void *) (((uintptr_t) addr) & ~0x1);
10000f30:	2301      	movs	r3, #1
10000f32:	0029      	movs	r1, r5
10000f34:	4399      	bics	r1, r3
            while (to_free_slot->handler != handler) {
10000f36:	688b      	ldr	r3, [r1, #8]
10000f38:	42a3      	cmp	r3, r4
10000f3a:	d068      	beq.n	1000100e <irq_remove_handler+0x17a>
10000f3c:	000a      	movs	r2, r1
10000f3e:	e007      	b.n	10000f50 <irq_remove_handler+0xbc>
                to_free_slot = &irq_handler_chain_slots[to_free_slot->link];
10000f40:	0043      	lsls	r3, r0, #1
10000f42:	181b      	adds	r3, r3, r0
10000f44:	009b      	lsls	r3, r3, #2
10000f46:	18fb      	adds	r3, r7, r3
            while (to_free_slot->handler != handler) {
10000f48:	6898      	ldr	r0, [r3, #8]
10000f4a:	42a0      	cmp	r0, r4
10000f4c:	d011      	beq.n	10000f72 <irq_remove_handler+0xde>
                to_free_slot = &irq_handler_chain_slots[to_free_slot->link];
10000f4e:	001a      	movs	r2, r3
                if (to_free_slot->link < 0) break;
10000f50:	2006      	movs	r0, #6
10000f52:	5610      	ldrsb	r0, [r2, r0]
10000f54:	2800      	cmp	r0, #0
10000f56:	daf3      	bge.n	10000f40 <irq_remove_handler+0xac>
    if (enabled) {
10000f58:	9b00      	ldr	r3, [sp, #0]
10000f5a:	2b00      	cmp	r3, #0
10000f5c:	d005      	beq.n	10000f6a <irq_remove_handler+0xd6>
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICPR_OFFSET)) = mask;
10000f5e:	465a      	mov	r2, fp
10000f60:	4b36      	ldr	r3, [pc, #216]	; (1000103c <irq_remove_handler+0x1a8>)
10000f62:	601a      	str	r2, [r3, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)) = mask;
10000f64:	4b33      	ldr	r3, [pc, #204]	; (10001034 <irq_remove_handler+0x1a0>)
10000f66:	601a      	str	r2, [r3, #0]
10000f68:	e7b7      	b.n	10000eda <irq_remove_handler+0x46>
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
10000f6a:	465a      	mov	r2, fp
10000f6c:	4b32      	ldr	r3, [pc, #200]	; (10001038 <irq_remove_handler+0x1a4>)
10000f6e:	601a      	str	r2, [r3, #0]
10000f70:	e7b3      	b.n	10000eda <irq_remove_handler+0x46>
                int next_slot_index = to_free_slot->link;
10000f72:	2006      	movs	r0, #6
10000f74:	5618      	ldrsb	r0, [r3, r0]
                if (next_slot_index >= 0) {
10000f76:	2800      	cmp	r0, #0
10000f78:	db21      	blt.n	10000fbe <irq_remove_handler+0x12a>
                    to_free_slot->handler = next_slot->handler;
10000f7a:	0042      	lsls	r2, r0, #1
10000f7c:	1811      	adds	r1, r2, r0
10000f7e:	0089      	lsls	r1, r1, #2
10000f80:	187c      	adds	r4, r7, r1
10000f82:	4688      	mov	r8, r1
10000f84:	68a1      	ldr	r1, [r4, #8]
10000f86:	6099      	str	r1, [r3, #8]
                    to_free_slot->priority = next_slot->priority;
10000f88:	79e1      	ldrb	r1, [r4, #7]
10000f8a:	71d9      	strb	r1, [r3, #7]
                    to_free_slot->link = next_slot->link;
10000f8c:	2106      	movs	r1, #6
10000f8e:	5661      	ldrsb	r1, [r4, r1]
10000f90:	7199      	strb	r1, [r3, #6]
                    to_free_slot->inst3 = next_slot->link >= 0 ?
10000f92:	2900      	cmp	r1, #0
10000f94:	db2b      	blt.n	10000fee <irq_remove_handler+0x15a>
    int32_t i_addr = (*inst) << 21u;
10000f96:	88a4      	ldrh	r4, [r4, #4]
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10000f98:	1af9      	subs	r1, r7, r3
    int32_t i_addr = (*inst) << 21u;
10000f9a:	0564      	lsls	r4, r4, #21
    return inst + 2 + i_addr;
10000f9c:	1524      	asrs	r4, r4, #20
10000f9e:	4444      	add	r4, r8
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10000fa0:	1909      	adds	r1, r1, r4
    return 0xe000 | (delta & 0x7ff);
10000fa2:	24e0      	movs	r4, #224	; 0xe0
10000fa4:	0509      	lsls	r1, r1, #20
10000fa6:	0d49      	lsrs	r1, r1, #21
10000fa8:	0224      	lsls	r4, r4, #8
10000faa:	4321      	orrs	r1, r4
                    to_free_slot->inst3 = next_slot->link >= 0 ?
10000fac:	8099      	strh	r1, [r3, #4]
                    next_slot->link = irq_hander_chain_free_slot_head;
10000fae:	1812      	adds	r2, r2, r0
10000fb0:	4b23      	ldr	r3, [pc, #140]	; (10001040 <irq_remove_handler+0x1ac>)
10000fb2:	0092      	lsls	r2, r2, #2
10000fb4:	18bf      	adds	r7, r7, r2
10000fb6:	781a      	ldrb	r2, [r3, #0]
                    irq_hander_chain_free_slot_head = next_slot_index;
10000fb8:	7018      	strb	r0, [r3, #0]
                    next_slot->link = irq_hander_chain_free_slot_head;
10000fba:	71ba      	strb	r2, [r7, #6]
                    irq_hander_chain_free_slot_head = next_slot_index;
10000fbc:	e7cc      	b.n	10000f58 <irq_remove_handler+0xc4>
                    if (!exception) {
10000fbe:	9801      	ldr	r0, [sp, #4]
10000fc0:	2800      	cmp	r0, #0
10000fc2:	d117      	bne.n	10000ff4 <irq_remove_handler+0x160>
                            prev_slot->link = -1;
10000fc4:	30ff      	adds	r0, #255	; 0xff
10000fc6:	7190      	strb	r0, [r2, #6]
                            prev_slot->inst3 = 0xbd00; // pop {pc}
10000fc8:	481e      	ldr	r0, [pc, #120]	; (10001044 <irq_remove_handler+0x1b0>)
10000fca:	8090      	strh	r0, [r2, #4]
                        to_free_slot->link = irq_hander_chain_free_slot_head;
10000fcc:	4a1c      	ldr	r2, [pc, #112]	; (10001040 <irq_remove_handler+0x1ac>)
            int to_free_slot_index = to_free_slot - irq_handler_chain_slots;
10000fce:	1bc9      	subs	r1, r1, r7
                        to_free_slot->link = irq_hander_chain_free_slot_head;
10000fd0:	7810      	ldrb	r0, [r2, #0]
            int to_free_slot_index = to_free_slot - irq_handler_chain_slots;
10000fd2:	1089      	asrs	r1, r1, #2
                        to_free_slot->link = irq_hander_chain_free_slot_head;
10000fd4:	7198      	strb	r0, [r3, #6]
            int to_free_slot_index = to_free_slot - irq_handler_chain_slots;
10000fd6:	008b      	lsls	r3, r1, #2
10000fd8:	185b      	adds	r3, r3, r1
10000fda:	0118      	lsls	r0, r3, #4
10000fdc:	181b      	adds	r3, r3, r0
10000fde:	0218      	lsls	r0, r3, #8
10000fe0:	181b      	adds	r3, r3, r0
10000fe2:	0418      	lsls	r0, r3, #16
10000fe4:	181b      	adds	r3, r3, r0
10000fe6:	005b      	lsls	r3, r3, #1
10000fe8:	185b      	adds	r3, r3, r1
                        irq_hander_chain_free_slot_head = to_free_slot_index;
10000fea:	7013      	strb	r3, [r2, #0]
10000fec:	e7b4      	b.n	10000f58 <irq_remove_handler+0xc4>
                    to_free_slot->inst3 = next_slot->link >= 0 ?
10000fee:	21bd      	movs	r1, #189	; 0xbd
10000ff0:	0209      	lsls	r1, r1, #8
10000ff2:	e7db      	b.n	10000fac <irq_remove_handler+0x118>
                        insert_branch_and_link(&to_free_slot->inst3, irq_handler_chain_remove_tail);
10000ff4:	4a14      	ldr	r2, [pc, #80]	; (10001048 <irq_remove_handler+0x1b4>)
    from[0] = 0xf000 | ((delta >> 11u) & 0x7ffu);
10000ff6:	4915      	ldr	r1, [pc, #84]	; (1000104c <irq_remove_handler+0x1b8>)
                        insert_branch_and_link(&to_free_slot->inst3, irq_handler_chain_remove_tail);
10000ff8:	1ad2      	subs	r2, r2, r3
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10000ffa:	3a08      	subs	r2, #8
    from[0] = 0xf000 | ((delta >> 11u) & 0x7ffu);
10000ffc:	0250      	lsls	r0, r2, #9
10000ffe:	0d40      	lsrs	r0, r0, #21
10001000:	4301      	orrs	r1, r0
10001002:	8099      	strh	r1, [r3, #4]
    from[1] = 0xf800 | (delta & 0x7ffu);
10001004:	4912      	ldr	r1, [pc, #72]	; (10001050 <irq_remove_handler+0x1bc>)
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10001006:	0852      	lsrs	r2, r2, #1
    from[1] = 0xf800 | (delta & 0x7ffu);
10001008:	430a      	orrs	r2, r1
1000100a:	80da      	strh	r2, [r3, #6]
}
1000100c:	e7a4      	b.n	10000f58 <irq_remove_handler+0xc4>
                int next_slot_index = to_free_slot->link;
1000100e:	2006      	movs	r0, #6
10001010:	5608      	ldrsb	r0, [r1, r0]
                if (next_slot_index >= 0) {
10001012:	000b      	movs	r3, r1
10001014:	2800      	cmp	r0, #0
10001016:	dab0      	bge.n	10000f7a <irq_remove_handler+0xe6>
                    if (!exception) {
10001018:	9a01      	ldr	r2, [sp, #4]
1000101a:	2a00      	cmp	r2, #0
1000101c:	d1ea      	bne.n	10000ff4 <irq_remove_handler+0x160>
                            vtable_handler = __unhandled_user_irq;
1000101e:	4645      	mov	r5, r8
10001020:	e7d4      	b.n	10000fcc <irq_remove_handler+0x138>
10001022:	46c0      	nop			; (mov r8, r8)
10001024:	d0000124 	.word	0xd0000124
10001028:	e000ed00 	.word	0xe000ed00
1000102c:	100001cd 	.word	0x100001cd
10001030:	200002c0 	.word	0x200002c0
10001034:	e000e100 	.word	0xe000e100
10001038:	e000e180 	.word	0xe000e180
1000103c:	e000e280 	.word	0xe000e280
10001040:	2000a456 	.word	0x2000a456
10001044:	ffffbd00 	.word	0xffffbd00
10001048:	200002fa 	.word	0x200002fa
1000104c:	fffff000 	.word	0xfffff000
10001050:	fffff800 	.word	0xfffff800

10001054 <irq_add_tail_to_free_list>:
}

#if !PICO_DISABLE_SHARED_IRQ_HANDLERS && PICO_MAX_SHARED_IRQ_HANDLERS
// used by irq_handler_chain.S to remove the last link in a handler chain after it executes
// note this must be called only with the last slot in a chain (and during the exception)
void irq_add_tail_to_free_list(struct irq_handler_chain_slot *slot) {
10001054:	b570      	push	{r4, r5, r6, lr}
    return (void *) (((uintptr_t) addr) | 0x1);
10001056:	2501      	movs	r5, #1
void irq_add_tail_to_free_list(struct irq_handler_chain_slot *slot) {
10001058:	0004      	movs	r4, r0
    return (void *) (((uintptr_t) addr) | 0x1);
1000105a:	4305      	orrs	r5, r0
    irq_handler_t slot_handler = (irq_handler_t) add_thumb_bit(slot);
    assert(is_shared_irq_raw_handler(slot_handler));

    int exception = __get_current_exception();
1000105c:	f7ff f903 	bl	10000266 <__get_current_exception>
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001060:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10001064:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10001066:	4a24      	ldr	r2, [pc, #144]	; (100010f8 <irq_add_tail_to_free_list+0xa4>)
10001068:	6813      	ldr	r3, [r2, #0]
1000106a:	2b00      	cmp	r3, #0
1000106c:	d0fc      	beq.n	10001068 <irq_add_tail_to_free_list+0x14>
    __asm volatile ("dmb");
1000106e:	f3bf 8f5f 	dmb	sy
    assert(exception);
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
    uint32_t save = spin_lock_blocking(lock);
    int slot_index = slot - irq_handler_chain_slots;
10001072:	4e22      	ldr	r6, [pc, #136]	; (100010fc <irq_add_tail_to_free_list+0xa8>)
    if (slot_handler == get_vtable()[exception]) {
10001074:	0080      	lsls	r0, r0, #2
    int slot_index = slot - irq_handler_chain_slots;
10001076:	1ba1      	subs	r1, r4, r6
10001078:	1089      	asrs	r1, r1, #2
1000107a:	008a      	lsls	r2, r1, #2
1000107c:	1852      	adds	r2, r2, r1
1000107e:	0113      	lsls	r3, r2, #4
10001080:	18d2      	adds	r2, r2, r3
10001082:	0213      	lsls	r3, r2, #8
10001084:	18d2      	adds	r2, r2, r3
10001086:	0413      	lsls	r3, r2, #16
10001088:	18d3      	adds	r3, r2, r3
    return (irq_handler_t *) scb_hw->vtor;
1000108a:	4a1d      	ldr	r2, [pc, #116]	; (10001100 <irq_add_tail_to_free_list+0xac>)
    int slot_index = slot - irq_handler_chain_slots;
1000108c:	005b      	lsls	r3, r3, #1
1000108e:	185b      	adds	r3, r3, r1
    return (irq_handler_t *) scb_hw->vtor;
10001090:	6891      	ldr	r1, [r2, #8]
    if (slot_handler == get_vtable()[exception]) {
10001092:	5809      	ldr	r1, [r1, r0]
10001094:	42a9      	cmp	r1, r5
10001096:	d01c      	beq.n	100010d2 <irq_add_tail_to_free_list+0x7e>
        get_vtable()[exception] = __unhandled_user_irq;
    } else {
        bool __unused found = false;
        // need to find who points at the slot and update it
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
            if (irq_handler_chain_slots[i].link == slot_index) {
10001098:	2206      	movs	r2, #6
1000109a:	56b2      	ldrsb	r2, [r6, r2]
1000109c:	429a      	cmp	r2, r3
1000109e:	d01c      	beq.n	100010da <irq_add_tail_to_free_list+0x86>
100010a0:	2212      	movs	r2, #18
100010a2:	56b2      	ldrsb	r2, [r6, r2]
100010a4:	4293      	cmp	r3, r2
100010a6:	d022      	beq.n	100010ee <irq_add_tail_to_free_list+0x9a>
100010a8:	221e      	movs	r2, #30
100010aa:	56b2      	ldrsb	r2, [r6, r2]
100010ac:	4293      	cmp	r3, r2
100010ae:	d020      	beq.n	100010f2 <irq_add_tail_to_free_list+0x9e>
100010b0:	222a      	movs	r2, #42	; 0x2a
100010b2:	56b2      	ldrsb	r2, [r6, r2]
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
100010b4:	2103      	movs	r1, #3
            if (irq_handler_chain_slots[i].link == slot_index) {
100010b6:	429a      	cmp	r2, r3
100010b8:	d010      	beq.n	100010dc <irq_add_tail_to_free_list+0x88>
            }
        }
        assert(found);
    }
    // add slot to free list
    slot->link = irq_hander_chain_free_slot_head;
100010ba:	4a12      	ldr	r2, [pc, #72]	; (10001104 <irq_add_tail_to_free_list+0xb0>)
100010bc:	7811      	ldrb	r1, [r2, #0]
    irq_hander_chain_free_slot_head = slot_index;
100010be:	7013      	strb	r3, [r2, #0]
    slot->link = irq_hander_chain_free_slot_head;
100010c0:	71a1      	strb	r1, [r4, #6]
100010c2:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100010c6:	2200      	movs	r2, #0
100010c8:	4b0b      	ldr	r3, [pc, #44]	; (100010f8 <irq_add_tail_to_free_list+0xa4>)
100010ca:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100010cc:	f38c 8810 	msr	PRIMASK, ip
    spin_unlock(lock, save);
}
100010d0:	bd70      	pop	{r4, r5, r6, pc}
    return (irq_handler_t *) scb_hw->vtor;
100010d2:	6892      	ldr	r2, [r2, #8]
        get_vtable()[exception] = __unhandled_user_irq;
100010d4:	490c      	ldr	r1, [pc, #48]	; (10001108 <irq_add_tail_to_free_list+0xb4>)
100010d6:	5011      	str	r1, [r2, r0]
100010d8:	e7ef      	b.n	100010ba <irq_add_tail_to_free_list+0x66>
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
100010da:	2100      	movs	r1, #0
                irq_handler_chain_slots[i].link = -1;
100010dc:	004a      	lsls	r2, r1, #1
100010de:	1852      	adds	r2, r2, r1
100010e0:	21ff      	movs	r1, #255	; 0xff
100010e2:	0092      	lsls	r2, r2, #2
100010e4:	18b2      	adds	r2, r6, r2
100010e6:	7191      	strb	r1, [r2, #6]
                irq_handler_chain_slots[i].inst3 = 0xbd00; // pop {pc}
100010e8:	4908      	ldr	r1, [pc, #32]	; (1000110c <irq_add_tail_to_free_list+0xb8>)
100010ea:	8091      	strh	r1, [r2, #4]
                break;
100010ec:	e7e5      	b.n	100010ba <irq_add_tail_to_free_list+0x66>
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
100010ee:	2101      	movs	r1, #1
100010f0:	e7f4      	b.n	100010dc <irq_add_tail_to_free_list+0x88>
100010f2:	2102      	movs	r1, #2
100010f4:	e7f2      	b.n	100010dc <irq_add_tail_to_free_list+0x88>
100010f6:	46c0      	nop			; (mov r8, r8)
100010f8:	d0000124 	.word	0xd0000124
100010fc:	200002c0 	.word	0x200002c0
10001100:	e000ed00 	.word	0xe000ed00
10001104:	2000a456 	.word	0x2000a456
10001108:	100001cd 	.word	0x100001cd
1000110c:	ffffbd00 	.word	0xffffbd00

10001110 <irq_init_priorities>:
#endif

void irq_init_priorities() {
10001110:	b5f0      	push	{r4, r5, r6, r7, lr}
#if PICO_DEFAULT_IRQ_PRIORITY != 0
    for (uint irq = 0; irq < NUM_IRQS; irq++) {
10001112:	2200      	movs	r2, #0
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001114:	2403      	movs	r4, #3
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001116:	27ff      	movs	r7, #255	; 0xff
10001118:	2680      	movs	r6, #128	; 0x80
1000111a:	0020      	movs	r0, r4
1000111c:	003d      	movs	r5, r7
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
1000111e:	4b09      	ldr	r3, [pc, #36]	; (10001144 <irq_init_priorities+0x34>)
10001120:	0011      	movs	r1, r2
10001122:	469c      	mov	ip, r3
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001124:	4010      	ands	r0, r2
10001126:	00c0      	lsls	r0, r0, #3
10001128:	4085      	lsls	r5, r0
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
1000112a:	43a1      	bics	r1, r4
1000112c:	4461      	add	r1, ip
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
1000112e:	680b      	ldr	r3, [r1, #0]
    for (uint irq = 0; irq < NUM_IRQS; irq++) {
10001130:	3201      	adds	r2, #1
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001132:	43ab      	bics	r3, r5
10001134:	0035      	movs	r5, r6
10001136:	4085      	lsls	r5, r0
10001138:	432b      	orrs	r3, r5
1000113a:	600b      	str	r3, [r1, #0]
    for (uint irq = 0; irq < NUM_IRQS; irq++) {
1000113c:	2a20      	cmp	r2, #32
1000113e:	d1ec      	bne.n	1000111a <irq_init_priorities+0xa>
        irq_set_priority(irq, PICO_DEFAULT_IRQ_PRIORITY);
    }
#endif
}
10001140:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001142:	46c0      	nop			; (mov r8, r8)
10001144:	e000e400 	.word	0xe000e400

10001148 <lock_init>:
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
10001148:	4b02      	ldr	r3, [pc, #8]	; (10001154 <lock_init+0xc>)
1000114a:	469c      	mov	ip, r3
1000114c:	4461      	add	r1, ip
1000114e:	0089      	lsls	r1, r1, #2

#include "pico/lock_core.h"

void lock_init(lock_core_t *core, uint lock_num) {
    assert(lock_num >= 0 && lock_num < NUM_SPIN_LOCKS);
    core->spin_lock = spin_lock_instance(lock_num);
10001150:	6001      	str	r1, [r0, #0]
}
10001152:	4770      	bx	lr
10001154:	34000040 	.word	0x34000040

10001158 <mutex_init>:

#if !PICO_NO_HARDWARE
static_assert(sizeof(mutex_t) == 8, "");
#endif

void mutex_init(mutex_t *mtx) {
10001158:	b510      	push	{r4, lr}
1000115a:	0004      	movs	r4, r0
    lock_init(&mtx->core, next_striped_spin_lock_num());
1000115c:	f000 fd00 	bl	10001b60 <next_striped_spin_lock_num>
10001160:	0001      	movs	r1, r0
10001162:	0020      	movs	r0, r4
10001164:	f7ff fff0 	bl	10001148 <lock_init>
    mtx->owner = -1;
10001168:	23ff      	movs	r3, #255	; 0xff
1000116a:	7123      	strb	r3, [r4, #4]
    __asm volatile ("dmb");
1000116c:	f3bf 8f5f 	dmb	sy
    __mem_fence_release();
}
10001170:	bd10      	pop	{r4, pc}
10001172:	46c0      	nop			; (mov r8, r8)

10001174 <ph_merge_nodes>:
        c->sibling = n->child;
        n->child = child_id;
    }
}

static pheap_node_id_t ph_merge_nodes(pheap_t *heap, pheap_node_id_t a, pheap_node_id_t b) {
10001174:	b570      	push	{r4, r5, r6, lr}
10001176:	0005      	movs	r5, r0
10001178:	0014      	movs	r4, r2
1000117a:	0016      	movs	r6, r2
    if (!a) return b;
1000117c:	2900      	cmp	r1, #0
1000117e:	d015      	beq.n	100011ac <ph_merge_nodes+0x38>
    if (!b) return a;
10001180:	000c      	movs	r4, r1
10001182:	2a00      	cmp	r2, #0
10001184:	d012      	beq.n	100011ac <ph_merge_nodes+0x38>
    if (heap->comparator(heap->user_data, a, b)) {
10001186:	6880      	ldr	r0, [r0, #8]
10001188:	686b      	ldr	r3, [r5, #4]
1000118a:	4798      	blx	r3
1000118c:	6829      	ldr	r1, [r5, #0]
1000118e:	2800      	cmp	r0, #0
10001190:	d00e      	beq.n	100011b0 <ph_merge_nodes+0x3c>
    return heap->nodes + id - 1;
10001192:	0073      	lsls	r3, r6, #1
10001194:	199b      	adds	r3, r3, r6
10001196:	0062      	lsls	r2, r4, #1
10001198:	3b03      	subs	r3, #3
1000119a:	1912      	adds	r2, r2, r4
1000119c:	18cb      	adds	r3, r1, r3
1000119e:	3a03      	subs	r2, #3
    c->parent = parent_id;
100011a0:	709c      	strb	r4, [r3, #2]
    return heap->nodes + id - 1;
100011a2:	1888      	adds	r0, r1, r2
    if (!n->child) {
100011a4:	5c8a      	ldrb	r2, [r1, r2]
100011a6:	2a00      	cmp	r2, #0
100011a8:	d115      	bne.n	100011d6 <ph_merge_nodes+0x62>
        n->child = child_id;
100011aa:	7006      	strb	r6, [r0, #0]
        return a;
    } else {
        ph_add_child_node(heap, b, a);
        return b;
    }
}
100011ac:	0020      	movs	r0, r4
100011ae:	bd70      	pop	{r4, r5, r6, pc}
    return heap->nodes + id - 1;
100011b0:	0063      	lsls	r3, r4, #1
100011b2:	191b      	adds	r3, r3, r4
100011b4:	0072      	lsls	r2, r6, #1
100011b6:	3b03      	subs	r3, #3
100011b8:	1992      	adds	r2, r2, r6
100011ba:	18cb      	adds	r3, r1, r3
100011bc:	3a03      	subs	r2, #3
    c->parent = parent_id;
100011be:	709e      	strb	r6, [r3, #2]
    return heap->nodes + id - 1;
100011c0:	1888      	adds	r0, r1, r2
    if (!n->child) {
100011c2:	5c8a      	ldrb	r2, [r1, r2]
100011c4:	2a00      	cmp	r2, #0
100011c6:	d102      	bne.n	100011ce <ph_merge_nodes+0x5a>
        n->child = child_id;
100011c8:	7004      	strb	r4, [r0, #0]
100011ca:	0034      	movs	r4, r6
100011cc:	e7ee      	b.n	100011ac <ph_merge_nodes+0x38>
        c->sibling = n->child;
100011ce:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
100011d0:	7004      	strb	r4, [r0, #0]
100011d2:	0034      	movs	r4, r6
100011d4:	e7ea      	b.n	100011ac <ph_merge_nodes+0x38>
        c->sibling = n->child;
100011d6:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
100011d8:	7006      	strb	r6, [r0, #0]
100011da:	e7e7      	b.n	100011ac <ph_merge_nodes+0x38>

100011dc <ph_create>:

#include <stdio.h>
#include <stdlib.h>
#include "pico/util/pheap.h"

pheap_t *ph_create(uint max_nodes, pheap_comparator comparator, void *user_data) {
100011dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100011de:	46c6      	mov	lr, r8
100011e0:	0005      	movs	r5, r0
100011e2:	000f      	movs	r7, r1
100011e4:	b500      	push	{lr}
    invalid_params_if(PHEAP, !max_nodes || max_nodes >= (1u << sizeof(pheap_node_id_t)));
    pheap_t *heap = calloc(1, sizeof(pheap_t));
100011e6:	2110      	movs	r1, #16
100011e8:	2001      	movs	r0, #1
pheap_t *ph_create(uint max_nodes, pheap_comparator comparator, void *user_data) {
100011ea:	0016      	movs	r6, r2
    pheap_t *heap = calloc(1, sizeof(pheap_t));
100011ec:	f000 f9ac 	bl	10001548 <__wrap_calloc>
    heap->max_nodes = max_nodes;
100011f0:	b2eb      	uxtb	r3, r5
    pheap_t *heap = calloc(1, sizeof(pheap_t));
100011f2:	0004      	movs	r4, r0
    heap->max_nodes = max_nodes;
100011f4:	7303      	strb	r3, [r0, #12]
    heap->comparator = comparator;
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
100011f6:	2103      	movs	r1, #3
    heap->comparator = comparator;
100011f8:	6047      	str	r7, [r0, #4]
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
100011fa:	0028      	movs	r0, r5
    heap->max_nodes = max_nodes;
100011fc:	4698      	mov	r8, r3
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
100011fe:	f000 f9a3 	bl	10001548 <__wrap_calloc>
    ph_clear(heap);
    return heap;
}

void ph_clear(pheap_t *heap) {
    heap->root_id = 0;
10001202:	2300      	movs	r3, #0
10001204:	7363      	strb	r3, [r4, #13]
    heap->free_head_id = 1;
10001206:	3301      	adds	r3, #1
10001208:	73a3      	strb	r3, [r4, #14]
    heap->free_tail_id = heap->max_nodes;
1000120a:	4643      	mov	r3, r8
1000120c:	21ff      	movs	r1, #255	; 0xff
1000120e:	73e3      	strb	r3, [r4, #15]
    for(uint i = 1; i < heap->max_nodes; i++) {
10001210:	23fe      	movs	r3, #254	; 0xfe
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
10001212:	6020      	str	r0, [r4, #0]
    heap->user_data = user_data;
10001214:	60a6      	str	r6, [r4, #8]
    for(uint i = 1; i < heap->max_nodes; i++) {
10001216:	4029      	ands	r1, r5
10001218:	422b      	tst	r3, r5
1000121a:	d006      	beq.n	1000122a <ph_create+0x4e>
1000121c:	1c42      	adds	r2, r0, #1
1000121e:	3bfd      	subs	r3, #253	; 0xfd
        ph_get_node(heap, i)->sibling = i + 1;
10001220:	3301      	adds	r3, #1
10001222:	7013      	strb	r3, [r2, #0]
    for(uint i = 1; i < heap->max_nodes; i++) {
10001224:	3203      	adds	r2, #3
10001226:	428b      	cmp	r3, r1
10001228:	d3fa      	bcc.n	10001220 <ph_create+0x44>
    }
    ph_get_node(heap, heap->max_nodes)->sibling = 0;
1000122a:	004b      	lsls	r3, r1, #1
1000122c:	1859      	adds	r1, r3, r1
1000122e:	2300      	movs	r3, #0
10001230:	1840      	adds	r0, r0, r1
10001232:	3803      	subs	r0, #3
10001234:	7043      	strb	r3, [r0, #1]
}
10001236:	0020      	movs	r0, r4
10001238:	bc80      	pop	{r7}
1000123a:	46b8      	mov	r8, r7
1000123c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000123e:	46c0      	nop			; (mov r8, r8)

10001240 <ph_merge_two_pass>:
void ph_destroy(pheap_t *heap) {
    free(heap->nodes);
    free(heap);
}

pheap_node_id_t ph_merge_two_pass(pheap_t *heap, pheap_node_id_t id) {
10001240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10001242:	46ce      	mov	lr, r9
10001244:	4647      	mov	r7, r8
10001246:	0006      	movs	r6, r0
10001248:	000c      	movs	r4, r1
1000124a:	b580      	push	{r7, lr}
    if (!id || !ph_get_node(heap, id)->sibling) {
1000124c:	2900      	cmp	r1, #0
1000124e:	d007      	beq.n	10001260 <ph_merge_two_pass+0x20>
    return heap->nodes + id - 1;
10001250:	004d      	lsls	r5, r1, #1
10001252:	6803      	ldr	r3, [r0, #0]
10001254:	186d      	adds	r5, r5, r1
10001256:	3d03      	subs	r5, #3
10001258:	195a      	adds	r2, r3, r5
1000125a:	7857      	ldrb	r7, [r2, #1]
1000125c:	2f00      	cmp	r7, #0
1000125e:	d104      	bne.n	1000126a <ph_merge_two_pass+0x2a>
        b = ph_get_node(heap, id)->sibling;
        new_node = ph_get_node(heap, b)->sibling;
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
    }
}
10001260:	0020      	movs	r0, r4
10001262:	bcc0      	pop	{r6, r7}
10001264:	46b9      	mov	r9, r7
10001266:	46b0      	mov	r8, r6
10001268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000126a:	0079      	lsls	r1, r7, #1
1000126c:	19c9      	adds	r1, r1, r7
1000126e:	3903      	subs	r1, #3
10001270:	4688      	mov	r8, r1
10001272:	4443      	add	r3, r8
        new_node = ph_get_node(heap, b)->sibling;
10001274:	7859      	ldrb	r1, [r3, #1]
10001276:	4689      	mov	r9, r1
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10001278:	2100      	movs	r1, #0
1000127a:	7059      	strb	r1, [r3, #1]
1000127c:	7051      	strb	r1, [r2, #1]
    if (heap->comparator(heap->user_data, a, b)) {
1000127e:	6873      	ldr	r3, [r6, #4]
10001280:	003a      	movs	r2, r7
10001282:	0021      	movs	r1, r4
10001284:	6880      	ldr	r0, [r0, #8]
10001286:	4798      	blx	r3
10001288:	6833      	ldr	r3, [r6, #0]
1000128a:	2800      	cmp	r0, #0
1000128c:	d014      	beq.n	100012b8 <ph_merge_two_pass+0x78>
    return heap->nodes + id - 1;
1000128e:	4642      	mov	r2, r8
10001290:	189a      	adds	r2, r3, r2
    c->parent = parent_id;
10001292:	7094      	strb	r4, [r2, #2]
    return heap->nodes + id - 1;
10001294:	1959      	adds	r1, r3, r5
    if (!n->child) {
10001296:	5d5b      	ldrb	r3, [r3, r5]
10001298:	2b00      	cmp	r3, #0
1000129a:	d000      	beq.n	1000129e <ph_merge_two_pass+0x5e>
        c->sibling = n->child;
1000129c:	7053      	strb	r3, [r2, #1]
        n->child = child_id;
1000129e:	700f      	strb	r7, [r1, #0]
100012a0:	0027      	movs	r7, r4
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
100012a2:	4649      	mov	r1, r9
100012a4:	0030      	movs	r0, r6
100012a6:	f7ff ffcb 	bl	10001240 <ph_merge_two_pass>
100012aa:	0039      	movs	r1, r7
100012ac:	0002      	movs	r2, r0
100012ae:	0030      	movs	r0, r6
100012b0:	f7ff ff60 	bl	10001174 <ph_merge_nodes>
100012b4:	0004      	movs	r4, r0
100012b6:	e7d3      	b.n	10001260 <ph_merge_two_pass+0x20>
    return heap->nodes + id - 1;
100012b8:	4642      	mov	r2, r8
    if (!n->child) {
100012ba:	4641      	mov	r1, r8
    return heap->nodes + id - 1;
100012bc:	195d      	adds	r5, r3, r5
    c->parent = parent_id;
100012be:	70af      	strb	r7, [r5, #2]
    return heap->nodes + id - 1;
100012c0:	189a      	adds	r2, r3, r2
    if (!n->child) {
100012c2:	5c5b      	ldrb	r3, [r3, r1]
100012c4:	2b00      	cmp	r3, #0
100012c6:	d000      	beq.n	100012ca <ph_merge_two_pass+0x8a>
        c->sibling = n->child;
100012c8:	706b      	strb	r3, [r5, #1]
        n->child = child_id;
100012ca:	7014      	strb	r4, [r2, #0]
100012cc:	e7e9      	b.n	100012a2 <ph_merge_two_pass+0x62>
100012ce:	46c0      	nop			; (mov r8, r8)

100012d0 <ph_remove_any_head>:

static pheap_node_id_t ph_remove_any_head(pheap_t *heap, pheap_node_id_t root_id, bool reserve) {
100012d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100012d2:	4657      	mov	r7, sl
100012d4:	4645      	mov	r5, r8
100012d6:	46de      	mov	lr, fp
100012d8:	464e      	mov	r6, r9
100012da:	b5e0      	push	{r5, r6, r7, lr}
100012dc:	000d      	movs	r5, r1
    return heap->nodes + id - 1;
100012de:	006b      	lsls	r3, r5, #1
100012e0:	6801      	ldr	r1, [r0, #0]
100012e2:	195b      	adds	r3, r3, r5
100012e4:	1edf      	subs	r7, r3, #3
100012e6:	0004      	movs	r4, r0
    assert(root_id);
//    printf("Removing head %d (parent %d sibling %d)\n", root_id, ph_get_node(heap, root_id)->parent, ph_get_node(heap, root_id)->sibling);
    assert(!ph_get_node(heap, root_id)->sibling);
    assert(!ph_get_node(heap, root_id)->parent);
    pheap_node_id_t new_root_id = ph_merge_two_pass(heap, ph_get_node(heap, root_id)->child);
100012e8:	5dc8      	ldrb	r0, [r1, r7]
static pheap_node_id_t ph_remove_any_head(pheap_t *heap, pheap_node_id_t root_id, bool reserve) {
100012ea:	b083      	sub	sp, #12
100012ec:	9201      	str	r2, [sp, #4]
100012ee:	19ca      	adds	r2, r1, r7
    if (!id || !ph_get_node(heap, id)->sibling) {
100012f0:	2800      	cmp	r0, #0
100012f2:	d04c      	beq.n	1000138e <ph_remove_any_head+0xbe>
100012f4:	0043      	lsls	r3, r0, #1
100012f6:	181b      	adds	r3, r3, r0
100012f8:	3b03      	subs	r3, #3
100012fa:	18cb      	adds	r3, r1, r3
100012fc:	785e      	ldrb	r6, [r3, #1]
100012fe:	46b4      	mov	ip, r6
10001300:	2e00      	cmp	r6, #0
10001302:	d116      	bne.n	10001332 <ph_remove_any_head+0x62>
    if (!reserve) {
10001304:	9e01      	ldr	r6, [sp, #4]
10001306:	2e00      	cmp	r6, #0
10001308:	d13e      	bne.n	10001388 <ph_remove_any_head+0xb8>
        if (heap->free_tail_id) {
1000130a:	7be6      	ldrb	r6, [r4, #15]
1000130c:	2e00      	cmp	r6, #0
1000130e:	d004      	beq.n	1000131a <ph_remove_any_head+0x4a>
            ph_get_node(heap, heap->free_tail_id)->sibling = root_id;
10001310:	0073      	lsls	r3, r6, #1
10001312:	199b      	adds	r3, r3, r6
10001314:	18cb      	adds	r3, r1, r3
10001316:	3b03      	subs	r3, #3
10001318:	705d      	strb	r5, [r3, #1]
        }
        heap->free_tail_id = root_id;
1000131a:	73e5      	strb	r5, [r4, #15]
    }
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
1000131c:	2800      	cmp	r0, #0
1000131e:	d12f      	bne.n	10001380 <ph_remove_any_head+0xb0>
    ph_get_node(heap, root_id)->sibling = 0;
10001320:	2300      	movs	r3, #0
10001322:	7053      	strb	r3, [r2, #1]
    return new_root_id;
}
10001324:	b003      	add	sp, #12
10001326:	bcf0      	pop	{r4, r5, r6, r7}
10001328:	46bb      	mov	fp, r7
1000132a:	46b2      	mov	sl, r6
1000132c:	46a9      	mov	r9, r5
1000132e:	46a0      	mov	r8, r4
10001330:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001332:	0072      	lsls	r2, r6, #1
10001334:	4462      	add	r2, ip
10001336:	3a03      	subs	r2, #3
10001338:	1889      	adds	r1, r1, r2
        new_node = ph_get_node(heap, b)->sibling;
1000133a:	784a      	ldrb	r2, [r1, #1]
1000133c:	4690      	mov	r8, r2
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
1000133e:	2200      	movs	r2, #0
10001340:	704a      	strb	r2, [r1, #1]
10001342:	4691      	mov	r9, r2
10001344:	705a      	strb	r2, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001346:	0001      	movs	r1, r0
10001348:	0032      	movs	r2, r6
1000134a:	0020      	movs	r0, r4
1000134c:	f7ff ff12 	bl	10001174 <ph_merge_nodes>
    if (!id || !ph_get_node(heap, id)->sibling) {
10001350:	4643      	mov	r3, r8
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001352:	4682      	mov	sl, r0
    if (!id || !ph_get_node(heap, id)->sibling) {
10001354:	2b00      	cmp	r3, #0
10001356:	d007      	beq.n	10001368 <ph_remove_any_head+0x98>
10001358:	005b      	lsls	r3, r3, #1
1000135a:	6821      	ldr	r1, [r4, #0]
1000135c:	4443      	add	r3, r8
1000135e:	3b03      	subs	r3, #3
10001360:	18cb      	adds	r3, r1, r3
10001362:	785a      	ldrb	r2, [r3, #1]
10001364:	2a00      	cmp	r2, #0
10001366:	d116      	bne.n	10001396 <ph_remove_any_head+0xc6>
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001368:	4642      	mov	r2, r8
1000136a:	4651      	mov	r1, sl
1000136c:	0020      	movs	r0, r4
1000136e:	f7ff ff01 	bl	10001174 <ph_merge_nodes>
10001372:	6821      	ldr	r1, [r4, #0]
    if (!reserve) {
10001374:	9b01      	ldr	r3, [sp, #4]
10001376:	19ca      	adds	r2, r1, r7
10001378:	2b00      	cmp	r3, #0
1000137a:	d0c6      	beq.n	1000130a <ph_remove_any_head+0x3a>
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
1000137c:	2800      	cmp	r0, #0
1000137e:	d0cf      	beq.n	10001320 <ph_remove_any_head+0x50>
10001380:	0043      	lsls	r3, r0, #1
10001382:	181b      	adds	r3, r3, r0
10001384:	3b03      	subs	r3, #3
10001386:	18cb      	adds	r3, r1, r3
10001388:	2100      	movs	r1, #0
1000138a:	7099      	strb	r1, [r3, #2]
1000138c:	e7c8      	b.n	10001320 <ph_remove_any_head+0x50>
    if (!reserve) {
1000138e:	9b01      	ldr	r3, [sp, #4]
10001390:	2b00      	cmp	r3, #0
10001392:	d1c5      	bne.n	10001320 <ph_remove_any_head+0x50>
10001394:	e7b9      	b.n	1000130a <ph_remove_any_head+0x3a>
10001396:	0050      	lsls	r0, r2, #1
10001398:	1880      	adds	r0, r0, r2
1000139a:	3803      	subs	r0, #3
1000139c:	1809      	adds	r1, r1, r0
        new_node = ph_get_node(heap, b)->sibling;
1000139e:	7848      	ldrb	r0, [r1, #1]
100013a0:	4683      	mov	fp, r0
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
100013a2:	4648      	mov	r0, r9
100013a4:	7048      	strb	r0, [r1, #1]
100013a6:	7058      	strb	r0, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
100013a8:	4641      	mov	r1, r8
100013aa:	0020      	movs	r0, r4
100013ac:	f7ff fee2 	bl	10001174 <ph_merge_nodes>
100013b0:	4659      	mov	r1, fp
100013b2:	4680      	mov	r8, r0
100013b4:	0020      	movs	r0, r4
100013b6:	f7ff ff43 	bl	10001240 <ph_merge_two_pass>
100013ba:	4641      	mov	r1, r8
100013bc:	0002      	movs	r2, r0
100013be:	0020      	movs	r0, r4
100013c0:	f7ff fed8 	bl	10001174 <ph_merge_nodes>
100013c4:	4680      	mov	r8, r0
100013c6:	e7cf      	b.n	10001368 <ph_remove_any_head+0x98>

100013c8 <ph_remove_head_reserve>:

pheap_node_id_t ph_remove_head_reserve(pheap_t *heap, bool reserve) {
100013c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100013ca:	4657      	mov	r7, sl
100013cc:	4645      	mov	r5, r8
100013ce:	46de      	mov	lr, fp
100013d0:	464e      	mov	r6, r9
100013d2:	b5e0      	push	{r5, r6, r7, lr}
100013d4:	b083      	sub	sp, #12
100013d6:	9101      	str	r1, [sp, #4]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
    return heap->root_id;
}

static inline pheap_node_id_t ph_peek_head(pheap_t *heap) {
    return heap->root_id;
100013d8:	7b45      	ldrb	r5, [r0, #13]
100013da:	0004      	movs	r4, r0
    return heap->nodes + id - 1;
100013dc:	006b      	lsls	r3, r5, #1
100013de:	6800      	ldr	r0, [r0, #0]
100013e0:	195b      	adds	r3, r3, r5
100013e2:	1edf      	subs	r7, r3, #3
    pheap_node_id_t new_root_id = ph_merge_two_pass(heap, ph_get_node(heap, root_id)->child);
100013e4:	5dc1      	ldrb	r1, [r0, r7]
100013e6:	19c2      	adds	r2, r0, r7
    if (!id || !ph_get_node(heap, id)->sibling) {
100013e8:	2900      	cmp	r1, #0
100013ea:	d04e      	beq.n	1000148a <ph_remove_head_reserve+0xc2>
100013ec:	004b      	lsls	r3, r1, #1
100013ee:	185b      	adds	r3, r3, r1
100013f0:	3b03      	subs	r3, #3
100013f2:	18c3      	adds	r3, r0, r3
100013f4:	785e      	ldrb	r6, [r3, #1]
100013f6:	46b4      	mov	ip, r6
100013f8:	2e00      	cmp	r6, #0
100013fa:	d118      	bne.n	1000142e <ph_remove_head_reserve+0x66>
    if (!reserve) {
100013fc:	9e01      	ldr	r6, [sp, #4]
100013fe:	2e00      	cmp	r6, #0
10001400:	d140      	bne.n	10001484 <ph_remove_head_reserve+0xbc>
        if (heap->free_tail_id) {
10001402:	7be6      	ldrb	r6, [r4, #15]
10001404:	2e00      	cmp	r6, #0
10001406:	d004      	beq.n	10001412 <ph_remove_head_reserve+0x4a>
            ph_get_node(heap, heap->free_tail_id)->sibling = root_id;
10001408:	0073      	lsls	r3, r6, #1
1000140a:	199b      	adds	r3, r3, r6
1000140c:	18c3      	adds	r3, r0, r3
1000140e:	3b03      	subs	r3, #3
10001410:	705d      	strb	r5, [r3, #1]
        heap->free_tail_id = root_id;
10001412:	73e5      	strb	r5, [r4, #15]
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
10001414:	2900      	cmp	r1, #0
10001416:	d131      	bne.n	1000147c <ph_remove_head_reserve+0xb4>
    ph_get_node(heap, root_id)->sibling = 0;
10001418:	2300      	movs	r3, #0
    pheap_node_id_t old_root_id = ph_peek_head(heap);
    heap->root_id = ph_remove_any_head(heap, old_root_id, reserve);
    return old_root_id;
}
1000141a:	0028      	movs	r0, r5
    ph_get_node(heap, root_id)->sibling = 0;
1000141c:	7053      	strb	r3, [r2, #1]
    heap->root_id = ph_remove_any_head(heap, old_root_id, reserve);
1000141e:	7361      	strb	r1, [r4, #13]
}
10001420:	b003      	add	sp, #12
10001422:	bcf0      	pop	{r4, r5, r6, r7}
10001424:	46bb      	mov	fp, r7
10001426:	46b2      	mov	sl, r6
10001428:	46a9      	mov	r9, r5
1000142a:	46a0      	mov	r8, r4
1000142c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000142e:	0072      	lsls	r2, r6, #1
10001430:	4462      	add	r2, ip
10001432:	3a03      	subs	r2, #3
10001434:	1880      	adds	r0, r0, r2
        new_node = ph_get_node(heap, b)->sibling;
10001436:	7842      	ldrb	r2, [r0, #1]
10001438:	4690      	mov	r8, r2
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
1000143a:	2200      	movs	r2, #0
1000143c:	7042      	strb	r2, [r0, #1]
1000143e:	4691      	mov	r9, r2
10001440:	705a      	strb	r2, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001442:	0020      	movs	r0, r4
10001444:	0032      	movs	r2, r6
10001446:	f7ff fe95 	bl	10001174 <ph_merge_nodes>
    if (!id || !ph_get_node(heap, id)->sibling) {
1000144a:	4643      	mov	r3, r8
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
1000144c:	4682      	mov	sl, r0
    if (!id || !ph_get_node(heap, id)->sibling) {
1000144e:	2b00      	cmp	r3, #0
10001450:	d007      	beq.n	10001462 <ph_remove_head_reserve+0x9a>
10001452:	005b      	lsls	r3, r3, #1
10001454:	6821      	ldr	r1, [r4, #0]
10001456:	4443      	add	r3, r8
10001458:	3b03      	subs	r3, #3
1000145a:	18cb      	adds	r3, r1, r3
1000145c:	785a      	ldrb	r2, [r3, #1]
1000145e:	2a00      	cmp	r2, #0
10001460:	d117      	bne.n	10001492 <ph_remove_head_reserve+0xca>
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001462:	4642      	mov	r2, r8
10001464:	4651      	mov	r1, sl
10001466:	0020      	movs	r0, r4
10001468:	f7ff fe84 	bl	10001174 <ph_merge_nodes>
    if (!reserve) {
1000146c:	9b01      	ldr	r3, [sp, #4]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
1000146e:	0001      	movs	r1, r0
10001470:	6820      	ldr	r0, [r4, #0]
10001472:	19c2      	adds	r2, r0, r7
    if (!reserve) {
10001474:	2b00      	cmp	r3, #0
10001476:	d0c4      	beq.n	10001402 <ph_remove_head_reserve+0x3a>
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
10001478:	2900      	cmp	r1, #0
1000147a:	d0cd      	beq.n	10001418 <ph_remove_head_reserve+0x50>
1000147c:	004b      	lsls	r3, r1, #1
1000147e:	185b      	adds	r3, r3, r1
10001480:	3b03      	subs	r3, #3
10001482:	18c3      	adds	r3, r0, r3
10001484:	2000      	movs	r0, #0
10001486:	7098      	strb	r0, [r3, #2]
10001488:	e7c6      	b.n	10001418 <ph_remove_head_reserve+0x50>
    if (!reserve) {
1000148a:	9b01      	ldr	r3, [sp, #4]
1000148c:	2b00      	cmp	r3, #0
1000148e:	d1c3      	bne.n	10001418 <ph_remove_head_reserve+0x50>
10001490:	e7b7      	b.n	10001402 <ph_remove_head_reserve+0x3a>
10001492:	0050      	lsls	r0, r2, #1
10001494:	1880      	adds	r0, r0, r2
10001496:	3803      	subs	r0, #3
10001498:	1809      	adds	r1, r1, r0
        new_node = ph_get_node(heap, b)->sibling;
1000149a:	7848      	ldrb	r0, [r1, #1]
1000149c:	4683      	mov	fp, r0
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
1000149e:	4648      	mov	r0, r9
100014a0:	7048      	strb	r0, [r1, #1]
100014a2:	7058      	strb	r0, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
100014a4:	4641      	mov	r1, r8
100014a6:	0020      	movs	r0, r4
100014a8:	f7ff fe64 	bl	10001174 <ph_merge_nodes>
100014ac:	4659      	mov	r1, fp
100014ae:	4680      	mov	r8, r0
100014b0:	0020      	movs	r0, r4
100014b2:	f7ff fec5 	bl	10001240 <ph_merge_two_pass>
100014b6:	4641      	mov	r1, r8
100014b8:	0002      	movs	r2, r0
100014ba:	0020      	movs	r0, r4
100014bc:	f7ff fe5a 	bl	10001174 <ph_merge_nodes>
100014c0:	4680      	mov	r8, r0
100014c2:	e7ce      	b.n	10001462 <ph_remove_head_reserve+0x9a>

100014c4 <ph_delete>:

#include <stdio.h>
bool ph_delete(pheap_t *heap, pheap_node_id_t id) {
100014c4:	b570      	push	{r4, r5, r6, lr}
100014c6:	0004      	movs	r4, r0
    // 1) trivial cases
    if (!id) return false;
100014c8:	2900      	cmp	r1, #0
100014ca:	d02c      	beq.n	10001526 <ph_delete+0x62>
    if (id == heap->root_id) {
100014cc:	7b43      	ldrb	r3, [r0, #13]
100014ce:	428b      	cmp	r3, r1
100014d0:	d02e      	beq.n	10001530 <ph_delete+0x6c>
100014d2:	6805      	ldr	r5, [r0, #0]
100014d4:	0048      	lsls	r0, r1, #1
100014d6:	1840      	adds	r0, r0, r1
100014d8:	3803      	subs	r0, #3
100014da:	1828      	adds	r0, r5, r0
        ph_remove_head(heap);
        return true;
    }
    // 2) unlink the node from the tree
    pheap_node_t *node = ph_get_node(heap, id);
    if (!node->parent) return false; // not in tree
100014dc:	7882      	ldrb	r2, [r0, #2]
100014de:	2a00      	cmp	r2, #0
100014e0:	d021      	beq.n	10001526 <ph_delete+0x62>
100014e2:	0053      	lsls	r3, r2, #1
100014e4:	189b      	adds	r3, r3, r2
100014e6:	3b03      	subs	r3, #3
    pheap_node_t *parent = ph_get_node(heap, node->parent);
    if (parent->child == id) {
100014e8:	5cea      	ldrb	r2, [r5, r3]
100014ea:	18ee      	adds	r6, r5, r3
100014ec:	428a      	cmp	r2, r1
100014ee:	d102      	bne.n	100014f6 <ph_delete+0x32>
100014f0:	e01b      	b.n	1000152a <ph_delete+0x66>
                prev_sibling->sibling = node->sibling;
                found = true;
                break;
            }
            prev_sibling_id = prev_sibling->sibling;
        } while (prev_sibling_id);
100014f2:	2a00      	cmp	r2, #0
100014f4:	d008      	beq.n	10001508 <ph_delete+0x44>
100014f6:	0053      	lsls	r3, r2, #1
100014f8:	189b      	adds	r3, r3, r2
100014fa:	3b03      	subs	r3, #3
100014fc:	18eb      	adds	r3, r5, r3
            if (prev_sibling->sibling == id) {
100014fe:	785a      	ldrb	r2, [r3, #1]
10001500:	428a      	cmp	r2, r1
10001502:	d1f6      	bne.n	100014f2 <ph_delete+0x2e>
                prev_sibling->sibling = node->sibling;
10001504:	7842      	ldrb	r2, [r0, #1]
10001506:	705a      	strb	r2, [r3, #1]
        assert(found);
    }
    node->sibling = node->parent = 0;
10001508:	2300      	movs	r3, #0
//    ph_dump(heap, NULL, NULL);
    // 3) remove it from the head of its own subtree
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, false);
1000150a:	2200      	movs	r2, #0
    node->sibling = node->parent = 0;
1000150c:	7083      	strb	r3, [r0, #2]
1000150e:	7043      	strb	r3, [r0, #1]
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, false);
10001510:	0020      	movs	r0, r4
10001512:	f7ff fedd 	bl	100012d0 <ph_remove_any_head>
    assert(new_sub_tree != heap->root_id);
    heap->root_id = ph_merge_nodes(heap, heap->root_id, new_sub_tree);
10001516:	7b61      	ldrb	r1, [r4, #13]
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, false);
10001518:	0002      	movs	r2, r0
    heap->root_id = ph_merge_nodes(heap, heap->root_id, new_sub_tree);
1000151a:	0020      	movs	r0, r4
1000151c:	f7ff fe2a 	bl	10001174 <ph_merge_nodes>
10001520:	7360      	strb	r0, [r4, #13]
    return true;
10001522:	2001      	movs	r0, #1
10001524:	e000      	b.n	10001528 <ph_delete+0x64>
    if (!id) return false;
10001526:	2000      	movs	r0, #0
}
10001528:	bd70      	pop	{r4, r5, r6, pc}
        parent->child = node->sibling;
1000152a:	7843      	ldrb	r3, [r0, #1]
1000152c:	7033      	strb	r3, [r6, #0]
1000152e:	e7eb      	b.n	10001508 <ph_delete+0x44>
    heap->root_id = ph_remove_any_head(heap, old_root_id, reserve);
10001530:	2200      	movs	r2, #0
10001532:	0019      	movs	r1, r3
10001534:	f7ff fecc 	bl	100012d0 <ph_remove_any_head>
10001538:	7360      	strb	r0, [r4, #13]
        return true;
1000153a:	2001      	movs	r0, #1
1000153c:	e7f4      	b.n	10001528 <ph_delete+0x64>
1000153e:	46c0      	nop			; (mov r8, r8)

10001540 <__wrap_malloc>:
        panic("Out of memory");
    }
#endif
}

void *__wrap_malloc(size_t size) {
10001540:	b510      	push	{r4, lr}
#if PICO_USE_MALLOC_MUTEX
    mutex_enter_blocking(&malloc_mutex);
#endif
    void *rc = __real_malloc(size);
10001542:	f000 ff0f 	bl	10002364 <malloc>
        printf("malloc %d %p->%p\n", (uint) size, rc, ((uint8_t *) rc) + size);
    }
#endif
    check_alloc(rc, size);
    return rc;
}
10001546:	bd10      	pop	{r4, pc}

10001548 <__wrap_calloc>:

void *__wrap_calloc(size_t count, size_t size) {
10001548:	b510      	push	{r4, lr}
#if PICO_USE_MALLOC_MUTEX
    mutex_enter_blocking(&malloc_mutex);
#endif
    void *rc = __real_calloc(count, size);
1000154a:	f000 feab 	bl	100022a4 <calloc>
        printf("calloc %d %p->%p\n", (uint) (count * size), rc, ((uint8_t *) rc) + size);
    }
#endif
    check_alloc(rc, size);
    return rc;
}
1000154e:	bd10      	pop	{r4, pc}

10001550 <running_on_fpga>:
#include "hardware/address_mapped.h"
#include "hardware/regs/tbman.h"
#include "hardware/regs/sysinfo.h"

bool running_on_fpga() {
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
10001550:	4b02      	ldr	r3, [pc, #8]	; (1000155c <running_on_fpga+0xc>)
10001552:	6818      	ldr	r0, [r3, #0]
10001554:	0780      	lsls	r0, r0, #30
10001556:	0fc0      	lsrs	r0, r0, #31
}
10001558:	4770      	bx	lr
1000155a:	46c0      	nop			; (mov r8, r8)
1000155c:	4006c000 	.word	0x4006c000

10001560 <pll_init>:
// For MHZ definitions etc
#include "hardware/clocks.h"
#include "hardware/pll.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint32_t refdiv, uint32_t vco_freq, uint32_t post_div1, uint8_t post_div2) {
10001560:	b5f0      	push	{r4, r5, r6, r7, lr}
10001562:	46c6      	mov	lr, r8
10001564:	b500      	push	{lr}
10001566:	001e      	movs	r6, r3
10001568:	ab06      	add	r3, sp, #24
1000156a:	781f      	ldrb	r7, [r3, #0]
    // Turn off PLL in case it is already running
    pll->pwr = 0xffffffff;
1000156c:	2301      	movs	r3, #1
1000156e:	425b      	negs	r3, r3
10001570:	6043      	str	r3, [r0, #4]
    pll->fbdiv_int = 0;
10001572:	2300      	movs	r3, #0
void pll_init(PLL pll, uint32_t refdiv, uint32_t vco_freq, uint32_t post_div1, uint8_t post_div2) {
10001574:	0004      	movs	r4, r0
    pll->fbdiv_int = 0;
10001576:	6083      	str	r3, [r0, #8]

    uint32_t ref_mhz = XOSC_MHZ / refdiv;
    pll->cs = refdiv;
10001578:	6001      	str	r1, [r0, #0]
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
1000157a:	200c      	movs	r0, #12
void pll_init(PLL pll, uint32_t refdiv, uint32_t vco_freq, uint32_t post_div1, uint8_t post_div2) {
1000157c:	4690      	mov	r8, r2
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
1000157e:	f7fe fecd 	bl	1000031c <__wrap___aeabi_uidiv>

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * MHZ);
10001582:	0141      	lsls	r1, r0, #5
10001584:	1a09      	subs	r1, r1, r0
10001586:	018d      	lsls	r5, r1, #6
10001588:	1a69      	subs	r1, r5, r1
1000158a:	00c9      	lsls	r1, r1, #3
1000158c:	1809      	adds	r1, r1, r0
1000158e:	0189      	lsls	r1, r1, #6
10001590:	4640      	mov	r0, r8
10001592:	f7fe fec3 	bl	1000031c <__wrap___aeabi_uidiv>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001596:	21c0      	movs	r1, #192	; 0xc0

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
10001598:	1d23      	adds	r3, r4, #4
1000159a:	0189      	lsls	r1, r1, #6
1000159c:	4319      	orrs	r1, r3
1000159e:	2321      	movs	r3, #33	; 0x21
    pll->fbdiv_int = fbdiv;
100015a0:	60a0      	str	r0, [r4, #8]
100015a2:	600b      	str	r3, [r1, #0]

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
100015a4:	6822      	ldr	r2, [r4, #0]
100015a6:	2a00      	cmp	r2, #0
100015a8:	dafc      	bge.n	100015a4 <pll_init+0x44>
100015aa:	2308      	movs	r3, #8

    // Set up post dividers - div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
100015ac:	033f      	lsls	r7, r7, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
100015ae:	0436      	lsls	r6, r6, #16
100015b0:	433e      	orrs	r6, r7
    pll->prim = pdiv;
100015b2:	60e6      	str	r6, [r4, #12]
100015b4:	600b      	str	r3, [r1, #0]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
/// \end::pll_init_finish[]
}
100015b6:	bc80      	pop	{r7}
100015b8:	46b8      	mov	r8, r7
100015ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

100015bc <_out_char>:
    (void) idx;
    (void) maxlen;
}

// internal _putchar wrapper
static inline void _out_char(char character, void *buffer, size_t idx, size_t maxlen) {
100015bc:	b510      	push	{r4, lr}
    (void) buffer;
    (void) idx;
    (void) maxlen;
    if (character) {
100015be:	2800      	cmp	r0, #0
100015c0:	d100      	bne.n	100015c4 <_out_char+0x8>
        _putchar(character);
    }
}
100015c2:	bd10      	pop	{r4, pc}
    putchar(character);
100015c4:	f000 f996 	bl	100018f4 <__wrap_putchar>
}
100015c8:	e7fb      	b.n	100015c2 <_out_char+0x6>
100015ca:	46c0      	nop			; (mov r8, r8)

100015cc <weak_raw_vprintf>:
    bool rc = weak_raw_vprintf(fmt, va);
    va_end(va);
    return rc;
}

bool weak_raw_vprintf(const char *fmt, va_list args) {
100015cc:	b510      	push	{r4, lr}
    if (lazy_vsnprintf) {
100015ce:	4a09      	ldr	r2, [pc, #36]	; (100015f4 <weak_raw_vprintf+0x28>)
bool weak_raw_vprintf(const char *fmt, va_list args) {
100015d0:	0003      	movs	r3, r0
    if (lazy_vsnprintf) {
100015d2:	6814      	ldr	r4, [r2, #0]
bool weak_raw_vprintf(const char *fmt, va_list args) {
100015d4:	b084      	sub	sp, #16
    if (lazy_vsnprintf) {
100015d6:	2c00      	cmp	r4, #0
100015d8:	d008      	beq.n	100015ec <weak_raw_vprintf+0x20>
        char buffer[1];
        lazy_vsnprintf(_out_char, buffer, (size_t) -1, fmt, args);
100015da:	2201      	movs	r2, #1
100015dc:	9100      	str	r1, [sp, #0]
100015de:	4806      	ldr	r0, [pc, #24]	; (100015f8 <weak_raw_vprintf+0x2c>)
100015e0:	4252      	negs	r2, r2
100015e2:	a903      	add	r1, sp, #12
100015e4:	47a0      	blx	r4
        return true;
100015e6:	2001      	movs	r0, #1
    } else {
        puts(fmt);
        return false;
    }
}
100015e8:	b004      	add	sp, #16
100015ea:	bd10      	pop	{r4, pc}
        puts(fmt);
100015ec:	f000 f990 	bl	10001910 <__wrap_puts>
        return false;
100015f0:	2000      	movs	r0, #0
100015f2:	e7f9      	b.n	100015e8 <weak_raw_vprintf+0x1c>
100015f4:	2000a420 	.word	0x2000a420
100015f8:	100015bd 	.word	0x100015bd

100015fc <runtime_init>:
                   | (0x7 << 1) // size 2^(7 + 1) = 256
                   | (subregion_select << 8)
                   | 0x10000000; // XN = disable instruction fetch; no other bits means no permissions
}

void runtime_init(void) {
100015fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100015fe:	4a2b      	ldr	r2, [pc, #172]	; (100016ac <runtime_init+0xb0>)
10001600:	4b2b      	ldr	r3, [pc, #172]	; (100016b0 <runtime_init+0xb4>)
10001602:	492c      	ldr	r1, [pc, #176]	; (100016b4 <runtime_init+0xb8>)
10001604:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001606:	4a2c      	ldr	r2, [pc, #176]	; (100016b8 <runtime_init+0xbc>)
10001608:	4b2c      	ldr	r3, [pc, #176]	; (100016bc <runtime_init+0xc0>)
1000160a:	601a      	str	r2, [r3, #0]
1000160c:	0014      	movs	r4, r2
1000160e:	688b      	ldr	r3, [r1, #8]
10001610:	439c      	bics	r4, r3
10001612:	d1fb      	bne.n	1000160c <runtime_init+0x10>
    extern void (*__preinit_array_end)();

    // Call each function in the list.
    // We have to take the address of the symbols, as __preinit_array_start *is*
    // the first function pointer, not the address of it.
    for (void (**p)() = &__preinit_array_start; p < &__preinit_array_end; ++p) {
10001614:	4d2a      	ldr	r5, [pc, #168]	; (100016c0 <runtime_init+0xc4>)
10001616:	4e2b      	ldr	r6, [pc, #172]	; (100016c4 <runtime_init+0xc8>)
10001618:	42b5      	cmp	r5, r6
1000161a:	d208      	bcs.n	1000162e <runtime_init+0x32>
1000161c:	3e01      	subs	r6, #1
1000161e:	1b76      	subs	r6, r6, r5
10001620:	08b6      	lsrs	r6, r6, #2
        (*p)();
10001622:	cd08      	ldmia	r5!, {r3}
10001624:	4798      	blx	r3
    for (void (**p)() = &__preinit_array_start; p < &__preinit_array_end; ++p) {
10001626:	0023      	movs	r3, r4
10001628:	3401      	adds	r4, #1
1000162a:	42b3      	cmp	r3, r6
1000162c:	d1f9      	bne.n	10001622 <runtime_init+0x26>
    }

    // After calling preinit we have enough runtime to do the exciting maths
    // in clocks_init
    clocks_init();
1000162e:	f7ff f9cd 	bl	100009cc <clocks_init>
10001632:	4a25      	ldr	r2, [pc, #148]	; (100016c8 <runtime_init+0xcc>)
10001634:	4b21      	ldr	r3, [pc, #132]	; (100016bc <runtime_init+0xc0>)
10001636:	601a      	str	r2, [r3, #0]
10001638:	4a1e      	ldr	r2, [pc, #120]	; (100016b4 <runtime_init+0xb8>)
1000163a:	6893      	ldr	r3, [r2, #8]
1000163c:	43db      	mvns	r3, r3
1000163e:	01db      	lsls	r3, r3, #7
10001640:	09dc      	lsrs	r4, r3, #7
10001642:	2b00      	cmp	r3, #0
10001644:	d1f9      	bne.n	1000163a <runtime_init+0x3e>
    unreset_block_wait(RESETS_RESET_BITS);

#if !PICO_IE_26_29_UNCHANGED_ON_RESET
    // after resetting BANK0 we should disable IE on 26-29
    hw_clear_alias(padsbank0_hw)->io[26] = hw_clear_alias(padsbank0_hw)->io[27] =
            hw_clear_alias(padsbank0_hw)->io[28] = hw_clear_alias(padsbank0_hw)->io[29] = PADS_BANK0_GPIO0_IE_BITS;
10001646:	2240      	movs	r2, #64	; 0x40
10001648:	4b20      	ldr	r3, [pc, #128]	; (100016cc <runtime_init+0xd0>)

    extern mutex_t __mutex_array_start;
    extern mutex_t __mutex_array_end;

    // the first function pointer, not the address of it.
    for (mutex_t *m = &__mutex_array_start; m < &__mutex_array_end; m++) {
1000164a:	4d21      	ldr	r5, [pc, #132]	; (100016d0 <runtime_init+0xd4>)
1000164c:	4f21      	ldr	r7, [pc, #132]	; (100016d4 <runtime_init+0xd8>)
            hw_clear_alias(padsbank0_hw)->io[28] = hw_clear_alias(padsbank0_hw)->io[29] = PADS_BANK0_GPIO0_IE_BITS;
1000164e:	679a      	str	r2, [r3, #120]	; 0x78
10001650:	675a      	str	r2, [r3, #116]	; 0x74
    hw_clear_alias(padsbank0_hw)->io[26] = hw_clear_alias(padsbank0_hw)->io[27] =
10001652:	671a      	str	r2, [r3, #112]	; 0x70
10001654:	66da      	str	r2, [r3, #108]	; 0x6c
    for (mutex_t *m = &__mutex_array_start; m < &__mutex_array_end; m++) {
10001656:	42bd      	cmp	r5, r7
10001658:	d20b      	bcs.n	10001672 <runtime_init+0x76>
1000165a:	2600      	movs	r6, #0
1000165c:	3f01      	subs	r7, #1
1000165e:	1b7f      	subs	r7, r7, r5
10001660:	08ff      	lsrs	r7, r7, #3
        mutex_init(m);
10001662:	0028      	movs	r0, r5
10001664:	f7ff fd78 	bl	10001158 <mutex_init>
    for (mutex_t *m = &__mutex_array_start; m < &__mutex_array_end; m++) {
10001668:	3508      	adds	r5, #8
1000166a:	0033      	movs	r3, r6
1000166c:	3601      	adds	r6, #1
1000166e:	42bb      	cmp	r3, r7
10001670:	d1f7      	bne.n	10001662 <runtime_init+0x66>
    }

#if !(PICO_NO_RAM_VECTOR_TABLE || PICO_NO_FLASH)
    __builtin_memcpy(ram_vector_table, (uint32_t *) scb_hw->vtor, sizeof(ram_vector_table));
10001672:	4e19      	ldr	r6, [pc, #100]	; (100016d8 <runtime_init+0xdc>)
10001674:	4d19      	ldr	r5, [pc, #100]	; (100016dc <runtime_init+0xe0>)
10001676:	22c0      	movs	r2, #192	; 0xc0
10001678:	68a9      	ldr	r1, [r5, #8]
1000167a:	0030      	movs	r0, r6
1000167c:	f7ff f8ca 	bl	10000814 <__wrap___aeabi_memcpy>
    scb_hw->vtor = (intptr_t) ram_vector_table;
10001680:	60ae      	str	r6, [r5, #8]
    // install core0 stack guard
    extern char __StackBottom;
    runtime_install_stack_guard(&__StackBottom);
#endif

    spin_locks_reset();
10001682:	f000 fa5f 	bl	10001b44 <spin_locks_reset>
    irq_init_priorities();
10001686:	f7ff fd43 	bl	10001110 <irq_init_priorities>
    alarm_pool_init_default();
1000168a:	f000 fc03 	bl	10001e94 <alarm_pool_init_default>
    extern void (*__init_array_end)();

    // Call each function in the list.
    // We have to take the address of the symbols, as __init_array_start *is*
    // the first function pointer, not the address of it.
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {
1000168e:	4d14      	ldr	r5, [pc, #80]	; (100016e0 <runtime_init+0xe4>)
10001690:	4e14      	ldr	r6, [pc, #80]	; (100016e4 <runtime_init+0xe8>)
10001692:	42b5      	cmp	r5, r6
10001694:	d208      	bcs.n	100016a8 <runtime_init+0xac>
10001696:	3e01      	subs	r6, #1
10001698:	1b76      	subs	r6, r6, r5
1000169a:	08b6      	lsrs	r6, r6, #2
        (*p)();
1000169c:	cd08      	ldmia	r5!, {r3}
1000169e:	4798      	blx	r3
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {
100016a0:	0023      	movs	r3, r4
100016a2:	3401      	adds	r4, #1
100016a4:	429e      	cmp	r6, r3
100016a6:	d1f9      	bne.n	1000169c <runtime_init+0xa0>
    }

}
100016a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100016aa:	46c0      	nop			; (mov r8, r8)
100016ac:	ffffcdbf 	.word	0xffffcdbf
100016b0:	4000e000 	.word	0x4000e000
100016b4:	4000c000 	.word	0x4000c000
100016b8:	003c7ffe 	.word	0x003c7ffe
100016bc:	4000f000 	.word	0x4000f000
100016c0:	2000a068 	.word	0x2000a068
100016c4:	2000a078 	.word	0x2000a078
100016c8:	01ffffff 	.word	0x01ffffff
100016cc:	4001f000 	.word	0x4001f000
100016d0:	2000a060 	.word	0x2000a060
100016d4:	2000a068 	.word	0x2000a068
100016d8:	20000000 	.word	0x20000000
100016dc:	e000ed00 	.word	0xe000ed00
100016e0:	2000a078 	.word	0x2000a078
100016e4:	2000a080 	.word	0x2000a080

100016e8 <_sbrk>:
void *_sbrk(int incr) {
    extern char end; /* Set by linker.  */
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0)
100016e8:	4a09      	ldr	r2, [pc, #36]	; (10001710 <_sbrk+0x28>)
void *_sbrk(int incr) {
100016ea:	0003      	movs	r3, r0
    if (heap_end == 0)
100016ec:	6810      	ldr	r0, [r2, #0]
100016ee:	2800      	cmp	r0, #0
100016f0:	d005      	beq.n	100016fe <_sbrk+0x16>
        heap_end = &end;

    prev_heap_end = heap_end;
    char *next_heap_end = heap_end + incr;

    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
100016f2:	4908      	ldr	r1, [pc, #32]	; (10001714 <_sbrk+0x2c>)
    char *next_heap_end = heap_end + incr;
100016f4:	18c3      	adds	r3, r0, r3
    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
100016f6:	428b      	cmp	r3, r1
100016f8:	d207      	bcs.n	1000170a <_sbrk+0x22>
#else
        return (char *) -1;
#endif
    }

    heap_end = next_heap_end;
100016fa:	6013      	str	r3, [r2, #0]
    return (void *) prev_heap_end;
}
100016fc:	4770      	bx	lr
        heap_end = &end;
100016fe:	4806      	ldr	r0, [pc, #24]	; (10001718 <_sbrk+0x30>)
    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
10001700:	4904      	ldr	r1, [pc, #16]	; (10001714 <_sbrk+0x2c>)
    char *next_heap_end = heap_end + incr;
10001702:	18c3      	adds	r3, r0, r3
        heap_end = &end;
10001704:	6010      	str	r0, [r2, #0]
    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
10001706:	428b      	cmp	r3, r1
10001708:	d3f7      	bcc.n	100016fa <_sbrk+0x12>
        return (char *) -1;
1000170a:	2001      	movs	r0, #1
1000170c:	4240      	negs	r0, r0
1000170e:	e7f5      	b.n	100016fc <_sbrk+0x14>
10001710:	2000a41c 	.word	0x2000a41c
10001714:	20040000 	.word	0x20040000
10001718:	2000a458 	.word	0x2000a458

1000171c <exit>:
    __asm__("bkpt #0");
1000171c:	be00      	bkpt	0x0000
1000171e:	e7fd      	b.n	1000171c <exit>

10001720 <panic>:
//  right now, print mutex may be uninitialised (in which case it deadlocks - although after printing "PANIC")
//  more importantly there may be no stdout/UART initialized yet
// todo we may want to think about where we print panic messages to; writing to USB appears to work
//  though it doesn't seem like we can expect it to... fine for now
//
void __attribute__((noreturn)) __printflike(1, 0) panic(const char *fmt, ...) {
10001720:	b40f      	push	{r0, r1, r2, r3}
10001722:	b500      	push	{lr}
    puts("\n*** PANIC ***\n");
10001724:	4808      	ldr	r0, [pc, #32]	; (10001748 <panic+0x28>)
void __attribute__((noreturn)) __printflike(1, 0) panic(const char *fmt, ...) {
10001726:	b083      	sub	sp, #12
    puts("\n*** PANIC ***\n");
10001728:	f000 f8f2 	bl	10001910 <__wrap_puts>
    if (fmt) {
1000172c:	9b04      	ldr	r3, [sp, #16]
1000172e:	2b00      	cmp	r3, #0
10001730:	d007      	beq.n	10001742 <panic+0x22>
#if PICO_PRINTF_NONE
        puts(fmt);
#else
        va_list args;
        va_start(args, fmt);
10001732:	a905      	add	r1, sp, #20
#if PICO_PRINTF_ALWAYS_INCLUDED
        vprintf(fmt, args);
#else
        weak_raw_vprintf(fmt, args);
10001734:	0018      	movs	r0, r3
        va_start(args, fmt);
10001736:	9101      	str	r1, [sp, #4]
        weak_raw_vprintf(fmt, args);
10001738:	f7ff ff48 	bl	100015cc <weak_raw_vprintf>
#endif
        va_end(args);
        puts("\n");
1000173c:	4803      	ldr	r0, [pc, #12]	; (1000174c <panic+0x2c>)
1000173e:	f000 f8e7 	bl	10001910 <__wrap_puts>
10001742:	be00      	bkpt	0x0000
10001744:	e7fd      	b.n	10001742 <panic+0x22>
10001746:	46c0      	nop			; (mov r8, r8)
10001748:	10002ce0 	.word	0x10002ce0
1000174c:	10002cf0 	.word	0x10002cf0

10001750 <hard_assertion_failure>:
    }

    _exit(1);
}

void hard_assertion_failure(void) {
10001750:	b510      	push	{r4, lr}
    panic("Hard assert");
10001752:	4801      	ldr	r0, [pc, #4]	; (10001758 <hard_assertion_failure+0x8>)
10001754:	f7ff ffe4 	bl	10001720 <panic>
10001758:	10002cf4 	.word	0x10002cf4

1000175c <stdio_out_chars_crlf.part.0>:
}
static void print_serialize_end() {
}
#endif

static void stdio_out_chars_crlf(stdio_driver_t *driver, const char *s, int len) {
1000175c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000175e:	4646      	mov	r6, r8
10001760:	464f      	mov	r7, r9
10001762:	46d6      	mov	lr, sl
10001764:	4680      	mov	r8, r0
10001766:	b5c0      	push	{r6, r7, lr}
10001768:	000e      	movs	r6, r1
1000176a:	1e17      	subs	r7, r2, #0
        driver->out_chars(s, len);
        return;
    }
    int first_of_chunk = 0;
    static const char crlf_str[] = {'\r', '\n'};
    for (int i = 0; i < len; i++) {
1000176c:	dd3f      	ble.n	100017ee <stdio_out_chars_crlf.part.0+0x92>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
1000176e:	1e4b      	subs	r3, r1, #1
10001770:	4699      	mov	r9, r3
        if (s[i] == '\n' && !prev_char_was_cr) {
            if (i > first_of_chunk) {
                driver->out_chars(&s[first_of_chunk], i - first_of_chunk);
            }
            driver->out_chars(crlf_str, 2);
10001772:	4b21      	ldr	r3, [pc, #132]	; (100017f8 <stdio_out_chars_crlf.part.0+0x9c>)
    for (int i = 0; i < len; i++) {
10001774:	2501      	movs	r5, #1
10001776:	2400      	movs	r4, #0
    int first_of_chunk = 0;
10001778:	2000      	movs	r0, #0
            driver->out_chars(crlf_str, 2);
1000177a:	469a      	mov	sl, r3
1000177c:	e00d      	b.n	1000179a <stdio_out_chars_crlf.part.0+0x3e>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
1000177e:	464b      	mov	r3, r9
10001780:	5d1b      	ldrb	r3, [r3, r4]
10001782:	3b0d      	subs	r3, #13
10001784:	425a      	negs	r2, r3
10001786:	4153      	adcs	r3, r2
        if (s[i] == '\n' && !prev_char_was_cr) {
10001788:	5d32      	ldrb	r2, [r6, r4]
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
1000178a:	b2db      	uxtb	r3, r3
        if (s[i] == '\n' && !prev_char_was_cr) {
1000178c:	2a0a      	cmp	r2, #10
1000178e:	d00b      	beq.n	100017a8 <stdio_out_chars_crlf.part.0+0x4c>
            first_of_chunk = i + 1;
10001790:	002b      	movs	r3, r5
    for (int i = 0; i < len; i++) {
10001792:	3401      	adds	r4, #1
10001794:	3501      	adds	r5, #1
10001796:	429f      	cmp	r7, r3
10001798:	dd1a      	ble.n	100017d0 <stdio_out_chars_crlf.part.0+0x74>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
1000179a:	2c00      	cmp	r4, #0
1000179c:	d1ef      	bne.n	1000177e <stdio_out_chars_crlf.part.0+0x22>
1000179e:	4643      	mov	r3, r8
        if (s[i] == '\n' && !prev_char_was_cr) {
100017a0:	5d32      	ldrb	r2, [r6, r4]
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
100017a2:	7c1b      	ldrb	r3, [r3, #16]
        if (s[i] == '\n' && !prev_char_was_cr) {
100017a4:	2a0a      	cmp	r2, #10
100017a6:	d1f3      	bne.n	10001790 <stdio_out_chars_crlf.part.0+0x34>
100017a8:	2b00      	cmp	r3, #0
100017aa:	d1f1      	bne.n	10001790 <stdio_out_chars_crlf.part.0+0x34>
            if (i > first_of_chunk) {
100017ac:	42a0      	cmp	r0, r4
100017ae:	da04      	bge.n	100017ba <stdio_out_chars_crlf.part.0+0x5e>
                driver->out_chars(&s[first_of_chunk], i - first_of_chunk);
100017b0:	4643      	mov	r3, r8
100017b2:	1a21      	subs	r1, r4, r0
100017b4:	681b      	ldr	r3, [r3, #0]
100017b6:	1830      	adds	r0, r6, r0
100017b8:	4798      	blx	r3
            driver->out_chars(crlf_str, 2);
100017ba:	4643      	mov	r3, r8
100017bc:	4650      	mov	r0, sl
100017be:	681b      	ldr	r3, [r3, #0]
100017c0:	2102      	movs	r1, #2
100017c2:	4798      	blx	r3
    for (int i = 0; i < len; i++) {
100017c4:	3401      	adds	r4, #1
            first_of_chunk = i + 1;
100017c6:	0028      	movs	r0, r5
100017c8:	002b      	movs	r3, r5
    for (int i = 0; i < len; i++) {
100017ca:	3501      	adds	r5, #1
100017cc:	429f      	cmp	r7, r3
100017ce:	dce4      	bgt.n	1000179a <stdio_out_chars_crlf.part.0+0x3e>
        }
    }
    if (first_of_chunk < len) {
100017d0:	4287      	cmp	r7, r0
100017d2:	dd04      	ble.n	100017de <stdio_out_chars_crlf.part.0+0x82>
        driver->out_chars(&s[first_of_chunk], len - first_of_chunk);
100017d4:	4643      	mov	r3, r8
100017d6:	1a39      	subs	r1, r7, r0
100017d8:	681b      	ldr	r3, [r3, #0]
100017da:	1830      	adds	r0, r6, r0
100017dc:	4798      	blx	r3
    }
    if (len > 0) {
        driver->last_ended_with_cr = s[len - 1] == '\r';
100017de:	19f6      	adds	r6, r6, r7
100017e0:	3e01      	subs	r6, #1
100017e2:	7833      	ldrb	r3, [r6, #0]
100017e4:	3b0d      	subs	r3, #13
100017e6:	425a      	negs	r2, r3
100017e8:	4153      	adcs	r3, r2
100017ea:	4642      	mov	r2, r8
100017ec:	7413      	strb	r3, [r2, #16]
    }
#else
    driver->out_chars(s, len);
#endif
}
100017ee:	bce0      	pop	{r5, r6, r7}
100017f0:	46ba      	mov	sl, r7
100017f2:	46b1      	mov	r9, r6
100017f4:	46a8      	mov	r8, r5
100017f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100017f8:	10002d00 	.word	0x10002d00

100017fc <stdio_put_string.isra.0>:

static bool stdio_put_string(const char *s, int len, bool newline) {
100017fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100017fe:	4657      	mov	r7, sl
10001800:	4645      	mov	r5, r8
10001802:	46de      	mov	lr, fp
10001804:	464e      	mov	r6, r9
 *  \ingroup hardware_sync
 *
 * \return The core number the call was made from
 */
static inline uint get_core_num() {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
10001806:	23d0      	movs	r3, #208	; 0xd0
10001808:	b5e0      	push	{r5, r6, r7, lr}
1000180a:	061b      	lsls	r3, r3, #24
1000180c:	681c      	ldr	r4, [r3, #0]
    if (!mutex_try_enter(&print_mutex, &owner)) {
1000180e:	4b35      	ldr	r3, [pc, #212]	; (100018e4 <stdio_put_string.isra.0+0xe8>)
static bool stdio_put_string(const char *s, int len, bool newline) {
10001810:	b083      	sub	sp, #12
10001812:	0007      	movs	r7, r0
10001814:	000d      	movs	r5, r1
    if (!mutex_try_enter(&print_mutex, &owner)) {
10001816:	0018      	movs	r0, r3
10001818:	a901      	add	r1, sp, #4
static bool stdio_put_string(const char *s, int len, bool newline) {
1000181a:	4690      	mov	r8, r2
    if (!mutex_try_enter(&print_mutex, &owner)) {
1000181c:	469a      	mov	sl, r3
1000181e:	f001 fa0b 	bl	10002c38 <__mutex_try_enter_veneer>
10001822:	4681      	mov	r9, r0
10001824:	2800      	cmp	r0, #0
10001826:	d107      	bne.n	10001838 <stdio_put_string.isra.0+0x3c>
        if (owner == core_num) {
10001828:	9b01      	ldr	r3, [sp, #4]
1000182a:	429c      	cmp	r4, r3
1000182c:	d004      	beq.n	10001838 <stdio_put_string.isra.0+0x3c>
        mutex_enter_blocking(&print_mutex);
1000182e:	4650      	mov	r0, sl
10001830:	f001 fa12 	bl	10002c58 <__mutex_enter_blocking_veneer>
    return true;
10001834:	2301      	movs	r3, #1
10001836:	4699      	mov	r9, r3
    if (!serialzed) {
#if PICO_STDIO_IGNORE_NESTED_STDOUT
        return false;
#endif
    }
    if (len == -1) len = strlen(s);
10001838:	1c6b      	adds	r3, r5, #1
1000183a:	d103      	bne.n	10001844 <stdio_put_string.isra.0+0x48>
1000183c:	0038      	movs	r0, r7
1000183e:	f001 f87f 	bl	10002940 <strlen>
10001842:	0005      	movs	r5, r0
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10001844:	4b28      	ldr	r3, [pc, #160]	; (100018e8 <stdio_put_string.isra.0+0xec>)
10001846:	681c      	ldr	r4, [r3, #0]
10001848:	2c00      	cmp	r4, #0
1000184a:	d02f      	beq.n	100018ac <stdio_put_string.isra.0+0xb0>
        if (!driver->out_chars) continue;
        if (filter && filter != driver) continue;
        stdio_out_chars_crlf(driver, s, len);
        if (newline) {
            const char c = '\n';
1000184c:	230a      	movs	r3, #10
        if (filter && filter != driver) continue;
1000184e:	4e27      	ldr	r6, [pc, #156]	; (100018ec <stdio_put_string.isra.0+0xf0>)
            const char c = '\n';
10001850:	469b      	mov	fp, r3
10001852:	e002      	b.n	1000185a <stdio_put_string.isra.0+0x5e>
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10001854:	68e4      	ldr	r4, [r4, #12]
10001856:	2c00      	cmp	r4, #0
10001858:	d028      	beq.n	100018ac <stdio_put_string.isra.0+0xb0>
        if (!driver->out_chars) continue;
1000185a:	6822      	ldr	r2, [r4, #0]
1000185c:	2a00      	cmp	r2, #0
1000185e:	d0f9      	beq.n	10001854 <stdio_put_string.isra.0+0x58>
        if (filter && filter != driver) continue;
10001860:	6833      	ldr	r3, [r6, #0]
10001862:	2b00      	cmp	r3, #0
10001864:	d001      	beq.n	1000186a <stdio_put_string.isra.0+0x6e>
10001866:	42a3      	cmp	r3, r4
10001868:	d1f4      	bne.n	10001854 <stdio_put_string.isra.0+0x58>
    if (!driver->crlf_enabled) {
1000186a:	7c63      	ldrb	r3, [r4, #17]
1000186c:	2b00      	cmp	r3, #0
1000186e:	d027      	beq.n	100018c0 <stdio_put_string.isra.0+0xc4>
10001870:	002a      	movs	r2, r5
10001872:	0039      	movs	r1, r7
10001874:	0020      	movs	r0, r4
10001876:	f7ff ff71 	bl	1000175c <stdio_out_chars_crlf.part.0>
        if (newline) {
1000187a:	4643      	mov	r3, r8
1000187c:	2b00      	cmp	r3, #0
1000187e:	d0e9      	beq.n	10001854 <stdio_put_string.isra.0+0x58>
            const char c = '\n';
10001880:	466b      	mov	r3, sp
10001882:	465a      	mov	r2, fp
10001884:	711a      	strb	r2, [r3, #4]
    if (!driver->crlf_enabled) {
10001886:	7c63      	ldrb	r3, [r4, #17]
10001888:	2b00      	cmp	r3, #0
1000188a:	d01d      	beq.n	100018c8 <stdio_put_string.isra.0+0xcc>
        if (s[i] == '\n' && !prev_char_was_cr) {
1000188c:	7c23      	ldrb	r3, [r4, #16]
1000188e:	2b00      	cmp	r3, #0
10001890:	d023      	beq.n	100018da <stdio_put_string.isra.0+0xde>
        driver->out_chars(&s[first_of_chunk], len - first_of_chunk);
10001892:	2101      	movs	r1, #1
10001894:	6823      	ldr	r3, [r4, #0]
10001896:	a801      	add	r0, sp, #4
10001898:	4798      	blx	r3
        driver->last_ended_with_cr = s[len - 1] == '\r';
1000189a:	466b      	mov	r3, sp
1000189c:	791b      	ldrb	r3, [r3, #4]
1000189e:	3b0d      	subs	r3, #13
100018a0:	425a      	negs	r2, r3
100018a2:	4153      	adcs	r3, r2
100018a4:	7423      	strb	r3, [r4, #16]
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
100018a6:	68e4      	ldr	r4, [r4, #12]
100018a8:	2c00      	cmp	r4, #0
100018aa:	d1d6      	bne.n	1000185a <stdio_put_string.isra.0+0x5e>
            stdio_out_chars_crlf(driver, &c, 1);
        }
    }
    if (serialzed) {
100018ac:	464b      	mov	r3, r9
100018ae:	2b00      	cmp	r3, #0
100018b0:	d10f      	bne.n	100018d2 <stdio_put_string.isra.0+0xd6>
        stdout_serialize_end();
    }
    return len;
}
100018b2:	b003      	add	sp, #12
100018b4:	bcf0      	pop	{r4, r5, r6, r7}
100018b6:	46bb      	mov	fp, r7
100018b8:	46b2      	mov	sl, r6
100018ba:	46a9      	mov	r9, r5
100018bc:	46a0      	mov	r8, r4
100018be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        driver->out_chars(s, len);
100018c0:	0029      	movs	r1, r5
100018c2:	0038      	movs	r0, r7
100018c4:	4790      	blx	r2
        return;
100018c6:	e7d8      	b.n	1000187a <stdio_put_string.isra.0+0x7e>
        driver->out_chars(s, len);
100018c8:	2101      	movs	r1, #1
100018ca:	6823      	ldr	r3, [r4, #0]
100018cc:	a801      	add	r0, sp, #4
100018ce:	4798      	blx	r3
        return;
100018d0:	e7c0      	b.n	10001854 <stdio_put_string.isra.0+0x58>
    mutex_exit(&print_mutex);
100018d2:	4650      	mov	r0, sl
100018d4:	f001 f998 	bl	10002c08 <__mutex_exit_veneer>
    return len;
100018d8:	e7eb      	b.n	100018b2 <stdio_put_string.isra.0+0xb6>
            driver->out_chars(crlf_str, 2);
100018da:	2102      	movs	r1, #2
100018dc:	4804      	ldr	r0, [pc, #16]	; (100018f0 <stdio_put_string.isra.0+0xf4>)
100018de:	6823      	ldr	r3, [r4, #0]
100018e0:	4798      	blx	r3
    if (first_of_chunk < len) {
100018e2:	e7da      	b.n	1000189a <stdio_put_string.isra.0+0x9e>
100018e4:	2000a060 	.word	0x2000a060
100018e8:	2000a410 	.word	0x2000a410
100018ec:	2000a418 	.word	0x2000a418
100018f0:	10002d00 	.word	0x10002d00

100018f4 <__wrap_putchar>:
        // todo maybe a little sleep here?
    } while (!time_reached(until));
    return PICO_ERROR_TIMEOUT;
}

int WRAPPER_FUNC(putchar)(int c) {
100018f4:	b510      	push	{r4, lr}
100018f6:	b082      	sub	sp, #8
    char cc = c;
100018f8:	466b      	mov	r3, sp
int WRAPPER_FUNC(putchar)(int c) {
100018fa:	0004      	movs	r4, r0
    stdio_put_string(&cc, 1, false);
100018fc:	2200      	movs	r2, #0
    char cc = c;
100018fe:	1dd8      	adds	r0, r3, #7
    stdio_put_string(&cc, 1, false);
10001900:	2101      	movs	r1, #1
    char cc = c;
10001902:	7004      	strb	r4, [r0, #0]
    stdio_put_string(&cc, 1, false);
10001904:	f7ff ff7a 	bl	100017fc <stdio_put_string.isra.0>
    return c;
}
10001908:	0020      	movs	r0, r4
1000190a:	b002      	add	sp, #8
1000190c:	bd10      	pop	{r4, pc}
1000190e:	46c0      	nop			; (mov r8, r8)

10001910 <__wrap_puts>:

int WRAPPER_FUNC(puts)(const char *s) {
10001910:	b570      	push	{r4, r5, r6, lr}
10001912:	0004      	movs	r4, r0
    int len = strlen(s);
10001914:	f001 f814 	bl	10002940 <strlen>
    stdio_put_string(s, len, true);
10001918:	2201      	movs	r2, #1
1000191a:	0001      	movs	r1, r0
    int len = strlen(s);
1000191c:	0005      	movs	r5, r0
    stdio_put_string(s, len, true);
1000191e:	0020      	movs	r0, r4
10001920:	f7ff ff6c 	bl	100017fc <stdio_put_string.isra.0>
        else drivers = driver;
    }
}

void stdio_flush() {
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10001924:	4b08      	ldr	r3, [pc, #32]	; (10001948 <__wrap_puts+0x38>)
10001926:	681c      	ldr	r4, [r3, #0]
10001928:	2c00      	cmp	r4, #0
1000192a:	d006      	beq.n	1000193a <__wrap_puts+0x2a>
        if (d->out_flush) d->out_flush();
1000192c:	6863      	ldr	r3, [r4, #4]
1000192e:	2b00      	cmp	r3, #0
10001930:	d005      	beq.n	1000193e <__wrap_puts+0x2e>
10001932:	4798      	blx	r3
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10001934:	68e4      	ldr	r4, [r4, #12]
10001936:	2c00      	cmp	r4, #0
10001938:	d1f8      	bne.n	1000192c <__wrap_puts+0x1c>
}
1000193a:	0028      	movs	r0, r5
1000193c:	bd70      	pop	{r4, r5, r6, pc}
    for (stdio_driver_t *d = drivers; d; d = d->next) {
1000193e:	68e4      	ldr	r4, [r4, #12]
10001940:	2c00      	cmp	r4, #0
10001942:	d1f3      	bne.n	1000192c <__wrap_puts+0x1c>
10001944:	e7f9      	b.n	1000193a <__wrap_puts+0x2a>
10001946:	46c0      	nop			; (mov r8, r8)
10001948:	2000a410 	.word	0x2000a410

1000194c <stdio_init_all>:
#endif

#if PICO_STDIO_USB
    stdio_usb_init();
#endif
}
1000194c:	4770      	bx	lr
1000194e:	46c0      	nop			; (mov r8, r8)

10001950 <set_sys_clock_pll>:
                        48 * MHZ,
                        48 * MHZ);
    }
}

void set_sys_clock_pll(uint32_t vco_freq, uint post_div1, uint post_div2) {
10001950:	b5f0      	push	{r4, r5, r6, r7, lr}
10001952:	b083      	sub	sp, #12
10001954:	0006      	movs	r6, r0
10001956:	000c      	movs	r4, r1
10001958:	0015      	movs	r5, r2
    if (!running_on_fpga()) {
1000195a:	f7ff fdf9 	bl	10001550 <running_on_fpga>
1000195e:	2800      	cmp	r0, #0
10001960:	d001      	beq.n	10001966 <set_sys_clock_pll+0x16>
                        0, // Only AUX mux on ADC
                        CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLKSRC_PLL_USB,
                        48 * MHZ,
                        48 * MHZ);
    }
}
10001962:	b003      	add	sp, #12
10001964:	bdf0      	pop	{r4, r5, r6, r7, pc}
        clock_configure(clk_sys,
10001966:	4f16      	ldr	r7, [pc, #88]	; (100019c0 <set_sys_clock_pll+0x70>)
10001968:	2201      	movs	r2, #1
1000196a:	003b      	movs	r3, r7
1000196c:	2101      	movs	r1, #1
1000196e:	9700      	str	r7, [sp, #0]
10001970:	3005      	adds	r0, #5
10001972:	f7fe ffb3 	bl	100008dc <clock_configure>
        pll_init(pll_sys, 1, vco_freq, post_div1, post_div2);
10001976:	b2eb      	uxtb	r3, r5
10001978:	0032      	movs	r2, r6
1000197a:	9300      	str	r3, [sp, #0]
1000197c:	2101      	movs	r1, #1
1000197e:	0023      	movs	r3, r4
10001980:	4810      	ldr	r0, [pc, #64]	; (100019c4 <set_sys_clock_pll+0x74>)
10001982:	f7ff fded 	bl	10001560 <pll_init>
        uint32_t freq = vco_freq / (post_div1 * post_div2);
10001986:	0021      	movs	r1, r4
10001988:	0030      	movs	r0, r6
1000198a:	4369      	muls	r1, r5
1000198c:	f7fe fcc6 	bl	1000031c <__wrap___aeabi_uidiv>
10001990:	0004      	movs	r4, r0
        clock_configure(clk_ref,
10001992:	4b0d      	ldr	r3, [pc, #52]	; (100019c8 <set_sys_clock_pll+0x78>)
10001994:	2200      	movs	r2, #0
10001996:	9300      	str	r3, [sp, #0]
10001998:	2102      	movs	r1, #2
1000199a:	2004      	movs	r0, #4
1000199c:	f7fe ff9e 	bl	100008dc <clock_configure>
        clock_configure(clk_sys,
100019a0:	0023      	movs	r3, r4
100019a2:	2200      	movs	r2, #0
100019a4:	2101      	movs	r1, #1
100019a6:	9400      	str	r4, [sp, #0]
100019a8:	2005      	movs	r0, #5
100019aa:	f7fe ff97 	bl	100008dc <clock_configure>
        clock_configure(clk_peri,
100019ae:	003b      	movs	r3, r7
100019b0:	2202      	movs	r2, #2
100019b2:	2100      	movs	r1, #0
100019b4:	9700      	str	r7, [sp, #0]
100019b6:	2006      	movs	r0, #6
100019b8:	f7fe ff90 	bl	100008dc <clock_configure>
}
100019bc:	e7d1      	b.n	10001962 <set_sys_clock_pll+0x12>
100019be:	46c0      	nop			; (mov r8, r8)
100019c0:	02dc6c00 	.word	0x02dc6c00
100019c4:	40028000 	.word	0x40028000
100019c8:	00b71b00 	.word	0x00b71b00

100019cc <check_sys_clock_khz>:

bool check_sys_clock_khz(uint32_t freq_khz, uint *vco_out, uint *postdiv1_out, uint *postdiv_out) {
100019cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100019ce:	46de      	mov	lr, fp
100019d0:	4657      	mov	r7, sl
100019d2:	464e      	mov	r6, r9
100019d4:	4645      	mov	r5, r8
100019d6:	b5e0      	push	{r5, r6, r7, lr}
100019d8:	0007      	movs	r7, r0
100019da:	b085      	sub	sp, #20
    uint crystal_freq_khz = clock_get_hz(clk_ref) / 1000;
100019dc:	2004      	movs	r0, #4
bool check_sys_clock_khz(uint32_t freq_khz, uint *vco_out, uint *postdiv1_out, uint *postdiv_out) {
100019de:	9303      	str	r3, [sp, #12]
100019e0:	9101      	str	r1, [sp, #4]
100019e2:	9202      	str	r2, [sp, #8]
    uint crystal_freq_khz = clock_get_hz(clk_ref) / 1000;
100019e4:	f7ff f962 	bl	10000cac <clock_get_hz>
100019e8:	21fa      	movs	r1, #250	; 0xfa
100019ea:	0089      	lsls	r1, r1, #2
100019ec:	f7fe fc96 	bl	1000031c <__wrap___aeabi_uidiv>
100019f0:	2332      	movs	r3, #50	; 0x32
100019f2:	4682      	mov	sl, r0
100019f4:	33ff      	adds	r3, #255	; 0xff
100019f6:	4699      	mov	r9, r3
100019f8:	0086      	lsls	r6, r0, #2
100019fa:	4456      	add	r6, sl
100019fc:	01b6      	lsls	r6, r6, #6
    for (uint fbdiv = 320; fbdiv >= 16; fbdiv--) {
        uint vco = fbdiv * crystal_freq_khz;
        if (vco < 400000 || vco > 1600000) continue;
100019fe:	4b4f      	ldr	r3, [pc, #316]	; (10001b3c <check_sys_clock_khz+0x170>)
10001a00:	4a4f      	ldr	r2, [pc, #316]	; (10001b40 <check_sys_clock_khz+0x174>)
10001a02:	18f3      	adds	r3, r6, r3
        for (uint postdiv1 = 7; postdiv1 >= 1; postdiv1--) {
10001a04:	2407      	movs	r4, #7
        if (vco < 400000 || vco > 1600000) continue;
10001a06:	4293      	cmp	r3, r2
10001a08:	d90e      	bls.n	10001a28 <check_sys_clock_khz+0x5c>
    for (uint fbdiv = 320; fbdiv >= 16; fbdiv--) {
10001a0a:	2301      	movs	r3, #1
10001a0c:	425b      	negs	r3, r3
10001a0e:	469c      	mov	ip, r3
10001a10:	4653      	mov	r3, sl
10001a12:	44e1      	add	r9, ip
10001a14:	1af6      	subs	r6, r6, r3
10001a16:	464b      	mov	r3, r9
10001a18:	2b00      	cmp	r3, #0
10001a1a:	d1f0      	bne.n	100019fe <check_sys_clock_khz+0x32>
                    return true;
                }
            }
        }
    }
    return false;
10001a1c:	2000      	movs	r0, #0
10001a1e:	e05d      	b.n	10001adc <check_sys_clock_khz+0x110>
                if (out == freq_khz && !(vco % (postdiv1 * postdiv2))) {
10001a20:	2900      	cmp	r1, #0
10001a22:	d100      	bne.n	10001a26 <check_sys_clock_khz+0x5a>
10001a24:	e086      	b.n	10001b34 <check_sys_clock_khz+0x168>
10001a26:	2406      	movs	r4, #6
                uint out = vco / (postdiv1 * postdiv2);
10001a28:	0021      	movs	r1, r4
10001a2a:	0030      	movs	r0, r6
10001a2c:	4361      	muls	r1, r4
10001a2e:	f7fe fc75 	bl	1000031c <__wrap___aeabi_uidiv>
                if (out == freq_khz && !(vco % (postdiv1 * postdiv2))) {
10001a32:	4287      	cmp	r7, r0
10001a34:	d042      	beq.n	10001abc <check_sys_clock_khz+0xf0>
            for (uint postdiv2 = postdiv1; postdiv2 >= 1; postdiv2--) {
10001a36:	1e63      	subs	r3, r4, #1
10001a38:	4698      	mov	r8, r3
10001a3a:	2c01      	cmp	r4, #1
10001a3c:	d0e5      	beq.n	10001a0a <check_sys_clock_khz+0x3e>
                uint out = vco / (postdiv1 * postdiv2);
10001a3e:	001d      	movs	r5, r3
10001a40:	4365      	muls	r5, r4
10001a42:	0030      	movs	r0, r6
10001a44:	0029      	movs	r1, r5
10001a46:	f7fe fc69 	bl	1000031c <__wrap___aeabi_uidiv>
                if (out == freq_khz && !(vco % (postdiv1 * postdiv2))) {
10001a4a:	4287      	cmp	r7, r0
10001a4c:	d04d      	beq.n	10001aea <check_sys_clock_khz+0x11e>
            for (uint postdiv2 = postdiv1; postdiv2 >= 1; postdiv2--) {
10001a4e:	1ea3      	subs	r3, r4, #2
10001a50:	469b      	mov	fp, r3
10001a52:	2c02      	cmp	r4, #2
10001a54:	d04f      	beq.n	10001af6 <check_sys_clock_khz+0x12a>
                uint out = vco / (postdiv1 * postdiv2);
10001a56:	1b2d      	subs	r5, r5, r4
10001a58:	0029      	movs	r1, r5
10001a5a:	0030      	movs	r0, r6
10001a5c:	f7fe fc5e 	bl	1000031c <__wrap___aeabi_uidiv>
                if (out == freq_khz && !(vco % (postdiv1 * postdiv2))) {
10001a60:	4287      	cmp	r7, r0
10001a62:	d04a      	beq.n	10001afa <check_sys_clock_khz+0x12e>
            for (uint postdiv2 = postdiv1; postdiv2 >= 1; postdiv2--) {
10001a64:	1ee3      	subs	r3, r4, #3
10001a66:	469b      	mov	fp, r3
10001a68:	2c03      	cmp	r4, #3
10001a6a:	d061      	beq.n	10001b30 <check_sys_clock_khz+0x164>
                uint out = vco / (postdiv1 * postdiv2);
10001a6c:	1b2d      	subs	r5, r5, r4
10001a6e:	0029      	movs	r1, r5
10001a70:	0030      	movs	r0, r6
10001a72:	f7fe fc53 	bl	1000031c <__wrap___aeabi_uidiv>
                if (out == freq_khz && !(vco % (postdiv1 * postdiv2))) {
10001a76:	4287      	cmp	r7, r0
10001a78:	d043      	beq.n	10001b02 <check_sys_clock_khz+0x136>
            for (uint postdiv2 = postdiv1; postdiv2 >= 1; postdiv2--) {
10001a7a:	1f23      	subs	r3, r4, #4
10001a7c:	469b      	mov	fp, r3
10001a7e:	2c04      	cmp	r4, #4
10001a80:	d045      	beq.n	10001b0e <check_sys_clock_khz+0x142>
                uint out = vco / (postdiv1 * postdiv2);
10001a82:	1b2d      	subs	r5, r5, r4
10001a84:	0029      	movs	r1, r5
10001a86:	0030      	movs	r0, r6
10001a88:	f7fe fc48 	bl	1000031c <__wrap___aeabi_uidiv>
                if (out == freq_khz && !(vco % (postdiv1 * postdiv2))) {
10001a8c:	4287      	cmp	r7, r0
10001a8e:	d040      	beq.n	10001b12 <check_sys_clock_khz+0x146>
            for (uint postdiv2 = postdiv1; postdiv2 >= 1; postdiv2--) {
10001a90:	1f63      	subs	r3, r4, #5
10001a92:	469b      	mov	fp, r3
10001a94:	2c05      	cmp	r4, #5
10001a96:	d042      	beq.n	10001b1e <check_sys_clock_khz+0x152>
                uint out = vco / (postdiv1 * postdiv2);
10001a98:	1b2d      	subs	r5, r5, r4
10001a9a:	0029      	movs	r1, r5
10001a9c:	0030      	movs	r0, r6
10001a9e:	f7fe fc3d 	bl	1000031c <__wrap___aeabi_uidiv>
                if (out == freq_khz && !(vco % (postdiv1 * postdiv2))) {
10001aa2:	4287      	cmp	r7, r0
10001aa4:	d03d      	beq.n	10001b22 <check_sys_clock_khz+0x156>
            for (uint postdiv2 = postdiv1; postdiv2 >= 1; postdiv2--) {
10001aa6:	4643      	mov	r3, r8
10001aa8:	2b05      	cmp	r3, #5
10001aaa:	d03f      	beq.n	10001b2c <check_sys_clock_khz+0x160>
                uint out = vco / (postdiv1 * postdiv2);
10001aac:	0030      	movs	r0, r6
10001aae:	1fe9      	subs	r1, r5, #7
10001ab0:	f7fe fc34 	bl	1000031c <__wrap___aeabi_uidiv>
                if (out == freq_khz && !(vco % (postdiv1 * postdiv2))) {
10001ab4:	4287      	cmp	r7, r0
10001ab6:	d0b3      	beq.n	10001a20 <check_sys_clock_khz+0x54>
10001ab8:	2406      	movs	r4, #6
10001aba:	e7b5      	b.n	10001a28 <check_sys_clock_khz+0x5c>
10001abc:	2900      	cmp	r1, #0
10001abe:	d1ba      	bne.n	10001a36 <check_sys_clock_khz+0x6a>
10001ac0:	46a0      	mov	r8, r4
                    *postdiv_out = postdiv2;
10001ac2:	4642      	mov	r2, r8
                    return true;
10001ac4:	2001      	movs	r0, #1
                    *vco_out = vco * 1000;
10001ac6:	0173      	lsls	r3, r6, #5
10001ac8:	1b9b      	subs	r3, r3, r6
10001aca:	009b      	lsls	r3, r3, #2
10001acc:	199e      	adds	r6, r3, r6
10001ace:	9b01      	ldr	r3, [sp, #4]
10001ad0:	00f6      	lsls	r6, r6, #3
10001ad2:	601e      	str	r6, [r3, #0]
                    *postdiv1_out = postdiv1;
10001ad4:	9b02      	ldr	r3, [sp, #8]
10001ad6:	601c      	str	r4, [r3, #0]
                    *postdiv_out = postdiv2;
10001ad8:	9b03      	ldr	r3, [sp, #12]
10001ada:	601a      	str	r2, [r3, #0]
}
10001adc:	b005      	add	sp, #20
10001ade:	bcf0      	pop	{r4, r5, r6, r7}
10001ae0:	46bb      	mov	fp, r7
10001ae2:	46b2      	mov	sl, r6
10001ae4:	46a9      	mov	r9, r5
10001ae6:	46a0      	mov	r8, r4
10001ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if (out == freq_khz && !(vco % (postdiv1 * postdiv2))) {
10001aea:	2900      	cmp	r1, #0
10001aec:	d0e9      	beq.n	10001ac2 <check_sys_clock_khz+0xf6>
            for (uint postdiv2 = postdiv1; postdiv2 >= 1; postdiv2--) {
10001aee:	1ea3      	subs	r3, r4, #2
10001af0:	469b      	mov	fp, r3
10001af2:	2c02      	cmp	r4, #2
10001af4:	d1af      	bne.n	10001a56 <check_sys_clock_khz+0x8a>
10001af6:	2401      	movs	r4, #1
10001af8:	e796      	b.n	10001a28 <check_sys_clock_khz+0x5c>
                if (out == freq_khz && !(vco % (postdiv1 * postdiv2))) {
10001afa:	2900      	cmp	r1, #0
10001afc:	d1b2      	bne.n	10001a64 <check_sys_clock_khz+0x98>
10001afe:	46d8      	mov	r8, fp
10001b00:	e7df      	b.n	10001ac2 <check_sys_clock_khz+0xf6>
10001b02:	2900      	cmp	r1, #0
10001b04:	d0fb      	beq.n	10001afe <check_sys_clock_khz+0x132>
            for (uint postdiv2 = postdiv1; postdiv2 >= 1; postdiv2--) {
10001b06:	1f23      	subs	r3, r4, #4
10001b08:	469b      	mov	fp, r3
10001b0a:	2c04      	cmp	r4, #4
10001b0c:	d1b9      	bne.n	10001a82 <check_sys_clock_khz+0xb6>
10001b0e:	2403      	movs	r4, #3
10001b10:	e78a      	b.n	10001a28 <check_sys_clock_khz+0x5c>
                if (out == freq_khz && !(vco % (postdiv1 * postdiv2))) {
10001b12:	2900      	cmp	r1, #0
10001b14:	d0f3      	beq.n	10001afe <check_sys_clock_khz+0x132>
            for (uint postdiv2 = postdiv1; postdiv2 >= 1; postdiv2--) {
10001b16:	1f63      	subs	r3, r4, #5
10001b18:	469b      	mov	fp, r3
10001b1a:	2c05      	cmp	r4, #5
10001b1c:	d1bc      	bne.n	10001a98 <check_sys_clock_khz+0xcc>
10001b1e:	2404      	movs	r4, #4
10001b20:	e782      	b.n	10001a28 <check_sys_clock_khz+0x5c>
                if (out == freq_khz && !(vco % (postdiv1 * postdiv2))) {
10001b22:	2900      	cmp	r1, #0
10001b24:	d0eb      	beq.n	10001afe <check_sys_clock_khz+0x132>
            for (uint postdiv2 = postdiv1; postdiv2 >= 1; postdiv2--) {
10001b26:	4643      	mov	r3, r8
10001b28:	2b05      	cmp	r3, #5
10001b2a:	d1bf      	bne.n	10001aac <check_sys_clock_khz+0xe0>
10001b2c:	2405      	movs	r4, #5
10001b2e:	e77b      	b.n	10001a28 <check_sys_clock_khz+0x5c>
10001b30:	2402      	movs	r4, #2
10001b32:	e779      	b.n	10001a28 <check_sys_clock_khz+0x5c>
10001b34:	2301      	movs	r3, #1
10001b36:	4698      	mov	r8, r3
10001b38:	e7c3      	b.n	10001ac2 <check_sys_clock_khz+0xf6>
10001b3a:	46c0      	nop			; (mov r8, r8)
10001b3c:	fff9e580 	.word	0xfff9e580
10001b40:	00124f80 	.word	0x00124f80

10001b44 <spin_locks_reset>:
    *lock = 0;
10001b44:	2100      	movs	r1, #0

static void check_lock_num(uint __unused lock_num) {
    invalid_params_if(SYNC, lock_num >= 32);
}

void spin_locks_reset(void) {
10001b46:	4b04      	ldr	r3, [pc, #16]	; (10001b58 <spin_locks_reset+0x14>)
    for (uint i = 0; i < NUM_SPIN_LOCKS; i++) {
10001b48:	4a04      	ldr	r2, [pc, #16]	; (10001b5c <spin_locks_reset+0x18>)
    __asm volatile ("dmb");
10001b4a:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001b4e:	c302      	stmia	r3!, {r1}
10001b50:	4293      	cmp	r3, r2
10001b52:	d1fa      	bne.n	10001b4a <spin_locks_reset+0x6>
        spin_unlock_unsafe(spin_lock_instance(i));
    }
}
10001b54:	4770      	bx	lr
10001b56:	46c0      	nop			; (mov r8, r8)
10001b58:	d0000100 	.word	0xd0000100
10001b5c:	d0000180 	.word	0xd0000180

10001b60 <next_striped_spin_lock_num>:
    spin_unlock_unsafe(lock);
    return lock;
}

uint next_striped_spin_lock_num() {
    uint rc = striped_spin_lock_num++;
10001b60:	4a04      	ldr	r2, [pc, #16]	; (10001b74 <next_striped_spin_lock_num+0x14>)
10001b62:	7810      	ldrb	r0, [r2, #0]
10001b64:	1c43      	adds	r3, r0, #1
10001b66:	b2db      	uxtb	r3, r3
    if (striped_spin_lock_num > PICO_SPINLOCK_ID_STRIPED_LAST) {
10001b68:	2b17      	cmp	r3, #23
10001b6a:	d900      	bls.n	10001b6e <next_striped_spin_lock_num+0xe>
        striped_spin_lock_num = PICO_SPINLOCK_ID_STRIPED_FIRST;
10001b6c:	2310      	movs	r3, #16
10001b6e:	7013      	strb	r3, [r2, #0]
    }
    return rc;
}
10001b70:	4770      	bx	lr
10001b72:	46c0      	nop			; (mov r8, r8)
10001b74:	20000318 	.word	0x20000318

10001b78 <timer_pool_entry_comparator>:
}
#endif

static inline alarm_pool_entry_t *get_entry(alarm_pool_t *pool, pheap_node_id_t id) {
    assert(id && id <= pool->heap->max_nodes);
    return pool->entries + id - 1;
10001b78:	6883      	ldr	r3, [r0, #8]
10001b7a:	480b      	ldr	r0, [pc, #44]	; (10001ba8 <timer_pool_entry_comparator+0x30>)
static inline uint8_t *get_entry_id_high(alarm_pool_t *pool, pheap_node_id_t id) {
    assert(id && id <= pool->heap->max_nodes);
    return pool->entry_ids_high + id - 1;
}

bool timer_pool_entry_comparator(void *user_data, pheap_node_id_t a, pheap_node_id_t b) {
10001b7c:	b510      	push	{r4, lr}
    return pool->entries + id - 1;
10001b7e:	4684      	mov	ip, r0
10001b80:	4461      	add	r1, ip
10001b82:	4462      	add	r2, ip
    alarm_pool_t *pool = (alarm_pool_t *)user_data;
    return to_us_since_boot(get_entry(pool, a)->target) < to_us_since_boot(get_entry(pool, b)->target);
10001b84:	0109      	lsls	r1, r1, #4
10001b86:	0112      	lsls	r2, r2, #4
10001b88:	189a      	adds	r2, r3, r2
10001b8a:	1859      	adds	r1, r3, r1
10001b8c:	6854      	ldr	r4, [r2, #4]
10001b8e:	684b      	ldr	r3, [r1, #4]
10001b90:	2001      	movs	r0, #1
10001b92:	429c      	cmp	r4, r3
10001b94:	d801      	bhi.n	10001b9a <timer_pool_entry_comparator+0x22>
10001b96:	d002      	beq.n	10001b9e <timer_pool_entry_comparator+0x26>
10001b98:	2000      	movs	r0, #0
10001b9a:	b2c0      	uxtb	r0, r0
}
10001b9c:	bd10      	pop	{r4, pc}
    return to_us_since_boot(get_entry(pool, a)->target) < to_us_since_boot(get_entry(pool, b)->target);
10001b9e:	6812      	ldr	r2, [r2, #0]
10001ba0:	680b      	ldr	r3, [r1, #0]
10001ba2:	429a      	cmp	r2, r3
10001ba4:	d8f9      	bhi.n	10001b9a <timer_pool_entry_comparator+0x22>
10001ba6:	e7f7      	b.n	10001b98 <timer_pool_entry_comparator+0x20>
10001ba8:	0fffffff 	.word	0x0fffffff

10001bac <add_alarm_under_lock.isra.0>:

static inline alarm_id_t make_public_id(uint8_t id_high, pheap_node_id_t id) {
    return ((uint)id_high << 8u * sizeof(id)) | id;
}

static alarm_id_t add_alarm_under_lock(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
10001bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10001bae:	46de      	mov	lr, fp
10001bb0:	4657      	mov	r7, sl
10001bb2:	464e      	mov	r6, r9
10001bb4:	4645      	mov	r5, r8
10001bb6:	b5e0      	push	{r5, r6, r7, lr}
10001bb8:	001f      	movs	r7, r3
10001bba:	ab0d      	add	r3, sp, #52	; 0x34
10001bbc:	781b      	ldrb	r3, [r3, #0]
10001bbe:	0005      	movs	r5, r0
10001bc0:	469b      	mov	fp, r3
                                       void *user_data, alarm_id_t reuse_id, bool create_if_past, bool *missed) {
    alarm_id_t id;
    if (reuse_id) {
10001bc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
static alarm_id_t add_alarm_under_lock(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
10001bc4:	0016      	movs	r6, r2
    if (reuse_id) {
10001bc6:	2b00      	cmp	r3, #0
10001bc8:	d045      	beq.n	10001c56 <add_alarm_under_lock.isra.0+0xaa>
    return pool->entries + id - 1;
10001bca:	4a3f      	ldr	r2, [pc, #252]	; (10001cc8 <add_alarm_under_lock.isra.0+0x11c>)
        id = reuse_id;
    } else {
        id = ph_new_node(pool->heap);
    }
    if (id) {
        alarm_pool_entry_t *entry = get_entry(pool, id);
10001bcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return pool->entries + id - 1;
10001bce:	4694      	mov	ip, r2
        alarm_pool_entry_t *entry = get_entry(pool, id);
10001bd0:	b2db      	uxtb	r3, r3
    return pool->entries + id - 1;
10001bd2:	68aa      	ldr	r2, [r5, #8]
        alarm_pool_entry_t *entry = get_entry(pool, id);
10001bd4:	469a      	mov	sl, r3
    return pool->entries + id - 1;
10001bd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        entry->target = time;
        entry->callback = callback;
        entry->user_data = user_data;
        if (id == ph_insert(pool->heap, id)) {
10001bd8:	682c      	ldr	r4, [r5, #0]
    return pool->entries + id - 1;
10001bda:	4463      	add	r3, ip
10001bdc:	4694      	mov	ip, r2
10001bde:	011b      	lsls	r3, r3, #4
        entry->callback = callback;
10001be0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    return pool->entries + id - 1;
10001be2:	4463      	add	r3, ip
        entry->callback = callback;
10001be4:	609a      	str	r2, [r3, #8]
        entry->user_data = user_data;
10001be6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        entry->target = time;
10001be8:	601e      	str	r6, [r3, #0]
        entry->user_data = user_data;
10001bea:	60da      	str	r2, [r3, #12]
10001bec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        entry->target = time;
10001bee:	605f      	str	r7, [r3, #4]
10001bf0:	4694      	mov	ip, r2
10001bf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hn->child = hn->sibling = hn->parent = 0;
10001bf4:	2200      	movs	r2, #0
    return heap->nodes + id - 1;
10001bf6:	005b      	lsls	r3, r3, #1
10001bf8:	4463      	add	r3, ip
10001bfa:	3b03      	subs	r3, #3
10001bfc:	4698      	mov	r8, r3
10001bfe:	6823      	ldr	r3, [r4, #0]
10001c00:	4443      	add	r3, r8
    hn->child = hn->sibling = hn->parent = 0;
10001c02:	709a      	strb	r2, [r3, #2]
10001c04:	705a      	strb	r2, [r3, #1]
10001c06:	701a      	strb	r2, [r3, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10001c08:	7b63      	ldrb	r3, [r4, #13]
10001c0a:	4699      	mov	r9, r3
    if (!a) return b;
10001c0c:	2b00      	cmp	r3, #0
10001c0e:	d042      	beq.n	10001c96 <add_alarm_under_lock.isra.0+0xea>
    if (heap->comparator(heap->user_data, a, b)) {
10001c10:	4652      	mov	r2, sl
10001c12:	0019      	movs	r1, r3
10001c14:	68a0      	ldr	r0, [r4, #8]
10001c16:	6863      	ldr	r3, [r4, #4]
10001c18:	4798      	blx	r3
    return heap->nodes + id - 1;
10001c1a:	6822      	ldr	r2, [r4, #0]
    if (heap->comparator(heap->user_data, a, b)) {
10001c1c:	2800      	cmp	r0, #0
10001c1e:	d02b      	beq.n	10001c78 <add_alarm_under_lock.isra.0+0xcc>
    return heap->nodes + id - 1;
10001c20:	464b      	mov	r3, r9
10001c22:	005b      	lsls	r3, r3, #1
10001c24:	444b      	add	r3, r9
10001c26:	3b03      	subs	r3, #3
10001c28:	18d1      	adds	r1, r2, r3
10001c2a:	468c      	mov	ip, r1
10001c2c:	4641      	mov	r1, r8
    c->parent = parent_id;
10001c2e:	4648      	mov	r0, r9
    return heap->nodes + id - 1;
10001c30:	1851      	adds	r1, r2, r1
    c->parent = parent_id;
10001c32:	7088      	strb	r0, [r1, #2]
    if (!n->child) {
10001c34:	5cd3      	ldrb	r3, [r2, r3]
10001c36:	2b00      	cmp	r3, #0
10001c38:	d142      	bne.n	10001cc0 <add_alarm_under_lock.isra.0+0x114>
        n->child = child_id;
10001c3a:	4653      	mov	r3, sl
10001c3c:	4662      	mov	r2, ip
10001c3e:	7013      	strb	r3, [r2, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10001c40:	464b      	mov	r3, r9
10001c42:	7363      	strb	r3, [r4, #13]
        if (id == ph_insert(pool->heap, id)) {
10001c44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10001c46:	4599      	cmp	r9, r3
10001c48:	d027      	beq.n	10001c9a <add_alarm_under_lock.isra.0+0xee>
            }
            if (missed) *missed = is_missed;
        }
    }
    return id;
}
10001c4a:	bcf0      	pop	{r4, r5, r6, r7}
10001c4c:	46bb      	mov	fp, r7
10001c4e:	46b2      	mov	sl, r6
10001c50:	46a9      	mov	r9, r5
10001c52:	46a0      	mov	r8, r4
10001c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        id = ph_new_node(pool->heap);
10001c56:	6802      	ldr	r2, [r0, #0]
    if (!heap->free_head_id) return 0;
10001c58:	7b94      	ldrb	r4, [r2, #14]
10001c5a:	2c00      	cmp	r4, #0
10001c5c:	d0f5      	beq.n	10001c4a <add_alarm_under_lock.isra.0+0x9e>
    heap->free_head_id = ph_get_node(heap, id)->sibling;
10001c5e:	6811      	ldr	r1, [r2, #0]
10001c60:	0063      	lsls	r3, r4, #1
10001c62:	468c      	mov	ip, r1
10001c64:	191b      	adds	r3, r3, r4
10001c66:	4463      	add	r3, ip
10001c68:	3b03      	subs	r3, #3
10001c6a:	785b      	ldrb	r3, [r3, #1]
10001c6c:	7393      	strb	r3, [r2, #14]
    if (!heap->free_head_id) heap->free_tail_id = 0;
10001c6e:	2b00      	cmp	r3, #0
10001c70:	d100      	bne.n	10001c74 <add_alarm_under_lock.isra.0+0xc8>
10001c72:	73d3      	strb	r3, [r2, #15]
10001c74:	940c      	str	r4, [sp, #48]	; 0x30
    if (id) {
10001c76:	e7a8      	b.n	10001bca <add_alarm_under_lock.isra.0+0x1e>
    return heap->nodes + id - 1;
10001c78:	4643      	mov	r3, r8
10001c7a:	18d1      	adds	r1, r2, r3
10001c7c:	464b      	mov	r3, r9
    c->parent = parent_id;
10001c7e:	4650      	mov	r0, sl
    return heap->nodes + id - 1;
10001c80:	005b      	lsls	r3, r3, #1
10001c82:	444b      	add	r3, r9
10001c84:	3b03      	subs	r3, #3
10001c86:	18d3      	adds	r3, r2, r3
    c->parent = parent_id;
10001c88:	7098      	strb	r0, [r3, #2]
    if (!n->child) {
10001c8a:	4640      	mov	r0, r8
10001c8c:	5c12      	ldrb	r2, [r2, r0]
10001c8e:	2a00      	cmp	r2, #0
10001c90:	d118      	bne.n	10001cc4 <add_alarm_under_lock.isra.0+0x118>
        n->child = child_id;
10001c92:	464b      	mov	r3, r9
10001c94:	700b      	strb	r3, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10001c96:	4653      	mov	r3, sl
10001c98:	7363      	strb	r3, [r4, #13]
            bool is_missed = hardware_alarm_set_target(pool->hardware_alarm_num, time);
10001c9a:	0032      	movs	r2, r6
10001c9c:	003b      	movs	r3, r7
10001c9e:	7d28      	ldrb	r0, [r5, #20]
10001ca0:	f000 f9ec 	bl	1000207c <hardware_alarm_set_target>
10001ca4:	1e04      	subs	r4, r0, #0
            if (is_missed && !create_if_past) {
10001ca6:	d006      	beq.n	10001cb6 <add_alarm_under_lock.isra.0+0x10a>
10001ca8:	465b      	mov	r3, fp
10001caa:	2b00      	cmp	r3, #0
10001cac:	d103      	bne.n	10001cb6 <add_alarm_under_lock.isra.0+0x10a>
                ph_delete(pool->heap, id);
10001cae:	4651      	mov	r1, sl
10001cb0:	6828      	ldr	r0, [r5, #0]
10001cb2:	f7ff fc07 	bl	100014c4 <ph_delete>
            if (missed) *missed = is_missed;
10001cb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10001cb8:	2b00      	cmp	r3, #0
10001cba:	d0c6      	beq.n	10001c4a <add_alarm_under_lock.isra.0+0x9e>
10001cbc:	701c      	strb	r4, [r3, #0]
    return id;
10001cbe:	e7c4      	b.n	10001c4a <add_alarm_under_lock.isra.0+0x9e>
        c->sibling = n->child;
10001cc0:	704b      	strb	r3, [r1, #1]
10001cc2:	e7ba      	b.n	10001c3a <add_alarm_under_lock.isra.0+0x8e>
10001cc4:	705a      	strb	r2, [r3, #1]
10001cc6:	e7e4      	b.n	10001c92 <add_alarm_under_lock.isra.0+0xe6>
10001cc8:	0fffffff 	.word	0x0fffffff

10001ccc <alarm_pool_alarm_callback>:

static void alarm_pool_alarm_callback(uint alarm_num) {
10001ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
10001cce:	46de      	mov	lr, fp
10001cd0:	464e      	mov	r6, r9
10001cd2:	4657      	mov	r7, sl
10001cd4:	4645      	mov	r5, r8
10001cd6:	2300      	movs	r3, #0
10001cd8:	b5e0      	push	{r5, r6, r7, lr}
10001cda:	b08d      	sub	sp, #52	; 0x34
10001cdc:	930a      	str	r3, [sp, #40]	; 0x28
    // note this is called from timer IRQ handler
    alarm_pool_t *pool = pools[alarm_num];
10001cde:	4b6b      	ldr	r3, [pc, #428]	; (10001e8c <alarm_pool_alarm_callback+0x1c0>)
10001ce0:	0082      	lsls	r2, r0, #2
10001ce2:	58d3      	ldr	r3, [r2, r3]
static void alarm_pool_alarm_callback(uint alarm_num) {
10001ce4:	900b      	str	r0, [sp, #44]	; 0x2c
    alarm_pool_t *pool = pools[alarm_num];
10001ce6:	4699      	mov	r9, r3
    bool again;
    do {
        absolute_time_t now = get_absolute_time();
        alarm_callback_t callback = NULL;
        absolute_time_t target = nil_time;
        void *user_data = NULL;
10001ce8:	2300      	movs	r3, #0
10001cea:	469b      	mov	fp, r3
10001cec:	464b      	mov	r3, r9
10001cee:	9307      	str	r3, [sp, #28]
 * \sa sleep_until()
 * \sa time_us_64()
 */
static inline absolute_time_t get_absolute_time() {
    absolute_time_t t;
    update_us_since_boot(&t, time_us_64());
10001cf0:	f000 f974 	bl	10001fdc <time_us_64>
        uint8_t id_high;
        again = false;
        uint32_t save = spin_lock_blocking(pool->lock);
10001cf4:	9c07      	ldr	r4, [sp, #28]
10001cf6:	0006      	movs	r6, r0
10001cf8:	000f      	movs	r7, r1
10001cfa:	6862      	ldr	r2, [r4, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001cfc:	f3ef 8510 	mrs	r5, PRIMASK
    __asm volatile ("cpsid i");
10001d00:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10001d02:	6813      	ldr	r3, [r2, #0]
10001d04:	2b00      	cmp	r3, #0
10001d06:	d0fc      	beq.n	10001d02 <alarm_pool_alarm_callback+0x36>
    __asm volatile ("dmb");
10001d08:	0022      	movs	r2, r4
10001d0a:	9407      	str	r4, [sp, #28]
10001d0c:	f3bf 8f5f 	dmb	sy
        pheap_node_id_t next_id = ph_peek_head(pool->heap);
10001d10:	6824      	ldr	r4, [r4, #0]
    return heap->root_id;
10001d12:	7b63      	ldrb	r3, [r4, #13]
10001d14:	4699      	mov	r9, r3
        if (next_id) {
10001d16:	2b00      	cmp	r3, #0
10001d18:	d067      	beq.n	10001dea <alarm_pool_alarm_callback+0x11e>
    return pool->entries + id - 1;
10001d1a:	6892      	ldr	r2, [r2, #8]
10001d1c:	4b5c      	ldr	r3, [pc, #368]	; (10001e90 <alarm_pool_alarm_callback+0x1c4>)
10001d1e:	4690      	mov	r8, r2
10001d20:	444b      	add	r3, r9
10001d22:	011b      	lsls	r3, r3, #4
10001d24:	4498      	add	r8, r3
            alarm_pool_entry_t *entry = get_entry(pool, next_id);
            if (absolute_time_diff_us(now, entry->target) <= 0) {
10001d26:	4643      	mov	r3, r8
10001d28:	681a      	ldr	r2, [r3, #0]
10001d2a:	685b      	ldr	r3, [r3, #4]
 * \param to the second timestamp
 * \return the number of microseconds between the two timestamps (positive if `to` is after `from` except
 * in case of overflow)
 */
static inline int64_t absolute_time_diff_us(absolute_time_t from, absolute_time_t to) {
    return to_us_since_boot(to) - to_us_since_boot(from);
10001d2c:	0010      	movs	r0, r2
10001d2e:	0019      	movs	r1, r3
10001d30:	1b80      	subs	r0, r0, r6
10001d32:	41b9      	sbcs	r1, r7
10001d34:	2900      	cmp	r1, #0
10001d36:	dd5f      	ble.n	10001df8 <alarm_pool_alarm_callback+0x12c>
                user_data = entry->user_data;
                assert(callback);
                id_high = *get_entry_id_high(pool, next_id);
                pool->alarm_in_progress = make_public_id(id_high, removed_id);
            } else {
                if (hardware_alarm_set_target(alarm_num, entry->target)) {
10001d38:	980b      	ldr	r0, [sp, #44]	; 0x2c
10001d3a:	f000 f99f 	bl	1000207c <hardware_alarm_set_target>
        void *user_data = NULL;
10001d3e:	2300      	movs	r3, #0
        absolute_time_t target = nil_time;
10001d40:	2600      	movs	r6, #0
        void *user_data = NULL;
10001d42:	4698      	mov	r8, r3
        absolute_time_t target = nil_time;
10001d44:	2700      	movs	r7, #0
        alarm_callback_t callback = NULL;
10001d46:	469a      	mov	sl, r3
                    again = true;
                }
            }
        }
        spin_unlock(pool->lock, save);
10001d48:	9c07      	ldr	r4, [sp, #28]
10001d4a:	6863      	ldr	r3, [r4, #4]
10001d4c:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001d50:	465a      	mov	r2, fp
10001d52:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001d54:	f385 8810 	msr	PRIMASK, r5
        if (callback) {
10001d58:	4653      	mov	r3, sl
10001d5a:	2b00      	cmp	r3, #0
10001d5c:	d108      	bne.n	10001d70 <alarm_pool_alarm_callback+0xa4>
            }
            pool->alarm_in_progress = 0;
            spin_unlock(pool->lock, save);
            again = true;
        }
    } while (again);
10001d5e:	2800      	cmp	r0, #0
10001d60:	d1c6      	bne.n	10001cf0 <alarm_pool_alarm_callback+0x24>
}
10001d62:	b00d      	add	sp, #52	; 0x34
10001d64:	bcf0      	pop	{r4, r5, r6, r7}
10001d66:	46bb      	mov	fp, r7
10001d68:	46b2      	mov	sl, r6
10001d6a:	46a9      	mov	r9, r5
10001d6c:	46a0      	mov	r8, r4
10001d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ((uint)id_high << 8u * sizeof(id)) | id;
10001d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            int64_t repeat = callback(make_public_id(id_high, next_id), user_data);
10001d72:	4641      	mov	r1, r8
    return ((uint)id_high << 8u * sizeof(id)) | id;
10001d74:	0218      	lsls	r0, r3, #8
10001d76:	464b      	mov	r3, r9
10001d78:	4318      	orrs	r0, r3
            int64_t repeat = callback(make_public_id(id_high, next_id), user_data);
10001d7a:	47d0      	blx	sl
10001d7c:	9008      	str	r0, [sp, #32]
10001d7e:	9109      	str	r1, [sp, #36]	; 0x24
            save = spin_lock_blocking(pool->lock);
10001d80:	6862      	ldr	r2, [r4, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001d82:	f3ef 8510 	mrs	r5, PRIMASK
    __asm volatile ("cpsid i");
10001d86:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10001d88:	6813      	ldr	r3, [r2, #0]
10001d8a:	2b00      	cmp	r3, #0
10001d8c:	d0fc      	beq.n	10001d88 <alarm_pool_alarm_callback+0xbc>
    __asm volatile ("dmb");
10001d8e:	9407      	str	r4, [sp, #28]
10001d90:	f3bf 8f5f 	dmb	sy
            if (repeat < 0 && pool->alarm_in_progress) {
10001d94:	9908      	ldr	r1, [sp, #32]
10001d96:	9a09      	ldr	r2, [sp, #36]	; 0x24
10001d98:	2a00      	cmp	r2, #0
10001d9a:	db48      	blt.n	10001e2e <alarm_pool_alarm_callback+0x162>
            } else if (repeat > 0 && pool->alarm_in_progress) {
10001d9c:	4311      	orrs	r1, r2
10001d9e:	d003      	beq.n	10001da8 <alarm_pool_alarm_callback+0xdc>
10001da0:	9b07      	ldr	r3, [sp, #28]
10001da2:	691b      	ldr	r3, [r3, #16]
10001da4:	2b00      	cmp	r3, #0
10001da6:	d15d      	bne.n	10001e64 <alarm_pool_alarm_callback+0x198>
                ph_add_to_free_list(pool->heap, next_id);
10001da8:	9b07      	ldr	r3, [sp, #28]
10001daa:	681b      	ldr	r3, [r3, #0]

bool ph_delete(pheap_t *heap, pheap_node_id_t id);

static inline void ph_add_to_free_list(pheap_t *heap, pheap_node_id_t id) {
    assert(id && !ph_contains(heap, id));
    if (heap->free_tail_id) {
10001dac:	7bd9      	ldrb	r1, [r3, #15]
10001dae:	2900      	cmp	r1, #0
10001db0:	d007      	beq.n	10001dc2 <alarm_pool_alarm_callback+0xf6>
        ph_get_node(heap, heap->free_tail_id)->sibling = id;
10001db2:	004a      	lsls	r2, r1, #1
10001db4:	1852      	adds	r2, r2, r1
10001db6:	6819      	ldr	r1, [r3, #0]
10001db8:	468c      	mov	ip, r1
10001dba:	4649      	mov	r1, r9
10001dbc:	4462      	add	r2, ip
10001dbe:	3a03      	subs	r2, #3
10001dc0:	7051      	strb	r1, [r2, #1]
    }
    heap->free_tail_id = id;
10001dc2:	464a      	mov	r2, r9
10001dc4:	73da      	strb	r2, [r3, #15]
    return pool->entry_ids_high + id - 1;
10001dc6:	464b      	mov	r3, r9
10001dc8:	9a07      	ldr	r2, [sp, #28]
10001dca:	3b01      	subs	r3, #1
10001dcc:	68d1      	ldr	r1, [r2, #12]
                (*get_entry_id_high(pool, next_id))++; // we bump it for next use of id
10001dce:	5cca      	ldrb	r2, [r1, r3]
10001dd0:	3201      	adds	r2, #1
10001dd2:	54ca      	strb	r2, [r1, r3]
            pool->alarm_in_progress = 0;
10001dd4:	465b      	mov	r3, fp
10001dd6:	9a07      	ldr	r2, [sp, #28]
10001dd8:	6113      	str	r3, [r2, #16]
            spin_unlock(pool->lock, save);
10001dda:	6853      	ldr	r3, [r2, #4]
10001ddc:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001de0:	465a      	mov	r2, fp
10001de2:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001de4:	f385 8810 	msr	PRIMASK, r5
    } while (again);
10001de8:	e782      	b.n	10001cf0 <alarm_pool_alarm_callback+0x24>
        void *user_data = NULL;
10001dea:	2300      	movs	r3, #0
        absolute_time_t target = nil_time;
10001dec:	2600      	movs	r6, #0
        void *user_data = NULL;
10001dee:	4698      	mov	r8, r3
        absolute_time_t target = nil_time;
10001df0:	2700      	movs	r7, #0
        alarm_callback_t callback = NULL;
10001df2:	469a      	mov	sl, r3
        again = false;
10001df4:	2000      	movs	r0, #0
10001df6:	e7a7      	b.n	10001d48 <alarm_pool_alarm_callback+0x7c>
            if (absolute_time_diff_us(now, entry->target) <= 0) {
10001df8:	2900      	cmp	r1, #0
10001dfa:	d101      	bne.n	10001e00 <alarm_pool_alarm_callback+0x134>
10001dfc:	2800      	cmp	r0, #0
10001dfe:	d19b      	bne.n	10001d38 <alarm_pool_alarm_callback+0x6c>
                pheap_node_id_t __unused removed_id = ph_remove_head_reserve(pool->heap, true);
10001e00:	2101      	movs	r1, #1
10001e02:	0020      	movs	r0, r4
10001e04:	f7ff fae0 	bl	100013c8 <ph_remove_head_reserve>
                target = entry->target;
10001e08:	4643      	mov	r3, r8
10001e0a:	681e      	ldr	r6, [r3, #0]
10001e0c:	685f      	ldr	r7, [r3, #4]
                callback = entry->callback;
10001e0e:	689b      	ldr	r3, [r3, #8]
                id_high = *get_entry_id_high(pool, next_id);
10001e10:	9a07      	ldr	r2, [sp, #28]
                callback = entry->callback;
10001e12:	469a      	mov	sl, r3
                user_data = entry->user_data;
10001e14:	4643      	mov	r3, r8
10001e16:	68db      	ldr	r3, [r3, #12]
10001e18:	4698      	mov	r8, r3
                id_high = *get_entry_id_high(pool, next_id);
10001e1a:	68d3      	ldr	r3, [r2, #12]
10001e1c:	444b      	add	r3, r9
10001e1e:	3b01      	subs	r3, #1
10001e20:	781b      	ldrb	r3, [r3, #0]
10001e22:	930a      	str	r3, [sp, #40]	; 0x28
    return ((uint)id_high << 8u * sizeof(id)) | id;
10001e24:	021b      	lsls	r3, r3, #8
10001e26:	4303      	orrs	r3, r0
                pool->alarm_in_progress = make_public_id(id_high, removed_id);
10001e28:	6113      	str	r3, [r2, #16]
        again = false;
10001e2a:	2000      	movs	r0, #0
10001e2c:	e78c      	b.n	10001d48 <alarm_pool_alarm_callback+0x7c>
            if (repeat < 0 && pool->alarm_in_progress) {
10001e2e:	6923      	ldr	r3, [r4, #16]
10001e30:	2b00      	cmp	r3, #0
10001e32:	d0b9      	beq.n	10001da8 <alarm_pool_alarm_callback+0xdc>
    uint64_t delayed = base + us;
10001e34:	0033      	movs	r3, r6
10001e36:	003c      	movs	r4, r7
10001e38:	1a5b      	subs	r3, r3, r1
10001e3a:	4194      	sbcs	r4, r2
10001e3c:	001a      	movs	r2, r3
10001e3e:	0023      	movs	r3, r4
    if (delayed < base) {
10001e40:	42a7      	cmp	r7, r4
10001e42:	d819      	bhi.n	10001e78 <alarm_pool_alarm_callback+0x1ac>
10001e44:	429f      	cmp	r7, r3
10001e46:	d01b      	beq.n	10001e80 <alarm_pool_alarm_callback+0x1b4>
                add_alarm_under_lock(pool, delayed_by_us(get_absolute_time(), repeat), callback, user_data, next_id,
10001e48:	4659      	mov	r1, fp
10001e4a:	9104      	str	r1, [sp, #16]
10001e4c:	2101      	movs	r1, #1
10001e4e:	9103      	str	r1, [sp, #12]
10001e50:	4649      	mov	r1, r9
10001e52:	9102      	str	r1, [sp, #8]
10001e54:	4641      	mov	r1, r8
10001e56:	9101      	str	r1, [sp, #4]
10001e58:	4651      	mov	r1, sl
10001e5a:	9807      	ldr	r0, [sp, #28]
10001e5c:	9100      	str	r1, [sp, #0]
10001e5e:	f7ff fea5 	bl	10001bac <add_alarm_under_lock.isra.0>
10001e62:	e7b7      	b.n	10001dd4 <alarm_pool_alarm_callback+0x108>
    update_us_since_boot(&t, time_us_64());
10001e64:	f000 f8ba 	bl	10001fdc <time_us_64>
    uint64_t delayed = base + us;
10001e68:	9a08      	ldr	r2, [sp, #32]
10001e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    update_us_since_boot(&t, time_us_64());
10001e6c:	0006      	movs	r6, r0
10001e6e:	000f      	movs	r7, r1
    uint64_t delayed = base + us;
10001e70:	1992      	adds	r2, r2, r6
10001e72:	417b      	adcs	r3, r7
    if (delayed < base) {
10001e74:	4299      	cmp	r1, r3
10001e76:	d9e5      	bls.n	10001e44 <alarm_pool_alarm_callback+0x178>
        delayed = (uint64_t)-1;
10001e78:	2201      	movs	r2, #1
10001e7a:	4252      	negs	r2, r2
10001e7c:	17d3      	asrs	r3, r2, #31
10001e7e:	e7e3      	b.n	10001e48 <alarm_pool_alarm_callback+0x17c>
    if (delayed < base) {
10001e80:	4296      	cmp	r6, r2
10001e82:	d9e1      	bls.n	10001e48 <alarm_pool_alarm_callback+0x17c>
        delayed = (uint64_t)-1;
10001e84:	2201      	movs	r2, #1
10001e86:	4252      	negs	r2, r2
10001e88:	17d3      	asrs	r3, r2, #31
10001e8a:	e7dd      	b.n	10001e48 <alarm_pool_alarm_callback+0x17c>
10001e8c:	2000a424 	.word	0x2000a424
10001e90:	0fffffff 	.word	0x0fffffff

10001e94 <alarm_pool_init_default>:
void alarm_pool_init_default() {
10001e94:	b570      	push	{r4, r5, r6, lr}
    if (!default_alarm_pool) {
10001e96:	4c18      	ldr	r4, [pc, #96]	; (10001ef8 <alarm_pool_init_default+0x64>)
10001e98:	6823      	ldr	r3, [r4, #0]
10001e9a:	2b00      	cmp	r3, #0
10001e9c:	d000      	beq.n	10001ea0 <alarm_pool_init_default+0xc>
}
10001e9e:	bd70      	pop	{r4, r5, r6, pc}

// note the timer is create with IRQs on this core
alarm_pool_t *alarm_pool_create(uint hardware_alarm_num, uint max_timers) {
    hardware_alarm_claim(hardware_alarm_num);
10001ea0:	2003      	movs	r0, #3
10001ea2:	f000 f88f 	bl	10001fc4 <hardware_alarm_claim>
    hardware_alarm_cancel(hardware_alarm_num);
10001ea6:	2003      	movs	r0, #3
10001ea8:	f000 f94a 	bl	10002140 <hardware_alarm_cancel>
    hardware_alarm_set_callback(hardware_alarm_num, alarm_pool_alarm_callback);
10001eac:	4913      	ldr	r1, [pc, #76]	; (10001efc <alarm_pool_init_default+0x68>)
10001eae:	2003      	movs	r0, #3
10001eb0:	f000 f89e 	bl	10001ff0 <hardware_alarm_set_callback>
    alarm_pool_t *pool = (alarm_pool_t *)malloc(sizeof(alarm_pool_t));
10001eb4:	2018      	movs	r0, #24
10001eb6:	f7ff fb43 	bl	10001540 <__wrap_malloc>
10001eba:	0005      	movs	r5, r0
    pool->lock = spin_lock_instance(next_striped_spin_lock_num());
10001ebc:	f7ff fe50 	bl	10001b60 <next_striped_spin_lock_num>
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
10001ec0:	4b0f      	ldr	r3, [pc, #60]	; (10001f00 <alarm_pool_init_default+0x6c>)
    pool->heap = ph_create(max_timers, timer_pool_entry_comparator, pool);
10001ec2:	002a      	movs	r2, r5
10001ec4:	469c      	mov	ip, r3
10001ec6:	4460      	add	r0, ip
10001ec8:	0080      	lsls	r0, r0, #2
10001eca:	490e      	ldr	r1, [pc, #56]	; (10001f04 <alarm_pool_init_default+0x70>)
    pool->lock = spin_lock_instance(next_striped_spin_lock_num());
10001ecc:	6068      	str	r0, [r5, #4]
    pool->heap = ph_create(max_timers, timer_pool_entry_comparator, pool);
10001ece:	2010      	movs	r0, #16
10001ed0:	f7ff f984 	bl	100011dc <ph_create>
    pool->entries = (alarm_pool_entry_t *)calloc(max_timers, sizeof(alarm_pool_entry_t));
10001ed4:	2110      	movs	r1, #16
    pool->heap = ph_create(max_timers, timer_pool_entry_comparator, pool);
10001ed6:	6028      	str	r0, [r5, #0]
    pool->entries = (alarm_pool_entry_t *)calloc(max_timers, sizeof(alarm_pool_entry_t));
10001ed8:	2010      	movs	r0, #16
10001eda:	f7ff fb35 	bl	10001548 <__wrap_calloc>
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
10001ede:	2101      	movs	r1, #1
    pool->entries = (alarm_pool_entry_t *)calloc(max_timers, sizeof(alarm_pool_entry_t));
10001ee0:	60a8      	str	r0, [r5, #8]
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
10001ee2:	2010      	movs	r0, #16
10001ee4:	f7ff fb30 	bl	10001548 <__wrap_calloc>
    pool->hardware_alarm_num = hardware_alarm_num;
10001ee8:	2303      	movs	r3, #3
10001eea:	752b      	strb	r3, [r5, #20]
    pools[hardware_alarm_num] = pool;
10001eec:	4b06      	ldr	r3, [pc, #24]	; (10001f08 <alarm_pool_init_default+0x74>)
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
10001eee:	60e8      	str	r0, [r5, #12]
    pools[hardware_alarm_num] = pool;
10001ef0:	60dd      	str	r5, [r3, #12]
        default_alarm_pool = alarm_pool_create(PICO_TIME_DEFAULT_ALARM_POOL_HARDWARE_ALARM_NUM,
10001ef2:	6025      	str	r5, [r4, #0]
}
10001ef4:	e7d3      	b.n	10001e9e <alarm_pool_init_default+0xa>
10001ef6:	46c0      	nop			; (mov r8, r8)
10001ef8:	2000a40c 	.word	0x2000a40c
10001efc:	10001ccd 	.word	0x10001ccd
10001f00:	34000040 	.word	0x34000040
10001f04:	10001b79 	.word	0x10001b79
10001f08:	2000a424 	.word	0x2000a424

10001f0c <hardware_alarm_irq_handler>:

static inline uint harware_alarm_irq_number(uint alarm_num) {
    return TIMER_IRQ_0 + alarm_num;
}

static void hardware_alarm_irq_handler() {
10001f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
10001f0e:	46d6      	mov	lr, sl
10001f10:	464f      	mov	r7, r9
10001f12:	4646      	mov	r6, r8
10001f14:	b5c0      	push	{r6, r7, lr}
    // Determine which timer this IRQ is for
    uint32_t ipsr;
    __asm volatile ("mrs %0, ipsr" : "=r" (ipsr)::);
10001f16:	f3ef 8305 	mrs	r3, IPSR
    uint alarm_num = (ipsr & 0x3fu) - 16 - TIMER_IRQ_0;
10001f1a:	223f      	movs	r2, #63	; 0x3f
10001f1c:	4013      	ands	r3, r2
10001f1e:	0018      	movs	r0, r3
10001f20:	3810      	subs	r0, #16
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001f22:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10001f26:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10001f28:	4d20      	ldr	r5, [pc, #128]	; (10001fac <hardware_alarm_irq_handler+0xa0>)
10001f2a:	682a      	ldr	r2, [r5, #0]
10001f2c:	2a00      	cmp	r2, #0
10001f2e:	d0fc      	beq.n	10001f2a <hardware_alarm_irq_handler+0x1e>
    __asm volatile ("dmb");
10001f30:	f3bf 8f5f 	dmb	sy
    hardware_alarm_callback_t callback = NULL;

    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
    uint32_t save = spin_lock_blocking(lock);
    // Clear the timer IRQ (inside lock, because we check whether we have handled the IRQ yet in alarm_set by looking at the interrupt status
    timer_hw->intr = 1u << alarm_num;
10001f34:	2201      	movs	r2, #1
10001f36:	0011      	movs	r1, r2
10001f38:	4081      	lsls	r1, r0
10001f3a:	4c1d      	ldr	r4, [pc, #116]	; (10001fb0 <hardware_alarm_irq_handler+0xa4>)
10001f3c:	4688      	mov	r8, r1
10001f3e:	6361      	str	r1, [r4, #52]	; 0x34

    // make sure the IRQ is still valid
    if (timer_callbacks_pending & (1u << alarm_num)) {
10001f40:	491c      	ldr	r1, [pc, #112]	; (10001fb4 <hardware_alarm_irq_handler+0xa8>)
10001f42:	0017      	movs	r7, r2
10001f44:	780e      	ldrb	r6, [r1, #0]
10001f46:	468a      	mov	sl, r1
10001f48:	0031      	movs	r1, r6
10001f4a:	40c1      	lsrs	r1, r0
10001f4c:	400f      	ands	r7, r1
10001f4e:	420a      	tst	r2, r1
10001f50:	d109      	bne.n	10001f66 <hardware_alarm_irq_handler+0x5a>
10001f52:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001f56:	602f      	str	r7, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001f58:	f38c 8810 	msr	PRIMASK, ip
    spin_unlock(lock, save);

    if (callback) {
        callback(alarm_num);
    }
}
10001f5c:	bce0      	pop	{r5, r6, r7}
10001f5e:	46ba      	mov	sl, r7
10001f60:	46b1      	mov	r9, r6
10001f62:	46a8      	mov	r8, r5
10001f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (timer_hw->timerawh >= target_hi[alarm_num]) {
10001f66:	4914      	ldr	r1, [pc, #80]	; (10001fb8 <hardware_alarm_irq_handler+0xac>)
10001f68:	0082      	lsls	r2, r0, #2
10001f6a:	6a64      	ldr	r4, [r4, #36]	; 0x24
10001f6c:	5851      	ldr	r1, [r2, r1]
10001f6e:	428c      	cmp	r4, r1
10001f70:	d30f      	bcc.n	10001f92 <hardware_alarm_irq_handler+0x86>
            callback = alarm_callbacks[alarm_num];
10001f72:	4b12      	ldr	r3, [pc, #72]	; (10001fbc <hardware_alarm_irq_handler+0xb0>)
10001f74:	58d2      	ldr	r2, [r2, r3]
            timer_callbacks_pending &= ~(1u << alarm_num);
10001f76:	4643      	mov	r3, r8
10001f78:	439e      	bics	r6, r3
10001f7a:	4653      	mov	r3, sl
10001f7c:	701e      	strb	r6, [r3, #0]
    __asm volatile ("dmb");
10001f7e:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001f82:	2300      	movs	r3, #0
10001f84:	602b      	str	r3, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001f86:	f38c 8810 	msr	PRIMASK, ip
    if (callback) {
10001f8a:	2a00      	cmp	r2, #0
10001f8c:	d0e6      	beq.n	10001f5c <hardware_alarm_irq_handler+0x50>
        callback(alarm_num);
10001f8e:	4790      	blx	r2
}
10001f90:	e7e4      	b.n	10001f5c <hardware_alarm_irq_handler+0x50>
            timer_hw->alarm[alarm_num] = timer_hw->alarm[alarm_num]; // re-arm the timer
10001f92:	4a0b      	ldr	r2, [pc, #44]	; (10001fc0 <hardware_alarm_irq_handler+0xb4>)
10001f94:	009b      	lsls	r3, r3, #2
10001f96:	4690      	mov	r8, r2
10001f98:	4443      	add	r3, r8
10001f9a:	681a      	ldr	r2, [r3, #0]
10001f9c:	601a      	str	r2, [r3, #0]
    __asm volatile ("dmb");
10001f9e:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001fa2:	2300      	movs	r3, #0
10001fa4:	602b      	str	r3, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001fa6:	f38c 8810 	msr	PRIMASK, ip
    if (callback) {
10001faa:	e7d7      	b.n	10001f5c <hardware_alarm_irq_handler+0x50>
10001fac:	d0000128 	.word	0xd0000128
10001fb0:	40054000 	.word	0x40054000
10001fb4:	2000a457 	.word	0x2000a457
10001fb8:	2000a440 	.word	0x2000a440
10001fbc:	2000a2d4 	.word	0x2000a2d4
10001fc0:	40053fd0 	.word	0x40053fd0

10001fc4 <hardware_alarm_claim>:
void hardware_alarm_claim(uint alarm_num) {
10001fc4:	b510      	push	{r4, lr}
10001fc6:	0001      	movs	r1, r0
    hw_claim_or_assert(&claimed, alarm_num, "Hardware alarm %d already claimed");
10001fc8:	4a02      	ldr	r2, [pc, #8]	; (10001fd4 <hardware_alarm_claim+0x10>)
10001fca:	4803      	ldr	r0, [pc, #12]	; (10001fd8 <hardware_alarm_claim+0x14>)
10001fcc:	f7fe fc5a 	bl	10000884 <hw_claim_or_assert>
}
10001fd0:	bd10      	pop	{r4, pc}
10001fd2:	46c0      	nop			; (mov r8, r8)
10001fd4:	10002d04 	.word	0x10002d04
10001fd8:	2000a455 	.word	0x2000a455

10001fdc <time_us_64>:
    uint32_t hi = timer_hw->timerawh;
10001fdc:	4b03      	ldr	r3, [pc, #12]	; (10001fec <time_us_64+0x10>)
10001fde:	6a59      	ldr	r1, [r3, #36]	; 0x24
        lo = timer_hw->timerawl;
10001fe0:	000a      	movs	r2, r1
10001fe2:	6a98      	ldr	r0, [r3, #40]	; 0x28
        uint32_t next_hi = timer_hw->timerawh;
10001fe4:	6a59      	ldr	r1, [r3, #36]	; 0x24
        if (hi == next_hi) break;
10001fe6:	428a      	cmp	r2, r1
10001fe8:	d1fa      	bne.n	10001fe0 <time_us_64+0x4>
}
10001fea:	4770      	bx	lr
10001fec:	40054000 	.word	0x40054000

10001ff0 <hardware_alarm_set_callback>:

void hardware_alarm_set_callback(uint alarm_num, hardware_alarm_callback_t callback) {
10001ff0:	b570      	push	{r4, r5, r6, lr}
10001ff2:	0004      	movs	r4, r0
10001ff4:	000d      	movs	r5, r1
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001ff6:	f3ef 8610 	mrs	r6, PRIMASK
    __asm volatile ("cpsid i");
10001ffa:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10001ffc:	4a1a      	ldr	r2, [pc, #104]	; (10002068 <hardware_alarm_set_callback+0x78>)
10001ffe:	6813      	ldr	r3, [r2, #0]
10002000:	2b00      	cmp	r3, #0
10002002:	d0fc      	beq.n	10001ffe <hardware_alarm_set_callback+0xe>
    __asm volatile ("dmb");
10002004:	f3bf 8f5f 	dmb	sy
    //  should disallow IRQ handlers on both cores
    check_hardware_alarm_num_param(alarm_num);
    uint irq_num = harware_alarm_irq_number(alarm_num);
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
    uint32_t save = spin_lock_blocking(lock);
    if (callback) {
10002008:	2d00      	cmp	r5, #0
1000200a:	d01b      	beq.n	10002044 <hardware_alarm_set_callback+0x54>
        if (hardware_alarm_irq_handler != irq_get_vtable_handler(irq_num)) {
1000200c:	0020      	movs	r0, r4
1000200e:	f7fe ff0f 	bl	10000e30 <irq_get_vtable_handler>
10002012:	4916      	ldr	r1, [pc, #88]	; (1000206c <hardware_alarm_set_callback+0x7c>)
10002014:	4281      	cmp	r1, r0
10002016:	d00a      	beq.n	1000202e <hardware_alarm_set_callback+0x3e>
            // note that set_exclusive will silently allow you to set the handler to the same thing
            // since it is idempotent, which means we don't need to worry about locking ourselves
            irq_set_exclusive_handler(irq_num, hardware_alarm_irq_handler);
10002018:	0020      	movs	r0, r4
1000201a:	f7fe ff11 	bl	10000e40 <irq_set_exclusive_handler>
            irq_set_enabled(irq_num, true);
1000201e:	2101      	movs	r1, #1
10002020:	0020      	movs	r0, r4
10002022:	f7fe fef3 	bl	10000e0c <irq_set_enabled>
            // Enable interrupt in block and at processor
            hw_set_bits(&timer_hw->inte, 1u << alarm_num);
10002026:	2301      	movs	r3, #1
10002028:	40a3      	lsls	r3, r4
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000202a:	4a11      	ldr	r2, [pc, #68]	; (10002070 <hardware_alarm_set_callback+0x80>)
1000202c:	6013      	str	r3, [r2, #0]
        }
        alarm_callbacks[alarm_num] = callback;
1000202e:	4b11      	ldr	r3, [pc, #68]	; (10002074 <hardware_alarm_set_callback+0x84>)
10002030:	00a4      	lsls	r4, r4, #2
10002032:	50e5      	str	r5, [r4, r3]
10002034:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002038:	2200      	movs	r2, #0
1000203a:	4b0b      	ldr	r3, [pc, #44]	; (10002068 <hardware_alarm_set_callback+0x78>)
1000203c:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000203e:	f386 8810 	msr	PRIMASK, r6
        timer_callbacks_pending &= ~(1u << alarm_num);
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
        irq_set_enabled(irq_num, false);
    }
    spin_unlock(lock, save);
}
10002042:	bd70      	pop	{r4, r5, r6, pc}
        alarm_callbacks[alarm_num] = NULL;
10002044:	4b0b      	ldr	r3, [pc, #44]	; (10002074 <hardware_alarm_set_callback+0x84>)
10002046:	00a2      	lsls	r2, r4, #2
10002048:	50d5      	str	r5, [r2, r3]
        timer_callbacks_pending &= ~(1u << alarm_num);
1000204a:	2201      	movs	r2, #1
1000204c:	40a2      	lsls	r2, r4
1000204e:	490a      	ldr	r1, [pc, #40]	; (10002078 <hardware_alarm_set_callback+0x88>)
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
10002050:	0020      	movs	r0, r4
        timer_callbacks_pending &= ~(1u << alarm_num);
10002052:	780b      	ldrb	r3, [r1, #0]
10002054:	4393      	bics	r3, r2
10002056:	700b      	strb	r3, [r1, #0]
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
10002058:	4904      	ldr	r1, [pc, #16]	; (1000206c <hardware_alarm_set_callback+0x7c>)
1000205a:	f7fe ff1b 	bl	10000e94 <irq_remove_handler>
        irq_set_enabled(irq_num, false);
1000205e:	2100      	movs	r1, #0
10002060:	0020      	movs	r0, r4
10002062:	f7fe fed3 	bl	10000e0c <irq_set_enabled>
10002066:	e7e5      	b.n	10002034 <hardware_alarm_set_callback+0x44>
10002068:	d0000128 	.word	0xd0000128
1000206c:	10001f0d 	.word	0x10001f0d
10002070:	40056038 	.word	0x40056038
10002074:	2000a2d4 	.word	0x2000a2d4
10002078:	2000a457 	.word	0x2000a457

1000207c <hardware_alarm_set_target>:

bool hardware_alarm_set_target(uint alarm_num, absolute_time_t target) {
1000207c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000207e:	46ce      	mov	lr, r9
10002080:	4647      	mov	r7, r8
10002082:	b580      	push	{r7, lr}
    uint32_t hi = timer_hw->timerawh;
10002084:	4c2a      	ldr	r4, [pc, #168]	; (10002130 <hardware_alarm_set_target+0xb4>)
10002086:	6a61      	ldr	r1, [r4, #36]	; 0x24
        lo = timer_hw->timerawl;
10002088:	000d      	movs	r5, r1
1000208a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        uint32_t next_hi = timer_hw->timerawh;
1000208c:	6a61      	ldr	r1, [r4, #36]	; 0x24
        if (hi == next_hi) break;
1000208e:	42a9      	cmp	r1, r5
10002090:	d1fa      	bne.n	10002088 <hardware_alarm_set_target+0xc>
    bool missed;
    uint64_t now = time_us_64();
    uint64_t t = to_us_since_boot(target);
    if (now >= t) {
10002092:	428b      	cmp	r3, r1
10002094:	d807      	bhi.n	100020a6 <hardware_alarm_set_target+0x2a>
10002096:	d004      	beq.n	100020a2 <hardware_alarm_set_target+0x26>
        missed = true;
10002098:	2001      	movs	r0, #1
            }
        }
        spin_unlock(lock, save);
    }
    return missed;
}
1000209a:	bcc0      	pop	{r6, r7}
1000209c:	46b9      	mov	r9, r7
1000209e:	46b0      	mov	r8, r6
100020a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (now >= t) {
100020a2:	42b2      	cmp	r2, r6
100020a4:	d9f8      	bls.n	10002098 <hardware_alarm_set_target+0x1c>
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100020a6:	f3ef 8910 	mrs	r9, PRIMASK
    __asm volatile ("cpsid i");
100020aa:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100020ac:	4c21      	ldr	r4, [pc, #132]	; (10002134 <hardware_alarm_set_target+0xb8>)
100020ae:	6821      	ldr	r1, [r4, #0]
100020b0:	2900      	cmp	r1, #0
100020b2:	d0fc      	beq.n	100020ae <hardware_alarm_set_target+0x32>
    __asm volatile ("dmb");
100020b4:	f3bf 8f5f 	dmb	sy
        timer_hw->intr = 1u << alarm_num;
100020b8:	2501      	movs	r5, #1
100020ba:	4085      	lsls	r5, r0
100020bc:	4c1c      	ldr	r4, [pc, #112]	; (10002130 <hardware_alarm_set_target+0xb4>)
        timer_callbacks_pending |= 1u << alarm_num;
100020be:	4f1e      	ldr	r7, [pc, #120]	; (10002138 <hardware_alarm_set_target+0xbc>)
        timer_hw->intr = 1u << alarm_num;
100020c0:	6365      	str	r5, [r4, #52]	; 0x34
        timer_callbacks_pending |= 1u << alarm_num;
100020c2:	b2e9      	uxtb	r1, r5
100020c4:	4688      	mov	r8, r1
100020c6:	7839      	ldrb	r1, [r7, #0]
100020c8:	468c      	mov	ip, r1
100020ca:	4641      	mov	r1, r8
100020cc:	4666      	mov	r6, ip
100020ce:	4331      	orrs	r1, r6
100020d0:	7039      	strb	r1, [r7, #0]
        timer_hw->alarm[alarm_num] = (uint32_t) t;
100020d2:	1d01      	adds	r1, r0, #4
100020d4:	0089      	lsls	r1, r1, #2
100020d6:	510a      	str	r2, [r1, r4]
        target_hi[alarm_num] = t >> 32u;
100020d8:	4918      	ldr	r1, [pc, #96]	; (1000213c <hardware_alarm_set_target+0xc0>)
100020da:	0080      	lsls	r0, r0, #2
100020dc:	5043      	str	r3, [r0, r1]
        if (!(timer_hw->armed & 1u << alarm_num)) {
100020de:	6a21      	ldr	r1, [r4, #32]
        missed = false;
100020e0:	2000      	movs	r0, #0
        if (!(timer_hw->armed & 1u << alarm_num)) {
100020e2:	4229      	tst	r1, r5
100020e4:	d00b      	beq.n	100020fe <hardware_alarm_set_target+0x82>
    uint32_t hi = timer_hw->timerawh;
100020e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
        lo = timer_hw->timerawl;
100020e8:	0008      	movs	r0, r1
100020ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        uint32_t next_hi = timer_hw->timerawh;
100020ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
        if (hi == next_hi) break;
100020ee:	4281      	cmp	r1, r0
100020f0:	d1fa      	bne.n	100020e8 <hardware_alarm_set_target+0x6c>
            if (time_us_64() >= t) {
100020f2:	428b      	cmp	r3, r1
100020f4:	d802      	bhi.n	100020fc <hardware_alarm_set_target+0x80>
100020f6:	d10a      	bne.n	1000210e <hardware_alarm_set_target+0x92>
100020f8:	42b2      	cmp	r2, r6
100020fa:	d908      	bls.n	1000210e <hardware_alarm_set_target+0x92>
        missed = false;
100020fc:	2000      	movs	r0, #0
100020fe:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002102:	2200      	movs	r2, #0
10002104:	4b0b      	ldr	r3, [pc, #44]	; (10002134 <hardware_alarm_set_target+0xb8>)
10002106:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002108:	f389 8810 	msr	PRIMASK, r9
}
1000210c:	e7c5      	b.n	1000209a <hardware_alarm_set_target+0x1e>
                timer_hw->armed = 1u << alarm_num;
1000210e:	4b08      	ldr	r3, [pc, #32]	; (10002130 <hardware_alarm_set_target+0xb4>)
                timer_callbacks_pending &= ~(1u << alarm_num);
10002110:	4642      	mov	r2, r8
                timer_hw->armed = 1u << alarm_num;
10002112:	621d      	str	r5, [r3, #32]
                timer_hw->intr = 1u << alarm_num; // clear the IRQ too
10002114:	635d      	str	r5, [r3, #52]	; 0x34
                timer_callbacks_pending &= ~(1u << alarm_num);
10002116:	4663      	mov	r3, ip
10002118:	4393      	bics	r3, r2
                missed = true;
1000211a:	2001      	movs	r0, #1
                timer_callbacks_pending &= ~(1u << alarm_num);
1000211c:	703b      	strb	r3, [r7, #0]
    __asm volatile ("dmb");
1000211e:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002122:	2200      	movs	r2, #0
10002124:	4b03      	ldr	r3, [pc, #12]	; (10002134 <hardware_alarm_set_target+0xb8>)
10002126:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002128:	f389 8810 	msr	PRIMASK, r9
1000212c:	e7b5      	b.n	1000209a <hardware_alarm_set_target+0x1e>
1000212e:	46c0      	nop			; (mov r8, r8)
10002130:	40054000 	.word	0x40054000
10002134:	d0000128 	.word	0xd0000128
10002138:	2000a457 	.word	0x2000a457
1000213c:	2000a440 	.word	0x2000a440

10002140 <hardware_alarm_cancel>:
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10002140:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10002144:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10002146:	490a      	ldr	r1, [pc, #40]	; (10002170 <hardware_alarm_cancel+0x30>)
10002148:	680b      	ldr	r3, [r1, #0]
1000214a:	2b00      	cmp	r3, #0
1000214c:	d0fc      	beq.n	10002148 <hardware_alarm_cancel+0x8>
    __asm volatile ("dmb");
1000214e:	f3bf 8f5f 	dmb	sy
void hardware_alarm_cancel(uint alarm_num) {
    check_hardware_alarm_num_param(alarm_num);

    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
    uint32_t save = spin_lock_blocking(lock);
    timer_hw->armed = 1u << alarm_num;
10002152:	2301      	movs	r3, #1
10002154:	4083      	lsls	r3, r0
10002156:	4a07      	ldr	r2, [pc, #28]	; (10002174 <hardware_alarm_cancel+0x34>)
    timer_callbacks_pending &= ~(1u << alarm_num);
10002158:	4807      	ldr	r0, [pc, #28]	; (10002178 <hardware_alarm_cancel+0x38>)
    timer_hw->armed = 1u << alarm_num;
1000215a:	6213      	str	r3, [r2, #32]
    timer_callbacks_pending &= ~(1u << alarm_num);
1000215c:	7802      	ldrb	r2, [r0, #0]
1000215e:	439a      	bics	r2, r3
10002160:	7002      	strb	r2, [r0, #0]
10002162:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002166:	2300      	movs	r3, #0
10002168:	600b      	str	r3, [r1, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000216a:	f38c 8810 	msr	PRIMASK, ip
    spin_unlock(lock, save);
}
1000216e:	4770      	bx	lr
10002170:	d0000128 	.word	0xd0000128
10002174:	40054000 	.word	0x40054000
10002178:	2000a457 	.word	0x2000a457

1000217c <_retrieve_unique_id_on_boot>:

static_assert(PICO_UNIQUE_BOARD_ID_SIZE_BYTES == FLASH_UNIQUE_ID_SIZE_BYTES, "Board ID size must match flash ID size");

static pico_unique_board_id_t retrieved_id;

static void __attribute__((constructor)) _retrieve_unique_id_on_boot() {
1000217c:	b510      	push	{r4, lr}
    // build. Since this constructor is pre-main it would be annoying to
    // debug, so just produce something well-defined and obviously wrong.
    for (int i = 0; i < PICO_UNIQUE_BOARD_ID_SIZE_BYTES; i++)
        retrieved_id.id[i] = 0xee;
#else
    flash_get_unique_id(retrieved_id.id);
1000217e:	4802      	ldr	r0, [pc, #8]	; (10002188 <_retrieve_unique_id_on_boot+0xc>)
10002180:	f7fe fdda 	bl	10000d38 <flash_get_unique_id>
#endif
}
10002184:	bd10      	pop	{r4, pc}
10002186:	46c0      	nop			; (mov r8, r8)
10002188:	2000a434 	.word	0x2000a434

1000218c <watchdog_start_tick>:
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
1000218c:	2380      	movs	r3, #128	; 0x80
1000218e:	4a02      	ldr	r2, [pc, #8]	; (10002198 <watchdog_start_tick+0xc>)
10002190:	009b      	lsls	r3, r3, #2
10002192:	4303      	orrs	r3, r0
10002194:	62d3      	str	r3, [r2, #44]	; 0x2c
}
10002196:	4770      	bx	lr
10002198:	40058000 	.word	0x40058000

1000219c <xosc_init>:
#include "hardware/structs/xosc.h"

void xosc_init(void) {
    // Assumes 1-15 MHz input
    assert(XOSC_MHZ <= 15);
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
1000219c:	23aa      	movs	r3, #170	; 0xaa
1000219e:	4a06      	ldr	r2, [pc, #24]	; (100021b8 <xosc_init+0x1c>)
100021a0:	011b      	lsls	r3, r3, #4
100021a2:	6013      	str	r3, [r2, #0]

    // Set xosc startup delay
    uint32_t startup_delay = (((12 * MHZ) / 1000) + 128) / 256;
    xosc_hw->startup = startup_delay;
100021a4:	232f      	movs	r3, #47	; 0x2f
100021a6:	4905      	ldr	r1, [pc, #20]	; (100021bc <xosc_init+0x20>)
100021a8:	60d3      	str	r3, [r2, #12]
100021aa:	4b05      	ldr	r3, [pc, #20]	; (100021c0 <xosc_init+0x24>)
100021ac:	6019      	str	r1, [r3, #0]

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
100021ae:	6853      	ldr	r3, [r2, #4]
100021b0:	2b00      	cmp	r3, #0
100021b2:	dafc      	bge.n	100021ae <xosc_init+0x12>
}
100021b4:	4770      	bx	lr
100021b6:	46c0      	nop			; (mov r8, r8)
100021b8:	40024000 	.word	0x40024000
100021bc:	00fab000 	.word	0x00fab000
100021c0:	40026000 	.word	0x40026000

100021c4 <_Z21pwm_interrupt_handlerv>:
 *  \ingroup hardware_pwm
 *
 * \param slice_num PWM slice number
 */
static inline void pwm_clear_irq(uint slice_num) {
    pwm_hw->intr = 1u << slice_num;
100021c4:	23a4      	movs	r3, #164	; 0xa4
100021c6:	2102      	movs	r1, #2
100021c8:	4a0c      	ldr	r2, [pc, #48]	; (100021fc <_Z21pwm_interrupt_handlerv+0x38>)
 * adjust by factor of 8   (this is what bitshifting <<3 is doing)
 * 
 */
void pwm_interrupt_handler() {
    pwm_clear_irq(pwm_gpio_to_slice_num(AUDIO_PIN));    
    if (wav_position < (WAV_DATA_LENGTH<<3) - 1) { 
100021ca:	480d      	ldr	r0, [pc, #52]	; (10002200 <_Z21pwm_interrupt_handlerv+0x3c>)
void pwm_interrupt_handler() {
100021cc:	b510      	push	{r4, lr}
100021ce:	50d1      	str	r1, [r2, r3]
    if (wav_position < (WAV_DATA_LENGTH<<3) - 1) { 
100021d0:	6801      	ldr	r1, [r0, #0]
100021d2:	4b0c      	ldr	r3, [pc, #48]	; (10002204 <_Z21pwm_interrupt_handlerv+0x40>)
100021d4:	4299      	cmp	r1, r3
100021d6:	dc0d      	bgt.n	100021f4 <_Z21pwm_interrupt_handlerv+0x30>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100021d8:	4b0b      	ldr	r3, [pc, #44]	; (10002208 <_Z21pwm_interrupt_handlerv+0x44>)
        level << (chan ? PWM_CH0_CC_B_LSB : PWM_CH0_CC_A_LSB),
100021da:	4a0c      	ldr	r2, [pc, #48]	; (1000220c <_Z21pwm_interrupt_handlerv+0x48>)
100021dc:	681c      	ldr	r4, [r3, #0]
        // set pwm level 
        // allow the pwm value to repeat for 8 cycles this is >>3 
        pwm_set_gpio_level(AUDIO_PIN, WAV_DATA[wav_position>>3]);  
100021de:	10cb      	asrs	r3, r1, #3
100021e0:	5cd3      	ldrb	r3, [r2, r3]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100021e2:	4a0b      	ldr	r2, [pc, #44]	; (10002210 <_Z21pwm_interrupt_handlerv+0x4c>)
100021e4:	041b      	lsls	r3, r3, #16
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100021e6:	4063      	eors	r3, r4
100021e8:	0c1b      	lsrs	r3, r3, #16
100021ea:	041b      	lsls	r3, r3, #16
        wav_position++;
100021ec:	3101      	adds	r1, #1
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100021ee:	6013      	str	r3, [r2, #0]
100021f0:	6001      	str	r1, [r0, #0]
    } else {
        // reset to start
        wav_position = 0;
    }
}
100021f2:	bd10      	pop	{r4, pc}
        wav_position = 0;
100021f4:	2300      	movs	r3, #0
100021f6:	6003      	str	r3, [r0, #0]
}
100021f8:	e7fb      	b.n	100021f2 <_Z21pwm_interrupt_handlerv+0x2e>
100021fa:	46c0      	nop			; (mov r8, r8)
100021fc:	40050000 	.word	0x40050000
10002200:	2000a450 	.word	0x2000a450
10002204:	0004a836 	.word	0x0004a836
10002208:	40050020 	.word	0x40050020
1000220c:	2000031c 	.word	0x2000031c
10002210:	40051020 	.word	0x40051020

10002214 <main>:

int main(void) {
10002214:	b510      	push	{r4, lr}
10002216:	b084      	sub	sp, #16
    /* Overclocking for fun but then also so the system clock is a 
     * multiple of typical audio sampling rates.
     */
    stdio_init_all();
10002218:	f7ff fb98 	bl	1000194c <stdio_init_all>
 * \param required if true then this function will assert if the frequency is not attainable.
 * \return true if the clock was configured
 */
static inline bool set_sys_clock_khz(uint32_t freq_khz, bool required) {
    uint vco, postdiv1, postdiv2;
    if (check_sys_clock_khz(freq_khz, &vco, &postdiv1, &postdiv2)) {
1000221c:	481a      	ldr	r0, [pc, #104]	; (10002288 <main+0x74>)
1000221e:	ab03      	add	r3, sp, #12
10002220:	aa02      	add	r2, sp, #8
10002222:	a901      	add	r1, sp, #4
10002224:	f7ff fbd2 	bl	100019cc <check_sys_clock_khz>
10002228:	2800      	cmp	r0, #0
1000222a:	d103      	bne.n	10002234 <main+0x20>
        set_sys_clock_pll(vco, postdiv1, postdiv2);
        return true;
    } else if (required) {
        panic("System clock of %u kHz cannot be exactly achieved", freq_khz);
1000222c:	4916      	ldr	r1, [pc, #88]	; (10002288 <main+0x74>)
1000222e:	4817      	ldr	r0, [pc, #92]	; (1000228c <main+0x78>)
10002230:	f7ff fa76 	bl	10001720 <panic>
        set_sys_clock_pll(vco, postdiv1, postdiv2);
10002234:	9a03      	ldr	r2, [sp, #12]
10002236:	9902      	ldr	r1, [sp, #8]
10002238:	9801      	ldr	r0, [sp, #4]
1000223a:	f7ff fb89 	bl	10001950 <set_sys_clock_pll>
    set_sys_clock_khz(176000, true); 
    gpio_set_function(AUDIO_PIN, GPIO_FUNC_PWM);
1000223e:	2104      	movs	r1, #4
10002240:	2013      	movs	r0, #19
10002242:	f7fe fdcb 	bl	10000ddc <gpio_set_function>
    pwm_hw->intr = 1u << slice_num;
10002246:	2302      	movs	r3, #2
10002248:	22a4      	movs	r2, #164	; 0xa4
1000224a:	4c11      	ldr	r4, [pc, #68]	; (10002290 <main+0x7c>)

    // Setup PWM interrupt to fire when PWM cycle is complete
    pwm_clear_irq(audio_pin_slice);
    pwm_set_irq_enabled(audio_pin_slice, true);
    // set the handle function above
    irq_set_exclusive_handler(PWM_IRQ_WRAP, pwm_interrupt_handler); 
1000224c:	2004      	movs	r0, #4
1000224e:	50a3      	str	r3, [r4, r2]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002250:	4a10      	ldr	r2, [pc, #64]	; (10002294 <main+0x80>)
10002252:	4911      	ldr	r1, [pc, #68]	; (10002298 <main+0x84>)
10002254:	6013      	str	r3, [r2, #0]
10002256:	f7fe fdf3 	bl	10000e40 <irq_set_exclusive_handler>
    irq_set_enabled(PWM_IRQ_WRAP, true);
1000225a:	2101      	movs	r1, #1
1000225c:	2004      	movs	r0, #4
1000225e:	f7fe fdd5 	bl	10000e0c <irq_set_enabled>
    pwm_hw->slice[slice_num].csr = 0;
10002262:	2300      	movs	r3, #0
10002264:	6163      	str	r3, [r4, #20]
    pwm_hw->slice[slice_num].ctr = PWM_CH0_CTR_RESET;
10002266:	61e3      	str	r3, [r4, #28]
    pwm_hw->slice[slice_num].cc = PWM_CH0_CC_RESET;
10002268:	6223      	str	r3, [r4, #32]
    pwm_hw->slice[slice_num].top = c->top;
1000226a:	33fa      	adds	r3, #250	; 0xfa
1000226c:	6263      	str	r3, [r4, #36]	; 0x24
    pwm_hw->slice[slice_num].div = c->div;
1000226e:	3b7a      	subs	r3, #122	; 0x7a
10002270:	61a3      	str	r3, [r4, #24]
    pwm_hw->slice[slice_num].csr = c->csr | (!!start << PWM_CH0_CSR_EN_LSB);
10002272:	3b7f      	subs	r3, #127	; 0x7f
10002274:	6163      	str	r3, [r4, #20]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002276:	4b09      	ldr	r3, [pc, #36]	; (1000229c <main+0x88>)
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002278:	4a09      	ldr	r2, [pc, #36]	; (100022a0 <main+0x8c>)
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000227a:	681b      	ldr	r3, [r3, #0]
1000227c:	0c1b      	lsrs	r3, r3, #16
1000227e:	041b      	lsls	r3, r3, #16
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002280:	6013      	str	r3, [r2, #0]
    __asm volatile ("wfi");
10002282:	bf30      	wfi
10002284:	e7fd      	b.n	10002282 <main+0x6e>
10002286:	46c0      	nop			; (mov r8, r8)
10002288:	0002af80 	.word	0x0002af80
1000228c:	10002d28 	.word	0x10002d28
10002290:	40050000 	.word	0x40050000
10002294:	400520a8 	.word	0x400520a8
10002298:	100021c5 	.word	0x100021c5
1000229c:	40050020 	.word	0x40050020
100022a0:	40051020 	.word	0x40051020

100022a4 <calloc>:
100022a4:	0003      	movs	r3, r0
100022a6:	b510      	push	{r4, lr}
100022a8:	000a      	movs	r2, r1
100022aa:	4903      	ldr	r1, [pc, #12]	; (100022b8 <calloc+0x14>)
100022ac:	6808      	ldr	r0, [r1, #0]
100022ae:	0019      	movs	r1, r3
100022b0:	f000 f804 	bl	100022bc <_calloc_r>
100022b4:	bd10      	pop	{r4, pc}
100022b6:	46c0      	nop			; (mov r8, r8)
100022b8:	20009824 	.word	0x20009824

100022bc <_calloc_r>:
100022bc:	b570      	push	{r4, r5, r6, lr}
100022be:	0c0b      	lsrs	r3, r1, #16
100022c0:	2400      	movs	r4, #0
100022c2:	0c15      	lsrs	r5, r2, #16
100022c4:	2b00      	cmp	r3, #0
100022c6:	d128      	bne.n	1000231a <_calloc_r+0x5e>
100022c8:	2d00      	cmp	r5, #0
100022ca:	d137      	bne.n	1000233c <_calloc_r+0x80>
100022cc:	b28b      	uxth	r3, r1
100022ce:	b291      	uxth	r1, r2
100022d0:	4359      	muls	r1, r3
100022d2:	f000 f851 	bl	10002378 <_malloc_r>
100022d6:	1e05      	subs	r5, r0, #0
100022d8:	d019      	beq.n	1000230e <_calloc_r+0x52>
100022da:	0003      	movs	r3, r0
100022dc:	3b08      	subs	r3, #8
100022de:	685a      	ldr	r2, [r3, #4]
100022e0:	2303      	movs	r3, #3
100022e2:	439a      	bics	r2, r3
100022e4:	3a04      	subs	r2, #4
100022e6:	2a24      	cmp	r2, #36	; 0x24
100022e8:	d813      	bhi.n	10002312 <_calloc_r+0x56>
100022ea:	0003      	movs	r3, r0
100022ec:	2a13      	cmp	r2, #19
100022ee:	d90a      	bls.n	10002306 <_calloc_r+0x4a>
100022f0:	6004      	str	r4, [r0, #0]
100022f2:	6044      	str	r4, [r0, #4]
100022f4:	3308      	adds	r3, #8
100022f6:	2a1b      	cmp	r2, #27
100022f8:	d905      	bls.n	10002306 <_calloc_r+0x4a>
100022fa:	6084      	str	r4, [r0, #8]
100022fc:	60c4      	str	r4, [r0, #12]
100022fe:	2a24      	cmp	r2, #36	; 0x24
10002300:	d025      	beq.n	1000234e <_calloc_r+0x92>
10002302:	0003      	movs	r3, r0
10002304:	3310      	adds	r3, #16
10002306:	2200      	movs	r2, #0
10002308:	601a      	str	r2, [r3, #0]
1000230a:	605a      	str	r2, [r3, #4]
1000230c:	609a      	str	r2, [r3, #8]
1000230e:	0028      	movs	r0, r5
10002310:	bd70      	pop	{r4, r5, r6, pc}
10002312:	2100      	movs	r1, #0
10002314:	f7fe fa78 	bl	10000808 <__wrap_memset>
10002318:	e7f9      	b.n	1000230e <_calloc_r+0x52>
1000231a:	2d00      	cmp	r5, #0
1000231c:	d111      	bne.n	10002342 <_calloc_r+0x86>
1000231e:	1c15      	adds	r5, r2, #0
10002320:	b289      	uxth	r1, r1
10002322:	b292      	uxth	r2, r2
10002324:	434a      	muls	r2, r1
10002326:	b2ad      	uxth	r5, r5
10002328:	b29b      	uxth	r3, r3
1000232a:	436b      	muls	r3, r5
1000232c:	0c11      	lsrs	r1, r2, #16
1000232e:	185b      	adds	r3, r3, r1
10002330:	0c19      	lsrs	r1, r3, #16
10002332:	d106      	bne.n	10002342 <_calloc_r+0x86>
10002334:	0419      	lsls	r1, r3, #16
10002336:	b292      	uxth	r2, r2
10002338:	4311      	orrs	r1, r2
1000233a:	e7ca      	b.n	100022d2 <_calloc_r+0x16>
1000233c:	1c2b      	adds	r3, r5, #0
1000233e:	1c0d      	adds	r5, r1, #0
10002340:	e7ee      	b.n	10002320 <_calloc_r+0x64>
10002342:	f000 f809 	bl	10002358 <__errno>
10002346:	230c      	movs	r3, #12
10002348:	2500      	movs	r5, #0
1000234a:	6003      	str	r3, [r0, #0]
1000234c:	e7df      	b.n	1000230e <_calloc_r+0x52>
1000234e:	0003      	movs	r3, r0
10002350:	6104      	str	r4, [r0, #16]
10002352:	3318      	adds	r3, #24
10002354:	6144      	str	r4, [r0, #20]
10002356:	e7d6      	b.n	10002306 <_calloc_r+0x4a>

10002358 <__errno>:
10002358:	4b01      	ldr	r3, [pc, #4]	; (10002360 <__errno+0x8>)
1000235a:	6818      	ldr	r0, [r3, #0]
1000235c:	4770      	bx	lr
1000235e:	46c0      	nop			; (mov r8, r8)
10002360:	20009824 	.word	0x20009824

10002364 <malloc>:
10002364:	b510      	push	{r4, lr}
10002366:	4b03      	ldr	r3, [pc, #12]	; (10002374 <malloc+0x10>)
10002368:	0001      	movs	r1, r0
1000236a:	6818      	ldr	r0, [r3, #0]
1000236c:	f000 f804 	bl	10002378 <_malloc_r>
10002370:	bd10      	pop	{r4, pc}
10002372:	46c0      	nop			; (mov r8, r8)
10002374:	20009824 	.word	0x20009824

10002378 <_malloc_r>:
10002378:	b5f0      	push	{r4, r5, r6, r7, lr}
1000237a:	464e      	mov	r6, r9
1000237c:	4645      	mov	r5, r8
1000237e:	46de      	mov	lr, fp
10002380:	4657      	mov	r7, sl
10002382:	b5e0      	push	{r5, r6, r7, lr}
10002384:	000d      	movs	r5, r1
10002386:	350b      	adds	r5, #11
10002388:	0006      	movs	r6, r0
1000238a:	b083      	sub	sp, #12
1000238c:	2d16      	cmp	r5, #22
1000238e:	d822      	bhi.n	100023d6 <_malloc_r+0x5e>
10002390:	2910      	cmp	r1, #16
10002392:	d900      	bls.n	10002396 <_malloc_r+0x1e>
10002394:	e0b2      	b.n	100024fc <_malloc_r+0x184>
10002396:	f000 fab1 	bl	100028fc <__malloc_lock>
1000239a:	2510      	movs	r5, #16
1000239c:	2318      	movs	r3, #24
1000239e:	2002      	movs	r0, #2
100023a0:	4fcc      	ldr	r7, [pc, #816]	; (100026d4 <_malloc_r+0x35c>)
100023a2:	18fb      	adds	r3, r7, r3
100023a4:	001a      	movs	r2, r3
100023a6:	685c      	ldr	r4, [r3, #4]
100023a8:	3a08      	subs	r2, #8
100023aa:	4294      	cmp	r4, r2
100023ac:	d100      	bne.n	100023b0 <_malloc_r+0x38>
100023ae:	e0b5      	b.n	1000251c <_malloc_r+0x1a4>
100023b0:	2303      	movs	r3, #3
100023b2:	6862      	ldr	r2, [r4, #4]
100023b4:	439a      	bics	r2, r3
100023b6:	0013      	movs	r3, r2
100023b8:	68e2      	ldr	r2, [r4, #12]
100023ba:	68a1      	ldr	r1, [r4, #8]
100023bc:	60ca      	str	r2, [r1, #12]
100023be:	6091      	str	r1, [r2, #8]
100023c0:	2201      	movs	r2, #1
100023c2:	18e3      	adds	r3, r4, r3
100023c4:	6859      	ldr	r1, [r3, #4]
100023c6:	0030      	movs	r0, r6
100023c8:	430a      	orrs	r2, r1
100023ca:	605a      	str	r2, [r3, #4]
100023cc:	f000 fa9e 	bl	1000290c <__malloc_unlock>
100023d0:	0020      	movs	r0, r4
100023d2:	3008      	adds	r0, #8
100023d4:	e095      	b.n	10002502 <_malloc_r+0x18a>
100023d6:	2307      	movs	r3, #7
100023d8:	439d      	bics	r5, r3
100023da:	d500      	bpl.n	100023de <_malloc_r+0x66>
100023dc:	e08e      	b.n	100024fc <_malloc_r+0x184>
100023de:	42a9      	cmp	r1, r5
100023e0:	d900      	bls.n	100023e4 <_malloc_r+0x6c>
100023e2:	e08b      	b.n	100024fc <_malloc_r+0x184>
100023e4:	f000 fa8a 	bl	100028fc <__malloc_lock>
100023e8:	23fc      	movs	r3, #252	; 0xfc
100023ea:	005b      	lsls	r3, r3, #1
100023ec:	429d      	cmp	r5, r3
100023ee:	d200      	bcs.n	100023f2 <_malloc_r+0x7a>
100023f0:	e1a7      	b.n	10002742 <_malloc_r+0x3ca>
100023f2:	0a68      	lsrs	r0, r5, #9
100023f4:	d100      	bne.n	100023f8 <_malloc_r+0x80>
100023f6:	e08b      	b.n	10002510 <_malloc_r+0x198>
100023f8:	2804      	cmp	r0, #4
100023fa:	d900      	bls.n	100023fe <_malloc_r+0x86>
100023fc:	e17a      	b.n	100026f4 <_malloc_r+0x37c>
100023fe:	2338      	movs	r3, #56	; 0x38
10002400:	4698      	mov	r8, r3
10002402:	09a8      	lsrs	r0, r5, #6
10002404:	4480      	add	r8, r0
10002406:	3039      	adds	r0, #57	; 0x39
10002408:	00c1      	lsls	r1, r0, #3
1000240a:	4fb2      	ldr	r7, [pc, #712]	; (100026d4 <_malloc_r+0x35c>)
1000240c:	1879      	adds	r1, r7, r1
1000240e:	684c      	ldr	r4, [r1, #4]
10002410:	3908      	subs	r1, #8
10002412:	42a1      	cmp	r1, r4
10002414:	d00e      	beq.n	10002434 <_malloc_r+0xbc>
10002416:	2303      	movs	r3, #3
10002418:	469c      	mov	ip, r3
1000241a:	e004      	b.n	10002426 <_malloc_r+0xae>
1000241c:	2a00      	cmp	r2, #0
1000241e:	dacb      	bge.n	100023b8 <_malloc_r+0x40>
10002420:	68e4      	ldr	r4, [r4, #12]
10002422:	42a1      	cmp	r1, r4
10002424:	d006      	beq.n	10002434 <_malloc_r+0xbc>
10002426:	4662      	mov	r2, ip
10002428:	6863      	ldr	r3, [r4, #4]
1000242a:	4393      	bics	r3, r2
1000242c:	1b5a      	subs	r2, r3, r5
1000242e:	2a0f      	cmp	r2, #15
10002430:	ddf4      	ble.n	1000241c <_malloc_r+0xa4>
10002432:	4640      	mov	r0, r8
10002434:	003a      	movs	r2, r7
10002436:	693c      	ldr	r4, [r7, #16]
10002438:	3208      	adds	r2, #8
1000243a:	4294      	cmp	r4, r2
1000243c:	d100      	bne.n	10002440 <_malloc_r+0xc8>
1000243e:	e078      	b.n	10002532 <_malloc_r+0x1ba>
10002440:	2303      	movs	r3, #3
10002442:	6861      	ldr	r1, [r4, #4]
10002444:	4399      	bics	r1, r3
10002446:	4689      	mov	r9, r1
10002448:	000b      	movs	r3, r1
1000244a:	1b49      	subs	r1, r1, r5
1000244c:	290f      	cmp	r1, #15
1000244e:	dd00      	ble.n	10002452 <_malloc_r+0xda>
10002450:	e17b      	b.n	1000274a <_malloc_r+0x3d2>
10002452:	617a      	str	r2, [r7, #20]
10002454:	613a      	str	r2, [r7, #16]
10002456:	2900      	cmp	r1, #0
10002458:	dab2      	bge.n	100023c0 <_malloc_r+0x48>
1000245a:	2280      	movs	r2, #128	; 0x80
1000245c:	0092      	lsls	r2, r2, #2
1000245e:	4591      	cmp	r9, r2
10002460:	d300      	bcc.n	10002464 <_malloc_r+0xec>
10002462:	e10f      	b.n	10002684 <_malloc_r+0x30c>
10002464:	0959      	lsrs	r1, r3, #5
10002466:	08da      	lsrs	r2, r3, #3
10002468:	2301      	movs	r3, #1
1000246a:	408b      	lsls	r3, r1
1000246c:	00d2      	lsls	r2, r2, #3
1000246e:	6879      	ldr	r1, [r7, #4]
10002470:	19d2      	adds	r2, r2, r7
10002472:	430b      	orrs	r3, r1
10002474:	6891      	ldr	r1, [r2, #8]
10002476:	607b      	str	r3, [r7, #4]
10002478:	60e2      	str	r2, [r4, #12]
1000247a:	60a1      	str	r1, [r4, #8]
1000247c:	6094      	str	r4, [r2, #8]
1000247e:	60cc      	str	r4, [r1, #12]
10002480:	2101      	movs	r1, #1
10002482:	1082      	asrs	r2, r0, #2
10002484:	4091      	lsls	r1, r2
10002486:	4299      	cmp	r1, r3
10002488:	d859      	bhi.n	1000253e <_malloc_r+0x1c6>
1000248a:	420b      	tst	r3, r1
1000248c:	d105      	bne.n	1000249a <_malloc_r+0x122>
1000248e:	2203      	movs	r2, #3
10002490:	4390      	bics	r0, r2
10002492:	0049      	lsls	r1, r1, #1
10002494:	3004      	adds	r0, #4
10002496:	420b      	tst	r3, r1
10002498:	d0fb      	beq.n	10002492 <_malloc_r+0x11a>
1000249a:	2303      	movs	r3, #3
1000249c:	4698      	mov	r8, r3
1000249e:	00c3      	lsls	r3, r0, #3
100024a0:	4699      	mov	r9, r3
100024a2:	44b9      	add	r9, r7
100024a4:	46cc      	mov	ip, r9
100024a6:	4682      	mov	sl, r0
100024a8:	4663      	mov	r3, ip
100024aa:	68dc      	ldr	r4, [r3, #12]
100024ac:	45a4      	cmp	ip, r4
100024ae:	d107      	bne.n	100024c0 <_malloc_r+0x148>
100024b0:	e12c      	b.n	1000270c <_malloc_r+0x394>
100024b2:	2a00      	cmp	r2, #0
100024b4:	db00      	blt.n	100024b8 <_malloc_r+0x140>
100024b6:	e135      	b.n	10002724 <_malloc_r+0x3ac>
100024b8:	68e4      	ldr	r4, [r4, #12]
100024ba:	45a4      	cmp	ip, r4
100024bc:	d100      	bne.n	100024c0 <_malloc_r+0x148>
100024be:	e125      	b.n	1000270c <_malloc_r+0x394>
100024c0:	4642      	mov	r2, r8
100024c2:	6863      	ldr	r3, [r4, #4]
100024c4:	4393      	bics	r3, r2
100024c6:	1b5a      	subs	r2, r3, r5
100024c8:	2a0f      	cmp	r2, #15
100024ca:	ddf2      	ble.n	100024b2 <_malloc_r+0x13a>
100024cc:	2001      	movs	r0, #1
100024ce:	4680      	mov	r8, r0
100024d0:	1961      	adds	r1, r4, r5
100024d2:	4305      	orrs	r5, r0
100024d4:	6065      	str	r5, [r4, #4]
100024d6:	68a0      	ldr	r0, [r4, #8]
100024d8:	68e5      	ldr	r5, [r4, #12]
100024da:	3708      	adds	r7, #8
100024dc:	60c5      	str	r5, [r0, #12]
100024de:	60a8      	str	r0, [r5, #8]
100024e0:	4640      	mov	r0, r8
100024e2:	4310      	orrs	r0, r2
100024e4:	60f9      	str	r1, [r7, #12]
100024e6:	60b9      	str	r1, [r7, #8]
100024e8:	6048      	str	r0, [r1, #4]
100024ea:	60cf      	str	r7, [r1, #12]
100024ec:	0030      	movs	r0, r6
100024ee:	608f      	str	r7, [r1, #8]
100024f0:	50e2      	str	r2, [r4, r3]
100024f2:	f000 fa0b 	bl	1000290c <__malloc_unlock>
100024f6:	0020      	movs	r0, r4
100024f8:	3008      	adds	r0, #8
100024fa:	e002      	b.n	10002502 <_malloc_r+0x18a>
100024fc:	230c      	movs	r3, #12
100024fe:	2000      	movs	r0, #0
10002500:	6033      	str	r3, [r6, #0]
10002502:	b003      	add	sp, #12
10002504:	bcf0      	pop	{r4, r5, r6, r7}
10002506:	46bb      	mov	fp, r7
10002508:	46b2      	mov	sl, r6
1000250a:	46a9      	mov	r9, r5
1000250c:	46a0      	mov	r8, r4
1000250e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002510:	2180      	movs	r1, #128	; 0x80
10002512:	233f      	movs	r3, #63	; 0x3f
10002514:	2040      	movs	r0, #64	; 0x40
10002516:	4698      	mov	r8, r3
10002518:	0089      	lsls	r1, r1, #2
1000251a:	e776      	b.n	1000240a <_malloc_r+0x92>
1000251c:	68dc      	ldr	r4, [r3, #12]
1000251e:	3002      	adds	r0, #2
10002520:	42a3      	cmp	r3, r4
10002522:	d000      	beq.n	10002526 <_malloc_r+0x1ae>
10002524:	e744      	b.n	100023b0 <_malloc_r+0x38>
10002526:	003a      	movs	r2, r7
10002528:	693c      	ldr	r4, [r7, #16]
1000252a:	3208      	adds	r2, #8
1000252c:	4294      	cmp	r4, r2
1000252e:	d000      	beq.n	10002532 <_malloc_r+0x1ba>
10002530:	e786      	b.n	10002440 <_malloc_r+0xc8>
10002532:	2101      	movs	r1, #1
10002534:	687b      	ldr	r3, [r7, #4]
10002536:	1082      	asrs	r2, r0, #2
10002538:	4091      	lsls	r1, r2
1000253a:	4299      	cmp	r1, r3
1000253c:	d9a5      	bls.n	1000248a <_malloc_r+0x112>
1000253e:	2303      	movs	r3, #3
10002540:	68bc      	ldr	r4, [r7, #8]
10002542:	6862      	ldr	r2, [r4, #4]
10002544:	439a      	bics	r2, r3
10002546:	4691      	mov	r9, r2
10002548:	4295      	cmp	r5, r2
1000254a:	d803      	bhi.n	10002554 <_malloc_r+0x1dc>
1000254c:	1b53      	subs	r3, r2, r5
1000254e:	2b0f      	cmp	r3, #15
10002550:	dd00      	ble.n	10002554 <_malloc_r+0x1dc>
10002552:	e089      	b.n	10002668 <_malloc_r+0x2f0>
10002554:	0023      	movs	r3, r4
10002556:	444b      	add	r3, r9
10002558:	4a5f      	ldr	r2, [pc, #380]	; (100026d8 <_malloc_r+0x360>)
1000255a:	9301      	str	r3, [sp, #4]
1000255c:	4b5f      	ldr	r3, [pc, #380]	; (100026dc <_malloc_r+0x364>)
1000255e:	4693      	mov	fp, r2
10002560:	681b      	ldr	r3, [r3, #0]
10002562:	6812      	ldr	r2, [r2, #0]
10002564:	18eb      	adds	r3, r5, r3
10002566:	3201      	adds	r2, #1
10002568:	d100      	bne.n	1000256c <_malloc_r+0x1f4>
1000256a:	e13d      	b.n	100027e8 <_malloc_r+0x470>
1000256c:	4a5c      	ldr	r2, [pc, #368]	; (100026e0 <_malloc_r+0x368>)
1000256e:	4694      	mov	ip, r2
10002570:	4463      	add	r3, ip
10002572:	0b1b      	lsrs	r3, r3, #12
10002574:	031b      	lsls	r3, r3, #12
10002576:	9300      	str	r3, [sp, #0]
10002578:	0030      	movs	r0, r6
1000257a:	9900      	ldr	r1, [sp, #0]
1000257c:	f000 f9ce 	bl	1000291c <_sbrk_r>
10002580:	0003      	movs	r3, r0
10002582:	4680      	mov	r8, r0
10002584:	3301      	adds	r3, #1
10002586:	d100      	bne.n	1000258a <_malloc_r+0x212>
10002588:	e0fa      	b.n	10002780 <_malloc_r+0x408>
1000258a:	9b01      	ldr	r3, [sp, #4]
1000258c:	4283      	cmp	r3, r0
1000258e:	d900      	bls.n	10002592 <_malloc_r+0x21a>
10002590:	e0f4      	b.n	1000277c <_malloc_r+0x404>
10002592:	4b54      	ldr	r3, [pc, #336]	; (100026e4 <_malloc_r+0x36c>)
10002594:	9800      	ldr	r0, [sp, #0]
10002596:	001a      	movs	r2, r3
10002598:	469a      	mov	sl, r3
1000259a:	6812      	ldr	r2, [r2, #0]
1000259c:	0003      	movs	r3, r0
1000259e:	4694      	mov	ip, r2
100025a0:	4651      	mov	r1, sl
100025a2:	4463      	add	r3, ip
100025a4:	600b      	str	r3, [r1, #0]
100025a6:	9901      	ldr	r1, [sp, #4]
100025a8:	001a      	movs	r2, r3
100025aa:	4541      	cmp	r1, r8
100025ac:	d100      	bne.n	100025b0 <_malloc_r+0x238>
100025ae:	e151      	b.n	10002854 <_malloc_r+0x4dc>
100025b0:	465b      	mov	r3, fp
100025b2:	681b      	ldr	r3, [r3, #0]
100025b4:	3301      	adds	r3, #1
100025b6:	d100      	bne.n	100025ba <_malloc_r+0x242>
100025b8:	e156      	b.n	10002868 <_malloc_r+0x4f0>
100025ba:	4643      	mov	r3, r8
100025bc:	9901      	ldr	r1, [sp, #4]
100025be:	1a5b      	subs	r3, r3, r1
100025c0:	189a      	adds	r2, r3, r2
100025c2:	4653      	mov	r3, sl
100025c4:	601a      	str	r2, [r3, #0]
100025c6:	2307      	movs	r3, #7
100025c8:	4642      	mov	r2, r8
100025ca:	4641      	mov	r1, r8
100025cc:	401a      	ands	r2, r3
100025ce:	9201      	str	r2, [sp, #4]
100025d0:	4219      	tst	r1, r3
100025d2:	d100      	bne.n	100025d6 <_malloc_r+0x25e>
100025d4:	e112      	b.n	100027fc <_malloc_r+0x484>
100025d6:	2308      	movs	r3, #8
100025d8:	4698      	mov	r8, r3
100025da:	1a88      	subs	r0, r1, r2
100025dc:	4b42      	ldr	r3, [pc, #264]	; (100026e8 <_malloc_r+0x370>)
100025de:	9900      	ldr	r1, [sp, #0]
100025e0:	4480      	add	r8, r0
100025e2:	4441      	add	r1, r8
100025e4:	1a9b      	subs	r3, r3, r2
100025e6:	1a5b      	subs	r3, r3, r1
100025e8:	051b      	lsls	r3, r3, #20
100025ea:	0d1b      	lsrs	r3, r3, #20
100025ec:	9100      	str	r1, [sp, #0]
100025ee:	0030      	movs	r0, r6
100025f0:	0019      	movs	r1, r3
100025f2:	469b      	mov	fp, r3
100025f4:	f000 f992 	bl	1000291c <_sbrk_r>
100025f8:	1c43      	adds	r3, r0, #1
100025fa:	d100      	bne.n	100025fe <_malloc_r+0x286>
100025fc:	e150      	b.n	100028a0 <_malloc_r+0x528>
100025fe:	4643      	mov	r3, r8
10002600:	1ac0      	subs	r0, r0, r3
10002602:	0003      	movs	r3, r0
10002604:	445b      	add	r3, fp
10002606:	9300      	str	r3, [sp, #0]
10002608:	4653      	mov	r3, sl
1000260a:	4652      	mov	r2, sl
1000260c:	681b      	ldr	r3, [r3, #0]
1000260e:	2101      	movs	r1, #1
10002610:	445b      	add	r3, fp
10002612:	6013      	str	r3, [r2, #0]
10002614:	4642      	mov	r2, r8
10002616:	4640      	mov	r0, r8
10002618:	60ba      	str	r2, [r7, #8]
1000261a:	9a00      	ldr	r2, [sp, #0]
1000261c:	430a      	orrs	r2, r1
1000261e:	6042      	str	r2, [r0, #4]
10002620:	42bc      	cmp	r4, r7
10002622:	d100      	bne.n	10002626 <_malloc_r+0x2ae>
10002624:	e124      	b.n	10002870 <_malloc_r+0x4f8>
10002626:	464a      	mov	r2, r9
10002628:	2a0f      	cmp	r2, #15
1000262a:	d800      	bhi.n	1000262e <_malloc_r+0x2b6>
1000262c:	e122      	b.n	10002874 <_malloc_r+0x4fc>
1000262e:	2007      	movs	r0, #7
10002630:	3a0c      	subs	r2, #12
10002632:	4382      	bics	r2, r0
10002634:	6860      	ldr	r0, [r4, #4]
10002636:	4001      	ands	r1, r0
10002638:	2005      	movs	r0, #5
1000263a:	4311      	orrs	r1, r2
1000263c:	6061      	str	r1, [r4, #4]
1000263e:	18a1      	adds	r1, r4, r2
10002640:	6048      	str	r0, [r1, #4]
10002642:	6088      	str	r0, [r1, #8]
10002644:	2a0f      	cmp	r2, #15
10002646:	d900      	bls.n	1000264a <_malloc_r+0x2d2>
10002648:	e135      	b.n	100028b6 <_malloc_r+0x53e>
1000264a:	4642      	mov	r2, r8
1000264c:	4644      	mov	r4, r8
1000264e:	6852      	ldr	r2, [r2, #4]
10002650:	4926      	ldr	r1, [pc, #152]	; (100026ec <_malloc_r+0x374>)
10002652:	6808      	ldr	r0, [r1, #0]
10002654:	4298      	cmp	r0, r3
10002656:	d200      	bcs.n	1000265a <_malloc_r+0x2e2>
10002658:	600b      	str	r3, [r1, #0]
1000265a:	4925      	ldr	r1, [pc, #148]	; (100026f0 <_malloc_r+0x378>)
1000265c:	6808      	ldr	r0, [r1, #0]
1000265e:	4298      	cmp	r0, r3
10002660:	d300      	bcc.n	10002664 <_malloc_r+0x2ec>
10002662:	e08f      	b.n	10002784 <_malloc_r+0x40c>
10002664:	600b      	str	r3, [r1, #0]
10002666:	e08d      	b.n	10002784 <_malloc_r+0x40c>
10002668:	2201      	movs	r2, #1
1000266a:	0029      	movs	r1, r5
1000266c:	4313      	orrs	r3, r2
1000266e:	4311      	orrs	r1, r2
10002670:	1965      	adds	r5, r4, r5
10002672:	6061      	str	r1, [r4, #4]
10002674:	0030      	movs	r0, r6
10002676:	60bd      	str	r5, [r7, #8]
10002678:	606b      	str	r3, [r5, #4]
1000267a:	f000 f947 	bl	1000290c <__malloc_unlock>
1000267e:	0020      	movs	r0, r4
10002680:	3008      	adds	r0, #8
10002682:	e73e      	b.n	10002502 <_malloc_r+0x18a>
10002684:	0a5a      	lsrs	r2, r3, #9
10002686:	2a04      	cmp	r2, #4
10002688:	d972      	bls.n	10002770 <_malloc_r+0x3f8>
1000268a:	2a14      	cmp	r2, #20
1000268c:	d900      	bls.n	10002690 <_malloc_r+0x318>
1000268e:	e0c5      	b.n	1000281c <_malloc_r+0x4a4>
10002690:	0011      	movs	r1, r2
10002692:	325c      	adds	r2, #92	; 0x5c
10002694:	315b      	adds	r1, #91	; 0x5b
10002696:	00d2      	lsls	r2, r2, #3
10002698:	2308      	movs	r3, #8
1000269a:	425b      	negs	r3, r3
1000269c:	469c      	mov	ip, r3
1000269e:	18ba      	adds	r2, r7, r2
100026a0:	4494      	add	ip, r2
100026a2:	4663      	mov	r3, ip
100026a4:	689a      	ldr	r2, [r3, #8]
100026a6:	2303      	movs	r3, #3
100026a8:	4698      	mov	r8, r3
100026aa:	4594      	cmp	ip, r2
100026ac:	d100      	bne.n	100026b0 <_malloc_r+0x338>
100026ae:	e09e      	b.n	100027ee <_malloc_r+0x476>
100026b0:	4643      	mov	r3, r8
100026b2:	6851      	ldr	r1, [r2, #4]
100026b4:	4399      	bics	r1, r3
100026b6:	4549      	cmp	r1, r9
100026b8:	d902      	bls.n	100026c0 <_malloc_r+0x348>
100026ba:	6892      	ldr	r2, [r2, #8]
100026bc:	4594      	cmp	ip, r2
100026be:	d1f7      	bne.n	100026b0 <_malloc_r+0x338>
100026c0:	68d3      	ldr	r3, [r2, #12]
100026c2:	469c      	mov	ip, r3
100026c4:	687b      	ldr	r3, [r7, #4]
100026c6:	4661      	mov	r1, ip
100026c8:	60a2      	str	r2, [r4, #8]
100026ca:	60e1      	str	r1, [r4, #12]
100026cc:	608c      	str	r4, [r1, #8]
100026ce:	60d4      	str	r4, [r2, #12]
100026d0:	e6d6      	b.n	10002480 <_malloc_r+0x108>
100026d2:	46c0      	nop			; (mov r8, r8)
100026d4:	20009c50 	.word	0x20009c50
100026d8:	2000a058 	.word	0x2000a058
100026dc:	2000a2d0 	.word	0x2000a2d0
100026e0:	0000100f 	.word	0x0000100f
100026e4:	2000a2a0 	.word	0x2000a2a0
100026e8:	00001008 	.word	0x00001008
100026ec:	2000a2c8 	.word	0x2000a2c8
100026f0:	2000a2cc 	.word	0x2000a2cc
100026f4:	2814      	cmp	r0, #20
100026f6:	d952      	bls.n	1000279e <_malloc_r+0x426>
100026f8:	2854      	cmp	r0, #84	; 0x54
100026fa:	d900      	bls.n	100026fe <_malloc_r+0x386>
100026fc:	e096      	b.n	1000282c <_malloc_r+0x4b4>
100026fe:	236e      	movs	r3, #110	; 0x6e
10002700:	4698      	mov	r8, r3
10002702:	0b28      	lsrs	r0, r5, #12
10002704:	4480      	add	r8, r0
10002706:	306f      	adds	r0, #111	; 0x6f
10002708:	00c1      	lsls	r1, r0, #3
1000270a:	e67e      	b.n	1000240a <_malloc_r+0x92>
1000270c:	2308      	movs	r3, #8
1000270e:	469b      	mov	fp, r3
10002710:	3b07      	subs	r3, #7
10002712:	44dc      	add	ip, fp
10002714:	469b      	mov	fp, r3
10002716:	44da      	add	sl, fp
10002718:	4643      	mov	r3, r8
1000271a:	4652      	mov	r2, sl
1000271c:	4213      	tst	r3, r2
1000271e:	d000      	beq.n	10002722 <_malloc_r+0x3aa>
10002720:	e6c2      	b.n	100024a8 <_malloc_r+0x130>
10002722:	e04c      	b.n	100027be <_malloc_r+0x446>
10002724:	2201      	movs	r2, #1
10002726:	18e3      	adds	r3, r4, r3
10002728:	6859      	ldr	r1, [r3, #4]
1000272a:	0030      	movs	r0, r6
1000272c:	430a      	orrs	r2, r1
1000272e:	605a      	str	r2, [r3, #4]
10002730:	68e3      	ldr	r3, [r4, #12]
10002732:	68a2      	ldr	r2, [r4, #8]
10002734:	60d3      	str	r3, [r2, #12]
10002736:	609a      	str	r2, [r3, #8]
10002738:	f000 f8e8 	bl	1000290c <__malloc_unlock>
1000273c:	0020      	movs	r0, r4
1000273e:	3008      	adds	r0, #8
10002740:	e6df      	b.n	10002502 <_malloc_r+0x18a>
10002742:	002b      	movs	r3, r5
10002744:	08e8      	lsrs	r0, r5, #3
10002746:	3308      	adds	r3, #8
10002748:	e62a      	b.n	100023a0 <_malloc_r+0x28>
1000274a:	2301      	movs	r3, #1
1000274c:	1960      	adds	r0, r4, r5
1000274e:	431d      	orrs	r5, r3
10002750:	6065      	str	r5, [r4, #4]
10002752:	6178      	str	r0, [r7, #20]
10002754:	6138      	str	r0, [r7, #16]
10002756:	60c2      	str	r2, [r0, #12]
10002758:	6082      	str	r2, [r0, #8]
1000275a:	001a      	movs	r2, r3
1000275c:	464b      	mov	r3, r9
1000275e:	430a      	orrs	r2, r1
10002760:	6042      	str	r2, [r0, #4]
10002762:	0030      	movs	r0, r6
10002764:	50e1      	str	r1, [r4, r3]
10002766:	f000 f8d1 	bl	1000290c <__malloc_unlock>
1000276a:	0020      	movs	r0, r4
1000276c:	3008      	adds	r0, #8
1000276e:	e6c8      	b.n	10002502 <_malloc_r+0x18a>
10002770:	099a      	lsrs	r2, r3, #6
10002772:	0011      	movs	r1, r2
10002774:	3239      	adds	r2, #57	; 0x39
10002776:	3138      	adds	r1, #56	; 0x38
10002778:	00d2      	lsls	r2, r2, #3
1000277a:	e78d      	b.n	10002698 <_malloc_r+0x320>
1000277c:	42bc      	cmp	r4, r7
1000277e:	d060      	beq.n	10002842 <_malloc_r+0x4ca>
10002780:	68bc      	ldr	r4, [r7, #8]
10002782:	6862      	ldr	r2, [r4, #4]
10002784:	2303      	movs	r3, #3
10002786:	439a      	bics	r2, r3
10002788:	1b53      	subs	r3, r2, r5
1000278a:	4295      	cmp	r5, r2
1000278c:	d802      	bhi.n	10002794 <_malloc_r+0x41c>
1000278e:	2b0f      	cmp	r3, #15
10002790:	dd00      	ble.n	10002794 <_malloc_r+0x41c>
10002792:	e769      	b.n	10002668 <_malloc_r+0x2f0>
10002794:	0030      	movs	r0, r6
10002796:	f000 f8b9 	bl	1000290c <__malloc_unlock>
1000279a:	2000      	movs	r0, #0
1000279c:	e6b1      	b.n	10002502 <_malloc_r+0x18a>
1000279e:	235b      	movs	r3, #91	; 0x5b
100027a0:	4698      	mov	r8, r3
100027a2:	4480      	add	r8, r0
100027a4:	305c      	adds	r0, #92	; 0x5c
100027a6:	00c1      	lsls	r1, r0, #3
100027a8:	e62f      	b.n	1000240a <_malloc_r+0x92>
100027aa:	2308      	movs	r3, #8
100027ac:	425b      	negs	r3, r3
100027ae:	469c      	mov	ip, r3
100027b0:	44e1      	add	r9, ip
100027b2:	464b      	mov	r3, r9
100027b4:	689b      	ldr	r3, [r3, #8]
100027b6:	3801      	subs	r0, #1
100027b8:	454b      	cmp	r3, r9
100027ba:	d000      	beq.n	100027be <_malloc_r+0x446>
100027bc:	e098      	b.n	100028f0 <_malloc_r+0x578>
100027be:	4643      	mov	r3, r8
100027c0:	4203      	tst	r3, r0
100027c2:	d1f2      	bne.n	100027aa <_malloc_r+0x432>
100027c4:	687b      	ldr	r3, [r7, #4]
100027c6:	438b      	bics	r3, r1
100027c8:	607b      	str	r3, [r7, #4]
100027ca:	0049      	lsls	r1, r1, #1
100027cc:	4299      	cmp	r1, r3
100027ce:	d900      	bls.n	100027d2 <_malloc_r+0x45a>
100027d0:	e6b5      	b.n	1000253e <_malloc_r+0x1c6>
100027d2:	2900      	cmp	r1, #0
100027d4:	d104      	bne.n	100027e0 <_malloc_r+0x468>
100027d6:	e6b2      	b.n	1000253e <_malloc_r+0x1c6>
100027d8:	2204      	movs	r2, #4
100027da:	4694      	mov	ip, r2
100027dc:	0049      	lsls	r1, r1, #1
100027de:	44e2      	add	sl, ip
100027e0:	420b      	tst	r3, r1
100027e2:	d0f9      	beq.n	100027d8 <_malloc_r+0x460>
100027e4:	4650      	mov	r0, sl
100027e6:	e65a      	b.n	1000249e <_malloc_r+0x126>
100027e8:	3310      	adds	r3, #16
100027ea:	9300      	str	r3, [sp, #0]
100027ec:	e6c4      	b.n	10002578 <_malloc_r+0x200>
100027ee:	1089      	asrs	r1, r1, #2
100027f0:	3b02      	subs	r3, #2
100027f2:	408b      	lsls	r3, r1
100027f4:	6879      	ldr	r1, [r7, #4]
100027f6:	430b      	orrs	r3, r1
100027f8:	607b      	str	r3, [r7, #4]
100027fa:	e764      	b.n	100026c6 <_malloc_r+0x34e>
100027fc:	9b00      	ldr	r3, [sp, #0]
100027fe:	0030      	movs	r0, r6
10002800:	4443      	add	r3, r8
10002802:	425b      	negs	r3, r3
10002804:	051b      	lsls	r3, r3, #20
10002806:	0d1b      	lsrs	r3, r3, #20
10002808:	0019      	movs	r1, r3
1000280a:	469b      	mov	fp, r3
1000280c:	f000 f886 	bl	1000291c <_sbrk_r>
10002810:	1c43      	adds	r3, r0, #1
10002812:	d000      	beq.n	10002816 <_malloc_r+0x49e>
10002814:	e6f3      	b.n	100025fe <_malloc_r+0x286>
10002816:	2300      	movs	r3, #0
10002818:	469b      	mov	fp, r3
1000281a:	e6f5      	b.n	10002608 <_malloc_r+0x290>
1000281c:	2a54      	cmp	r2, #84	; 0x54
1000281e:	d82b      	bhi.n	10002878 <_malloc_r+0x500>
10002820:	0b1a      	lsrs	r2, r3, #12
10002822:	0011      	movs	r1, r2
10002824:	326f      	adds	r2, #111	; 0x6f
10002826:	316e      	adds	r1, #110	; 0x6e
10002828:	00d2      	lsls	r2, r2, #3
1000282a:	e735      	b.n	10002698 <_malloc_r+0x320>
1000282c:	23aa      	movs	r3, #170	; 0xaa
1000282e:	005b      	lsls	r3, r3, #1
10002830:	4298      	cmp	r0, r3
10002832:	d82b      	bhi.n	1000288c <_malloc_r+0x514>
10002834:	3bdd      	subs	r3, #221	; 0xdd
10002836:	4698      	mov	r8, r3
10002838:	0be8      	lsrs	r0, r5, #15
1000283a:	4480      	add	r8, r0
1000283c:	3078      	adds	r0, #120	; 0x78
1000283e:	00c1      	lsls	r1, r0, #3
10002840:	e5e3      	b.n	1000240a <_malloc_r+0x92>
10002842:	4b2c      	ldr	r3, [pc, #176]	; (100028f4 <_malloc_r+0x57c>)
10002844:	9a00      	ldr	r2, [sp, #0]
10002846:	469a      	mov	sl, r3
10002848:	681b      	ldr	r3, [r3, #0]
1000284a:	469c      	mov	ip, r3
1000284c:	4653      	mov	r3, sl
1000284e:	4462      	add	r2, ip
10002850:	601a      	str	r2, [r3, #0]
10002852:	e6ad      	b.n	100025b0 <_malloc_r+0x238>
10002854:	0509      	lsls	r1, r1, #20
10002856:	d000      	beq.n	1000285a <_malloc_r+0x4e2>
10002858:	e6aa      	b.n	100025b0 <_malloc_r+0x238>
1000285a:	0002      	movs	r2, r0
1000285c:	68bc      	ldr	r4, [r7, #8]
1000285e:	444a      	add	r2, r9
10002860:	3101      	adds	r1, #1
10002862:	430a      	orrs	r2, r1
10002864:	6062      	str	r2, [r4, #4]
10002866:	e6f3      	b.n	10002650 <_malloc_r+0x2d8>
10002868:	465b      	mov	r3, fp
1000286a:	4642      	mov	r2, r8
1000286c:	601a      	str	r2, [r3, #0]
1000286e:	e6aa      	b.n	100025c6 <_malloc_r+0x24e>
10002870:	4644      	mov	r4, r8
10002872:	e6ed      	b.n	10002650 <_malloc_r+0x2d8>
10002874:	6041      	str	r1, [r0, #4]
10002876:	e78d      	b.n	10002794 <_malloc_r+0x41c>
10002878:	21aa      	movs	r1, #170	; 0xaa
1000287a:	0049      	lsls	r1, r1, #1
1000287c:	428a      	cmp	r2, r1
1000287e:	d824      	bhi.n	100028ca <_malloc_r+0x552>
10002880:	0bda      	lsrs	r2, r3, #15
10002882:	0011      	movs	r1, r2
10002884:	3278      	adds	r2, #120	; 0x78
10002886:	3177      	adds	r1, #119	; 0x77
10002888:	00d2      	lsls	r2, r2, #3
1000288a:	e705      	b.n	10002698 <_malloc_r+0x320>
1000288c:	4b1a      	ldr	r3, [pc, #104]	; (100028f8 <_malloc_r+0x580>)
1000288e:	4298      	cmp	r0, r3
10002890:	d824      	bhi.n	100028dc <_malloc_r+0x564>
10002892:	237c      	movs	r3, #124	; 0x7c
10002894:	4698      	mov	r8, r3
10002896:	0ca8      	lsrs	r0, r5, #18
10002898:	4480      	add	r8, r0
1000289a:	307d      	adds	r0, #125	; 0x7d
1000289c:	00c1      	lsls	r1, r0, #3
1000289e:	e5b4      	b.n	1000240a <_malloc_r+0x92>
100028a0:	9a00      	ldr	r2, [sp, #0]
100028a2:	9b01      	ldr	r3, [sp, #4]
100028a4:	4694      	mov	ip, r2
100028a6:	4642      	mov	r2, r8
100028a8:	3b08      	subs	r3, #8
100028aa:	4463      	add	r3, ip
100028ac:	1a9b      	subs	r3, r3, r2
100028ae:	9300      	str	r3, [sp, #0]
100028b0:	2300      	movs	r3, #0
100028b2:	469b      	mov	fp, r3
100028b4:	e6a8      	b.n	10002608 <_malloc_r+0x290>
100028b6:	0021      	movs	r1, r4
100028b8:	0030      	movs	r0, r6
100028ba:	3108      	adds	r1, #8
100028bc:	f000 f8bc 	bl	10002a38 <_free_r>
100028c0:	4653      	mov	r3, sl
100028c2:	68bc      	ldr	r4, [r7, #8]
100028c4:	681b      	ldr	r3, [r3, #0]
100028c6:	6862      	ldr	r2, [r4, #4]
100028c8:	e6c2      	b.n	10002650 <_malloc_r+0x2d8>
100028ca:	490b      	ldr	r1, [pc, #44]	; (100028f8 <_malloc_r+0x580>)
100028cc:	428a      	cmp	r2, r1
100028ce:	d80b      	bhi.n	100028e8 <_malloc_r+0x570>
100028d0:	0c9a      	lsrs	r2, r3, #18
100028d2:	0011      	movs	r1, r2
100028d4:	327d      	adds	r2, #125	; 0x7d
100028d6:	317c      	adds	r1, #124	; 0x7c
100028d8:	00d2      	lsls	r2, r2, #3
100028da:	e6dd      	b.n	10002698 <_malloc_r+0x320>
100028dc:	21fe      	movs	r1, #254	; 0xfe
100028de:	237e      	movs	r3, #126	; 0x7e
100028e0:	207f      	movs	r0, #127	; 0x7f
100028e2:	4698      	mov	r8, r3
100028e4:	0089      	lsls	r1, r1, #2
100028e6:	e590      	b.n	1000240a <_malloc_r+0x92>
100028e8:	22fe      	movs	r2, #254	; 0xfe
100028ea:	217e      	movs	r1, #126	; 0x7e
100028ec:	0092      	lsls	r2, r2, #2
100028ee:	e6d3      	b.n	10002698 <_malloc_r+0x320>
100028f0:	687b      	ldr	r3, [r7, #4]
100028f2:	e76a      	b.n	100027ca <_malloc_r+0x452>
100028f4:	2000a2a0 	.word	0x2000a2a0
100028f8:	00000554 	.word	0x00000554

100028fc <__malloc_lock>:
100028fc:	b510      	push	{r4, lr}
100028fe:	4802      	ldr	r0, [pc, #8]	; (10002908 <__malloc_lock+0xc>)
10002900:	f000 f97c 	bl	10002bfc <__retarget_lock_acquire_recursive>
10002904:	bd10      	pop	{r4, pc}
10002906:	46c0      	nop			; (mov r8, r8)
10002908:	2000a29c 	.word	0x2000a29c

1000290c <__malloc_unlock>:
1000290c:	b510      	push	{r4, lr}
1000290e:	4802      	ldr	r0, [pc, #8]	; (10002918 <__malloc_unlock+0xc>)
10002910:	f000 f976 	bl	10002c00 <__retarget_lock_release_recursive>
10002914:	bd10      	pop	{r4, pc}
10002916:	46c0      	nop			; (mov r8, r8)
10002918:	2000a29c 	.word	0x2000a29c

1000291c <_sbrk_r>:
1000291c:	2300      	movs	r3, #0
1000291e:	b570      	push	{r4, r5, r6, lr}
10002920:	4d06      	ldr	r5, [pc, #24]	; (1000293c <_sbrk_r+0x20>)
10002922:	0004      	movs	r4, r0
10002924:	0008      	movs	r0, r1
10002926:	602b      	str	r3, [r5, #0]
10002928:	f7fe fede 	bl	100016e8 <_sbrk>
1000292c:	1c43      	adds	r3, r0, #1
1000292e:	d000      	beq.n	10002932 <_sbrk_r+0x16>
10002930:	bd70      	pop	{r4, r5, r6, pc}
10002932:	682b      	ldr	r3, [r5, #0]
10002934:	2b00      	cmp	r3, #0
10002936:	d0fb      	beq.n	10002930 <_sbrk_r+0x14>
10002938:	6023      	str	r3, [r4, #0]
1000293a:	e7f9      	b.n	10002930 <_sbrk_r+0x14>
1000293c:	2000a414 	.word	0x2000a414

10002940 <strlen>:
10002940:	b510      	push	{r4, lr}
10002942:	0783      	lsls	r3, r0, #30
10002944:	d00a      	beq.n	1000295c <strlen+0x1c>
10002946:	0003      	movs	r3, r0
10002948:	2103      	movs	r1, #3
1000294a:	e002      	b.n	10002952 <strlen+0x12>
1000294c:	3301      	adds	r3, #1
1000294e:	420b      	tst	r3, r1
10002950:	d005      	beq.n	1000295e <strlen+0x1e>
10002952:	781a      	ldrb	r2, [r3, #0]
10002954:	2a00      	cmp	r2, #0
10002956:	d1f9      	bne.n	1000294c <strlen+0xc>
10002958:	1a18      	subs	r0, r3, r0
1000295a:	bd10      	pop	{r4, pc}
1000295c:	0003      	movs	r3, r0
1000295e:	6819      	ldr	r1, [r3, #0]
10002960:	4a0c      	ldr	r2, [pc, #48]	; (10002994 <strlen+0x54>)
10002962:	4c0d      	ldr	r4, [pc, #52]	; (10002998 <strlen+0x58>)
10002964:	188a      	adds	r2, r1, r2
10002966:	438a      	bics	r2, r1
10002968:	4222      	tst	r2, r4
1000296a:	d10f      	bne.n	1000298c <strlen+0x4c>
1000296c:	6859      	ldr	r1, [r3, #4]
1000296e:	4a09      	ldr	r2, [pc, #36]	; (10002994 <strlen+0x54>)
10002970:	3304      	adds	r3, #4
10002972:	188a      	adds	r2, r1, r2
10002974:	438a      	bics	r2, r1
10002976:	4222      	tst	r2, r4
10002978:	d108      	bne.n	1000298c <strlen+0x4c>
1000297a:	6859      	ldr	r1, [r3, #4]
1000297c:	4a05      	ldr	r2, [pc, #20]	; (10002994 <strlen+0x54>)
1000297e:	3304      	adds	r3, #4
10002980:	188a      	adds	r2, r1, r2
10002982:	438a      	bics	r2, r1
10002984:	4222      	tst	r2, r4
10002986:	d0f1      	beq.n	1000296c <strlen+0x2c>
10002988:	e000      	b.n	1000298c <strlen+0x4c>
1000298a:	3301      	adds	r3, #1
1000298c:	781a      	ldrb	r2, [r3, #0]
1000298e:	2a00      	cmp	r2, #0
10002990:	d1fb      	bne.n	1000298a <strlen+0x4a>
10002992:	e7e1      	b.n	10002958 <strlen+0x18>
10002994:	fefefeff 	.word	0xfefefeff
10002998:	80808080 	.word	0x80808080

1000299c <_malloc_trim_r>:
1000299c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000299e:	000c      	movs	r4, r1
100029a0:	0005      	movs	r5, r0
100029a2:	f7ff ffab 	bl	100028fc <__malloc_lock>
100029a6:	4f20      	ldr	r7, [pc, #128]	; (10002a28 <_malloc_trim_r+0x8c>)
100029a8:	68bb      	ldr	r3, [r7, #8]
100029aa:	685e      	ldr	r6, [r3, #4]
100029ac:	2303      	movs	r3, #3
100029ae:	439e      	bics	r6, r3
100029b0:	4b1e      	ldr	r3, [pc, #120]	; (10002a2c <_malloc_trim_r+0x90>)
100029b2:	1b34      	subs	r4, r6, r4
100029b4:	469c      	mov	ip, r3
100029b6:	4464      	add	r4, ip
100029b8:	0b24      	lsrs	r4, r4, #12
100029ba:	3c01      	subs	r4, #1
100029bc:	3311      	adds	r3, #17
100029be:	0324      	lsls	r4, r4, #12
100029c0:	429c      	cmp	r4, r3
100029c2:	db07      	blt.n	100029d4 <_malloc_trim_r+0x38>
100029c4:	2100      	movs	r1, #0
100029c6:	0028      	movs	r0, r5
100029c8:	f7ff ffa8 	bl	1000291c <_sbrk_r>
100029cc:	68bb      	ldr	r3, [r7, #8]
100029ce:	199b      	adds	r3, r3, r6
100029d0:	4298      	cmp	r0, r3
100029d2:	d004      	beq.n	100029de <_malloc_trim_r+0x42>
100029d4:	0028      	movs	r0, r5
100029d6:	f7ff ff99 	bl	1000290c <__malloc_unlock>
100029da:	2000      	movs	r0, #0
100029dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100029de:	0028      	movs	r0, r5
100029e0:	4261      	negs	r1, r4
100029e2:	f7ff ff9b 	bl	1000291c <_sbrk_r>
100029e6:	1c43      	adds	r3, r0, #1
100029e8:	d00d      	beq.n	10002a06 <_malloc_trim_r+0x6a>
100029ea:	2201      	movs	r2, #1
100029ec:	68bb      	ldr	r3, [r7, #8]
100029ee:	1b36      	subs	r6, r6, r4
100029f0:	4316      	orrs	r6, r2
100029f2:	605e      	str	r6, [r3, #4]
100029f4:	4b0e      	ldr	r3, [pc, #56]	; (10002a30 <_malloc_trim_r+0x94>)
100029f6:	0028      	movs	r0, r5
100029f8:	681a      	ldr	r2, [r3, #0]
100029fa:	1b14      	subs	r4, r2, r4
100029fc:	601c      	str	r4, [r3, #0]
100029fe:	f7ff ff85 	bl	1000290c <__malloc_unlock>
10002a02:	2001      	movs	r0, #1
10002a04:	e7ea      	b.n	100029dc <_malloc_trim_r+0x40>
10002a06:	2100      	movs	r1, #0
10002a08:	0028      	movs	r0, r5
10002a0a:	f7ff ff87 	bl	1000291c <_sbrk_r>
10002a0e:	68ba      	ldr	r2, [r7, #8]
10002a10:	1a83      	subs	r3, r0, r2
10002a12:	2b0f      	cmp	r3, #15
10002a14:	ddde      	ble.n	100029d4 <_malloc_trim_r+0x38>
10002a16:	4907      	ldr	r1, [pc, #28]	; (10002a34 <_malloc_trim_r+0x98>)
10002a18:	6809      	ldr	r1, [r1, #0]
10002a1a:	1a40      	subs	r0, r0, r1
10002a1c:	4904      	ldr	r1, [pc, #16]	; (10002a30 <_malloc_trim_r+0x94>)
10002a1e:	6008      	str	r0, [r1, #0]
10002a20:	2101      	movs	r1, #1
10002a22:	430b      	orrs	r3, r1
10002a24:	6053      	str	r3, [r2, #4]
10002a26:	e7d5      	b.n	100029d4 <_malloc_trim_r+0x38>
10002a28:	20009c50 	.word	0x20009c50
10002a2c:	00000fef 	.word	0x00000fef
10002a30:	2000a2a0 	.word	0x2000a2a0
10002a34:	2000a058 	.word	0x2000a058

10002a38 <_free_r>:
10002a38:	b5f0      	push	{r4, r5, r6, r7, lr}
10002a3a:	46c6      	mov	lr, r8
10002a3c:	0005      	movs	r5, r0
10002a3e:	000c      	movs	r4, r1
10002a40:	b500      	push	{lr}
10002a42:	2900      	cmp	r1, #0
10002a44:	d04f      	beq.n	10002ae6 <_free_r+0xae>
10002a46:	f7ff ff59 	bl	100028fc <__malloc_lock>
10002a4a:	0021      	movs	r1, r4
10002a4c:	3908      	subs	r1, #8
10002a4e:	684c      	ldr	r4, [r1, #4]
10002a50:	2601      	movs	r6, #1
10002a52:	0022      	movs	r2, r4
10002a54:	2003      	movs	r0, #3
10002a56:	43b2      	bics	r2, r6
10002a58:	188f      	adds	r7, r1, r2
10002a5a:	687b      	ldr	r3, [r7, #4]
10002a5c:	4383      	bics	r3, r0
10002a5e:	4862      	ldr	r0, [pc, #392]	; (10002be8 <_free_r+0x1b0>)
10002a60:	4698      	mov	r8, r3
10002a62:	6883      	ldr	r3, [r0, #8]
10002a64:	42bb      	cmp	r3, r7
10002a66:	d06a      	beq.n	10002b3e <_free_r+0x106>
10002a68:	4643      	mov	r3, r8
10002a6a:	607b      	str	r3, [r7, #4]
10002a6c:	4226      	tst	r6, r4
10002a6e:	d11e      	bne.n	10002aae <_free_r+0x76>
10002a70:	2308      	movs	r3, #8
10002a72:	469c      	mov	ip, r3
10002a74:	680c      	ldr	r4, [r1, #0]
10002a76:	4484      	add	ip, r0
10002a78:	1b09      	subs	r1, r1, r4
10002a7a:	1912      	adds	r2, r2, r4
10002a7c:	688c      	ldr	r4, [r1, #8]
10002a7e:	4564      	cmp	r4, ip
10002a80:	d04f      	beq.n	10002b22 <_free_r+0xea>
10002a82:	68cb      	ldr	r3, [r1, #12]
10002a84:	60e3      	str	r3, [r4, #12]
10002a86:	609c      	str	r4, [r3, #8]
10002a88:	4643      	mov	r3, r8
10002a8a:	18fc      	adds	r4, r7, r3
10002a8c:	6864      	ldr	r4, [r4, #4]
10002a8e:	4234      	tst	r4, r6
10002a90:	d111      	bne.n	10002ab6 <_free_r+0x7e>
10002a92:	68bb      	ldr	r3, [r7, #8]
10002a94:	4c55      	ldr	r4, [pc, #340]	; (10002bec <_free_r+0x1b4>)
10002a96:	4442      	add	r2, r8
10002a98:	42a3      	cmp	r3, r4
10002a9a:	d100      	bne.n	10002a9e <_free_r+0x66>
10002a9c:	e07e      	b.n	10002b9c <_free_r+0x164>
10002a9e:	68fc      	ldr	r4, [r7, #12]
10002aa0:	60dc      	str	r4, [r3, #12]
10002aa2:	60a3      	str	r3, [r4, #8]
10002aa4:	2301      	movs	r3, #1
10002aa6:	4313      	orrs	r3, r2
10002aa8:	604b      	str	r3, [r1, #4]
10002aaa:	508a      	str	r2, [r1, r2]
10002aac:	e006      	b.n	10002abc <_free_r+0x84>
10002aae:	18fc      	adds	r4, r7, r3
10002ab0:	6864      	ldr	r4, [r4, #4]
10002ab2:	4234      	tst	r4, r6
10002ab4:	d0ed      	beq.n	10002a92 <_free_r+0x5a>
10002ab6:	4316      	orrs	r6, r2
10002ab8:	604e      	str	r6, [r1, #4]
10002aba:	603a      	str	r2, [r7, #0]
10002abc:	2380      	movs	r3, #128	; 0x80
10002abe:	009b      	lsls	r3, r3, #2
10002ac0:	429a      	cmp	r2, r3
10002ac2:	d213      	bcs.n	10002aec <_free_r+0xb4>
10002ac4:	0954      	lsrs	r4, r2, #5
10002ac6:	08d3      	lsrs	r3, r2, #3
10002ac8:	2201      	movs	r2, #1
10002aca:	40a2      	lsls	r2, r4
10002acc:	6844      	ldr	r4, [r0, #4]
10002ace:	00db      	lsls	r3, r3, #3
10002ad0:	4322      	orrs	r2, r4
10002ad2:	6042      	str	r2, [r0, #4]
10002ad4:	1818      	adds	r0, r3, r0
10002ad6:	6883      	ldr	r3, [r0, #8]
10002ad8:	60c8      	str	r0, [r1, #12]
10002ada:	608b      	str	r3, [r1, #8]
10002adc:	6081      	str	r1, [r0, #8]
10002ade:	60d9      	str	r1, [r3, #12]
10002ae0:	0028      	movs	r0, r5
10002ae2:	f7ff ff13 	bl	1000290c <__malloc_unlock>
10002ae6:	bc80      	pop	{r7}
10002ae8:	46b8      	mov	r8, r7
10002aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002aec:	0a53      	lsrs	r3, r2, #9
10002aee:	2b04      	cmp	r3, #4
10002af0:	d83e      	bhi.n	10002b70 <_free_r+0x138>
10002af2:	0994      	lsrs	r4, r2, #6
10002af4:	0026      	movs	r6, r4
10002af6:	3439      	adds	r4, #57	; 0x39
10002af8:	3638      	adds	r6, #56	; 0x38
10002afa:	00e4      	lsls	r4, r4, #3
10002afc:	1904      	adds	r4, r0, r4
10002afe:	6823      	ldr	r3, [r4, #0]
10002b00:	3c08      	subs	r4, #8
10002b02:	2703      	movs	r7, #3
10002b04:	429c      	cmp	r4, r3
10002b06:	d042      	beq.n	10002b8e <_free_r+0x156>
10002b08:	6858      	ldr	r0, [r3, #4]
10002b0a:	43b8      	bics	r0, r7
10002b0c:	4290      	cmp	r0, r2
10002b0e:	d902      	bls.n	10002b16 <_free_r+0xde>
10002b10:	689b      	ldr	r3, [r3, #8]
10002b12:	429c      	cmp	r4, r3
10002b14:	d1f8      	bne.n	10002b08 <_free_r+0xd0>
10002b16:	68dc      	ldr	r4, [r3, #12]
10002b18:	60cc      	str	r4, [r1, #12]
10002b1a:	608b      	str	r3, [r1, #8]
10002b1c:	60a1      	str	r1, [r4, #8]
10002b1e:	60d9      	str	r1, [r3, #12]
10002b20:	e7de      	b.n	10002ae0 <_free_r+0xa8>
10002b22:	4643      	mov	r3, r8
10002b24:	18f8      	adds	r0, r7, r3
10002b26:	6840      	ldr	r0, [r0, #4]
10002b28:	4230      	tst	r0, r6
10002b2a:	d157      	bne.n	10002bdc <_free_r+0x1a4>
10002b2c:	68fb      	ldr	r3, [r7, #12]
10002b2e:	68b8      	ldr	r0, [r7, #8]
10002b30:	4442      	add	r2, r8
10002b32:	4316      	orrs	r6, r2
10002b34:	60c3      	str	r3, [r0, #12]
10002b36:	6098      	str	r0, [r3, #8]
10002b38:	604e      	str	r6, [r1, #4]
10002b3a:	508a      	str	r2, [r1, r2]
10002b3c:	e7d0      	b.n	10002ae0 <_free_r+0xa8>
10002b3e:	0013      	movs	r3, r2
10002b40:	4443      	add	r3, r8
10002b42:	4226      	tst	r6, r4
10002b44:	d106      	bne.n	10002b54 <_free_r+0x11c>
10002b46:	680a      	ldr	r2, [r1, #0]
10002b48:	1a89      	subs	r1, r1, r2
10002b4a:	688c      	ldr	r4, [r1, #8]
10002b4c:	189b      	adds	r3, r3, r2
10002b4e:	68ca      	ldr	r2, [r1, #12]
10002b50:	60e2      	str	r2, [r4, #12]
10002b52:	6094      	str	r4, [r2, #8]
10002b54:	2201      	movs	r2, #1
10002b56:	431a      	orrs	r2, r3
10002b58:	604a      	str	r2, [r1, #4]
10002b5a:	4a25      	ldr	r2, [pc, #148]	; (10002bf0 <_free_r+0x1b8>)
10002b5c:	6081      	str	r1, [r0, #8]
10002b5e:	6812      	ldr	r2, [r2, #0]
10002b60:	429a      	cmp	r2, r3
10002b62:	d8bd      	bhi.n	10002ae0 <_free_r+0xa8>
10002b64:	4b23      	ldr	r3, [pc, #140]	; (10002bf4 <_free_r+0x1bc>)
10002b66:	0028      	movs	r0, r5
10002b68:	6819      	ldr	r1, [r3, #0]
10002b6a:	f7ff ff17 	bl	1000299c <_malloc_trim_r>
10002b6e:	e7b7      	b.n	10002ae0 <_free_r+0xa8>
10002b70:	2b14      	cmp	r3, #20
10002b72:	d907      	bls.n	10002b84 <_free_r+0x14c>
10002b74:	2b54      	cmp	r3, #84	; 0x54
10002b76:	d81a      	bhi.n	10002bae <_free_r+0x176>
10002b78:	0b14      	lsrs	r4, r2, #12
10002b7a:	0026      	movs	r6, r4
10002b7c:	346f      	adds	r4, #111	; 0x6f
10002b7e:	366e      	adds	r6, #110	; 0x6e
10002b80:	00e4      	lsls	r4, r4, #3
10002b82:	e7bb      	b.n	10002afc <_free_r+0xc4>
10002b84:	001e      	movs	r6, r3
10002b86:	335c      	adds	r3, #92	; 0x5c
10002b88:	365b      	adds	r6, #91	; 0x5b
10002b8a:	00dc      	lsls	r4, r3, #3
10002b8c:	e7b6      	b.n	10002afc <_free_r+0xc4>
10002b8e:	2201      	movs	r2, #1
10002b90:	10b6      	asrs	r6, r6, #2
10002b92:	40b2      	lsls	r2, r6
10002b94:	6846      	ldr	r6, [r0, #4]
10002b96:	4332      	orrs	r2, r6
10002b98:	6042      	str	r2, [r0, #4]
10002b9a:	e7bd      	b.n	10002b18 <_free_r+0xe0>
10002b9c:	60d9      	str	r1, [r3, #12]
10002b9e:	6099      	str	r1, [r3, #8]
10002ba0:	60cb      	str	r3, [r1, #12]
10002ba2:	608b      	str	r3, [r1, #8]
10002ba4:	2301      	movs	r3, #1
10002ba6:	4313      	orrs	r3, r2
10002ba8:	604b      	str	r3, [r1, #4]
10002baa:	508a      	str	r2, [r1, r2]
10002bac:	e798      	b.n	10002ae0 <_free_r+0xa8>
10002bae:	24aa      	movs	r4, #170	; 0xaa
10002bb0:	0064      	lsls	r4, r4, #1
10002bb2:	42a3      	cmp	r3, r4
10002bb4:	d805      	bhi.n	10002bc2 <_free_r+0x18a>
10002bb6:	0bd4      	lsrs	r4, r2, #15
10002bb8:	0026      	movs	r6, r4
10002bba:	3478      	adds	r4, #120	; 0x78
10002bbc:	3677      	adds	r6, #119	; 0x77
10002bbe:	00e4      	lsls	r4, r4, #3
10002bc0:	e79c      	b.n	10002afc <_free_r+0xc4>
10002bc2:	4c0d      	ldr	r4, [pc, #52]	; (10002bf8 <_free_r+0x1c0>)
10002bc4:	42a3      	cmp	r3, r4
10002bc6:	d805      	bhi.n	10002bd4 <_free_r+0x19c>
10002bc8:	0c94      	lsrs	r4, r2, #18
10002bca:	0026      	movs	r6, r4
10002bcc:	347d      	adds	r4, #125	; 0x7d
10002bce:	367c      	adds	r6, #124	; 0x7c
10002bd0:	00e4      	lsls	r4, r4, #3
10002bd2:	e793      	b.n	10002afc <_free_r+0xc4>
10002bd4:	24fe      	movs	r4, #254	; 0xfe
10002bd6:	267e      	movs	r6, #126	; 0x7e
10002bd8:	00a4      	lsls	r4, r4, #2
10002bda:	e78f      	b.n	10002afc <_free_r+0xc4>
10002bdc:	0033      	movs	r3, r6
10002bde:	4313      	orrs	r3, r2
10002be0:	604b      	str	r3, [r1, #4]
10002be2:	603a      	str	r2, [r7, #0]
10002be4:	e77c      	b.n	10002ae0 <_free_r+0xa8>
10002be6:	46c0      	nop			; (mov r8, r8)
10002be8:	20009c50 	.word	0x20009c50
10002bec:	20009c58 	.word	0x20009c58
10002bf0:	2000a05c 	.word	0x2000a05c
10002bf4:	2000a2d0 	.word	0x2000a2d0
10002bf8:	00000554 	.word	0x00000554

10002bfc <__retarget_lock_acquire_recursive>:
10002bfc:	4770      	bx	lr
10002bfe:	46c0      	nop			; (mov r8, r8)

10002c00 <__retarget_lock_release_recursive>:
10002c00:	4770      	bx	lr
10002c02:	46c0      	nop			; (mov r8, r8)

10002c04 <_fini>:
10002c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002c06:	46c0      	nop			; (mov r8, r8)

10002c08 <__mutex_exit_veneer>:
10002c08:	b401      	push	{r0}
10002c0a:	4802      	ldr	r0, [pc, #8]	; (10002c14 <__mutex_exit_veneer+0xc>)
10002c0c:	4684      	mov	ip, r0
10002c0e:	bc01      	pop	{r0}
10002c10:	4760      	bx	ip
10002c12:	bf00      	nop
10002c14:	2000026d 	.word	0x2000026d

10002c18 <____aeabi_ldiv0_veneer>:
10002c18:	b401      	push	{r0}
10002c1a:	4802      	ldr	r0, [pc, #8]	; (10002c24 <____aeabi_ldiv0_veneer+0xc>)
10002c1c:	4684      	mov	ip, r0
10002c1e:	bc01      	pop	{r0}
10002c20:	4760      	bx	ip
10002c22:	bf00      	nop
10002c24:	20000295 	.word	0x20000295

10002c28 <____aeabi_idiv0_veneer>:
10002c28:	b401      	push	{r0}
10002c2a:	4802      	ldr	r0, [pc, #8]	; (10002c34 <____aeabi_idiv0_veneer+0xc>)
10002c2c:	4684      	mov	ip, r0
10002c2e:	bc01      	pop	{r0}
10002c30:	4760      	bx	ip
10002c32:	bf00      	nop
10002c34:	20000295 	.word	0x20000295

10002c38 <__mutex_try_enter_veneer>:
10002c38:	b401      	push	{r0}
10002c3a:	4802      	ldr	r0, [pc, #8]	; (10002c44 <__mutex_try_enter_veneer+0xc>)
10002c3c:	4684      	mov	ip, r0
10002c3e:	bc01      	pop	{r0}
10002c40:	4760      	bx	ip
10002c42:	bf00      	nop
10002c44:	20000229 	.word	0x20000229

10002c48 <__flash_do_cmd.constprop.0_veneer>:
10002c48:	b401      	push	{r0}
10002c4a:	4802      	ldr	r0, [pc, #8]	; (10002c54 <__flash_do_cmd.constprop.0_veneer+0xc>)
10002c4c:	4684      	mov	ip, r0
10002c4e:	bc01      	pop	{r0}
10002c50:	4760      	bx	ip
10002c52:	bf00      	nop
10002c54:	20000139 	.word	0x20000139

10002c58 <__mutex_enter_blocking_veneer>:
10002c58:	b401      	push	{r0}
10002c5a:	4802      	ldr	r0, [pc, #8]	; (10002c64 <__mutex_enter_blocking_veneer+0xc>)
10002c5c:	4684      	mov	ip, r0
10002c5e:	bc01      	pop	{r0}
10002c60:	4760      	bx	ip
10002c62:	bf00      	nop
10002c64:	200001dd 	.word	0x200001dd

Disassembly of section .data:

200000c0 <flash_init_boot2_copyout>:
    if (boot2_copyout_valid)
200000c0:	4808      	ldr	r0, [pc, #32]	; (200000e4 <flash_init_boot2_copyout+0x24>)
static void __no_inline_not_in_flash_func(flash_init_boot2_copyout)() {
200000c2:	b510      	push	{r4, lr}
    if (boot2_copyout_valid)
200000c4:	7803      	ldrb	r3, [r0, #0]
200000c6:	2b00      	cmp	r3, #0
200000c8:	d10a      	bne.n	200000e0 <flash_init_boot2_copyout+0x20>
200000ca:	2380      	movs	r3, #128	; 0x80
200000cc:	4906      	ldr	r1, [pc, #24]	; (200000e8 <flash_init_boot2_copyout+0x28>)
    for (int i = 0; i < BOOT2_SIZE_WORDS; ++i)
200000ce:	4a07      	ldr	r2, [pc, #28]	; (200000ec <flash_init_boot2_copyout+0x2c>)
200000d0:	055b      	lsls	r3, r3, #21
        boot2_copyout[i] = ((uint32_t *)XIP_BASE)[i];
200000d2:	681c      	ldr	r4, [r3, #0]
200000d4:	50cc      	str	r4, [r1, r3]
    for (int i = 0; i < BOOT2_SIZE_WORDS; ++i)
200000d6:	3304      	adds	r3, #4
200000d8:	4293      	cmp	r3, r2
200000da:	d1fa      	bne.n	200000d2 <flash_init_boot2_copyout+0x12>
    boot2_copyout_valid = true;
200000dc:	2301      	movs	r3, #1
200000de:	7003      	strb	r3, [r0, #0]
}
200000e0:	bd10      	pop	{r4, pc}
200000e2:	46c0      	nop			; (mov r8, r8)
200000e4:	2000a454 	.word	0x2000a454
200000e8:	1000a2e4 	.word	0x1000a2e4
200000ec:	10000100 	.word	0x10000100

200000f0 <flash_enable_xip_via_boot2>:
static void __no_inline_not_in_flash_func(flash_enable_xip_via_boot2)() {
200000f0:	b510      	push	{r4, lr}
    ((void (*)(void))boot2_copyout+1)();
200000f2:	4b02      	ldr	r3, [pc, #8]	; (200000fc <flash_enable_xip_via_boot2+0xc>)
200000f4:	3301      	adds	r3, #1
200000f6:	4798      	blx	r3
}
200000f8:	bd10      	pop	{r4, pc}
200000fa:	46c0      	nop			; (mov r8, r8)
200000fc:	2000a2e4 	.word	0x2000a2e4

20000100 <flash_cs_force.constprop.0>:
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
20000100:	4b03      	ldr	r3, [pc, #12]	; (20000110 <flash_cs_force.constprop.0+0x10>)
20000102:	681a      	ldr	r2, [r3, #0]
20000104:	23c0      	movs	r3, #192	; 0xc0
20000106:	009b      	lsls	r3, r3, #2
20000108:	4393      	bics	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
2000010a:	4a02      	ldr	r2, [pc, #8]	; (20000114 <flash_cs_force.constprop.0+0x14>)
2000010c:	6013      	str	r3, [r2, #0]
}
2000010e:	4770      	bx	lr
20000110:	4001800c 	.word	0x4001800c
20000114:	4001900c 	.word	0x4001900c

20000118 <flash_cs_force.constprop.1>:
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
20000118:	4b05      	ldr	r3, [pc, #20]	; (20000130 <flash_cs_force.constprop.1+0x18>)
2000011a:	681a      	ldr	r2, [r3, #0]
2000011c:	2380      	movs	r3, #128	; 0x80
2000011e:	009b      	lsls	r3, r3, #2
20000120:	4053      	eors	r3, r2
20000122:	22c0      	movs	r2, #192	; 0xc0
20000124:	0092      	lsls	r2, r2, #2
20000126:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
20000128:	4a02      	ldr	r2, [pc, #8]	; (20000134 <flash_cs_force.constprop.1+0x1c>)
2000012a:	6013      	str	r3, [r2, #0]
2000012c:	4770      	bx	lr
2000012e:	46c0      	nop			; (mov r8, r8)
20000130:	4001800c 	.word	0x4001800c
20000134:	4001900c 	.word	0x4001900c

20000138 <flash_do_cmd.constprop.0>:
static void __no_inline_not_in_flash_func(flash_do_cmd)(const uint8_t *txbuf, uint8_t *rxbuf, size_t count) {
20000138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000013a:	46ce      	mov	lr, r9
2000013c:	4647      	mov	r7, r8
2000013e:	4681      	mov	r9, r0
20000140:	b580      	push	{r7, lr}
    void (*connect_internal_flash)(void) = (void(*)(void))rom_func_lookup(rom_table_code('I', 'F'));
20000142:	4823      	ldr	r0, [pc, #140]	; (200001d0 <flash_do_cmd.constprop.0+0x98>)
static void __no_inline_not_in_flash_func(flash_do_cmd)(const uint8_t *txbuf, uint8_t *rxbuf, size_t count) {
20000144:	000e      	movs	r6, r1
    void (*connect_internal_flash)(void) = (void(*)(void))rom_func_lookup(rom_table_code('I', 'F'));
20000146:	f000 f8a7 	bl	20000298 <__rom_func_lookup_veneer>
2000014a:	0005      	movs	r5, r0
    void (*flash_exit_xip)(void) = (void(*)(void))rom_func_lookup(rom_table_code('E', 'X'));
2000014c:	4821      	ldr	r0, [pc, #132]	; (200001d4 <flash_do_cmd.constprop.0+0x9c>)
2000014e:	f000 f8a3 	bl	20000298 <__rom_func_lookup_veneer>
20000152:	0004      	movs	r4, r0
    void (*flash_flush_cache)(void) = (void(*)(void))rom_func_lookup(rom_table_code('F', 'C'));
20000154:	4820      	ldr	r0, [pc, #128]	; (200001d8 <flash_do_cmd.constprop.0+0xa0>)
20000156:	f000 f89f 	bl	20000298 <__rom_func_lookup_veneer>
2000015a:	4680      	mov	r8, r0
    flash_init_boot2_copyout();
2000015c:	f7ff ffb0 	bl	200000c0 <flash_init_boot2_copyout>
    connect_internal_flash();
20000160:	47a8      	blx	r5
    flash_exit_xip();
20000162:	47a0      	blx	r4
    flash_cs_force(0);
20000164:	f7ff ffd8 	bl	20000118 <flash_cs_force.constprop.1>
        uint32_t flags = ssi_hw->sr;
20000168:	21c0      	movs	r1, #192	; 0xc0
    size_t rx_remaining = count;
2000016a:	240d      	movs	r4, #13
    size_t tx_remaining = count;
2000016c:	220d      	movs	r2, #13
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
2000016e:	2708      	movs	r7, #8
        bool can_put = !!(flags & SSI_SR_TFNF_BITS);
20000170:	2002      	movs	r0, #2
        uint32_t flags = ssi_hw->sr;
20000172:	0549      	lsls	r1, r1, #21
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
20000174:	003d      	movs	r5, r7
        uint32_t flags = ssi_hw->sr;
20000176:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
20000178:	401d      	ands	r5, r3
        if (can_put && tx_remaining && rx_remaining - tx_remaining < max_in_flight) {
2000017a:	4218      	tst	r0, r3
2000017c:	d00b      	beq.n	20000196 <flash_do_cmd.constprop.0+0x5e>
2000017e:	2a00      	cmp	r2, #0
20000180:	d009      	beq.n	20000196 <flash_do_cmd.constprop.0+0x5e>
20000182:	1aa3      	subs	r3, r4, r2
20000184:	2b0d      	cmp	r3, #13
20000186:	d81e      	bhi.n	200001c6 <flash_do_cmd.constprop.0+0x8e>
            ssi_hw->dr0 = *txbuf++;
20000188:	464b      	mov	r3, r9
2000018a:	781b      	ldrb	r3, [r3, #0]
            --tx_remaining;
2000018c:	3a01      	subs	r2, #1
            ssi_hw->dr0 = *txbuf++;
2000018e:	660b      	str	r3, [r1, #96]	; 0x60
20000190:	2301      	movs	r3, #1
20000192:	469c      	mov	ip, r3
20000194:	44e1      	add	r9, ip
        if (can_get && rx_remaining) {
20000196:	0013      	movs	r3, r2
20000198:	2d00      	cmp	r5, #0
2000019a:	d10b      	bne.n	200001b4 <flash_do_cmd.constprop.0+0x7c>
    while (tx_remaining || rx_remaining) {
2000019c:	4323      	orrs	r3, r4
2000019e:	2b00      	cmp	r3, #0
200001a0:	d1e8      	bne.n	20000174 <flash_do_cmd.constprop.0+0x3c>
    flash_cs_force(1);
200001a2:	f7ff ffad 	bl	20000100 <flash_cs_force.constprop.0>
    flash_flush_cache();
200001a6:	47c0      	blx	r8
    flash_enable_xip_via_boot2();
200001a8:	f7ff ffa2 	bl	200000f0 <flash_enable_xip_via_boot2>
}
200001ac:	bcc0      	pop	{r6, r7}
200001ae:	46b9      	mov	r9, r7
200001b0:	46b0      	mov	r8, r6
200001b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (can_get && rx_remaining) {
200001b4:	2c00      	cmp	r4, #0
200001b6:	d0f2      	beq.n	2000019e <flash_do_cmd.constprop.0+0x66>
            *rxbuf++ = ssi_hw->dr0;
200001b8:	6e0b      	ldr	r3, [r1, #96]	; 0x60
            --rx_remaining;
200001ba:	3c01      	subs	r4, #1
            *rxbuf++ = ssi_hw->dr0;
200001bc:	7033      	strb	r3, [r6, #0]
    while (tx_remaining || rx_remaining) {
200001be:	0023      	movs	r3, r4
            *rxbuf++ = ssi_hw->dr0;
200001c0:	3601      	adds	r6, #1
    while (tx_remaining || rx_remaining) {
200001c2:	4313      	orrs	r3, r2
200001c4:	e7eb      	b.n	2000019e <flash_do_cmd.constprop.0+0x66>
        if (can_get && rx_remaining) {
200001c6:	2d00      	cmp	r5, #0
200001c8:	d0d4      	beq.n	20000174 <flash_do_cmd.constprop.0+0x3c>
200001ca:	2c00      	cmp	r4, #0
200001cc:	d0d2      	beq.n	20000174 <flash_do_cmd.constprop.0+0x3c>
200001ce:	e7f3      	b.n	200001b8 <flash_do_cmd.constprop.0+0x80>
200001d0:	00004649 	.word	0x00004649
200001d4:	00005845 	.word	0x00005845
200001d8:	00004346 	.word	0x00004346

200001dc <mutex_enter_blocking>:

void __time_critical_func(mutex_enter_blocking)(mutex_t *mtx) {
200001dc:	b510      	push	{r4, lr}
    assert(mtx->core.spin_lock);
    bool block = true;
    do {
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
200001de:	6802      	ldr	r2, [r0, #0]
    *lock = 0;
200001e0:	2400      	movs	r4, #0
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
200001e2:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
200001e6:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
200001e8:	6813      	ldr	r3, [r2, #0]
200001ea:	2b00      	cmp	r3, #0
200001ec:	d0fc      	beq.n	200001e8 <mutex_enter_blocking+0xc>
    __asm volatile ("dmb");
200001ee:	f3bf 8f5f 	dmb	sy
        if (mtx->owner < 0) {
200001f2:	7903      	ldrb	r3, [r0, #4]
200001f4:	2b7f      	cmp	r3, #127	; 0x7f
200001f6:	d80b      	bhi.n	20000210 <mutex_enter_blocking+0x34>
            mtx->owner = get_core_num();
            block = false;
        }
        spin_unlock(mtx->core.spin_lock, save);
200001f8:	6803      	ldr	r3, [r0, #0]
200001fa:	f3bf 8f5f 	dmb	sy
    *lock = 0;
200001fe:	601c      	str	r4, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20000200:	f381 8810 	msr	PRIMASK, r1
    __asm volatile ("wfe");
20000204:	bf20      	wfe
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20000206:	6802      	ldr	r2, [r0, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20000208:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
2000020c:	b672      	cpsid	i
inline static void spin_lock_unsafe_blocking(spin_lock_t *lock) {
2000020e:	e7eb      	b.n	200001e8 <mutex_enter_blocking+0xc>
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
20000210:	23d0      	movs	r3, #208	; 0xd0
20000212:	061b      	lsls	r3, r3, #24
            mtx->owner = get_core_num();
20000214:	681b      	ldr	r3, [r3, #0]
20000216:	7103      	strb	r3, [r0, #4]
        spin_unlock(mtx->core.spin_lock, save);
20000218:	6803      	ldr	r3, [r0, #0]
    __asm volatile ("dmb");
2000021a:	f3bf 8f5f 	dmb	sy
    *lock = 0;
2000021e:	2200      	movs	r2, #0
20000220:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20000222:	f381 8810 	msr	PRIMASK, r1
        if (block) {
            __wfe();
        }
    } while (block);
}
20000226:	bd10      	pop	{r4, pc}

20000228 <mutex_try_enter>:

bool __time_critical_func(mutex_try_enter)(mutex_t *mtx, uint32_t *owner_out) {
20000228:	0003      	movs	r3, r0
    bool entered;
    uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
2000022a:	6800      	ldr	r0, [r0, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
2000022c:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
20000230:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20000232:	6802      	ldr	r2, [r0, #0]
20000234:	2a00      	cmp	r2, #0
20000236:	d0fc      	beq.n	20000232 <mutex_try_enter+0xa>
    __asm volatile ("dmb");
20000238:	f3bf 8f5f 	dmb	sy
    if (mtx->owner < 0) {
2000023c:	2204      	movs	r2, #4
2000023e:	569a      	ldrsb	r2, [r3, r2]
20000240:	2a00      	cmp	r2, #0
20000242:	db0b      	blt.n	2000025c <mutex_try_enter+0x34>
        mtx->owner = get_core_num();
        entered = true;
    } else {
        if (owner_out) *owner_out = mtx->owner;
20000244:	2900      	cmp	r1, #0
20000246:	d00f      	beq.n	20000268 <mutex_try_enter+0x40>
        entered = false;
20000248:	2000      	movs	r0, #0
        if (owner_out) *owner_out = mtx->owner;
2000024a:	600a      	str	r2, [r1, #0]
    }
    spin_unlock(mtx->core.spin_lock, save);
2000024c:	681b      	ldr	r3, [r3, #0]
2000024e:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20000252:	2200      	movs	r2, #0
20000254:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20000256:	f38c 8810 	msr	PRIMASK, ip
    return entered;
}
2000025a:	4770      	bx	lr
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
2000025c:	22d0      	movs	r2, #208	; 0xd0
2000025e:	0612      	lsls	r2, r2, #24
        mtx->owner = get_core_num();
20000260:	6812      	ldr	r2, [r2, #0]
        entered = true;
20000262:	2001      	movs	r0, #1
        mtx->owner = get_core_num();
20000264:	711a      	strb	r2, [r3, #4]
        entered = true;
20000266:	e7f1      	b.n	2000024c <mutex_try_enter+0x24>
        entered = false;
20000268:	2000      	movs	r0, #0
2000026a:	e7ef      	b.n	2000024c <mutex_try_enter+0x24>

2000026c <mutex_exit>:
    } while (block);
    return true;
}

void __time_critical_func(mutex_exit)(mutex_t *mtx) {
    uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
2000026c:	6802      	ldr	r2, [r0, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
2000026e:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20000272:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20000274:	6813      	ldr	r3, [r2, #0]
20000276:	2b00      	cmp	r3, #0
20000278:	d0fc      	beq.n	20000274 <mutex_exit+0x8>
    __asm volatile ("dmb");
2000027a:	f3bf 8f5f 	dmb	sy
    assert(mtx->owner >= 0);
    mtx->owner = -1;
2000027e:	23ff      	movs	r3, #255	; 0xff
20000280:	7103      	strb	r3, [r0, #4]
    __asm volatile ("sev");
20000282:	bf40      	sev
    __sev();
    spin_unlock(mtx->core.spin_lock, save);
20000284:	6803      	ldr	r3, [r0, #0]
    __asm volatile ("dmb");
20000286:	f3bf 8f5f 	dmb	sy
    *lock = 0;
2000028a:	2200      	movs	r2, #0
2000028c:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
2000028e:	f381 8810 	msr	PRIMASK, r1
}
20000292:	4770      	bx	lr

20000294 <__aeabi_idiv0>:
20000294:	4770      	bx	lr
20000296:	46c0      	nop			; (mov r8, r8)

20000298 <__rom_func_lookup_veneer>:
20000298:	b401      	push	{r0}
2000029a:	4802      	ldr	r0, [pc, #8]	; (200002a4 <__rom_func_lookup_veneer+0xc>)
2000029c:	4684      	mov	ip, r0
2000029e:	bc01      	pop	{r0}
200002a0:	4760      	bx	ip
200002a2:	bf00      	nop
200002a4:	10000821 	.word	0x10000821
	...

200002b0 <aeabi_bits_funcs>:
200002b0:	00003350 	.word	0x00003350
200002b4:	0000334c 	.word	0x0000334c
200002b8:	00003354 	.word	0x00003354
200002bc:	00003352 	.word	0x00003352

200002c0 <aeabi_bits_funcs_end>:
200002c0:	00000000 	.word	0x00000000
200002c4:	00010000 	.word	0x00010000
	...
200002d0:	00020000 	.word	0x00020000
	...
200002dc:	00030000 	.word	0x00030000
	...
200002e8:	00ff0000 	.word	0x00ff0000
200002ec:	00000000 	.word	0x00000000

200002f0 <irq_handler_chain_first_slot>:
200002f0:	b500      	push	{lr}
200002f2:	6848      	ldr	r0, [r1, #4]
200002f4:	3101      	adds	r1, #1
200002f6:	468e      	mov	lr, r1
200002f8:	4700      	bx	r0

200002fa <irq_handler_chain_remove_tail>:
200002fa:	4670      	mov	r0, lr
200002fc:	3809      	subs	r0, #9
200002fe:	4901      	ldr	r1, [pc, #4]	; (20000304 <irq_handler_chain_remove_tail+0xa>)
20000300:	4788      	blx	r1
20000302:	bd00      	pop	{pc}
20000304:	10001055 	.word	0x10001055

20000308 <aeabi_mem_funcs>:
20000308:	0000534d 	.word	0x0000534d
2000030c:	0000434d 	.word	0x0000434d
20000310:	00003453 	.word	0x00003453
20000314:	00003443 	.word	0x00003443

20000318 <striped_spin_lock_num>:
20000318:	00000010                                ....

2000031c <WAV_DATA>:
2000031c:	90969797 92a2a498 899d9b8d b6967671     ............qv..
2000032c:	95a4b8c1 9f9f9994 80858e98 8a8d8781     ................
2000033c:	64677280 a38a776a e6e1d3bd a2bbd0e0     .rgdjw..........
2000034c:	505d7188 6a594e4a b6a6937e b8c1c3c0     .q]PJNYj~.......
2000035c:	728598aa 53525762 8272645a b4aca092     ...rbWRSZdr.....
2000036c:	a9b2b7b8 7f89949f 6d6d7076 857c746f     ........vpmmot|.
2000037c:	a49e978e 9ea4a7a7 737e8a95 5a5b6068     ..........~sh`[Z
2000038c:	746a625c 9d958b7f a3a6a6a3 8a91989e     \bjt............
2000039c:	77797d83 827c7977 9d979088 a5a6a6a2     .}ywwy|.........
200003ac:	859099a0 5e656f7a 635d5a5a 8c81766c     ....zoe^ZZ]clv..
200003bc:	a5a29d95 989ea2a5 7e848a91 7a78797a     ...........~zyxz
200003cc:	9089837e a4a19c96 969da2a4 6e78838d     ~.............xn
200003dc:	5b5b5e65 776d655e 9d968c82 a2a4a5a2     e^[[^emw........
200003ec:	8a90979d 7a7b7f84 85807c7a 9c97918a     ......{zz|......
200003fc:	a0a2a2a0 818b949b 5e646d77 655f5b5b     ........wmd^[[_e
2000040c:	8d83786e a4a29d96 969ca1a4 80848a90     nx..............
2000041c:	7d7b7b7c 918b8681 a19f9c97 93999ea1     |{{}............
2000042c:	6c76808a 5c5c5e64 796f6660 9c968d83     ..vld^\\`foy....
2000043c:	a0a3a3a1 8a90969b 7c7d8084 87827f7d     ..........}|}...
2000044c:	9b97928c 9d9fa09e 7f899198 5f646c75     ............uld_
2000045c:	67615d5c 8d837970 a2a09c95 959b9fa2     \]agpy..........
2000046c:	81858a90 807e7e7e 928d8884 9f9e9b97     ....~~~.........
2000047c:	90969b9e 6c757e87 5e5d5f64 7a706862     .....~uld_]^bhpz
2000048c:	9b958d83 9ea1a19f 8a8f959a 7f808285     ................
2000049c:	89858280 9a97928e 9a9d9e9d 7e878f95     ...............~
200004ac:	60656c74 69625f5e 8c837a71 a09e9a94     tle`^_biqz......
200004bc:	94999da0 83868a8f 83818081 928e8a86     ................
200004cc:	9d9c9a96 8e94999c 6c747d86 605f6065     .........}tle`_`
200004dc:	7a716963 99948c83 9c9f9f9d 8b8f9499     ciqz............
200004ec:	81828487 8b878482 9996938f 989b9c9b     ................
200004fc:	7d868d93 61666d75 6a64605f 8c837a72     ...}umfa_`djrz..
2000050c:	9e9c9993 94989b9e 85878b8f 85848383     ................
2000051c:	938f8c88 9b9b9996 8d93979a 6d757d85     .............}um
2000052c:	61606266 7a726a65 98928b83 9b9d9d9b     fb`aejrz........
2000053c:	8b8f9397 84848588 8c898785 99969390     ................
2000054c:	97999a9a 7d858c92 63676e75 6b656261     .......}ungcabek
2000055c:	8b837a72 9c9a9792 93979a9c 86898c8f     rz..............
2000056c:	88868585 93908d8a 9a9a9896 8c929699     ................
2000057c:	6e767d85 63626468 7a726b66 96918a83     .}vnhdbcfkrz....
2000058c:	999b9b99 8c909397 86868789 8e8b8987     ................
2000059c:	98969391 96989999 7e858c91 64696f76     ...........~void
200005ac:	6c666363 8a827a72 9a999590 9396999a     ccflrz..........
200005bc:	888a8d90 8a888787 93918e8c 99999896     ................
200005cc:	8c919598 70777e86 6463656a 7a726c67     .....~wpjecdglrz
200005dc:	948f8982 989a9998 8d909396 8888898b     ................
200005ec:	8f8c8a89 97969491 95979898 7f868c91     ................
200005fc:	666a7077 6c676564 89817a73 9997938f     wpjfdeglsz......
2000060c:	93969899 8a8b8e90 8b8a8989 94918f8d     ................
2000061c:	98989796 8c919597 71787f86 6565676b     ..........xqkgee
2000062c:	7a736c68 938e8881 97989896 8e919395     hlsz............
2000063c:	8a8a8b8c 908e8c8b 97959492 95979898     ................
2000064c:	80868c91 686c7279 6d686666 87817973     ....yrlhffhmsy..
2000065c:	9795928d 93959798 8b8d8f91 8d8c8b8b     ................
2000066c:	9492908e 97979795 8d919497 73798087     ..............ys
2000067c:	6766696d 79736d69 918d8780 96979694     mifgimsy........
2000068c:	8f919395 8c8c8c8d 918f8e8d 97959492     ................
2000069c:	94969797 81878d91 6a6e747a 6d696767     ........ztnjggim
200006ac:	86807973 9694908c 93959696 8d8e9091     sy..............
200006bc:	8e8d8d8d 94939190 97979695 8d919496     ................
200006cc:	757b8288 68686a6f 79736d6a 908b867f     ..{uojhhjmsy....
200006dc:	96969593 90919394 8d8d8e8f 91908f8e     ................
200006ec:	96959493 94969797 82888d92 6b70757c     ............|upk
200006fc:	6d6a6869 857f7972 94928f8a 93949595     ihjmry..........
2000070c:	8e8f9092 908f8e8e 94939291 97979695     ................
2000071c:	8e929596 767d8389 69696c71 78726e6a     ......}vqliijnrx
2000072c:	8e8a847e 95959391 91929394 8f8f8f90     ~...............
2000073c:	9291908f 96959493 95969797 848a8e92     ................
2000074c:	6d72777e 6e6b696a 847e7872 93908d89     ~wrmjiknrx~.....
2000075c:	93949494 90909192 9190908f 94939392     ................
2000076c:	97979695 8f929596 787f858a 6a6b6e73     ...........xsnkj
2000077c:	77726e6b 8c88837d 94939290 92929394     knrw}...........
2000078c:	90909091 93929191 96959594 95969796     ................
2000079c:	858b8f93 6f747980 6e6b6b6c 827d7772     .....ytolkknrw}.
200007ac:	918f8c88 93939393 91919292 92919191     ................
200007bc:	95949393 96969695 90939596 7a80868b     ...............z
200007cc:	6b6d7075 77726e6c 8b87827c 9392918e     upmklnrw|.......
200007dc:	92939393 91919192 94939292 96959594     ................
200007ec:	95969696 878c9093 71767b81 6e6c6c6d     .........{vqmlln
200007fc:	817c7772 908e8a86 93939392 92929293     rw|.............
2000080c:	93929292 95949493 96969696 90939596     ................
2000081c:	7c82878c 6c6e7276 77726f6d 8a86817c     ...|vrnlmorw|...
2000082c:	92918f8d 93939393 93929293 94949393     ................
2000083c:	96969595 95969696 898c9093 72777d83     .............}wr
2000084c:	6c6b6d6f 837e7871 8f8c8a87 93939291     omklqx~.........
2000085c:	92919192 92929292 93929191 9a989694     ................
2000086c:	96999b9b 7c838a91 686a6f75 75706b69     .......|uojhikpu
2000087c:	8c87827c 9392918f 8f909192 908f8f8f     |...............
2000088c:	95949291 99989897 96989999 878c9094     ................
2000089c:	72767c81 6f6d6d6e 827d7873 8e8c8a86     .|vrnmmosx}.....
200008ac:	9090908f 90909090 94939291 97979695     ................
200008bc:	98989898 91949697 7d83888d 6f707478     ...........}xtpo
200008cc:	7874716f 8986827d 908f8e8c 90909090     oqtx}...........
200008dc:	92919191 96959493 98989897 96979898     ................
200008ec:	898d9194 74797e84 716f6f71 817d7874     .....~ytqooqtx}.
200008fc:	8d8c8986 9090908f 91919190 95949392     ................
2000090c:	98979796 98999998 91949698 7f84898e     ................
2000091c:	7072757a 78747170 8985817d 8f8f8d8b     zurppqtx}.......
2000092c:	91919090 93929291 97969594 99999897     ................
2000093c:	97989899 8a8e9295 767a7f84 72707172     ..........zvrqpr
2000094c:	817d7975 8d8b8885 90908f8e 92929191     uy}.............
2000095c:	95949393 98989796 99999999 92959798     ................
2000096c:	80858a8e 7173767b 79757271 8885817d     ....{vsqqruy}...
2000097c:	8f8e8d8b 92919190 94939392 97969594     ................
2000098c:	99999898 97989999 8a8e9295 777b8085     ..............{w
2000099c:	73717273 817d7975 8d8b8885 91908f8e     srqsuy}.........
200009ac:	93929291 96959493 98989796 99999999     ................
200009bc:	92959798 80858a8e 7274777b 79767372     ........{wtrrsvy
200009cc:	8885817d 8f8e8c8a 92929190 94949393     }...............
200009dc:	97969695 99999898 97989999 8a8e9295     ................
200009ec:	777b8085 74727374 817e7a76 8d8b8884     ..{wtsrtvz~.....
200009fc:	93918f8e 92929293 96959493 98979796     ................
20000a0c:	9a9a9a99 93959799 82878c90 7174787d     ............}xtq
20000a1c:	76737070 8985807b 93928f8c 94959594     ppsv{...........
20000a2c:	93939394 96959493 9b9a9998 999b9c9c     ................
20000a3c:	8a8f9397 767a7f84 74727273 837f7b77     ......zvsrrtw{..
20000a4c:	8e8c8a87 92929190 93939393 96959494     ................
20000a5c:	9a999897 9b9b9b9b 9296989a 7f84898e     ................
20000a6c:	7374767a 7c787573 89878380 908f8d8c     zvtssux|........
20000a7c:	93939291 94949494 98979695 9b9b9a99     ................
20000a8c:	989a9b9b 888d9295 767a7e83 76747374     .........~zvtstv
20000a9c:	84807c79 8e8c8987 9392918f 94949493     y|..............
20000aac:	96959594 9a999897 9a9b9b9a 91959799     ................
20000abc:	7e83888d 73747679 7d797674 8a878480     ...~yvtstvy}....
20000acc:	91908e8c 95949392 95959595 98979695     ................
20000adc:	9a9a9999 97999a9a 878c9094 76797d82     .............}yv
20000aec:	77757474 84817e7a 8e8c8a87 94939290     ttuwz~..........
20000afc:	95959595 96969595 99989897 999a9a9a     ................
20000b0c:	90939698 7d81868b 74747679 7e7b7876     .......}yvttvx{~
20000b1c:	8a888582 92918f8c 96969594 96969696     ................
20000b2c:	98979696 9a999998 9698999a 868b8f93     ................
20000b3c:	76797c81 79767575 85827f7c 8f8d8a88     .|yvuuvy|.......
20000b4c:	96949391 96979796 96969696 99989797     ................
20000b5c:	99999999 8e929597 7c80858a 76757679     ...........|yvuv
20000b6c:	807c7977 8b888683 93918f8d 97979695     wy|.............
20000b7c:	96979797 97979796 99999898 95979899     ................
20000b8c:	85898e92 77797c80 7a787676 8683807d     .....|ywvvxz}...
20000b9c:	908d8b88 97969492 97989897 97979697     ................
20000bac:	99989797 96979999 8d919495 7c808489     ...............|
20000bbc:	78777879 817e7b79 8d8a8885 9392908f     yxwxy{~.........
20000bcc:	95959594 98979696 9a999998 999a9a9a     ................
20000bdc:	92959798 83878b8f 797a7c7f 7e7b7a79     .........|zyyz{~
20000bec:	86858280 8f8c8a88 97959391 99999998     ................
20000bfc:	98999999 98989898 96979797 8c8f9294     ................
20000c0c:	7d808488 7a797a7b 82807d7b 8b888684     ...}{zyz{}......
20000c1c:	94928f8d 99999896 99999999 97989898     ................
20000c2c:	96979797 92949596 84888c8f 7a7b7d80     .............}{z
20000c3c:	7e7c7a7a 86848280 908d8b88 98969492     zz|~............
20000c4c:	9a9a9999 98999999 97979798 95969696     ................
20000c5c:	8b8f9193 7e818488 7b7a7a7b 82807e7c     .......~{zz{|~..
20000c6c:	8b888684 9492908d 9a999897 999a9a9a     ................
20000c7c:	97989899 96969697 91939495 84888b8e     ................
20000c8c:	7b7c7e81 7f7d7b7b 86858381 908d8b88     .~|{{{}.........
20000c9c:	98979592 9a9a9a99 99999a9a 96979798     ................
20000cac:	94959596 8b8e9193 7e818488 7c7b7b7c     ...........~|{{|
20000cbc:	83817f7d 8b888685 9592908d 9a999897     }...............
20000ccc:	9a9a9a9a 97989999 95969697 91939495     ................
20000cdc:	85888b8e 7c7d7f81 7f7d7c7c 86858381     ......}|||}.....
20000cec:	908d8a88 98979592 9b9b9a9a 999a9a9b     ................
20000cfc:	96979898 94959596 8c8e9193 7f828588     ................
20000d0c:	7d7c7c7d 83817f7e 8a888684 94928f8d     }||}~...........
20000d1c:	9a9a9897 9b9b9b9b 9899999a 95969697     ................
20000d2c:	91939494 86898c8f 7d7e8082 7f7e7d7c     ..........~}|}~.
20000d3c:	86848381 8f8c8a88 98969492 9b9b9a9a     ................
20000d4c:	9a9a9b9b 96979899 94959596 8d8f9192     ................
20000d5c:	81838689 7c7c7d7f 83817f7d 8a878684     .....}||}.......
20000d6c:	94928f8c 9b9a9896 9e9e9c9b 96979a9d     ................
20000d7c:	93949495 92929292 8a8d8f91 80818387     ................
20000d8c:	80807f7f 82828181 8b888583 9b97948f     ................
20000d9c:	a0a09f9d 9a9c9e9f 93959698 93939393     ................
20000dac:	91939494 85898c8f 7d7e8082 7f7e7d7c     ..........~}|}~.
20000dbc:	89868481 96938f8c 9c9c9a98 9b9c9c9d     ................
20000dcc:	9798999a 95959596 95959595 8c8f9294     ................
20000ddc:	7f828688 70787b78 7d7b827c 9e969088     ....x{xp|.{}....
20000dec:	9099a4a6 b6a79890 b7c2c6c2 91959daa     ................
20000dfc:	898c8d8e 69747d85 4b4e555e 55504d4b     .....}ti^UNKKMPU
20000e0c:	63615e5a 68666664 7d77716b 9d968d84     Z^acdffhkqw}....
20000e1c:	b4ada8a2 c2c0beb9 c6c4c3c3 cecccac8     ................
20000e2c:	d4d3d2d0 cbced1d3 b8bdc2c6 aaadb0b4     ................
20000e3c:	a3a4a6a8 9fa1a2a3 9095999d 777d848a     ..............}w
20000e4c:	60656a71 5556595c 54545455 4e505153     qje`\YVUUTTTSQPN
20000e5c:	4c4c4c4d 5552504e 69635e59 857d766f     MLLLNPRUY^ciov}.
20000e6c:	a49d958d bab5b0aa c6c4c1be cecccac8     ................
20000e7c:	d8d5d3d0 d8d9dad9 c8cdd1d5 b6babfc3     ................
20000e8c:	a8abaeb2 9da0a2a5 97999a9b 8d909395     ................
20000e9c:	787e8388 63686d73 56585b5e 55555555     ..~xsmhc^[XVUUUU
20000eac:	52535455 4f4f5051 5452504f 66605c58     UTSRQPOOOPRTX\`f
20000ebc:	8079726b a0989088 b8b3aea7 c5c2bfbc     kry.............
20000ecc:	cdcbc9c7 d6d4d2cf d9dad9d8 cacfd3d6     ................
20000edc:	b5babfc5 a5a8acb0 9a9d9fa2 94959798     ................
20000eec:	8c8f9193 797e8388 65696e74 595b5d61     ......~ytniea][Y
20000efc:	58585758 57585858 53535456 55535252     XWXXXXXWVTSSRRSU
20000f0c:	645f5b57 7c76706a 9c948c84 b5b0aba4     W[_djpv|........
20000f1c:	c4c1beba cdcac9c7 d5d3d2d0 dbdbdad7     ................
20000f2c:	cbd0d4d8 b6bbc1c6 a4a8acb1 989c9fa1     ................
20000f3c:	8f909395 8c8d8d8e 7d828689 676d7278     ...........}xrmg
20000f4c:	585b5e62 59575757 5c5c5b5a 585a5b5c     b^[XWWWYZ[\\\[ZX
20000f5c:	55555556 615c5956 7b736d67 9a928a82     VUUUVY\agms{....
20000f6c:	b4afa9a2 c2bfbcb9 cbc9c6c4 d4d2d0cd     ................
20000f7c:	dadad8d7 cfd3d7d9 b7bdc3c9 a2a6abb0     ................
20000f8c:	97999b9e 90919395 8a8c8d8f 7b808487     ...............{
20000f9c:	686c7176 5d5f6264 5c5c5c5c 5e5e5e5d     vqlhdb_]\\\\]^^^
20000fac:	5a5c5d5e 57575759 625e5a58 79736d67     ^]\ZYWWWXZ^bgmsy
20000fbc:	978f8780 b2aca59e c1bdbab7 cac7c5c3     ................
20000fcc:	d5d4d1cd d9d8d7d7 cfd4d7d8 b7bec4ca     ................
20000fdc:	a1a6acb1 9496999d 90919293 8b8d8f90     ................
20000fec:	7a808488 676b7075 5f606264 605f5f5f     ...zupkgdb`____`
20000ffc:	61616160 5b5d5f60 57575859 635e5b59     `aaa`_][YXWWY[^c
2000100c:	7a736d68 948d8780 aea9a29b bebbb7b3     hmsz............
2000101c:	cac7c4c1 d4d2d0cd d8d8d7d6 ced2d5d7     ................
2000102c:	b8bec4ca a2a7acb2 96999b9f 8e909294     ................
2000103c:	87898b8c 7b7f8385 6b6f7377 63646668     .......{wsokhfdc
2000104c:	60606162 61616160 5e5f6061 5b5b5c5d     ba```aaaa`_^]\[[
2000105c:	63605d5b 78736d68 928c857f ada7a099     []`chmsx........
2000106c:	bdbab7b2 c9c6c3c0 d3d1cfcc d6d6d6d5     ................
2000107c:	ced2d4d6 b9bfc5ca a3a8adb3 96999c9f     ................
2000108c:	8e909294 87898a8c 7c808386 6d707478     ...........|xtpm
2000109c:	6466686a 62626263 62626262 60616262     jhfdcbbbbbbbbba`
200010ac:	5d5d5e5f 64615f5d 78736d69 918b847e     _^]]]_adimsx~...
200010bc:	aca69f98 bcb9b6b2 c8c5c2bf d2d0cecb     ................
200010cc:	d5d5d4d3 cdd1d3d5 b9bfc5ca a4a9aeb3     ................
200010dc:	95989ca0 8e909192 8a8b8b8c 7c808488     ...............|
200010ec:	6d717578 6667686a 66676767 65656565     xuqmjhgfgggfeeee
200010fc:	62636565 5b5c5e60 625e5c5a 7a736d67     eecb`^\[Z\^bgmsz
2000110c:	948d8781 aaa5a09a b9b6b3af c7c3c0bc     ................
2000111c:	d3d1cecb d6d6d6d5 cbcfd2d4 b6bcc1c7     ................
2000112c:	a3a7acb1 989b9da0 8f929496 888a8c8d     ................
2000113c:	7e818486 7174777a 6a6b6c6e 66676869     ...~zwtqnlkjihgf
2000114c:	64656566 61626364 5e5e5f60 6763615f     feeddcba`_^^_acg
2000115c:	79746f6b 908a847e a9a39d96 bab6b2ae     koty~...........
2000116c:	c7c4c1be d1cfcdcb d3d3d3d3 c9ccd0d2     ................
2000117c:	b7bcc1c5 a4a7acb2 989a9da0 8f919395     ................
2000118c:	898a8c8d 7f828487 7476797c 6d6e7072     ........|yvtrpnm
2000119c:	6667696b 63636465 60616262 605f5f60     kigfedccbba``__`
200011ac:	67646261 78736f6b 8f88827d a9a39c95     abdgkosx}.......
200011bc:	bbb7b3ae c6c4c1be cecccbc9 cfd0cfcf     ................
200011cc:	c8cbcdcf b5babfc4 a4a8acb1 989a9da0     ................
200011dc:	90919395 8c8d8e8f 8386898b 76797c80     .............|yv
200011ec:	6b6e7073 66676869 64656565 61626364     spnkihgfeeeddcba
200011fc:	5f5f5f60 67646260 78736f6b 918a847e     `___`bdgkosx~...
2000120c:	aaa49e97 bab7b3af c5c3c0bd cbcac9c7     ................
2000121c:	cdcdcdcc c5c8cbcc b4b8bdc1 a4a7abaf     ................
2000122c:	999b9ea1 93949597 8f909192 86898c8e     ................
2000123c:	787c7f83 6c6e7175 6667686a 63646565     ..|xuqnljhgfeedc
2000124c:	5f606162 5f5f5f5f 68656361 7a75706c     ba`_____acehlpuz
2000125c:	938c8680 aba5a099 bab7b3af c3c1bfbd     ................
2000126c:	c8c7c6c4 cacacac9 c2c5c7c9 b2b6babe     ................
2000127c:	a4a7abae 9b9d9fa2 96979899 94959595     ................
2000128c:	888b8e91 797d8185 6a6e7276 67686868     ......}yvrnjhhhg
2000129c:	61626365 5d5d5e60 61605f5d 6a676563     ecba`^]]]_`acegj
200012ac:	7b75716d 978f8881 b0aba69f b8b7b5b3     mqu{............
200012bc:	bab9b8b8 c4c1bebc cacac8c6 c0c4c7c9     ................
200012cc:	aeb2b7bb a3a5a7aa a0a0a1a2 9f9fa0a0     ................
200012dc:	979a9c9d 898d9094 787c8185 6b6e7074     ..........|xtpnk
200012ec:	65676869 5f616264 5b5c5d5e 605e5c5c     ihgedba_^]\[\\^`
200012fc:	6e696662 837d7872 99948f89 aaa7a29e     bfinrx}.........
2000130c:	b6b4b1ae bcbbb9b8 c2c1bfbe c2c3c3c3     ................
2000131c:	b9bcbec0 b0b2b3b6 a7a9acae a3a3a4a6     ................
2000132c:	a4a5a4a3 999da0a3 8a8e9296 777d8186     ..............}w
2000133c:	6b6f6f71 5f605f63 5e545258 5f656966     qookc_`_XRT^fie_
2000134c:	625f5c5c 68666564 827b736c 8f8c8a87     \\_bdefhls{.....
2000135c:	afa59b94 d2cdc5ba c5cbd0d3 adb1b7be     ................
2000136c:	b1adabab c4c0bbb6 bec3c5c6 9fa7b0b7     ................
2000137c:	8f909398 9a969390 a2a2a09d 90989da1     ................
2000138c:	6e767f88 595c6167 59585858 615f5d5b     ..vnga\YXXXY[]_a
2000139c:	61626262 5b5c5e60 615d5b5a 81776f67     bbba`^\[Z[]agow.
200013ac:	a49c938a b6b4b0aa b6b7b8b8 b4b3b4b4     ................
200013bc:	bcbab7b5 c5c3c1bf c2c5c6c6 b0b6bbbf     ................
200013cc:	9b9fa4aa 99989798 a3a19e9b a2a4a5a4     ................
200013dc:	8d949a9f 6f767e85 6164676a 5f5e5d5e     .....~vojgda^]^_
200013ec:	63626260 62636363 5d5e6061 67615e5d     `bbccccba`^]]^ag
200013fc:	857d756d a39d958e b5b2aea9 b7b7b7b7     mu}.............
2000140c:	b6b6b6b6 bbbab8b7 c2c0bfbd c1c2c3c3     ................
2000141c:	b2b7bbbf 9ea2a8ad 9b9a9a9b a3a19f9d     ................
2000142c:	a3a5a6a5 8f969ca0 72798087 6265686c     ..........yrlheb
2000143c:	5f5f5f61 63626261 63646564 61626263     a___abbcdedccbba
2000144c:	65626161 867d746c a69f978f b6b5b2ad     aabelt}.........
2000145c:	b2b4b5b6 b3b2b2b2 bbb9b7b5 c3c1c0be     ................
2000146c:	bfc2c3c3 afb4b9bc 9da1a5aa 9c9b9a9b     ................
2000147c:	a4a3a19e a2a4a5a5 8d939a9f 72787e85     .............~xr
2000148c:	6466696d 61616162 63636262 63646464     mifdbaaabbccdddc
2000149c:	61616263 69656261 867e766f a49e968e     cbaaabeiov~.....
200014ac:	b4b2afaa b3b4b5b5 b4b3b3b3 bab8b7b5     ................
200014bc:	c0bfbebc bebfc0c0 b0b4b8bb 9fa2a7ab     ................
200014cc:	9c9b9c9d a3a1a09e a0a2a4a4 8d94999e     ................
200014dc:	72787f86 65676a6e 63636364 64646463     ..xrnjgedccccddd
200014ec:	66666665 66666565 6d696665 89827a73     efffeeffefimsz..
200014fc:	a59f9891 b3b1aeaa b4b4b4b4 b5b5b4b4     ................
2000150c:	b7b7b6b6 bab9b8b8 b9bababa aeb2b6b8     ................
2000151c:	9ca0a5aa 98979799 9f9d9b99 a1a2a2a1     ................
2000152c:	8f959a9e 777c8289 696b6e72 66666767     ......|wrnkiggff
2000153c:	69686867 6a6a6a6a 6868696a 6e6a6867     ghhijjjjjihhghjn
2000154c:	88807973 a59f9790 b5b3b0ab b5b5b6b6     sy..............
2000155c:	b4b3b3b4 b8b7b5b4 bbbbbab9 b8babbbb     ................
2000156c:	abafb3b6 9a9da2a6 96959697 9e9c9a98     ................
2000157c:	a0a1a1a0 8f95999d 787d8389 6b6d7073     ..........}xspmk
2000158c:	6969696a 6b6a6969 6b6a6b6b 696a6b6b     jiiiiijkkkjkkkji
2000159c:	6e6b6969 87807973 a59e968f b5b3afab     iiknsy..........
200015ac:	b6b6b6b6 b7b6b6b5 babab9b8 bababbbb     ................
200015bc:	b6b7b9ba aaaeb1b4 999da1a6 93939496     ................
200015cc:	99979594 9c9c9c9b 8f94989a 7a7f858a     ...............z
200015dc:	6d6f7276 6a6a6b6c 6c6b6a6a 6e6e6d6d     vromlkjjjjklmmnn
200015ec:	6b6c6d6d 6e6b6b6a 847d7772 a39c948c     mmlkjkknrw}.....
200015fc:	b5b2afaa babab9b7 b8b8b8b9 bab9b9b9     ................
2000160c:	b8b8b9ba b9babab9 aaaeb2b6 979ca1a6     ................
2000161c:	8d8d8f93 93918f8d 97979694 91949697     ................
2000162c:	7f85898e 6e71757a 68696a6b 6e6c6a69     ....zuqnkjihijln
2000163c:	73737270 6e707273 6b6b6b6c 7f78726e     prsssrpnlkkknrx.
2000164c:	a0989087 b7b3aea8 bcbcbbba b9b9babb     ................
2000165c:	b9b9b8b8 bcbbbbba b9bbbcbc aaafb4b7     ................
2000166c:	94999fa5 88898b8f 8f8c8988 96969491     ................
2000167c:	8f929596 7e83888c 7173767a 6f6f6f6f     .......~zvsqoooo
2000168c:	7271706f 75757473 71737475 6d6c6d6e     opqrstuuutsqnmlm
2000169c:	7f78736f 9e968d85 b5b0aba5 bfbebcb9     osx.............
200016ac:	bebebfc0 bbbabcbd bebebdbc bbbcbdbe     ................
200016bc:	aab0b5b8 90969ca3 8284878b 87848281     ................
200016cc:	92908d8a 8d909293 7e818589 7274777a     ...........~zwtr
200016dc:	73727171 79777674 7a7b7a7a 73757779     qqrstvwyzz{zywus
200016ec:	706f7071 7f7a7572 9c948d86 b3aea9a3     qpopruz.........
200016fc:	bcbbb9b6 bfbfbebd bfbfbfbf bfbfbfbf     ................
2000170c:	b9bcbdbe a9aeb3b6 92989ea4 8285888c     ................
2000171c:	83828181 8a898785 88898a8a 80828486     ................
2000172c:	797a7c7e 77777778 7a797877 7c7c7b7b     ~|zyxwwwwxyz{{||
2000173c:	77797a7b 73737476 7f7a7775 98928b85     {zywvtssuwz.....
2000174c:	afa9a49e bbb9b6b3 c0bfbebc c1c1c1c1     ................
2000175c:	bfbfc0c0 babcbdbe abb0b4b8 93999fa6     ................
2000176c:	8284888d 81808080 86858483 86878787     ................
2000177c:	7f808284 7a7b7c7d 7a79797a 7c7b7a7a     ....}|{zzyyzzz{|
2000178c:	7d7e7d7d 7a7b7c7d 76767778 807c7877     }}~}}|{zxwvvwx|.
2000179c:	958f8a85 aaa6a09b b8b5b2af c0bebcba     ................
200017ac:	c1c2c2c1 c0c1c1c1 b9bcbebf abb0b3b6     ................
200017bc:	959aa0a5 83868a8f 83828182 83828283     ................
200017cc:	84858584 7f7f8182 7d7e7e7e 7b7c7c7d     ........~~~}}||{
200017dc:	7c7c7c7b 7e7d7d7d 7c7c7d7d 79797a7b     {|||}}}~}}||{zyy
200017ec:	817d7b7a 948f8a85 a8a39e99 b6b3b0ac     z{}.............
200017fc:	bebdbbb8 c2c2c1c0 c0c1c2c2 b8bbbdbf     ................
2000180c:	abafb3b6 979ca2a6 878a8e92 82828384     ................
2000181c:	83828282 82838383 80818182 7e7f7f7f     ...............~
2000182c:	7d7e7e7e 7d7d7e7d 7e7e7e7e 7d7e7f7f     ~~~}}~}}~~~~..~}
2000183c:	7a7a7b7c 817d7b7a 928e8985 a4a09c98     |{zzz{}.........
2000184c:	b4b0aca8 bfbdbab7 c0c0c0c0 c0c1c1c1     ................
2000185c:	babdbec0 aeb2b4b7 999da2a8 8a8d9195     ................
2000186c:	83858687 82828283 83838382 82838383     ................
2000187c:	7c7d7e80 7978797a 7e7d7c7a 8180807f     .~}|zyxyz|}~....
2000188c:	7a7c7f80 75757678 7d7a7776 918d8682     ..|zxvuuvwz}....
2000189c:	a9a3989a b3c0a4a2 d3b3a99b a3a3a9c8     ................
200018ac:	e3c7aba1 99b6cfe4 806e6c7e bdb6a796     ........~ln.....
200018bc:	6d88a2b6 4b454958 8c7f6d5a 808b9192     ...mXIEKZm......
200018cc:	68696d76 75726e6a 77777777 7b797877     vmihjnruwwwwwxy{
200018dc:	7d7e7d7c 77797b7c 70717375 79747170     |}~}|{ywusqppqty
200018ec:	908a847e a19c9895 b1ada9a5 bbbab8b5     ~...............
200018fc:	c2bfbdbc cccac8c5 c8cacbcc bbbec2c5     ................
2000190c:	a9aeb2b7 979b9fa4 97959495 95979898     ................
2000191c:	8f909294 8b8d8e8f 82838689 83828181     ................
2000192c:	83848584 7b7d7f81 77787879 73747677     ......}{yxxwwvts
2000193c:	7a767473 8f8a857f 9e9b9793 b1aca7a2     stvz............
2000194c:	bebcb9b5 c4c2c1bf cbcac8c6 c8cacbcc     ................
2000195c:	bcbfc2c5 aeb2b6b9 9a9ea3a8 99989798     ................
2000196c:	97989899 91929496 90919291 878a8c8e     ................
2000197c:	83838385 7f808182 7b7c7d7e 77787879     ........~}|{yxxw
2000198c:	71727476 79747170 908b857f 9c999693     vtrqpqty........
2000199c:	aba6a29f bcb9b5b0 c5c3c1bf cac9c9c7     ................
200019ac:	c4c6c8ca babdbfc2 afb2b5b7 9fa3a7ab     ................
200019bc:	9c9b9c9d 999a9b9c 97979898 95979797     ................
200019cc:	898d9093 82838486 80818282 7a7b7d7f     .............}{z
200019dc:	76777778 71737475 77747271 8b87817c     xwwvutsqqrtw|...
200019ec:	9c989490 ada8a4a0 bbb9b5b1 c0bfbdbc     ................
200019fc:	c7c5c3c2 c3c4c6c7 bbbdbfc1 b0b4b7b9     ................
20001a0c:	a0a3a7ab 9f9f9e9e 9d9e9f9f 9c9c9d9d     ................
20001a1c:	9697999a 8b8f9294 83848588 7f808282     ................
20001a2c:	75777a7c 73737374 71717172 79767371     |zwutsssrqqqqsvy
20001a3c:	8f89847e 9f9c9893 afaba7a3 b9b8b6b3     ~...............
20001a4c:	bcbbbaba c3c1bfbd c1c3c4c3 b8babdbf     ................
20001a5c:	adb0b3b5 a1a3a6a9 a3a1a1a0 a5a5a5a4     ................
20001a6c:	9fa0a2a3 999b9c9e 8c8f9397 83848689     ................
20001a7c:	7d7f8182 7476797b 70707172 71707070     ...}{yvtrqpppppq
20001a8c:	7b777472 918c8680 a09d9996 adaaa6a3     rtw{............
20001a9c:	b6b5b3b0 b9b8b7b7 bebcbbba bdbfbfbf     ................
20001aac:	b3b5b8bb abadafb1 a3a4a6a9 a6a5a4a3     ................
20001abc:	a8a9a9a7 a2a3a5a7 9a9d9fa0 8b8f9397     ................
20001acc:	81838588 7c7d7f80 7376787a 6e6f7071     ......}|zxvsqpon
20001adc:	716f6f6e 807a7673 97928c86 a4a19f9b     nooqsvz.........
20001aec:	acaaa8a6 b2b1b0ae b5b4b3b2 bbbab8b6     ................
20001afc:	b7b9bbbb aeb0b3b5 a9aaabad a5a5a6a7     ................
20001b0c:	aaa9a7a6 acacacac a3a6a8aa 999c9ea1     ................
20001b1c:	8b8e9296 81838588 7b7d7f80 72747779     ..........}{ywtr
20001b2c:	6e6e6f70 7472706f 827d7a77 98948e88     ponnoprtwz}.....
20001b3c:	a29f9d9b aba9a7a4 afaeadac b2b1b0b0     ................
20001b4c:	b6b5b4b3 b5b6b7b7 adafb1b3 a8a9aaab     ................
20001b5c:	a6a6a6a7 adaaa8a7 aeafb0af a4a7aaac     ................
20001b6c:	979b9ea1 898c9094 80818386 7b7c7e7f     .............~|{
20001b7c:	72757779 6e6e6f70 7371706f 837e7a76     ywurponnopqsvz~.
20001b8c:	99948f89 a4a3a09d a8a7a7a6 abaaaaa9     ................
20001b9c:	adacabab b4b3b1af b4b5b6b6 abadafb2     ................
20001bac:	a8a9a9aa a9a8a7a8 b0aeadab afb1b2b2     ................
20001bbc:	a4a7aaad 979a9da0 86898e92 80818283     ................
20001bcc:	7b7d7e7f 71737679 6f6f6f6f 79777471     .~}{yvsqooooqtwy
20001bdc:	86827e7b 9b96918c a5a3a19e a9a9a8a6     {~..............
20001bec:	aeadabaa afaeaeae b1b0afaf b0b0b1b1     ................
20001bfc:	aaabadae a9a9a9a9 a9a8a8a8 acabaaa9     ................
20001c0c:	aeaeaead a6a8abac 989b9fa2 888c9094     ................
20001c1c:	7e808285 7c7c7d7e 7577797a 72727273     ...~~}||zywusrrr
20001c2c:	79767473 8984807c 9d98938e a9a7a4a1     stvy|...........
20001c3c:	acacabab abacacac aaaaaaab afaeacab     ................
20001c4c:	b1b2b1b1 aaacaeb0 a5a6a6a8 a7a6a6a5     ................
20001c5c:	abaaa9a8 aeaeaead a5a9abad 969a9ea2     ................
20001c6c:	868a8e92 7c7d7f82 7b7c7c7c 7677787a     ......}||||{zxwv
20001c7c:	72717274 7a777573 8a85817d 9d98938f     trqrsuwz}.......
20001c8c:	aba8a5a1 aeaeadac adaeaeae adadadad     ................
20001c9c:	b1b0afae b0b1b1b1 a8aaacae a4a5a5a7     ................
20001cac:	a5a4a4a4 a8a7a6a5 aaaaaaa9 a4a6a8a9     ................
20001cbc:	969a9da1 85898d92 7b7c7f82 7979797a     ..........|{zyyy
20001ccc:	76777879 73737475 7a787674 8a85817d     yxwvutsstvxz}...
20001cdc:	9d99948f aeaba6a2 b1b1b0af aeb0b1b1     ................
20001cec:	abababac adacabab b1b2b1af abadafb0     ................
20001cfc:	a4a6a8aa a0a0a1a3 a4a3a2a1 aaa9a8a6     ................
20001d0c:	a4a7a8a9 95999da1 83878c91 787a7c7f     .............|zx
20001d1c:	79797878 797a7a7a 75767778 7a787675     xxyyzzzyxwvuuvxz
20001d2c:	8a85817d a09a9590 afada9a5 b3b3b2b1     }...............
20001d3c:	b0b1b2b2 acadaeaf afaeadad b2b2b1b0     ................
20001d4c:	aaadafb1 a1a3a5a7 9e9e9fa0 a2a1a09f     ................
20001d5c:	a7a7a5a4 a2a4a6a7 93979b9f 82878b8f     ................
20001d6c:	797a7c7f 79787878 7b7b7b7a 78797a7a     .|zyxxxyz{{{zzyx
20001d7c:	79777777 89847f7b 9f99938e b0ada9a4     wwwy{...........
20001d8c:	b7b7b6b4 b2b4b5b6 adaeb0b1 b0aeadad     ................
20001d9c:	b4b4b3b2 abaeb1b3 a1a3a6a8 9d9e9fa0     ................
20001dac:	a09f9d9d a4a3a3a1 9fa1a3a4 9195999d     ................
20001dbc:	8185898d 76777a7d 77767575 7b7b7a79     ....}zwvuuvwyz{{
20001dcc:	797b7c7b 7d7d7b7a 86837f7d a099918b     {|{yz{}}}.......
20001ddc:	aeaca9a4 b9b7b4b1 b8b9baba abadb1b4     ................
20001dec:	ada9a9a9 b6b4b3af aeb1b4b5 a2a6a7a9     ................
20001dfc:	91939599 9aa49a9d 989992a0 8f8ca0a3     ................
20001e0c:	a1b9ad73 9bac9188 7c99928b 9a6b434e     s..........|NCk.
20001e1c:	41436f9e 4b7b8669 572c1521 8795957f     .oCAi.{K!.,W....
20001e2c:	a28d7e7d a4afb5b1 d2b8a49d b5cce0e2     }~..............
20001e3c:	c6b8aba8 aab8c6cb a8a29ea1 8c9daaad     ................
20001e4c:	c9b19687 b0beccd2 9c9c9fa6 b2aea7a0     ................
20001e5c:	b0b0b2b3 889ba8ae 6d696a76 606d7372     ........vjimrsm`
20001e6c:	44424652 454d4e49 5841363b 87888171     RFBDINME;6AXq...
20001e7c:	777a7e82 93847b77 c4bdb2a3 d0d1cfca     .~zww{..........
20001e8c:	b6b9c1c9 bfbfbcb8 abaeb4ba aaaeadab     ................
20001e9c:	808794a1 b2a59485 b0b6bab8 8a919ca6     ................
20001eac:	a0968d89 a7a9a9a6 84909ba2 7173747a     ............ztsq
20001ebc:	545a636b 59575452 3b454f56 42342f33     kcZTRTWYVOE;3/4B
20001ecc:	7e746655 7c828583 82787476 b7ac9e8f     Uft~...|vtx.....
20001edc:	cacac7c0 bbbcc0c6 b6bcbfbd adaaaaaf     ................
20001eec:	aab2b4b2 848b949f a99c8e85 b1b6b6b1     ................
20001efc:	858e9ba8 91898380 a09e9c98 86919a9e     ................
20001f0c:	7375777c 5359636d 5c585351 464e565c     |wusmcYSQSX\\VNF
20001f1c:	4a3e3a3f 81776a5a 80868887 8178767a     ?:>JZjw.....zvx.
20001f2c:	b0a69a8d c6c5c0b8 b8b9bdc3 b6bcbdbb     ................
20001f3c:	adaaabaf aeb5b5b2 868d98a3 a69a8d86     ................
20001f4c:	b2b6b5af 8a939faa 928b8685 9d9c9a97     ................
20001f5c:	8490989c 7374757b 5b60686f 65625d5a     ....{utsoh`[Z]be
20001f6c:	4b555f65 493e3d43 82776a59 878b8d8a     e_UKC=>IYjw.....
20001f7c:	807b7c81 a99f958a bebbb6b0 b8b8bcbe     .|{.............
20001f8c:	b6bcbdbb aeaaaaaf b1b9bab5 858d98a5     ................
20001f9c:	a89a8c84 b6b9b7b1 8c97a4ae 8e898586     ................
20001fac:	97969492 87909598 78797a7f 5d636c74     .........zyxtlc]
20001fbc:	65615c5a 50586065 4c434349 82786b5b     Z\aee`XPICCL[kx.
20001fcc:	878b8c89 7f7a7b81 a49c9388 bcb9b3ab     .....{z.........
20001fdc:	b5b6b9bd b5b9bab7 adaaabaf b1b6b6b2     ................
20001fec:	8b949da8 a4988d88 b3b4b2ad 8e99a4ad     ................
20001ffc:	8c878587 93929190 888f9394 78797b80     .............{yx
2000200c:	5d646c74 66615c5a 555d6467 5149494e     tld]Z\afgd]UNIIQ
2000201c:	82796e5f 898b8c88 827e7f84 a49c948a     _ny.......~.....
2000202c:	bab6b0aa b3b4b8bb b4b7b7b4 ada9aaae     ................
2000203c:	b4b8b7b2 8f98a1ab a2978d8b b0b1afaa     ................
2000204c:	929ca5ac 8f8c898b 94939392 868e9395     ................
2000205c:	7777797f 5f666e74 68645f5d 5a62686b     .ywwtnf_]_dhkhbZ
2000206c:	514c4e54 7d756a5d 88898884 85808184     TNLQ]ju}........
2000207c:	a59e968d b6b3afaa acaeb3b6 b0b2b1ad     ................
2000208c:	ada8a8ab b9bcbab4 919ba5b0 9e948c8b     ................
2000209c:	afaeaba6 99a2a9ad 93919193 92939495     ................
200020ac:	878e9293 78787a80 656b7277 6d696462     .....zxxwrkebdim
200020bc:	5c656c6f 4d4a4d54 7b726658 8b8b8882     ole\TMJMXfr{....
200020cc:	86838488 9f9a938b b1ada8a3 abadb0b2     ................
200020dc:	b2b3b1ad adaaaaae b7bab8b3 919aa4af     ................
200020ec:	9d938b8b adaca9a4 99a1a7ab 95939294     ................
200020fc:	92949696 898f9292 7a797b81 6a70777b     .........{yz{wpj
2000210c:	716d6867 616a7174 4f4d5258 7b726659     ghmqtqjaXRMOYfr{
2000211c:	8b8a8782 8886878a a09b958d b0aca7a3     ................
2000212c:	abacafb1 b1b2b0ac aaa7a9ad b6b9b6b1     ................
2000213c:	949da6af 968e8a8c aba8a39d 9ea5aaab     ................
2000214c:	97959598 96979898 8d939696 7c7b7f85     ..............{|
2000215c:	6d73797c 74706c6a 636d7477 4d4d535a     |ysmjlptwtmcZSMM
2000216c:	746b6055 8987827c 89878889 9e9a948d     U`kt|...........
2000217c:	aba7a3a1 a6a8abac b1b0aca7 aaa9aaae     ................
2000218c:	b6b8b5af 939ca6b0 948c888b a7a4a09b     ................
2000219c:	9ea3a7a8 9a989799 979a9c9c 8d929496     ................
200021ac:	7d7d8087 70767b7d 75706c6c 67707677     ..}}}{vpllpuwvpg
200021bc:	4d4e555d 6f665c52 87837d76 8d8a8989     ]UNMR\fov}......
200021cc:	a29f9993 aaa7a5a4 a6a8abac b0aea9a6     ................
200021dc:	aba9abae b5b7b4af 8f99a4af 8d858287     ................
200021ec:	a4a09b95 a2a5a6a6 9f9d9c9e 9a9da0a0     ................
200021fc:	91959798 8181848b 767c8082 76727071     ..........|vqprv
2000220c:	68727778 494c545d 6c62564c 86807a73     xwrh]TLILVblsz..
2000221c:	908e8c8a a29f9a94 a9a6a5a4 a6a8aaaa     ................
2000222c:	b0aea9a6 a6a6aaae b0b0ada9 8e98a2ab     ................
2000223c:	8b838286 a29f9a93 a2a4a5a4 a29f9ea0     ................
2000224c:	a1a4a6a5 989c9d9e 82848a92 777d8182     ..............}w
2000225c:	75716f71 6b747979 4d515861 6a61574f     qoquyytkaXQMOWaj
2000226c:	847f7872 908d8a88 a7a39d96 aaa9a8a8     rx..............
2000227c:	a5a9acac a9a6a3a2 a1a1a4a8 b1b0aaa5     ................
2000228c:	8e98a4ad 847e7f85 9c97938c a4a4a3a0     ......~.........
2000229c:	a8a5a3a3 a4a8aaaa 989b9ea0 83858b92     ................
200022ac:	7a7f8283 77737274 71797d7c 4e535c66     ...ztrsw|}yqf\SN
200022bc:	6a61564f 847e7871 94908d89 a8a39e98     OVajqx~.........
200022cc:	a8a8a9aa a2a7a9a9 a3a09e9f 9b9da0a3     ................
200022dc:	aca9a39e 8c97a2aa 817c7c83 9a96918a     .........||.....
200022ec:	a3a2a09d aba7a5a3 aaaeb0ae 9ea0a3a6     ................
200022fc:	858b9299 777d8283 76717073 767e7f7b     ......}wspqv{.~v
2000230c:	4e56616c 675c524c 847f7970 938f8c88     laVNLR\gpy......
2000231c:	ada8a099 aaacaeaf a0a5a8a9 9e9b999a     ................
2000232c:	999a9d9f aaa7a09c 8e97a1aa 7f7b7c83     .............|{.
2000233c:	9c978f86 a3a09e9d afaba8a5 acb0b2b1     ................
2000234c:	969aa0a6 84888c91 7c7f8081 78757477     ...........|wtux
2000235c:	757a7c7b 4b505f6d 68625950 7e7b766f     {|zum_PKPYbhov{~
2000236c:	95908b83 a1a19e9a a19fa0a0 a4a8a8a4     ................
2000237c:	a39f9ea0 9b9fa3a4 a4a19d9a 85909ca3     ................
2000238c:	7f78777c a19d968b a2a3a3a3 a4a2a2a2     |wx.............
2000239c:	a6a8a8a7 a1a1a1a3 8c93999f 7c848888     ...............|
200023ac:	6e6a6c73 787c7973 585c646f 72685e58     sljnsy|xod\XX^hr
200023bc:	7f7d7b78 8e898582 a7a29b94 aaaaabaa     x{}.............
200023cc:	a7aaabaa a1a1a2a4 92979da1 a29b9491     ................
200023dc:	929ba3a5 8783858a 9c9a968f 9e9d9c9c     ................
200023ec:	a5a2a09f aaacaca9 9fa1a4a7 8b92989d     ................
200023fc:	7b818486 6b696c74 787a7771 5b606770     ...{tlikqwzxpg`[
2000240c:	736a615b 807e7c79 8b888582 a59e9790     [ajsy|~.........
2000241c:	acacacaa acafaead a0a1a4a8 90959a9e     ................
2000242c:	9f98918e 949ca3a4 8885868c 9c9b978f     ................
2000243c:	9a9a9b9c a39f9d9c aaabaaa7 a1a2a4a7     ................
2000244c:	8e949a9f 7b818589 69686c73 7879756e     .......{slhinuyx
2000245c:	5c606871 776d635d 8383827e 8d8a8684     qh`\]cmw~.......
2000246c:	a6a09992 acacacaa adaeadac a3a4a7aa     ................
2000247c:	93999ea2 9d979190 90999fa1 88838388     ................
2000248c:	9e9d9991 97989a9c a09c9997 a7a9a7a4     ................
2000249c:	a0a1a2a4 91979c9f 8086898c 6a6a6f77     ............wojj
200024ac:	7678746e 5e616870 7b70665f 86868482     ntxvpha^_fp{....
200024bc:	8d898887 a49e9892 a6a7a8a8 aaaaa8a7     ................
200024cc:	a9a9a9aa 939ba3a8 99938f8f 8b949b9c     ................
200024dc:	8a838184 a3a19d93 9a9d9fa2 9f9d9a9a     ................
200024ec:	a0a3a4a2 9c9c9d9d 95979b9c 838c9193     ................
200024fc:	70707279 73757472 5d61676e 80746860     yrpprtusnga]`ht.
2000250c:	8b8c8b87 8f8b898a a29e9994 a3a3a3a4     ................
2000251c:	afaeaaa6 acacacae 979fa7ab 98939091     ................
2000252c:	838d969a 887e797c a8a7a195 9a9da1a5     ....|y~.........
2000253c:	9c9a9999 9d9e9f9e 9e9c9a9b 979a9e9f     ................
2000254c:	888f9395 6f6e747e 75797773 595b626c     ....~tnoswyulb[Y
2000255c:	86796c60 8b8e908d 8f8c8b8a a09d9994     `ly.............
2000256c:	a2a0a1a2 afadaaa5 afb0b0b0 969da5ab     ................
2000257c:	a19b9593 85909ba2 877d797c a3a39e93     ........|y}.....
2000258c:	98999b9f 9e9c9a99 9b9ea0a0 96959597     ................
2000259c:	91929495 878e9191 7876787f 7980817d     .........xvx}..y
200025ac:	595a626d 897e6f61 8f8f908f 9895928f     mbZYao~.........
200025bc:	a4a3a09c a09fa1a3 aeaca8a4 b2b2b0af     ................
200025cc:	9ba1a9af a4a19d9a 808c99a2 8a7e7778     ............xw~.
200025dc:	9fa19f96 9797989b 9e9d9b99 91969b9d     ................
200025ec:	918e8c8d 94949493 868e9395 7d79797e     ............~yy}
200025fc:	77808482 5d5a606a 8f857767 8e8f9192     ...wj`Z]gw......
2000260c:	9c979390 a2a3a2a0 9e9c9c9f afaca8a3     ................
2000261c:	b2b4b3b1 9da0a7ae a6a6a29e 7c8794a0     ...............|
2000262c:	8d807876 9b9f9f99 94939497 9b9a9896     vx..............
2000263c:	8c909599 938f8b8a 96969695 858d9396     ................
2000264c:	857f7d7f 79858a8a 6460646d 90897d6f     .}.....ymd`do}..
2000265c:	8b8c8f91 9d97918d 9fa3a3a1 9996979b     ................
2000266c:	aca7a39e b1b3b3af a0a2a6ad a9aca8a3     ................
2000267c:	7d8896a2 95897d78 989fa29e 918e8e91     ...}x}..........
2000268c:	a09f9c96 848b949b 8a878281 9795928e     ................
2000269c:	848c9397 89847f7f 79848c8d 6964676e     ...........yngdi
200026ac:	95908475 8b8b8e93 9f99948f 9da2a5a3     u...............
200026bc:	97949498 aaa5a19c b1b4b2ae a2a2a5ac     ................
200026cc:	acb0ada7 7e8693a1 978d837d 959a9e9d     .......~}.......
200026dc:	8f8d8d90 97989692 7f848c93 87837e7d     ............}~..
200026ec:	92918e8b 83898e92 8f888381 7b878f92     ...............{
200026fc:	736a6a70 96948b7f 8c8d9095 9f99938e     pjjs............
2000270c:	9ba1a4a3 95919295 aca8a29c adb1b1af     ................
2000271c:	a4a2a4a8 aaafaea9 818894a0 9c928881     ................
2000272c:	939a9fa0 8d8a898c 98999792 7c828b93     ...............|
2000273c:	847f7b7a 92908c89 85898e91 908a8583     z{..............
2000274c:	7c879093 766e6c72 97968f83 8c8d9094     ...|rlnv........
2000275c:	a19b948f 9ba2a6a5 93909095 aaa59f99     ................
2000276c:	aeb1b0ae a4a3a5aa acb0aea9 828a95a2     ................
2000277c:	9e948982 949ca1a2 8d89898d 97989691     ................
2000278c:	7b818992 85807b79 93918e8a 868b9093     ...{y{..........
2000279c:	908b8684 7d889093 7a716f74 9b9a9387     .......}toqz....
200027ac:	898b9197 9b948d89 9aa0a2a0 93909094     ................
200027bc:	aaa5a09a acafb0ae a2a0a2a7 adb0ada7     ................
200027cc:	868d98a4 a0968c86 959ea4a5 8885878d     ................
200027dc:	9897938e 7d838c94 88847f7c 8f8e8d8b     .......}|.......
200027ec:	84888c8f 918b8583 818c9394 7a737278     ............xrsz
200027fc:	9b999185 85899097 968f8884 979c9e9b     ................
2000280c:	918d8d91 a8a49e97 aaacacaa a2a0a2a6     ................
2000281c:	adafaca7 8b929ca7 a2988f89 97a1a8a8     ................
2000282c:	8684878e 9795908b 7f879095 86827e7c     ............|~..
2000283c:	8f8e8c89 81868a8e 8f888280 87909594     ................
2000284c:	7672747d 9a968c80 858a9298 928b8683     }trv............
2000285c:	9ca09e98 92909196 a7a39d97 abadacaa     ................
2000286c:	a2a1a3a6 acaeaca6 929ba3a8 9e948d8c     ................
2000287c:	9ba4a8a6 7f7e848f 97948d85 80878f95     ......~.........
2000288c:	86817d7d 8e8d8c8a 878b8d8e 8c868384     }}..............
2000289c:	8d939592 79787c84 9a958c81 858b9399     .....|xy........
200028ac:	91898481 9d9e9d98 8e8f9397 aaa39f95     ................
200028bc:	9c9aa3a7 b4b6a5b1 9599a3a2 999f9994     ................
200028cc:	725d6985 becbbf9a 685b709a dee0c291     .i]r.....p[h....
200028dc:	2a4e86bc a77d4b29 5f84a7b6 63504548     ..N*)K}...._HEPc
200028ec:	9a928676 bcb4aba2 a9b5bdc0 8b949aa1     v...............
200028fc:	5c65717f 53515356 73695f57 8e88827b     .qe\VSQSW_is{...
2000290c:	aca9a197 919aa3a9 998d8789 c6bfb3a6     ................
2000291c:	bbc1c6c8 9a9ea7b1 868e9497 7274787f     .............xtr
2000292c:	80797472 91928f88 8b88898d 8e949590     rty.............
2000293c:	72727984 a495867a b9bcb9b0 8392a2b0     .yrrz...........
2000294c:	68696d76 63676969 605c5c5f 8d817468     vmihiigc_\\`ht..
2000295c:	95989996 9d999493 858e989d 968a8280     ................
2000296c:	c9bfb3a5 c5ced1cf 8e9cabb9 83828185     ................
2000297c:	72798083 766e6b6d 9c988e82 9194999c     ..yrmknv........
2000298c:	90949492 79797f88 9f95897f b1b2aea8     ......yy........
2000299c:	8e9ba6ad 6065707f 6a686460 5b5e6468     .....pe``dhjhd^[
200029ac:	7d6f645d 9a9b968c 96949496 8d939898     ]do}............
200029bc:	988d8787 c5bdb3a6 c6caccca 91a3b2bd     ................
200029cc:	78747781 7f84837e 6b6a6f77 9c908174     .wtx~...wojkt...
200029dc:	9ba1a5a4 8d909295 7a7b8289 a2978b80     ..........{z....
200029ec:	afb0b0ab 94a0a8ad 56637586 6b615752     .........ucVRWak
200029fc:	60697071 695d5759 a1988a7a 959ba0a3     qpi`YW]iz.......
20002a0c:	8c8d8f91 9b908b8a c2bdb3a7 bdc0c3c4     ................
20002a1c:	98a9b4ba 6f6f7786 88857e76 6d737c84     .....woov~...|sm
20002a2c:	8e7f736c acafaa9e 8e959ca4 7f7f8388     ls..............
20002a3c:	a3998e85 aaadadaa 979ea2a7 6271818e     ..............qb
20002a4c:	64595457 6c73746e 615c5d63 9e8f7e6e     WTYdntslc]\an~..
20002a5c:	9fa6aaa7 878a9097 9c918986 c0bcb5a9     ................
20002a6c:	b5b8bcbf a0aaafb2 6c738192 8981766e     ..........slnv..
20002a7c:	727b858a 83756d6c b4afa393 919da8b1     ..{rlmu.........
20002a8c:	7f7c7f86 a79d9186 a4aaadad 95989b9f     ..|.............
20002a9c:	6b7b8891 5c54545d 74767267 5b5b626b     ..{k]TT\grvtkb[[
20002aac:	97837062 acb2b0a7 818894a1 9a8d837f     bp..............
20002abc:	c0bdb5a9 acb2b9bf a1a7a8a9 6e798896     ..............yn
20002acc:	857c726c 7a848a8b 7d736f72 b8ad9c8b     lr|....zros}....
20002adc:	98a9b6bc 7a777c88 aa9e9083 a6aeb2b1     .....|wz........
20002aec:	8e91969d 7480888d 56545a67 7672695e     .......tgZTV^irv
20002afc:	5d626b72 8976675e b0b2aa9c 7f8b99a7     rkb]^gv.........
20002b0c:	94857c7a c3bfb4a4 a9b1bac1 a1a3a3a4     z|..............
20002b1c:	7985929c 84797271 858e918d 7671747c     ...yqry.....|tqv
20002b2c:	b3a49282 a1b1babb 7777808f a99a8a7d     ..........ww}...
20002b3c:	a9b3b7b4 888a919c 79828788 5557606c     ...........yl`WU
20002b4c:	7872675c 5f687178 7c6b5f5c b3b0a390     \grxxqh_\_k|....
20002b5c:	8190a1ae 8d7e7677 c8c2b3a0 a5b0bdc6     ....wv~.........
20002b6c:	9e9d9c9e 808b959c 837a7578 8e94948d     ........xuz.....
20002b7c:	75757b85 ae9d8b7d aab8beba 787c8899     .{uu}.........|x
20002b8c:	aa9a897d acb7bbb6 7e838d9c 7b818280     }..........~...{
20002b9c:	5b5f6872 7570665e 60697276 72635a59     rh_[^fpuvri`YZcr
20002bac:	b3ab9b86 8697a7b2 897c767a cac2b19d     ........zv|.....
20002bbc:	a5b3c0c9 9a97969b 8d959a9c 88818085     ................
20002bcc:	8c94968f 71717782 a7968578 b0bbbdb6     .....wqqx.......
20002bdc:	767b8a9e a796877b b5c1c1b7 7e8390a2     ..{v{..........~
20002bec:	7c807f7d 62656d75 78726a64 616b7479     }..|umebdjrxytka
20002bfc:	74665e5c b1a89885 8a9aa8b1 8d7f7a7f     \^ft.........z..
20002c0c:	cec6b5a1 a3b3c2cd 928f9096 888f9394     ................
20002c1c:	8a848082 8f959792 70727a84 a3928175     .........zrpu...
20002c2c:	b3bbbbb2 808895a5 aa9a8b81 b5bec0b8     ................
20002c3c:	7d8694a5 7a7c7c7b 6b6b7076 7d7a746f     ...}{||zvpkkotz}
20002c4c:	5e68737a 6d5f5757 ada49480 8f9da8af     zsh^WW_m........
20002c5c:	897f7d83 c8bdac99 a6b5c2ca 92919299     .}..............
20002c6c:	878b9092 918c8785 89929696 6d6c737e     ............~slm
20002c7c:	a8978576 b0b8bab4 828a95a3 aa998b82     v...............
20002c8c:	b7bfc0b8 848d9aa9 767b7e80 6d696b70     .........~{vpkim
20002c9c:	82827c74 5963707b 71615654 a9a29583     t|..{pcYTVaq....
20002cac:	8c98a2a8 8c817e83 c5bcad9b aab6c0c6     .....~..........
20002cbc:	929599a0 7f83888e 9c928881 89969fa1     ................
20002ccc:	6e6c717c a7978678 abb3b5b1 858b95a1     |qlnx...........
20002cdc:	aa9b8e86 b6bebeb7 8c949fab 6e767e85     .............~vn
20002cec:	73696467 868b887e 545e6c7b 72625652     gdis~...{l^TRVbr
20002cfc:	a39e9384 8f979ea3 91898689 c3bbae9f     ................
20002d0c:	b1b9c0c4 919aa2aa 7c7b8088 a69d9084     ..........{|....
20002d1c:	82929fa7 6b676a73 a1948476 a5aaaca9     ....sjgkv.......
20002d2c:	878c949d a5998f88 b1b4b3ae 959da5ac     ................
20002d3c:	67717e8a 80726763 8791928c 565d6979     .~qgcgr.....yi]V
20002d4c:	7a6b5e57 a09c9488 949b9fa1 948d8b8e     W^kz............
20002d5c:	bbb3a99d c0c2c1bf 91a0aeba 7e767882     .............xv~
20002d6c:	aba59a8b 7a8999a6 736c6a6f 9690877e     .......zojls~...
20002d7c:	9f9e9e9b 8b8e959a 99938e8b b5b0a8a1     ................
20002d8c:	9dadb6b7 666d7a8b 8a7c6f67 848f9694     .....zmfgo|.....
20002d9c:	5f626a76 78706862 958f8880 9d9e9c99     vjb_bhpx........
20002dac:	96949599 b1a69f9a cccec8bd 8d9fb2c2     ................
20002dbc:	8a7f7b7f a1a4a197 7a848f9a 75727174     .{.........ztqru
20002dcc:	86817d79 9b98928c 8e94999b 8b868689     y}..............
20002ddc:	c1b5a595 a2b7c4c7 6a6b768a 8f887c71     .........vkjq|..
20002dec:	81898f92 686b7178 6b686766 90847a71     ....xqkhfghkqz..
20002dfc:	a3a3a099 8d949aa0 b09e928c d4dad3c4     ................
20002e0c:	8898aec5 938c8482 9a9a9997 888e9398     ................
20002e1c:	6d71797f 766b6b67 95938c7e 9ba29299     .yqmgkkv~.......
20002e2c:	9082808d d4c3aa9a a3acbdd0 62728b9c     ..............rb
20002e3c:	81837665 69616673 757e7e75 5c575b66     ev..sfaiu~~uf[W\
20002e4c:	8f847667 ada79f97 8e9ca8ae bb9f8c87     gv..............
20002e5c:	dae6e5d5 939eafc5 8d8f8e8e 9d938b8a     ................
20002e6c:	9ba5a9a6 6c76838f 746a6465 a79d9082     ......vledjt....
20002e7c:	8fa0aaac 766c6f7c c1b6a28a 94a5b6c1     ....|olv........
20002e8c:	71767c86 6a66676c 8e8a8075 7480898e     .|vqlgfju......t
20002e9c:	53525966 907c6a5b b6b6afa1 86909fad     fYRS[j|.........
20002eac:	bca79388 d6dcdace a8b2becb 838b949e     ................
20002ebc:	958a8380 a3a7a59f 65778999 65595458     ..........weXTYe
20002ecc:	a5998977 8a9ba7ab 7a6f6f79 b5ab9d8b     w.......yooz....
20002edc:	a7b1b7b8 78838f9c 6664686f 958a7b6e     .......xohdfn{..
20002eec:	7c8d989a 4b4e5969 8c776353 b5b6af9f     ...|iYNKScw.....
20002efc:	89909cab b7a5958a d3d4d0c5 b3bfc8ce     ................
20002f0c:	828c99a6 94877e7c abafaba2 64768c9e     ....|~........vd
20002f1c:	60545055 a3968572 8d9ca7aa 8177767f     UPT`r........vw.
20002f2c:	b2a99e90 aeb2b5b6 83909da7 6a686d76     ............vmhj
20002f3c:	978e8274 7d8d989b 4b4f5b6c 85715d50     t......}l[OKP]q.
20002f4c:	adada598 89909ba6 b1a2948b d1d1cbbf     ................
20002f5c:	bec8ced0 8793a2b1 97898181 b0b3aea4     ................
20002f6c:	697d92a5 6056555b 9e90806e 8d9ba4a5     ..}i[UV`n.......
20002f7c:	7b73757e aca39688 b2b4b4b2 8796a3ac     ~us{............
20002f8c:	66656c78 978c7e6f 81919b9d 4b505d6e     xlefo~......n]PK
20002f9c:	7e6a5a4f acaaa091 898f9aa6 b1a2948b     OZj~............
20002fac:	d1cec8be c2cbd1d2 8d98a7b5 9c908988     ................
20002fbc:	b2b5b2a9 6f8499a9 5a52535d 998d7d6a     .......o]SRZj}..
20002fcc:	86939b9e 7c75757b a59d9287 b1b1afaa     ....{uu|........
20002fdc:	8b9aa6ad 69686f7b 988d7f71 85949b9d     ....{ohiq.......
20002fec:	4a516073 806c5a4e adaba193 8a949fa9     s`QJNZl.........
20002ffc:	a99a8e88 cdcac4b9 c1c8ccce 94a0adb8     ................
2000300c:	9a908b8c b1b2ada5 73879aa9 5c565862     ...........sbXV\
2000301c:	92877869 88939a99 736f727b a69b8d7e     ix......{ros~...
2000302c:	a9adaeac 8c959da4 74757a82 968d8279     .........zuty...
2000303c:	8b979c9b 525a697a 7c6b5c53 a6a39a8d     ....ziZRS\k|....
2000304c:	88909aa2 a7978b86 cfccc4b8 b9c1c8cd     ................
2000305c:	9ba1a8b1 9f999697 aeafaca6 788b9ba7     ...............x
2000306c:	605b5d67 9187796b 89919797 7470747d     g][`ky......}tpt
2000307c:	a89d8d7e a4abafaf 848b939c 817e7e80     ~............~~.
2000308c:	938f8a85 89929696 575f6c7b 7d6e6058     ........{l_WX`n}
2000309c:	a3a0988c 8c929aa0 a7988e8a cecbc3b7     ................
200030ac:	b0b9c3ca 9d9ea1a8 a8a5a19e a5a8a9aa     ................
200030bc:	7b8a969f 6662646e 90867b6f 89909595     ...{ndbfo{......
200030cc:	77747880 a3988c80 a1aaadaa 787f8995     .xtw...........x
200030dc:	88817a76 9596938e 80878c91 61666e77     vz..........wnfa
200030ec:	80736761 a29f978d 8e949ba0 a7998f8b     ags.............
200030fc:	cbc6beb4 abb9c4ca 9391959e b5b0a79b     ................
2000310c:	9da6afb5 7c858d94 6c696b73 938c8075     .......|skilu...
2000311c:	8c949898 7e7d8085 a0978c83 a5abaca7     ......}~........
2000312c:	6f798998 877a716d 9ea19d93 78818b96     ..yomqz........x
2000313c:	67676a70 8379706a a19e978e 93979da1     pjggjpy.........
2000314c:	a89d9591 c5c1bcb3 acb8c0c5 8d8c939f     ................
2000315c:	baaea094 a4b4bdc0 747a8694 7c777371     ..........ztqsw|
2000316c:	94908a83 91969998 8281848a 9d989088     ................
2000317c:	9fa3a3a1 75818e98 7c706a6b a3a39a8b     .......ukjp|....
2000318c:	7685939e 6762646a 8c857b6f 9e9a9591     ...vjdbgo{......
2000319c:	95999d9f a89e9693 bebbb7b1 aeb6bcbf     ................
200031ac:	90959ca5 ab9d938e b0bcbfb8 6e798b9f     ..............yn
200031bc:	81766e6a 9b9a948c 93959799 8686888e     jnv.............
200031cc:	9d97908a 969b9f9f 7c848b91 74717276     ...........|vrqt
200031dc:	9c93877c 7e8d999e 5d5a606d 94867566     |......~m`Z]fu..
200031ec:	9c9fa09c 9597999a a49d9795 bab7b3ac     ................
200031fc:	aab1b7ba 95979ca3 a29a9695 b3b5b2ab     ................
2000320c:	7c8b9ba9 7e746f72 a4a2998c 90969ca1     ...|rot~........
2000321c:	8a88898c 9c99948f 979b9d9d 7a818990     ...............z
2000322c:	73727275 8d857d77 848f9493 5e616a77     urrsw}......wja^
2000323c:	8c7c6e62 9fa2a199 9393979b a9a29a95     bn|.............
2000324c:	b5b4b3af a9aeb2b4 999b9fa4 9e9a9999     ................
2000325c:	afaeaaa4 8996a3ac 7773757d a59d9082     ........}usw....
2000326c:	979da3a6 8b8a8c90 9d9b9690 91969a9c     ................
2000327c:	7a80858c 75757577 857f7a77 868a8b89     ...zwuuuwz......
2000328c:	646a737d 82736763 a5a29c90 94999ea3     }sjdcgs.........
2000329c:	a69d9794 b5b5b4ae a5acb1b4 9c9c9da1     ................
200032ac:	9e9d9e9d abaaa6a1 929ca4a9 7a7c8189     ..............|z
200032bc:	a2988b80 9ea4a8a8 898b9097 9a96908b     ................
200032cc:	90969a9b 787d848a 73737375 7f7a7675     ......}xusssuvz.
200032dc:	85878784 6a717981 7a6e6867 a49f9588     .....yqjghnz....
200032ec:	979da2a5 a0989393 b5b4b0a9 a6abb0b3     ................
200032fc:	9c9c9ea2 a3a19f9d adaba8a5 9ba4a9ac     ................
2000330c:	7d818891 9a90867f a0a5a5a1 86899199     ...}............
2000331c:	95908a86 8d929697 757b8288 74717172     ..........{urqqt
2000332c:	7f7c7976 8c8b8883 6f788188 796e6a6a     vy|.......xojjny
2000333c:	a49e9487 9fa3a6a7 9c96969a b4b0aba3     ................
2000334c:	a2a9b0b4 9a9a9a9e a1a19f9d ada9a5a3     ................
2000335c:	a7adb0b0 8289949e 958b837f 9fa1a19b     ................
2000336c:	86899197 958d8983 92919694 74708389     ..............pt
2000337c:	717c6288 8b607281 ac937481 89847c8d     .b|q.r`..t...|..
2000338c:	81706771 acada190 8a8c96a2 aaa69b90     qgp.............
2000339c:	828e9da8 9088817e aaa5a09a afb1b1af     ....~...........
200033ac:	9e9ea3aa bfb6aca3 a0b0bcc2 82818691     ................
200033bc:	97948f88 888e9497 7d7e7f82 7c7c7c7d     ..........~}}|||
200033cc:	80807f7e 7275797d 75716f70 9e92877d     ~...}yurpoqu}...
200033dc:	a2acada8 6d758394 8279706b 8e8e8d89     ......umkpy.....
200033ec:	89898a8d 787f8588 847a7473 a29f998f     .......xstz.....
200033fc:	a8a5a4a3 b4b2afac a9adb0b3 979ba0a4     ................
2000340c:	9e9a9695 8c969da0 74747a82 938b8078     .........zttx...
2000341c:	8a929798 636a747f 68615f5f 8c837a71     .....tjc__ahqz..
2000342c:	a3a29e97 87939ca1 7d78787d 98958f86     ........}xx}....
2000343c:	7f889096 76727378 938d867e a69f9a97     ....xsrv~.......
2000344c:	b6b9b6ae 8a95a2ad a1938885 d4cec1b2     ................
2000345c:	aebdcad2 888c949f 7e7e8184 8b878380     ..........~~....
2000346c:	9394928f 79828a90 706c6c71 76777674     .......yqllptvwv
2000347c:	7e777575 a69c9287 a1a8acac 85899099     uuw~............
2000348c:	85868584 80808183 8a858280 8b8c8d8d     ................
2000349c:	938c8a8b afafa99e 8a949fa9 a6988c87     ................
200034ac:	c8c7c1b5 b0b8c0c5 9ba0a5aa 7f848c94     ................
200034bc:	85817e7d 9594908b 7c858d93 706e6f74     }~.........|tonp
200034cc:	71727271 7e757070 a29d9489 9b9fa3a4     qrrqppu~........
200034dc:	9a999898 878e9599 7a797b7f 8a85807c     .........{yz|...
200034ec:	8d90918f 998f8b8b b5b6b0a5 8b96a3ae     ................
200034fc:	9b908a88 c5bfb5a8 bfc3c6c7 9ea9b2b9     ................
2000350c:	767b8692 8b837b76 93959491 797f888e     ..{vv{.........y
2000351c:	79787776 6c707578 8178706c 9897938b     vwxyxupllpx.....
2000352c:	9b979697 aaaca9a2 828e9aa3 78747479     ............yttx
2000353c:	938d867e 878e9596 998c8482 b0b5b2a7     ~...............
2000354c:	8c919aa6 9c97918c b0aaa5a0 cbc7c0b8     ................
2000355c:	a7b7c3ca 74798495 8e867d76 90969795     ......ytv}......
2000356c:	797c8189 7c7e7d7a 6e6e7177 8c847a72     ..|yz}~|wqnnrz..
2000357c:	898c8f90 9e948c89 b4b6b2a9 8592a0ac     ................
2000358c:	7c76757a 8f8c8982 86898d8f 9e958d87     zuv|............
2000359c:	adafada7 999ca1a8 8f909396 a49a9490     ................
200035ac:	ccc5bbaf abbcc8cd 787c8798 8b857f7a     ..........|xz...
200035bc:	898d8f8f 7f7f8184 7b7f8080 77757578     ...........{xuuw
200035cc:	8a88837d 797b8187 9e91857d b9bbb5ab     }.....{y}.......
200035dc:	8b97a5b1 7e7c7d82 88858381 8c8c8c8b     .....}|~........
200035ec:	9f99938e b0afaba6 9ea4a9ad 878d9499     ................
200035fc:	9c908885 c9c2b7aa acbbc5ca 8287909d     ................
2000360c:	82807f80 89898784 7f818588 78797b7d     ............}{yx
2000361c:	807b7877 89898784 797c8186 978b817b     wx{.......|y{...
2000362c:	b1b0aba2 97a0a9af 797c838d 87817c79     ..........|yy|..
2000363c:	9091918d 9d979391 b7b2aca4 a5aeb5b8     ................
2000364c:	8489919b 978e8683 c1b7aba1 b1bcc3c5     ................
2000365c:	868f9aa5 807d7d80 8e8f8b86 7d81858a     .....}}........}
2000366c:	7d7b7a7a 8684827f 85878888 797a7e81     zz{}.........~zy
2000367c:	8d857e7a b1aca297 9aa4acb1 787d848e     z~............}x
2000368c:	877e7876 93969690 9c949091 bdb7afa5     vx~.............
2000369c:	a7b1b8bd 878c949e 928b8785 b5ada39a     ................
200036ac:	b7bdbebc 8794a1ac 7f7b7a7f 91918c85     .........z{.....
200036bc:	787d848c 86817c78 83848687 89888683     ..}xx|..........
200036cc:	7d828789 8b827c7b b1aba297 9ca8afb2     ...}{|..........
200036dc:	7176818e 847c7571 9293918b a0989291     ..vqqu|.........
200036ec:	c1bab0a8 a9b4bdc2 888d959e 908b8887     ................
200036fc:	b1a89e96 b4babbb7 86919da9 7b78797e     ............~yx{
2000370c:	908e8982 7f84898e 827f7e7d 8a8a8886     ........}~......
2000371c:	898a8b8b 80828487 8b868280 a9a39b93     ................
2000372c:	98a1a7aa 7278828d 867d7672 9697948e     ......xrrv}.....
2000373c:	9f989594 beb7aea6 aeb6bdbf 899099a4     ................
2000374c:	928c8887 afa79f98 adb3b6b4 88909aa4     ................
2000375c:	82808083 8e8d8b87 8386898b 81807f81     ................
2000376c:	8b898784 8c8d8d8c 8284878a 8e898683     ................
2000377c:	a29e9892 979ea2a4 767b848d 857d7875     ..........{vux}.
2000378c:	9a99948d a29d9a99 b9b3aca7 aeb4b9bb     ................
2000379c:	8b939da6 948d8987 aeaaa49c a3a9adaf     ................
200037ac:	878d949c 807e7f82 93918c86 858a8e91     ......~.........
200037bc:	7c7d7e81 85827f7e 8e8e8c89 8485898c     .~}|~...........
200037cc:	928e8885 9d9d9a97 91989c9d 7b80868b     ...............{
200037dc:	867d7777 a3a19a90 a19e9ea0 b4afa9a5     ww}.............
200037ec:	b3b8bab8 8f98a1ab 958e8b8b aaa8a39c     ................
200037fc:	9ca1a6aa 868a8f96 82808082 96938d87     ................
2000380c:	89919697 76787c81 827c7876 90908d88     .....|xvvx|.....
2000381c:	8486898d 948e8985 9c9c9b98 8f93969a     ................
2000382c:	7b7f858a 8a827c79 aaa69e94 9fa1a5a8     ...{y|..........
2000383c:	a8a29f9e b5b5b3ae 96a0aab2 908b8a8d     ................
2000384c:	a8a5a098 959ca2a7 82858a8e 86828080     ................
2000385c:	9b97928b 92989b9c 7076808a 7a706c6c     ..........vpllpz
2000386c:	96958f85 8b8c8e93 97918e8b 9ea09f9b     ................
2000387c:	8b90959a 7a7e8388 8f857d79 adaaa299     ......~zy}......
2000388c:	9fa4a8ac 9d98989a b7b3ada4 9ea9b2b7     ................
2000389c:	8a888b93 a6a19890 919aa2a6 7e81848a     ...............~
200038ac:	908a8480 a6a49e96 929ba3a6 69737e87     .............~si
200038bc:	776e6966 9f9b9285 8c949b9f 8d888687     finw............
200038cc:	9f9e9a94 8890979d 7d7c7d80 908c8682     .........}|}....
200038dc:	b0a9a69b 939ea5ae 9d918e8f ada9a5a0     ................
200038ec:	adb4b1b0 827e889b baad9d8e 81a0b7c0     ......~.........
200038fc:	8574696c 8f949793 9d968f8c 939ba1a2     lit.............
2000390c:	777a818a 807b7776 a29d9489 808d99a0     ..zwvw{.........
2000391c:	7c757376 97958e85 92969798 7d7e838b     vsu|..........~}
2000392c:	938c8580 aaa9a29b 9599a0a7 9b959393     ................
2000393c:	bfb8afa5 a8b5bec1 84868e9b 9f968d86     ................
2000394c:	a4aaaba7 7d84909c 8e847d7a aeaaa399     .......}z}......
2000395c:	94a0aaae 6c737c88 7b726b69 98948d84     .....|slikr{....
2000396c:	858e9599 7c78787d 9e948b83 9aa2a6a4     ....}xx|........
2000397c:	7b808690 8a827d7b aaa49b92 9ca1a6aa     ...{{}..........
2000398c:	a2999598 bbb9b5ac a5adb5ba 898c949d     ................
2000399c:	938e8b89 a5a5a19a 868d979f 918a8482     ................
200039ac:	aba6a099 9ba5acae 6a717d8c 80776f6a     .........}qjjow.
200039bc:	8f908e88 898c8e8f 7c7d8084 978e857f     ..........}|....
200039cc:	9b9e9f9d 85898f96 88848383 a69e968e     ................
200039dc:	9da4a9aa 9e969497 bbbab4a9 9aa3acb5     ................
200039ec:	8a8b8d92 95908d8b a1a09d99 93999ea0     ................
200039fc:	948e8b8d ada8a29b 9da6abae 717a8592     ..............zq
20003a0c:	8278716e 8e93928c 80808287 83828281     nqx.............
20003a1c:	928c8684 9d9f9e99 82878f98 8a878481     ................
20003a2c:	a099938e 9fa4a5a5 a09a999b bdbcb4aa     ................
20003a3c:	8d97a6b4 8d8a8788 96949290 9d9c9a98     ................
20003a4c:	93989b9d 98918e90 adaba69f 9ca3a9ad     ................
20003a5c:	757d8892 80787372 8f93928c 7b7b8088     ..}ursx.......{{
20003a6c:	85817e7c 918c8988 9a9b9996 898e9498     |~..............
20003a7c:	89878686 9f98928d 9d9fa1a2 9d99999b     ................
20003a8c:	b8b5ada4 919eabb4 837f8086 99958f89     ................
20003a9c:	999b9d9c 94959697 9c989493 adaba7a1     ................
20003aac:	9ca4a9ad 7a808992 847d7877 9195938d     .......zwx}.....
20003abc:	767a818a 837d7875 97938f89 999b9b9a     ..zvux}.........
20003acc:	8c909497 89888889 99948f8c 9d9e9d9d     ................
20003adc:	a19f9d9d b4b2aca6 8d9ba7b0 847e7c81     .............|~.
20003aec:	9a98938c 9698999a 92939495 9e9a9693     ................
20003afc:	acaba8a3 9ca2a7ab 85898f95 89848283     ................
20003b0c:	8d91918e 70757c85 847c7671 9794908b     .....|upqv|.....
20003b1c:	96989999 8d909294 8c8b8a8b 9593908e     ................
20003b2c:	9f9b9896 a9a7a5a2 aeafaeab 8894a0a8     ................
20003b3c:	7e78787e 9e999288 989c9fa0 91919294     ~xx~............
20003b4c:	a49d9893 aeafaeaa 9ba1a7ab 8c8f9296     ................
20003b5c:	8786878a 8c8f8e8b 70757c85 827a7571     .........|upquz.
20003b6c:	9996918a 9698999a 888b8f93 8b898787     ................
20003b7c:	92908f8d a7a19a94 acadaeab a9aaaaab     ................
20003b8c:	87929da5 7e78787e a09b9288 979ca0a2     ....~xx~........
20003b9c:	8f8e8f93 a59f9893 aaadacaa 999ca1a6     ................
20003bac:	91939597 8a898b8e 8c8f8f8c 71767e85     .............~vq
20003bbc:	827a7370 9b98928a 9496999b 8c8d8f91     psz.............
20003bcc:	8b8c8d8d 8e8b898a a8a19992 aeb0b0ae     ................
20003bdc:	a5a9abad 848d97a0 827d7b7d 9c969089     ........}{}.....
20003bec:	92999f9f 908c8a8c aaa59e97 a8abacac     ................
20003bfc:	999b9ea3 97989999 91919496 888d9091     ................
20003c0c:	6f747a81 847c7470 9a98938d 96989b9b     .ztopt|.........
20003c1c:	8c8d9094 89898a8b 88848486 a69d948c     ................
20003c2c:	b6b5b2ae a3a8adb2 848d969d 827c7a7d     ............}z|.
20003c3c:	9f9b948b 8f94999e 938f8c8c a6a29e98     ................
20003c4c:	a3a7a9a8 96979a9e 9c9a9896 96989b9c     ................
20003c5c:	8c919495 74777d84 89817974 9495938f     .....}wtty......
20003c6c:	908f9092 8e909291 85878a8c 89878685     ................
20003c7c:	a69d958e b8b7b3ae a5acb2b6 838c959e     ................
20003c8c:	88827e7e 9797958f 888a8f94 97928e8a     ~~..............
20003c9c:	a6a4a09c a3a5a7a7 8e93999f 9a95908d     ................
20003cac:	9b9d9e9d 8e939799 7a7d8288 8f88817b     ..........}z{...
20003cbc:	93949593 908f9091 8d909292 8284878a     ................
20003ccc:	88868482 a299918c b7b4afa9 a8afb5b8     ................
20003cdc:	878f98a1 8c858181 97989792 878a8e93     ................
20003cec:	908c8987 a09e9a96 a0a2a3a2 94969a9d     ................
20003cfc:	93909090 9f9e9b97 94999c9f 8082878d     ................
20003d0c:	918c8682 8b8c9092 94918e8b 8c909394     ................
20003d1c:	8586888a 8b888685 a09b958f b2aea9a5     ................
20003d2c:	adb3b5b5 8d949ea6 948e8a89 93979997     ................
20003d3c:	8687898d 8b888685 9996918e a0a19f9b     ................
20003d4c:	95989a9e 94909092 9f9e9b98 9b9fa1a1     ................
20003d5c:	8b8d9196 8c8c8c8b 8a8a8b8c 92908e8c     ................
20003d6c:	8a8f9293 85858587 8b898886 9d97918d     ................
20003d7c:	b4aea8a2 b0b5b8b7 9298a0a8 94929090     ................
20003d8c:	8d8f9294 85868889 87868685 99928c89     ................
20003d9c:	9fa1a09d 97999a9c 91909295 a39e9993     ................
20003dac:	9da1a4a5 8d8f9297 8e908e8d 8684868a     ................
20003dbc:	95938f8a 83898f94 84838281 8d8b8986     ................
20003dcc:	99938f8d b5ada6a0 afb5b9b9 9b9da3a9     ................
20003ddc:	94969799 90919395 8a8b8c8d 83848588     ................
20003dec:	918c8783 a2a09c96 93989da1 918c8c8e     ................
20003dfc:	a3a29e98 9d9e9fa1 999c9e9e 878a8f94     ................
20003e0c:	8a888686 9191918e 878b8e90 84838284     ................
20003e1c:	8c8c8a87 9b938e8c b8b3aca3 acb2b7b9     ................
20003e2c:	a4a5a6a8 91959da1 8b848e93 81859396     ................
20003e3c:	7b8a8b8a 8c817978 aa999391 999da5aa     ...{xy..........
20003e4c:	938d8d93 a39e9c99 a1adb1ac 888c8f96     ................
20003e5c:	7673777f aa9f9181 9da6acae 6e7a8692     .wsv..........zn
20003e6c:	71656165 aba39583 b8b4b0af acb8bdbc     eaeq............
20003e7c:	8e8e94a0 afa69c92 b3b3b3b2 9ea7acb0     ................
20003e8c:	7d858c94 6e6f7176 867c7470 aca69c91     ...}vqonpt|.....
20003e9c:	a4a8acae 979c9fa1 797f8790 93877d78     ...........yx}..
20003eac:	aaa7a49d 9ca3a7a9 86898e95 7e7e8184     ..............~~
20003ebc:	84838280 958e8885 9c9d9d9b a6a3a09d     ................
20003ecc:	a8abacaa 9f9ea0a4 aba8a5a1 adadadad     ................
20003edc:	9fa4a8ab 7d878f98 69696d75 877c736c     .......}umiils|.
20003eec:	aaa49c92 a7a9aaab 9ba0a2a5 82888f96     ................
20003efc:	8d878381 a4a09c95 a1a7a9a8 878d949b     ................
20003f0c:	73767b81 7f7b7773 938d8782 9f9e9c99     .{vssw{.........
20003f1c:	acaaa6a2 a3a8abac 9795979c aea9a39c     ................
20003f2c:	b5b6b5b2 9da5adb2 7a828b95 706e6f73     ...........zsonp
20003f3c:	837d7874 9e99928a adaaa5a2 a5aaacae     tx}.............
20003f4c:	8189939d 837d7a7c a49d948c aeb2b1ab     ....|z}.........
20003f5c:	88919ca5 7071767e 80797471 9b958d86     ....~vqpqty.....
20003f6c:	a2a09f9e a9abaaa6 9d9fa3a7 9697999b     ................
20003f7c:	a6a19d98 bbb7b1ab a5b0b8bc 767f8b99     ...............v
20003f8c:	6d6a6c6f 837c7671 9d99918a ada9a5a2     oljmqv|.........
20003f9c:	aaafb0af 878f99a3 7e7c7d81 9a918983     .........}|~....
20003fac:	b8b6aea4 8d9caab4 6c6f7680 7e76716d     .........volmqv~
20003fbc:	9a948d85 a5a4a39f a7a7a5a5 9c9fa3a6     ................
20003fcc:	97979899 a59f9a98 bdb7b1ab acb8c0c1     ................
20003fdc:	75818f9d 6c6a696d 857e7771 9c97928b     ...umijlqw~.....
20003fec:	a8a5a2a0 a6aaaaaa 8d959ca2 78797d84     .............}yx
20003ffc:	958b827b b8b4aba0 97a5afb6 686f7a88     {............zoh
2000400c:	776f6967 99918980 acaaa6a1 abaeafae     giow............
2000401c:	999ea2a6 908f9194 a69f9993 bcb8b2ac     ................
2000402c:	aeb9bebf 7d8793a0 6c6d7075 8279746f     .......}upmloty.
2000403c:	a09b948b a8a6a5a4 a7aaabaa 89919aa1     ................
2000404c:	78787b81 9389807a b6b0a79d 99a5b0b6     .{xxz...........
2000405c:	7077828c 726b696a a194877b aeb0afab     ..wpjikr{.......
2000406c:	a7a8aaab 999ea2a5 898a8d93 a198918c     ................
2000407c:	bdb7b1aa b3bbc0c0 828d9aa7 696b7179     ............yqki
2000408c:	8478706a a5a0998f a6a6a6a6 a7aaaaa8     jpx.............
2000409c:	87919ba2 7574777e 92888079 b6b0a79c     ....~wtuy.......
200040ac:	a0abb3b7 727d8994 6c66656a a0928376     ......}rjeflv...
200040bc:	b3b5b3ac a3a6aaaf 969ca1a2 8484878e     ................
200040cc:	a1968d87 bdb9b3ab b4bbbebf 88949fab     ................
200040dc:	676b737d 83776e68 a9a49b8f a5a8aaab     }skghnw.........
200040ec:	a3a4a4a3 89929a9f 7172767f 93877d75     .........vrqu}..
200040fc:	b7b1a99e a4adb4b7 73808d9a 716a676b     ...........skgjq
2000410c:	9f93877b b0b1aea9 a3a5a8ac 999fa1a3     {...............
2000411c:	83858b92 9b918984 c2bab1a6 bdc6cac8     ................
2000412c:	8693a2b0 696b717a 82776e6a aba39a8e     ....zqkijnw.....
2000413c:	a3a8acad a09f9ea0 8f989d9f 71757e87     .............~uq
2000414c:	8f827873 bbb3a99d a3aeb6bc 757e8a95     sx............~u
2000415c:	6c69686d 9d908275 afb1b0a9 a1a3a7ab     mhilu...........
2000416c:	999ea0a1 898b8f94 938b8888 c4baad9f     ................
2000417c:	bdc6cbca 8491a0af 696b7079 887c726b     ........ypkikr|.
2000418c:	aaa69f94 a3a4a7aa a5a5a4a3 8f969da2     ................
2000419c:	767b8188 887b7473 bbb3a697 a7b2babd     ..{vst{.........
200041ac:	717d8c9a 6b656468 9a8e8275 a9aaa8a3     ..}qhdeku.......
200041bc:	a2a2a3a7 9da2a4a3 8a8c9197 948e8b8a     ................
200041cc:	bcb3a89c c1c7c7c3 8798a9b7 6a6a6e78     ............xnjj
200041dc:	897e756e a9a59e94 a5a7a9a9 a7a7a6a4     nu~.............
200041ec:	8f98a0a5 73787e86 83797473 b6ab9e90     .....~xssty.....
200041fc:	acb7bcbc 72808f9e 6c656469 988e8276     .......ridelv...
2000420c:	a7a7a5a0 a7a5a5a6 a0a6a8a8 8a8c9199     ................
2000421c:	938f8c8a b2aaa199 b9bcbcb9 919fabb4     ................
2000422c:	6d6f7783 887e756f a3a09a91 a8a6a5a4     .womou~.........
2000423c:	aeafaeab 8e98a2aa 70757b84 8379726f     .........{upory.
2000424c:	b2a89c8f afb6b9b8 778594a3 6b66666c     ...........wlffk
2000425c:	93897f74 a2a29f9a aba8a5a3 a0a8acad     t...............
2000426c:	8a8b8f97 938e8b8a aca6a09a b6b7b5b1     ................
2000427c:	99a4adb3 6f75808c 847b726e 9d98938d     ......uonr{.....
2000428c:	aba7a4a1 b2b3b1ae 909ba5ad 71767c86     .............|vq
2000429c:	82797370 aca3988d afb4b5b3 7f8c9aa6     psy.............
200042ac:	6e6b6d74 8e867d74 9e9c9894 ada9a4a1     tmknt}..........
200042bc:	a6adb1b1 8f93979e 8e8c8c8d a59e9691     ................
200042cc:	b0afadaa 9da5abaf 787f8893 7d777474     ...........xttw}
200042dc:	9b958e85 aba6a29f b2b5b4b1 8f99a3ac     ................
200042ec:	71757c85 847b7370 aba3998f b2b6b5b1     .|uqps{.........
200042fc:	8896a3ac 6c6c717a 857f7871 9995918b     ....zqllqx......
2000430c:	aea8a29e afb3b5b2 9499a0a8 8b8b8b8f     ................
2000431c:	9a95918d aba8a39e a5aaacad 7d86919c     ...............}
2000432c:	7a767577 938d8680 b0a9a19a b9bbbab6     wuvz............
2000433c:	939fa9b2 71767e88 81777270 a49c948a     .....~vqprw.....
2000434c:	b0b1aeaa 8f9ca6ad 6e717883 7d79736f     .........xqnosy}
2000435c:	958e8882 ada9a39b b3b5b2b0 98a1a9af     ................
2000436c:	86868a90 938e8a87 a9a39e98 afb2b1ad     ................
2000437c:	838f9da8 74707278 9088817a b4ada49a     ....xrptz.......
2000438c:	b6babab9 98a0a9b0 68788195 80a57269     ..........xhir..
2000439c:	a676a674 bb8e8abc a38278a9 728ea8ae     t.v......x.....r
200043ac:	947b6d6b 97aab2aa 827c7d88 8893938b     km{......}|.....
200043bc:	4e546377 907a6454 dbccbaa6 fffaf3e8     wcTNTdz.........
200043cc:	d4e8f7fe 64809ebb 2f303a4b 5d4d3f35     .......dK:0/5?M]
200043dc:	91897c6d 94959695 8c8d9092 9f958f8c     m|..............
200043ec:	cec4b8ab d9d9d7d4 b1c2ced6 5a72899e     ..............rZ
200043fc:	161e2d42 3d2b1e16 8f7c6751 b7b2aa9e     B-....+=Qg|.....
2000440c:	adb4b9b9 8f959da5 9a938d8c bbb4aca3     ................
2000441c:	cbcbc7c2 92a5b7c4 46566a7f 4139373b     .........jVF;79A
2000442c:	7b6c5d4e a9a29789 adb0b0ad 8b959fa7     N]l{............
2000443c:	77777b82 a093867c c4bdb5ac bcc6cac8     .{ww|...........
2000444c:	667e95ab 2e343f50 473b322c 82746454     ..~fP?4.,2;GTdt.
2000445c:	a6a1998e a9adadab 8f959da4 98918c8c     ................
2000446c:	b0aca7a0 c1bdb8b4 a2b2bcc1 4f62788e     .............xbO
2000447c:	39353740 6c5c4e42 a99f907e a7acafae     @759BN\l~.......
2000448c:	858e97a0 7d7a7b7e 9e938982 bab4afa7     ....~{z}........
2000449c:	b3babdbe 72889baa 333d4b5d 463c3430     .......r]K=304<F
200044ac:	7b6d5f51 aaa39789 a4acafae 858b929b     Q_m{............
200044bc:	918c8784 aba6a199 bebbb6b0 9eaeb9be     ................
200044cc:	4f607389 423e3e44 6c5f534a a196897b     .s`OD>>BJS_l{...
200044dc:	aab0b0ab 808c97a1 75717278 9d93887d     ........xrqu}...
200044ec:	b4b0aba5 b2b8bab8 708598a7 3e444e5d     ...........p]ND>
200044fc:	48423e3c 77685b50 aca29586 a5adb1b1     <>BHP[hw........
2000450c:	7e848f9a 9289817d a6a4a19a b6b2ada9     ...~}...........
2000451c:	9daab4b7 5564778b 4947474d 6a5e554e     .....wdUMGGINU^j
2000452c:	9f938678 a9aeaea9 7d8995a0 706b6d74     x..........}tmkp
2000453c:	9b908479 b5afa9a3 b5bbbcb9 708598a8     y..............p
2000454c:	43474f5d 504a4643 796b6058 b2a69889     ]OGCCFJPX`ky....
2000455c:	9eacb5b7 7679818f 91897f79 a7a39e98     ......yvy.......
2000456c:	b5b3b0ac 98a6b0b4 5a677788 4e4c4d51     .........wgZQMLN
2000457c:	6c625952 a3948678 adb4b4ae 707e8fa0     RYblx.........~p
2000458c:	70686467 9e93887c bab6b0a7 abb4babc     gdhp|...........
2000459c:	7381909e 4a4f5864 544f4a49 7c6e635b     ...sdXOJIJOT[cn|
200045ac:	b2a99c8c 9aa8b2b5 76787f8b 90867e78     ..........xvx~..
200045bc:	aca7a198 b0b2b1af 929ea6ac 5d6a7885     .............xj]
200045cc:	524e4f54 71675e57 a79a8c7e a6afb3b0     TONRW^gq~.......
200045dc:	6d798898 6a646265 998b7e73 c0bcb4a8     ..ymebdjs~......
200045ec:	a5afb9bf 74818e9a 51555e68 5b565250     .......th^UQPRV[
200045fc:	84786c63 aba69e92 96a1a9ad 73767e8a     clx..........~vs
2000460c:	8e837a74 b2ada49a afb3b4b4 8d98a1a9     tz..............
2000461c:	5f6a7581 55525257 786b615a a89f9485     .uj_WRRUZakx....
2000462c:	a4acafad 6c7a8998 625c5c62 9a8a7a6c     ......zlb\\blz..
2000463c:	c0bdb5aa a7b0b9be 7886929d 51565e6a     ...........xj^VQ
2000464c:	5d56514f 8c807367 aaa69f97 95a0a7aa     OQV]gs..........
2000465c:	6d727b88 8c7d726d bab6ab9b a8b1b7ba     .{rmmr}.........
2000466c:	8a939aa1 606b7580 55535559 7e71655b     .....uk`YUSU[eq~
2000467c:	a8a1998c a7adafad 6a7c8e9d 5a54545c     ..........|j\TTZ
2000468c:	9a877565 bfbeb6aa a8afb6bc 7b8895a0     eu.............{
2000469c:	545a636e 625a5452 8e82766b aba7a199     ncZTRTZbkv......
200046ac:	909da6aa 65697381 8d7d7067 bfb7ac9d     .....siegp}.....
200046bc:	b0b7bec0 8c96a0a9 616b7682 5855565a     .........vkaZVUX
200046cc:	83766a5f aaa39a8f a5adafaf 67788a9a     _jv...........xg
200046dc:	544e5058 96847160 bdb9b2a7 abb3b9bc     XPNT`q..........
200046ec:	7c8995a0 555b646f 695f5754 8f877d73     ...|od[UTW_is}..
200046fc:	a8a49e97 8a99a3a9 62656d7a 8d7c6f66     ........zmebfo|.
2000470c:	c0b8ac9d bbc2c5c4 8e9aa6b1 5f697581     .............ui_
2000471c:	56525357 82756a5f aaa39a8f a9b1b3b1     WSRV_ju.........
2000472c:	6d7d8e9d 5653565f 8c7b6c5f b9b3aa9c     ..}m_VSV_l{.....
2000473c:	aeb5babb 82909ca6 5a5f6874 675e5857     ........th_ZWX^g
2000474c:	948a7e72 aaa8a39c 8d99a2a8 60656f7e     r~..........~oe`
2000475c:	82736862 beb3a493 bfc4c6c4 97a4aeb7     bhs.............
2000476c:	5f6b7988 53505156 8273655a b0a79c8f     .yk_VQPSZes.....
2000477c:	abb3b7b5 6c7b8c9d 5352575f 81716359     ......{l_WRSYcq.
2000478c:	bab0a393 b5bbbfbe 8695a2ad 585f6a77     ............wj_X
2000479c:	69605956 92897f74 afada69c 8895a1aa     VY`it...........
200047ac:	60666f7b 786a625e baab9b89 c6cacac4     {of`^bjx........
200047bc:	9eabb7c0 606f7f90 514e4f55 7d6f6258     ......o`UONQXbo}
200047cc:	b2a79a8c afb8bcba 6e7e8fa0 54555961     ..........~naYUT
200047dc:	7b6d6159 b5a99b8b bcc0c1bd 8898a6b3     Yam{............
200047ec:	5a616c79 675e5957 988b7e72 b2b1aba3     ylaZWY^gr~......
200047fc:	8c9ba6af 5e646f7d 6f645c5b b2a1907f     ....}od^[\do....
2000480c:	d0d0cabf a3b3c1cb 67748292 4b4d535c     ..........tg\SMK
2000481c:	7866564d b7ac9e8b b1babebd 6e7f92a3     MVfx...........n
2000482c:	51515560 77695e56 b3a69787 c0c5c3bd     `UQQV^iw........
2000483c:	8696a7b6 5d626a77 675f5b5a 9c8d7e72     ....wjb]Z[_gr~..
2000484c:	babbb6aa 8c9ba8b3 5e666f7d 675e5a5b     ........}of^[Z^g
2000485c:	ae9b8775 d6d4ccbf a7b8c6d1 68758596     u.............uh
2000486c:	4e50555d 78675a52 beb2a08b aebbc2c3     ]UPNRZgx........
2000487c:	6c7b8c9e 4d4f5660 70625750 b4a69582     ..{l`VOMPWbp....
2000488c:	bdc4c4bf 8695a5b2 61666e78 69615d5e     ........xnfa^]ai
2000489c:	a1928375 b9bbb7ae 8c99a6b1 616a737f     u............sja
200048ac:	645c595b ac988471 d8d5ccbe aabbc9d4     [Y\dq...........
200048bc:	6f7a8999 4f525963 7a675951 bcb2a28f     ..zocYROQYgz....
200048cc:	adb8bfc1 6d7d8d9f 4d515560 6b5b534b     ......}m`UQMKS[k
200048dc:	b6a49281 bfc2c4c1 8899a8b5 5f656e7b     ............{ne_
200048ec:	6c65605f 9e8f8276 b7b8b4ab 8799a8b1     _`elv...........
200048fc:	5f66707b 665d5959 af9a8676 e0dbd1c2     {pf_YY]fv.......
2000490c:	a2b7ccdb 67738191 4e53595f 7e66544c     ......sg_YSNLTf~
2000491c:	b9b6aa97 9fa9b0b7 707c8894 5d5d5f66     ..........|pf_]]
2000492c:	796e6661 b5a79787 b4bdc0be 7e8e9ca9     afny...........~
2000493c:	575a626f 73675e59 a3988c7f b5b5b2ab     obZWY^gs........
2000494c:	909da8b1 646b7683 67615f60 ae998472     .....vkd`_agr...
2000495c:	dbdad1c2 a7b9c9d5 606f8194 56515156     ..........o`VQQV
2000496c:	87796c60 b5aca194 aab3b8b8 6f7e8f9e     `ly...........~o
2000497c:	51515661 78695e56 b3a69787 b9bfc0bc     aVQQV^ix........
2000498c:	7a8c9dad 55565e6a 796d6159 a69b9084     ...zj^VUYamy....
2000499c:	b4b7b5af 8c98a2ac 6067727f 6f655f5e     .........rg`^_eo
200049ac:	b5a3907e d2d3cfc4 a1b3c2cc 5b68798d     ~............yh[
200049bc:	625a5555 8f83776c b5aea49a a5b0b6b8     UUZblw..........
200049cc:	717e8b98 4c505964 7a695a50 b7ad9e8d     ..~qdYPLPZiz....
200049dc:	b6bbbdbc 7a8d9eac 50515967 7f706358     .......zgYQPXcp.
200049ec:	aba2978c b0b4b3b1 8b96a0a9 5f68737f     .............sh_
200049fc:	6c615a5b bda8927d d0d5d4cc 97a7b8c6     [Zal}...........
20004a0c:	5e697787 625a5556 988b7c6e b7b3aca3     .wi^VUZbn|......
20004a1c:	a3aeb5b8 6b798896 4d4f5660 816c5b50     ......yk`VOMP[l.
20004a2c:	c2baaa96 abb6bfc3 7685929f 55575d68     ...........vh]WU
20004a3c:	81706158 b3aca192 acb2b6b7 828e9aa4     Xap.............
20004a4c:	585f6a76 6e5f5755 cbb59b82 cdd7dcd8     vj_XUW_n........
20004a5c:	91a1b0bf 5d677482 665d5858 a3958474     .....tg]XX]ft...
20004a6c:	b5b6b3ad 9da5acb2 6b778592 4f515760     ..........wk`WQO
20004a7c:	856d5c52 c8c1b19c a7b4bfc7 70818f9b     R\m............p
20004a8c:	56535a65 8c7b685b b8b5ab9c 9ea7afb5     eZSV[h{.........
20004a9c:	7a828c96 5a606871 78675d59 d1bea68d     ...zqh`ZY]gx....
20004aac:	d0dce0dd 8a9aadbf 5b636e7b 675d5757     ........{nc[WW]g
20004abc:	a7978675 b7bab9b2 949fa8b0 68737e8a     u............~sh
20004acc:	5252575e 8e786558 cdc8baa5 a0b2c0ca     ^WRRXex.........
20004adc:	6672808f 5553555c 8e7a695c bfbcb2a2     ..rf\USU\iz.....
20004aec:	a2acb6bd 76808b97 5d61676e 8171655e     .......vnga]^eq.
20004afc:	d0c0ab95 c3d1dada 828f9fb1 61686f78     ............xoha
20004b0c:	6e635e5d b1a2917e b9bebfba 8a98a5b1     ]^cn~...........
20004b1c:	5d67727e 56525256 97816e60 cecbbeac     ~rg]VRRV`n......
20004b2c:	9baebec9 646d7989 5e5b5b5e 93827265     .....ymd^[[^er..
20004b3c:	bcb9b1a4 97a4b0b8 6e757f8a 61606267     ..........ungb`a
20004b4c:	8c7c6f66 cfc2b09d beccd4d5 7c8a9cae     fo|............|
20004b5c:	63646970 7d726964 b5a8998a b7bfc1bd     pidcdir}........
20004b6c:	7c8b9aaa 595d656f 645d5958 9f8e7d6e     ...|oe]YXY]dn}..
20004b7c:	c8c7beb0 96a6b5c1 656c7785 6b646161     .........wleaadk
20004b8c:	9c8e8174 b7b7b1a8 8b9aa7b1 63686f7b     t...........{ohc
20004b9c:	6a666361 97897d72 cbc2b5a6 b5c3cccf     acfjr}..........
20004bac:	778493a5 6766696e 887d746c b8afa294     ...wnifglt}.....
20004bbc:	aab4bbbc 6f7d8b9b 595a5f65 7368605a     ......}oe_ZYZ`hs
20004bcc:	ab9e8f81 c0c2beb6 8e9eadb9 6469727f     .............rid
20004bdc:	776d6663 a69b8e82 abb0b1ae 7c8a97a3     cfmw...........|
20004bec:	5f60656f 776d6561 a2978d82 c2bdb6ad     oe`_aemw........
20004bfc:	aab6bec2 7984909d 706c6c71 95897e76     .......yqllpv~..
20004c0c:	b2b0aaa1 9ba5adb1 63707f8f 5c57565a     ..........pcZVW\
20004c1c:	877a6e64 aea59c92 b3b8b8b4 8a94a0ab     dnz.............
20004c2c:	70737880 847a7370 aaa39a8f 9fa7acad     .xsppsz.........
20004c3c:	707d8995 5c5a6065 83756760 aca5998e     ..}pe`Z\`gu.....
20004c4c:	b8b8b5b2 a2acb4b7 7c838c96 78757577     ...........|wuux
20004c5c:	9f93887e b3b4b1aa 8d9aa4ad 5f697481     ~............ti_
20004c6c:	5d575658 91837568 b1aca59c acb1b3b3     XVW]hu..........
20004c7c:	8a929ca5 7a7a7d83 928a827d aca9a39b     .....}zz}.......
20004c8c:	95a0a7ab 646f7b88 5956565c 87776a60     .....{od\VVY`jw.
20004c9c:	b8b0a597 b6babcbb 9ba4abb1 82858a91     ................
20004cac:	86828081 a29a938c acafaea9 85919ca6     ................
20004cbc:	5c636d78 655c5858 9c8e7f71 b5b4afa7     xmc\XX\eq.......
20004ccc:	a2a9aeb3 868d949c 807d7d80 98918a84     .........}}.....
20004cdc:	a9a8a49e 909ba3a7 5d697684 58525155     .........vi]UQRX
20004cec:	8e7e6f63 bab3a99d b1b8bcbd 929aa2aa     co~.............
20004cfc:	8686878b 928e8a88 a5a09a95 a6aaacaa     ................
20004d0c:	7f8a969f 5c626b74 685f5959 9c8f8275     ....tkb\YY_hu...
20004d1c:	b3b1ada6 9fa6acb1 868a9098 8a878484     ................
20004d2c:	9e99938f aaaaa8a4 8b97a1a7 5b65717e     ............~qe[
20004d3c:	58525154 90807062 b7b1a89d b0b7bbba     TQRXbp..........
20004d4c:	9299a1a8 8786888c 99938e8a a5a2a09d     ................
20004d5c:	a3a6a6a6 7b87939c 565c6570 665c5654     .......{pe\VTV\f
20004d6c:	9b8e8073 b3b2aea5 a1a8adb1 898d939a     s...............
20004d7c:	908c8a88 a09b9794 acaba8a4 8a97a2a8     ................
20004d8c:	59636f7c 524d4e52 8a79685b b8b1a79a     |ocYRNMR[hy.....
20004d9c:	b5babdbc 939ba4ad 8c8a8b8e 9a989490     ................
20004dac:	a4a19e9c 9fa5a7a6 7a848d97 565d6670     ...........zpf]V
20004dbc:	645b5553 96887b6f b9b5aea3 a3adb5b9     SU[do{..........
20004dcc:	898c9199 95918d8a a4a09d99 acacaaa7     ................
20004ddc:	8a96a1a9 5b646f7c 524f4f54 81726359     ....|od[TOORYcr.
20004dec:	b9afa191 b5bcc0bf 979ea6ab 92909094     ................
20004dfc:	a09d9b97 9f9fa1a1 9b9fa1a0 75808a94     ...............u
20004e0c:	595e676b 61595456 9283756a b5b0a89e     kg^YVTYaju......
20004e1c:	a6afb5b8 8d8f959e 97938f8d a4a09d9b     ................
20004e2c:	aeacaaa7 8e9ca6ac 5c667280 49494d53     .........rf\SMII
20004e3c:	7565584f b7a89785 c2c6c7c1 9da5afb9     OXeu............
20004e4c:	95939497 a0a09e98 a1a8aba4 9ca1a4ac     ................
20004e5c:	6e7a878c 4e556169 5b545253 86796d65     ..zniaUNSRT[emy.
20004e6c:	bbb5a898 b5bec1c0 949095a6 9482927d     ............}...
20004e7c:	92a7a682 cf9f8ed2 a9a18fb4 6e6e6b86     .............knn
20004e8c:	4d454a59 6d676058 a2938475 aea2a3a5     YJEMX`gmu.......
20004e9c:	c7c8c2b7 93a3b6c1 998c8588 bdbdb6a9     ................
20004eac:	9da5aeb7 858e9197 3a4e6778 3325222b     ........xgN:+"%3
20004ebc:	796b5b47 ada19488 c4c5c2b9 8c9cadbb     G[ky............
20004ecc:	a08d8282 e4ddcdb8 9fb8cfe0 74727988     .............yrt
20004edc:	8286837c 344b6276 35251e23 b18f6c4c     |...vbK4#.%5Ll..
20004eec:	ebebe1ce 9bb3cce0 84797985 dbc9b199     .........yy.....
20004efc:	b8cfdee2 7d818ea2 8788847f 445a6d7d     .......}....}mZD
20004f0c:	2e252731 7a66523e b3a79b8b bbc1c1bc     1'%.>Rfz........
20004f1c:	8e98a5b2 b39f918b dadfd7c8 8a9eb6cb     ................
20004f2c:	8e827c7e 8e9ca099 273e5b78 3824181a     ~|......x[>'..$8
20004f3c:	af927252 dcdfd8c8 9badc0d1 9689868d     Rr..............
20004f4c:	e3d6c1aa afc8dce6 807e8697 9d9d958a     ..........~.....
20004f5c:	45627d92 22191d2d 755e4833 b5a99a89     .}bE-.."3H^u....
20004f6c:	b2bbbebc 8e929ba7 c9b29f92 dfeaeade     ................
20004f7c:	7e92adc9 91807573 9ba9aaa1 29436383     ...~su.......cC)
20004f8c:	311e1519 a2856649 d7d6cdbb 9caec0cf     ...1If..........
20004f9c:	a0918b90 ebe0cdb5 afc9dfeb 7e7b8395     ..............{~
20004fac:	aba79b8b 51708ca2 1a182236 634d3927     ......pQ6"..'9Mc
20004fbc:	b4a28f7a b3bdc2c0 888c96a3 cfb7a18f     z...............
20004fcc:	e3f1f2e5 778dabca 8f7b6d6b acb6b2a3     .......wkm{.....
20004fdc:	31507495 2b1b151d 9a7b5d41 d8d5cab5     .tP1...+A]{.....
20004fec:	9fb1c3d2 a6948e93 f3ebd8be a9c7e0ef     ................
20004ffc:	736f798e ada49380 66859eac 161a2a45     .yos.......fE*..
2000500c:	5f46301f b4a49079 aebabfbd 80838e9e     .0F_y...........
2000501c:	d1b59b88 e5f4f5e9 728aaaca 8b766866     ...........rfhv.
2000502c:	b7bcb4a2 3f6186a4 2a1d1b26 93775a3f     ......a?&..*?Zw.
2000503c:	cfccc0ac 99a9bac8 a7958d8f f7edd8bf     ................
2000504c:	abcae4f4 6e6c768d b1a38f7c 7494abb4     .....vln|......t
2000505c:	131b3050 583e2919 afa18d73 a9b4b9b9     P0...)>Xs.......
2000506c:	80818999 d8ba9d89 e9f9fcf0 718aabcc     ...............q
2000507c:	88726464 bcc0b6a1 43668baa 291c1b28     ddr.......fC(..)
2000508c:	8f75583e c9c5b9a7 9fadbcc5 af9d9496     >Xu.............
2000509c:	f5eedcc6 a2c3dff1 68656e84 b5a58e78     .........nehx...
200050ac:	789ab1ba 151c3253 5c432d1c ab9c8a75     ...xS2...-C\u...
200050bc:	a8b3b7b5 86868e9b d4bba290 e0eff2e8     ................
200050cc:	6b84a4c5 8b72625f c1c6bca6 47698dad     ...k_br.......iG
200050dc:	3124222e 91795e45 c0bdb4a5 a2abb5bd     ."$1E^y.........
200050ec:	b6a69e9d f2eddeca 9abbd8ea 6d656b7e     ............~kem
200050fc:	baac9680 7595aebb 1b203351 614a3423     .......uQ3 .#4Ja
2000510c:	a5998b78 a5acadab 8f8e939c cfbaa697     x...............
2000511c:	dae9ebe1 6981a0c0 8971605d bfc3baa4     .......i]`q.....
2000512c:	45678cab 3727222c 957f654d bfbdb5a7     ..gE,"'7Me......
2000513c:	a3abb5bc bcaca29f eeece0cf 96b4d0e4     ................
2000514c:	6b63687b b8ac977f 6e90aab8 2322314b     {hck.......nK1"#
2000515c:	705a4430 a1988e81 a7aaaba8 9393979f     0DZp............
2000516c:	cebca99b cfe0e4dd 637897b6 876f5d59     ..........xcY]o.
2000517c:	b9bfb6a1 446386a4 4332272d 9e8a755d     ......cD-'2C]u..
2000518c:	bdb9b3ac a3abb4bc bcaea4a0 e9e7dccd     ................
2000519c:	93b2ccdf 6c636778 baac967f 7093aebb     ....xgcl.......p
200051ac:	2423324d 74604832 9c968f85 a7a9a7a2     M2#$2H`t........
200051bc:	97989ca3 cfbcaa9e cddfe4de 617693b2     ..............va
200051cc:	866d5d58 b1b8b19e 405c7e9c 50392d2f     X]m......~\@/-9P
200051dc:	9f93816a bab4aea7 b2b7bbbc c1b5afaf     j...............
200051ec:	e7e7ddcf 8baac7dd 645b5f70 aea28d77     ........p_[dw...
200051fc:	69879fad 312b344b 87755c43 9d999792     ...iK4+1C\u.....
2000520c:	adaca7a2 9da0a4aa c3b4a79f c1d2d6cf     ................
2000521c:	5a6f8daa 7e655451 aeb2a996 4660809c     ..oZQTe~......`F
2000522c:	5a423436 a99e8d75 b9b7b3af b3b9bbbc     64BZu...........
2000523c:	b7afacae dbd8cec2 90abc3d4 645e6577     ............we^d
2000524c:	a69b8873 668299a6 3a33394c 9380674d     s......fL93:Mg..
2000525c:	a0a0a19d adaaa6a2 9fa3a8ac b8ada49f     ................
2000526c:	bbc7c9c3 5e738ea7 77615453 a6aaa28f     ......s^STaw....
2000527c:	475f7a95 6a4d3c3b bab2a087 bebcbbbb     .z_G;<Mj........
2000528c:	b6bcbfc0 aea9aaae cfcbc2b7 90a8bcca     ................
2000529c:	5c5b6578 9e907c69 6a8397a0 483e4151     xe[\i|.....jQA>H
200052ac:	a391795d a4a8abab b0ada9a5 9da4aaaf     ]y..............
200052bc:	a49c9898 b3b8b6af 61778fa5 6e5a5053     ..........waSPZn
200052cc:	a5a69b86 4e647e96 72574643 c5bcaa91     .....~dNCFWr....
200052dc:	c0c2c5c7 b3b9bcbe a4a3a6ac c1bab1a9     ................
200052ec:	94abbac2 585a677c 9b8a7562 758b9ba1     ....|gZXbu.....u
200052fc:	4f474d5e af9c8063 acb3bab9 b0adaaa9     ^MGOc...........
2000530c:	99a2abb0 928b8a90 adafa89d 5e758ea2     ..............u^
2000531c:	67534b4f a5a4957f 576c8499 7d61514d     OKSg......lWMQa}
2000532c:	d2cab89d c2c6cbd1 adb5babd 93939ca3     ................
2000533c:	b7ada098 91a7b2b9 58586578 9a897564     ........xeXXdu..
2000534c:	7b8f9ea2 5a535766 b7a3886e b2bac1c1     ...{fWSZn.......
2000535c:	b0aeacad 8f9ca8af 867f7e84 a8a79f92     .........~......
2000536c:	5d748c9e 5f4e484d a09a8b75 68798c9b     ..t]MHN_u.....yh
2000537c:	8f766661 d9d3c4ab c1c5ccd4 acb6bcbe     afv.............
2000538c:	898d95a1 a39a908a 8b9ca6a8 5f5f6979     ............yi__
2000539c:	98897767 8696a0a1 6f676975 c4b49b83     gw......uigo....
200053ac:	abb7c2c9 a6a2a5a1 989aa3a8 6c76717e     ............~qvl
200053bc:	948f9586 5a68899c 6a5f5959 a49a8b79     ......hZYY_jy...
200053cc:	8295a2a8 8a766e72 cecabca4 a4abb7c5     ....rnv.........
200053dc:	a8a8a5a2 989a9fa5 aea9a09a 93a2afb2     ................
200053ec:	5f626e80 88796b62 828c9290 726a6c75     .nb_bky.....uljr
200053fc:	baad9883 a5b0babf b0aaa3a1 97a4aeb2     ................
2000540c:	827e818a 9b9b948a 596e8393 53464148     ..~.......nYHAFS
2000541c:	988d7c67 808a959a a48f817c d3d4ccba     g|......|.......
2000542c:	adb2bdc9 a6aaaaab 8c90979f 9f99938d     ................
2000543c:	8696a0a3 5a5c6675 90817062 909a9f9b     ....uf\Zbp......
2000544c:	7e777a84 c1b3a08c a4b1bdc4 a5a09c9c     .zw~............
2000545c:	8d99a2a6 7d797b82 9b9a9186 60738795     .....{y}......s`
2000546c:	5e504c52 a0958471 838d98a0 a38e817e     RLP^q.......~...
2000547c:	d1d4ccba a8adb7c6 a7aaaaa8 858d969f     ................
2000548c:	988f8a86 8e989c9c 696b727f 9186786d     .........rkimx..
2000549c:	88929999 857a787e c5bdab97 98a5b5c2     ....~xz.........
200054ac:	a69e9592 8f9da7aa 76727781 98958b7f     .........wrv....
200054bc:	65778894 67585358 a9a08f7b 86919ea7     ..weXSXg{.......
200054cc:	a7928581 c9cfcbbc a3a5aebd a4a7a7a4     ................
200054dc:	8289929c 948b8481 8c969b99 6969717e     ............~qii
200054ec:	9c8f8071 8f9ba3a5 887e7c82 c4bdad9a     q........|~.....
200054fc:	8d9badbd a79a8d87 8f9faaad 76717480     .............tqv
2000550c:	9c978c80 66788b97 6d5c5559 ada69782     ......xfYU\m....
2000551c:	88939faa ac978984 c4cdccbf 9799a3b4     ................
2000552c:	a5a5a19b 848b959f 938b8582 89949998     ................
2000553c:	6c69707c a3968676 929fa9aa 8e828086     |pilv...........
2000554c:	bfbeb19f 8390a3b5 a5968881 91a0aaac     ................
2000555c:	7b777982 99999085 67758795 7a685c5c     .yw{......ug\\hz
2000556c:	acaa9e8c 888f9ba5 b19f9089 b4c2c7c0     ................
2000557c:	938f94a2 acaea89e 858b97a3 928c8784     ................
2000558c:	808b9395 6f696b75 aa9e8d7c 92a0abae     ....ukio|.......
2000559c:	94888389 babdb3a3 7a869aad a596857a     ...........zz...
200055ac:	96a4adae 837f8189 9296948c 626a7988     .............yjb
200055bc:	8f7b6b62 acafab9f 888d97a3 b1a2948a     bk{.............
200055cc:	a4b4bebc 92898993 b3b4ada0 8f97a1ac     ................
200055dc:	8f8e8b8b 7680898e 7a6f6a6d aca59989     .......vmjoz....
200055ec:	909aa5ac 958a8587 aeb4afa3 777d8c9f     ..............}w
200055fc:	ab9e8d7e 97a2acb0 8f8c8b8f 858f9392     ~...............
2000560c:	61636b78 97867568 a7adaca4 8d8f959e     xkcahu..........
2000561c:	b1a69a91 95a4b1b5 9b8e878a b3b6b3aa     ................
2000562c:	979ba3ab 8c919394 68717c86 81726864     .........|qhdhr.
2000563c:	b0ada293 8e97a1ab 9e938c89 a1adb0a9     ................
2000564c:	79798292 aaa19283 9ba2a8ac 98979797     ..yy............
2000565c:	7a879197 615e636d a3927f6d a8afb2ae     ...zmc^am.......
2000566c:	9494989f aea8a098 8995a3ad 9d908683     ................
2000567c:	abb0afa9 a1a0a2a6 8f999ea1 646a7582     .............ujd
2000568c:	88776b65 adaca598 90959ea7 a59b928f     ekw.............
2000569c:	95a4abab 7b767985 a4a09788 97999ca1     .....yv{........
200056ac:	a4a29e99 7886949f 6a63636b a49a8977     .......xkccjw...
200056bc:	a5aaaead 9a97989d a9a8a39e 7c8694a2     ...............|
200056cc:	9f90827a a6aaadaa aaa7a4a4 95a2aaac     z...............
200056dc:	62697685 88776961 a7a8a397 92959aa2     .vibaiw.........
200056ec:	a7a09994 8c9ba6aa 8078777f 9d9d978c     .........wx.....
200056fc:	95939599 a8a7a29b 7c8a98a2 716a6a71     ...........|qjjq
2000570c:	a39a8d7e a0a5a7a7 9f9d9b9d a3a5a6a2     ~...............
2000571c:	7a7f8a99 9d92857d 9c9ea1a1 afa8a19d     ...z}...........
2000572c:	9faab1b2 71778291 897f7670 979a9792     ......wqpv......
2000573c:	92909193 a6a29c96 8d9aa4a8 887f7c81     .............|..
2000574c:	92979791 8e88888c aaa8a197 88939ea6     ................
2000575c:	837e7c80 98969088 9897999b a19d9b9a     .|~.............
2000576c:	a5aaa9a6 80838e9a 98948d84 8a8b9196     ................
2000577c:	aea4998f a2acb2b3 80848c97 938d8782     ................
2000578c:	90949696 8d8b8b8d a5a09992 8f9aa4a7     ................
2000579c:	8c868286 858d9291 847c797d a9a59b8f     ........}y|.....
200057ac:	969da4a8 938f8e90 9d9e9c98 8f909499     ................
200057bc:	9b979290 a2a6a6a1 83858d99 96958f88     ................
200057cc:	7f818890 a99d9084 adb4b5b2 90949ba5     ................
200057dc:	99969390 858d9498 84807f80 a19a928a     ................
200057ec:	929ba2a4 948e8a8c 828c9498 7a747378     ............xstz
200057fc:	a59e9386 a1a5a8a8 9d9a999c 9ea2a3a1     ................
2000580c:	87898f97 978f8a87 a3a8a69f 8788909a     ................
2000581c:	9798938b 797d8690 a294877d b5b8b6af     ......}y}.......
2000582c:	9a9ea6ae 9a9b9a99 81899197 79757579     ............yuuy
2000583c:	a1978c81 96a0a7a7 9a95908f 818f999d     ................
2000584c:	76707176 a49a8f82 a6aaacaa a19e9fa1     vqpv............
2000585c:	9ea4a5a4 81858d96 948b8481 a6a7a49c     ................
2000586c:	8e8f969f 999d9993 72788490 988c7e75     ..........xru~..
2000587c:	b7b6b0a5 9fa6aeb4 a09e9c9b 818d979e     ................
2000588c:	75717277 a0968a7e 98a0a6a6 9c979393     wrqu~...........
2000589c:	7d8c989e 6f69696f a195887a aeb0afaa     ...}oiioz.......
200058ac:	a5a5a6aa a1a6a7a6 8388919a 8f888381     ................
200058bc:	a5a6a198 8e9097a0 9a9c9892 6e758290     ..............un
200058cc:	9585786e bdb9b2a6 a8afb5bb 9fa0a0a3     nx..............
200058dc:	808c959c 726e7077 9c8f8477 9aa1a5a5     ....wpnrw.......
200058ec:	9a928f94 86939c9f 6d696d78 a4958677     ........xmimw...
200058fc:	b4b7b5af a2a5aab0 9a9ea0a0 82878d95     ................
2000590c:	8c85807f a5a59e95 93989fa4 9f9d9691     ................
2000591c:	737d8997 8d7e7771 bbb4ac9d a5afb9bc     ..}sqw~.........
2000592c:	9a989a9d 81939496 6a707381 9f878976     .........spjv...
2000593c:	98a19da7 978f9091 8e9aa6a2 6b6f7a83     .............zok
2000594c:	95887a6f 9ea1a19e 9998999c a6a5a19c     oz..............
2000595c:	93999fa4 8e8c8c8e aca79e94 919aa5ac     ................
2000596c:	93908c8c 7e868e93 96877d7a ccc4b7a7     .......~z}......
2000597c:	b6c0c8cc 9fa2a7ad 808c959b 5e626774     ............tgb^
2000598c:	88796e62 9ca1a097 80808793 91938e86     bny.............
2000599c:	6c717c88 8a7e736d 9f9e9b94 97989b9e     .|qlms~.........
200059ac:	98999796 92949697 a19a9491 bab8b1a9     ................
200059bc:	96a3b0b8 9b908c8e 95a0a5a3 958d8a8c     ................
200059cc:	beb9aea1 afb6bcbf 999ea3a8 7e878e95     ...............~
200059dc:	63646a74 877c7168 91979791 696c7887     tjdchq|......xli
200059ec:	928a7c6f 777f8a92 887f7874 9a989690     o|.....wtx......
200059fc:	9597999a 8f8f8f92 95939290 aaa39c97     ................
20005a0c:	b7b8b6b1 94a0acb4 95898589 aeb2afa4     ................
20005a1c:	9e9a9ca5 b7b6b1a7 a2a7aeb4 93989a9d     ................
20005a2c:	7d848a8d 716f7378 8d857c77 89919390     ...}xsoqw|......
20005a3c:	636a747f 8c7d6d64 86909696 8a827e7f     .tjcdm}......~..
20005a4c:	8e90918f 89898a8c 86868688 98928d89     ................
20005a5c:	b9b2aaa1 b6bdc0be 8d949eab 8b848285     ................
20005a6c:	beb8ac9b b0b3babf b2b5b4b1 9398a1aa     ................
20005a7c:	8b8d8e8f 80838588 87838180 9695918c     ................
20005a8c:	77818c93 5d61676e 8474665f a0a2a096     ...wnga]_ft.....
20005a9c:	90929397 838a8e8f 7d7b7b7d 7e7f7e7e     ........}{{}~~.~
20005aac:	9d928881 c7c1b7aa b2bec6c8 818994a3     ................
20005abc:	87817e7f c5b5a292 c4ccd0ce a8afb5bb     .~..............
20005acc:	878c959f 87858483 86848487 9b958e89     ................
20005adc:	9aa0a19f 67768592 5955565c 8574685f     ......vg\VUY_ht.
20005aec:	b4b2a898 939ba5ae 7880878d 6b6a6c71     ...........xqljk
20005afc:	7c77736e a2958a82 d2cbc0b1 adbfccd3     nsw|............
20005b0c:	73798699 8f847b74 cdbbaa9b cfdadeda     ..yst{..........
20005b1c:	a0a9b4c1 7a838c96 817a7676 908d8a86     .......zvvz.....
20005b2c:	a9a29b95 a3acafad 5a6d8194 584e4a4d     ..........mZMJNX
20005b3c:	8c7f7265 bab4a89c 93a0acb7 6f767e88     er...........~vo
20005b4c:	605d5f66 847a7067 aca0958c d2cdc5b9     f_]`gpz.........
20005b5c:	a1b5c6cf 6a6e7a8d 9888796e cfc2b4a7     .....znjny......
20005b6c:	cdd8dcd8 9ca7b2bf 727b8692 8378706e     ..........{rnpx.
20005b7c:	9f9b968e b1aca8a3 9da9b0b2 5163788c     .............xcQ
20005b8c:	61504747 9e938574 b8b6b0a7 8f9ca9b3     GGPat...........
20005b9c:	69717983 59565960 897c6e62 b2a99f94     .yqi`YVYbn|.....
20005bac:	cbcbc5bd 99abbac5 6b6c7686 a6948273     .........vlks...
20005bbc:	c9c2bcb3 c7cfd0ce 96a2aebb 6e76808b     ..............vn
20005bcc:	877a706c aaa69f94 b5b4b1ad 97a5afb4     lpz.............
20005bdc:	52607185 66564b49 a2998c7a adadaba6     .q`RIKVfz.......
20005bec:	8b96a1aa 68707880 5d595c62 91837568     .....xphb\Y]hu..
20005bfc:	b6afa89d bcbfbeba 8d9ba9b4 706f747f     .............top
20005c0c:	ae9c8979 c3c2c0ba bec3c4c4 9aa3abb5     y...............
20005c1c:	79808a92 8a7e7775 aca7a096 afb0b0af     ...yuw~.........
20005c2c:	8b98a3aa 58606d7c 74645855 a6a29887     ....|m`XUXdt....
20005c3c:	a9aaa9a8 88929da5 6e75797f 625f6268     .........yunhb_b
20005c4c:	9486786b afaba49d adb1b2b1 8b949ea6     kx..............
20005c5c:	7c7b7b82 afa19588 bbbabbb9 b5b9bcbc     .{{|............
20005c6c:	979da4ad 80858c91 93877f7d acaba79e     ........}.......
20005c7c:	a9acacac 88939ca4 6369717c 7b6e6562     ........|qicben{
20005c8c:	9e9a9389 a3a3a2a1 87919a9f 70757a81     .............zup
20005c9c:	7069676b 968e8479 aba7a39d a3a9acac     kgipy...........
20005cac:	868d959c 847e7c7f b0a79a8e b8b7b8b6     .....|~.........
20005cbc:	acb4b9b9 92959ba3 85898c8f 9d928985     ................
20005ccc:	b3b2afa7 a8aeb1b2 7d8995a0 64666b73     ...........}skfd
20005cdc:	867a6f67 99999791 9f9f9c99 8088929b     goz.............
20005cec:	76787a7b 77737173 9c938b81 aeaaa6a2     {zxvsqsw........
20005cfc:	a0a7acae 7f868e97 867f7b7b aca69c90     ........{{......
20005d0c:	b3b0afaf a7b1b6b6 9091969d 8b8a8c8e     ................
20005d1c:	a9a0978f b5b5b4b0 a5acb1b3 7b85909c     ...............{
20005d2c:	66666a71 867d736b 9291918d a0a19d97     qjffks}.........
20005d3c:	8188919b 787a7b7c 867e7977 a09b968e     ....|{zxwy~.....
20005d4c:	aba9a6a3 98a1a7ab 7a7f868f 837b7777     ...........zww{.
20005d5c:	a9a2998e bab6b1ad a3aeb6bb 8e90949a     ................
20005d6c:	938f8d8d afaaa29a b5b6b5b4 9da7aeb2     ................
20005d7c:	757e8893 6967696d 847d756d 958f8b88     ..~umigimu}.....
20005d8c:	a4a7a49c 858b939c 78797b7f 8b837e79     .........{yxy~..
20005d9c:	9f9b9591 a7aaa9a4 91979fa4 7a7f848b     ...............z
20005dac:	88807b78 a39b958e bdbcb4ab 9ba4afb8     x{..............
20005dbc:	888a8e94 99908a87 b6b2aba3 bcbcbbb9     ................
20005dcc:	9faab3b9 727b8692 6865666b 77736f6c     ......{rkfehlosw
20005ddc:	9b90857d 9fa4a6a3 858d949a 7d7a7b7f     }............{z}
20005dec:	98928b83 a8a4a09d aaadaeac 8a939ca4     ................
20005dfc:	70727880 817c7671 a2968c87 bcbeb8af     .xrpqv|.........
20005e0c:	9ea6aeb6 8b8a9197 a69d918d b6b5aeab     ................
20005e1c:	bcbcbbb7 9ba7b1b9 6b74818e 69666466     ..........tkfdfi
20005e2c:	7772706d 9e968a7f 9c9fa1a1 838a9197     mprw............
20005e3c:	857f7d7e 9794908c aba6a19c adb0b2b0     ~}..............
20005e4c:	86939da6 6f6f747c 7e7b7672 a2978b83     ....|toorv{~....
20005e5c:	b2b3b2ac a0a7acb0 94919398 a4a29f99     ................
20005e6c:	aeaba6a5 c4c4beb6 9facb1be 636c8089     ..............lc
20005e7c:	6f696c6a 77757978 8f8c867d 91919190     jlioxyuw}.......
20005e8c:	90909090 928e8f8f 97989194 b4b3a2a1     ................
20005e9c:	acabc2b3 7b8298ae 645f6473 79706c69     .......{sd_dilpy
20005eac:	a7a09588 acaaaaaa 9da2a8ad ada7a09d     ................
20005ebc:	aab2b3b2 a7a1a2a5 b9b7b3ae 909eacb5     ................
20005ecc:	686b7481 6f6f6c69 7c77726f 8f8c8883     .tkhilooorw|....
20005edc:	98979592 96979798 90949696 938e8c8d     ................
20005eec:	b7aea59b a8b4baba 77818e9b 7e7a7675     ...........wuvz~
20005efc:	83818080 88858383 a29a928c aeaeaca8     ................
20005f0c:	a7aaacad 9f9fa1a5 bab2aaa3 bcc3c4c1     ................
20005f1c:	8694a3b1 7272757b 73747575 79757372     ....{urruutsrsuy
20005f2c:	85807e7b 94928f8a 9b989594 9a9d9e9e     {~..............
20005f3c:	9a969697 b1ada69f 9ba6aeb2 81828891     ................
20005f4c:	88878482 81838588 7d7c7d7e 9d958c83     ........~}|}....
20005f5c:	aca9a5a2 aeb1afae a9a7aaac bab4adac     ................
20005f6c:	b5bdc0bd 7d8898a8 7f7b7878 7d808182     .......}xx{....}
20005f7c:	7275787a 7a737070 908c8780 9b989593     zxurppsz........
20005f8c:	9c9d9e9e a5a09d9c b5b4b0aa 95a1abb2     ................
20005f9c:	7e7b7f87 95928c85 82888f93 7774767b     ..{~........{vtw
20005fac:	968d847c a9a5a19c acacacab afadacac     |...............
20005fbc:	c0bbb6b3 b2bcc1c1 768192a3 81777172     ...........vrqw.
20005fcc:	83888986 6c70757d 7b726b69 928f8a84     ....}uplikr{....
20005fdc:	95949493 99979595 aaa49f9c b7b6b4af     ................
20005fec:	92a0acb4 79777b85 9b968c81 8890979b     .....{wy........
20005ffc:	7573787f 958d837b a1a09c9a a9a7a4a2     .xsu{...........
2000600c:	b5b2b1ae c4c1bbb8 b2bfc5c6 717e90a2     ..............~q
2000601c:	7c726a6a 8b8d8c86 6f757d86 7c746e6c     jjr|.....}uolnt|
2000602c:	8d8d8a84 8b8a8a8b 9995918e aea8a29d     ................
2000603c:	bdbebab5 90a0aeb6 76737883 9c95897e     .........xsv~...
2000604c:	8a939a9e 79777a81 97918880 97989999     .....zwy........
2000605c:	a39e9a97 bbb6b1aa cecac5bf b3c2ccd0     ................
2000606c:	6c798ca0 796e6765 8c8e8b85 73797f85     ..ylegny......ys
2000607c:	80797370 888a8a86 84828285 9e979089     psy.............
2000608c:	b3ada8a3 bfc0beb9 8f9faeb9 716f747e     ............~toq
2000609c:	9a928579 8d939a9c 83808186 98948f88     y...............
200060ac:	8e919598 a39b948e bebab4ac cbc8c4c1     ................
200060bc:	b2c0c9cc 6d7a8ca0 7b706867 898e8d87     ......zmghp{....
200060cc:	76787c82 86817b77 858a8d8b 7e7b7c80     .|xvw{.......|{~
200060dc:	9b948c84 b2aca7a1 c1c1bfb9 94a4b1bb     ................
200060ec:	72717884 9a918479 8c939a9d 87848386     .xqry...........
200060fc:	9695918c 868a8e93 9f948d87 c2bcb3aa     ................
2000610c:	d1cfcbc6 b6c4cdd1 717d90a4 7970686a     ..........}qjhpy
2000611c:	828a8980 7270737a 8c867f78 848b8e8e     ....zsprx.......
2000612c:	7977797e 9b928980 b9b1aaa3 c2c5c4bf     ~ywy............
2000613c:	8f9faeba 75727781 9892887d 858d9599     .....wru}.......
2000614c:	8a848080 9d9c9892 8a8f959a 98908987     ................
2000615c:	c2b8ada2 d8d8d3cc acbccad3 767f8c9b     ...............v
2000616c:	7c777473 7c818281 6f6c6f76 908a8177     stw|...|volow...
2000617c:	858c9293 7775777e 998e857d beb5aca3     ....~wuw}.......
2000618c:	bdc4c6c4 8997a4b2 817a7b81 9b958e87     .........{z.....
2000619c:	878e959a 87807e81 9b9b9790 8a8e9498     .....~..........
200061ac:	978f8b89 c0b6aba0 d9d9d5cc a6b7c7d3     ................
200061bc:	7b808895 85827e7c 787e8485 6b696c72     ...{|~....~xrlik
200061cc:	8881786f 888c8f8d 7e7e8184 938b8480     ox........~~....
200061dc:	c0b4a89d c2cbcdc9 8895a5b5 857f7d80     .............}..
200061ec:	9495928c 80858b91 817b7a7c 9b989189     ........|z{.....
200061fc:	9798999a 9e9c9a98 b9aea5a1 e1ded4c7     ................
2000620c:	a7bccedb 74798393 87827c75 757f8689     ......ytu|.....u
2000621c:	6562656c 8a81766c 90929290 908f8f8f     lebelv..........
2000622c:	8c8b8c8e b5a79990 c3c9c9c2 8293a5b4     ................
2000623c:	8178777a 9d9b958c 7f88929a 7e787679     zwx.........yvx~
2000624c:	9e978f86 a0a1a2a1 a2a2a2a1 ada5a1a2     ................
2000625c:	d6cfc3b7 b4c6d2d8 727a899d 89817872     ..........zrrx..
2000626c:	7c868c8d 60616771 837a6f65 9595918b     ...|qga`eoz.....
2000627c:	99979595 8d919698 a5988f8b c8c8c1b4     ................
2000628c:	8fa2b4c1 7571747f 9c958b7f 838e979c     .....tqu........
2000629c:	7a747479 9c968d83 aaa8a5a1 a9acacac     yttz............
200062ac:	a5a1a1a5 cdc4b9ae b6c4cdd0 778292a4     ...............w
200062bc:	7d767171 80868784 63656d76 857b7067     qqv}....vmecgp{.
200062cc:	9594928e 9a9a9795 9194989a a197908f     ................
200062dc:	c1beb8ad 93a6b3bc 706e7684 998e8278     .........vnpx...
200062ec:	8791999d 7c77787d a09a9186 afaca8a3     ....}xw|........
200062fc:	acafb1b1 a8a6a6a8 c3bdb5ad b2bdc3c6     ................
2000630c:	768292a2 78706d6e 82868480 6b6e767c     ...vnmpx....|vnk
2000631c:	8a7e756d 9a9a9893 9a9b9c9b 90939699     mu~.............
2000632c:	9e969290 b6b5afa6 8f9eabb4 6e6d7681     .............vmn
2000633c:	968b7e74 979d9f9d 8886898f a49f968e     t~..............
2000634c:	acaaa9a6 a4a9aaac a2a1a0a0 bcb6afa7     ................
2000635c:	afb9bebe 7a8795a2 736f6e72 8887827b     .......zrnos{...
2000636c:	787b8186 88817a77 9594948f 96969594     ..{xwz..........
2000637c:	93959796 9c979492 b0afa9a3 919da7ad     ................
2000638c:	71737a85 8f847a73 999d9d98 8f8d9094     .zsqsz..........
2000639c:	a6a19b94 a7a7a8a8 a4a5a6a7 a5a3a3a4     ................
200063ac:	b7b2aca8 abb4b9ba 7e88939f 75727276     ...........~vrru
200063bc:	8784807a 7f818486 8d87817f 90929391     z...............
200063cc:	92918f8d 9a989796 9e98969e a9aeaa9e     ................
200063dc:	8a99a7a7 797b7f83 89807878 a0a19c94     ......{yxx......
200063ec:	8a94939b 92aaa682 9cd1ac86 bf9e7566     ............fu..
200063fc:	9198b6cb 7d869b9c d9d5b893 6f96b3ca     .......}.......o
2000640c:	02001741 926a411b b9cac8b3 3d5a7b9c     A....Aj......{Z=
2000641c:	32242129 a689694a bfc8c6ba 758499ae     )!$2Ji.........u
2000642c:	716c6a6d 72757675 6d6b6c6f 85807972     mjlquvurolkmry..
2000643c:	83868887 7e7d7d80 938e8882 a29d9a97     .....}}~........
2000644c:	b2b0ada8 a5aaaeb1 9a9a9b9f 8890979a     ................
2000645c:	7173777f 817c7673 81858685 7072777c     .wsqsv|.....|wrp
2000646c:	7d787471 86858481 9a938c88 a1a4a4a0     qtx}............
2000647c:	8e91989e 92918f8d 7a82888f 75717072     ...........zrpqu
2000648c:	928c847c 8c919494 87858789 9d98928d     |...............
2000649c:	aba6a29e b7b8b4af a4abb0b4 99999a9e     ................
200064ac:	8c93989a 70747b83 807a7470 81858684     .....{tpptz.....
200064bc:	7172767c 857f7873 8a8a8a89 a09a928c     |vrqsx..........
200064cc:	9fa3a5a4 8a8d929a 8f8f8c89 7580898d     ...............u
200064dc:	716a696d 9a92877c 90979c9d 8986878a     mijq|...........
200064ec:	a29e9890 aca9a7a6 b0b2b2af 9ba0a6ac     ................
200064fc:	9a989799 8c949899 6d707981 887e766f     .........ypmov~.
2000650c:	888f8f8f 7073777f 87827b73 8a8a8a8a     .....wsps{......
2000651c:	9d97918c 9ba1a3a2 8a8c8f95 91908e8b     ................
2000652c:	757f888e 756c696d 9f998f81 8b9299a0     ...umilu........
2000653c:	8a838185 a3a09a90 aaaaa9a6 b0b1b0ad     ................
2000654c:	99a0a7ad 97959495 8a929899 6e707680     .............vpn
2000655c:	8e857a71 8b929695 73757a81 837f7975     qz.......zusuy..
2000656c:	89878786 9f99928d 999fa3a3 8c8b8e93     ................
2000657c:	9394928f 7079838c 7c706969 a5a2988b     ......ypiip|....
2000658c:	87909aa2 88827e7f a09d9790 a5a3a2a2     .....~..........
2000659c:	aeafada9 9da1a7ab 9e9d9c9c 838d969b     ................
200065ac:	716f727a 978e8378 8690989b 6f6f737b     zroqx.......{soo
200065bc:	84807a74 8b8a8987 9f99928d 9ea2a4a4     tz..............
200065cc:	94949599 878e9394 6c6f757f 8b7e736d     .........uolms~.
200065dc:	9a9e9d95 82868e95 948c8582 9fa09d99     ................
200065ec:	a09c9c9e afaeaba6 a5a9acae 949a9fa2     ................
200065fc:	777d868d 80797574 99979289 7e868f96     ..}wtuy........~
2000660c:	7a767578 8988847f 80818387 9d948b84     xuvz............
2000661c:	a6a8a7a4 969ca0a3 78808890 746f6f72     ...........xroot
2000662c:	958e857c 91969a99 8685878b 9a948e8a     |...............
2000663c:	94989b9c 9c959292 b6b4afa6 a6adb2b5     ................
2000664c:	899299a1 76767980 8a847e78 92959591     .....yvvx~......
2000665c:	84868a8f 87858383 82878989 7574767c     ............|vtu
2000666c:	a094877c aaadada9 9299a0a6 777c838b     |.............|w
2000667c:	7d797574 928d8983 92939493 93919191     tuy}............
2000668c:	99999895 858a9096 9a8e8784 bbb9b1a6     ................
2000669c:	a8afb5b9 869098a0 7a797b7f 8785817d     .........{yz}...
200066ac:	8d8d8c8a 8d8c8d8f 8c8c8c8d 7c83888b     ...............|
200066bc:	76717276 a49a8d7f a8adb0ad 8b939aa1     vrqv............
200066cc:	797c8287 817d7a79 8f8b8884 98979592     ..|yyz}.........
200066dc:	96969798 96989897 82868c92 9b908782     ................
200066ec:	b6b5b0a6 a2a9afb5 8d93989d 7b7c8186     ..............|{
200066fc:	817e7e7c 8d898685 94959491 8b8e9091     |~~.............
2000670c:	7c818488 7c777678 a49a8f85 a2a8aaa9     ...|xvw|........
2000671c:	8d91969c 7f82868a 817e7c7d 8f8c8985     ........}|~.....
2000672c:	9b999692 97999b9d 91939495 83868a8e     ................
2000673c:	9b918984 b2b1ada5 a1a7acb0 9195999c     ................
2000674c:	8084898d 7b7a7b7e 8b847f7c 97979692     ....~{z{|.......
2000675c:	8c8f9194 8286898c 847e7d7f a19b948b     .........}~.....
2000676c:	999ea2a2 8b8c8f95 8788888a 84848586     ................
2000677c:	8a868584 9e9a948f 9d9e9fa0 9396999b     ................
2000678c:	8284898f 9a928b84 a7a8a6a1 9c9fa2a5     ................
2000679c:	95959799 8a8e9193 7c7e8185 8b837d7b     ..........~|{}..
200067ac:	97989691 8a8c8f93 85888989 87838283     ................
200067bc:	9d9b968e 94989b9d 8d8e9092 8b8c8d8d     ................
200067cc:	8687898a 89868584 9d99948e 9b9c9e9f     ................
200067dc:	96979799 878a9094 98918b87 9fa2a19e     ................
200067ec:	96989b9e 94949495 8e909293 7c80858a     ...............|
200067fc:	88837d7b 98979590 8f909395 878b8d8e     {}..............
2000680c:	87838384 9997928b 9294979a 8e8e8e90     ................
2000681c:	908f8d8d 888a8c8f 88858585 9d99938d     ................
2000682c:	9c9d9f9f 9798999a 868b9195 928c8785     ................
2000683c:	9b9b9b97 9999999a 97989999 92969696     ................
2000684c:	7c81888e 857e7a7a 9695918c 93959696     ...|zz~.........
2000685c:	888c9092 86828184 9593908a 92929394     ................
2000686c:	92939292 93919191 8c919394 83838587     ................
2000687c:	98928d87 9f9f9e9d 9b9b9d9e 898c9196     ................
2000688c:	8e8b8887 94939290 9f9d9a97 999a9d9f     ................
2000689c:	94979798 7e848a90 7d79787a 948f8983     .......~zxy}....
200068ac:	95979796 8f929495 8584868b 8d8c8a88     ................
200068bc:	918e8c8b 98999997 96959697 91959797     ................
200068cc:	8082868c 928b8682 a09f9d98 9ea0a0a0     ................
200068dc:	8a90979b 89878687 8d8c8b8a a29c9690     ................
200068ec:	a2a5a7a5 92979b9f 7e82868d 79777679     ...........~yvwy
200068fc:	8f8a847e 99989693 94979999 8485888e     ~...............
2000690c:	86868584 908a8786 a8a49f97 9ba0a5a8     ................
2000691c:	8c8f9397 82838689 8a878382 9e99948f     ................
2000692c:	a2a2a19f 9193989d 8584878e 88898988     ................
2000693c:	9f988e8a adafaba7 8d98a0a9 75797e85     .............~yu
2000694c:	7c727374 8b837e84 9d819988 9987a3b9     tsr|.~..........
2000695c:	887487b2 68697d98 616a7677 a6917b68     ..t..}ihwvjah{..
2000696c:	d3d5cdbc 97aabdca 75788089 70707172     ..........xurqpp
2000697c:	7e777370 9d989188 88929a9e 7372767e     psw~........~vrs
2000698c:	92877e77 ccbeaf9f c0cfd7d5 748396ac     w~.............t
2000699c:	736b686a a0988c7f 8b979fa3 5c66717e     jhks........~qf\
200069ac:	4b4b4e54 6f5f534d b7a99782 b4b9bdbd     TNKKMS_o........
200069bc:	a5abadb0 7783909c 7d726d70 bfb19f8c     .......wpmr}....
200069cc:	b6c6ccc9 63768da3 514c4e55 756b6058     ......vcUNLQX`ku
200069dc:	aa9b8c80 c4c7c2b8 acb1b7bf 919ba3a8     ................
200069ec:	7e7f8289 a0948b83 bcbdb7ac 708aa1b3     ...~...........p
200069fc:	32374457 5d4e4036 877f756a b3a89c90     WD726@N]ju......
20006a0c:	adb4b8b8 969b9fa5 85888c91 928b8786     ................
20006a1c:	c0b4a79b b9c7ccc9 5b728ba4 4d44434c     ..........r[LCDM
20006a2c:	8a7d6c5a a49f9a92 c0bdb5ad aeb5bbc0     Zl}.............
20006a3c:	90979ea5 8b8a898c aaa29a91 bebfbbb3     ................
20006a4c:	748fa6b6 2d34445b 5c49392e 8d887f6f     ...t[D4-.9I\o...
20006a5c:	a29a9390 b1b3b0ab 969da6ac 8b8a8c90     ................
20006a6c:	a29b948f bbb5b0a9 afbabfbe 5f73899e     ..............s_
20006a7c:	4943444e 8a7a6857 a19f9c96 bbb4aba5     NDCIWhz.........
20006a8c:	b7bdc0c0 979da6af 98949293 afaaa49d     ................
20006a9c:	b3b5b5b3 778b9eab 323d4c60 52423630     .......w`L=206BR
20006aac:	94897a66 9c9a9998 b0ada8a1 9fa7adb0     fz..............
20006abc:	8f8f9399 a39d9590 b8b5b1ab a2aeb6b8     ................
20006acc:	60718294 4c484b53 88766556 a9a8a298     ..q`SKHLVev.....
20006adc:	b4aeaaa9 bdc2c0ba 9da5afb7 9a969294     ................
20006aec:	b3aca49e b0b6b8b7 798c9ca8 3a445265     ...........yeRD:
20006afc:	56463b36 94897a68 96979999 a9a19b97     6;FVhz..........
20006b0c:	aaafb1af 91959ba3 a49b9490 bab8b4ac     ................
20006b1c:	9faab2b8 67748392 524f535c 7d6f6258     ......tg\SORXbo}
20006b2c:	a7a3998c aca8a8a8 c5c1b9b2 a8b3bcc3     ................
20006b3c:	9897999f b5aea59d afb7baba 748596a4     ...............t
20006b4c:	3f465464 51453e3b 8b7d6e5f 97999a95     dTF?;>EQ_n}.....
20006b5c:	a69d9795 b3b7b6b0 9398a1aa a0989391     ................
20006b6c:	b7b6b1a9 97a4adb5 64707d8a 5452545a     .........}pdZTRT
20006b7c:	7b6f635a a6a09688 a6a6a7a8 c4bdb4ab     Zco{............
20006b8c:	aeb9c2c5 9b9b9da3 bab2a8a0 b1bbc1bf     ................
20006b9c:	738292a2 444c5764 51484241 87796b5d     ...sdWLDABHQ]ky.
20006bac:	97999791 a39b9595 b8bab6ae 949aa5b0     ................
20006bbc:	a3999391 bebeb8ae 93a1afb9 5f6a7583     .............uj_
20006bcc:	54525257 796e645b a49d9387 a7a6a6a7     WRRT[dny........
20006bdc:	c6beb4ab b3bfc6c9 9b9b9fa7 bdb4aaa1     ................
20006bec:	b2bdc3c3 718091a2 464e5762 51484544     .......qbWNFDEHQ
20006bfc:	8677695d 96989690 a1999493 b7b8b4ab     ]iw.............
20006c0c:	989fa9b1 a2999494 c0c0b8ae 92a1afba     ................
20006c1c:	5d687583 504f5055 766a5f56 a59d9285     .uh]UPOPV_jv....
20006c2c:	a7a6a5a7 c2bcb3ab b3bcc4c6 9f9ea2aa     ................
20006c3c:	c5bbafa5 b1bfc8ca 707f8fa1 454c5663     ...........pcVLE
20006c4c:	4f484342 82746659 9596938d a79d9795     BCHOYft.........
20006c5c:	b8bbb9b1 99a0a9b1 a79d9796 c2c4bdb2     ................
20006c6c:	8c9dadba 57626e7c 4d4a4a4f 796a5e53     ....|nbWOJJMS^jy
20006c7c:	a49f9587 a7a5a5a6 c4beb6ad b2bac1c5     ................
20006c8c:	a8a6a8ac c6beb5ad afbec6c9 6f7d8d9e     ..............}o
20006c9c:	454c5460 4d454242 84776959 9a9b9990     `TLEBBEMYiw.....
20006cac:	aaa19b9a b7bab8b2 9da2a9b1 a69e9a9a     ................
20006cbc:	bfc0bab1 8b9babb8 55606d7b 4b48474c     ........{m`ULGHK
20006ccc:	7a6a5d52 a8a29789 adabaaa9 c2c0b8b2     R]jz............
20006cdc:	b1b7bdc1 a8a6a7ab c5beb6ae afbcc5c8     ................
20006cec:	6d7c8d9f 4249535f 4f45403f 887a6b5c     ..|m_SIB?@EO\kz.
20006cfc:	9c9b9993 aea7a19d b3b7b8b4 9ca0a6ad     ................
20006d0c:	a59e9a99 bbbcb7af 8a9babb6 4f5a6879     ............yhZO
20006d1c:	4c464447 7b6d6055 a69e9488 b0acaba9     GDFLU`m{........
20006d2c:	c0bfbbb5 afb5bbbf a6a5a6a9 c3bbb2ab     ................
20006d3c:	b3bec5c6 6d7e90a2 4348515c 564c4542     ......~m\QHCBELV
20006d4c:	83786c5f 9d9a948d afa9a4a0 b5b7b7b4     _lx.............
20006d5c:	9ea4abb0 a59e9a9a bcbbb6ad 8b9cabb6     ................
20006d6c:	4d576678 4e474447 796d6156 a19a9085     xfWMGDGNVamy....
20006d7c:	b4b0aca7 c1c0bdb8 b5bbbfc0 a3a4a8ae     ................
20006d8c:	bfb6aca6 b1bdc3c4 6a7b8ea0 4549505b     ..........{j[PIE
20006d9c:	58504a45 82776d62 9c98928b b0aba5a0     EJPXbmw.........
20006dac:	bdbcbab6 a0a9b3ba 9f989799 b8b8b2a9     ................
20006dbc:	899aabb6 4e576678 4e484749 776b5f56     ....xfWNIGHNV_kw
20006dcc:	9e988e83 b2aca8a3 c4c2bdb7 bbc3c6c6     ................
20006ddc:	a4a4aab3 bbb4ada7 abb6bdbf 69798b9c     ..............yi
20006dec:	464c515c 58504b46 857b6f63 9995918c     \QLFFKPXco{.....
20006dfc:	b3aca69e c3c3c0ba a0aab5be 9d989699     ................
20006e0c:	b0afaba4 8796a2ac 555e6976 4d4a4c4f     ........vi^UOLJM
20006e1c:	7a6c5e54 99968f85 b1a9a39d cdc7bfb8     T^lz............
20006e2c:	c0c8cdcf a4a6adb6 b2aea9a5 a6afb4b5     ................
20006e3c:	707e8c9a 4c535c65 554b4848 847b6f62     ..~pe\SLHHKUbo{.
20006e4c:	958f8c88 b7aca29a c5c8c6c0 a7b0bac1     ................
20006e5c:	9e9c9ca0 a4a3a2a0 8891989f 5d656e7c     ............|ne]
20006e6c:	47464b53 7b6e5e50 9c999288 ada6a19f     SKFGP^n{........
20006e7c:	d3cac0b6 c9d2d8d7 a6acb4be a8a6a4a4     ................
20006e8c:	a5a9aaaa 7881919c 46515d6d 584e4744     .......xm]QFDGNX
20006e9c:	837f7567 928f8b87 b3a89e97 cfcdc7bd     gu..............
20006eac:	afb9c5ce 979199a6 9c949b9c 81989a9c     ................
20006ebc:	4a5a6975 473e3e43 82756959 9495938d     uiZJC>>GYiu.....
20006ecc:	aa9e9693 dcd5c9ba ccd5dcde 9da7b3c0     ................
20006edc:	9b979597 a1a5a4a1 6e7f8e9a 3a404c5c     ...........n\L@:
20006eec:	594b403a 8b827568 9d9a9692 b6aea6a0     :@KYhu..........
20006efc:	c7c7c3bd acb6c0c6 939399a1 a19d9996     ................
20006f0c:	84909ba1 47556778 53484040 8c7f6f60     ....xgUG@@HS`o..
20006f1c:	9c9b9995 b1a7a29e d9d3c9bd cad3d9db     ................
20006f2c:	a0a8b2bf a39f9c9c a1a7a9a6 65778796     ..............we
20006f3c:	41424955 675b4f46 8f887f74 9c999794     UIBAFO[gt.......
20006f4c:	b6aea7a1 c7c6c2bc acb6bfc5 919399a2     ................
20006f5c:	9c9a9692 7f8c969b 49535f6f 5f534c47     ........o_SIGLS_
20006f6c:	8c83796c 9b989492 b2aaa39d cfcac2ba     ly..............
20006f7c:	cbd1d2d1 a2acb7c1 9b99999b 989d9e9d     ................
20006f8c:	6474828e 49494d56 6e635951 8d888179     ..tdVMIIQYcny...
20006f9c:	9c979390 b5afa9a1 c2c0bebb aeb7bec2     ................
20006fac:	91959ba3 96959391 78858f95 484e5a69     ...........xiZNH
20006fbc:	66594f49 8e877e73 9c999694 b7ada6a0     IOYfs~..........
20006fcc:	cfccc6bf c4cacecf a3abb4bc 99999b9e     ................
20006fdc:	8d939799 5a697683 534d4c50 7b72685d     .....viZPLMS]hr{
20006fec:	918d8883 9e989593 bab4ada5 bcbebfbe     ................
20006ffc:	a7aeb4b9 9193979e 91919090 717e878e     ..............~q
2000700c:	4e505964 77695c52 96938c83 98979998     dYPNR\iw........
2000701c:	b3ada49c cccac4bb bbc0c6cb a4a9b0b6     ................
2000702c:	9ea0a1a1 848e969b 59636e7a 5c545052     ........zncYRPT\
2000703c:	877f7367 8e8f8e8c 9a928c8b bdb5aaa0     gs..............
2000704c:	bbc0c1bf a3a9afb6 92969a9e 868b8e90     ................
2000705c:	69717981 56575b61 7b6e635a 9f9a9388     .yqia[WVZcn{....
2000706c:	9b9c9ea0 b5aba29e cecdc7be b5bdc5cb     ................
2000707c:	a1a4a7ad 979a9d9f 7e868d93 61686f77     ...........~woha
2000708c:	625d5b5c 8c81766b 97989693 9d989595     \[]bkv..........
2000709c:	bdb6aea5 b3babec0 979ca3ab 92919293     ................
200070ac:	878d9091 67707780 5d5c5e62 82746a62     .....wpgb^\]bjt.
200070bc:	a5a29a8e 9c9e9ea2 b5aa9f9c c8cac8c0     ................
200070cc:	abb4bec5 a1a1a2a5 9a9ea0a2 78818b94     ...............x
200070dc:	6063696f 6d666260 8f877e75 91949593     oic``bfmu~......
200070ec:	99928f8f c3bab1a5 b2bdc3c6 91979da7     ................
200070fc:	91908f8f 848b8e90 636b747c 5d5a5a5e     ........|tkc^ZZ]
2000710c:	8a7c6f64 a5a39e96 9d9da0a3 baaea59f     do|.............
2000711c:	cdd0ccc4 a7b1bbc5 9a9a9ca1 979a9b9b     ................
2000712c:	78828b91 5b5f666e 73685f5c 9d978d80     ...xnf_[\_hs....
2000713c:	97999c9e 9e989495 c0bab1a7 aab5bdc1     ................
2000714c:	8d90969f 8f8f8e8d 82888b8e 6068727a     ............zrh`
2000715c:	625c595b 998a7c6e a7abaaa5 9b999ca2     [Y\bn|..........
2000716c:	bab0a79f c6cbc9c3 a1aab4be 9898989b     ................
2000717c:	94989999 7a838a90 5e626871 796d645f     .......zqhb^_dmy
2000718c:	a6a09587 9198a0a5 a197918e bfbbb5ab     ................
2000719c:	a8b3bac0 888c939d 89898988 7d828587     ...............}
200071ac:	646b7279 6a625f60 9f908175 aab0b0ab     yrkd`_bju.......
200071bc:	969498a1 c1b7ab9e c3c8cac8 9ca6b0bb     ................
200071cc:	92929194 93969693 7b82898e 62646a73     ...........{sjdb
200071dc:	80736964 aba3998d 8e99a4ab 9f928a88     dis.............
200071ec:	c6c3b9ad a6b1bcc3 80838b98 8a888480     ................
200071fc:	7f848789 676a7078 77706a66 9e978d81     ....xpjgfjpw....
2000720c:	a3a6a7a5 9895979d c9bdafa1 c4cdd1d0     ................
2000721c:	96a1adb9 8c8a8b8e 8f90908e 7982888d     ...............y
2000722c:	67676a71 897e746c a29f9a93 96999da1     qjgglt~.........
2000723c:	a69c9694 c1c0bab0 a1acb6bd 7e838b95     ...............~
2000724c:	83807e7d 80848585 6a6e747b 7b716b69     }~......{tnjikq{
2000725c:	9f989085 a0a3a4a3 9e9a999c c1b8aea4     ................
2000726c:	c1c8cac7 95a0abb7 8886888d 8c8b8989     ................
2000727c:	7c82888b 706e7076 8d837a74 9c9c9a95     ...|vpnptz......
2000728c:	9494979a ada49c97 c3c2bdb6 a0acb7bf     ................
2000729c:	797f8893 7c797777 8383827f 71757b7f     ...ywwy|.....{uq
200072ac:	7c75706f a09a9288 9ea0a2a2 a4a09c9d     opu|............
200072bc:	c2bbb3aa bcc2c6c6 939da8b2 8181858b     ................
200072cc:	88868482 83878989 77797b7f 8e857f7a     .........{ywz...
200072dc:	9b9a9995 9897989a b1a9a19b bbbebcb7     ................
200072ec:	9ea9b1b6 7b818994 7b787778 8583807d     .......{xwx{}...
200072fc:	7a7e8284 807a7878 9b968f87 9c9d9e9e     ..~zxxz.........
2000730c:	a7a19e9d c5c0b8b0 b8bec4c6 949da7b0     ................
2000731c:	7d7f838a 83827f7d 84858685 7d7d8083     ...}}.........}}
2000732c:	8c87827e 9b999792 9d9b9b9b b3aca5a0     ~...............
2000733c:	b9bcbdba 9ca4acb3 7b828a93 77767576     ...........{vuvw
2000734c:	807d7a78 85858583 85828284 9b958f89     xz}.............
2000735c:	a1a09f9e a7a3a1a0 c1bcb5ae b6bcc1c3     ................
2000736c:	929da7af 7b7d8289 7e7d7b7a 88868381     ......}{z{}~....
2000737c:	85878889 8c878483 9e9b9590 9e9e9f9f     ................
2000738c:	aaa5a1a0 b7b9b7b1 9fa9aeb1 7d828b96     ...............}
2000739c:	73717579 807c7b78 908e8984 8a8b8b8e     yuqsx{|.........
200073ac:	908c8a8a a5a19c96 adabaaa8 b6b4b0ae     ................
200073bc:	afb4b5b5 949da4a9 8284888d 7e7c7e80     .............~|~
200073cc:	8583807f 87878786 8d8a8887 9e9b9691     ................
200073dc:	9fa1a1a0 a6a19d9e b7b6b1ab a1aab1b5     ................
200073ec:	7f848d96 78787d7e 7c797578 8b89837d     ....~}xxxuy|}...
200073fc:	96938f8b 96959596 a2a09d99 9e9c9fa1     ................
2000740c:	b8b1a19d c3c2b5b6 918c96af 7b808d95     ...............{
2000741c:	73767879 958a7d73 989e9f9c 6c727f8d     yxvss}........rl
2000742c:	8a7c716c b0aea69a 9ba1a6ad 9f9b9899     lq|.............
2000743c:	a9a9a6a2 92979ea4 777b818a 72717173     ..........{wsqqr
2000744c:	817d7975 8b888583 9693908e a09e9d99     uy}.............
2000745c:	9b9e9e9f aca7a19c b8babab3 a6adb3b6     ................
2000746c:	90959ba0 777d838a 76747474 86827e7a     ......}wtttvz~..
2000747c:	9c97918c a1a2a19f 999d9fa1 94919194     ................
2000748c:	b2aaa299 b3b6b7b6 959ea6ae 787e858c     ..............~x
2000749c:	72717275 837e7974 918e8a86 a09e9a96     urqrty~.........
200074ac:	9e9fa1a1 97989a9d aaa19b98 bfbebab3     ................
200074bc:	afb6bbbe 89929ca6 78797c82 7e7c7978     .........|yxxy|~
200074cc:	85838280 97908b87 9e9f9f9c 95989a9c     ................
200074dc:	96939293 aea9a19b adafafaf 9ba2a5a8     ................
200074ec:	7b808892 74747577 807e7a76 8a858281     ...{wuttvz~.....
200074fc:	a7a09891 a1a5a8a9 9395989d a49d9793     ................
2000750c:	b7b5b2ac b1b4b6b7 8d97a1aa 7d7d8085     ..............}}
2000751c:	7b7b7c7c 827f7e7c 9a938c86 a4a5a4a1     ||{{|~..........
2000752c:	93979ba0 94919090 a3a19d99 aaa7a4a3     ................
2000753c:	a1a8acac 7f878f98 797b7a7c 7d7a7978     ........|z{yxyz}
2000754c:	8a837c7c a5a09991 9fa0a1a4 9596989c     ||..............
2000755c:	9b999795 a8a3a09e b3b4b1ad 959fa8af     ................
2000756c:	8184888f 797b7e80 7a777777 978f867f     .....~{ywwwz....
2000757c:	a4a5a29e 93979ca0 96949291 9a9a9999     ................
2000758c:	a4a09c9b a5a9aaa8 8a91989e 797c7f84     ..............|y
2000759c:	72727376 8c837b75 aba7a097 a0a5aaac     vsrru{..........
200075ac:	9696989c 99999897 9e9b9a99 b0ada8a2     ................
200075bc:	9da4abaf 868a8f96 787c8083 7d787576     ..........|xvux}
200075cc:	a0988f85 a5a8a8a6 94989ca1 93919192     ................
200075dc:	94949494 a09a9795 a9abaca7 8f969ca3     ................
200075ec:	7d818589 7474787a 8d857d76 a9a6a197     ...}zxttv}......
200075fc:	a1a3a5a8 979a9c9f 93949596 94919091     ................
2000760c:	b2aba39b a3aab0b5 878c929b 777b7f83     ..............{w
2000761c:	7d777575 a29b9186 a4a6a8a6 999c9ea1     uuw}............
2000762c:	8e909396 8b8b8c8e 9d958f8c ababa9a4     ................
2000763c:	989fa4a8 7f858b92 7676787b 968b827a     ........{xvvz...
2000764c:	a7a7a49f a2a3a4a6 95999da0 888a8d90     ................
2000765c:	928c8887 aeaaa29a a6abaeaf 8e959aa0     ................
2000766c:	787d8388 7e787575 9f9a9187 a1a2a3a2     ..}xuux~........
2000767c:	9a9d9ea0 8a8e9397 82808285 9f978e87     ................
2000768c:	aeadaba6 9fa5a9ac 828a9198 7575787c     ............|xuu
2000769c:	9489827b a7a6a29c a4a5a6a6 969b9fa2     {...............
200076ac:	7f858b91 8a827e7d aea79f94 aeb1b3b2     ....}~..........
200076bc:	919aa2a9 757a8189 7f777373 a09a9288     ......zussw.....
200076cc:	a3a5a4a2 979a9ea1 868b9094 7b797c81     .............|y{
200076dc:	a0968b82 b1b0ada8 a2a8acaf 878e959d     ................
200076ec:	77767a80 9289807a a7a4a09a a7a9aaa8     .zvwz...........
200076fc:	979ba0a3 797f8790 8b7f7776 b2aca297     .......yvw......
2000770c:	aeb2b5b5 939ca3a9 7579808a 7b736f70     ..........yupos{
2000771c:	9d989287 a4a5a4a2 9b9ea1a3 80898f96     ................
2000772c:	716f7076 a4978879 b6b7b4ad a4a9aeb3     vpoqy...........
2000773c:	818a939c 7372757a 948a7f77 aba9a59e     ....zursw.......
2000774c:	a4a8aaab 90969ba0 7a7d848a 90867d79     ..........}zy}..
2000775c:	b2aea79b acafb2b3 959da4a8 747a838c     ..............zt
2000776c:	7e757170 a29c9489 a2a4a5a5 989b9ea0     pqu~............
2000777c:	868b9094 7d7a7b80 a1978d83 a9ababa8     .....{z}........
2000778c:	a4a5a6a8 89929aa0 77777b81 948b837b     .........{ww{...
2000779c:	a7a5a29c a4a6a7a8 92989da1 7a7e848b     ..............~z
200077ac:	8f857c79 adaaa399 aaabafaf 9da2a7aa     y|..............
200077bc:	757d8994 80787373 9f999289 a0a1a2a2     ..}ussx.........
200077cc:	999c9ea0 82899095 7c77777b a1988e84     ........{ww|....
200077dc:	a7a9aba8 9d9ea1a5 8a91979b 7b7b7e83     .............~{{
200077ec:	988f8780 a7a5a29e a1a5a6a7 8f94999d     ................
200077fc:	7c7e848a 9289817c a9a7a29b a6a6a7a8     ..~||...........
2000780c:	9fa4a6a7 7e868f98 837c7979 9f9a938b     .......~yy|.....
2000781c:	a0a2a2a1 92969a9d 81878c8f 7e797a7d     ............}zy~
2000782c:	a1999086 a7a9a9a7 a1a2a4a5 8c93999d     ................
2000783c:	7d7d8086 98908881 a7a5a39f 9ea3a6a7     ..}}............
2000784c:	888d9398 7d808285 9a8f867f acaca9a3     .......}........
2000785c:	a2a4a7aa 979da0a1 7f848a91 88827d7c     ............|}..
2000786c:	a09c9790 9ea1a2a2 8d92979b 81838688     ................
2000787c:	8882807f a7a09890 a4a7a9aa 999c9fa2     ................
2000788c:	888c9094 87848385 9e98928c a4a5a4a2     ................
2000789c:	979b9ea1 85888e92 84818182 9f978f88     ................
200078ac:	acadaba5 9fa2a5a8 8d92979c 81818489     ................
200078bc:	938c8683 a2a29f9a 93989c9f 878c8f90     ................
200078cc:	82848585 908b8784 aba7a198 a2a6aaac     ................
200078dc:	9094989d 86878a8f 908b8785 a6a39d96     ................
200078ec:	9ea3a6a7 8f909399 86888b8d 8a878484     ................
200078fc:	a49d9690 a9ababa9 999da1a5 8b8f9396     ................
2000790c:	87858588 a099928c a3a8a8a5 868c939c     ................
2000791c:	83828283 89878584 9c96908d abaaa7a2     ................
2000792c:	9aa1a6aa 878a8e93 89868686 a099928d     ................
2000793c:	abadada8 8d969fa7 80808185 8b878582     ................
2000794c:	9a97938f a6a3a19e 9ea2a5a7 8b8e9398     ................
2000795c:	8a888888 98918d8b aaa6a19c 99a3a9ab     ................
2000796c:	777c888f 7f807576 9194978f 9a9ca89d     ..|wvu..........
2000797c:	99a1aba5 828c9394 857c797b ada49a90     ........{y|.....
2000798c:	b0b2b2b1 9da4a8ac 7e858e96 78767679     ...........~yvvx
2000799c:	8d88827d 9e9b9793 a2a3a2a0 9b9da0a2     }...............
200079ac:	93949698 9a979493 9f9e9e9c a3a2a09f     ................
200079bc:	949a9fa3 7e82878d 7a7a7a7c 807d7c7a     .......~|zzzz|}.
200079cc:	9a928b85 adada8a2 959fa6ab 8383878e     ................
200079dc:	99928c86 aca8a39e afb2b2b0 929ba3aa     ................
200079ec:	757a8189 7a767373 99918981 aeaba6a0     ..zussvz........
200079fc:	a7acafb0 8a9098a0 918c8787 a9a59e97     ................
20007a0c:	afb1b0ad 959ea6ac 767d868d 69696b70     ..........}vpkii
20007a1c:	8980766e a6a19a92 a6a9aaa9 8a949da3     nv..............
20007a2c:	83808285 a69e958c b5b5b2ad a7adb1b4     ................
20007a3c:	8b9299a0 72777d84 7b736f6f a59d9286     .....}wroos{....
20007a4c:	aaabaaa9 9fa3a7a9 8b8d9399 9a928d8b     ................
20007a5c:	b4b0aaa2 afb3b6b6 8f969ea7 767b8288     ..............{v
20007a6c:	6e6d6e72 8d827972 a4a39f97 9ca0a1a3     rnmnry..........
20007a7c:	8f939799 8d8a888a aaa29a93 b2b4b4b1     ................
20007a8c:	9ca5adb1 888d9195 7c7d8084 817d7b7c     ..........}||{}.
20007a9c:	9d989189 a2a3a3a0 a1a1a1a1 94979b9f     ................
20007aac:	9d969292 b5b0aaa4 adb2b5b6 8d969fa7     ................
20007abc:	767a8187 72717274 8c857d77 a4a19c95     ..zvtrqrw}......
20007acc:	989b9fa3 8b8e9094 958e8b8a b5afa79e     ................
20007adc:	afb3b6b7 989ea4aa 868a8d92 7c7e8082     ..............~|
20007aec:	837f7c7b 9c958e88 a4a6a6a3 94989da1     {|..............
20007afc:	95929192 ada69f99 b3b5b5b2 a4a9adb1     ................
20007b0c:	8b92989e 7a7d8185 79777779 8a847f7c     ......}zywwy|...
20007b1c:	a09d9891 94999ea0 8d8b8b8f 9d97938f     ................
20007b2c:	b0afaaa3 aaadb0b0 999fa3a7 868a8f93     ................
20007b3c:	7f808182 86838280 9a948e89 a4a6a4a0     ................
20007b4c:	8e92999f 97928e8c b1aca59e b3b5b6b4     ................
20007b5c:	a7aaadb0 90979ca2 7e818589 7c7b7c7c     ...........~||{|
20007b6c:	87837f7d 9895908b 9095989a 8a87888b     }...............
20007b7c:	a69f9891 b0b0aeab a9abacaf 9ba0a4a7     ................
20007b8c:	868a9096 7e7e7f81 807e7e7d 938d8884     ......~~}~~.....
20007b9c:	a1a19c99 93989d9f 9b959190 b0ada8a2     ................
20007bac:	b0b2b3b2 a6a9abae 91989ea3 8082858a     ................
20007bbc:	7b7b7b7d 85817e7c 98938f8a 979b9c9b     }{{{|~..........
20007bcc:	8b8a8c92 a29c9691 aaaaa9a7 abaaa9a9     ................
20007bdc:	a3a7a8a9 848b929b 7a7a7c7f 817f7c7b     .........|zz{|..
20007bec:	938f8a86 9f9e9b97 93969b9e 9b959190     ................
20007bfc:	aeaca8a2 acaeaeaf abababab 9aa1a7aa     ................
20007c0c:	7e838a92 7777787a 87817d79 9995918c     ...~zxwwy}......
20007c1c:	969a9c9c 8f8d8f92 a19d9993 a8a8a7a4     ................
20007c2c:	a5a5a6a8 a4a6a6a5 8990989e 76787c81     .............|xv
20007c3c:	7e7a7877 928d8984 9c9a9997 95979b9d     wxz~............
20007c4c:	9b969494 aaa8a5a0 a9a9aaab adaba9aa     ................
20007c5c:	9ea5acaf 78808a94 73707073 89837d77     .......xsppsw}..
20007c6c:	9896938e 9597999a 938f8e92 a19e9b97     ................
20007c7c:	a3a3a4a3 a2a1a1a2 a7a8a5a3 8d969fa4     ................
20007c8c:	72767c83 7b767271 928d8781 9e9d9a96     .|vrqrv{........
20007c9c:	98999a9d a29e9a98 a6a7a7a5 a1a1a2a4     ................
20007cac:	aaa6a3a1 abafafad 858f99a3 6e70757b     ............{upn
20007cbc:	7f797370 9d968e87 9da0a1a0 9a99999b     psy.............
20007ccc:	a0a09f9d 9c9c9e9f 9f9d9c9b a9a7a4a2     ................
20007cdc:	98a0a5a9 777d868e 72707073 8e847b75     ......}wsppru{..
20007cec:	a5a49e96 9d9d9fa3 a3a09e9d a3a4a5a5     ................
20007cfc:	9d9d9ea0 a8a39f9e afb1b0ad 919ba4ab     ................
20007d0c:	6d737c86 756e6a69 9e968b80 9ea2a4a3     .|smijnu........
20007d1c:	9a99999b a4a2a09d 9b9fa1a2 97969698     ................
20007d2c:	a9a5a09b a4aaacac 7985919c 65646870     ...........yphde
20007d3c:	8c7f736b a6a5a097 9a9da0a4 a4a09c9a     ks..............
20007d4c:	a4a6a8a7 97999ca0 a39e9a98 b0b0aea9     ................
20007d5c:	929da6ac 68707b87 72696464 a0978b7f     .....{phddir....
20007d6c:	a1a4a6a5 9c9a9a9d a6a5a29e 9a9fa3a6     ................
20007d7c:	91909295 a6a09a95 a5aaacaa 7f8b959f     ................
20007d8c:	69686c75 8a7f746d a3a19a93 9c9c9d9f     ulhimt..........
20007d9c:	a5a29f9d a4a8a9a8 93959a9f a19b9693     ................
20007dac:	aeaeaba7 97a0a7ac 6f78828c 6e69686a     ..........xojhin
20007dbc:	938b8075 a0a09f9a a3a1a0a0 aaa9a7a5     u...............
20007dcc:	9ba1a6a9 8f8e9094 a5a09a93 a4a8aaa9     ................
20007ddc:	818b959e 6a6c7178 7f756e6a a19c938a     ....xqljjnu.....
20007dec:	a5a5a5a4 a9a9a8a6 a3a8aaaa 8e92989e     ................
20007dfc:	9f98928e acaca9a5 959da3a8 757c838b     ..............|u
20007e0c:	6f6c6c6e 91887e75 a4a29f99 a8a6a5a5     nllou~..........
20007e1c:	a8a9a9a8 989ea3a6 918e8f93 a5a09a95     ................
20007e2c:	a3a5a7a7 8992999f 6f737980 7d746f6d     .........ysomot}
20007e3c:	9a948e86 a5a3a09d adacaaa8 a0a5a8ab     ................
20007e4c:	9192969b 9f999492 a7a8a6a3 999ea3a5     ................
20007e5c:	79828a92 6d6c6d71 89827972 a09c9790     ...yqmlmry......
20007e6c:	adaaa8a5 acafafaf 979ca2a8 92909093     ................
20007e7c:	9f9c9995 a1a2a2a1 8d959b9e 70757c85     .............|up
20007e8c:	78726f6f 938c857f aaa6a19b b2b3b1ae     oorx............
20007e9c:	9fa5aaaf 94959799 9d9c9794 a0a3a19e     ................
20007eac:	989c9fa0 7d838c94 706f6f74 857e7872     .......}tooprx~.
20007ebc:	a09a928b adaba8a5 aeafafae 9da2a6ab     ................
20007ecc:	92929194 a0978b8e 9d9c9da2 919ca09c     ................
20007edc:	717c8387 6e686769 9c8d8076 b8b7b2a9     ..|qighnv.......
20007eec:	aaafb3b6 a0a0a2a5 9fa0a0a0 9b9c9d9e     ................
20007efc:	9a9a9a9a 94979999 7c848b91 6f6f7275     ...........|uroo
20007f0c:	857d7672 a39d968d afadaba8 aeafb0b0     rv}.............
20007f1c:	9ca2a7ab 8c8d9197 97938f8d 9e9e9c9a     ................
20007f2c:	8b92989b 71757b82 7b767370 948f8982     .....{uqpsv{....
20007f3c:	a9a49f9a b2b1afac a6abafb1 91979ca2     ................
20007f4c:	95949390 9e9c9998 9597999c 7880888f     ...............x
20007f5c:	706e6f72 8c847c75 a09d9992 aaa8a5a3     ronpu|..........
20007f6c:	b1b1afac a2a9adb0 8d90949b 93908e8d     ................
20007f7c:	99989895 878e9397 76787c81 837e7976     .........|xvvy~.
20007f8c:	9995908a a5a29f9c b1b0ada9 a8acafb1     ................
20007f9c:	979a9fa3 94959595 95959695 8e919494     ................
20007fac:	797e8489 7c787777 938c8480 9c9c9b98     ..~ywwx|........
20007fbc:	a6a4a29e afafaeab 9ca4aaad 92929497     ................
20007fcc:	96959492 92939596 82878c90 7b7a7b7e     ............~{z{
20007fdc:	8c86807d 9b9a9792 a09e9d9c aeaba7a3     }...............
20007fec:	a6a9acad 989a9da1 9a999998 9294989a     ................
20007ffc:	878b8e91 787a7e82 827d7977 99948e88     .....~zxwy}.....
2000800c:	999a9c9c a29d9999 afafada8 9ea3a9ac     ................
2000801c:	96959699 97989897 8d919395 7b7f8489     ...............{
2000802c:	7d797777 96908982 a0a1a09c 9d9c9c9e     wwy}............
2000803c:	adaaa5a1 a3a8acae 98989b9f a2a09d9a     ................
2000804c:	969b9fa2 7f858a90 7574767a 89837c77     ........zvtuw|..
2000805c:	a09c9790 9c9fa1a2 a3a09c9a aaadaba6     ................
2000806c:	979a9ea4 99959495 9fa0a09e 8c92979c     ................
2000807c:	74787e85 7d767372 a0988f86 a6a9a9a6     .~xtrsv}........
2000808c:	98989ca1 a3a09d9a 9fa3a5a5 9b99989b     ................
2000809c:	a9a7a29e 949ca3a8 797f868d 76737375     ...........yussv
200080ac:	8f88817a a29f9b96 9a9da0a2 9f9b9898     z...............
200080bc:	a5a8a7a3 94989da2 a19b9694 a3a8a9a6     ................
200080cc:	7f87919a 71707377 89807874 a39f9991     ....wspqtx......
200080dc:	a2a4a5a5 9a999b9e a5a39f9c 9ba0a4a6     ................
200080ec:	97949497 adaba59d 919ca5ab 72777e87     .............~wr
200080fc:	7a767371 97918a81 a1a2a09b 979b9fa1     qsvz............
2000810c:	9d999696 a4a5a3a1 96989ca1 a29d9896     ................
2000811c:	9fa5a7a6 7e858e98 7a777678 8e89837d     .......~xvwz}...
2000812c:	9f9c9894 a2a4a4a2 9a9b9da0 a3a19e9b     ................
2000813c:	9b9fa2a3 9b979698 abaaa6a1 8b96a0a7     ................
2000814c:	72747880 837d7774 98938e89 a1a19f9c     .xtrtw}.........
2000815c:	989b9d9f 9c9a9897 a0a1a09e 9697999d     ................
2000816c:	a29e9a98 9aa1a6a5 7a7e8791 7d787577     ..........~zwux}
2000817c:	8f8c8883 a1a09c96 a4a6a5a3 97989ba0     ................
2000818c:	a19d9a98 a0a3a4a3 98989a9d a1a19e9a     ................
2000819c:	8790989f 78777b80 87837e7b 96938e8a     .....{wx{~......
200081ac:	a09f9c99 9c9d9fa0 9b99999a 9fa09f9d     ................
200081bc:	989a9c9d a39f9c99 959da3a4 777b838c     ..............{w
200081cc:	827c7876 94908c87 a29f9b97 a1a2a2a3     vx|.............
200081dc:	9e9ea0a1 a1a19f9e 9ea0a1a1 9e9c9c9d     ................
200081ec:	9ea1a1a0 848c949a 7877797d 8a86807c     ........}ywx|...
200081fc:	9996928f 9f9f9e9c 9b9b9c9e 9d9c9b9a     ................
2000820c:	a0a19f9e 9d9d9d9e 9d9e9e9d 92979c9d     ................
2000821c:	7c80858b 83807e7d 918e8b87 a3a09c97     ...|}~..........
2000822c:	a5a6a6a5 9fa0a1a3 9f9e9e9e a3a2a1a0     ................
2000823c:	a2a3a4a3 969a9da0 84898e92 7c7b7c80     .............|{|
2000824c:	8a86827e 9c999590 a1a1a09f 9b9c9e9f     ~...............
2000825c:	9c9b9b9a a2a19f9e a0a1a2a2 95989b9e     ................
2000826c:	8e8f9293 8285888b 84828080 94908c87     ................
2000827c:	a19f9c98 a1a2a2a2 9e9fa0a1 9f9e9e9d     ................
2000828c:	a2a3a3a1 9d9fa0a2 9094979a 8587898d     ................
2000829c:	81828384 8a868482 9a96928e 9f9f9f9d     ................
200082ac:	9c9d9e9e 9799999a a09e9c99 a4a4a4a3     ................
200082bc:	999ea1a2 8a8c8f94 85858688 86868584     ................
200082cc:	928f8a87 a19e9a96 a4a4a4a3 9da0a2a4     ................
200082dc:	a09e9c9c a9a9a7a4 9ea2a5a7 8b8f9499     ................
200082ec:	86858587 87878787 88868686 9995908c     ................
200082fc:	a0a09f9d 9d9fa0a1 9797999b a3a09c99     ................
2000830c:	a8a9a8a6 989ea2a5 85898d92 85838283     ................
2000831c:	87868686 8e8b8988 9f9c9893 a2a3a2a2     ................
2000832c:	9b9b9ea0 a3a09d9c afaeaba7 9fa5a9ad     ................
2000833c:	878a9199 81808184 8a898784 89898989     ................
2000834c:	948f8c8a a3a09d98 a4a6a6a5 9a9c9fa1     ................
2000835c:	a49f9b9a ababaaa8 949ba2a8 8082878d     ................
2000836c:	88858280 898b8d8b 8e8b8a89 9c999591     ................
2000837c:	a2a1a19f a3a2a3a3 a4a4a4a4 a9a9a8a6     ................
2000838c:	9da1a4a7 858a9097 82808082 8a8a8986     ................
2000839c:	87878789 938f8b88 9e9d9b98 9e9e9e9e     ................
200083ac:	a3a2a09f a6a5a4a3 a3a6a8a8 8e949a9f     ................
200083bc:	80818388 8d898581 8b8c8e8e 8c8a8a8a     ................
200083cc:	99969490 9d9c9c9c a8a4a19f aba9a9a9     ................
200083dc:	a5a6a6a9 989ca0a3 85898d92 88858383     ................
200083ec:	8e8f8e8b 89898b8d 8f8d8b89 97979592     ................
200083fc:	a09c9a99 a8a8a6a3 a5a5a6a7 9fa1a1a3     ................
2000840c:	90969a9c 8685888c 8b888686 8a8b8a8b     ................
2000841c:	8e8c8b8a 97959290 98989899 a7a09d9b     ................
2000842c:	aea8a8aa 9a9da8ae 98a1a8a2 858b9195     ................
2000843c:	8b878483 97989590 7c838c92 847f7a79     ...........|yz..
2000844c:	9e99938c 9e9e9fa0 a3a09e9e abaaa8a5     ................
2000845c:	a5a8abac 92989ca1 8587898d 84858484     ................
2000846c:	85838384 928d8885 9b9b9b97 9394979a     ................
2000847c:	a39d9794 b4b1aea9 b1b3b4b5 9ea4aaae     ................
2000848c:	888c9298 84848485 86858484 908c8987     ................
2000849c:	9b9a9895 8f939699 8f8c8b8d a8a09993     ................
200084ac:	b6b5b2ae a9aeb2b5 8d949ba2 80818488     ................
200084bc:	84828180 8b898785 9995918e 989b9c9b     ................
200084cc:	8a8c8f93 97928d8b b7b2aba1 b8bbbdbb     ................
200084dc:	98a0a9b1 7f838990 84807f7f 908d8b87     ................
200084ec:	94939393 92959595 8c8c8c8f 8f8e8e8d     ................
200084fc:	a29b9590 bbb8b2aa aab2b9bb 848c96a0     ................
2000850c:	7f7e7d80 89878481 8c8a8a8a 9794918e     .}~.............
2000851c:	95979898 8d8f9092 99938f8e b1aba59f     ................
2000852c:	b7babab6 99a3abb2 80828890 82808080     ................
2000853c:	8e8c8986 98969390 96989999 8e8f9193     ................
2000854c:	8f8e8e8d 9c989592 b3ada8a2 b0b6b8b7     ................
2000855c:	88929ca7 7d7d7e82 8783817f 93908d8a     .....~}}........
2000856c:	9b9a9996 9395989a 8c8c8d90 9994908d     ................
2000857c:	afaaa49e babab8b4 99a4aeb6 7f82878f     ................
2000858c:	83807e7e 928d8986 9e9c9a96 969b9e9f     ~~..............
2000859c:	878a8d92 908d8a88 9e9b9894 b3ada8a3     ................
200085ac:	b0b7bab8 87909ba6 7e7d7e81 8784817f     .........~}~....
200085bc:	95918e8a 9e9d9b99 94989c9e 8e8d8d90     ................
200085cc:	99969290 aaa6a19d b4b3b0ad 9ca6aeb3     ................
200085dc:	80848b93 82807e7e 908b8784 a19e9995     ....~~..........
200085ec:	9da1a3a3 898d9298 8c8a8887 9895928f     ................
200085fc:	aca7a29d b0b4b3b0 8f99a2ab 7c7e8187     ..............~|
2000860c:	827f7d7c 98918b87 a7a6a39e 949ba1a5     |}..............
2000861c:	88888a8d 938f8b89 a9a49f98 b5b5b2ae     ................
2000862c:	a0a8afb3 82899098 7c7c7d7f 9089837f     .........}||....
2000863c:	a7a29b95 9da2a7a8 878c9398 89878686     ................
2000864c:	98938e8b ada7a29c b0b4b4b2 8f98a2aa     ................
2000865c:	787a7f86 86807b79 9f9a938c a5a7a6a3     ..zxy{..........
2000866c:	91969ba0 88898a8c 928e8b89 a6a19b96     ................
2000867c:	b5b3afab a3aab0b4 828a939b 7b797a7c     ............|zy{
2000868c:	948d857f a7a4a09a 9aa0a5a7 868a9095     ................
2000869c:	87848283 97948f8b aca5a09b b1b2b1b0     ................
200086ac:	939ca6ad 777c828b 88807875 a29c958f     ......|wux......
200086bc:	a2a5a6a6 91969b9f 89898a8d 908d8b8a     ................
200086cc:	a29b9894 b7b5b0a9 a5acb3b7 8188919b     ................
200086dc:	7c79797b 968f8882 a3a2a09c 9a9ea1a2     {yy|............
200086ec:	888b9095 88868586 96928f8b a9a49f9b     ................
200086fc:	acafafad 949ca3a8 7f82868c 89837f7e     ............~...
2000870c:	9d99938e a0a1a1a0 94979b9e 87888b8f     ................
2000871c:	908d8987 a49e9994 b5b3afaa a4abb0b4     ................
2000872c:	868c949c 82808182 918d8885 9d9a9794     ................
2000873c:	9c9e9f9f 8b8f9498 85858588 95918d88     ................
2000874c:	aba69f99 adafafae 949aa3a9 8084888e     ................
2000875c:	8a878380 9a95908d a3a2a19e 959a9fa2     ................
2000876c:	88888b90 928d8988 a3a09b96 b0b0ada8     ................
2000877c:	a3a8adae 8b90969d 85848587 8d8b8986     ................
2000878c:	9d989490 9c9fa09f 8a8e9399 86848587     ................
2000879c:	958f8b88 aca6a09b adb1b2b0 959ca2a8     ................
200087ac:	86878a8f 8a888786 918f8d8c 9e9c9894     ................
200087bc:	989b9e9f 8a8c9094 8e8b8989 a59e9791     ................
200087cc:	b5b5b1ac a1a8aeb3 8a8f949a 85858587     ................
200087dc:	89878685 97938f8b 9f9f9e9b 8e93989c     ................
200087ec:	8787898a 948e8b89 ada7a19a afb1b2b1     ................
200087fc:	929aa1a8 8686888c 8b8a8886 92908f8d     ................
2000880c:	9c9a9794 989b9d9e 8b8c8f93 928f8d8b     ................
2000881c:	a7a09a95 b2b3b0ac a1a6acb0 8d8f949a     ................
2000882c:	8989898b 89888888 928e8b89 9e9e9b97     ................
2000883c:	8e93999d 8b89898a 97938f8d aca8a39d     ................
2000884c:	a8acadad 93999ea3 898a8b8e 8b8b8a89     ................
2000885c:	8e8c8989 99989490 999c9e9b 8c8c8e93     ................
2000886c:	9693908e a29e9a98 aeaca9a6 a4a8acad     ................
2000887c:	8f949a9f 898a8c8d 85858688 908b8986     ................
2000888c:	9c9a9794 8f94989b 8c8b8b8b 9795928f     ................
2000889c:	aba6a19c acaeafae 979ca2a8 898b8e92     ................
200088ac:	8b8b8988 8e8c8a8a 98979390 96989a9a     ................
200088bc:	8d8d9093 9895928f a7a29f9b b1b1aeab     ................
200088cc:	9fa5abae 8d8f9399 8c8c8c8c 898a8a8b     ................
200088dc:	8e8c8a89 93949391 8f909192 94918f8f     ................
200088ec:	9c9b9896 a9a6a29e a6a9abab 92969ca2     ................
200088fc:	8f8d8e8f 8f909090 8a898b8d 908e8c8b     ................
2000890c:	92939392 93919192 a09c9896 a4a3a3a3     ................
2000891c:	a8a9a8a6 9da1a4a6 90929498 8c8d8e8f     ................
2000892c:	8587888a 89878484 918f8d8b 91929291     ................
2000893c:	96949391 9e9c9997 a8a5a2a0 a3a6a8a8     ................
2000894c:	9094999e 8e8e8e8f 9292918f 8c8d8f91     ................
2000895c:	8d8d8d8c 908f8e8d 97959391 a3a19e9b     ................
2000896c:	a6a5a5a5 a8a8a7a7 9da1a4a7 8f929599     ................
2000897c:	8f8e8d8d 8b8d8e8f 8687888a 88888786     ................
2000898c:	94908e8b 9f9f9a93 a2a8a49e a2a6a5a1     ................
2000899c:	9ca0a0a0 8f8f9096 9894908f 9a9c9d9b     ................
200089ac:	8b8e9196 85858688 8f8c8a87 9c999592     ................
200089bc:	a6a5a3a0 a3a4a6a6 a4a4a3a3 9ea0a2a4     ................
200089cc:	98999a9b 94959697 878a8e91 84838485     ................
200089dc:	8d8a8785 93939290 94949494 99989694     ................
200089ec:	a4a09e9b a4a6a8a7 95989ba0 94949494     ................
200089fc:	90929393 8b8b8c8e 908d8b8a 97979693     ................
20008a0c:	98979798 9b99999a a4a2a19e ababa9a6     ................
20008a1c:	9da2a6aa 95959799 91939595 898a8d90     ................
20008a2c:	89878788 8f8d8c8b 8f909191 93918f8e     ................
20008a3c:	9d9a9895 a3a2a19f 9fa2a4a4 95979a9d     ................
20008a4c:	99989696 92959798 898a8c8e 94908c8a     ................
20008a5c:	9b9b9997 9697989a 9a999796 a4a2a09d     ................
20008a6c:	a9a9a7a5 9ea1a4a7 9697999b 92949595     ................
20008a7c:	898b8d8f 89878788 908f8d8b 8f909091     ................
20008a8c:	93918f8e 9d9b9895 a2a1a09f 9c9fa0a1     ................
20008a9c:	9395979a 97969393 95979797 8a8c8f92     ................
20008aac:	8e8a8989 9c9a9692 999b9b9c 9c9b9a99     ................
20008abc:	a5a3a19f a5a7a7a6 9c9ea0a3 97989899     ................
20008acc:	96989696 8a8d9094 87868587 928f8c89     ................
20008adc:	94959594 95949393 9a999795 9e9f9d9c     ................
20008aec:	9a9b9d9d 97989898 97979797 92949596     ................
20008afc:	8b8d8f90 93908c8a a09e9b97 9a9c9ea0     ................
20008b0c:	9a999999 a2a09e9c a3a4a4a3 9fa0a1a2     ................
20008b1c:	9a9b9c9e 96979899 8d909295 8584868a     ................
20008b2c:	918d8987 97979694 93939596 97959493     ................
20008b3c:	98989897 9a999898 9d9c9c9c 989a9c9d     ................
20008b4c:	8f909396 89898b8d 948f8c89 a19f9d99     ................
20008b5c:	9a9c9ea0 99979798 9f9f9d9b 9e9e9fa0     ................
20008b6c:	a2a09e9d 9fa1a2a3 9194989c 8a8b8c8e     ................
20008b7c:	88878889 95928f8b 97989897 8f909395     ................
20008b8c:	9492908f 97979796 9c9a9897 a2a2a19f     ................
20008b9c:	979b9fa1 8a8c8f92 8e8c8a89 99979491     ................
20008bac:	9d9e9e9c 9798999b 98959495 9d9d9b9a     ................
20008bbc:	9f9e9e9e a5a4a3a2 9ca0a3a5 8e929698     ................
20008bcc:	8b8a8a8b 928f8d8b 97989694 8f919395     ................
20008bdc:	8d8c8c8c 9595928f 97979897 9b9a9897     ................
20008bec:	9fa0a09d 96999c9e 8c8e9093 92908f8d     ................
20008bfc:	99989795 99999999 99999999 99999999     ................
20008c0c:	9999999a 9b999999 a5a4a29e a2a5a7a7     ................
20008c1c:	9296999e 8c8b8b8e 92908f8d 95959494     ................
20008c2c:	94959595 8c8e9092 8c8b8b8b 93918f8d     ................
20008c3c:	9e9c9996 a2a3a3a1 95999ca0 8d8e9092     ................
20008c4c:	93908d8d 9a999795 999a9a9a 95969798     ................
20008c5c:	95959494 96969595 9d9b9997 a8a5a3a0     ................
20008c6c:	a0a4a6a8 9093979b 8f8e8e8e 98969491     ................
20008c7c:	999a9999 90929497 87888a8e 8c8b8b88     ................
20008c8c:	9593918e 9d9a9696 a3a3a1a0 989b9fa2     ................
20008c9c:	90919395 9592908f a09f9d99 979b9e9f     ................
20008cac:	8d8f9294 91908e8d 99979593 9f9e9c9a     ................
20008cbc:	a6a5a2a0 9ea1a4a5 9495989b 96959494     ................
20008ccc:	9b9a9897 96989a9b 8b8d9093 8b8a898a     ................
20008cdc:	8e8d8c8c 90908f8e 9c989592 a4a4a3a0     ................
20008cec:	989b9ea2 93929395 9a979594 9e9f9e9d     ................
20008cfc:	95979a9c 8f909193 91919190 93929291     ................
20008d0c:	9b999895 a5a3a29e a1a4a6a6 96999c9f     ................
20008d1c:	94949394 9d9b9996 95999c9e 888b8e92     ................
20008d2c:	88878687 8a898888 8e8c8b8a 9c989591     ................
20008d3c:	a7a6a4a0 9a9ea2a5 8e8f9295 9c989390     ................
20008d4c:	a4a5a3a0 93979ca1 8b8b8d8f 8e8d8d8c     ................
20008d5c:	92908e8e 9e9a9794 a7a6a4a1 a3a5a7a8     ................
20008d6c:	94989b9f 96939293 a1a09d99 989da0a2     ................
20008d7c:	888b8e93 83828385 87868483 918e8b89     ................
20008d8c:	9d9a9794 a2a2a19f 9b9e9fa0 95959698     ................
20008d9c:	9f9b9896 a0a2a3a1 94979b9e 888b8e91     ................
20008dac:	89888887 93908d8b a09d9a96 a5a4a4a2     ................
20008dbc:	a1a3a4a5 979a9d9f 97959495 a1a19e9b     ................
20008dcc:	979ca0a1 8b8e9194 80838587 82807e7f     .............~..
20008ddc:	938f8b86 9f9d9a97 a2a2a2a1 9b9ea0a2     ................
20008dec:	92939597 a19c9894 a5a6a6a4 979a9ea2     ................
20008dfc:	8a8d9094 83828385 918d8884 a29f9b96     ................
20008e0c:	a8a8a6a5 a2a5a7a8 96989b9f 98959495     ................
20008e1c:	a3a19f9c 9a9da1a3 8c8f9397 7b7d8288     ..............}{
20008e2c:	807c7979 95908a85 9f9d9b99 a1a2a2a0     yy|.............
20008e3c:	9b9ea1a1 96969698 9e9b9896 a1a2a1a0     ................
20008e4c:	989a9d9f 878c9195 7e7d7f82 948e8882     ..........}~....
20008e5c:	a2a19d99 a7a7a5a4 a2a5a6a6 989a9c9f     ................
20008e6c:	99989797 a2a19f9c 999da1a2 898d9296     ................
20008e7c:	7a7d8185 827e7a79 96928d87 9e9d9c99     ..}zyz~.........
20008e8c:	a1a1a1a0 9a9c9ea0 9a99999a 9f9d9c9a     ................
20008e9c:	a1a1a1a0 989a9d9f 878c9195 807f8084     ................
20008eac:	938d8884 a19f9c98 a5a4a3a3 a3a5a5a6     ................
20008ebc:	9c9e9fa1 999a9b9b 9f9e9c9a 9c9d9fa0     ................
20008ecc:	898e9397 797b7e84 827d7979 96928d87     .....~{yyy}.....
20008edc:	9c9c9b99 a09f9d9c a1a0a0a0 9c9d9ea1     ................
20008eec:	98949699 a0a0a09d 9a9d9d9f 868a8d93     ................
20008efc:	7e7d7d81 968e8781 a7a7a49d 9fa1a3a6     .}}~............
20008f0c:	a3a19f9f a8aaa9a6 969aa0a5 93929193     ................
20008f1c:	98999895 8b8f9396 7c7e8286 817e7c7b     ..........~|{|~.
20008f2c:	948f8a85 9e9c9a97 a2a09f9e a4a4a4a3     ................
20008f3c:	979ca0a3 92909093 9f9c9995 959a9e9f     ................
20008f4c:	87898c90 87868686 918e8c89 a09d9a96     ................
20008f5c:	a4a4a3a1 a9a8a7a6 a4a8abab 9094999e     ................
20008f6c:	95918e8d 999a9997 8a8e9396 7e808285     ...............~
20008f7c:	86827f7e 97938e89 9d9d9b99 9f9e9d9d     ~...............
20008f8c:	a7a5a4a2 999ea3a7 8f8f9195 9a989592     ................
20008f9c:	96999b9b 8a8c8f93 89888888 94918e8b     ................
20008fac:	9f9d9a97 a3a1a1a0 aaa8a6a4 a6a9abab     ................
20008fbc:	91959aa0 928f8e8e 94969694 898b8e91     ................
20008fcc:	84848586 89878686 95928f8c 9c9b9a97     ................
20008fdc:	a1a09f9d a7a7a5a2 9a9fa3a6 8e8f9296     ................
20008fec:	9594918f 92959696 8c8c8e90 8e8d8c8b     ................
20008ffc:	96959390 a09e9b99 a5a4a2a1 a8a7a6a6     ................
2000900c:	a2a5a8a9 9195999e 93919090 91949494     ................
2000901c:	85878a8d 87858484 918f8c89 99989694     ................
2000902c:	9d9c9b9a a2a09f9d a2a3a4a3 979a9da1     ................
2000903c:	91919395 94949392 8e8f9193 8a898a8c     ................
2000904c:	928f8d8b 9d9b9895 a1a19f9e a3a2a2a2     ................
2000905c:	a7a6a6a4 9ea2a4a6 9294979b 91909091     ................
2000906c:	8b8d9091 83838588 8d8a8685 97959390     ................
2000907c:	9b9a9a98 9c9c9c9b a09f9d9c 9fa1a2a1     ................
2000908c:	95989b9d 92929292 92939292 8a8b8e90     ................
2000909c:	8c8a8989 9895928e a0a09e9b a0a2a2a1     ................
200090ac:	a1a0a0a0 a4a4a3a3 9a9da0a3 93939497     ................
200090bc:	93949493 888c8f92 81818285 8f8a8683     ................
200090cc:	9f9c9994 a0a1a1a0 9c9e9fa0 9b9b9c9c     ................
200090dc:	999a9b9c 96979898 97969595 8f929496     ................
200090ec:	8787888b 8f8c8987 9d9a9692 a3a2a19f     ................
200090fc:	a3a4a3a3 a0a1a1a2 9c9e9fa0 9698999a     ................
2000910c:	96959595 95969696 85898d91 82808081     ................
2000911c:	908b8884 a09e9c96 a5a6a4a2 9d9fa1a3     ................
2000912c:	9999999a 97999999 92939395 95949392     ................
2000913c:	91949596 8586898c 8c898685 a09b9590     ................
2000914c:	acaba8a4 a5a9abac 9a9c9ea1 97979898     ................
2000915c:	95959697 99989796 93969899 8185898e     ................
2000916c:	84807f7f 95908c88 a4a19e99 a9aaa9a7     ................
2000917c:	9ca0a4a7 94959698 93939394 95939292     ................
2000918c:	99999896 8c909497 84838487 938e8a87     ................
2000919c:	a29e9b97 adaca9a6 a6aaacad 96989ca1     ................
200091ac:	94959595 94949494 98979695 8f949798     ................
200091bc:	8082868b 8984807e 9995928e a6a3a09c     ....~...........
200091cc:	a9aaaaa8 989da2a6 90909294 93939291     ................
200091dc:	96959493 94969696 878a8d91 88868584     ................
200091ec:	9a96928d a4a19f9d abaaa9a7 a3a8abac     ................
200091fc:	96999c9f 95949495 93939495 96959493     ................
2000920c:	8c909395 82828488 918c8784 9d9c9996     ................
2000921c:	a3a19f9e a7a7a7a6 999ea2a5 91929395     ................
2000922c:	92929291 91908f91 94949391 8c8e9192     ................
2000923c:	8c8a8a8b 9b989490 a3a2a09d acaaa7a5     ................
2000924c:	a4a8abad 94989ba0 92929293 90919292     ................
2000925c:	92929190 8f919292 88888a8d 918e8c8a     ................
2000926c:	9b9a9794 a4a19f9d a7a9a9a7 959aa0a4     ................
2000927c:	908f9092 94949391 91929394 8e8f8f90     ................
2000928c:	8e8d8d8e 9391908f 9d9b9996 a2a1a09f     ................
2000929c:	a6a4a3a2 a4a7a8a7 999b9ea1 93949597     ................
200092ac:	8e909193 8d8d8d8e 8e8e8e8d 908f8f8f     ................
200092bc:	96949290 9b9a9897 9f9d9c9b a6a5a3a1     ................
200092cc:	9c9fa3a6 90919598 8d8d8e90 8a8b8c8d     ................
200092dc:	908f8e8b 97969492 96959596 9b999797     ................
200092ec:	a3a19f9d a7a6a5a4 a4a5a6a7 979a9da1     ................
200092fc:	92949495 8a8c8e90 8c8a8989 9492918f     ................
2000930c:	92949595 94929191 99989795 a19f9d9b     ................
2000931c:	a5a5a5a3 999da1a3 8f909295 90909090     ................
2000932c:	898b8c8e 8f8d8a89 98979592 98979797     ................
2000933c:	9d9b9a98 a19f9e9e a9a8a6a4 a2a6a9aa     ................
2000934c:	92969a9e 92919191 8a8d9091 89878788     ................
2000935c:	94918e8b 95959595 98979595 9a9b9b9a     ................
2000936c:	9c9a999a a2a1a09e 989c9fa1 92919395     ................
2000937c:	8f919292 8486898c 8f8a8785 9c9a9794     ................
2000938c:	9d9c9c9c a0a09f9e 9c9d9e9f a3a19e9c     ................
2000939c:	a1a3a4a4 97989b9e 94949596 898c9093     ................
200093ac:	87848587 96928e8a 98989898 9a999898     ................
200093bc:	9a9c9c9c 98979798 9e9d9b99 999b9d9e     ................
200093cc:	92939497 90929292 87898b8e 908c8987     ................
200093dc:	9b9a9794 9c9b9b9c a2a09e9c 9fa1a2a2     ................
200093ec:	9d9d9d9e 9f9f9e9e 989a9b9d 96969697     ................
200093fc:	8c8f9294 8585878a 938f8b87 9a9a9896     ................
2000940c:	9d9c9b9a 9c9d9e9e 93949699 9a979594     ................
2000941c:	9e9e9e9d 9395989c 8e909192 87898b8c     ................
2000942c:	8f8b8886 9e9b9894 9f9f9fa0 a2a1a09f     ................
2000943c:	9ea0a1a2 99999a9c 9c9b9a99 989a9d9e     ................
2000944c:	8e939799 8c908f8d 88878788 97928e8a     ................
2000945c:	a1a19f9b 979a9d9f 95939394 96969696     ................
2000946c:	99989897 98999a99 94949597 91929393     ................
2000947c:	8d8d8f91 908e8d8c 9b999694 9d9c9d9c     ................
2000948c:	a3a19f9f a1a4a5a4 95979a9d 98969493     ................
2000949c:	9d9c9c9a 9a9c9c9d 92949698 898a8c8f     ................
200094ac:	918e8c8a 9d9b9895 9e9e9e9e 9fa09f9f     ................
200094bc:	91959a9e 8c8b8b8d 9895928f 9a9b9b9a     ................
200094cc:	9395999a 8a8c8e90 8e8b8a8a 9d999591     ................
200094dc:	a3a3a2a0 a1a1a1a2 9c9ea0a1 90929598     ................
200094ec:	9492908f 9d9b9996 9a9c9d9e 90939699     ................
200094fc:	8a8a8c8e 918e8c8b 9f9d9995 9ea0a0a0     ................
2000950c:	9a9c9d9d 8f929598 8b898a8c 9693908d     ................
2000951c:	9b9b9b99 9395989a 8b8c8d90 92908e8c     ................
2000952c:	9e9b9895 a2a3a2a0 a0a0a0a1 9a9c9e9f     ................
2000953c:	91929497 95949291 9c9b9997 999a9b9b     ................
2000954c:	8f929497 8e8d8c8d 97959290 9f9d9c99     ................
2000955c:	9d9f9fa0 9a9b9c9d 8e919497 8e8c8c8d     ................
2000956c:	96959390 96979797 94959595 91919192     ................
2000957c:	93929191 9b999695 a3a2a09e a2a3a3a4     ................
2000958c:	979b9ea0 90909294 97959291 999a9a99     ................
2000959c:	95959798 93949494 94949494 96959594     ................
200095ac:	9e9b9997 a2a2a1a0 979b9fa1 8a8c9093     ................
200095bc:	8e8c8a89 95949391 93939394 95939393     ................
200095cc:	96969696 97979696 9a989797 a2a09d9b     ................
200095dc:	a1a3a4a3 93969b9e 908f8f90 97959391     ................
200095ec:	95979898 93939494 99979695 9b9b9b9b     ................
200095fc:	9798999a 9a999797 9e9e9c9b 969a9d9e     ................
2000960c:	8b8c8f92 918f8d8c 92939392 8f8e8f90     ................
2000961c:	99969391 9d9d9c9b 98999b9c 97969697     ................
2000962c:	9e9c9a98 a0a1a1a0 93969a9d 908e8f90     ................
2000963c:	95949391 93949696 95939191 9d9c9a98     ................
2000964c:	9c9e9f9f 97989a9b 9b999796 9d9e9d9c     ................
2000965c:	9296999c 8b8b8c8f 92908e8c 92949594     ................
2000966c:	8c8c8e90 9894918e a1a19f9c 9b9ea0a1     ................
2000967c:	96959698 9e9c9a98 999c9e9f 90929496     ................
2000968c:	94929190 96969695 8f909394 94918f8e     ................
2000969c:	a19e9b97 a3a4a5a3 989b9ea1 98969697     ................
200096ac:	98999999 8f919396 908f8e8e 93939291     ................
200096bc:	8e909193 8d8c8c8d 9d999490 a6a5a3a0     ................
200096cc:	9da0a4a5 93939699 9a999694 97999b9b     ................
200096dc:	92929395 92939392 90909192 8f8e8e8f     ................
200096ec:	9b979491 a4a3a19e a3a4a5a5 979a9ea1     ................
200096fc:	95959595 95969695 8f909294 908f8f8e     ................
2000970c:	8f8f9090 8e8e8e8e 93918f8e 9e9c9996     ................
2000971c:	a6a4a2a0 9fa2a4a6 9294979b 98969492     ................
2000972c:	97989899 91919295 91919291 90909091     ................
2000973c:	93929190 9e9b9896 a5a3a2a0 a5a6a6a5     ................
2000974c:	999b9fa2 94949596 94959595 8c8e9092     ................
2000975c:	8f8e8c8c 9091918f 8e8e8f8f 9693918f     ................
2000976c:	a19f9c99 a6a5a4a2 9ea1a4a5 9394969a     ................
2000977c:	95939393 92949596 8e8e8f90 91908f8e     ................
2000978c:	93929291 95949393 a09d9a97 a2a2a2a1     ................
2000979c:	a3a3a3a3 999c9fa2 93949597 91939393     ................
200097ac:	8a8c8e90 8c8b8a89 9492918e 93949494     ................
200097bc:	97959493 9e9d9b99 a2a1a09f a0a2a3a3     ................
200097cc:	9698999c 94949394 8e8f9193 8e8d8d8e     ................
200097dc:	9392908f 94949493 95949393 9f9d9a97     ................
200097ec:	a3a2a1a0 a6a5a5a4 9b9fa3a5 90919497     ................
200097fc:	8f909090 8b8b8c8d 8d8c8b8b 91909090     ................
2000980c:	93929292 9c999694 a2a1a09e a3a2a2a2     ................
2000981c:	a2a3a4a3 97989c9f                       ........

20009824 <_impure_ptr>:
20009824:	20009828                                (.. 

20009828 <impure_data>:
20009828:	00000000 20009b14 20009b7c 20009be4     ....... |.. ... 
	...
200098d0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200098e0:	0005deec 0000000b 00000000 00000000     ................
	...

20009c50 <__malloc_av_>:
	...
20009c58:	20009c50 20009c50 20009c58 20009c58     P.. P.. X.. X.. 
20009c68:	20009c60 20009c60 20009c68 20009c68     `.. `.. h.. h.. 
20009c78:	20009c70 20009c70 20009c78 20009c78     p.. p.. x.. x.. 
20009c88:	20009c80 20009c80 20009c88 20009c88     ... ... ... ... 
20009c98:	20009c90 20009c90 20009c98 20009c98     ... ... ... ... 
20009ca8:	20009ca0 20009ca0 20009ca8 20009ca8     ... ... ... ... 
20009cb8:	20009cb0 20009cb0 20009cb8 20009cb8     ... ... ... ... 
20009cc8:	20009cc0 20009cc0 20009cc8 20009cc8     ... ... ... ... 
20009cd8:	20009cd0 20009cd0 20009cd8 20009cd8     ... ... ... ... 
20009ce8:	20009ce0 20009ce0 20009ce8 20009ce8     ... ... ... ... 
20009cf8:	20009cf0 20009cf0 20009cf8 20009cf8     ... ... ... ... 
20009d08:	20009d00 20009d00 20009d08 20009d08     ... ... ... ... 
20009d18:	20009d10 20009d10 20009d18 20009d18     ... ... ... ... 
20009d28:	20009d20 20009d20 20009d28 20009d28      ..  .. (.. (.. 
20009d38:	20009d30 20009d30 20009d38 20009d38     0.. 0.. 8.. 8.. 
20009d48:	20009d40 20009d40 20009d48 20009d48     @.. @.. H.. H.. 
20009d58:	20009d50 20009d50 20009d58 20009d58     P.. P.. X.. X.. 
20009d68:	20009d60 20009d60 20009d68 20009d68     `.. `.. h.. h.. 
20009d78:	20009d70 20009d70 20009d78 20009d78     p.. p.. x.. x.. 
20009d88:	20009d80 20009d80 20009d88 20009d88     ... ... ... ... 
20009d98:	20009d90 20009d90 20009d98 20009d98     ... ... ... ... 
20009da8:	20009da0 20009da0 20009da8 20009da8     ... ... ... ... 
20009db8:	20009db0 20009db0 20009db8 20009db8     ... ... ... ... 
20009dc8:	20009dc0 20009dc0 20009dc8 20009dc8     ... ... ... ... 
20009dd8:	20009dd0 20009dd0 20009dd8 20009dd8     ... ... ... ... 
20009de8:	20009de0 20009de0 20009de8 20009de8     ... ... ... ... 
20009df8:	20009df0 20009df0 20009df8 20009df8     ... ... ... ... 
20009e08:	20009e00 20009e00 20009e08 20009e08     ... ... ... ... 
20009e18:	20009e10 20009e10 20009e18 20009e18     ... ... ... ... 
20009e28:	20009e20 20009e20 20009e28 20009e28      ..  .. (.. (.. 
20009e38:	20009e30 20009e30 20009e38 20009e38     0.. 0.. 8.. 8.. 
20009e48:	20009e40 20009e40 20009e48 20009e48     @.. @.. H.. H.. 
20009e58:	20009e50 20009e50 20009e58 20009e58     P.. P.. X.. X.. 
20009e68:	20009e60 20009e60 20009e68 20009e68     `.. `.. h.. h.. 
20009e78:	20009e70 20009e70 20009e78 20009e78     p.. p.. x.. x.. 
20009e88:	20009e80 20009e80 20009e88 20009e88     ... ... ... ... 
20009e98:	20009e90 20009e90 20009e98 20009e98     ... ... ... ... 
20009ea8:	20009ea0 20009ea0 20009ea8 20009ea8     ... ... ... ... 
20009eb8:	20009eb0 20009eb0 20009eb8 20009eb8     ... ... ... ... 
20009ec8:	20009ec0 20009ec0 20009ec8 20009ec8     ... ... ... ... 
20009ed8:	20009ed0 20009ed0 20009ed8 20009ed8     ... ... ... ... 
20009ee8:	20009ee0 20009ee0 20009ee8 20009ee8     ... ... ... ... 
20009ef8:	20009ef0 20009ef0 20009ef8 20009ef8     ... ... ... ... 
20009f08:	20009f00 20009f00 20009f08 20009f08     ... ... ... ... 
20009f18:	20009f10 20009f10 20009f18 20009f18     ... ... ... ... 
20009f28:	20009f20 20009f20 20009f28 20009f28      ..  .. (.. (.. 
20009f38:	20009f30 20009f30 20009f38 20009f38     0.. 0.. 8.. 8.. 
20009f48:	20009f40 20009f40 20009f48 20009f48     @.. @.. H.. H.. 
20009f58:	20009f50 20009f50 20009f58 20009f58     P.. P.. X.. X.. 
20009f68:	20009f60 20009f60 20009f68 20009f68     `.. `.. h.. h.. 
20009f78:	20009f70 20009f70 20009f78 20009f78     p.. p.. x.. x.. 
20009f88:	20009f80 20009f80 20009f88 20009f88     ... ... ... ... 
20009f98:	20009f90 20009f90 20009f98 20009f98     ... ... ... ... 
20009fa8:	20009fa0 20009fa0 20009fa8 20009fa8     ... ... ... ... 
20009fb8:	20009fb0 20009fb0 20009fb8 20009fb8     ... ... ... ... 
20009fc8:	20009fc0 20009fc0 20009fc8 20009fc8     ... ... ... ... 
20009fd8:	20009fd0 20009fd0 20009fd8 20009fd8     ... ... ... ... 
20009fe8:	20009fe0 20009fe0 20009fe8 20009fe8     ... ... ... ... 
20009ff8:	20009ff0 20009ff0 20009ff8 20009ff8     ... ... ... ... 
2000a008:	2000a000 2000a000 2000a008 2000a008     ... ... ... ... 
2000a018:	2000a010 2000a010 2000a018 2000a018     ... ... ... ... 
2000a028:	2000a020 2000a020 2000a028 2000a028      ..  .. (.. (.. 
2000a038:	2000a030 2000a030 2000a038 2000a038     0.. 0.. 8.. 8.. 
2000a048:	2000a040 2000a040 2000a048 2000a048     @.. @.. H.. H.. 

2000a058 <__malloc_sbrk_base>:
2000a058:	ffffffff                                ....

2000a05c <__malloc_trim_threshold>:
2000a05c:	00020000                                ....

2000a060 <print_mutex>:
	...

2000a068 <__mutex_array_end>:
2000a068:	100007f9 	.word	0x100007f9
2000a06c:	1000030d 	.word	0x1000030d
2000a070:	10000cb9 	.word	0x10000cb9
2000a074:	10000d79 	.word	0x10000d79

2000a078 <__frame_dummy_init_array_entry>:
2000a078:	100002ed 1000217d                       ....}!..
