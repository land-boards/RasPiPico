
build/program.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <__boot2_start__>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592102 	.word	0x61592102
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	7a4eb274 	.word	0x7a4eb274

Disassembly of section .text:

10000100 <__logical_binary_start>:
10000100:	20042000 	.word	0x20042000
10000104:	100001f7 	.word	0x100001f7
10000108:	100001c3 	.word	0x100001c3
1000010c:	100001c5 	.word	0x100001c5
10000110:	100001c1 	.word	0x100001c1
10000114:	100001c1 	.word	0x100001c1
10000118:	100001c1 	.word	0x100001c1
1000011c:	100001c1 	.word	0x100001c1
10000120:	100001c1 	.word	0x100001c1
10000124:	100001c1 	.word	0x100001c1
10000128:	100001c1 	.word	0x100001c1
1000012c:	100001c7 	.word	0x100001c7
10000130:	100001c1 	.word	0x100001c1
10000134:	100001c1 	.word	0x100001c1
10000138:	100001c9 	.word	0x100001c9
1000013c:	100001cb 	.word	0x100001cb
10000140:	100001cd 	.word	0x100001cd
10000144:	100001cd 	.word	0x100001cd
10000148:	100001cd 	.word	0x100001cd
1000014c:	100001cd 	.word	0x100001cd
10000150:	100001cd 	.word	0x100001cd
10000154:	100001cd 	.word	0x100001cd
10000158:	100001cd 	.word	0x100001cd
1000015c:	100001cd 	.word	0x100001cd
10000160:	100001cd 	.word	0x100001cd
10000164:	100001cd 	.word	0x100001cd
10000168:	100001cd 	.word	0x100001cd
1000016c:	100001cd 	.word	0x100001cd
10000170:	100001cd 	.word	0x100001cd
10000174:	100001cd 	.word	0x100001cd
10000178:	100001cd 	.word	0x100001cd
1000017c:	100001cd 	.word	0x100001cd
10000180:	100001cd 	.word	0x100001cd
10000184:	100001cd 	.word	0x100001cd
10000188:	100001cd 	.word	0x100001cd
1000018c:	100001cd 	.word	0x100001cd
10000190:	100001cd 	.word	0x100001cd
10000194:	100001cd 	.word	0x100001cd
10000198:	100001cd 	.word	0x100001cd
1000019c:	100001cd 	.word	0x100001cd
100001a0:	100001cd 	.word	0x100001cd
100001a4:	100001cd 	.word	0x100001cd
100001a8:	100001cd 	.word	0x100001cd
100001ac:	100001cd 	.word	0x100001cd
100001b0:	100001cd 	.word	0x100001cd
100001b4:	100001cd 	.word	0x100001cd
100001b8:	100001cd 	.word	0x100001cd
100001bc:	100001cd 	.word	0x100001cd

100001c0 <isr_invalid>:
100001c0:	be00      	bkpt	0x0000

100001c2 <isr_nmi>:
100001c2:	be00      	bkpt	0x0000

100001c4 <isr_hardfault>:
100001c4:	be00      	bkpt	0x0000

100001c6 <isr_svcall>:
100001c6:	be00      	bkpt	0x0000

100001c8 <isr_pendsv>:
100001c8:	be00      	bkpt	0x0000

100001ca <isr_systick>:
100001ca:	be00      	bkpt	0x0000

100001cc <__unhandled_user_irq>:
100001cc:	f000 f84b 	bl	10000266 <__get_current_exception>
100001d0:	3810      	subs	r0, #16

100001d2 <unhandled_user_irq_num_in_r0>:
100001d2:	be00      	bkpt	0x0000

100001d4 <binary_info_header>:
100001d4:	7188ebf2 	.word	0x7188ebf2
100001d8:	101af880 	.word	0x101af880
100001dc:	101af8a0 	.word	0x101af8a0
100001e0:	10000234 	.word	0x10000234
100001e4:	e71aa390 	.word	0xe71aa390

100001e8 <_entry_point>:
100001e8:	2000      	movs	r0, #0
100001ea:	4921      	ldr	r1, [pc, #132]	; (10000270 <__get_current_exception+0xa>)
100001ec:	6008      	str	r0, [r1, #0]
100001ee:	c806      	ldmia	r0!, {r1, r2}
100001f0:	f381 8808 	msr	MSP, r1
100001f4:	4710      	bx	r2

100001f6 <_reset_handler>:
100001f6:	481f      	ldr	r0, [pc, #124]	; (10000274 <__get_current_exception+0xe>)
100001f8:	6800      	ldr	r0, [r0, #0]
100001fa:	2800      	cmp	r0, #0
100001fc:	d12f      	bne.n	1000025e <hold_non_core0_in_bootrom>
100001fe:	a40d      	add	r4, pc, #52	; (adr r4, 10000234 <data_cpy_table>)
10000200:	cc0e      	ldmia	r4!, {r1, r2, r3}
10000202:	2900      	cmp	r1, #0
10000204:	d002      	beq.n	1000020c <_reset_handler+0x16>
10000206:	f000 f812 	bl	1000022e <data_cpy>
1000020a:	e7f9      	b.n	10000200 <_reset_handler+0xa>
1000020c:	491a      	ldr	r1, [pc, #104]	; (10000278 <__get_current_exception+0x12>)
1000020e:	4a1b      	ldr	r2, [pc, #108]	; (1000027c <__get_current_exception+0x16>)
10000210:	2000      	movs	r0, #0
10000212:	e000      	b.n	10000216 <bss_fill_test>

10000214 <bss_fill_loop>:
10000214:	c101      	stmia	r1!, {r0}

10000216 <bss_fill_test>:
10000216:	4291      	cmp	r1, r2
10000218:	d1fc      	bne.n	10000214 <bss_fill_loop>

1000021a <platform_entry>:
1000021a:	4919      	ldr	r1, [pc, #100]	; (10000280 <__get_current_exception+0x1a>)
1000021c:	4788      	blx	r1
1000021e:	4919      	ldr	r1, [pc, #100]	; (10000284 <__get_current_exception+0x1e>)
10000220:	4788      	blx	r1
10000222:	4919      	ldr	r1, [pc, #100]	; (10000288 <__get_current_exception+0x22>)
10000224:	4788      	blx	r1
10000226:	be00      	bkpt	0x0000
10000228:	e7fd      	b.n	10000226 <platform_entry+0xc>

1000022a <data_cpy_loop>:
1000022a:	c901      	ldmia	r1!, {r0}
1000022c:	c201      	stmia	r2!, {r0}

1000022e <data_cpy>:
1000022e:	429a      	cmp	r2, r3
10000230:	d3fb      	bcc.n	1000022a <data_cpy_loop>
10000232:	4770      	bx	lr

10000234 <data_cpy_table>:
10000234:	101af8a0 	.word	0x101af8a0
10000238:	200000c0 	.word	0x200000c0
1000023c:	20003048 	.word	0x20003048
10000240:	101b2828 	.word	0x101b2828
10000244:	20040000 	.word	0x20040000
10000248:	20040000 	.word	0x20040000
1000024c:	101b2828 	.word	0x101b2828
10000250:	20041000 	.word	0x20041000
10000254:	20041000 	.word	0x20041000
10000258:	00000000 	.word	0x00000000
1000025c:	4770      	bx	lr

1000025e <hold_non_core0_in_bootrom>:
1000025e:	480b      	ldr	r0, [pc, #44]	; (1000028c <__get_current_exception+0x26>)
10000260:	f000 ff66 	bl	10001130 <rom_func_lookup>
10000264:	4700      	bx	r0

10000266 <__get_current_exception>:
10000266:	f3ef 8005 	mrs	r0, IPSR
1000026a:	b2c0      	uxtb	r0, r0
1000026c:	4770      	bx	lr
1000026e:	0000      	.short	0x0000
10000270:	e000ed08 	.word	0xe000ed08
10000274:	d0000000 	.word	0xd0000000
10000278:	20003048 	.word	0x20003048
1000027c:	20023b8c 	.word	0x20023b8c
10000280:	100038d9 	.word	0x100038d9
10000284:	10006c3d 	.word	0x10006c3d
10000288:	100039f9 	.word	0x100039f9
1000028c:	00005657 	.word	0x00005657

10000290 <__bi_46>:
10000290:	50520006 5360b3ab 10008ce8              ..RP..`S....

1000029c <__bi_34>:
1000029c:	50520006 02031c86 10008cf0              ..RP........

100002a8 <__bi_26>:
100002a8:	50520006 9da22254 10008cf8              ..RPT"......

100002b4 <__bi_18>:
100002b4:	50520005 68f465de 101b2828              ..RP.e.h((..

100002c0 <_init>:
100002c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100002c2:	46c0      	nop			; (mov r8, r8)

100002c4 <__do_global_dtors_aux>:
100002c4:	b510      	push	{r4, lr}
100002c6:	4c06      	ldr	r4, [pc, #24]	; (100002e0 <__do_global_dtors_aux+0x1c>)
100002c8:	7823      	ldrb	r3, [r4, #0]
100002ca:	2b00      	cmp	r3, #0
100002cc:	d107      	bne.n	100002de <__do_global_dtors_aux+0x1a>
100002ce:	4b05      	ldr	r3, [pc, #20]	; (100002e4 <__do_global_dtors_aux+0x20>)
100002d0:	2b00      	cmp	r3, #0
100002d2:	d002      	beq.n	100002da <__do_global_dtors_aux+0x16>
100002d4:	4804      	ldr	r0, [pc, #16]	; (100002e8 <__do_global_dtors_aux+0x24>)
100002d6:	e000      	b.n	100002da <__do_global_dtors_aux+0x16>
100002d8:	bf00      	nop
100002da:	2301      	movs	r3, #1
100002dc:	7023      	strb	r3, [r4, #0]
100002de:	bd10      	pop	{r4, pc}
100002e0:	20003250 	.word	0x20003250
100002e4:	00000000 	.word	0x00000000
100002e8:	10008cb0 	.word	0x10008cb0

100002ec <frame_dummy>:
100002ec:	4b04      	ldr	r3, [pc, #16]	; (10000300 <frame_dummy+0x14>)
100002ee:	b510      	push	{r4, lr}
100002f0:	2b00      	cmp	r3, #0
100002f2:	d003      	beq.n	100002fc <frame_dummy+0x10>
100002f4:	4903      	ldr	r1, [pc, #12]	; (10000304 <frame_dummy+0x18>)
100002f6:	4804      	ldr	r0, [pc, #16]	; (10000308 <frame_dummy+0x1c>)
100002f8:	e000      	b.n	100002fc <frame_dummy+0x10>
100002fa:	bf00      	nop
100002fc:	bd10      	pop	{r4, pc}
100002fe:	46c0      	nop			; (mov r8, r8)
10000300:	00000000 	.word	0x00000000
10000304:	20003254 	.word	0x20003254
10000308:	10008cb0 	.word	0x10008cb0

1000030c <__aeabi_bits_init>:
1000030c:	4801      	ldr	r0, [pc, #4]	; (10000314 <__aeabi_bits_init+0x8>)
1000030e:	2104      	movs	r1, #4
10000310:	4b01      	ldr	r3, [pc, #4]	; (10000318 <__aeabi_bits_init+0xc>)
10000312:	4718      	bx	r3
10000314:	200026b0 	.word	0x200026b0
10000318:	10001151 	.word	0x10001151

1000031c <__wrap___aeabi_idiv>:
1000031c:	4a14      	ldr	r2, [pc, #80]	; (10000370 <divmod_s32s32_savestate+0x20>)
1000031e:	6f93      	ldr	r3, [r2, #120]	; 0x78
10000320:	089b      	lsrs	r3, r3, #2
10000322:	d215      	bcs.n	10000350 <divmod_s32s32_savestate>

10000324 <divmod_s32s32_unsafe>:
10000324:	6690      	str	r0, [r2, #104]	; 0x68
10000326:	66d1      	str	r1, [r2, #108]	; 0x6c
10000328:	2900      	cmp	r1, #0
1000032a:	d005      	beq.n	10000338 <divmod_s32s32_unsafe+0x14>
1000032c:	e7ff      	b.n	1000032e <divmod_s32s32_unsafe+0xa>
1000032e:	e7ff      	b.n	10000330 <divmod_s32s32_unsafe+0xc>
10000330:	e7ff      	b.n	10000332 <divmod_s32s32_unsafe+0xe>
10000332:	6f51      	ldr	r1, [r2, #116]	; 0x74
10000334:	6f10      	ldr	r0, [r2, #112]	; 0x70
10000336:	4770      	bx	lr
10000338:	b504      	push	{r2, lr}
1000033a:	2180      	movs	r1, #128	; 0x80
1000033c:	0609      	lsls	r1, r1, #24
1000033e:	17c2      	asrs	r2, r0, #31
10000340:	4051      	eors	r1, r2
10000342:	2800      	cmp	r0, #0
10000344:	d000      	beq.n	10000348 <divmod_s32s32_unsafe+0x24>
10000346:	43c8      	mvns	r0, r1
10000348:	f008 fc8a 	bl	10008c60 <____aeabi_idiv0_veneer>
1000034c:	2100      	movs	r1, #0
1000034e:	bd04      	pop	{r2, pc}

10000350 <divmod_s32s32_savestate>:
10000350:	6f93      	ldr	r3, [r2, #120]	; 0x78
10000352:	085b      	lsrs	r3, r3, #1
10000354:	d3fd      	bcc.n	10000352 <divmod_s32s32_savestate+0x2>
10000356:	b5f0      	push	{r4, r5, r6, r7, lr}
10000358:	6e94      	ldr	r4, [r2, #104]	; 0x68
1000035a:	6ed5      	ldr	r5, [r2, #108]	; 0x6c
1000035c:	6f57      	ldr	r7, [r2, #116]	; 0x74
1000035e:	6f16      	ldr	r6, [r2, #112]	; 0x70
10000360:	f7ff ffe0 	bl	10000324 <divmod_s32s32_unsafe>
10000364:	6694      	str	r4, [r2, #104]	; 0x68
10000366:	66d5      	str	r5, [r2, #108]	; 0x6c
10000368:	6757      	str	r7, [r2, #116]	; 0x74
1000036a:	6716      	str	r6, [r2, #112]	; 0x70
1000036c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000036e:	0000      	.short	0x0000
10000370:	d0000000 	.word	0xd0000000

10000374 <__wrap___aeabi_uidiv>:
10000374:	4a13      	ldr	r2, [pc, #76]	; (100003c4 <divmod_u32u32_savestate+0x20>)
10000376:	6f93      	ldr	r3, [r2, #120]	; 0x78
10000378:	089b      	lsrs	r3, r3, #2
1000037a:	d213      	bcs.n	100003a4 <divmod_u32u32_savestate>

1000037c <divmod_u32u32_unsafe>:
1000037c:	6610      	str	r0, [r2, #96]	; 0x60
1000037e:	6651      	str	r1, [r2, #100]	; 0x64
10000380:	2900      	cmp	r1, #0
10000382:	d005      	beq.n	10000390 <divmod_u32u32_unsafe+0x14>
10000384:	e7ff      	b.n	10000386 <divmod_u32u32_unsafe+0xa>
10000386:	e7ff      	b.n	10000388 <divmod_u32u32_unsafe+0xc>
10000388:	e7ff      	b.n	1000038a <divmod_u32u32_unsafe+0xe>
1000038a:	6f51      	ldr	r1, [r2, #116]	; 0x74
1000038c:	6f10      	ldr	r0, [r2, #112]	; 0x70
1000038e:	4770      	bx	lr
10000390:	b504      	push	{r2, lr}
10000392:	2800      	cmp	r0, #0
10000394:	d001      	beq.n	1000039a <divmod_u32u32_unsafe+0x1e>
10000396:	2000      	movs	r0, #0
10000398:	43c0      	mvns	r0, r0
1000039a:	f008 fc61 	bl	10008c60 <____aeabi_idiv0_veneer>
1000039e:	2100      	movs	r1, #0
100003a0:	bd04      	pop	{r2, pc}
100003a2:	46c0      	nop			; (mov r8, r8)

100003a4 <divmod_u32u32_savestate>:
100003a4:	6f93      	ldr	r3, [r2, #120]	; 0x78
100003a6:	085b      	lsrs	r3, r3, #1
100003a8:	d3fd      	bcc.n	100003a6 <divmod_u32u32_savestate+0x2>
100003aa:	b5f0      	push	{r4, r5, r6, r7, lr}
100003ac:	6e94      	ldr	r4, [r2, #104]	; 0x68
100003ae:	6ed5      	ldr	r5, [r2, #108]	; 0x6c
100003b0:	6f57      	ldr	r7, [r2, #116]	; 0x74
100003b2:	6f16      	ldr	r6, [r2, #112]	; 0x70
100003b4:	f7ff ffe2 	bl	1000037c <divmod_u32u32_unsafe>
100003b8:	6694      	str	r4, [r2, #104]	; 0x68
100003ba:	66d5      	str	r5, [r2, #108]	; 0x6c
100003bc:	6757      	str	r7, [r2, #116]	; 0x74
100003be:	6716      	str	r6, [r2, #112]	; 0x70
100003c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100003c2:	0000      	.short	0x0000
100003c4:	d0000000 	.word	0xd0000000

100003c8 <__wrap___aeabi_ldivmod>:
100003c8:	4694      	mov	ip, r2
100003ca:	4a4e      	ldr	r2, [pc, #312]	; (10000504 <udiv0+0x1a>)
100003cc:	6f92      	ldr	r2, [r2, #120]	; 0x78
100003ce:	0892      	lsrs	r2, r2, #2
100003d0:	4662      	mov	r2, ip
100003d2:	d201      	bcs.n	100003d8 <divmod_s64s64_savestate>
100003d4:	e030      	b.n	10000438 <divmod_s64s64_unsafe>
100003d6:	46c0      	nop			; (mov r8, r8)

100003d8 <divmod_s64s64_savestate>:
100003d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100003da:	4e4a      	ldr	r6, [pc, #296]	; (10000504 <udiv0+0x1a>)
100003dc:	6fb5      	ldr	r5, [r6, #120]	; 0x78
100003de:	086d      	lsrs	r5, r5, #1
100003e0:	d3fc      	bcc.n	100003dc <divmod_s64s64_savestate+0x4>
100003e2:	6e34      	ldr	r4, [r6, #96]	; 0x60
100003e4:	6e75      	ldr	r5, [r6, #100]	; 0x64
100003e6:	6f77      	ldr	r7, [r6, #116]	; 0x74
100003e8:	6f36      	ldr	r6, [r6, #112]	; 0x70
100003ea:	f000 f825 	bl	10000438 <divmod_s64s64_unsafe>
100003ee:	4694      	mov	ip, r2
100003f0:	4a44      	ldr	r2, [pc, #272]	; (10000504 <udiv0+0x1a>)
100003f2:	6614      	str	r4, [r2, #96]	; 0x60
100003f4:	6655      	str	r5, [r2, #100]	; 0x64
100003f6:	6757      	str	r7, [r2, #116]	; 0x74
100003f8:	6716      	str	r6, [r2, #112]	; 0x70
100003fa:	4662      	mov	r2, ip
100003fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100003fe:	46c0      	nop			; (mov r8, r8)

10000400 <__wrap___aeabi_uldivmod>:
10000400:	4694      	mov	ip, r2
10000402:	4a40      	ldr	r2, [pc, #256]	; (10000504 <udiv0+0x1a>)
10000404:	6f92      	ldr	r2, [r2, #120]	; 0x78
10000406:	0892      	lsrs	r2, r2, #2
10000408:	4662      	mov	r2, ip
1000040a:	d201      	bcs.n	10000410 <divmod_u64u64_savestate>
1000040c:	e058      	b.n	100004c0 <divmod_u64u64_unsafe>
1000040e:	46c0      	nop			; (mov r8, r8)

10000410 <divmod_u64u64_savestate>:
10000410:	b5f0      	push	{r4, r5, r6, r7, lr}
10000412:	4e3c      	ldr	r6, [pc, #240]	; (10000504 <udiv0+0x1a>)
10000414:	6fb5      	ldr	r5, [r6, #120]	; 0x78
10000416:	086d      	lsrs	r5, r5, #1
10000418:	d3fc      	bcc.n	10000414 <divmod_u64u64_savestate+0x4>
1000041a:	6e34      	ldr	r4, [r6, #96]	; 0x60
1000041c:	6e75      	ldr	r5, [r6, #100]	; 0x64
1000041e:	6f77      	ldr	r7, [r6, #116]	; 0x74
10000420:	6f36      	ldr	r6, [r6, #112]	; 0x70
10000422:	f000 f84d 	bl	100004c0 <divmod_u64u64_unsafe>
10000426:	4694      	mov	ip, r2
10000428:	4a36      	ldr	r2, [pc, #216]	; (10000504 <udiv0+0x1a>)
1000042a:	6614      	str	r4, [r2, #96]	; 0x60
1000042c:	6655      	str	r5, [r2, #100]	; 0x64
1000042e:	6757      	str	r7, [r2, #116]	; 0x74
10000430:	6716      	str	r6, [r2, #112]	; 0x70
10000432:	4662      	mov	r2, ip
10000434:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000436:	46c0      	nop			; (mov r8, r8)

10000438 <divmod_s64s64_unsafe>:
10000438:	2b00      	cmp	r3, #0
1000043a:	db24      	blt.n	10000486 <l41_1+0x26>
1000043c:	d011      	beq.n	10000462 <l41_1+0x2>
1000043e:	2900      	cmp	r1, #0
10000440:	da3e      	bge.n	100004c0 <divmod_u64u64_unsafe>
10000442:	b500      	push	{lr}
10000444:	43c9      	mvns	r1, r1
10000446:	4240      	negs	r0, r0
10000448:	d100      	bne.n	1000044c <l39_1>
1000044a:	3101      	adds	r1, #1

1000044c <l39_1>:
1000044c:	f000 f838 	bl	100004c0 <divmod_u64u64_unsafe>
10000450:	43c9      	mvns	r1, r1
10000452:	4240      	negs	r0, r0
10000454:	d100      	bne.n	10000458 <l40_1>
10000456:	3101      	adds	r1, #1

10000458 <l40_1>:
10000458:	43db      	mvns	r3, r3
1000045a:	4252      	negs	r2, r2
1000045c:	d100      	bne.n	10000460 <l41_1>
1000045e:	3301      	adds	r3, #1

10000460 <l41_1>:
10000460:	bd00      	pop	{pc}
10000462:	2a00      	cmp	r2, #0
10000464:	d1eb      	bne.n	1000043e <divmod_s64s64_unsafe+0x6>
10000466:	2800      	cmp	r0, #0
10000468:	d101      	bne.n	1000046e <l41_1+0xe>
1000046a:	2900      	cmp	r1, #0
1000046c:	d005      	beq.n	1000047a <l41_1+0x1a>
1000046e:	2000      	movs	r0, #0
10000470:	0fc9      	lsrs	r1, r1, #31
10000472:	07c9      	lsls	r1, r1, #31
10000474:	d101      	bne.n	1000047a <l41_1+0x1a>
10000476:	43c0      	mvns	r0, r0
10000478:	0841      	lsrs	r1, r0, #1
1000047a:	b500      	push	{lr}
1000047c:	f008 fbe8 	bl	10008c50 <____aeabi_ldiv0_veneer>
10000480:	2200      	movs	r2, #0
10000482:	2300      	movs	r3, #0
10000484:	bd00      	pop	{pc}
10000486:	b500      	push	{lr}
10000488:	2900      	cmp	r1, #0
1000048a:	db0a      	blt.n	100004a2 <l43_1+0x2>
1000048c:	43db      	mvns	r3, r3
1000048e:	4252      	negs	r2, r2
10000490:	d100      	bne.n	10000494 <l42_1>
10000492:	3301      	adds	r3, #1

10000494 <l42_1>:
10000494:	f000 f814 	bl	100004c0 <divmod_u64u64_unsafe>
10000498:	43c9      	mvns	r1, r1
1000049a:	4240      	negs	r0, r0
1000049c:	d100      	bne.n	100004a0 <l43_1>
1000049e:	3101      	adds	r1, #1

100004a0 <l43_1>:
100004a0:	bd00      	pop	{pc}
100004a2:	43c9      	mvns	r1, r1
100004a4:	4240      	negs	r0, r0
100004a6:	d100      	bne.n	100004aa <l44_1>
100004a8:	3101      	adds	r1, #1

100004aa <l44_1>:
100004aa:	43db      	mvns	r3, r3
100004ac:	4252      	negs	r2, r2
100004ae:	d100      	bne.n	100004b2 <l45_1>
100004b0:	3301      	adds	r3, #1

100004b2 <l45_1>:
100004b2:	f000 f805 	bl	100004c0 <divmod_u64u64_unsafe>
100004b6:	43db      	mvns	r3, r3
100004b8:	4252      	negs	r2, r2
100004ba:	d100      	bne.n	100004be <l46_1>
100004bc:	3301      	adds	r3, #1

100004be <l46_1>:
100004be:	bd00      	pop	{pc}

100004c0 <divmod_u64u64_unsafe>:
100004c0:	2900      	cmp	r1, #0
100004c2:	d123      	bne.n	1000050c <y64>
100004c4:	2b00      	cmp	r3, #0
100004c6:	d118      	bne.n	100004fa <udiv0+0x10>
100004c8:	2a00      	cmp	r2, #0
100004ca:	d00c      	beq.n	100004e6 <divmod_u64u64_unsafe+0x26>
100004cc:	46bc      	mov	ip, r7
100004ce:	4f0d      	ldr	r7, [pc, #52]	; (10000504 <udiv0+0x1a>)
100004d0:	6638      	str	r0, [r7, #96]	; 0x60
100004d2:	667a      	str	r2, [r7, #100]	; 0x64
100004d4:	2100      	movs	r1, #0
100004d6:	2300      	movs	r3, #0
100004d8:	e7ff      	b.n	100004da <divmod_u64u64_unsafe+0x1a>
100004da:	e7ff      	b.n	100004dc <divmod_u64u64_unsafe+0x1c>
100004dc:	e7ff      	b.n	100004de <divmod_u64u64_unsafe+0x1e>
100004de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
100004e0:	6f38      	ldr	r0, [r7, #112]	; 0x70
100004e2:	4667      	mov	r7, ip
100004e4:	4770      	bx	lr
100004e6:	2800      	cmp	r0, #0
100004e8:	d001      	beq.n	100004ee <udiv0+0x4>

100004ea <udiv0>:
100004ea:	4807      	ldr	r0, [pc, #28]	; (10000508 <udiv0+0x1e>)
100004ec:	0001      	movs	r1, r0
100004ee:	b500      	push	{lr}
100004f0:	f008 fbae 	bl	10008c50 <____aeabi_ldiv0_veneer>
100004f4:	2200      	movs	r2, #0
100004f6:	2300      	movs	r3, #0
100004f8:	bd00      	pop	{pc}
100004fa:	0002      	movs	r2, r0
100004fc:	000b      	movs	r3, r1
100004fe:	2000      	movs	r0, #0
10000500:	2100      	movs	r1, #0
10000502:	4770      	bx	lr
10000504:	d0000000 	.word	0xd0000000
10000508:	ffffffff 	.word	0xffffffff

1000050c <y64>:
1000050c:	2b00      	cmp	r3, #0
1000050e:	d000      	beq.n	10000512 <y64+0x6>
10000510:	e0bd      	b.n	1000068e <y64_x48>
10000512:	0c13      	lsrs	r3, r2, #16
10000514:	d126      	bne.n	10000564 <y64_x32>
10000516:	2a00      	cmp	r2, #0
10000518:	d0e7      	beq.n	100004ea <udiv0>
1000051a:	b480      	push	{r7}
1000051c:	4f10      	ldr	r7, [pc, #64]	; (10000560 <y64+0x54>)
1000051e:	6639      	str	r1, [r7, #96]	; 0x60
10000520:	667a      	str	r2, [r7, #100]	; 0x64
10000522:	e7ff      	b.n	10000524 <y64+0x18>
10000524:	e7ff      	b.n	10000526 <y64+0x1a>
10000526:	b430      	push	{r4, r5}
10000528:	0c04      	lsrs	r4, r0, #16
1000052a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
1000052c:	6f39      	ldr	r1, [r7, #112]	; 0x70
1000052e:	041b      	lsls	r3, r3, #16
10000530:	4323      	orrs	r3, r4
10000532:	663b      	str	r3, [r7, #96]	; 0x60
10000534:	e7ff      	b.n	10000536 <y64+0x2a>
10000536:	e7ff      	b.n	10000538 <y64+0x2c>
10000538:	e7ff      	b.n	1000053a <y64+0x2e>
1000053a:	46c0      	nop			; (mov r8, r8)
1000053c:	b284      	uxth	r4, r0
1000053e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
10000540:	6f3d      	ldr	r5, [r7, #112]	; 0x70
10000542:	041b      	lsls	r3, r3, #16
10000544:	4323      	orrs	r3, r4
10000546:	663b      	str	r3, [r7, #96]	; 0x60
10000548:	e7ff      	b.n	1000054a <y64+0x3e>
1000054a:	e7ff      	b.n	1000054c <y64+0x40>
1000054c:	46c0      	nop			; (mov r8, r8)
1000054e:	2300      	movs	r3, #0
10000550:	042c      	lsls	r4, r5, #16
10000552:	0c2d      	lsrs	r5, r5, #16
10000554:	6f7a      	ldr	r2, [r7, #116]	; 0x74
10000556:	6f38      	ldr	r0, [r7, #112]	; 0x70
10000558:	1900      	adds	r0, r0, r4
1000055a:	4169      	adcs	r1, r5
1000055c:	bcb0      	pop	{r4, r5, r7}
1000055e:	4770      	bx	lr
10000560:	d0000000 	.word	0xd0000000

10000564 <y64_x32>:
10000564:	b5f0      	push	{r4, r5, r6, r7, lr}
10000566:	4694      	mov	ip, r2
10000568:	2500      	movs	r5, #0
1000056a:	0e14      	lsrs	r4, r2, #24
1000056c:	d101      	bne.n	10000572 <y64_x32+0xe>
1000056e:	0212      	lsls	r2, r2, #8
10000570:	3508      	adds	r5, #8
10000572:	0f14      	lsrs	r4, r2, #28
10000574:	d101      	bne.n	1000057a <y64_x32+0x16>
10000576:	0112      	lsls	r2, r2, #4
10000578:	3504      	adds	r5, #4
1000057a:	0f94      	lsrs	r4, r2, #30
1000057c:	d101      	bne.n	10000582 <y64_x32+0x1e>
1000057e:	0092      	lsls	r2, r2, #2
10000580:	3502      	adds	r5, #2
10000582:	0fd4      	lsrs	r4, r2, #31
10000584:	d101      	bne.n	1000058a <y64_x32+0x26>
10000586:	0052      	lsls	r2, r2, #1
10000588:	3501      	adds	r5, #1
1000058a:	0bd4      	lsrs	r4, r2, #15
1000058c:	3401      	adds	r4, #1
1000058e:	4f25      	ldr	r7, [pc, #148]	; (10000624 <y64_x32+0xc0>)
10000590:	667c      	str	r4, [r7, #100]	; 0x64
10000592:	4c25      	ldr	r4, [pc, #148]	; (10000628 <y64_x32+0xc4>)
10000594:	663c      	str	r4, [r7, #96]	; 0x60
10000596:	0c0e      	lsrs	r6, r1, #16
10000598:	b293      	uxth	r3, r2
1000059a:	e7ff      	b.n	1000059c <y64_x32+0x38>
1000059c:	e7ff      	b.n	1000059e <y64_x32+0x3a>
1000059e:	e7ff      	b.n	100005a0 <y64_x32+0x3c>
100005a0:	6f3c      	ldr	r4, [r7, #112]	; 0x70
100005a2:	4366      	muls	r6, r4
100005a4:	0c36      	lsrs	r6, r6, #16
100005a6:	0377      	lsls	r7, r6, #13
100005a8:	46be      	mov	lr, r7
100005aa:	4373      	muls	r3, r6
100005ac:	0bdf      	lsrs	r7, r3, #15
100005ae:	045b      	lsls	r3, r3, #17
100005b0:	1ac0      	subs	r0, r0, r3
100005b2:	41b9      	sbcs	r1, r7
100005b4:	0c13      	lsrs	r3, r2, #16
100005b6:	4373      	muls	r3, r6
100005b8:	18db      	adds	r3, r3, r3
100005ba:	1ac9      	subs	r1, r1, r3
100005bc:	08ce      	lsrs	r6, r1, #3
100005be:	4366      	muls	r6, r4
100005c0:	0c36      	lsrs	r6, r6, #16
100005c2:	44b6      	add	lr, r6
100005c4:	b293      	uxth	r3, r2
100005c6:	4373      	muls	r3, r6
100005c8:	0f1f      	lsrs	r7, r3, #28
100005ca:	011b      	lsls	r3, r3, #4
100005cc:	1ac0      	subs	r0, r0, r3
100005ce:	41b9      	sbcs	r1, r7
100005d0:	0c13      	lsrs	r3, r2, #16
100005d2:	4373      	muls	r3, r6
100005d4:	0b1f      	lsrs	r7, r3, #12
100005d6:	051b      	lsls	r3, r3, #20
100005d8:	1ac0      	subs	r0, r0, r3
100005da:	41b9      	sbcs	r1, r7
100005dc:	0d86      	lsrs	r6, r0, #22
100005de:	028f      	lsls	r7, r1, #10
100005e0:	433e      	orrs	r6, r7
100005e2:	4366      	muls	r6, r4
100005e4:	0c36      	lsrs	r6, r6, #16
100005e6:	2d09      	cmp	r5, #9
100005e8:	db24      	blt.n	10000634 <last0>
100005ea:	0a52      	lsrs	r2, r2, #9
100005ec:	4372      	muls	r2, r6
100005ee:	1a80      	subs	r0, r0, r2
100005f0:	0377      	lsls	r7, r6, #13
100005f2:	0a46      	lsrs	r6, r0, #9
100005f4:	4366      	muls	r6, r4
100005f6:	0c36      	lsrs	r6, r6, #16
100005f8:	2316      	movs	r3, #22
100005fa:	1b5b      	subs	r3, r3, r5
100005fc:	40de      	lsrs	r6, r3
100005fe:	40df      	lsrs	r7, r3
10000600:	19bf      	adds	r7, r7, r6
10000602:	4664      	mov	r4, ip
10000604:	4366      	muls	r6, r4
10000606:	1b82      	subs	r2, r0, r6
10000608:	4670      	mov	r0, lr
1000060a:	3504      	adds	r5, #4
1000060c:	3306      	adds	r3, #6
1000060e:	0001      	movs	r1, r0
10000610:	40d9      	lsrs	r1, r3
10000612:	40a8      	lsls	r0, r5
10000614:	19c0      	adds	r0, r0, r7
10000616:	d300      	bcc.n	1000061a <y64_x32+0xb6>
10000618:	3101      	adds	r1, #1
1000061a:	42a2      	cmp	r2, r4
1000061c:	d206      	bcs.n	1000062c <y64_x32+0xc8>
1000061e:	2300      	movs	r3, #0
10000620:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000622:	0000      	.short	0x0000
10000624:	d0000000 	.word	0xd0000000
10000628:	ffffffff 	.word	0xffffffff
1000062c:	1b12      	subs	r2, r2, r4
1000062e:	3001      	adds	r0, #1
10000630:	d3f3      	bcc.n	1000061a <y64_x32+0xb6>
10000632:	e7f1      	b.n	10000618 <y64_x32+0xb4>

10000634 <last0>:
10000634:	2709      	movs	r7, #9
10000636:	1b7f      	subs	r7, r7, r5
10000638:	40fe      	lsrs	r6, r7
1000063a:	4664      	mov	r4, ip
1000063c:	b2a2      	uxth	r2, r4
1000063e:	4372      	muls	r2, r6
10000640:	1a80      	subs	r0, r0, r2
10000642:	d200      	bcs.n	10000646 <last0+0x12>
10000644:	3901      	subs	r1, #1
10000646:	0c22      	lsrs	r2, r4, #16
10000648:	4372      	muls	r2, r6
1000064a:	0c13      	lsrs	r3, r2, #16
1000064c:	0412      	lsls	r2, r2, #16
1000064e:	1a82      	subs	r2, r0, r2
10000650:	4199      	sbcs	r1, r3
10000652:	000b      	movs	r3, r1
10000654:	4670      	mov	r0, lr
10000656:	3504      	adds	r5, #4
10000658:	3713      	adds	r7, #19
1000065a:	0001      	movs	r1, r0
1000065c:	40f9      	lsrs	r1, r7
1000065e:	40a8      	lsls	r0, r5
10000660:	1980      	adds	r0, r0, r6
10000662:	d300      	bcc.n	10000666 <last0+0x32>
10000664:	3101      	adds	r1, #1
10000666:	2b00      	cmp	r3, #0
10000668:	d102      	bne.n	10000670 <last0+0x3c>
1000066a:	42a2      	cmp	r2, r4
1000066c:	d20a      	bcs.n	10000684 <last0+0x50>
1000066e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000670:	3001      	adds	r0, #1
10000672:	d300      	bcc.n	10000676 <last0+0x42>
10000674:	3101      	adds	r1, #1
10000676:	1b12      	subs	r2, r2, r4
10000678:	d2fa      	bcs.n	10000670 <last0+0x3c>
1000067a:	3b01      	subs	r3, #1
1000067c:	d1f8      	bne.n	10000670 <last0+0x3c>
1000067e:	42a2      	cmp	r2, r4
10000680:	d200      	bcs.n	10000684 <last0+0x50>
10000682:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000684:	3001      	adds	r0, #1
10000686:	d300      	bcc.n	1000068a <last0+0x56>
10000688:	3101      	adds	r1, #1
1000068a:	1b12      	subs	r2, r2, r4
1000068c:	e7f7      	b.n	1000067e <last0+0x4a>

1000068e <y64_x48>:
1000068e:	b5f0      	push	{r4, r5, r6, r7, lr}
10000690:	0c1c      	lsrs	r4, r3, #16
10000692:	d000      	beq.n	10000696 <y64_x48+0x8>
10000694:	e080      	b.n	10000798 <y64_x64>
10000696:	b40c      	push	{r2, r3}
10000698:	2500      	movs	r5, #0
1000069a:	0a1c      	lsrs	r4, r3, #8
1000069c:	d104      	bne.n	100006a8 <y64_x48+0x1a>
1000069e:	021b      	lsls	r3, r3, #8
100006a0:	0e16      	lsrs	r6, r2, #24
100006a2:	4333      	orrs	r3, r6
100006a4:	0212      	lsls	r2, r2, #8
100006a6:	3508      	adds	r5, #8
100006a8:	0b1c      	lsrs	r4, r3, #12
100006aa:	d104      	bne.n	100006b6 <y64_x48+0x28>
100006ac:	011b      	lsls	r3, r3, #4
100006ae:	0f16      	lsrs	r6, r2, #28
100006b0:	4333      	orrs	r3, r6
100006b2:	0112      	lsls	r2, r2, #4
100006b4:	3504      	adds	r5, #4
100006b6:	0b9c      	lsrs	r4, r3, #14
100006b8:	d104      	bne.n	100006c4 <y64_x48+0x36>
100006ba:	009b      	lsls	r3, r3, #2
100006bc:	0f96      	lsrs	r6, r2, #30
100006be:	4333      	orrs	r3, r6
100006c0:	0092      	lsls	r2, r2, #2
100006c2:	3502      	adds	r5, #2
100006c4:	0bdc      	lsrs	r4, r3, #15
100006c6:	d102      	bne.n	100006ce <y64_x48+0x40>
100006c8:	1892      	adds	r2, r2, r2
100006ca:	415b      	adcs	r3, r3
100006cc:	3501      	adds	r5, #1
100006ce:	001c      	movs	r4, r3
100006d0:	1897      	adds	r7, r2, r2
100006d2:	4164      	adcs	r4, r4
100006d4:	3401      	adds	r4, #1
100006d6:	4f46      	ldr	r7, [pc, #280]	; (100007f0 <y64_x64+0x58>)
100006d8:	667c      	str	r4, [r7, #100]	; 0x64
100006da:	4c46      	ldr	r4, [pc, #280]	; (100007f4 <y64_x64+0x5c>)
100006dc:	663c      	str	r4, [r7, #96]	; 0x60
100006de:	0c0e      	lsrs	r6, r1, #16
100006e0:	e7ff      	b.n	100006e2 <y64_x48+0x54>
100006e2:	e7ff      	b.n	100006e4 <y64_x48+0x56>
100006e4:	e7ff      	b.n	100006e6 <y64_x48+0x58>
100006e6:	46c0      	nop			; (mov r8, r8)
100006e8:	6f3c      	ldr	r4, [r7, #112]	; 0x70
100006ea:	4366      	muls	r6, r4
100006ec:	0c36      	lsrs	r6, r6, #16
100006ee:	0377      	lsls	r7, r6, #13
100006f0:	46be      	mov	lr, r7
100006f2:	b297      	uxth	r7, r2
100006f4:	4377      	muls	r7, r6
100006f6:	1bc0      	subs	r0, r0, r7
100006f8:	d200      	bcs.n	100006fc <y64_x48+0x6e>
100006fa:	3901      	subs	r1, #1
100006fc:	1bc0      	subs	r0, r0, r7
100006fe:	d200      	bcs.n	10000702 <y64_x48+0x74>
10000700:	3901      	subs	r1, #1
10000702:	b29f      	uxth	r7, r3
10000704:	4377      	muls	r7, r6
10000706:	1bc9      	subs	r1, r1, r7
10000708:	1bc9      	subs	r1, r1, r7
1000070a:	0c17      	lsrs	r7, r2, #16
1000070c:	4377      	muls	r7, r6
1000070e:	047e      	lsls	r6, r7, #17
10000710:	0bff      	lsrs	r7, r7, #15
10000712:	1b80      	subs	r0, r0, r6
10000714:	41b9      	sbcs	r1, r7
10000716:	08ce      	lsrs	r6, r1, #3
10000718:	4366      	muls	r6, r4
1000071a:	0c36      	lsrs	r6, r6, #16
1000071c:	2d0c      	cmp	r5, #12
1000071e:	db33      	blt.n	10000788 <last1>
10000720:	44b6      	add	lr, r6
10000722:	0b12      	lsrs	r2, r2, #12
10000724:	051f      	lsls	r7, r3, #20
10000726:	433a      	orrs	r2, r7
10000728:	0b1b      	lsrs	r3, r3, #12
1000072a:	b297      	uxth	r7, r2
1000072c:	4377      	muls	r7, r6
1000072e:	1bc0      	subs	r0, r0, r7
10000730:	d200      	bcs.n	10000734 <y64_x48+0xa6>
10000732:	3901      	subs	r1, #1
10000734:	b29f      	uxth	r7, r3
10000736:	4377      	muls	r7, r6
10000738:	1bc9      	subs	r1, r1, r7
1000073a:	0c17      	lsrs	r7, r2, #16
1000073c:	4377      	muls	r7, r6
1000073e:	043e      	lsls	r6, r7, #16
10000740:	0c3f      	lsrs	r7, r7, #16
10000742:	1b80      	subs	r0, r0, r6
10000744:	41b9      	sbcs	r1, r7
10000746:	0d86      	lsrs	r6, r0, #22
10000748:	028f      	lsls	r7, r1, #10
1000074a:	433e      	orrs	r6, r7
1000074c:	4366      	muls	r6, r4
1000074e:	2729      	movs	r7, #41	; 0x29
10000750:	1b7f      	subs	r7, r7, r5
10000752:	40fe      	lsrs	r6, r7
10000754:	3d0c      	subs	r5, #12
10000756:	4677      	mov	r7, lr
10000758:	40af      	lsls	r7, r5
1000075a:	19bf      	adds	r7, r7, r6
1000075c:	bc30      	pop	{r4, r5}
1000075e:	b2a2      	uxth	r2, r4
10000760:	b2ab      	uxth	r3, r5
10000762:	4372      	muls	r2, r6
10000764:	4373      	muls	r3, r6
10000766:	1a80      	subs	r0, r0, r2
10000768:	4199      	sbcs	r1, r3
1000076a:	0c22      	lsrs	r2, r4, #16
1000076c:	4372      	muls	r2, r6
1000076e:	0c13      	lsrs	r3, r2, #16
10000770:	0412      	lsls	r2, r2, #16
10000772:	1a80      	subs	r0, r0, r2
10000774:	4199      	sbcs	r1, r3
10000776:	0002      	movs	r2, r0
10000778:	000b      	movs	r3, r1
1000077a:	3701      	adds	r7, #1
1000077c:	1b00      	subs	r0, r0, r4
1000077e:	41a9      	sbcs	r1, r5
10000780:	d2f9      	bcs.n	10000776 <y64_x48+0xe8>
10000782:	1e78      	subs	r0, r7, #1
10000784:	2100      	movs	r1, #0
10000786:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000788 <last1>:
10000788:	270c      	movs	r7, #12
1000078a:	1b7f      	subs	r7, r7, r5
1000078c:	40fe      	lsrs	r6, r7
1000078e:	4677      	mov	r7, lr
10000790:	0b7f      	lsrs	r7, r7, #13
10000792:	40af      	lsls	r7, r5
10000794:	19ff      	adds	r7, r7, r7
10000796:	e7e0      	b.n	1000075a <y64_x48+0xcc>

10000798 <y64_x64>:
10000798:	2400      	movs	r4, #0
1000079a:	1c5d      	adds	r5, r3, #1
1000079c:	d007      	beq.n	100007ae <y64_x64+0x16>
1000079e:	4f14      	ldr	r7, [pc, #80]	; (100007f0 <y64_x64+0x58>)
100007a0:	667d      	str	r5, [r7, #100]	; 0x64
100007a2:	6639      	str	r1, [r7, #96]	; 0x60
100007a4:	e7ff      	b.n	100007a6 <y64_x64+0xe>
100007a6:	e7ff      	b.n	100007a8 <y64_x64+0x10>
100007a8:	e7ff      	b.n	100007aa <y64_x64+0x12>
100007aa:	e7ff      	b.n	100007ac <y64_x64+0x14>
100007ac:	6f3c      	ldr	r4, [r7, #112]	; 0x70
100007ae:	b295      	uxth	r5, r2
100007b0:	b29e      	uxth	r6, r3
100007b2:	4365      	muls	r5, r4
100007b4:	4366      	muls	r6, r4
100007b6:	1b40      	subs	r0, r0, r5
100007b8:	41b1      	sbcs	r1, r6
100007ba:	0c15      	lsrs	r5, r2, #16
100007bc:	0c1e      	lsrs	r6, r3, #16
100007be:	4365      	muls	r5, r4
100007c0:	4366      	muls	r6, r4
100007c2:	0436      	lsls	r6, r6, #16
100007c4:	0c2f      	lsrs	r7, r5, #16
100007c6:	433e      	orrs	r6, r7
100007c8:	042d      	lsls	r5, r5, #16
100007ca:	1b40      	subs	r0, r0, r5
100007cc:	41b1      	sbcs	r1, r6
100007ce:	4299      	cmp	r1, r3
100007d0:	d204      	bcs.n	100007dc <y64_x64+0x44>
100007d2:	0002      	movs	r2, r0
100007d4:	000b      	movs	r3, r1
100007d6:	0020      	movs	r0, r4
100007d8:	2100      	movs	r1, #0
100007da:	bdf0      	pop	{r4, r5, r6, r7, pc}
100007dc:	d101      	bne.n	100007e2 <y64_x64+0x4a>
100007de:	4290      	cmp	r0, r2
100007e0:	d3f7      	bcc.n	100007d2 <y64_x64+0x3a>
100007e2:	1a80      	subs	r0, r0, r2
100007e4:	4199      	sbcs	r1, r3
100007e6:	3401      	adds	r4, #1
100007e8:	4299      	cmp	r1, r3
100007ea:	d3f2      	bcc.n	100007d2 <y64_x64+0x3a>
100007ec:	e7f6      	b.n	100007dc <y64_x64+0x44>
100007ee:	0000      	.short	0x0000
100007f0:	d0000000 	.word	0xd0000000
100007f4:	ffffffff 	.word	0xffffffff

100007f8 <hw_divider_save_state>:
100007f8:	b530      	push	{r4, r5, lr}
100007fa:	4d05      	ldr	r5, [pc, #20]	; (10000810 <hw_divider_save_state+0x18>)
100007fc:	6fac      	ldr	r4, [r5, #120]	; 0x78
100007fe:	0864      	lsrs	r4, r4, #1
10000800:	d3fd      	bcc.n	100007fe <hw_divider_save_state+0x6>
10000802:	6e29      	ldr	r1, [r5, #96]	; 0x60
10000804:	6e6a      	ldr	r2, [r5, #100]	; 0x64
10000806:	6f6b      	ldr	r3, [r5, #116]	; 0x74
10000808:	6f2c      	ldr	r4, [r5, #112]	; 0x70
1000080a:	c01e      	stmia	r0!, {r1, r2, r3, r4}
1000080c:	bd30      	pop	{r4, r5, pc}
1000080e:	0000      	.short	0x0000
10000810:	d0000000 	.word	0xd0000000

10000814 <hw_divider_restore_state>:
10000814:	b530      	push	{r4, r5, lr}
10000816:	4d03      	ldr	r5, [pc, #12]	; (10000824 <hw_divider_restore_state+0x10>)
10000818:	c81e      	ldmia	r0!, {r1, r2, r3, r4}
1000081a:	6629      	str	r1, [r5, #96]	; 0x60
1000081c:	666a      	str	r2, [r5, #100]	; 0x64
1000081e:	676b      	str	r3, [r5, #116]	; 0x74
10000820:	672c      	str	r4, [r5, #112]	; 0x70
10000822:	bd30      	pop	{r4, r5, pc}
10000824:	d0000000 	.word	0xd0000000

10000828 <__wrap___aeabi_drsub>:
10000828:	4048      	eors	r0, r1
1000082a:	4041      	eors	r1, r0
1000082c:	4048      	eors	r0, r1

1000082e <__wrap___aeabi_dsub>:
1000082e:	b418      	push	{r3, r4}
10000830:	4b11      	ldr	r3, [pc, #68]	; (10000878 <__wrap___aeabi_dmul+0x14>)
10000832:	685b      	ldr	r3, [r3, #4]
10000834:	46fc      	mov	ip, pc
10000836:	9301      	str	r3, [sp, #4]
10000838:	bd08      	pop	{r3, pc}
1000083a:	df04      	.short	0xdf04
1000083c:	10000a07 	.word	0x10000a07

10000840 <__wrap___aeabi_dadd>:
10000840:	b418      	push	{r3, r4}
10000842:	4b0d      	ldr	r3, [pc, #52]	; (10000878 <__wrap___aeabi_dmul+0x14>)
10000844:	681b      	ldr	r3, [r3, #0]
10000846:	46fc      	mov	ip, pc
10000848:	9301      	str	r3, [sp, #4]
1000084a:	bd08      	pop	{r3, pc}
1000084c:	0a11df00 	.word	0x0a11df00
10000850:	1000      	.short	0x1000

10000852 <__wrap___aeabi_ddiv>:
10000852:	b418      	push	{r3, r4}
10000854:	4b08      	ldr	r3, [pc, #32]	; (10000878 <__wrap___aeabi_dmul+0x14>)
10000856:	68db      	ldr	r3, [r3, #12]
10000858:	46fc      	mov	ip, pc
1000085a:	9301      	str	r3, [sp, #4]
1000085c:	bd08      	pop	{r3, pc}
1000085e:	df0c      	.short	0xdf0c
10000860:	10000cc9 	.word	0x10000cc9

10000864 <__wrap___aeabi_dmul>:
10000864:	b418      	push	{r3, r4}
10000866:	4b04      	ldr	r3, [pc, #16]	; (10000878 <__wrap___aeabi_dmul+0x14>)
10000868:	689b      	ldr	r3, [r3, #8]
1000086a:	46fc      	mov	ip, pc
1000086c:	9301      	str	r3, [sp, #4]
1000086e:	bd08      	pop	{r3, pc}
10000870:	0b6ddf08 	.word	0x0b6ddf08
10000874:	00001000 	.word	0x00001000
10000878:	20003050 	.word	0x20003050

1000087c <__wrap___aeabi_cdrcmple>:
1000087c:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
1000087e:	4050      	eors	r0, r2
10000880:	4042      	eors	r2, r0
10000882:	4050      	eors	r0, r2
10000884:	4059      	eors	r1, r3
10000886:	404b      	eors	r3, r1
10000888:	4059      	eors	r1, r3
1000088a:	e000      	b.n	1000088e <__aeabi_dfcmple_guts>

1000088c <__wrap___aeabi_cdcmpeq>:
1000088c:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}

1000088e <__aeabi_dfcmple_guts>:
1000088e:	4f15      	ldr	r7, [pc, #84]	; (100008e4 <__aeabi_dfcmple_guts+0x56>)
10000890:	004c      	lsls	r4, r1, #1
10000892:	0d64      	lsrs	r4, r4, #21
10000894:	d003      	beq.n	1000089e <__aeabi_dfcmple_guts+0x10>
10000896:	42bc      	cmp	r4, r7
10000898:	d104      	bne.n	100008a4 <__aeabi_dfcmple_guts+0x16>
1000089a:	030c      	lsls	r4, r1, #12
1000089c:	d814      	bhi.n	100008c8 <__aeabi_dfcmple_guts+0x3a>
1000089e:	2000      	movs	r0, #0
100008a0:	0d09      	lsrs	r1, r1, #20
100008a2:	0509      	lsls	r1, r1, #20
100008a4:	005c      	lsls	r4, r3, #1
100008a6:	0d64      	lsrs	r4, r4, #21
100008a8:	d003      	beq.n	100008b2 <__aeabi_dfcmple_guts+0x24>
100008aa:	42bc      	cmp	r4, r7
100008ac:	d104      	bne.n	100008b8 <__aeabi_dfcmple_guts+0x2a>
100008ae:	031c      	lsls	r4, r3, #12
100008b0:	d80a      	bhi.n	100008c8 <__aeabi_dfcmple_guts+0x3a>
100008b2:	2200      	movs	r2, #0
100008b4:	0d1b      	lsrs	r3, r3, #20
100008b6:	051b      	lsls	r3, r3, #20
100008b8:	2601      	movs	r6, #1
100008ba:	404b      	eors	r3, r1
100008bc:	d409      	bmi.n	100008d2 <__aeabi_dfcmple_guts+0x44>
100008be:	404b      	eors	r3, r1
100008c0:	d503      	bpl.n	100008ca <__aeabi_dfcmple_guts+0x3c>
100008c2:	428b      	cmp	r3, r1
100008c4:	d100      	bne.n	100008c8 <__aeabi_dfcmple_guts+0x3a>
100008c6:	4282      	cmp	r2, r0
100008c8:	bdff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7, pc}
100008ca:	4299      	cmp	r1, r3
100008cc:	d1fc      	bne.n	100008c8 <__aeabi_dfcmple_guts+0x3a>
100008ce:	4290      	cmp	r0, r2
100008d0:	bdff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7, pc}
100008d2:	430b      	orrs	r3, r1
100008d4:	18db      	adds	r3, r3, r3
100008d6:	4303      	orrs	r3, r0
100008d8:	4313      	orrs	r3, r2
100008da:	d0f5      	beq.n	100008c8 <__aeabi_dfcmple_guts+0x3a>
100008dc:	43c9      	mvns	r1, r1
100008de:	1849      	adds	r1, r1, r1
100008e0:	bdff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7, pc}
100008e2:	0000      	.short	0x0000
100008e4:	000007ff 	.word	0x000007ff

100008e8 <__wrap___aeabi_dcmplt>:
100008e8:	b500      	push	{lr}
100008ea:	f7ff ffcf 	bl	1000088c <__wrap___aeabi_cdcmpeq>
100008ee:	4180      	sbcs	r0, r0
100008f0:	bd00      	pop	{pc}
100008f2:	46c0      	nop			; (mov r8, r8)

100008f4 <__wrap___aeabi_dcmple>:
100008f4:	b500      	push	{lr}
100008f6:	f7ff ffc9 	bl	1000088c <__wrap___aeabi_cdcmpeq>
100008fa:	d901      	bls.n	10000900 <__wrap___aeabi_dcmple+0xc>
100008fc:	2000      	movs	r0, #0
100008fe:	bd00      	pop	{pc}
10000900:	2001      	movs	r0, #1
10000902:	bd00      	pop	{pc}

10000904 <__wrap___aeabi_dcmpge>:
10000904:	b500      	push	{lr}
10000906:	f7ff ffb9 	bl	1000087c <__wrap___aeabi_cdrcmple>
1000090a:	d901      	bls.n	10000910 <__wrap___aeabi_dcmpge+0xc>
1000090c:	2000      	movs	r0, #0
1000090e:	bd00      	pop	{pc}
10000910:	2001      	movs	r0, #1
10000912:	bd00      	pop	{pc}

10000914 <__wrap___aeabi_dcmpgt>:
10000914:	b500      	push	{lr}
10000916:	f7ff ffb1 	bl	1000087c <__wrap___aeabi_cdrcmple>
1000091a:	4180      	sbcs	r0, r0
1000091c:	bd00      	pop	{pc}

1000091e <__wrap___aeabi_dcmpun>:
1000091e:	2001      	movs	r0, #1
10000920:	0540      	lsls	r0, r0, #21
10000922:	004a      	lsls	r2, r1, #1
10000924:	1812      	adds	r2, r2, r0
10000926:	d804      	bhi.n	10000932 <__wrap___aeabi_dcmpun+0x14>
10000928:	005a      	lsls	r2, r3, #1
1000092a:	1812      	adds	r2, r2, r0
1000092c:	d801      	bhi.n	10000932 <__wrap___aeabi_dcmpun+0x14>
1000092e:	2000      	movs	r0, #0
10000930:	4770      	bx	lr
10000932:	2001      	movs	r0, #1
10000934:	4770      	bx	lr
10000936:	2000      	movs	r0, #0
10000938:	4770      	bx	lr
	...

1000093c <__wrap___aeabi_ui2d>:
1000093c:	2100      	movs	r1, #0
1000093e:	2800      	cmp	r0, #0
10000940:	d105      	bne.n	1000094e <__wrap___aeabi_i2d+0xa>
10000942:	4770      	bx	lr

10000944 <__wrap___aeabi_i2d>:
10000944:	17c1      	asrs	r1, r0, #31
10000946:	4048      	eors	r0, r1
10000948:	1a40      	subs	r0, r0, r1
1000094a:	d0fa      	beq.n	10000942 <__wrap___aeabi_ui2d+0x6>
1000094c:	07c9      	lsls	r1, r1, #31
1000094e:	b513      	push	{r0, r1, r4, lr}
10000950:	4b06      	ldr	r3, [pc, #24]	; (1000096c <__wrap___aeabi_i2d+0x28>)
10000952:	681b      	ldr	r3, [r3, #0]
10000954:	4798      	blx	r3
10000956:	bc0c      	pop	{r2, r3}
10000958:	1c44      	adds	r4, r0, #1
1000095a:	40a2      	lsls	r2, r4
1000095c:	0510      	lsls	r0, r2, #20
1000095e:	0b12      	lsrs	r2, r2, #12
10000960:	4903      	ldr	r1, [pc, #12]	; (10000970 <__wrap___aeabi_i2d+0x2c>)
10000962:	1b09      	subs	r1, r1, r4
10000964:	0509      	lsls	r1, r1, #20
10000966:	4319      	orrs	r1, r3
10000968:	4311      	orrs	r1, r2
1000096a:	bd10      	pop	{r4, pc}
1000096c:	20023b64 	.word	0x20023b64
10000970:	0000041f 	.word	0x0000041f

10000974 <__wrap___aeabi_d2iz>:
10000974:	b510      	push	{r4, lr}
10000976:	004c      	lsls	r4, r1, #1
10000978:	0d62      	lsrs	r2, r4, #21
1000097a:	2380      	movs	r3, #128	; 0x80
1000097c:	18d2      	adds	r2, r2, r3
1000097e:	00db      	lsls	r3, r3, #3
10000980:	1ad2      	subs	r2, r2, r3
10000982:	055b      	lsls	r3, r3, #21
10000984:	2a7e      	cmp	r2, #126	; 0x7e
10000986:	dd10      	ble.n	100009aa <__wrap___aeabi_d2iz+0x36>
10000988:	3a9e      	subs	r2, #158	; 0x9e
1000098a:	da13      	bge.n	100009b4 <__wrap___aeabi_d2iz+0x40>
1000098c:	17cc      	asrs	r4, r1, #31
1000098e:	0309      	lsls	r1, r1, #12
10000990:	0849      	lsrs	r1, r1, #1
10000992:	4319      	orrs	r1, r3
10000994:	4252      	negs	r2, r2
10000996:	40d1      	lsrs	r1, r2
10000998:	0064      	lsls	r4, r4, #1
1000099a:	3401      	adds	r4, #1
1000099c:	3215      	adds	r2, #21
1000099e:	2a20      	cmp	r2, #32
100009a0:	da05      	bge.n	100009ae <__wrap___aeabi_d2iz+0x3a>
100009a2:	40d0      	lsrs	r0, r2
100009a4:	4308      	orrs	r0, r1
100009a6:	4360      	muls	r0, r4
100009a8:	bd10      	pop	{r4, pc}
100009aa:	2000      	movs	r0, #0
100009ac:	bd10      	pop	{r4, pc}
100009ae:	4608      	mov	r0, r1
100009b0:	4360      	muls	r0, r4
100009b2:	bd10      	pop	{r4, pc}
100009b4:	0fc8      	lsrs	r0, r1, #31
100009b6:	18c0      	adds	r0, r0, r3
100009b8:	3801      	subs	r0, #1
100009ba:	bd10      	pop	{r4, pc}

100009bc <__wrap___aeabi_d2uiz>:
100009bc:	b418      	push	{r3, r4}
100009be:	4b04      	ldr	r3, [pc, #16]	; (100009d0 <__wrap___aeabi_d2uiz+0x14>)
100009c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100009c2:	46fc      	mov	ip, pc
100009c4:	9301      	str	r3, [sp, #4]
100009c6:	bd08      	pop	{r3, pc}
100009c8:	0ef5df24 	.word	0x0ef5df24
100009cc:	00001000 	.word	0x00001000
100009d0:	20003050 	.word	0x20003050

100009d4 <double_table_shim_on_use_helper>:
100009d4:	b507      	push	{r0, r1, r2, lr}
100009d6:	4660      	mov	r0, ip
100009d8:	8801      	ldrh	r1, [r0, #0]
100009da:	0a0a      	lsrs	r2, r1, #8
100009dc:	3002      	adds	r0, #2
100009de:	2adf      	cmp	r2, #223	; 0xdf
100009e0:	d1fa      	bne.n	100009d8 <double_table_shim_on_use_helper+0x4>
100009e2:	b2c9      	uxtb	r1, r1
100009e4:	0882      	lsrs	r2, r0, #2
100009e6:	d304      	bcc.n	100009f2 <double_table_shim_on_use_helper+0x1e>
100009e8:	8802      	ldrh	r2, [r0, #0]
100009ea:	8840      	ldrh	r0, [r0, #2]
100009ec:	0400      	lsls	r0, r0, #16
100009ee:	4310      	orrs	r0, r2
100009f0:	e000      	b.n	100009f4 <double_table_shim_on_use_helper+0x20>
100009f2:	6800      	ldr	r0, [r0, #0]
100009f4:	4a01      	ldr	r2, [pc, #4]	; (100009fc <double_table_shim_on_use_helper+0x28>)
100009f6:	5050      	str	r0, [r2, r1]
100009f8:	9003      	str	r0, [sp, #12]
100009fa:	bd07      	pop	{r0, r1, r2, pc}
100009fc:	20003050 	.word	0x20003050

10000a00 <drsub_shim>:
10000a00:	b40f      	push	{r0, r1, r2, r3}
10000a02:	bc03      	pop	{r0, r1}
10000a04:	bc0c      	pop	{r2, r3}

10000a06 <dsub_shim>:
10000a06:	b5f0      	push	{r4, r5, r6, r7, lr}
10000a08:	2401      	movs	r4, #1
10000a0a:	07e4      	lsls	r4, r4, #31
10000a0c:	4063      	eors	r3, r4
10000a0e:	e000      	b.n	10000a12 <da_entry>

10000a10 <dadd_shim>:
10000a10:	b5f0      	push	{r4, r5, r6, r7, lr}

10000a12 <da_entry>:
10000a12:	0d0c      	lsrs	r4, r1, #20
10000a14:	0fcf      	lsrs	r7, r1, #31
10000a16:	1e66      	subs	r6, r4, #1
10000a18:	0536      	lsls	r6, r6, #20
10000a1a:	1b89      	subs	r1, r1, r6
10000a1c:	0564      	lsls	r4, r4, #21
10000a1e:	d303      	bcc.n	10000a28 <l7_1>
10000a20:	43c9      	mvns	r1, r1
10000a22:	4240      	negs	r0, r0
10000a24:	d300      	bcc.n	10000a28 <l7_1>
10000a26:	3101      	adds	r1, #1

10000a28 <l7_1>:
10000a28:	0d64      	lsrs	r4, r4, #21
10000a2a:	d003      	beq.n	10000a34 <l7_2>
10000a2c:	1c66      	adds	r6, r4, #1
10000a2e:	0af6      	lsrs	r6, r6, #11
10000a30:	d007      	beq.n	10000a42 <l7_3>
10000a32:	1be4      	subs	r4, r4, r7

10000a34 <l7_2>:
10000a34:	2000      	movs	r0, #0
10000a36:	007f      	lsls	r7, r7, #1
10000a38:	1c79      	adds	r1, r7, #1
10000a3a:	0789      	lsls	r1, r1, #30
10000a3c:	1289      	asrs	r1, r1, #10
10000a3e:	3c80      	subs	r4, #128	; 0x80
10000a40:	0324      	lsls	r4, r4, #12

10000a42 <l7_3>:
10000a42:	0d1d      	lsrs	r5, r3, #20
10000a44:	0fdf      	lsrs	r7, r3, #31
10000a46:	1e6e      	subs	r6, r5, #1
10000a48:	0536      	lsls	r6, r6, #20
10000a4a:	1b9b      	subs	r3, r3, r6
10000a4c:	056d      	lsls	r5, r5, #21
10000a4e:	d303      	bcc.n	10000a58 <l8_1>
10000a50:	43db      	mvns	r3, r3
10000a52:	4252      	negs	r2, r2
10000a54:	d300      	bcc.n	10000a58 <l8_1>
10000a56:	3301      	adds	r3, #1

10000a58 <l8_1>:
10000a58:	0d6d      	lsrs	r5, r5, #21
10000a5a:	d003      	beq.n	10000a64 <l8_2>
10000a5c:	1c6e      	adds	r6, r5, #1
10000a5e:	0af6      	lsrs	r6, r6, #11
10000a60:	d007      	beq.n	10000a72 <l8_3>
10000a62:	1bed      	subs	r5, r5, r7

10000a64 <l8_2>:
10000a64:	2200      	movs	r2, #0
10000a66:	007f      	lsls	r7, r7, #1
10000a68:	1c7b      	adds	r3, r7, #1
10000a6a:	079b      	lsls	r3, r3, #30
10000a6c:	129b      	asrs	r3, r3, #10
10000a6e:	3d80      	subs	r5, #128	; 0x80
10000a70:	032d      	lsls	r5, r5, #12

10000a72 <l8_3>:
10000a72:	1b2f      	subs	r7, r5, r4
10000a74:	1b66      	subs	r6, r4, r5
10000a76:	d458      	bmi.n	10000b2a <da_ygtx>
10000a78:	46a4      	mov	ip, r4
10000a7a:	2e20      	cmp	r6, #32
10000a7c:	da46      	bge.n	10000b0c <da_xrgty>
10000a7e:	3720      	adds	r7, #32
10000a80:	0014      	movs	r4, r2
10000a82:	40bc      	lsls	r4, r7

10000a84 <da_xgty0>:
10000a84:	001d      	movs	r5, r3
10000a86:	40bd      	lsls	r5, r7
10000a88:	40f2      	lsrs	r2, r6
10000a8a:	4133      	asrs	r3, r6
10000a8c:	432a      	orrs	r2, r5

10000a8e <da_add>:
10000a8e:	1880      	adds	r0, r0, r2
10000a90:	4159      	adcs	r1, r3

10000a92 <da_pack>:
10000a92:	0fcb      	lsrs	r3, r1, #31
10000a94:	d005      	beq.n	10000aa2 <da_pack+0x10>
10000a96:	43c9      	mvns	r1, r1
10000a98:	43c0      	mvns	r0, r0
10000a9a:	2200      	movs	r2, #0
10000a9c:	4264      	negs	r4, r4
10000a9e:	4150      	adcs	r0, r2
10000aa0:	4151      	adcs	r1, r2
10000aa2:	4662      	mov	r2, ip
10000aa4:	0d4d      	lsrs	r5, r1, #21
10000aa6:	d128      	bne.n	10000afa <da_0>
10000aa8:	0d0d      	lsrs	r5, r1, #20
10000aaa:	d107      	bne.n	10000abc <da_1>
10000aac:	2800      	cmp	r0, #0
10000aae:	d01f      	beq.n	10000af0 <da_5>

10000ab0 <da_2>:
10000ab0:	1924      	adds	r4, r4, r4
10000ab2:	4140      	adcs	r0, r0
10000ab4:	4149      	adcs	r1, r1
10000ab6:	3a01      	subs	r2, #1
10000ab8:	0d0d      	lsrs	r5, r1, #20
10000aba:	d0f9      	beq.n	10000ab0 <da_2>

10000abc <da_1>:
10000abc:	0064      	lsls	r4, r4, #1
10000abe:	d306      	bcc.n	10000ace <da_3>

10000ac0 <da_4>:
10000ac0:	3001      	adds	r0, #1
10000ac2:	d300      	bcc.n	10000ac6 <da_4+0x6>
10000ac4:	3101      	adds	r1, #1
10000ac6:	2c00      	cmp	r4, #0
10000ac8:	d101      	bne.n	10000ace <da_3>
10000aca:	0840      	lsrs	r0, r0, #1
10000acc:	0040      	lsls	r0, r0, #1

10000ace <da_3>:
10000ace:	3a01      	subs	r2, #1
10000ad0:	d40b      	bmi.n	10000aea <da_6>
10000ad2:	1c94      	adds	r4, r2, #2
10000ad4:	0ae4      	lsrs	r4, r4, #11
10000ad6:	d104      	bne.n	10000ae2 <da_7>
10000ad8:	0512      	lsls	r2, r2, #20
10000ada:	4411      	add	r1, r2
10000adc:	07db      	lsls	r3, r3, #31
10000ade:	4419      	add	r1, r3
10000ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000ae2 <da_7>:
10000ae2:	07d9      	lsls	r1, r3, #31
10000ae4:	4b20      	ldr	r3, [pc, #128]	; (10000b68 <da_xmgty+0x4>)
10000ae6:	4319      	orrs	r1, r3
10000ae8:	e000      	b.n	10000aec <da_6+0x2>

10000aea <da_6>:
10000aea:	07d9      	lsls	r1, r3, #31
10000aec:	2000      	movs	r0, #0
10000aee:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000af0 <da_5>:
10000af0:	2900      	cmp	r1, #0
10000af2:	d1dd      	bne.n	10000ab0 <da_2>
10000af4:	2c00      	cmp	r4, #0
10000af6:	d1db      	bne.n	10000ab0 <da_2>
10000af8:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000afa <da_0>:
10000afa:	3201      	adds	r2, #1
10000afc:	07c6      	lsls	r6, r0, #31
10000afe:	0840      	lsrs	r0, r0, #1
10000b00:	07cd      	lsls	r5, r1, #31
10000b02:	4328      	orrs	r0, r5
10000b04:	0849      	lsrs	r1, r1, #1
10000b06:	2e00      	cmp	r6, #0
10000b08:	d0e1      	beq.n	10000ace <da_3>
10000b0a:	e7d9      	b.n	10000ac0 <da_4>

10000b0c <da_xrgty>:
10000b0c:	2e3c      	cmp	r6, #60	; 0x3c
10000b0e:	da29      	bge.n	10000b64 <da_xmgty>
10000b10:	3e20      	subs	r6, #32
10000b12:	3740      	adds	r7, #64	; 0x40
10000b14:	0014      	movs	r4, r2
10000b16:	40bc      	lsls	r4, r7
10000b18:	d000      	beq.n	10000b1c <da_xrgty+0x10>
10000b1a:	2401      	movs	r4, #1
10000b1c:	40f2      	lsrs	r2, r6
10000b1e:	4314      	orrs	r4, r2
10000b20:	001a      	movs	r2, r3
10000b22:	40bb      	lsls	r3, r7
10000b24:	431c      	orrs	r4, r3
10000b26:	17d3      	asrs	r3, r2, #31
10000b28:	e7ac      	b.n	10000a84 <da_xgty0>

10000b2a <da_ygtx>:
10000b2a:	46ac      	mov	ip, r5
10000b2c:	2f20      	cmp	r7, #32
10000b2e:	da08      	bge.n	10000b42 <da_yrgtx>
10000b30:	3620      	adds	r6, #32
10000b32:	0004      	movs	r4, r0
10000b34:	40b4      	lsls	r4, r6

10000b36 <da_ygtx0>:
10000b36:	000d      	movs	r5, r1
10000b38:	40b5      	lsls	r5, r6
10000b3a:	40f8      	lsrs	r0, r7
10000b3c:	4139      	asrs	r1, r7
10000b3e:	4328      	orrs	r0, r5
10000b40:	e7a5      	b.n	10000a8e <da_add>

10000b42 <da_yrgtx>:
10000b42:	2f3c      	cmp	r7, #60	; 0x3c
10000b44:	da0c      	bge.n	10000b60 <da_ymgtx>
10000b46:	3f20      	subs	r7, #32
10000b48:	3640      	adds	r6, #64	; 0x40
10000b4a:	0004      	movs	r4, r0
10000b4c:	40b4      	lsls	r4, r6
10000b4e:	d000      	beq.n	10000b52 <da_yrgtx+0x10>
10000b50:	2401      	movs	r4, #1
10000b52:	40f8      	lsrs	r0, r7
10000b54:	4304      	orrs	r4, r0
10000b56:	0008      	movs	r0, r1
10000b58:	40b1      	lsls	r1, r6
10000b5a:	430c      	orrs	r4, r1
10000b5c:	17c1      	asrs	r1, r0, #31
10000b5e:	e7ea      	b.n	10000b36 <da_ygtx0>

10000b60 <da_ymgtx>:
10000b60:	0010      	movs	r0, r2
10000b62:	0019      	movs	r1, r3

10000b64 <da_xmgty>:
10000b64:	2400      	movs	r4, #0
10000b66:	e794      	b.n	10000a92 <da_pack>
10000b68:	7ff00000 	.word	0x7ff00000

10000b6c <dmul_shim>:
10000b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
10000b6e:	0d0c      	lsrs	r4, r1, #20
10000b70:	1e66      	subs	r6, r4, #1
10000b72:	0536      	lsls	r6, r6, #20
10000b74:	1b89      	subs	r1, r1, r6
10000b76:	0ae6      	lsrs	r6, r4, #11
10000b78:	0564      	lsls	r4, r4, #21
10000b7a:	0d64      	lsrs	r4, r4, #21
10000b7c:	d002      	beq.n	10000b84 <l11_1>
10000b7e:	1c65      	adds	r5, r4, #1
10000b80:	0aed      	lsrs	r5, r5, #11
10000b82:	d004      	beq.n	10000b8e <l11_2>

10000b84 <l11_1>:
10000b84:	2000      	movs	r0, #0
10000b86:	2101      	movs	r1, #1
10000b88:	0509      	lsls	r1, r1, #20
10000b8a:	3c80      	subs	r4, #128	; 0x80
10000b8c:	0324      	lsls	r4, r4, #12

10000b8e <l11_2>:
10000b8e:	46a4      	mov	ip, r4
10000b90:	0d1c      	lsrs	r4, r3, #20
10000b92:	1e67      	subs	r7, r4, #1
10000b94:	053f      	lsls	r7, r7, #20
10000b96:	1bdb      	subs	r3, r3, r7
10000b98:	0ae7      	lsrs	r7, r4, #11
10000b9a:	0564      	lsls	r4, r4, #21
10000b9c:	0d64      	lsrs	r4, r4, #21
10000b9e:	d002      	beq.n	10000ba6 <l12_1>
10000ba0:	1c65      	adds	r5, r4, #1
10000ba2:	0aed      	lsrs	r5, r5, #11
10000ba4:	d004      	beq.n	10000bb0 <l12_2>

10000ba6 <l12_1>:
10000ba6:	2200      	movs	r2, #0
10000ba8:	2301      	movs	r3, #1
10000baa:	051b      	lsls	r3, r3, #20
10000bac:	3c80      	subs	r4, #128	; 0x80
10000bae:	0324      	lsls	r4, r4, #12

10000bb0 <l12_2>:
10000bb0:	4077      	eors	r7, r6
10000bb2:	4464      	add	r4, ip
10000bb4:	b497      	push	{r0, r1, r2, r4, r7}
10000bb6:	b284      	uxth	r4, r0
10000bb8:	b296      	uxth	r6, r2
10000bba:	4374      	muls	r4, r6
10000bbc:	0c07      	lsrs	r7, r0, #16
10000bbe:	437e      	muls	r6, r7
10000bc0:	0c15      	lsrs	r5, r2, #16
10000bc2:	436f      	muls	r7, r5
10000bc4:	b280      	uxth	r0, r0
10000bc6:	4368      	muls	r0, r5
10000bc8:	1836      	adds	r6, r6, r0
10000bca:	d302      	bcc.n	10000bd2 <l13_1>
10000bcc:	2001      	movs	r0, #1
10000bce:	0400      	lsls	r0, r0, #16
10000bd0:	183f      	adds	r7, r7, r0

10000bd2 <l13_1>:
10000bd2:	0430      	lsls	r0, r6, #16
10000bd4:	0c35      	lsrs	r5, r6, #16
10000bd6:	1900      	adds	r0, r0, r4
10000bd8:	417d      	adcs	r5, r7
10000bda:	4684      	mov	ip, r0
10000bdc:	b288      	uxth	r0, r1
10000bde:	b29a      	uxth	r2, r3
10000be0:	4350      	muls	r0, r2
10000be2:	0c0c      	lsrs	r4, r1, #16
10000be4:	4362      	muls	r2, r4
10000be6:	0c1f      	lsrs	r7, r3, #16
10000be8:	437c      	muls	r4, r7
10000bea:	b28e      	uxth	r6, r1
10000bec:	437e      	muls	r6, r7
10000bee:	1992      	adds	r2, r2, r6
10000bf0:	d302      	bcc.n	10000bf8 <l14_1>
10000bf2:	2601      	movs	r6, #1
10000bf4:	0436      	lsls	r6, r6, #16
10000bf6:	19a4      	adds	r4, r4, r6

10000bf8 <l14_1>:
10000bf8:	0416      	lsls	r6, r2, #16
10000bfa:	0c17      	lsrs	r7, r2, #16
10000bfc:	1836      	adds	r6, r6, r0
10000bfe:	4167      	adcs	r7, r4
10000c00:	bc01      	pop	{r0}
10000c02:	b281      	uxth	r1, r0
10000c04:	b29a      	uxth	r2, r3
10000c06:	4351      	muls	r1, r2
10000c08:	0c04      	lsrs	r4, r0, #16
10000c0a:	4362      	muls	r2, r4
10000c0c:	0c1b      	lsrs	r3, r3, #16
10000c0e:	435c      	muls	r4, r3
10000c10:	b280      	uxth	r0, r0
10000c12:	4358      	muls	r0, r3
10000c14:	1812      	adds	r2, r2, r0
10000c16:	d302      	bcc.n	10000c1e <l15_1>
10000c18:	2001      	movs	r0, #1
10000c1a:	0400      	lsls	r0, r0, #16
10000c1c:	1824      	adds	r4, r4, r0

10000c1e <l15_1>:
10000c1e:	0410      	lsls	r0, r2, #16
10000c20:	0c13      	lsrs	r3, r2, #16
10000c22:	1840      	adds	r0, r0, r1
10000c24:	4163      	adcs	r3, r4
10000c26:	182d      	adds	r5, r5, r0
10000c28:	415e      	adcs	r6, r3
10000c2a:	2000      	movs	r0, #0
10000c2c:	4147      	adcs	r7, r0
10000c2e:	bc06      	pop	{r1, r2}
10000c30:	b288      	uxth	r0, r1
10000c32:	b293      	uxth	r3, r2
10000c34:	4358      	muls	r0, r3
10000c36:	0c0c      	lsrs	r4, r1, #16
10000c38:	4363      	muls	r3, r4
10000c3a:	0c12      	lsrs	r2, r2, #16
10000c3c:	4354      	muls	r4, r2
10000c3e:	b289      	uxth	r1, r1
10000c40:	4351      	muls	r1, r2
10000c42:	185b      	adds	r3, r3, r1
10000c44:	d302      	bcc.n	10000c4c <l16_1>
10000c46:	2101      	movs	r1, #1
10000c48:	0409      	lsls	r1, r1, #16
10000c4a:	1864      	adds	r4, r4, r1

10000c4c <l16_1>:
10000c4c:	0419      	lsls	r1, r3, #16
10000c4e:	0c1a      	lsrs	r2, r3, #16
10000c50:	1809      	adds	r1, r1, r0
10000c52:	4162      	adcs	r2, r4
10000c54:	186d      	adds	r5, r5, r1
10000c56:	4156      	adcs	r6, r2
10000c58:	2000      	movs	r0, #0
10000c5a:	4147      	adcs	r7, r0
10000c5c:	bc18      	pop	{r3, r4}
10000c5e:	02f9      	lsls	r1, r7, #11
10000c60:	0d72      	lsrs	r2, r6, #21
10000c62:	4311      	orrs	r1, r2
10000c64:	02f0      	lsls	r0, r6, #11
10000c66:	0d6a      	lsrs	r2, r5, #21
10000c68:	4310      	orrs	r0, r2
10000c6a:	02ed      	lsls	r5, r5, #11
10000c6c:	0d0a      	lsrs	r2, r1, #20
10000c6e:	d103      	bne.n	10000c78 <l16_1+0x2c>
10000c70:	196d      	adds	r5, r5, r5
10000c72:	4140      	adcs	r0, r0
10000c74:	4149      	adcs	r1, r1
10000c76:	3b01      	subs	r3, #1
10000c78:	4e12      	ldr	r6, [pc, #72]	; (10000cc4 <dm_1+0xa>)
10000c7a:	1b9b      	subs	r3, r3, r6
10000c7c:	0076      	lsls	r6, r6, #1
10000c7e:	42b3      	cmp	r3, r6
10000c80:	d20e      	bcs.n	10000ca0 <dm_0>
10000c82:	006d      	lsls	r5, r5, #1
10000c84:	d307      	bcc.n	10000c96 <l16_1+0x4a>
10000c86:	3001      	adds	r0, #1
10000c88:	2600      	movs	r6, #0
10000c8a:	4171      	adcs	r1, r6
10000c8c:	4666      	mov	r6, ip
10000c8e:	4335      	orrs	r5, r6
10000c90:	d101      	bne.n	10000c96 <l16_1+0x4a>
10000c92:	0840      	lsrs	r0, r0, #1
10000c94:	0040      	lsls	r0, r0, #1
10000c96:	051b      	lsls	r3, r3, #20
10000c98:	18c9      	adds	r1, r1, r3

10000c9a <dm_2>:
10000c9a:	07e4      	lsls	r4, r4, #31
10000c9c:	4421      	add	r1, r4
10000c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000ca0 <dm_0>:
10000ca0:	da0b      	bge.n	10000cba <dm_1>
10000ca2:	3301      	adds	r3, #1
10000ca4:	d106      	bne.n	10000cb4 <dm_0+0x14>
10000ca6:	3001      	adds	r0, #1
10000ca8:	d104      	bne.n	10000cb4 <dm_0+0x14>
10000caa:	3101      	adds	r1, #1
10000cac:	0d4f      	lsrs	r7, r1, #21
10000cae:	d001      	beq.n	10000cb4 <dm_0+0x14>
10000cb0:	0849      	lsrs	r1, r1, #1
10000cb2:	e7f2      	b.n	10000c9a <dm_2>
10000cb4:	07e1      	lsls	r1, r4, #31
10000cb6:	2000      	movs	r0, #0
10000cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000cba <dm_1>:
10000cba:	3601      	adds	r6, #1
10000cbc:	0531      	lsls	r1, r6, #20
10000cbe:	2000      	movs	r0, #0
10000cc0:	e7eb      	b.n	10000c9a <dm_2>
10000cc2:	0000      	.short	0x0000
10000cc4:	000003ff 	.word	0x000003ff

10000cc8 <ddiv_shim>:
10000cc8:	b5f0      	push	{r4, r5, r6, r7, lr}

10000cca <ddiv0>:
10000cca:	0d1c      	lsrs	r4, r3, #20
10000ccc:	1e67      	subs	r7, r4, #1
10000cce:	053f      	lsls	r7, r7, #20
10000cd0:	1bdb      	subs	r3, r3, r7
10000cd2:	0ae7      	lsrs	r7, r4, #11
10000cd4:	0564      	lsls	r4, r4, #21
10000cd6:	0d64      	lsrs	r4, r4, #21
10000cd8:	d002      	beq.n	10000ce0 <l19_1>
10000cda:	1c66      	adds	r6, r4, #1
10000cdc:	0af6      	lsrs	r6, r6, #11
10000cde:	d004      	beq.n	10000cea <l19_2>

10000ce0 <l19_1>:
10000ce0:	2200      	movs	r2, #0
10000ce2:	2301      	movs	r3, #1
10000ce4:	051b      	lsls	r3, r3, #20
10000ce6:	3c80      	subs	r4, #128	; 0x80
10000ce8:	0324      	lsls	r4, r4, #12

10000cea <l19_2>:
10000cea:	25d0      	movs	r5, #208	; 0xd0
10000cec:	062d      	lsls	r5, r5, #24
10000cee:	2600      	movs	r6, #0
10000cf0:	43f6      	mvns	r6, r6
10000cf2:	662e      	str	r6, [r5, #96]	; 0x60
10000cf4:	091e      	lsrs	r6, r3, #4
10000cf6:	666e      	str	r6, [r5, #100]	; 0x64
10000cf8:	0fce      	lsrs	r6, r1, #31
10000cfa:	19f6      	adds	r6, r6, r7
10000cfc:	46b4      	mov	ip, r6
10000cfe:	0049      	lsls	r1, r1, #1
10000d00:	0d4f      	lsrs	r7, r1, #21
10000d02:	d002      	beq.n	10000d0a <l19_2+0x20>
10000d04:	1c7e      	adds	r6, r7, #1
10000d06:	0af6      	lsrs	r6, r6, #11
10000d08:	d003      	beq.n	10000d12 <l19_2+0x28>
10000d0a:	2000      	movs	r0, #0
10000d0c:	2100      	movs	r1, #0
10000d0e:	3f40      	subs	r7, #64	; 0x40
10000d10:	033f      	lsls	r7, r7, #12
10000d12:	1b3e      	subs	r6, r7, r4
10000d14:	00b6      	lsls	r6, r6, #2
10000d16:	44b4      	add	ip, r6
10000d18:	3f01      	subs	r7, #1
10000d1a:	057f      	lsls	r7, r7, #21
10000d1c:	1bc9      	subs	r1, r1, r7
10000d1e:	0849      	lsrs	r1, r1, #1
10000d20:	6f2e      	ldr	r6, [r5, #112]	; 0x70
10000d22:	3601      	adds	r6, #1
10000d24:	0876      	lsrs	r6, r6, #1
10000d26:	029c      	lsls	r4, r3, #10
10000d28:	0d95      	lsrs	r5, r2, #22
10000d2a:	4325      	orrs	r5, r4
10000d2c:	4375      	muls	r5, r6
10000d2e:	13ed      	asrs	r5, r5, #15
10000d30:	4375      	muls	r5, r6
10000d32:	13ad      	asrs	r5, r5, #14
10000d34:	3501      	adds	r5, #1
10000d36:	106d      	asrs	r5, r5, #1
10000d38:	03f6      	lsls	r6, r6, #15
10000d3a:	1b76      	subs	r6, r6, r5
10000d3c:	b40c      	push	{r2, r3}
10000d3e:	02cc      	lsls	r4, r1, #11
10000d40:	0d45      	lsrs	r5, r0, #21
10000d42:	432c      	orrs	r4, r5
10000d44:	b2a2      	uxth	r2, r4
10000d46:	b2b3      	uxth	r3, r6
10000d48:	435a      	muls	r2, r3
10000d4a:	0c27      	lsrs	r7, r4, #16
10000d4c:	437b      	muls	r3, r7
10000d4e:	0c35      	lsrs	r5, r6, #16
10000d50:	436f      	muls	r7, r5
10000d52:	b2a4      	uxth	r4, r4
10000d54:	436c      	muls	r4, r5
10000d56:	191b      	adds	r3, r3, r4
10000d58:	d302      	bcc.n	10000d60 <l20_1>
10000d5a:	2401      	movs	r4, #1
10000d5c:	0424      	lsls	r4, r4, #16
10000d5e:	193f      	adds	r7, r7, r4

10000d60 <l20_1>:
10000d60:	041c      	lsls	r4, r3, #16
10000d62:	0c1d      	lsrs	r5, r3, #16
10000d64:	18a4      	adds	r4, r4, r2
10000d66:	417d      	adcs	r5, r7
10000d68:	1924      	adds	r4, r4, r4
10000d6a:	416d      	adcs	r5, r5
10000d6c:	9a00      	ldr	r2, [sp, #0]
10000d6e:	b291      	uxth	r1, r2
10000d70:	b2ac      	uxth	r4, r5
10000d72:	4361      	muls	r1, r4
10000d74:	0c17      	lsrs	r7, r2, #16
10000d76:	437c      	muls	r4, r7
10000d78:	0c2b      	lsrs	r3, r5, #16
10000d7a:	435f      	muls	r7, r3
10000d7c:	b292      	uxth	r2, r2
10000d7e:	435a      	muls	r2, r3
10000d80:	18a4      	adds	r4, r4, r2
10000d82:	d302      	bcc.n	10000d8a <l21_1>
10000d84:	2201      	movs	r2, #1
10000d86:	0412      	lsls	r2, r2, #16
10000d88:	18bf      	adds	r7, r7, r2

10000d8a <l21_1>:
10000d8a:	0422      	lsls	r2, r4, #16
10000d8c:	0c23      	lsrs	r3, r4, #16
10000d8e:	1852      	adds	r2, r2, r1
10000d90:	417b      	adcs	r3, r7
10000d92:	9c01      	ldr	r4, [sp, #4]
10000d94:	436c      	muls	r4, r5
10000d96:	191b      	adds	r3, r3, r4
10000d98:	0e52      	lsrs	r2, r2, #25
10000d9a:	01d9      	lsls	r1, r3, #7
10000d9c:	430a      	orrs	r2, r1
10000d9e:	0144      	lsls	r4, r0, #5
10000da0:	1aa0      	subs	r0, r4, r2
10000da2:	b281      	uxth	r1, r0
10000da4:	b2b2      	uxth	r2, r6
10000da6:	4351      	muls	r1, r2
10000da8:	1403      	asrs	r3, r0, #16
10000daa:	435a      	muls	r2, r3
10000dac:	0c36      	lsrs	r6, r6, #16
10000dae:	4373      	muls	r3, r6
10000db0:	b287      	uxth	r7, r0
10000db2:	4377      	muls	r7, r6
10000db4:	17d6      	asrs	r6, r2, #31
10000db6:	19d2      	adds	r2, r2, r7
10000db8:	2700      	movs	r7, #0
10000dba:	417e      	adcs	r6, r7
10000dbc:	0436      	lsls	r6, r6, #16
10000dbe:	199b      	adds	r3, r3, r6
10000dc0:	0417      	lsls	r7, r2, #16
10000dc2:	0c16      	lsrs	r6, r2, #16
10000dc4:	187f      	adds	r7, r7, r1
10000dc6:	415e      	adcs	r6, r3
10000dc8:	1673      	asrs	r3, r6, #25
10000dca:	18ed      	adds	r5, r5, r3
10000dcc:	01f3      	lsls	r3, r6, #7
10000dce:	2600      	movs	r6, #0
10000dd0:	3380      	adds	r3, #128	; 0x80
10000dd2:	4175      	adcs	r5, r6
10000dd4:	0fa9      	lsrs	r1, r5, #30
10000dd6:	d106      	bne.n	10000de6 <dd_0>
10000dd8:	0064      	lsls	r4, r4, #1
10000dda:	0a69      	lsrs	r1, r5, #9
10000ddc:	05e8      	lsls	r0, r5, #23
10000dde:	0a5b      	lsrs	r3, r3, #9
10000de0:	4318      	orrs	r0, r3
10000de2:	d209      	bcs.n	10000df8 <dd_1>
10000de4:	e02f      	b.n	10000e46 <dd_2>

10000de6 <dd_0>:
10000de6:	2204      	movs	r2, #4
10000de8:	4494      	add	ip, r2
10000dea:	3380      	adds	r3, #128	; 0x80
10000dec:	4175      	adcs	r5, r6
10000dee:	0aa9      	lsrs	r1, r5, #10
10000df0:	05a8      	lsls	r0, r5, #22
10000df2:	0a9b      	lsrs	r3, r3, #10
10000df4:	4318      	orrs	r0, r3
10000df6:	d326      	bcc.n	10000e46 <dd_2>

10000df8 <dd_1>:
10000df8:	4140      	adcs	r0, r0
10000dfa:	4149      	adcs	r1, r1
10000dfc:	0424      	lsls	r4, r4, #16
10000dfe:	9a00      	ldr	r2, [sp, #0]
10000e00:	9b01      	ldr	r3, [sp, #4]
10000e02:	000d      	movs	r5, r1
10000e04:	4355      	muls	r5, r2
10000e06:	1b64      	subs	r4, r4, r5
10000e08:	4343      	muls	r3, r0
10000e0a:	1ae4      	subs	r4, r4, r3
10000e0c:	b295      	uxth	r5, r2
10000e0e:	b286      	uxth	r6, r0
10000e10:	4375      	muls	r5, r6
10000e12:	0c17      	lsrs	r7, r2, #16
10000e14:	437e      	muls	r6, r7
10000e16:	0c03      	lsrs	r3, r0, #16
10000e18:	435f      	muls	r7, r3
10000e1a:	b292      	uxth	r2, r2
10000e1c:	435a      	muls	r2, r3
10000e1e:	18b6      	adds	r6, r6, r2
10000e20:	d302      	bcc.n	10000e28 <l23_1>
10000e22:	2201      	movs	r2, #1
10000e24:	0412      	lsls	r2, r2, #16
10000e26:	18bf      	adds	r7, r7, r2

10000e28 <l23_1>:
10000e28:	0432      	lsls	r2, r6, #16
10000e2a:	0c33      	lsrs	r3, r6, #16
10000e2c:	1952      	adds	r2, r2, r5
10000e2e:	417b      	adcs	r3, r7
10000e30:	4252      	negs	r2, r2
10000e32:	419c      	sbcs	r4, r3
10000e34:	2c00      	cmp	r4, #0
10000e36:	d402      	bmi.n	10000e3e <l23_1+0x16>
10000e38:	2200      	movs	r2, #0
10000e3a:	3001      	adds	r0, #1
10000e3c:	4151      	adcs	r1, r2
10000e3e:	0840      	lsrs	r0, r0, #1
10000e40:	07ca      	lsls	r2, r1, #31
10000e42:	4310      	orrs	r0, r2
10000e44:	0849      	lsrs	r1, r1, #1

10000e46 <dd_2>:
10000e46:	b002      	add	sp, #8
10000e48:	4662      	mov	r2, ip
10000e4a:	07d7      	lsls	r7, r2, #31
10000e4c:	1092      	asrs	r2, r2, #2
10000e4e:	4b08      	ldr	r3, [pc, #32]	; (10000e70 <dd_4+0x6>)
10000e50:	18d2      	adds	r2, r2, r3
10000e52:	4b08      	ldr	r3, [pc, #32]	; (10000e74 <dd_4+0xa>)
10000e54:	429a      	cmp	r2, r3
10000e56:	d203      	bcs.n	10000e60 <dd_3>
10000e58:	0512      	lsls	r2, r2, #20
10000e5a:	1889      	adds	r1, r1, r2

10000e5c <dd_5>:
10000e5c:	19c9      	adds	r1, r1, r7
10000e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000e60 <dd_3>:
10000e60:	2000      	movs	r0, #0
10000e62:	2a00      	cmp	r2, #0
10000e64:	dc01      	bgt.n	10000e6a <dd_4>
10000e66:	0039      	movs	r1, r7
10000e68:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000e6a <dd_4>:
10000e6a:	3301      	adds	r3, #1
10000e6c:	0519      	lsls	r1, r3, #20
10000e6e:	e7f5      	b.n	10000e5c <dd_5>
10000e70:	000003fd 	.word	0x000003fd
10000e74:	000007fe 	.word	0x000007fe

10000e78 <dcordic_rot_step>:
10000e78:	4662      	mov	r2, ip
10000e7a:	ca18      	ldmia	r2!, {r3, r4}
10000e7c:	4694      	mov	ip, r2
10000e7e:	2900      	cmp	r1, #0
10000e80:	da1a      	bge.n	10000eb8 <dcordic_rot_step+0x40>
10000e82:	18c0      	adds	r0, r0, r3
10000e84:	4161      	adcs	r1, r4
10000e86:	465b      	mov	r3, fp
10000e88:	413b      	asrs	r3, r7
10000e8a:	465c      	mov	r4, fp
10000e8c:	40b4      	lsls	r4, r6
10000e8e:	4652      	mov	r2, sl
10000e90:	40fa      	lsrs	r2, r7
10000e92:	4322      	orrs	r2, r4
10000e94:	4644      	mov	r4, r8
10000e96:	464d      	mov	r5, r9
10000e98:	4162      	adcs	r2, r4
10000e9a:	416b      	adcs	r3, r5
10000e9c:	4690      	mov	r8, r2
10000e9e:	4699      	mov	r9, r3
10000ea0:	462b      	mov	r3, r5
10000ea2:	40b3      	lsls	r3, r6
10000ea4:	413d      	asrs	r5, r7
10000ea6:	40fc      	lsrs	r4, r7
10000ea8:	431c      	orrs	r4, r3
10000eaa:	4652      	mov	r2, sl
10000eac:	465b      	mov	r3, fp
10000eae:	41a2      	sbcs	r2, r4
10000eb0:	41ab      	sbcs	r3, r5
10000eb2:	4692      	mov	sl, r2
10000eb4:	469b      	mov	fp, r3
10000eb6:	4770      	bx	lr
10000eb8:	1ac0      	subs	r0, r0, r3
10000eba:	41a1      	sbcs	r1, r4
10000ebc:	464b      	mov	r3, r9
10000ebe:	413b      	asrs	r3, r7
10000ec0:	464c      	mov	r4, r9
10000ec2:	40b4      	lsls	r4, r6
10000ec4:	4642      	mov	r2, r8
10000ec6:	40fa      	lsrs	r2, r7
10000ec8:	4322      	orrs	r2, r4
10000eca:	4654      	mov	r4, sl
10000ecc:	465d      	mov	r5, fp
10000ece:	4162      	adcs	r2, r4
10000ed0:	416b      	adcs	r3, r5
10000ed2:	4692      	mov	sl, r2
10000ed4:	469b      	mov	fp, r3
10000ed6:	462b      	mov	r3, r5
10000ed8:	40b3      	lsls	r3, r6
10000eda:	413d      	asrs	r5, r7
10000edc:	40fc      	lsrs	r4, r7
10000ede:	431c      	orrs	r4, r3
10000ee0:	4642      	mov	r2, r8
10000ee2:	464b      	mov	r3, r9
10000ee4:	41a2      	sbcs	r2, r4
10000ee6:	41ab      	sbcs	r3, r5
10000ee8:	4690      	mov	r8, r2
10000eea:	4699      	mov	r9, r3
10000eec:	4770      	bx	lr

10000eee <ret_dzero>:
10000eee:	2000      	movs	r0, #0
10000ef0:	2100      	movs	r1, #0
10000ef2:	4770      	bx	lr

10000ef4 <double2uint_shim>:
10000ef4:	2200      	movs	r2, #0

10000ef6 <double2ufix_shim>:
10000ef6:	b500      	push	{lr}
10000ef8:	3220      	adds	r2, #32
10000efa:	f000 f804 	bl	10000f06 <double2ufix64_shim>
10000efe:	0008      	movs	r0, r1
10000f00:	bd00      	pop	{pc}
	...

10000f04 <double2uint64_shim>:
10000f04:	2200      	movs	r2, #0

10000f06 <double2ufix64_shim>:
10000f06:	150b      	asrs	r3, r1, #20
10000f08:	d4f1      	bmi.n	10000eee <ret_dzero>

10000f0a <d2fix>:
10000f0a:	b510      	push	{r4, lr}
10000f0c:	4694      	mov	ip, r2
10000f0e:	f000 f82f 	bl	10000f70 <dunpacks>
10000f12:	1414      	asrs	r4, r2, #16
10000f14:	3401      	adds	r4, #1
10000f16:	da00      	bge.n	10000f1a <d2fix+0x10>
10000f18:	2100      	movs	r1, #0
10000f1a:	17cb      	asrs	r3, r1, #31
10000f1c:	4c13      	ldr	r4, [pc, #76]	; (10000f6c <d2fix_a+0x4c>)
10000f1e:	4720      	bx	r4

10000f20 <d2fix_a>:
10000f20:	4462      	add	r2, ip
10000f22:	3a34      	subs	r2, #52	; 0x34
10000f24:	d40c      	bmi.n	10000f40 <d2fix_a+0x20>
10000f26:	2a0c      	cmp	r2, #12
10000f28:	da07      	bge.n	10000f3a <d2fix_a+0x1a>
10000f2a:	0004      	movs	r4, r0
10000f2c:	4091      	lsls	r1, r2
10000f2e:	4090      	lsls	r0, r2
10000f30:	4252      	negs	r2, r2
10000f32:	3220      	adds	r2, #32
10000f34:	40d4      	lsrs	r4, r2
10000f36:	4321      	orrs	r1, r4
10000f38:	bd10      	pop	{r4, pc}
10000f3a:	43d8      	mvns	r0, r3
10000f3c:	43d9      	mvns	r1, r3
10000f3e:	bd10      	pop	{r4, pc}
10000f40:	3220      	adds	r2, #32
10000f42:	d407      	bmi.n	10000f54 <d2fix_a+0x34>
10000f44:	460c      	mov	r4, r1
10000f46:	4094      	lsls	r4, r2
10000f48:	4252      	negs	r2, r2
10000f4a:	3220      	adds	r2, #32
10000f4c:	4111      	asrs	r1, r2
10000f4e:	40d0      	lsrs	r0, r2
10000f50:	4320      	orrs	r0, r4
10000f52:	bd10      	pop	{r4, pc}
10000f54:	0008      	movs	r0, r1
10000f56:	17c9      	asrs	r1, r1, #31
10000f58:	3220      	adds	r2, #32
10000f5a:	d403      	bmi.n	10000f64 <d2fix_a+0x44>
10000f5c:	4252      	negs	r2, r2
10000f5e:	3220      	adds	r2, #32
10000f60:	4110      	asrs	r0, r2
10000f62:	bd10      	pop	{r4, pc}
10000f64:	0018      	movs	r0, r3
10000f66:	0019      	movs	r1, r3
10000f68:	bd10      	pop	{r4, pc}
10000f6a:	0000      	.short	0x0000
10000f6c:	10000f21 	.word	0x10000f21

10000f70 <dunpacks>:
10000f70:	0d0a      	lsrs	r2, r1, #20
10000f72:	0fcc      	lsrs	r4, r1, #31
10000f74:	1e53      	subs	r3, r2, #1
10000f76:	051b      	lsls	r3, r3, #20
10000f78:	1ac9      	subs	r1, r1, r3
10000f7a:	0552      	lsls	r2, r2, #21
10000f7c:	d303      	bcc.n	10000f86 <l60_1>
10000f7e:	43c9      	mvns	r1, r1
10000f80:	4240      	negs	r0, r0
10000f82:	d300      	bcc.n	10000f86 <l60_1>
10000f84:	3101      	adds	r1, #1

10000f86 <l60_1>:
10000f86:	0d52      	lsrs	r2, r2, #21
10000f88:	d003      	beq.n	10000f92 <l60_2>
10000f8a:	1c53      	adds	r3, r2, #1
10000f8c:	0adb      	lsrs	r3, r3, #11
10000f8e:	d007      	beq.n	10000fa0 <l60_3>
10000f90:	1b12      	subs	r2, r2, r4

10000f92 <l60_2>:
10000f92:	2000      	movs	r0, #0
10000f94:	0064      	lsls	r4, r4, #1
10000f96:	1c61      	adds	r1, r4, #1
10000f98:	0789      	lsls	r1, r1, #30
10000f9a:	1289      	asrs	r1, r1, #10
10000f9c:	3a80      	subs	r2, #128	; 0x80
10000f9e:	0312      	lsls	r2, r2, #12

10000fa0 <l60_3>:
10000fa0:	4b01      	ldr	r3, [pc, #4]	; (10000fa8 <l60_3+0x8>)
10000fa2:	1ad2      	subs	r2, r2, r3
10000fa4:	4770      	bx	lr
10000fa6:	0000      	.short	0x0000
10000fa8:	000003ff 	.word	0x000003ff

10000fac <__wrap___aeabi_frsub>:
10000fac:	4048      	eors	r0, r1
10000fae:	4041      	eors	r1, r0
10000fb0:	4048      	eors	r0, r1

10000fb2 <__wrap___aeabi_fsub>:
10000fb2:	4b06      	ldr	r3, [pc, #24]	; (10000fcc <__wrap___aeabi_fmul+0x8>)
10000fb4:	685b      	ldr	r3, [r3, #4]
10000fb6:	4718      	bx	r3

10000fb8 <__wrap___aeabi_fadd>:
10000fb8:	4b04      	ldr	r3, [pc, #16]	; (10000fcc <__wrap___aeabi_fmul+0x8>)
10000fba:	681b      	ldr	r3, [r3, #0]
10000fbc:	4718      	bx	r3

10000fbe <__wrap___aeabi_fdiv>:
10000fbe:	4b03      	ldr	r3, [pc, #12]	; (10000fcc <__wrap___aeabi_fmul+0x8>)
10000fc0:	68db      	ldr	r3, [r3, #12]
10000fc2:	4718      	bx	r3

10000fc4 <__wrap___aeabi_fmul>:
10000fc4:	4b01      	ldr	r3, [pc, #4]	; (10000fcc <__wrap___aeabi_fmul+0x8>)
10000fc6:	689b      	ldr	r3, [r3, #8]
10000fc8:	4718      	bx	r3
10000fca:	0000      	.short	0x0000
10000fcc:	20003150 	.word	0x20003150

10000fd0 <__wrap___aeabi_ui2f>:
10000fd0:	1a49      	subs	r1, r1, r1
10000fd2:	2800      	cmp	r0, #0
10000fd4:	d108      	bne.n	10000fe8 <__aeabi_i2f_main>
10000fd6:	4608      	mov	r0, r1
10000fd8:	4770      	bx	lr
	...

10000fdc <__wrap___aeabi_i2f>:
10000fdc:	0fc1      	lsrs	r1, r0, #31
10000fde:	07c9      	lsls	r1, r1, #31
10000fe0:	d500      	bpl.n	10000fe4 <__wrap___aeabi_i2f+0x8>
10000fe2:	4240      	negs	r0, r0
10000fe4:	2800      	cmp	r0, #0
10000fe6:	d017      	beq.n	10001018 <__aeabi_i2f_main+0x30>

10000fe8 <__aeabi_i2f_main>:
10000fe8:	46f4      	mov	ip, lr
10000fea:	b403      	push	{r0, r1}
10000fec:	4b0b      	ldr	r3, [pc, #44]	; (1000101c <__aeabi_i2f_main+0x34>)
10000fee:	681b      	ldr	r3, [r3, #0]
10000ff0:	4798      	blx	r3
10000ff2:	bc06      	pop	{r1, r2}
10000ff4:	4081      	lsls	r1, r0
10000ff6:	389e      	subs	r0, #158	; 0x9e
10000ff8:	4240      	negs	r0, r0
10000ffa:	3180      	adds	r1, #128	; 0x80
10000ffc:	d207      	bcs.n	1000100e <__aeabi_i2f_main+0x26>
10000ffe:	060b      	lsls	r3, r1, #24
10001000:	d007      	beq.n	10001012 <__aeabi_i2f_main+0x2a>
10001002:	0049      	lsls	r1, r1, #1
10001004:	0a49      	lsrs	r1, r1, #9
10001006:	05c0      	lsls	r0, r0, #23
10001008:	4310      	orrs	r0, r2
1000100a:	4308      	orrs	r0, r1
1000100c:	4760      	bx	ip
1000100e:	3001      	adds	r0, #1
10001010:	e7f8      	b.n	10001004 <__aeabi_i2f_main+0x1c>
10001012:	0a49      	lsrs	r1, r1, #9
10001014:	0289      	lsls	r1, r1, #10
10001016:	e7f5      	b.n	10001004 <__aeabi_i2f_main+0x1c>
10001018:	4770      	bx	lr
1000101a:	0000      	.short	0x0000
1000101c:	20023b64 	.word	0x20023b64

10001020 <__wrap___aeabi_f2iz>:
10001020:	0041      	lsls	r1, r0, #1
10001022:	0e0a      	lsrs	r2, r1, #24
10001024:	2380      	movs	r3, #128	; 0x80
10001026:	061b      	lsls	r3, r3, #24
10001028:	2a7e      	cmp	r2, #126	; 0x7e
1000102a:	dd0b      	ble.n	10001044 <__wrap___aeabi_f2iz+0x24>
1000102c:	3a9e      	subs	r2, #158	; 0x9e
1000102e:	da0b      	bge.n	10001048 <__wrap___aeabi_f2iz+0x28>
10001030:	17c1      	asrs	r1, r0, #31
10001032:	0240      	lsls	r0, r0, #9
10001034:	0840      	lsrs	r0, r0, #1
10001036:	4318      	orrs	r0, r3
10001038:	4252      	negs	r2, r2
1000103a:	40d0      	lsrs	r0, r2
1000103c:	0049      	lsls	r1, r1, #1
1000103e:	3101      	adds	r1, #1
10001040:	4348      	muls	r0, r1
10001042:	4770      	bx	lr
10001044:	2000      	movs	r0, #0
10001046:	4770      	bx	lr
10001048:	0fc0      	lsrs	r0, r0, #31
1000104a:	18c0      	adds	r0, r0, r3
1000104c:	3801      	subs	r0, #1
1000104e:	4770      	bx	lr
10001050:	42c0      	cmn	r0, r0
10001052:	d30d      	bcc.n	10001070 <float2int>
10001054:	b500      	push	{lr}
10001056:	0040      	lsls	r0, r0, #1
10001058:	0840      	lsrs	r0, r0, #1
1000105a:	2100      	movs	r1, #0
1000105c:	f000 f812 	bl	10001084 <__wrap___aeabi_f2uiz>
10001060:	2800      	cmp	r0, #0
10001062:	d401      	bmi.n	10001068 <__wrap___aeabi_f2iz+0x48>
10001064:	4240      	negs	r0, r0
10001066:	bd00      	pop	{pc}
10001068:	2080      	movs	r0, #128	; 0x80
1000106a:	0600      	lsls	r0, r0, #24
1000106c:	bd00      	pop	{pc}
	...

10001070 <float2int>:
10001070:	4b03      	ldr	r3, [pc, #12]	; (10001080 <float2int+0x10>)
10001072:	69db      	ldr	r3, [r3, #28]
10001074:	46fc      	mov	ip, pc
10001076:	4718      	bx	r3
10001078:	10bddf1c 	.word	0x10bddf1c
1000107c:	00001000 	.word	0x00001000
10001080:	20003150 	.word	0x20003150

10001084 <__wrap___aeabi_f2uiz>:
10001084:	4b01      	ldr	r3, [pc, #4]	; (1000108c <__wrap___aeabi_f2uiz+0x8>)
10001086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001088:	4718      	bx	r3
1000108a:	0000      	.short	0x0000
1000108c:	20003150 	.word	0x20003150

10001090 <float_table_shim_on_use_helper>:
10001090:	b507      	push	{r0, r1, r2, lr}
10001092:	4660      	mov	r0, ip
10001094:	8801      	ldrh	r1, [r0, #0]
10001096:	0a0a      	lsrs	r2, r1, #8
10001098:	3002      	adds	r0, #2
1000109a:	2adf      	cmp	r2, #223	; 0xdf
1000109c:	d1fa      	bne.n	10001094 <float_table_shim_on_use_helper+0x4>
1000109e:	b2c9      	uxtb	r1, r1
100010a0:	0882      	lsrs	r2, r0, #2
100010a2:	d304      	bcc.n	100010ae <float_table_shim_on_use_helper+0x1e>
100010a4:	8802      	ldrh	r2, [r0, #0]
100010a6:	8840      	ldrh	r0, [r0, #2]
100010a8:	0400      	lsls	r0, r0, #16
100010aa:	4310      	orrs	r0, r2
100010ac:	e000      	b.n	100010b0 <float_table_shim_on_use_helper+0x20>
100010ae:	6800      	ldr	r0, [r0, #0]
100010b0:	4a01      	ldr	r2, [pc, #4]	; (100010b8 <float_table_shim_on_use_helper+0x28>)
100010b2:	5050      	str	r0, [r2, r1]
100010b4:	9003      	str	r0, [sp, #12]
100010b6:	bd07      	pop	{r0, r1, r2, pc}
100010b8:	20003150 	.word	0x20003150

100010bc <float2int_shim>:
100010bc:	2100      	movs	r1, #0

100010be <float2fix_shim>:
100010be:	15c2      	asrs	r2, r0, #23
100010c0:	3280      	adds	r2, #128	; 0x80
100010c2:	3280      	adds	r2, #128	; 0x80
100010c4:	d001      	beq.n	100010ca <float2fix_shim+0xc>
100010c6:	4a02      	ldr	r2, [pc, #8]	; (100010d0 <float2fix_shim+0x12>)
100010c8:	4710      	bx	r2
100010ca:	2000      	movs	r0, #0
100010cc:	4770      	bx	lr
100010ce:	0000      	.short	0x0000
100010d0:	00002acd 	.word	0x00002acd

100010d4 <__aeabi_mem_init>:
100010d4:	4801      	ldr	r0, [pc, #4]	; (100010dc <__aeabi_mem_init+0x8>)
100010d6:	2104      	movs	r1, #4
100010d8:	4b01      	ldr	r3, [pc, #4]	; (100010e0 <__aeabi_mem_init+0xc>)
100010da:	4718      	bx	r3
100010dc:	20002708 	.word	0x20002708
100010e0:	10001151 	.word	0x10001151

100010e4 <__wrap_memset>:
100010e4:	4b01      	ldr	r3, [pc, #4]	; (100010ec <__wrap_memset+0x8>)
100010e6:	681b      	ldr	r3, [r3, #0]
100010e8:	4718      	bx	r3
100010ea:	0000      	.short	0x0000
100010ec:	20002708 	.word	0x20002708

100010f0 <__wrap___aeabi_memcpy>:
100010f0:	4b01      	ldr	r3, [pc, #4]	; (100010f8 <__wrap___aeabi_memcpy+0x8>)
100010f2:	685b      	ldr	r3, [r3, #4]
100010f4:	4718      	bx	r3
100010f6:	0000      	.short	0x0000
100010f8:	20002708 	.word	0x20002708

100010fc <__wrap___aeabi_lmul>:
100010fc:	4351      	muls	r1, r2
100010fe:	4343      	muls	r3, r0
10001100:	18c9      	adds	r1, r1, r3
10001102:	468c      	mov	ip, r1
10001104:	0c11      	lsrs	r1, r2, #16
10001106:	b283      	uxth	r3, r0
10001108:	434b      	muls	r3, r1
1000110a:	b410      	push	{r4}
1000110c:	0c04      	lsrs	r4, r0, #16
1000110e:	4361      	muls	r1, r4
10001110:	b292      	uxth	r2, r2
10001112:	b280      	uxth	r0, r0
10001114:	4350      	muls	r0, r2
10001116:	4362      	muls	r2, r4
10001118:	041c      	lsls	r4, r3, #16
1000111a:	0c1b      	lsrs	r3, r3, #16
1000111c:	1900      	adds	r0, r0, r4
1000111e:	bc10      	pop	{r4}
10001120:	4159      	adcs	r1, r3
10001122:	0413      	lsls	r3, r2, #16
10001124:	0c12      	lsrs	r2, r2, #16
10001126:	18c0      	adds	r0, r0, r3
10001128:	4151      	adcs	r1, r2
1000112a:	4461      	add	r1, ip
1000112c:	4770      	bx	lr
	...

10001130 <rom_func_lookup>:
// Convert a 16 bit pointer stored at the given rom address into a 32 bit pointer
#define rom_hword_as_ptr(rom_address) (void *)(uintptr_t)(*(uint16_t *)rom_address)

void *rom_func_lookup(uint32_t code) {
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
10001130:	2314      	movs	r3, #20
void *rom_func_lookup(uint32_t code) {
10001132:	b510      	push	{r4, lr}
10001134:	0001      	movs	r1, r0
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
10001136:	8818      	ldrh	r0, [r3, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10001138:	3304      	adds	r3, #4
1000113a:	881b      	ldrh	r3, [r3, #0]
    return rom_table_lookup(func_table, code);
1000113c:	4798      	blx	r3
}
1000113e:	bd10      	pop	{r4, pc}

10001140 <rom_data_lookup>:

void *rom_data_lookup(uint32_t code) {
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
    uint16_t *data_table = (uint16_t *) rom_hword_as_ptr(0x16);
10001140:	2316      	movs	r3, #22
void *rom_data_lookup(uint32_t code) {
10001142:	b510      	push	{r4, lr}
10001144:	0001      	movs	r1, r0
    uint16_t *data_table = (uint16_t *) rom_hword_as_ptr(0x16);
10001146:	8818      	ldrh	r0, [r3, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10001148:	3302      	adds	r3, #2
1000114a:	881b      	ldrh	r3, [r3, #0]
    return rom_table_lookup(data_table, code);
1000114c:	4798      	blx	r3
}
1000114e:	bd10      	pop	{r4, pc}

10001150 <rom_funcs_lookup>:
/// \end::table_lookup[]

bool rom_funcs_lookup(uint32_t *table, unsigned int count) {
10001150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10001152:	4647      	mov	r7, r8
10001154:	46ce      	mov	lr, r9
10001156:	b580      	push	{r7, lr}
10001158:	1e0f      	subs	r7, r1, #0
    bool ok = true;
    for (unsigned int i = 0; i < count; i++) {
1000115a:	d019      	beq.n	10001190 <rom_funcs_lookup+0x40>
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
1000115c:	2314      	movs	r3, #20
1000115e:	4699      	mov	r9, r3
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10001160:	3304      	adds	r3, #4
10001162:	0004      	movs	r4, r0
    for (unsigned int i = 0; i < count; i++) {
10001164:	2500      	movs	r5, #0
    bool ok = true;
10001166:	2601      	movs	r6, #1
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10001168:	4698      	mov	r8, r3
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
1000116a:	464b      	mov	r3, r9
1000116c:	8818      	ldrh	r0, [r3, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
1000116e:	4643      	mov	r3, r8
    return rom_table_lookup(func_table, code);
10001170:	6821      	ldr	r1, [r4, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10001172:	881b      	ldrh	r3, [r3, #0]
    return rom_table_lookup(func_table, code);
10001174:	4798      	blx	r3
        table[i] = (uintptr_t) rom_func_lookup(table[i]);
10001176:	c401      	stmia	r4!, {r0}
        if (!table[i]) ok = false;
10001178:	1e43      	subs	r3, r0, #1
1000117a:	4198      	sbcs	r0, r3
    for (unsigned int i = 0; i < count; i++) {
1000117c:	3501      	adds	r5, #1
        if (!table[i]) ok = false;
1000117e:	4240      	negs	r0, r0
10001180:	4006      	ands	r6, r0
    for (unsigned int i = 0; i < count; i++) {
10001182:	42af      	cmp	r7, r5
10001184:	d1f1      	bne.n	1000116a <rom_funcs_lookup+0x1a>
    }
    return ok;
}
10001186:	0030      	movs	r0, r6
10001188:	bcc0      	pop	{r6, r7}
1000118a:	46b9      	mov	r9, r7
1000118c:	46b0      	mov	r8, r6
1000118e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool ok = true;
10001190:	2601      	movs	r6, #1
10001192:	e7f8      	b.n	10001186 <rom_funcs_lookup+0x36>

10001194 <hw_claim_lock>:
 *
 * \return The prior interrupt enable status for restoration later via restore_interrupts()
 */
inline static uint32_t save_and_disable_interrupts() {
    uint32_t status;
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001194:	f3ef 8010 	mrs	r0, PRIMASK
    __asm volatile ("cpsid i");
10001198:	b672      	cpsid	i
 */
inline static void spin_lock_unsafe_blocking(spin_lock_t *lock) {
    // Note we don't do a wfe or anything, because by convention these spin_locks are VERY SHORT LIVED and NEVER BLOCK and run
    // with INTERRUPTS disabled (to ensure that)... therefore nothing on our core could be blocking us, so we just need to wait on another core
    // anyway which should be finished soon
    while (__builtin_expect(!*lock, 0));
1000119a:	4a03      	ldr	r2, [pc, #12]	; (100011a8 <hw_claim_lock+0x14>)
1000119c:	6813      	ldr	r3, [r2, #0]
1000119e:	2b00      	cmp	r3, #0
100011a0:	d0fc      	beq.n	1000119c <hw_claim_lock+0x8>
    __asm volatile ("dmb");
100011a2:	f3bf 8f5f 	dmb	sy

#include "hardware/claim.h"

uint32_t hw_claim_lock() {
    return spin_lock_blocking(spin_lock_instance(PICO_SPINLOCK_ID_HARDWARE_CLAIM));
}
100011a6:	4770      	bx	lr
100011a8:	d000012c 	.word	0xd000012c

100011ac <hw_claim_unlock>:
100011ac:	f3bf 8f5f 	dmb	sy
 *
 * \param lock Spinlock instance
 */
inline static void spin_unlock_unsafe(spin_lock_t *lock) {
    __mem_fence_release();
    *lock = 0;
100011b0:	2200      	movs	r2, #0
100011b2:	4b02      	ldr	r3, [pc, #8]	; (100011bc <hw_claim_unlock+0x10>)
100011b4:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100011b6:	f380 8810 	msr	PRIMASK, r0

void hw_claim_unlock(uint32_t save) {
    spin_unlock(spin_lock_instance(PICO_SPINLOCK_ID_HARDWARE_CLAIM), save);
}
100011ba:	4770      	bx	lr
100011bc:	d000012c 	.word	0xd000012c

100011c0 <hw_claim_or_assert>:
    }
    hw_claim_unlock(save);
    return rc;
}

void hw_claim_or_assert(uint8_t *bits, uint bit_index, const char *message) {
100011c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100011c2:	46ce      	mov	lr, r9
100011c4:	4647      	mov	r7, r8
100011c6:	4691      	mov	r9, r2
100011c8:	b580      	push	{r7, lr}
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100011ca:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
100011ce:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100011d0:	4d10      	ldr	r5, [pc, #64]	; (10001214 <hw_claim_or_assert+0x54>)
100011d2:	682b      	ldr	r3, [r5, #0]
100011d4:	2b00      	cmp	r3, #0
100011d6:	d0fc      	beq.n	100011d2 <hw_claim_or_assert+0x12>
    __asm volatile ("dmb");
100011d8:	f3bf 8f5f 	dmb	sy
    uint32_t save = hw_claim_lock();
    if (bits[bit_index >> 3u] & (1u << (bit_index & 7u))) {
100011dc:	08cb      	lsrs	r3, r1, #3
100011de:	5cc4      	ldrb	r4, [r0, r3]
100011e0:	18c7      	adds	r7, r0, r3
100011e2:	2007      	movs	r0, #7
100011e4:	0026      	movs	r6, r4
100011e6:	2301      	movs	r3, #1
100011e8:	4008      	ands	r0, r1
100011ea:	40c6      	lsrs	r6, r0
100011ec:	001a      	movs	r2, r3
100011ee:	4032      	ands	r2, r6
100011f0:	4233      	tst	r3, r6
100011f2:	d10b      	bne.n	1000120c <hw_claim_or_assert+0x4c>
        panic(message, bit_index);
    } else {
        bits[bit_index >> 3u] |= (1u << (bit_index & 7u));
100011f4:	4083      	lsls	r3, r0
100011f6:	4323      	orrs	r3, r4
100011f8:	703b      	strb	r3, [r7, #0]
100011fa:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100011fe:	602a      	str	r2, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001200:	f38c 8810 	msr	PRIMASK, ip
    }
    hw_claim_unlock(save);
}
10001204:	bcc0      	pop	{r6, r7}
10001206:	46b9      	mov	r9, r7
10001208:	46b0      	mov	r8, r6
1000120a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        panic(message, bit_index);
1000120c:	4648      	mov	r0, r9
1000120e:	f002 fbf5 	bl	100039fc <panic>
10001212:	46c0      	nop			; (mov r8, r8)
10001214:	d000012c 	.word	0xd000012c

10001218 <hw_claim_unused_from_range>:

int hw_claim_unused_from_range(uint8_t *bits, bool required, uint bit_lsb, uint bit_msb, const char *message) {
10001218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000121a:	4647      	mov	r7, r8
1000121c:	46ce      	mov	lr, r9
1000121e:	4688      	mov	r8, r1
10001220:	b580      	push	{r7, lr}
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001222:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10001226:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10001228:	4d21      	ldr	r5, [pc, #132]	; (100012b0 <hw_claim_unused_from_range+0x98>)
1000122a:	682c      	ldr	r4, [r5, #0]
1000122c:	2c00      	cmp	r4, #0
1000122e:	d0fc      	beq.n	1000122a <hw_claim_unused_from_range+0x12>
    __asm volatile ("dmb");
10001230:	f3bf 8f5f 	dmb	sy
    // don't bother check lsb / msb order as if wrong, then it'll fail anyway
    uint32_t save = hw_claim_lock();
    int found_bit = -1;
    for(uint bit=bit_lsb; bit <= bit_msb; bit++) {
10001234:	429a      	cmp	r2, r3
10001236:	d82d      	bhi.n	10001294 <hw_claim_unused_from_range+0x7c>
        if (!(bits[bit >> 3u] & (1u << (bit & 7u)))) {
10001238:	08d4      	lsrs	r4, r2, #3
1000123a:	5d05      	ldrb	r5, [r0, r4]
1000123c:	1907      	adds	r7, r0, r4
1000123e:	2407      	movs	r4, #7
10001240:	002e      	movs	r6, r5
10001242:	4014      	ands	r4, r2
10001244:	40e6      	lsrs	r6, r4
10001246:	07f1      	lsls	r1, r6, #31
10001248:	d51e      	bpl.n	10001288 <hw_claim_unused_from_range+0x70>
1000124a:	2107      	movs	r1, #7
1000124c:	4689      	mov	r9, r1
1000124e:	3906      	subs	r1, #6
10001250:	e008      	b.n	10001264 <hw_claim_unused_from_range+0x4c>
10001252:	08d4      	lsrs	r4, r2, #3
10001254:	5d05      	ldrb	r5, [r0, r4]
10001256:	1907      	adds	r7, r0, r4
10001258:	464c      	mov	r4, r9
1000125a:	002e      	movs	r6, r5
1000125c:	4014      	ands	r4, r2
1000125e:	40e6      	lsrs	r6, r4
10001260:	4231      	tst	r1, r6
10001262:	d011      	beq.n	10001288 <hw_claim_unused_from_range+0x70>
    for(uint bit=bit_lsb; bit <= bit_msb; bit++) {
10001264:	3201      	adds	r2, #1
10001266:	4293      	cmp	r3, r2
10001268:	d2f3      	bcs.n	10001252 <hw_claim_unused_from_range+0x3a>
    int found_bit = -1;
1000126a:	2001      	movs	r0, #1
1000126c:	4240      	negs	r0, r0
1000126e:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001272:	2200      	movs	r2, #0
10001274:	4b0e      	ldr	r3, [pc, #56]	; (100012b0 <hw_claim_unused_from_range+0x98>)
10001276:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001278:	f38c 8810 	msr	PRIMASK, ip
            found_bit = bit;
            break;
        }
    }
    hw_claim_unlock(save);
    if (found_bit < 0 && required) {
1000127c:	2800      	cmp	r0, #0
1000127e:	db11      	blt.n	100012a4 <hw_claim_unused_from_range+0x8c>
        panic(message);
    }
    return found_bit;
}
10001280:	bcc0      	pop	{r6, r7}
10001282:	46b9      	mov	r9, r7
10001284:	46b0      	mov	r8, r6
10001286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            bits[bit >> 3u] |= (1u << (bit & 7u));
10001288:	2301      	movs	r3, #1
1000128a:	40a3      	lsls	r3, r4
1000128c:	431d      	orrs	r5, r3
            found_bit = bit;
1000128e:	0010      	movs	r0, r2
            bits[bit >> 3u] |= (1u << (bit & 7u));
10001290:	703d      	strb	r5, [r7, #0]
            break;
10001292:	e7ec      	b.n	1000126e <hw_claim_unused_from_range+0x56>
    __asm volatile ("dmb");
10001294:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001298:	2300      	movs	r3, #0
1000129a:	602b      	str	r3, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000129c:	f38c 8810 	msr	PRIMASK, ip
    int found_bit = -1;
100012a0:	2001      	movs	r0, #1
100012a2:	4240      	negs	r0, r0
    if (found_bit < 0 && required) {
100012a4:	4643      	mov	r3, r8
100012a6:	2b00      	cmp	r3, #0
100012a8:	d0ea      	beq.n	10001280 <hw_claim_unused_from_range+0x68>
        panic(message);
100012aa:	9808      	ldr	r0, [sp, #32]
100012ac:	f002 fba6 	bl	100039fc <panic>
100012b0:	d000012c 	.word	0xd000012c

100012b4 <clock_configure>:
    hw_clear_bits(&clock->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clk_index] = 0;
}

/// \tag::clock_configure[]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
100012b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100012b6:	464f      	mov	r7, r9
100012b8:	4646      	mov	r6, r8
100012ba:	46d6      	mov	lr, sl
100012bc:	b5c0      	push	{r6, r7, lr}
100012be:	0017      	movs	r7, r2
    uint32_t div;

    assert(src_freq >= freq);

    if (freq > src_freq)
100012c0:	9a08      	ldr	r2, [sp, #32]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
100012c2:	0005      	movs	r5, r0
100012c4:	4688      	mov	r8, r1
    if (freq > src_freq)
100012c6:	429a      	cmp	r2, r3
100012c8:	d865      	bhi.n	10001396 <clock_configure+0xe2>
        return false;

    // Div register is 24.8 int.frac divider so multiply by 2^8 (left shift by 8)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
100012ca:	0e19      	lsrs	r1, r3, #24
100012cc:	0218      	lsls	r0, r3, #8
100012ce:	2300      	movs	r3, #0
100012d0:	f7ff f896 	bl	10000400 <__wrap___aeabi_uldivmod>

    clock_hw_t *clock = &clocks_hw->clk[clk_index];
100012d4:	4b31      	ldr	r3, [pc, #196]	; (1000139c <clock_configure+0xe8>)
100012d6:	006c      	lsls	r4, r5, #1
100012d8:	469c      	mov	ip, r3
100012da:	1964      	adds	r4, r4, r5
100012dc:	00a4      	lsls	r4, r4, #2
100012de:	4464      	add	r4, ip

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock->div)
100012e0:	6863      	ldr	r3, [r4, #4]
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
100012e2:	4681      	mov	r9, r0
    if (div > clock->div)
100012e4:	4298      	cmp	r0, r3
100012e6:	d900      	bls.n	100012ea <clock_configure+0x36>
        clock->div = div;
100012e8:	6060      	str	r0, [r4, #4]
    return clk_index == clk_sys || clk_index == clk_ref;
100012ea:	1f2b      	subs	r3, r5, #4
100012ec:	b2db      	uxtb	r3, r3
100012ee:	469a      	mov	sl, r3

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
100012f0:	2b01      	cmp	r3, #1
100012f2:	d92c      	bls.n	1000134e <clock_configure+0x9a>
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100012f4:	23c0      	movs	r3, #192	; 0xc0
100012f6:	2280      	movs	r2, #128	; 0x80
    // If no glitchless mux, cleanly stop the clock to avoid glitches
    // propagating when changing aux mux. Note it would be a really bad idea
    // to do this on one of the glitchless clocks (clk_sys, clk_ref).
    else {
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_GPOUT0_CTRL_ENABLE_BITS);
        if (configured_freq[clk_index] > 0) {
100012f8:	4e29      	ldr	r6, [pc, #164]	; (100013a0 <clock_configure+0xec>)
100012fa:	00ad      	lsls	r5, r5, #2
100012fc:	019b      	lsls	r3, r3, #6
100012fe:	5971      	ldr	r1, [r6, r5]
10001300:	4323      	orrs	r3, r4
10001302:	0112      	lsls	r2, r2, #4
10001304:	601a      	str	r2, [r3, #0]
10001306:	2900      	cmp	r1, #0
10001308:	d005      	beq.n	10001316 <clock_configure+0x62>
            // Delay for 3 cycles of the target clock, for ENABLE propagation.
            // Note XOSC_COUNT is not helpful here because XOSC is not
            // necessarily running, nor is timer... so, 3 cycles per loop:
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
1000130a:	6970      	ldr	r0, [r6, #20]
1000130c:	f7ff f832 	bl	10000374 <__wrap___aeabi_uidiv>
10001310:	3001      	adds	r0, #1
            asm volatile (
10001312:	3801      	subs	r0, #1
10001314:	d1fd      	bne.n	10001312 <clock_configure+0x5e>
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001316:	6822      	ldr	r2, [r4, #0]
            );
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock->ctrl,
10001318:	017f      	lsls	r7, r7, #5
1000131a:	407a      	eors	r2, r7
1000131c:	27e0      	movs	r7, #224	; 0xe0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000131e:	2380      	movs	r3, #128	; 0x80
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001320:	4017      	ands	r7, r2
        (auxsrc << CLOCKS_CLK_SYS_CTRL_AUXSRC_LSB),
        CLOCKS_CLK_SYS_CTRL_AUXSRC_BITS
    );

    if (has_glitchless_mux(clk_index)) {
10001322:	4652      	mov	r2, sl
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001324:	015b      	lsls	r3, r3, #5
10001326:	4323      	orrs	r3, r4
10001328:	601f      	str	r7, [r3, #0]
1000132a:	2a01      	cmp	r2, #1
1000132c:	d926      	bls.n	1000137c <clock_configure+0xc8>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000132e:	2380      	movs	r3, #128	; 0x80
10001330:	2280      	movs	r2, #128	; 0x80
10001332:	019b      	lsls	r3, r3, #6
10001334:	4323      	orrs	r3, r4
10001336:	0112      	lsls	r2, r2, #4
10001338:	601a      	str	r2, [r3, #0]

    hw_set_bits(&clock->ctrl, CLOCKS_CLK_GPOUT0_CTRL_ENABLE_BITS);

    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock->div = div;
1000133a:	464b      	mov	r3, r9

    // Store the configured frequency
    configured_freq[clk_index] = freq;
1000133c:	2001      	movs	r0, #1
    clock->div = div;
1000133e:	6063      	str	r3, [r4, #4]
    configured_freq[clk_index] = freq;
10001340:	9b08      	ldr	r3, [sp, #32]
10001342:	5173      	str	r3, [r6, r5]

    return true;
}
10001344:	bce0      	pop	{r5, r6, r7}
10001346:	46ba      	mov	sl, r7
10001348:	46b1      	mov	r9, r6
1000134a:	46a8      	mov	r8, r5
1000134c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
1000134e:	4643      	mov	r3, r8
10001350:	2b01      	cmp	r3, #1
10001352:	d1cf      	bne.n	100012f4 <clock_configure+0x40>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001354:	23c0      	movs	r3, #192	; 0xc0
10001356:	2203      	movs	r2, #3
10001358:	019b      	lsls	r3, r3, #6
1000135a:	4323      	orrs	r3, r4
1000135c:	601a      	str	r2, [r3, #0]
        while (!(clock->selected & 1u))
1000135e:	3a02      	subs	r2, #2
10001360:	68a3      	ldr	r3, [r4, #8]
10001362:	421a      	tst	r2, r3
10001364:	d0fc      	beq.n	10001360 <clock_configure+0xac>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001366:	23e0      	movs	r3, #224	; 0xe0
10001368:	6822      	ldr	r2, [r4, #0]
    hw_write_masked(&clock->ctrl,
1000136a:	017f      	lsls	r7, r7, #5
1000136c:	4057      	eors	r7, r2
1000136e:	401f      	ands	r7, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001370:	2380      	movs	r3, #128	; 0x80
10001372:	015b      	lsls	r3, r3, #5
10001374:	4323      	orrs	r3, r4
10001376:	4e0a      	ldr	r6, [pc, #40]	; (100013a0 <clock_configure+0xec>)
10001378:	601f      	str	r7, [r3, #0]
    return clk_index == clk_sys || clk_index == clk_ref;
1000137a:	00ad      	lsls	r5, r5, #2
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000137c:	4642      	mov	r2, r8
1000137e:	6821      	ldr	r1, [r4, #0]
10001380:	4051      	eors	r1, r2
10001382:	2203      	movs	r2, #3
10001384:	400a      	ands	r2, r1
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001386:	601a      	str	r2, [r3, #0]
        while (!(clock->selected & (1u << src)))
10001388:	2201      	movs	r2, #1
1000138a:	4643      	mov	r3, r8
1000138c:	409a      	lsls	r2, r3
1000138e:	68a3      	ldr	r3, [r4, #8]
10001390:	421a      	tst	r2, r3
10001392:	d0fc      	beq.n	1000138e <clock_configure+0xda>
10001394:	e7cb      	b.n	1000132e <clock_configure+0x7a>
        return false;
10001396:	2000      	movs	r0, #0
10001398:	e7d4      	b.n	10001344 <clock_configure+0x90>
1000139a:	46c0      	nop			; (mov r8, r8)
1000139c:	40008000 	.word	0x40008000
100013a0:	20023460 	.word	0x20023460

100013a4 <clocks_init>:
/// \end::clock_configure[]

void clocks_init(void) {
100013a4:	b530      	push	{r4, r5, lr}
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
100013a6:	200c      	movs	r0, #12
void clocks_init(void) {
100013a8:	b083      	sub	sp, #12
    watchdog_start_tick(XOSC_MHZ);
100013aa:	f003 fc01 	bl	10004bb0 <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
100013ae:	f000 ff91 	bl	100022d4 <running_on_fpga>
100013b2:	2800      	cmp	r0, #0
100013b4:	d00e      	beq.n	100013d4 <clocks_init+0x30>
        for (uint i = 0; i < CLK_COUNT; i++) {
            configured_freq[i] = 48 * MHZ;
100013b6:	4b9a      	ldr	r3, [pc, #616]	; (10001620 <clocks_init+0x27c>)
100013b8:	4a9a      	ldr	r2, [pc, #616]	; (10001624 <clocks_init+0x280>)
100013ba:	601a      	str	r2, [r3, #0]
100013bc:	605a      	str	r2, [r3, #4]
100013be:	609a      	str	r2, [r3, #8]
100013c0:	60da      	str	r2, [r3, #12]
100013c2:	611a      	str	r2, [r3, #16]
100013c4:	615a      	str	r2, [r3, #20]
100013c6:	619a      	str	r2, [r3, #24]
100013c8:	61da      	str	r2, [r3, #28]
100013ca:	621a      	str	r2, [r3, #32]
        }
        configured_freq[clk_rtc] = 46875;
100013cc:	4a96      	ldr	r2, [pc, #600]	; (10001628 <clocks_init+0x284>)
100013ce:	625a      	str	r2, [r3, #36]	; 0x24
    clock_configure(clk_peri,
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * MHZ,
                    125 * MHZ);
}
100013d0:	b003      	add	sp, #12
100013d2:	bd30      	pop	{r4, r5, pc}
    clocks_hw->resus.ctrl = 0;
100013d4:	4c95      	ldr	r4, [pc, #596]	; (1000162c <clocks_init+0x288>)
100013d6:	67a0      	str	r0, [r4, #120]	; 0x78
    xosc_init();
100013d8:	f003 fbf2 	bl	10004bc0 <xosc_init>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100013dc:	2201      	movs	r2, #1
100013de:	4b94      	ldr	r3, [pc, #592]	; (10001630 <clocks_init+0x28c>)
100013e0:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_sys].selected != 0x1)
100013e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
100013e4:	2b01      	cmp	r3, #1
100013e6:	d1fc      	bne.n	100013e2 <clocks_init+0x3e>
100013e8:	2203      	movs	r2, #3
100013ea:	4b92      	ldr	r3, [pc, #584]	; (10001634 <clocks_init+0x290>)
100013ec:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_ref].selected != 0x1)
100013ee:	4a8f      	ldr	r2, [pc, #572]	; (1000162c <clocks_init+0x288>)
100013f0:	6b93      	ldr	r3, [r2, #56]	; 0x38
100013f2:	2b01      	cmp	r3, #1
100013f4:	d1fc      	bne.n	100013f0 <clocks_init+0x4c>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100013f6:	22c0      	movs	r2, #192	; 0xc0
100013f8:	4b8f      	ldr	r3, [pc, #572]	; (10001638 <clocks_init+0x294>)
100013fa:	0192      	lsls	r2, r2, #6
100013fc:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100013fe:	4b8f      	ldr	r3, [pc, #572]	; (1000163c <clocks_init+0x298>)
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
10001400:	498f      	ldr	r1, [pc, #572]	; (10001640 <clocks_init+0x29c>)
10001402:	601a      	str	r2, [r3, #0]
10001404:	0010      	movs	r0, r2
10001406:	688b      	ldr	r3, [r1, #8]
10001408:	4398      	bics	r0, r3
1000140a:	1e03      	subs	r3, r0, #0
1000140c:	d1fa      	bne.n	10001404 <clocks_init+0x60>
    pll_init(pll_sys, 1, 1500 * MHZ, 6, 2);
1000140e:	2402      	movs	r4, #2
10001410:	2101      	movs	r1, #1
10001412:	4a8c      	ldr	r2, [pc, #560]	; (10001644 <clocks_init+0x2a0>)
10001414:	488c      	ldr	r0, [pc, #560]	; (10001648 <clocks_init+0x2a4>)
10001416:	3306      	adds	r3, #6
10001418:	9400      	str	r4, [sp, #0]
1000141a:	f000 ff63 	bl	100022e4 <pll_init>
    pll_init(pll_usb, 1, 480 * MHZ, 5, 2);
1000141e:	2305      	movs	r3, #5
10001420:	4a8a      	ldr	r2, [pc, #552]	; (1000164c <clocks_init+0x2a8>)
10001422:	2101      	movs	r1, #1
10001424:	488a      	ldr	r0, [pc, #552]	; (10001650 <clocks_init+0x2ac>)
10001426:	9400      	str	r4, [sp, #0]
10001428:	f000 ff5c 	bl	100022e4 <pll_init>
    if (div > clock->div)
1000142c:	4b89      	ldr	r3, [pc, #548]	; (10001654 <clocks_init+0x2b0>)
1000142e:	685a      	ldr	r2, [r3, #4]
10001430:	2aff      	cmp	r2, #255	; 0xff
10001432:	d802      	bhi.n	1000143a <clocks_init+0x96>
        clock->div = div;
10001434:	2280      	movs	r2, #128	; 0x80
10001436:	0052      	lsls	r2, r2, #1
10001438:	605a      	str	r2, [r3, #4]
1000143a:	2280      	movs	r2, #128	; 0x80
        if (configured_freq[clk_index] > 0) {
1000143c:	4c78      	ldr	r4, [pc, #480]	; (10001620 <clocks_init+0x27c>)
1000143e:	4b7d      	ldr	r3, [pc, #500]	; (10001634 <clocks_init+0x290>)
10001440:	6921      	ldr	r1, [r4, #16]
10001442:	0112      	lsls	r2, r2, #4
10001444:	4d83      	ldr	r5, [pc, #524]	; (10001654 <clocks_init+0x2b0>)
10001446:	601a      	str	r2, [r3, #0]
10001448:	2900      	cmp	r1, #0
1000144a:	d005      	beq.n	10001458 <clocks_init+0xb4>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
1000144c:	6960      	ldr	r0, [r4, #20]
1000144e:	f7fe ff91 	bl	10000374 <__wrap___aeabi_uidiv>
10001452:	3001      	adds	r0, #1
            asm volatile (
10001454:	3801      	subs	r0, #1
10001456:	d1fd      	bne.n	10001454 <clocks_init+0xb0>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001458:	21e0      	movs	r1, #224	; 0xe0
1000145a:	4b7e      	ldr	r3, [pc, #504]	; (10001654 <clocks_init+0x2b0>)
1000145c:	2002      	movs	r0, #2
1000145e:	681a      	ldr	r2, [r3, #0]
10001460:	4011      	ands	r1, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001462:	2280      	movs	r2, #128	; 0x80
10001464:	0152      	lsls	r2, r2, #5
10001466:	432a      	orrs	r2, r5
10001468:	6011      	str	r1, [r2, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000146a:	6819      	ldr	r1, [r3, #0]
1000146c:	4048      	eors	r0, r1
1000146e:	2103      	movs	r1, #3
10001470:	4001      	ands	r1, r0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001472:	6011      	str	r1, [r2, #0]
        while (!(clock->selected & (1u << src)))
10001474:	2104      	movs	r1, #4
10001476:	689a      	ldr	r2, [r3, #8]
10001478:	4211      	tst	r1, r2
1000147a:	d0fc      	beq.n	10001476 <clocks_init+0xd2>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000147c:	2280      	movs	r2, #128	; 0x80
1000147e:	2180      	movs	r1, #128	; 0x80
10001480:	0192      	lsls	r2, r2, #6
10001482:	432a      	orrs	r2, r5
10001484:	0109      	lsls	r1, r1, #4
10001486:	6011      	str	r1, [r2, #0]
    clock->div = div;
10001488:	2280      	movs	r2, #128	; 0x80
1000148a:	0052      	lsls	r2, r2, #1
1000148c:	605a      	str	r2, [r3, #4]
    configured_freq[clk_index] = freq;
1000148e:	4b72      	ldr	r3, [pc, #456]	; (10001658 <clocks_init+0x2b4>)
10001490:	6123      	str	r3, [r4, #16]
    if (div > clock->div)
10001492:	4b72      	ldr	r3, [pc, #456]	; (1000165c <clocks_init+0x2b8>)
10001494:	6859      	ldr	r1, [r3, #4]
10001496:	29ff      	cmp	r1, #255	; 0xff
10001498:	d800      	bhi.n	1000149c <clocks_init+0xf8>
        clock->div = div;
1000149a:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000149c:	2103      	movs	r1, #3
1000149e:	4a64      	ldr	r2, [pc, #400]	; (10001630 <clocks_init+0x28c>)
100014a0:	4b6e      	ldr	r3, [pc, #440]	; (1000165c <clocks_init+0x2b8>)
100014a2:	6011      	str	r1, [r2, #0]
        while (!(clock->selected & 1u))
100014a4:	3902      	subs	r1, #2
100014a6:	689a      	ldr	r2, [r3, #8]
100014a8:	4211      	tst	r1, r2
100014aa:	d0fc      	beq.n	100014a6 <clocks_init+0x102>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100014ac:	20e0      	movs	r0, #224	; 0xe0
100014ae:	681a      	ldr	r2, [r3, #0]
100014b0:	4010      	ands	r0, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100014b2:	2280      	movs	r2, #128	; 0x80
100014b4:	0152      	lsls	r2, r2, #5
100014b6:	431a      	orrs	r2, r3
100014b8:	6010      	str	r0, [r2, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100014ba:	6818      	ldr	r0, [r3, #0]
100014bc:	4048      	eors	r0, r1
100014be:	2103      	movs	r1, #3
100014c0:	4001      	ands	r1, r0
        while (!(clock->selected & (1u << src)))
100014c2:	2002      	movs	r0, #2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100014c4:	6011      	str	r1, [r2, #0]
100014c6:	4965      	ldr	r1, [pc, #404]	; (1000165c <clocks_init+0x2b8>)
100014c8:	688a      	ldr	r2, [r1, #8]
100014ca:	4210      	tst	r0, r2
100014cc:	d0fc      	beq.n	100014c8 <clocks_init+0x124>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100014ce:	2280      	movs	r2, #128	; 0x80
100014d0:	0192      	lsls	r2, r2, #6
100014d2:	4313      	orrs	r3, r2
100014d4:	2280      	movs	r2, #128	; 0x80
100014d6:	0112      	lsls	r2, r2, #4
100014d8:	601a      	str	r2, [r3, #0]
    clock->div = div;
100014da:	2280      	movs	r2, #128	; 0x80
    configured_freq[clk_index] = freq;
100014dc:	4b60      	ldr	r3, [pc, #384]	; (10001660 <clocks_init+0x2bc>)
    clock->div = div;
100014de:	0052      	lsls	r2, r2, #1
100014e0:	604a      	str	r2, [r1, #4]
    configured_freq[clk_index] = freq;
100014e2:	6163      	str	r3, [r4, #20]
    if (div > clock->div)
100014e4:	4b5f      	ldr	r3, [pc, #380]	; (10001664 <clocks_init+0x2c0>)
100014e6:	6859      	ldr	r1, [r3, #4]
100014e8:	29ff      	cmp	r1, #255	; 0xff
100014ea:	d800      	bhi.n	100014ee <clocks_init+0x14a>
        clock->div = div;
100014ec:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100014ee:	2280      	movs	r2, #128	; 0x80
100014f0:	4b5d      	ldr	r3, [pc, #372]	; (10001668 <clocks_init+0x2c4>)
        if (configured_freq[clk_index] > 0) {
100014f2:	69e1      	ldr	r1, [r4, #28]
100014f4:	0112      	lsls	r2, r2, #4
100014f6:	4d5b      	ldr	r5, [pc, #364]	; (10001664 <clocks_init+0x2c0>)
100014f8:	601a      	str	r2, [r3, #0]
100014fa:	2900      	cmp	r1, #0
100014fc:	d005      	beq.n	1000150a <clocks_init+0x166>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
100014fe:	6960      	ldr	r0, [r4, #20]
10001500:	f7fe ff38 	bl	10000374 <__wrap___aeabi_uidiv>
10001504:	3001      	adds	r0, #1
            asm volatile (
10001506:	3801      	subs	r0, #1
10001508:	d1fd      	bne.n	10001506 <clocks_init+0x162>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000150a:	22e0      	movs	r2, #224	; 0xe0
1000150c:	4955      	ldr	r1, [pc, #340]	; (10001664 <clocks_init+0x2c0>)
1000150e:	680b      	ldr	r3, [r1, #0]
10001510:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001512:	2380      	movs	r3, #128	; 0x80
10001514:	015b      	lsls	r3, r3, #5
10001516:	432b      	orrs	r3, r5
10001518:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000151a:	2380      	movs	r3, #128	; 0x80
1000151c:	2280      	movs	r2, #128	; 0x80
1000151e:	019b      	lsls	r3, r3, #6
10001520:	432b      	orrs	r3, r5
10001522:	0112      	lsls	r2, r2, #4
10001524:	601a      	str	r2, [r3, #0]
    clock->div = div;
10001526:	2280      	movs	r2, #128	; 0x80
    configured_freq[clk_index] = freq;
10001528:	4b3e      	ldr	r3, [pc, #248]	; (10001624 <clocks_init+0x280>)
    clock->div = div;
1000152a:	0052      	lsls	r2, r2, #1
1000152c:	604a      	str	r2, [r1, #4]
    configured_freq[clk_index] = freq;
1000152e:	61e3      	str	r3, [r4, #28]
    if (div > clock->div)
10001530:	4b4e      	ldr	r3, [pc, #312]	; (1000166c <clocks_init+0x2c8>)
10001532:	6859      	ldr	r1, [r3, #4]
10001534:	29ff      	cmp	r1, #255	; 0xff
10001536:	d800      	bhi.n	1000153a <clocks_init+0x196>
        clock->div = div;
10001538:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000153a:	2280      	movs	r2, #128	; 0x80
1000153c:	4b4c      	ldr	r3, [pc, #304]	; (10001670 <clocks_init+0x2cc>)
        if (configured_freq[clk_index] > 0) {
1000153e:	6a21      	ldr	r1, [r4, #32]
10001540:	0112      	lsls	r2, r2, #4
10001542:	4d4a      	ldr	r5, [pc, #296]	; (1000166c <clocks_init+0x2c8>)
10001544:	601a      	str	r2, [r3, #0]
10001546:	2900      	cmp	r1, #0
10001548:	d005      	beq.n	10001556 <clocks_init+0x1b2>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
1000154a:	6960      	ldr	r0, [r4, #20]
1000154c:	f7fe ff12 	bl	10000374 <__wrap___aeabi_uidiv>
10001550:	3001      	adds	r0, #1
            asm volatile (
10001552:	3801      	subs	r0, #1
10001554:	d1fd      	bne.n	10001552 <clocks_init+0x1ae>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001556:	22e0      	movs	r2, #224	; 0xe0
10001558:	4944      	ldr	r1, [pc, #272]	; (1000166c <clocks_init+0x2c8>)
1000155a:	680b      	ldr	r3, [r1, #0]
1000155c:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000155e:	2380      	movs	r3, #128	; 0x80
10001560:	015b      	lsls	r3, r3, #5
10001562:	432b      	orrs	r3, r5
10001564:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001566:	2380      	movs	r3, #128	; 0x80
10001568:	2280      	movs	r2, #128	; 0x80
1000156a:	019b      	lsls	r3, r3, #6
1000156c:	432b      	orrs	r3, r5
1000156e:	0112      	lsls	r2, r2, #4
10001570:	601a      	str	r2, [r3, #0]
    clock->div = div;
10001572:	2380      	movs	r3, #128	; 0x80
    if (div > clock->div)
10001574:	2280      	movs	r2, #128	; 0x80
    clock->div = div;
10001576:	005b      	lsls	r3, r3, #1
10001578:	604b      	str	r3, [r1, #4]
    configured_freq[clk_index] = freq;
1000157a:	4b2a      	ldr	r3, [pc, #168]	; (10001624 <clocks_init+0x280>)
    if (div > clock->div)
1000157c:	02d2      	lsls	r2, r2, #11
    configured_freq[clk_index] = freq;
1000157e:	6223      	str	r3, [r4, #32]
    if (div > clock->div)
10001580:	4b3c      	ldr	r3, [pc, #240]	; (10001674 <clocks_init+0x2d0>)
10001582:	6859      	ldr	r1, [r3, #4]
10001584:	4291      	cmp	r1, r2
10001586:	d200      	bcs.n	1000158a <clocks_init+0x1e6>
        clock->div = div;
10001588:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000158a:	2280      	movs	r2, #128	; 0x80
1000158c:	4b3a      	ldr	r3, [pc, #232]	; (10001678 <clocks_init+0x2d4>)
        if (configured_freq[clk_index] > 0) {
1000158e:	6a61      	ldr	r1, [r4, #36]	; 0x24
10001590:	0112      	lsls	r2, r2, #4
10001592:	4d38      	ldr	r5, [pc, #224]	; (10001674 <clocks_init+0x2d0>)
10001594:	601a      	str	r2, [r3, #0]
10001596:	2900      	cmp	r1, #0
10001598:	d005      	beq.n	100015a6 <clocks_init+0x202>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
1000159a:	6960      	ldr	r0, [r4, #20]
1000159c:	f7fe feea 	bl	10000374 <__wrap___aeabi_uidiv>
100015a0:	3001      	adds	r0, #1
            asm volatile (
100015a2:	3801      	subs	r0, #1
100015a4:	d1fd      	bne.n	100015a2 <clocks_init+0x1fe>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100015a6:	22e0      	movs	r2, #224	; 0xe0
100015a8:	4932      	ldr	r1, [pc, #200]	; (10001674 <clocks_init+0x2d0>)
100015aa:	680b      	ldr	r3, [r1, #0]
100015ac:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100015ae:	2380      	movs	r3, #128	; 0x80
100015b0:	015b      	lsls	r3, r3, #5
100015b2:	432b      	orrs	r3, r5
100015b4:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100015b6:	2380      	movs	r3, #128	; 0x80
100015b8:	2280      	movs	r2, #128	; 0x80
100015ba:	019b      	lsls	r3, r3, #6
100015bc:	432b      	orrs	r3, r5
100015be:	0112      	lsls	r2, r2, #4
100015c0:	601a      	str	r2, [r3, #0]
    clock->div = div;
100015c2:	2380      	movs	r3, #128	; 0x80
100015c4:	02db      	lsls	r3, r3, #11
100015c6:	604b      	str	r3, [r1, #4]
    configured_freq[clk_index] = freq;
100015c8:	4b17      	ldr	r3, [pc, #92]	; (10001628 <clocks_init+0x284>)
100015ca:	6263      	str	r3, [r4, #36]	; 0x24
    if (div > clock->div)
100015cc:	4b2b      	ldr	r3, [pc, #172]	; (1000167c <clocks_init+0x2d8>)
100015ce:	685a      	ldr	r2, [r3, #4]
100015d0:	2aff      	cmp	r2, #255	; 0xff
100015d2:	d802      	bhi.n	100015da <clocks_init+0x236>
        clock->div = div;
100015d4:	2280      	movs	r2, #128	; 0x80
100015d6:	0052      	lsls	r2, r2, #1
100015d8:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100015da:	2280      	movs	r2, #128	; 0x80
100015dc:	4b28      	ldr	r3, [pc, #160]	; (10001680 <clocks_init+0x2dc>)
        if (configured_freq[clk_index] > 0) {
100015de:	69a1      	ldr	r1, [r4, #24]
100015e0:	0112      	lsls	r2, r2, #4
100015e2:	4d26      	ldr	r5, [pc, #152]	; (1000167c <clocks_init+0x2d8>)
100015e4:	601a      	str	r2, [r3, #0]
100015e6:	2900      	cmp	r1, #0
100015e8:	d005      	beq.n	100015f6 <clocks_init+0x252>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
100015ea:	6960      	ldr	r0, [r4, #20]
100015ec:	f7fe fec2 	bl	10000374 <__wrap___aeabi_uidiv>
100015f0:	3001      	adds	r0, #1
            asm volatile (
100015f2:	3801      	subs	r0, #1
100015f4:	d1fd      	bne.n	100015f2 <clocks_init+0x24e>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100015f6:	22e0      	movs	r2, #224	; 0xe0
100015f8:	4920      	ldr	r1, [pc, #128]	; (1000167c <clocks_init+0x2d8>)
100015fa:	680b      	ldr	r3, [r1, #0]
100015fc:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100015fe:	2380      	movs	r3, #128	; 0x80
10001600:	015b      	lsls	r3, r3, #5
10001602:	432b      	orrs	r3, r5
10001604:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001606:	2380      	movs	r3, #128	; 0x80
10001608:	2280      	movs	r2, #128	; 0x80
1000160a:	019b      	lsls	r3, r3, #6
1000160c:	432b      	orrs	r3, r5
1000160e:	0112      	lsls	r2, r2, #4
10001610:	601a      	str	r2, [r3, #0]
    clock->div = div;
10001612:	2380      	movs	r3, #128	; 0x80
10001614:	005b      	lsls	r3, r3, #1
10001616:	604b      	str	r3, [r1, #4]
    configured_freq[clk_index] = freq;
10001618:	4b11      	ldr	r3, [pc, #68]	; (10001660 <clocks_init+0x2bc>)
1000161a:	61a3      	str	r3, [r4, #24]
    return true;
1000161c:	e6d8      	b.n	100013d0 <clocks_init+0x2c>
1000161e:	46c0      	nop			; (mov r8, r8)
10001620:	20023460 	.word	0x20023460
10001624:	02dc6c00 	.word	0x02dc6c00
10001628:	0000b71b 	.word	0x0000b71b
1000162c:	40008000 	.word	0x40008000
10001630:	4000b03c 	.word	0x4000b03c
10001634:	4000b030 	.word	0x4000b030
10001638:	4000e000 	.word	0x4000e000
1000163c:	4000f000 	.word	0x4000f000
10001640:	4000c000 	.word	0x4000c000
10001644:	59682f00 	.word	0x59682f00
10001648:	40028000 	.word	0x40028000
1000164c:	1c9c3800 	.word	0x1c9c3800
10001650:	4002c000 	.word	0x4002c000
10001654:	40008030 	.word	0x40008030
10001658:	00b71b00 	.word	0x00b71b00
1000165c:	4000803c 	.word	0x4000803c
10001660:	07735940 	.word	0x07735940
10001664:	40008054 	.word	0x40008054
10001668:	4000b054 	.word	0x4000b054
1000166c:	40008060 	.word	0x40008060
10001670:	4000b060 	.word	0x4000b060
10001674:	4000806c 	.word	0x4000806c
10001678:	4000b06c 	.word	0x4000b06c
1000167c:	40008048 	.word	0x40008048
10001680:	4000b048 	.word	0x4000b048

10001684 <clock_get_hz>:

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(enum clock_index clk_index) {
    return configured_freq[clk_index];
10001684:	4b01      	ldr	r3, [pc, #4]	; (1000168c <clock_get_hz+0x8>)
10001686:	0080      	lsls	r0, r0, #2
10001688:	58c0      	ldr	r0, [r0, r3]
}
1000168a:	4770      	bx	lr
1000168c:	20023460 	.word	0x20023460

10001690 <critical_section_init>:

#if !PICO_NO_HARDWARE
static_assert(sizeof(critical_section_t) == 8, "");
#endif

void critical_section_init(critical_section_t *critsec) {
10001690:	b510      	push	{r4, lr}
10001692:	0004      	movs	r4, r0
    critical_section_init_with_lock_num(critsec, spin_lock_claim_unused(true));
10001694:	2001      	movs	r0, #1
10001696:	f002 fd3b 	bl	10004110 <spin_lock_claim_unused>
1000169a:	0001      	movs	r1, r0
}

void critical_section_init_with_lock_num(critical_section_t *critsec, uint lock_num) {
    lock_init(&critsec->core, lock_num);
1000169c:	0020      	movs	r0, r4
1000169e:	f000 faaf 	bl	10001c00 <lock_init>
    __asm volatile ("dmb");
100016a2:	f3bf 8f5f 	dmb	sy
}
100016a6:	bd10      	pop	{r4, pc}

100016a8 <__aeabi_double_init>:

bool running_on_fpga();
uint8_t rp2040_chip_version();

static inline uint8_t rp2040_rom_version() {
    return *(uint8_t*)0x13;
100016a8:	2313      	movs	r3, #19
    panic("missing double function");
}
#endif
extern void double_table_shim_on_use_helper();

void __aeabi_double_init() {
100016aa:	b570      	push	{r4, r5, r6, lr}
    int rom_version = rp2040_rom_version();
100016ac:	781d      	ldrb	r5, [r3, #0]
#if PICO_DOUBLE_SUPPORT_ROM_V1
    if (rom_version == 1) {
100016ae:	2d01      	cmp	r5, #1
100016b0:	d010      	beq.n	100016d4 <__aeabi_double_init+0x2c>
        for(uint i=0;i<SF_TABLE_V2_SIZE/4;i++) {
            sd_table[i] = (uintptr_t)missing_double_func_shim;
        }
    }
#endif
    if (rom_version >= 2) {
100016b2:	dd0b      	ble.n	100016cc <__aeabi_double_init+0x24>
        void *rom_table = rom_data_lookup(rom_table_code('S', 'D'));
100016b4:	4819      	ldr	r0, [pc, #100]	; (1000171c <__aeabi_double_init+0x74>)
100016b6:	f7ff fd43 	bl	10001140 <rom_data_lookup>
        assert(*((uint8_t *)(((void *)rom_data_lookup(rom_table_code('S', 'F')))-2)) * 4 >= SF_TABLE_V2_SIZE);
        memcpy(&sd_table, rom_table, SF_TABLE_V2_SIZE);
100016ba:	4c19      	ldr	r4, [pc, #100]	; (10001720 <__aeabi_double_init+0x78>)
        void *rom_table = rom_data_lookup(rom_table_code('S', 'D'));
100016bc:	0001      	movs	r1, r0
        memcpy(&sd_table, rom_table, SF_TABLE_V2_SIZE);
100016be:	2280      	movs	r2, #128	; 0x80
100016c0:	0020      	movs	r0, r4
100016c2:	f7ff fd15 	bl	100010f0 <__wrap___aeabi_memcpy>
                panic(NULL);
            }
#endif
        }
    }
    if (rom_version < 3) {
100016c6:	2d02      	cmp	r5, #2
100016c8:	d001      	beq.n	100016ce <__aeabi_double_init+0x26>
        // we use the unused entry for SINCOS
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
    }
}
100016ca:	bd70      	pop	{r4, r5, r6, pc}
100016cc:	4c14      	ldr	r4, [pc, #80]	; (10001720 <__aeabi_double_init+0x78>)
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
100016ce:	4b15      	ldr	r3, [pc, #84]	; (10001724 <__aeabi_double_init+0x7c>)
100016d0:	64a3      	str	r3, [r4, #72]	; 0x48
}
100016d2:	e7fa      	b.n	100016ca <__aeabi_double_init+0x22>
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
100016d4:	4b13      	ldr	r3, [pc, #76]	; (10001724 <__aeabi_double_init+0x7c>)
            sd_table[i] = (uintptr_t)double_table_shim_on_use_helper;
100016d6:	4c12      	ldr	r4, [pc, #72]	; (10001720 <__aeabi_double_init+0x78>)
100016d8:	6023      	str	r3, [r4, #0]
100016da:	6063      	str	r3, [r4, #4]
100016dc:	60a3      	str	r3, [r4, #8]
100016de:	60e3      	str	r3, [r4, #12]
100016e0:	6123      	str	r3, [r4, #16]
100016e2:	6163      	str	r3, [r4, #20]
100016e4:	61a3      	str	r3, [r4, #24]
100016e6:	61e3      	str	r3, [r4, #28]
100016e8:	6223      	str	r3, [r4, #32]
100016ea:	6263      	str	r3, [r4, #36]	; 0x24
100016ec:	62a3      	str	r3, [r4, #40]	; 0x28
100016ee:	62e3      	str	r3, [r4, #44]	; 0x2c
100016f0:	6323      	str	r3, [r4, #48]	; 0x30
100016f2:	6363      	str	r3, [r4, #52]	; 0x34
100016f4:	63a3      	str	r3, [r4, #56]	; 0x38
100016f6:	63e3      	str	r3, [r4, #60]	; 0x3c
100016f8:	6423      	str	r3, [r4, #64]	; 0x40
100016fa:	6463      	str	r3, [r4, #68]	; 0x44
100016fc:	64a3      	str	r3, [r4, #72]	; 0x48
100016fe:	64e3      	str	r3, [r4, #76]	; 0x4c
10001700:	6523      	str	r3, [r4, #80]	; 0x50
10001702:	6563      	str	r3, [r4, #84]	; 0x54
10001704:	65a3      	str	r3, [r4, #88]	; 0x58
10001706:	65e3      	str	r3, [r4, #92]	; 0x5c
10001708:	6623      	str	r3, [r4, #96]	; 0x60
1000170a:	6663      	str	r3, [r4, #100]	; 0x64
1000170c:	66a3      	str	r3, [r4, #104]	; 0x68
1000170e:	66e3      	str	r3, [r4, #108]	; 0x6c
10001710:	6723      	str	r3, [r4, #112]	; 0x70
10001712:	6763      	str	r3, [r4, #116]	; 0x74
10001714:	67a3      	str	r3, [r4, #120]	; 0x78
10001716:	67e3      	str	r3, [r4, #124]	; 0x7c
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
10001718:	64a3      	str	r3, [r4, #72]	; 0x48
1000171a:	e7d6      	b.n	100016ca <__aeabi_double_init+0x22>
1000171c:	00004453 	.word	0x00004453
10001720:	20003050 	.word	0x20003050
10001724:	100009d5 	.word	0x100009d5

10001728 <flash_get_unique_id>:
// Use standard RUID command to get a unique identifier for the flash (and
// hence the board)

static_assert(FLASH_UNIQUE_ID_SIZE_BYTES == FLASH_RUID_DATA_BYTES, "");

void flash_get_unique_id(uint8_t *id_out) {
10001728:	b530      	push	{r4, r5, lr}
#if PICO_NO_FLASH
    panic_unsupported();
#else
    uint8_t txbuf[FLASH_RUID_TOTAL_BYTES] = {0};
1000172a:	2500      	movs	r5, #0
void flash_get_unique_id(uint8_t *id_out) {
1000172c:	b089      	sub	sp, #36	; 0x24
1000172e:	0004      	movs	r4, r0
    uint8_t txbuf[FLASH_RUID_TOTAL_BYTES] = {0};
10001730:	2209      	movs	r2, #9
10001732:	2100      	movs	r1, #0
10001734:	a801      	add	r0, sp, #4
10001736:	9500      	str	r5, [sp, #0]
10001738:	f7ff fcd4 	bl	100010e4 <__wrap_memset>
    uint8_t rxbuf[FLASH_RUID_TOTAL_BYTES] = {0};
1000173c:	2209      	movs	r2, #9
1000173e:	2100      	movs	r1, #0
10001740:	a805      	add	r0, sp, #20
10001742:	9504      	str	r5, [sp, #16]
10001744:	f7ff fcce 	bl	100010e4 <__wrap_memset>
    txbuf[0] = FLASH_RUID_CMD;
10001748:	234b      	movs	r3, #75	; 0x4b
1000174a:	466a      	mov	r2, sp
    flash_do_cmd(txbuf, rxbuf, FLASH_RUID_TOTAL_BYTES);
1000174c:	4668      	mov	r0, sp
    txbuf[0] = FLASH_RUID_CMD;
1000174e:	7013      	strb	r3, [r2, #0]
    flash_do_cmd(txbuf, rxbuf, FLASH_RUID_TOTAL_BYTES);
10001750:	a904      	add	r1, sp, #16
10001752:	f007 fa9d 	bl	10008c90 <__flash_do_cmd.constprop.0_veneer>
    for (int i = 0; i < FLASH_RUID_DATA_BYTES; i++)
        id_out[i] = rxbuf[i + 1 + FLASH_RUID_DUMMY_BYTES];
10001756:	2115      	movs	r1, #21
10001758:	2208      	movs	r2, #8
1000175a:	0020      	movs	r0, r4
1000175c:	4469      	add	r1, sp
1000175e:	f7ff fcc7 	bl	100010f0 <__wrap___aeabi_memcpy>
#endif
}
10001762:	b009      	add	sp, #36	; 0x24
10001764:	bd30      	pop	{r4, r5, pc}
10001766:	46c0      	nop			; (mov r8, r8)

10001768 <__aeabi_float_init>:
10001768:	2313      	movs	r3, #19
static __attribute__((noreturn)) void missing_float_func_shim() {
    panic("");
}
#endif

void __aeabi_float_init() {
1000176a:	b510      	push	{r4, lr}
    int rom_version = rp2040_rom_version();
    void *rom_table = rom_data_lookup(rom_table_code('S', 'F'));
1000176c:	4812      	ldr	r0, [pc, #72]	; (100017b8 <__aeabi_float_init+0x50>)
    int rom_version = rp2040_rom_version();
1000176e:	781c      	ldrb	r4, [r3, #0]
    void *rom_table = rom_data_lookup(rom_table_code('S', 'F'));
10001770:	f7ff fce6 	bl	10001140 <rom_data_lookup>
10001774:	0001      	movs	r1, r0
#if PICO_FLOAT_SUPPORT_ROM_V1
    if (rom_version == 1) {
10001776:	2c01      	cmp	r4, #1
10001778:	d00a      	beq.n	10001790 <__aeabi_float_init+0x28>
        for(uint i=0;i<SF_TABLE_V2_SIZE/4;i++) {
            if (!sf_table[i]) sf_table[i] = (uintptr_t)missing_float_func_shim;
        }
    }
#endif
    if (rom_version >= 2) {
1000177a:	dd03      	ble.n	10001784 <__aeabi_float_init+0x1c>
        assert(*((uint8_t *)(rom_table-2)) * 4 >= SF_TABLE_V2_SIZE);
        memcpy(&sf_table, rom_table, SF_TABLE_V2_SIZE);
1000177c:	2280      	movs	r2, #128	; 0x80
1000177e:	480f      	ldr	r0, [pc, #60]	; (100017bc <__aeabi_float_init+0x54>)
10001780:	f7ff fcb6 	bl	100010f0 <__wrap___aeabi_memcpy>
    }
    sf_clz_func = rom_func_lookup(rom_table_code('L', '3'));
10001784:	480e      	ldr	r0, [pc, #56]	; (100017c0 <__aeabi_float_init+0x58>)
10001786:	f7ff fcd3 	bl	10001130 <rom_func_lookup>
1000178a:	4b0e      	ldr	r3, [pc, #56]	; (100017c4 <__aeabi_float_init+0x5c>)
1000178c:	6018      	str	r0, [r3, #0]
}
1000178e:	bd10      	pop	{r4, pc}
        memcpy(&sf_table, rom_table, SF_TABLE_V1_SIZE);
10001790:	4c0a      	ldr	r4, [pc, #40]	; (100017bc <__aeabi_float_init+0x54>)
10001792:	2254      	movs	r2, #84	; 0x54
10001794:	0020      	movs	r0, r4
10001796:	f7ff fcab 	bl	100010f0 <__wrap___aeabi_memcpy>
            sf_table[i] = (uintptr_t)float_table_shim_on_use_helper;
1000179a:	4b0b      	ldr	r3, [pc, #44]	; (100017c8 <__aeabi_float_init+0x60>)
1000179c:	6563      	str	r3, [r4, #84]	; 0x54
1000179e:	65a3      	str	r3, [r4, #88]	; 0x58
100017a0:	65e3      	str	r3, [r4, #92]	; 0x5c
100017a2:	6623      	str	r3, [r4, #96]	; 0x60
100017a4:	6663      	str	r3, [r4, #100]	; 0x64
100017a6:	66a3      	str	r3, [r4, #104]	; 0x68
100017a8:	66e3      	str	r3, [r4, #108]	; 0x6c
100017aa:	6723      	str	r3, [r4, #112]	; 0x70
100017ac:	6763      	str	r3, [r4, #116]	; 0x74
100017ae:	67a3      	str	r3, [r4, #120]	; 0x78
100017b0:	67e3      	str	r3, [r4, #124]	; 0x7c
        sf_table[SF_TABLE_FLOAT2INT/4] = sf_table[SF_TABLE_FLOAT2FIX/4] = (uintptr_t)float_table_shim_on_use_helper;
100017b2:	6223      	str	r3, [r4, #32]
100017b4:	61e3      	str	r3, [r4, #28]
    if (rom_version >= 2) {
100017b6:	e7e5      	b.n	10001784 <__aeabi_float_init+0x1c>
100017b8:	00004653 	.word	0x00004653
100017bc:	20003150 	.word	0x20003150
100017c0:	0000334c 	.word	0x0000334c
100017c4:	20023b64 	.word	0x20023b64
100017c8:	10001091 	.word	0x10001091

100017cc <gpio_set_function>:
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, enum gpio_function fn) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    invalid_params_if(GPIO, fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&padsbank0_hw->io[gpio],
100017cc:	4a09      	ldr	r2, [pc, #36]	; (100017f4 <gpio_set_function+0x28>)
100017ce:	0083      	lsls	r3, r0, #2
100017d0:	4694      	mov	ip, r2
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100017d2:	2240      	movs	r2, #64	; 0x40
100017d4:	4463      	add	r3, ip
void gpio_set_function(uint gpio, enum gpio_function fn) {
100017d6:	b510      	push	{r4, lr}
100017d8:	681c      	ldr	r4, [r3, #0]
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
100017da:	00c0      	lsls	r0, r0, #3
100017dc:	4062      	eors	r2, r4
100017de:	24c0      	movs	r4, #192	; 0xc0
100017e0:	4014      	ands	r4, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100017e2:	2280      	movs	r2, #128	; 0x80
100017e4:	0152      	lsls	r2, r2, #5
100017e6:	4313      	orrs	r3, r2
100017e8:	601c      	str	r4, [r3, #0]
100017ea:	4b03      	ldr	r3, [pc, #12]	; (100017f8 <gpio_set_function+0x2c>)
100017ec:	469c      	mov	ip, r3
100017ee:	4460      	add	r0, ip
100017f0:	6041      	str	r1, [r0, #4]
}
100017f2:	bd10      	pop	{r4, pc}
100017f4:	4001c004 	.word	0x4001c004
100017f8:	40014000 	.word	0x40014000

100017fc <gpio_set_pulls>:

// Note that, on RP2040, setting both pulls enables a "bus keep" function,
// i.e. weak pull to whatever is current high/low state of GPIO.
void gpio_set_pulls(uint gpio, bool up, bool down) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(
100017fc:	4b0a      	ldr	r3, [pc, #40]	; (10001828 <gpio_set_pulls+0x2c>)
100017fe:	0080      	lsls	r0, r0, #2
10001800:	469c      	mov	ip, r3
            &padsbank0_hw->io[gpio],
            (!!up << PADS_BANK0_GPIO0_PUE_LSB) | (!!down << PADS_BANK0_GPIO0_PDE_LSB),
10001802:	2304      	movs	r3, #4
    hw_write_masked(
10001804:	4460      	add	r0, ip
            (!!up << PADS_BANK0_GPIO0_PUE_LSB) | (!!down << PADS_BANK0_GPIO0_PDE_LSB),
10001806:	2900      	cmp	r1, #0
10001808:	d001      	beq.n	1000180e <gpio_set_pulls+0x12>
1000180a:	2108      	movs	r1, #8
1000180c:	230c      	movs	r3, #12
1000180e:	2a00      	cmp	r2, #0
10001810:	d100      	bne.n	10001814 <gpio_set_pulls+0x18>
10001812:	000b      	movs	r3, r1
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001814:	6802      	ldr	r2, [r0, #0]
10001816:	4053      	eors	r3, r2
10001818:	220c      	movs	r2, #12
1000181a:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000181c:	2380      	movs	r3, #128	; 0x80
1000181e:	015b      	lsls	r3, r3, #5
10001820:	4318      	orrs	r0, r3
10001822:	6002      	str	r2, [r0, #0]
            PADS_BANK0_GPIO0_PUE_BITS | PADS_BANK0_GPIO0_PDE_BITS
    );
}
10001824:	4770      	bx	lr
10001826:	46c0      	nop			; (mov r8, r8)
10001828:	4001c004 	.word	0x4001c004

1000182c <gpio_set_outover>:
    );
}

void gpio_set_outover(uint gpio, uint value) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(&iobank0_hw->io[gpio].ctrl,
1000182c:	4b07      	ldr	r3, [pc, #28]	; (1000184c <gpio_set_outover+0x20>)
1000182e:	00c0      	lsls	r0, r0, #3
10001830:	469c      	mov	ip, r3
10001832:	4460      	add	r0, ip
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001834:	6803      	ldr	r3, [r0, #0]
                   value << IO_BANK0_GPIO0_CTRL_OUTOVER_LSB,
10001836:	0209      	lsls	r1, r1, #8
10001838:	4059      	eors	r1, r3
1000183a:	23c0      	movs	r3, #192	; 0xc0
1000183c:	009b      	lsls	r3, r3, #2
1000183e:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001840:	2380      	movs	r3, #128	; 0x80
10001842:	015b      	lsls	r3, r3, #5
10001844:	4318      	orrs	r0, r3
10001846:	6001      	str	r1, [r0, #0]
                   IO_BANK0_GPIO0_CTRL_OUTOVER_BITS
    );
}
10001848:	4770      	bx	lr
1000184a:	46c0      	nop			; (mov r8, r8)
1000184c:	40014004 	.word	0x40014004

10001850 <gpio_init>:
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
}

void gpio_init(uint gpio) {
    sio_hw->gpio_oe_clr = 1ul << gpio;
10001850:	2301      	movs	r3, #1
10001852:	22d0      	movs	r2, #208	; 0xd0
10001854:	4083      	lsls	r3, r0
10001856:	0612      	lsls	r2, r2, #24
10001858:	6293      	str	r3, [r2, #40]	; 0x28
    sio_hw->gpio_clr = 1ul << gpio;
1000185a:	6193      	str	r3, [r2, #24]
    hw_write_masked(&padsbank0_hw->io[gpio],
1000185c:	4a09      	ldr	r2, [pc, #36]	; (10001884 <gpio_init+0x34>)
1000185e:	0083      	lsls	r3, r0, #2
10001860:	4694      	mov	ip, r2
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001862:	2240      	movs	r2, #64	; 0x40
10001864:	4463      	add	r3, ip
10001866:	6819      	ldr	r1, [r3, #0]
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
10001868:	00c0      	lsls	r0, r0, #3
1000186a:	404a      	eors	r2, r1
1000186c:	21c0      	movs	r1, #192	; 0xc0
1000186e:	4011      	ands	r1, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001870:	2280      	movs	r2, #128	; 0x80
10001872:	0152      	lsls	r2, r2, #5
10001874:	4313      	orrs	r3, r2
10001876:	6019      	str	r1, [r3, #0]
10001878:	4b03      	ldr	r3, [pc, #12]	; (10001888 <gpio_init+0x38>)
1000187a:	469c      	mov	ip, r3
1000187c:	2305      	movs	r3, #5
1000187e:	4460      	add	r0, ip
10001880:	6043      	str	r3, [r0, #4]
    gpio_set_function(gpio, GPIO_FUNC_SIO);
}
10001882:	4770      	bx	lr
10001884:	4001c004 	.word	0x4001c004
10001888:	40014000 	.word	0x40014000

1000188c <irq_set_enabled>:
    invalid_params_if(IRQ, num >= NUM_IRQS);
}

void irq_set_enabled(uint num, bool enabled) {
    check_irq_param(num);
    irq_set_mask_enabled(1u << num, enabled);
1000188c:	2301      	movs	r3, #1
1000188e:	4083      	lsls	r3, r0
    check_irq_param(num);
    return 0 != ((1u << num) & *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)));
}

void irq_set_mask_enabled(uint32_t mask, bool enabled) {
    if (enabled) {
10001890:	2900      	cmp	r1, #0
10001892:	d004      	beq.n	1000189e <irq_set_enabled+0x12>
        // Clear pending before enable
        // (if IRQ is actually asserted, it will immediately re-pend)
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICPR_OFFSET)) = mask;
10001894:	4a03      	ldr	r2, [pc, #12]	; (100018a4 <irq_set_enabled+0x18>)
10001896:	6013      	str	r3, [r2, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)) = mask;
10001898:	4a03      	ldr	r2, [pc, #12]	; (100018a8 <irq_set_enabled+0x1c>)
1000189a:	6013      	str	r3, [r2, #0]
}
1000189c:	4770      	bx	lr
    } else {
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
1000189e:	4a03      	ldr	r2, [pc, #12]	; (100018ac <irq_set_enabled+0x20>)
100018a0:	6013      	str	r3, [r2, #0]
}
100018a2:	e7fb      	b.n	1000189c <irq_set_enabled+0x10>
100018a4:	e000e280 	.word	0xe000e280
100018a8:	e000e100 	.word	0xe000e100
100018ac:	e000e180 	.word	0xe000e180

100018b0 <irq_set_pending>:
    }
}

void irq_set_pending(uint num) {
    check_irq_param(num);
    *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISPR_OFFSET)) = 1u << num;
100018b0:	2301      	movs	r3, #1
100018b2:	4083      	lsls	r3, r0
100018b4:	4a01      	ldr	r2, [pc, #4]	; (100018bc <irq_set_pending+0xc>)
100018b6:	6013      	str	r3, [r2, #0]
}
100018b8:	4770      	bx	lr
100018ba:	46c0      	nop			; (mov r8, r8)
100018bc:	e000e200 	.word	0xe000e200

100018c0 <irq_get_vtable_handler>:
    return (irq_handler_t *) scb_hw->vtor;
100018c0:	4b02      	ldr	r3, [pc, #8]	; (100018cc <irq_get_vtable_handler+0xc>)
    return (uintptr_t)raw_handler - (uintptr_t)irq_handler_chain_slots < sizeof(irq_handler_chain_slots);
}

irq_handler_t irq_get_vtable_handler(uint num) {
    check_irq_param(num);
    return get_vtable()[16 + num];
100018c2:	3010      	adds	r0, #16
    return (irq_handler_t *) scb_hw->vtor;
100018c4:	689b      	ldr	r3, [r3, #8]
    return get_vtable()[16 + num];
100018c6:	0080      	lsls	r0, r0, #2
100018c8:	58c0      	ldr	r0, [r0, r3]
}
100018ca:	4770      	bx	lr
100018cc:	e000ed00 	.word	0xe000ed00

100018d0 <irq_set_exclusive_handler>:

void irq_set_exclusive_handler(uint num, irq_handler_t handler) {
100018d0:	b570      	push	{r4, r5, r6, lr}
100018d2:	000d      	movs	r5, r1
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100018d4:	f3ef 8610 	mrs	r6, PRIMASK
    __asm volatile ("cpsid i");
100018d8:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100018da:	4a0f      	ldr	r2, [pc, #60]	; (10001918 <irq_set_exclusive_handler+0x48>)
100018dc:	6813      	ldr	r3, [r2, #0]
100018de:	2b00      	cmp	r3, #0
100018e0:	d0fc      	beq.n	100018dc <irq_set_exclusive_handler+0xc>
    __asm volatile ("dmb");
100018e2:	f3bf 8f5f 	dmb	sy
    return (irq_handler_t *) scb_hw->vtor;
100018e6:	4b0d      	ldr	r3, [pc, #52]	; (1000191c <irq_set_exclusive_handler+0x4c>)
    return get_vtable()[16 + num];
100018e8:	3010      	adds	r0, #16
    return (irq_handler_t *) scb_hw->vtor;
100018ea:	689b      	ldr	r3, [r3, #8]
    return get_vtable()[16 + num];
100018ec:	0084      	lsls	r4, r0, #2
100018ee:	591b      	ldr	r3, [r3, r4]
    check_irq_param(num);
#if !PICO_NO_RAM_VECTOR_TABLE
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
    uint32_t save = spin_lock_blocking(lock);
    __unused irq_handler_t current = irq_get_vtable_handler(num);
    hard_assert(current == __unhandled_user_irq || current == handler);
100018f0:	4a0b      	ldr	r2, [pc, #44]	; (10001920 <irq_set_exclusive_handler+0x50>)
100018f2:	4293      	cmp	r3, r2
100018f4:	d003      	beq.n	100018fe <irq_set_exclusive_handler+0x2e>
100018f6:	429d      	cmp	r5, r3
100018f8:	d001      	beq.n	100018fe <irq_set_exclusive_handler+0x2e>

#ifdef NDEBUG
extern void hard_assertion_failure();
static inline void hard_assert(bool condition, ...) {
    if (!condition)
        hard_assertion_failure();
100018fa:	f002 f897 	bl	10003a2c <hard_assertion_failure>
    return (irq_handler_t *) scb_hw->vtor;
100018fe:	4b07      	ldr	r3, [pc, #28]	; (1000191c <irq_set_exclusive_handler+0x4c>)
10001900:	689b      	ldr	r3, [r3, #8]
    get_vtable()[16 + num] = handler;
10001902:	511d      	str	r5, [r3, r4]
10001904:	f3bf 8f5f 	dmb	sy
10001908:	f3bf 8f5f 	dmb	sy
    *lock = 0;
1000190c:	2200      	movs	r2, #0
1000190e:	4b02      	ldr	r3, [pc, #8]	; (10001918 <irq_set_exclusive_handler+0x48>)
10001910:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001912:	f386 8810 	msr	PRIMASK, r6
    set_raw_irq_handler_and_unlock(num, handler, save);
#else
    panic_unsupported();
#endif
}
10001916:	bd70      	pop	{r4, r5, r6, pc}
10001918:	d0000124 	.word	0xd0000124
1000191c:	e000ed00 	.word	0xe000ed00
10001920:	100001cd 	.word	0x100001cd

10001924 <irq_remove_handler>:
    }
    set_raw_irq_handler_and_unlock(num, vtable_handler, save);
#endif
}

void irq_remove_handler(uint num, irq_handler_t handler) {
10001924:	b5f0      	push	{r4, r5, r6, r7, lr}
10001926:	46de      	mov	lr, fp
10001928:	4657      	mov	r7, sl
1000192a:	464e      	mov	r6, r9
1000192c:	4645      	mov	r5, r8
1000192e:	b5e0      	push	{r5, r6, r7, lr}
10001930:	000c      	movs	r4, r1
10001932:	b083      	sub	sp, #12
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001934:	f3ef 8a10 	mrs	sl, PRIMASK
    __asm volatile ("cpsid i");
10001938:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000193a:	4a5e      	ldr	r2, [pc, #376]	; (10001ab4 <irq_remove_handler+0x190>)
1000193c:	6813      	ldr	r3, [r2, #0]
1000193e:	2b00      	cmp	r3, #0
10001940:	d0fc      	beq.n	1000193c <irq_remove_handler+0x18>
    __asm volatile ("dmb");
10001942:	f3bf 8f5f 	dmb	sy
#if !PICO_NO_RAM_VECTOR_TABLE
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
    uint32_t save = spin_lock_blocking(lock);
    irq_handler_t vtable_handler = get_vtable()[16 + num];
10001946:	2210      	movs	r2, #16
10001948:	4691      	mov	r9, r2
1000194a:	4481      	add	r9, r0
1000194c:	464a      	mov	r2, r9
    return (irq_handler_t *) scb_hw->vtor;
1000194e:	4b5a      	ldr	r3, [pc, #360]	; (10001ab8 <irq_remove_handler+0x194>)
    irq_handler_t vtable_handler = get_vtable()[16 + num];
10001950:	0096      	lsls	r6, r2, #2
    return (irq_handler_t *) scb_hw->vtor;
10001952:	689b      	ldr	r3, [r3, #8]
    irq_handler_t vtable_handler = get_vtable()[16 + num];
10001954:	599d      	ldr	r5, [r3, r6]
    if (vtable_handler != __unhandled_user_irq && vtable_handler != handler) {
10001956:	4b59      	ldr	r3, [pc, #356]	; (10001abc <irq_remove_handler+0x198>)
10001958:	4698      	mov	r8, r3
1000195a:	429d      	cmp	r5, r3
1000195c:	d005      	beq.n	1000196a <irq_remove_handler+0x46>
1000195e:	42a5      	cmp	r5, r4
10001960:	d016      	beq.n	10001990 <irq_remove_handler+0x6c>
    return (uintptr_t)raw_handler - (uintptr_t)irq_handler_chain_slots < sizeof(irq_handler_chain_slots);
10001962:	4f57      	ldr	r7, [pc, #348]	; (10001ac0 <irq_remove_handler+0x19c>)
10001964:	1beb      	subs	r3, r5, r7
#if !PICO_DISABLE_SHARED_IRQ_HANDLERS && PICO_MAX_SHARED_IRQ_HANDLERS
        if (is_shared_irq_raw_handler(vtable_handler)) {
10001966:	2b2f      	cmp	r3, #47	; 0x2f
10001968:	d914      	bls.n	10001994 <irq_remove_handler+0x70>
    return (irq_handler_t *) scb_hw->vtor;
1000196a:	4b53      	ldr	r3, [pc, #332]	; (10001ab8 <irq_remove_handler+0x194>)
1000196c:	689b      	ldr	r3, [r3, #8]
    get_vtable()[16 + num] = handler;
1000196e:	519d      	str	r5, [r3, r6]
10001970:	f3bf 8f5f 	dmb	sy
10001974:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001978:	2200      	movs	r2, #0
1000197a:	4b4e      	ldr	r3, [pc, #312]	; (10001ab4 <irq_remove_handler+0x190>)
1000197c:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000197e:	f38a 8810 	msr	PRIMASK, sl
    }
    set_raw_irq_handler_and_unlock(num, vtable_handler, save);
#else
    panic_unsupported();
#endif
}
10001982:	b003      	add	sp, #12
10001984:	bcf0      	pop	{r4, r5, r6, r7}
10001986:	46bb      	mov	fp, r7
10001988:	46b2      	mov	sl, r6
1000198a:	46a9      	mov	r9, r5
1000198c:	46a0      	mov	r8, r4
1000198e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vtable_handler = __unhandled_user_irq;
10001990:	001d      	movs	r5, r3
10001992:	e7ea      	b.n	1000196a <irq_remove_handler+0x46>
    return 0 != ((1u << num) & *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)));
10001994:	2301      	movs	r3, #1
10001996:	4083      	lsls	r3, r0
10001998:	469b      	mov	fp, r3
1000199a:	465a      	mov	r2, fp
1000199c:	4b49      	ldr	r3, [pc, #292]	; (10001ac4 <irq_remove_handler+0x1a0>)
1000199e:	681b      	ldr	r3, [r3, #0]
100019a0:	401a      	ands	r2, r3
100019a2:	9200      	str	r2, [sp, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
100019a4:	465a      	mov	r2, fp
100019a6:	4b48      	ldr	r3, [pc, #288]	; (10001ac8 <irq_remove_handler+0x1a4>)
100019a8:	601a      	str	r2, [r3, #0]
    __asm volatile ("dmb");
100019aa:	f3bf 8f5f 	dmb	sy
            uint exception = __get_current_exception();
100019ae:	f7fe fc5a 	bl	10000266 <__get_current_exception>
100019b2:	9001      	str	r0, [sp, #4]
            hard_assert(!exception || exception == num + 16);
100019b4:	2800      	cmp	r0, #0
100019b6:	d003      	beq.n	100019c0 <irq_remove_handler+0x9c>
100019b8:	4581      	cmp	r9, r0
100019ba:	d001      	beq.n	100019c0 <irq_remove_handler+0x9c>
100019bc:	f002 f836 	bl	10003a2c <hard_assertion_failure>
    return (void *) (((uintptr_t) addr) & ~0x1);
100019c0:	2301      	movs	r3, #1
100019c2:	0029      	movs	r1, r5
100019c4:	4399      	bics	r1, r3
            while (to_free_slot->handler != handler) {
100019c6:	688b      	ldr	r3, [r1, #8]
100019c8:	42a3      	cmp	r3, r4
100019ca:	d068      	beq.n	10001a9e <irq_remove_handler+0x17a>
100019cc:	000a      	movs	r2, r1
100019ce:	e007      	b.n	100019e0 <irq_remove_handler+0xbc>
                to_free_slot = &irq_handler_chain_slots[to_free_slot->link];
100019d0:	0043      	lsls	r3, r0, #1
100019d2:	181b      	adds	r3, r3, r0
100019d4:	009b      	lsls	r3, r3, #2
100019d6:	18fb      	adds	r3, r7, r3
            while (to_free_slot->handler != handler) {
100019d8:	6898      	ldr	r0, [r3, #8]
100019da:	42a0      	cmp	r0, r4
100019dc:	d011      	beq.n	10001a02 <irq_remove_handler+0xde>
                to_free_slot = &irq_handler_chain_slots[to_free_slot->link];
100019de:	001a      	movs	r2, r3
                if (to_free_slot->link < 0) break;
100019e0:	2006      	movs	r0, #6
100019e2:	5610      	ldrsb	r0, [r2, r0]
100019e4:	2800      	cmp	r0, #0
100019e6:	daf3      	bge.n	100019d0 <irq_remove_handler+0xac>
    if (enabled) {
100019e8:	9b00      	ldr	r3, [sp, #0]
100019ea:	2b00      	cmp	r3, #0
100019ec:	d005      	beq.n	100019fa <irq_remove_handler+0xd6>
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICPR_OFFSET)) = mask;
100019ee:	465a      	mov	r2, fp
100019f0:	4b36      	ldr	r3, [pc, #216]	; (10001acc <irq_remove_handler+0x1a8>)
100019f2:	601a      	str	r2, [r3, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)) = mask;
100019f4:	4b33      	ldr	r3, [pc, #204]	; (10001ac4 <irq_remove_handler+0x1a0>)
100019f6:	601a      	str	r2, [r3, #0]
100019f8:	e7b7      	b.n	1000196a <irq_remove_handler+0x46>
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
100019fa:	465a      	mov	r2, fp
100019fc:	4b32      	ldr	r3, [pc, #200]	; (10001ac8 <irq_remove_handler+0x1a4>)
100019fe:	601a      	str	r2, [r3, #0]
10001a00:	e7b3      	b.n	1000196a <irq_remove_handler+0x46>
                int next_slot_index = to_free_slot->link;
10001a02:	2006      	movs	r0, #6
10001a04:	5618      	ldrsb	r0, [r3, r0]
                if (next_slot_index >= 0) {
10001a06:	2800      	cmp	r0, #0
10001a08:	db21      	blt.n	10001a4e <irq_remove_handler+0x12a>
                    to_free_slot->handler = next_slot->handler;
10001a0a:	0042      	lsls	r2, r0, #1
10001a0c:	1811      	adds	r1, r2, r0
10001a0e:	0089      	lsls	r1, r1, #2
10001a10:	187c      	adds	r4, r7, r1
10001a12:	4688      	mov	r8, r1
10001a14:	68a1      	ldr	r1, [r4, #8]
10001a16:	6099      	str	r1, [r3, #8]
                    to_free_slot->priority = next_slot->priority;
10001a18:	79e1      	ldrb	r1, [r4, #7]
10001a1a:	71d9      	strb	r1, [r3, #7]
                    to_free_slot->link = next_slot->link;
10001a1c:	2106      	movs	r1, #6
10001a1e:	5661      	ldrsb	r1, [r4, r1]
10001a20:	7199      	strb	r1, [r3, #6]
                    to_free_slot->inst3 = next_slot->link >= 0 ?
10001a22:	2900      	cmp	r1, #0
10001a24:	db2b      	blt.n	10001a7e <irq_remove_handler+0x15a>
    int32_t i_addr = (*inst) << 21u;
10001a26:	88a4      	ldrh	r4, [r4, #4]
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10001a28:	1af9      	subs	r1, r7, r3
    int32_t i_addr = (*inst) << 21u;
10001a2a:	0564      	lsls	r4, r4, #21
    return inst + 2 + i_addr;
10001a2c:	1524      	asrs	r4, r4, #20
10001a2e:	4444      	add	r4, r8
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10001a30:	1909      	adds	r1, r1, r4
    return 0xe000 | (delta & 0x7ff);
10001a32:	24e0      	movs	r4, #224	; 0xe0
10001a34:	0509      	lsls	r1, r1, #20
10001a36:	0d49      	lsrs	r1, r1, #21
10001a38:	0224      	lsls	r4, r4, #8
10001a3a:	4321      	orrs	r1, r4
                    to_free_slot->inst3 = next_slot->link >= 0 ?
10001a3c:	8099      	strh	r1, [r3, #4]
                    next_slot->link = irq_hander_chain_free_slot_head;
10001a3e:	1812      	adds	r2, r2, r0
10001a40:	4b23      	ldr	r3, [pc, #140]	; (10001ad0 <irq_remove_handler+0x1ac>)
10001a42:	0092      	lsls	r2, r2, #2
10001a44:	18bf      	adds	r7, r7, r2
10001a46:	781a      	ldrb	r2, [r3, #0]
                    irq_hander_chain_free_slot_head = next_slot_index;
10001a48:	7018      	strb	r0, [r3, #0]
                    next_slot->link = irq_hander_chain_free_slot_head;
10001a4a:	71ba      	strb	r2, [r7, #6]
                    irq_hander_chain_free_slot_head = next_slot_index;
10001a4c:	e7cc      	b.n	100019e8 <irq_remove_handler+0xc4>
                    if (!exception) {
10001a4e:	9801      	ldr	r0, [sp, #4]
10001a50:	2800      	cmp	r0, #0
10001a52:	d117      	bne.n	10001a84 <irq_remove_handler+0x160>
                            prev_slot->link = -1;
10001a54:	30ff      	adds	r0, #255	; 0xff
10001a56:	7190      	strb	r0, [r2, #6]
                            prev_slot->inst3 = 0xbd00; // pop {pc}
10001a58:	481e      	ldr	r0, [pc, #120]	; (10001ad4 <irq_remove_handler+0x1b0>)
10001a5a:	8090      	strh	r0, [r2, #4]
                        to_free_slot->link = irq_hander_chain_free_slot_head;
10001a5c:	4a1c      	ldr	r2, [pc, #112]	; (10001ad0 <irq_remove_handler+0x1ac>)
            int to_free_slot_index = to_free_slot - irq_handler_chain_slots;
10001a5e:	1bc9      	subs	r1, r1, r7
                        to_free_slot->link = irq_hander_chain_free_slot_head;
10001a60:	7810      	ldrb	r0, [r2, #0]
            int to_free_slot_index = to_free_slot - irq_handler_chain_slots;
10001a62:	1089      	asrs	r1, r1, #2
                        to_free_slot->link = irq_hander_chain_free_slot_head;
10001a64:	7198      	strb	r0, [r3, #6]
            int to_free_slot_index = to_free_slot - irq_handler_chain_slots;
10001a66:	008b      	lsls	r3, r1, #2
10001a68:	185b      	adds	r3, r3, r1
10001a6a:	0118      	lsls	r0, r3, #4
10001a6c:	181b      	adds	r3, r3, r0
10001a6e:	0218      	lsls	r0, r3, #8
10001a70:	181b      	adds	r3, r3, r0
10001a72:	0418      	lsls	r0, r3, #16
10001a74:	181b      	adds	r3, r3, r0
10001a76:	005b      	lsls	r3, r3, #1
10001a78:	185b      	adds	r3, r3, r1
                        irq_hander_chain_free_slot_head = to_free_slot_index;
10001a7a:	7013      	strb	r3, [r2, #0]
10001a7c:	e7b4      	b.n	100019e8 <irq_remove_handler+0xc4>
                    to_free_slot->inst3 = next_slot->link >= 0 ?
10001a7e:	21bd      	movs	r1, #189	; 0xbd
10001a80:	0209      	lsls	r1, r1, #8
10001a82:	e7db      	b.n	10001a3c <irq_remove_handler+0x118>
                        insert_branch_and_link(&to_free_slot->inst3, irq_handler_chain_remove_tail);
10001a84:	4a14      	ldr	r2, [pc, #80]	; (10001ad8 <irq_remove_handler+0x1b4>)
    from[0] = 0xf000 | ((delta >> 11u) & 0x7ffu);
10001a86:	4915      	ldr	r1, [pc, #84]	; (10001adc <irq_remove_handler+0x1b8>)
                        insert_branch_and_link(&to_free_slot->inst3, irq_handler_chain_remove_tail);
10001a88:	1ad2      	subs	r2, r2, r3
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10001a8a:	3a08      	subs	r2, #8
    from[0] = 0xf000 | ((delta >> 11u) & 0x7ffu);
10001a8c:	0250      	lsls	r0, r2, #9
10001a8e:	0d40      	lsrs	r0, r0, #21
10001a90:	4301      	orrs	r1, r0
10001a92:	8099      	strh	r1, [r3, #4]
    from[1] = 0xf800 | (delta & 0x7ffu);
10001a94:	4912      	ldr	r1, [pc, #72]	; (10001ae0 <irq_remove_handler+0x1bc>)
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10001a96:	0852      	lsrs	r2, r2, #1
    from[1] = 0xf800 | (delta & 0x7ffu);
10001a98:	430a      	orrs	r2, r1
10001a9a:	80da      	strh	r2, [r3, #6]
}
10001a9c:	e7a4      	b.n	100019e8 <irq_remove_handler+0xc4>
                int next_slot_index = to_free_slot->link;
10001a9e:	2006      	movs	r0, #6
10001aa0:	5608      	ldrsb	r0, [r1, r0]
                if (next_slot_index >= 0) {
10001aa2:	000b      	movs	r3, r1
10001aa4:	2800      	cmp	r0, #0
10001aa6:	dab0      	bge.n	10001a0a <irq_remove_handler+0xe6>
                    if (!exception) {
10001aa8:	9a01      	ldr	r2, [sp, #4]
10001aaa:	2a00      	cmp	r2, #0
10001aac:	d1ea      	bne.n	10001a84 <irq_remove_handler+0x160>
                            vtable_handler = __unhandled_user_irq;
10001aae:	4645      	mov	r5, r8
10001ab0:	e7d4      	b.n	10001a5c <irq_remove_handler+0x138>
10001ab2:	46c0      	nop			; (mov r8, r8)
10001ab4:	d0000124 	.word	0xd0000124
10001ab8:	e000ed00 	.word	0xe000ed00
10001abc:	100001cd 	.word	0x100001cd
10001ac0:	200026c0 	.word	0x200026c0
10001ac4:	e000e100 	.word	0xe000e100
10001ac8:	e000e180 	.word	0xe000e180
10001acc:	e000e280 	.word	0xe000e280
10001ad0:	20023b8a 	.word	0x20023b8a
10001ad4:	ffffbd00 	.word	0xffffbd00
10001ad8:	200026fa 	.word	0x200026fa
10001adc:	fffff000 	.word	0xfffff000
10001ae0:	fffff800 	.word	0xfffff800

10001ae4 <irq_set_priority>:

void irq_set_priority(uint num, uint8_t hardware_priority) {
    check_irq_param(num);

    // note that only 32 bit writes are supported
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001ae4:	2303      	movs	r3, #3
void irq_set_priority(uint num, uint8_t hardware_priority) {
10001ae6:	b510      	push	{r4, lr}
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001ae8:	0004      	movs	r4, r0
10001aea:	4a07      	ldr	r2, [pc, #28]	; (10001b08 <irq_set_priority+0x24>)
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001aec:	4018      	ands	r0, r3
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001aee:	4694      	mov	ip, r2
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001af0:	00c0      	lsls	r0, r0, #3
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001af2:	439c      	bics	r4, r3
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001af4:	33fc      	adds	r3, #252	; 0xfc
10001af6:	4083      	lsls	r3, r0
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001af8:	4464      	add	r4, ip
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001afa:	6822      	ldr	r2, [r4, #0]
10001afc:	4081      	lsls	r1, r0
10001afe:	439a      	bics	r2, r3
10001b00:	0013      	movs	r3, r2
10001b02:	430b      	orrs	r3, r1
10001b04:	6023      	str	r3, [r4, #0]
}
10001b06:	bd10      	pop	{r4, pc}
10001b08:	e000e400 	.word	0xe000e400

10001b0c <irq_add_tail_to_free_list>:

#if !PICO_DISABLE_SHARED_IRQ_HANDLERS && PICO_MAX_SHARED_IRQ_HANDLERS
// used by irq_handler_chain.S to remove the last link in a handler chain after it executes
// note this must be called only with the last slot in a chain (and during the exception)
void irq_add_tail_to_free_list(struct irq_handler_chain_slot *slot) {
10001b0c:	b570      	push	{r4, r5, r6, lr}
    return (void *) (((uintptr_t) addr) | 0x1);
10001b0e:	2501      	movs	r5, #1
void irq_add_tail_to_free_list(struct irq_handler_chain_slot *slot) {
10001b10:	0004      	movs	r4, r0
    return (void *) (((uintptr_t) addr) | 0x1);
10001b12:	4305      	orrs	r5, r0
    irq_handler_t slot_handler = (irq_handler_t) add_thumb_bit(slot);
    assert(is_shared_irq_raw_handler(slot_handler));

    int exception = __get_current_exception();
10001b14:	f7fe fba7 	bl	10000266 <__get_current_exception>
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001b18:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10001b1c:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10001b1e:	4a24      	ldr	r2, [pc, #144]	; (10001bb0 <irq_add_tail_to_free_list+0xa4>)
10001b20:	6813      	ldr	r3, [r2, #0]
10001b22:	2b00      	cmp	r3, #0
10001b24:	d0fc      	beq.n	10001b20 <irq_add_tail_to_free_list+0x14>
    __asm volatile ("dmb");
10001b26:	f3bf 8f5f 	dmb	sy
    assert(exception);
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
    uint32_t save = spin_lock_blocking(lock);
    int slot_index = slot - irq_handler_chain_slots;
10001b2a:	4e22      	ldr	r6, [pc, #136]	; (10001bb4 <irq_add_tail_to_free_list+0xa8>)
    if (slot_handler == get_vtable()[exception]) {
10001b2c:	0080      	lsls	r0, r0, #2
    int slot_index = slot - irq_handler_chain_slots;
10001b2e:	1ba1      	subs	r1, r4, r6
10001b30:	1089      	asrs	r1, r1, #2
10001b32:	008a      	lsls	r2, r1, #2
10001b34:	1852      	adds	r2, r2, r1
10001b36:	0113      	lsls	r3, r2, #4
10001b38:	18d2      	adds	r2, r2, r3
10001b3a:	0213      	lsls	r3, r2, #8
10001b3c:	18d2      	adds	r2, r2, r3
10001b3e:	0413      	lsls	r3, r2, #16
10001b40:	18d3      	adds	r3, r2, r3
    return (irq_handler_t *) scb_hw->vtor;
10001b42:	4a1d      	ldr	r2, [pc, #116]	; (10001bb8 <irq_add_tail_to_free_list+0xac>)
    int slot_index = slot - irq_handler_chain_slots;
10001b44:	005b      	lsls	r3, r3, #1
10001b46:	185b      	adds	r3, r3, r1
    return (irq_handler_t *) scb_hw->vtor;
10001b48:	6891      	ldr	r1, [r2, #8]
    if (slot_handler == get_vtable()[exception]) {
10001b4a:	5809      	ldr	r1, [r1, r0]
10001b4c:	42a9      	cmp	r1, r5
10001b4e:	d01c      	beq.n	10001b8a <irq_add_tail_to_free_list+0x7e>
        get_vtable()[exception] = __unhandled_user_irq;
    } else {
        bool __unused found = false;
        // need to find who points at the slot and update it
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
            if (irq_handler_chain_slots[i].link == slot_index) {
10001b50:	2206      	movs	r2, #6
10001b52:	56b2      	ldrsb	r2, [r6, r2]
10001b54:	429a      	cmp	r2, r3
10001b56:	d01c      	beq.n	10001b92 <irq_add_tail_to_free_list+0x86>
10001b58:	2212      	movs	r2, #18
10001b5a:	56b2      	ldrsb	r2, [r6, r2]
10001b5c:	4293      	cmp	r3, r2
10001b5e:	d022      	beq.n	10001ba6 <irq_add_tail_to_free_list+0x9a>
10001b60:	221e      	movs	r2, #30
10001b62:	56b2      	ldrsb	r2, [r6, r2]
10001b64:	4293      	cmp	r3, r2
10001b66:	d020      	beq.n	10001baa <irq_add_tail_to_free_list+0x9e>
10001b68:	222a      	movs	r2, #42	; 0x2a
10001b6a:	56b2      	ldrsb	r2, [r6, r2]
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
10001b6c:	2103      	movs	r1, #3
            if (irq_handler_chain_slots[i].link == slot_index) {
10001b6e:	429a      	cmp	r2, r3
10001b70:	d010      	beq.n	10001b94 <irq_add_tail_to_free_list+0x88>
            }
        }
        assert(found);
    }
    // add slot to free list
    slot->link = irq_hander_chain_free_slot_head;
10001b72:	4a12      	ldr	r2, [pc, #72]	; (10001bbc <irq_add_tail_to_free_list+0xb0>)
10001b74:	7811      	ldrb	r1, [r2, #0]
    irq_hander_chain_free_slot_head = slot_index;
10001b76:	7013      	strb	r3, [r2, #0]
    slot->link = irq_hander_chain_free_slot_head;
10001b78:	71a1      	strb	r1, [r4, #6]
10001b7a:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001b7e:	2200      	movs	r2, #0
10001b80:	4b0b      	ldr	r3, [pc, #44]	; (10001bb0 <irq_add_tail_to_free_list+0xa4>)
10001b82:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001b84:	f38c 8810 	msr	PRIMASK, ip
    spin_unlock(lock, save);
}
10001b88:	bd70      	pop	{r4, r5, r6, pc}
    return (irq_handler_t *) scb_hw->vtor;
10001b8a:	6892      	ldr	r2, [r2, #8]
        get_vtable()[exception] = __unhandled_user_irq;
10001b8c:	490c      	ldr	r1, [pc, #48]	; (10001bc0 <irq_add_tail_to_free_list+0xb4>)
10001b8e:	5011      	str	r1, [r2, r0]
10001b90:	e7ef      	b.n	10001b72 <irq_add_tail_to_free_list+0x66>
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
10001b92:	2100      	movs	r1, #0
                irq_handler_chain_slots[i].link = -1;
10001b94:	004a      	lsls	r2, r1, #1
10001b96:	1852      	adds	r2, r2, r1
10001b98:	21ff      	movs	r1, #255	; 0xff
10001b9a:	0092      	lsls	r2, r2, #2
10001b9c:	18b2      	adds	r2, r6, r2
10001b9e:	7191      	strb	r1, [r2, #6]
                irq_handler_chain_slots[i].inst3 = 0xbd00; // pop {pc}
10001ba0:	4908      	ldr	r1, [pc, #32]	; (10001bc4 <irq_add_tail_to_free_list+0xb8>)
10001ba2:	8091      	strh	r1, [r2, #4]
                break;
10001ba4:	e7e5      	b.n	10001b72 <irq_add_tail_to_free_list+0x66>
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
10001ba6:	2101      	movs	r1, #1
10001ba8:	e7f4      	b.n	10001b94 <irq_add_tail_to_free_list+0x88>
10001baa:	2102      	movs	r1, #2
10001bac:	e7f2      	b.n	10001b94 <irq_add_tail_to_free_list+0x88>
10001bae:	46c0      	nop			; (mov r8, r8)
10001bb0:	d0000124 	.word	0xd0000124
10001bb4:	200026c0 	.word	0x200026c0
10001bb8:	e000ed00 	.word	0xe000ed00
10001bbc:	20023b8a 	.word	0x20023b8a
10001bc0:	100001cd 	.word	0x100001cd
10001bc4:	ffffbd00 	.word	0xffffbd00

10001bc8 <irq_init_priorities>:
#endif

void irq_init_priorities() {
10001bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if PICO_DEFAULT_IRQ_PRIORITY != 0
    for (uint irq = 0; irq < NUM_IRQS; irq++) {
10001bca:	2200      	movs	r2, #0
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001bcc:	2403      	movs	r4, #3
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001bce:	27ff      	movs	r7, #255	; 0xff
10001bd0:	2680      	movs	r6, #128	; 0x80
10001bd2:	0020      	movs	r0, r4
10001bd4:	003d      	movs	r5, r7
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001bd6:	4b09      	ldr	r3, [pc, #36]	; (10001bfc <irq_init_priorities+0x34>)
10001bd8:	0011      	movs	r1, r2
10001bda:	469c      	mov	ip, r3
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001bdc:	4010      	ands	r0, r2
10001bde:	00c0      	lsls	r0, r0, #3
10001be0:	4085      	lsls	r5, r0
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001be2:	43a1      	bics	r1, r4
10001be4:	4461      	add	r1, ip
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001be6:	680b      	ldr	r3, [r1, #0]
    for (uint irq = 0; irq < NUM_IRQS; irq++) {
10001be8:	3201      	adds	r2, #1
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001bea:	43ab      	bics	r3, r5
10001bec:	0035      	movs	r5, r6
10001bee:	4085      	lsls	r5, r0
10001bf0:	432b      	orrs	r3, r5
10001bf2:	600b      	str	r3, [r1, #0]
    for (uint irq = 0; irq < NUM_IRQS; irq++) {
10001bf4:	2a20      	cmp	r2, #32
10001bf6:	d1ec      	bne.n	10001bd2 <irq_init_priorities+0xa>
        irq_set_priority(irq, PICO_DEFAULT_IRQ_PRIORITY);
    }
#endif
}
10001bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001bfa:	46c0      	nop			; (mov r8, r8)
10001bfc:	e000e400 	.word	0xe000e400

10001c00 <lock_init>:
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
10001c00:	4b02      	ldr	r3, [pc, #8]	; (10001c0c <lock_init+0xc>)
10001c02:	469c      	mov	ip, r3
10001c04:	4461      	add	r1, ip
10001c06:	0089      	lsls	r1, r1, #2

#include "pico/lock_core.h"

void lock_init(lock_core_t *core, uint lock_num) {
    assert(lock_num >= 0 && lock_num < NUM_SPIN_LOCKS);
    core->spin_lock = spin_lock_instance(lock_num);
10001c08:	6001      	str	r1, [r0, #0]
}
10001c0a:	4770      	bx	lr
10001c0c:	34000040 	.word	0x34000040

10001c10 <core1_trampoline>:

// Default stack for core1 ... if multicore_launch_core1 is not included then .stack1 section will be garbage collected
static uint32_t __attribute__((section(".stack1"))) core1_stack[PICO_CORE1_STACK_SIZE / sizeof(uint32_t)];

static void __attribute__ ((naked)) core1_trampoline() {
    __asm("pop {r0, r1, pc}");
10001c10:	bd03      	pop	{r0, r1, pc}
10001c12:	46c0      	nop			; (mov r8, r8)

10001c14 <core1_wrapper>:
}

int core1_wrapper(int (*entry)(void), void *stack_base) {
10001c14:	b510      	push	{r4, lr}
10001c16:	0004      	movs	r4, r0
#if PICO_USE_STACK_GUARDS
    // install core1 stack guard
    runtime_install_stack_guard(stack_base);
#endif
    irq_init_priorities();
10001c18:	f7ff ffd6 	bl	10001bc8 <irq_init_priorities>
    return (*entry)();
10001c1c:	47a0      	blx	r4
}
10001c1e:	bd10      	pop	{r4, pc}

10001c20 <multicore_launch_core1>:
    stack_ptr[1] = (uintptr_t) stack_bottom;
    stack_ptr[2] = (uintptr_t) core1_wrapper;
    multicore_launch_core1_raw(core1_trampoline, stack_ptr, scb_hw->vtor);
}

void multicore_launch_core1(void (*entry)(void)) {
10001c20:	b530      	push	{r4, r5, lr}
    extern char __StackOneBottom;
    uint32_t *stack_limit = (uint32_t *) &__StackOneBottom;
    // hack to reference core1_stack although that pointer is wrong.... core1_stack should always be <= stack_limit, if not boom!
    uint32_t *stack = core1_stack <= stack_limit ? stack_limit : (uint32_t *) -1;
10001c22:	4a22      	ldr	r2, [pc, #136]	; (10001cac <multicore_launch_core1+0x8c>)
10001c24:	4b22      	ldr	r3, [pc, #136]	; (10001cb0 <multicore_launch_core1+0x90>)
void multicore_launch_core1(void (*entry)(void)) {
10001c26:	b087      	sub	sp, #28
    uint32_t *stack = core1_stack <= stack_limit ? stack_limit : (uint32_t *) -1;
10001c28:	429a      	cmp	r2, r3
10001c2a:	d201      	bcs.n	10001c30 <multicore_launch_core1+0x10>
10001c2c:	2201      	movs	r2, #1
10001c2e:	4252      	negs	r2, r2
10001c30:	0013      	movs	r3, r2
    stack_ptr[0] = (uintptr_t) entry;
10001c32:	4920      	ldr	r1, [pc, #128]	; (10001cb4 <multicore_launch_core1+0x94>)
    multicore_launch_core1_with_stack(entry, stack, sizeof(core1_stack));
}

void multicore_launch_core1_raw(void (*entry)(void), uint32_t *sp, uint32_t vector_table) {
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001c34:	2400      	movs	r4, #0
    stack_ptr[0] = (uintptr_t) entry;
10001c36:	5050      	str	r0, [r2, r1]
    stack_ptr[1] = (uintptr_t) stack_bottom;
10001c38:	3104      	adds	r1, #4
10001c3a:	5052      	str	r2, [r2, r1]
    stack_ptr[2] = (uintptr_t) core1_wrapper;
10001c3c:	4a1e      	ldr	r2, [pc, #120]	; (10001cb8 <multicore_launch_core1+0x98>)
10001c3e:	491f      	ldr	r1, [pc, #124]	; (10001cbc <multicore_launch_core1+0x9c>)
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001c40:	2000      	movs	r0, #0
    stack_ptr[2] = (uintptr_t) core1_wrapper;
10001c42:	5099      	str	r1, [r3, r2]
    multicore_launch_core1_raw(core1_trampoline, stack_ptr, scb_hw->vtor);
10001c44:	4a1e      	ldr	r2, [pc, #120]	; (10001cc0 <multicore_launch_core1+0xa0>)
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001c46:	2100      	movs	r1, #0
    multicore_launch_core1_raw(core1_trampoline, stack_ptr, scb_hw->vtor);
10001c48:	6892      	ldr	r2, [r2, #8]
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001c4a:	9000      	str	r0, [sp, #0]
10001c4c:	9101      	str	r1, [sp, #4]
10001c4e:	9203      	str	r2, [sp, #12]
    stack_ptr -= 3;
10001c50:	4a18      	ldr	r2, [pc, #96]	; (10001cb4 <multicore_launch_core1+0x94>)
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001c52:	2101      	movs	r1, #1
    stack_ptr -= 3;
10001c54:	4694      	mov	ip, r2
10001c56:	4463      	add	r3, ip
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001c58:	9304      	str	r3, [sp, #16]
10001c5a:	4b1a      	ldr	r3, [pc, #104]	; (10001cc4 <multicore_launch_core1+0xa4>)

    uint seq = 0;
10001c5c:	2500      	movs	r5, #0
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001c5e:	9305      	str	r3, [sp, #20]
 *  \ingroup multicore_fifo
 *
 * \return true if the FIFO has data in it, false otherwise
 */
static inline bool multicore_fifo_rvalid() {
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_VLD_BITS);
10001c60:	23d0      	movs	r3, #208	; 0xd0
10001c62:	9102      	str	r1, [sp, #8]
10001c64:	061b      	lsls	r3, r3, #24
 *  \ingroup multicore_fifo
 *
 *  @return true if the FIFO is full, false otherwise
 */
static inline bool multicore_fifo_wready() {
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_RDY_BITS);
10001c66:	3002      	adds	r0, #2
    do {
        uint cmd = cmd_sequence[seq];
        // we drain before sending a 0
        if (!cmd) {
10001c68:	2c00      	cmp	r4, #0
10001c6a:	d014      	beq.n	10001c96 <multicore_launch_core1+0x76>
10001c6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    while (!multicore_fifo_wready())
10001c6e:	4210      	tst	r0, r2
10001c70:	d0fc      	beq.n	10001c6c <multicore_launch_core1+0x4c>
    sio_hw->fifo_wr = data;
10001c72:	655c      	str	r4, [r3, #84]	; 0x54
    __asm volatile ("sev");
10001c74:	bf40      	sev
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_VLD_BITS);
10001c76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    while (!multicore_fifo_rvalid())
10001c78:	4211      	tst	r1, r2
10001c7a:	d103      	bne.n	10001c84 <multicore_launch_core1+0x64>
    __asm volatile ("wfe");
10001c7c:	bf20      	wfe
10001c7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
10001c80:	4211      	tst	r1, r2
10001c82:	d0fb      	beq.n	10001c7c <multicore_launch_core1+0x5c>
    return sio_hw->fifo_rd;
10001c84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
            __sev(); // core 1 may be waiting for fifo space
        }
        multicore_fifo_push_blocking(cmd);
        uint32_t response = multicore_fifo_pop_blocking();
        // move to next state on correct response otherwise start over
        seq = cmd == response ? seq + 1 : 0;
10001c86:	42a2      	cmp	r2, r4
10001c88:	d00a      	beq.n	10001ca0 <multicore_launch_core1+0x80>
10001c8a:	2500      	movs	r5, #0
        uint cmd = cmd_sequence[seq];
10001c8c:	466c      	mov	r4, sp
10001c8e:	00aa      	lsls	r2, r5, #2
10001c90:	58a4      	ldr	r4, [r4, r2]
10001c92:	e7e9      	b.n	10001c68 <multicore_launch_core1+0x48>
 *  \ingroup multicore_fifo
 *
 */
static inline void multicore_fifo_drain() {
    while (multicore_fifo_rvalid())
        (void) sio_hw->fifo_rd;
10001c94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_VLD_BITS);
10001c96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    while (multicore_fifo_rvalid())
10001c98:	4211      	tst	r1, r2
10001c9a:	d1fb      	bne.n	10001c94 <multicore_launch_core1+0x74>
    __asm volatile ("sev");
10001c9c:	bf40      	sev
    while (!multicore_fifo_wready())
10001c9e:	e7e5      	b.n	10001c6c <multicore_launch_core1+0x4c>
        seq = cmd == response ? seq + 1 : 0;
10001ca0:	3501      	adds	r5, #1
    } while (seq < count_of(cmd_sequence));
10001ca2:	2d05      	cmp	r5, #5
10001ca4:	d9f2      	bls.n	10001c8c <multicore_launch_core1+0x6c>
}
10001ca6:	b007      	add	sp, #28
10001ca8:	bd30      	pop	{r4, r5, pc}
10001caa:	46c0      	nop			; (mov r8, r8)
10001cac:	20040800 	.word	0x20040800
10001cb0:	20040000 	.word	0x20040000
10001cb4:	000007f4 	.word	0x000007f4
10001cb8:	000007fc 	.word	0x000007fc
10001cbc:	10001c15 	.word	0x10001c15
10001cc0:	e000ed00 	.word	0xe000ed00
10001cc4:	10001c11 	.word	0x10001c11

10001cc8 <mutex_init>:

#if !PICO_NO_HARDWARE
static_assert(sizeof(mutex_t) == 8, "");
#endif

void mutex_init(mutex_t *mtx) {
10001cc8:	b510      	push	{r4, lr}
10001cca:	0004      	movs	r4, r0
    lock_init(&mtx->core, next_striped_spin_lock_num());
10001ccc:	f002 fa14 	bl	100040f8 <next_striped_spin_lock_num>
10001cd0:	0001      	movs	r1, r0
10001cd2:	0020      	movs	r0, r4
10001cd4:	f7ff ff94 	bl	10001c00 <lock_init>
    mtx->owner = -1;
10001cd8:	23ff      	movs	r3, #255	; 0xff
10001cda:	7123      	strb	r3, [r4, #4]
    __asm volatile ("dmb");
10001cdc:	f3bf 8f5f 	dmb	sy
    __mem_fence_release();
}
10001ce0:	bd10      	pop	{r4, pc}
10001ce2:	46c0      	nop			; (mov r8, r8)

10001ce4 <ph_merge_nodes>:
        c->sibling = n->child;
        n->child = child_id;
    }
}

static pheap_node_id_t ph_merge_nodes(pheap_t *heap, pheap_node_id_t a, pheap_node_id_t b) {
10001ce4:	b570      	push	{r4, r5, r6, lr}
10001ce6:	0005      	movs	r5, r0
10001ce8:	0014      	movs	r4, r2
10001cea:	0016      	movs	r6, r2
    if (!a) return b;
10001cec:	2900      	cmp	r1, #0
10001cee:	d015      	beq.n	10001d1c <ph_merge_nodes+0x38>
    if (!b) return a;
10001cf0:	000c      	movs	r4, r1
10001cf2:	2a00      	cmp	r2, #0
10001cf4:	d012      	beq.n	10001d1c <ph_merge_nodes+0x38>
    if (heap->comparator(heap->user_data, a, b)) {
10001cf6:	6880      	ldr	r0, [r0, #8]
10001cf8:	686b      	ldr	r3, [r5, #4]
10001cfa:	4798      	blx	r3
10001cfc:	6829      	ldr	r1, [r5, #0]
10001cfe:	2800      	cmp	r0, #0
10001d00:	d00e      	beq.n	10001d20 <ph_merge_nodes+0x3c>
    return heap->nodes + id - 1;
10001d02:	0073      	lsls	r3, r6, #1
10001d04:	199b      	adds	r3, r3, r6
10001d06:	0062      	lsls	r2, r4, #1
10001d08:	3b03      	subs	r3, #3
10001d0a:	1912      	adds	r2, r2, r4
10001d0c:	18cb      	adds	r3, r1, r3
10001d0e:	3a03      	subs	r2, #3
    c->parent = parent_id;
10001d10:	709c      	strb	r4, [r3, #2]
    return heap->nodes + id - 1;
10001d12:	1888      	adds	r0, r1, r2
    if (!n->child) {
10001d14:	5c8a      	ldrb	r2, [r1, r2]
10001d16:	2a00      	cmp	r2, #0
10001d18:	d115      	bne.n	10001d46 <ph_merge_nodes+0x62>
        n->child = child_id;
10001d1a:	7006      	strb	r6, [r0, #0]
        return a;
    } else {
        ph_add_child_node(heap, b, a);
        return b;
    }
}
10001d1c:	0020      	movs	r0, r4
10001d1e:	bd70      	pop	{r4, r5, r6, pc}
    return heap->nodes + id - 1;
10001d20:	0063      	lsls	r3, r4, #1
10001d22:	191b      	adds	r3, r3, r4
10001d24:	0072      	lsls	r2, r6, #1
10001d26:	3b03      	subs	r3, #3
10001d28:	1992      	adds	r2, r2, r6
10001d2a:	18cb      	adds	r3, r1, r3
10001d2c:	3a03      	subs	r2, #3
    c->parent = parent_id;
10001d2e:	709e      	strb	r6, [r3, #2]
    return heap->nodes + id - 1;
10001d30:	1888      	adds	r0, r1, r2
    if (!n->child) {
10001d32:	5c8a      	ldrb	r2, [r1, r2]
10001d34:	2a00      	cmp	r2, #0
10001d36:	d102      	bne.n	10001d3e <ph_merge_nodes+0x5a>
        n->child = child_id;
10001d38:	7004      	strb	r4, [r0, #0]
10001d3a:	0034      	movs	r4, r6
10001d3c:	e7ee      	b.n	10001d1c <ph_merge_nodes+0x38>
        c->sibling = n->child;
10001d3e:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
10001d40:	7004      	strb	r4, [r0, #0]
10001d42:	0034      	movs	r4, r6
10001d44:	e7ea      	b.n	10001d1c <ph_merge_nodes+0x38>
        c->sibling = n->child;
10001d46:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
10001d48:	7006      	strb	r6, [r0, #0]
10001d4a:	e7e7      	b.n	10001d1c <ph_merge_nodes+0x38>

10001d4c <ph_create>:

#include <stdio.h>
#include <stdlib.h>
#include "pico/util/pheap.h"

pheap_t *ph_create(uint max_nodes, pheap_comparator comparator, void *user_data) {
10001d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10001d4e:	46c6      	mov	lr, r8
10001d50:	0005      	movs	r5, r0
10001d52:	000f      	movs	r7, r1
10001d54:	b500      	push	{lr}
    invalid_params_if(PHEAP, !max_nodes || max_nodes >= (1u << sizeof(pheap_node_id_t)));
    pheap_t *heap = calloc(1, sizeof(pheap_t));
10001d56:	2110      	movs	r1, #16
10001d58:	2001      	movs	r0, #1
pheap_t *ph_create(uint max_nodes, pheap_comparator comparator, void *user_data) {
10001d5a:	0016      	movs	r6, r2
    pheap_t *heap = calloc(1, sizeof(pheap_t));
10001d5c:	f000 f9ac 	bl	100020b8 <__wrap_calloc>
    heap->max_nodes = max_nodes;
10001d60:	b2eb      	uxtb	r3, r5
    pheap_t *heap = calloc(1, sizeof(pheap_t));
10001d62:	0004      	movs	r4, r0
    heap->max_nodes = max_nodes;
10001d64:	7303      	strb	r3, [r0, #12]
    heap->comparator = comparator;
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
10001d66:	2103      	movs	r1, #3
    heap->comparator = comparator;
10001d68:	6047      	str	r7, [r0, #4]
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
10001d6a:	0028      	movs	r0, r5
    heap->max_nodes = max_nodes;
10001d6c:	4698      	mov	r8, r3
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
10001d6e:	f000 f9a3 	bl	100020b8 <__wrap_calloc>
    ph_clear(heap);
    return heap;
}

void ph_clear(pheap_t *heap) {
    heap->root_id = 0;
10001d72:	2300      	movs	r3, #0
10001d74:	7363      	strb	r3, [r4, #13]
    heap->free_head_id = 1;
10001d76:	3301      	adds	r3, #1
10001d78:	73a3      	strb	r3, [r4, #14]
    heap->free_tail_id = heap->max_nodes;
10001d7a:	4643      	mov	r3, r8
10001d7c:	21ff      	movs	r1, #255	; 0xff
10001d7e:	73e3      	strb	r3, [r4, #15]
    for(uint i = 1; i < heap->max_nodes; i++) {
10001d80:	23fe      	movs	r3, #254	; 0xfe
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
10001d82:	6020      	str	r0, [r4, #0]
    heap->user_data = user_data;
10001d84:	60a6      	str	r6, [r4, #8]
    for(uint i = 1; i < heap->max_nodes; i++) {
10001d86:	4029      	ands	r1, r5
10001d88:	422b      	tst	r3, r5
10001d8a:	d006      	beq.n	10001d9a <ph_create+0x4e>
10001d8c:	1c42      	adds	r2, r0, #1
10001d8e:	3bfd      	subs	r3, #253	; 0xfd
        ph_get_node(heap, i)->sibling = i + 1;
10001d90:	3301      	adds	r3, #1
10001d92:	7013      	strb	r3, [r2, #0]
    for(uint i = 1; i < heap->max_nodes; i++) {
10001d94:	3203      	adds	r2, #3
10001d96:	428b      	cmp	r3, r1
10001d98:	d3fa      	bcc.n	10001d90 <ph_create+0x44>
    }
    ph_get_node(heap, heap->max_nodes)->sibling = 0;
10001d9a:	004b      	lsls	r3, r1, #1
10001d9c:	1859      	adds	r1, r3, r1
10001d9e:	2300      	movs	r3, #0
10001da0:	1840      	adds	r0, r0, r1
10001da2:	3803      	subs	r0, #3
10001da4:	7043      	strb	r3, [r0, #1]
}
10001da6:	0020      	movs	r0, r4
10001da8:	bc80      	pop	{r7}
10001daa:	46b8      	mov	r8, r7
10001dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001dae:	46c0      	nop			; (mov r8, r8)

10001db0 <ph_merge_two_pass>:
void ph_destroy(pheap_t *heap) {
    free(heap->nodes);
    free(heap);
}

pheap_node_id_t ph_merge_two_pass(pheap_t *heap, pheap_node_id_t id) {
10001db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10001db2:	46ce      	mov	lr, r9
10001db4:	4647      	mov	r7, r8
10001db6:	0006      	movs	r6, r0
10001db8:	000c      	movs	r4, r1
10001dba:	b580      	push	{r7, lr}
    if (!id || !ph_get_node(heap, id)->sibling) {
10001dbc:	2900      	cmp	r1, #0
10001dbe:	d007      	beq.n	10001dd0 <ph_merge_two_pass+0x20>
    return heap->nodes + id - 1;
10001dc0:	004d      	lsls	r5, r1, #1
10001dc2:	6803      	ldr	r3, [r0, #0]
10001dc4:	186d      	adds	r5, r5, r1
10001dc6:	3d03      	subs	r5, #3
10001dc8:	195a      	adds	r2, r3, r5
10001dca:	7857      	ldrb	r7, [r2, #1]
10001dcc:	2f00      	cmp	r7, #0
10001dce:	d104      	bne.n	10001dda <ph_merge_two_pass+0x2a>
        b = ph_get_node(heap, id)->sibling;
        new_node = ph_get_node(heap, b)->sibling;
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
    }
}
10001dd0:	0020      	movs	r0, r4
10001dd2:	bcc0      	pop	{r6, r7}
10001dd4:	46b9      	mov	r9, r7
10001dd6:	46b0      	mov	r8, r6
10001dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10001dda:	0079      	lsls	r1, r7, #1
10001ddc:	19c9      	adds	r1, r1, r7
10001dde:	3903      	subs	r1, #3
10001de0:	4688      	mov	r8, r1
10001de2:	4443      	add	r3, r8
        new_node = ph_get_node(heap, b)->sibling;
10001de4:	7859      	ldrb	r1, [r3, #1]
10001de6:	4689      	mov	r9, r1
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10001de8:	2100      	movs	r1, #0
10001dea:	7059      	strb	r1, [r3, #1]
10001dec:	7051      	strb	r1, [r2, #1]
    if (heap->comparator(heap->user_data, a, b)) {
10001dee:	6873      	ldr	r3, [r6, #4]
10001df0:	003a      	movs	r2, r7
10001df2:	0021      	movs	r1, r4
10001df4:	6880      	ldr	r0, [r0, #8]
10001df6:	4798      	blx	r3
10001df8:	6833      	ldr	r3, [r6, #0]
10001dfa:	2800      	cmp	r0, #0
10001dfc:	d014      	beq.n	10001e28 <ph_merge_two_pass+0x78>
    return heap->nodes + id - 1;
10001dfe:	4642      	mov	r2, r8
10001e00:	189a      	adds	r2, r3, r2
    c->parent = parent_id;
10001e02:	7094      	strb	r4, [r2, #2]
    return heap->nodes + id - 1;
10001e04:	1959      	adds	r1, r3, r5
    if (!n->child) {
10001e06:	5d5b      	ldrb	r3, [r3, r5]
10001e08:	2b00      	cmp	r3, #0
10001e0a:	d000      	beq.n	10001e0e <ph_merge_two_pass+0x5e>
        c->sibling = n->child;
10001e0c:	7053      	strb	r3, [r2, #1]
        n->child = child_id;
10001e0e:	700f      	strb	r7, [r1, #0]
10001e10:	0027      	movs	r7, r4
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001e12:	4649      	mov	r1, r9
10001e14:	0030      	movs	r0, r6
10001e16:	f7ff ffcb 	bl	10001db0 <ph_merge_two_pass>
10001e1a:	0039      	movs	r1, r7
10001e1c:	0002      	movs	r2, r0
10001e1e:	0030      	movs	r0, r6
10001e20:	f7ff ff60 	bl	10001ce4 <ph_merge_nodes>
10001e24:	0004      	movs	r4, r0
10001e26:	e7d3      	b.n	10001dd0 <ph_merge_two_pass+0x20>
    return heap->nodes + id - 1;
10001e28:	4642      	mov	r2, r8
    if (!n->child) {
10001e2a:	4641      	mov	r1, r8
    return heap->nodes + id - 1;
10001e2c:	195d      	adds	r5, r3, r5
    c->parent = parent_id;
10001e2e:	70af      	strb	r7, [r5, #2]
    return heap->nodes + id - 1;
10001e30:	189a      	adds	r2, r3, r2
    if (!n->child) {
10001e32:	5c5b      	ldrb	r3, [r3, r1]
10001e34:	2b00      	cmp	r3, #0
10001e36:	d000      	beq.n	10001e3a <ph_merge_two_pass+0x8a>
        c->sibling = n->child;
10001e38:	706b      	strb	r3, [r5, #1]
        n->child = child_id;
10001e3a:	7014      	strb	r4, [r2, #0]
10001e3c:	e7e9      	b.n	10001e12 <ph_merge_two_pass+0x62>
10001e3e:	46c0      	nop			; (mov r8, r8)

10001e40 <ph_remove_any_head>:

static pheap_node_id_t ph_remove_any_head(pheap_t *heap, pheap_node_id_t root_id, bool reserve) {
10001e40:	b5f0      	push	{r4, r5, r6, r7, lr}
10001e42:	4657      	mov	r7, sl
10001e44:	4645      	mov	r5, r8
10001e46:	46de      	mov	lr, fp
10001e48:	464e      	mov	r6, r9
10001e4a:	b5e0      	push	{r5, r6, r7, lr}
10001e4c:	000d      	movs	r5, r1
    return heap->nodes + id - 1;
10001e4e:	006b      	lsls	r3, r5, #1
10001e50:	6801      	ldr	r1, [r0, #0]
10001e52:	195b      	adds	r3, r3, r5
10001e54:	1edf      	subs	r7, r3, #3
10001e56:	0004      	movs	r4, r0
    assert(root_id);
//    printf("Removing head %d (parent %d sibling %d)\n", root_id, ph_get_node(heap, root_id)->parent, ph_get_node(heap, root_id)->sibling);
    assert(!ph_get_node(heap, root_id)->sibling);
    assert(!ph_get_node(heap, root_id)->parent);
    pheap_node_id_t new_root_id = ph_merge_two_pass(heap, ph_get_node(heap, root_id)->child);
10001e58:	5dc8      	ldrb	r0, [r1, r7]
static pheap_node_id_t ph_remove_any_head(pheap_t *heap, pheap_node_id_t root_id, bool reserve) {
10001e5a:	b083      	sub	sp, #12
10001e5c:	9201      	str	r2, [sp, #4]
10001e5e:	19ca      	adds	r2, r1, r7
    if (!id || !ph_get_node(heap, id)->sibling) {
10001e60:	2800      	cmp	r0, #0
10001e62:	d04c      	beq.n	10001efe <ph_remove_any_head+0xbe>
10001e64:	0043      	lsls	r3, r0, #1
10001e66:	181b      	adds	r3, r3, r0
10001e68:	3b03      	subs	r3, #3
10001e6a:	18cb      	adds	r3, r1, r3
10001e6c:	785e      	ldrb	r6, [r3, #1]
10001e6e:	46b4      	mov	ip, r6
10001e70:	2e00      	cmp	r6, #0
10001e72:	d116      	bne.n	10001ea2 <ph_remove_any_head+0x62>
    if (!reserve) {
10001e74:	9e01      	ldr	r6, [sp, #4]
10001e76:	2e00      	cmp	r6, #0
10001e78:	d13e      	bne.n	10001ef8 <ph_remove_any_head+0xb8>
        if (heap->free_tail_id) {
10001e7a:	7be6      	ldrb	r6, [r4, #15]
10001e7c:	2e00      	cmp	r6, #0
10001e7e:	d004      	beq.n	10001e8a <ph_remove_any_head+0x4a>
            ph_get_node(heap, heap->free_tail_id)->sibling = root_id;
10001e80:	0073      	lsls	r3, r6, #1
10001e82:	199b      	adds	r3, r3, r6
10001e84:	18cb      	adds	r3, r1, r3
10001e86:	3b03      	subs	r3, #3
10001e88:	705d      	strb	r5, [r3, #1]
        }
        heap->free_tail_id = root_id;
10001e8a:	73e5      	strb	r5, [r4, #15]
    }
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
10001e8c:	2800      	cmp	r0, #0
10001e8e:	d12f      	bne.n	10001ef0 <ph_remove_any_head+0xb0>
    ph_get_node(heap, root_id)->sibling = 0;
10001e90:	2300      	movs	r3, #0
10001e92:	7053      	strb	r3, [r2, #1]
    return new_root_id;
}
10001e94:	b003      	add	sp, #12
10001e96:	bcf0      	pop	{r4, r5, r6, r7}
10001e98:	46bb      	mov	fp, r7
10001e9a:	46b2      	mov	sl, r6
10001e9c:	46a9      	mov	r9, r5
10001e9e:	46a0      	mov	r8, r4
10001ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001ea2:	0072      	lsls	r2, r6, #1
10001ea4:	4462      	add	r2, ip
10001ea6:	3a03      	subs	r2, #3
10001ea8:	1889      	adds	r1, r1, r2
        new_node = ph_get_node(heap, b)->sibling;
10001eaa:	784a      	ldrb	r2, [r1, #1]
10001eac:	4690      	mov	r8, r2
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10001eae:	2200      	movs	r2, #0
10001eb0:	704a      	strb	r2, [r1, #1]
10001eb2:	4691      	mov	r9, r2
10001eb4:	705a      	strb	r2, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001eb6:	0001      	movs	r1, r0
10001eb8:	0032      	movs	r2, r6
10001eba:	0020      	movs	r0, r4
10001ebc:	f7ff ff12 	bl	10001ce4 <ph_merge_nodes>
    if (!id || !ph_get_node(heap, id)->sibling) {
10001ec0:	4643      	mov	r3, r8
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001ec2:	4682      	mov	sl, r0
    if (!id || !ph_get_node(heap, id)->sibling) {
10001ec4:	2b00      	cmp	r3, #0
10001ec6:	d007      	beq.n	10001ed8 <ph_remove_any_head+0x98>
10001ec8:	005b      	lsls	r3, r3, #1
10001eca:	6821      	ldr	r1, [r4, #0]
10001ecc:	4443      	add	r3, r8
10001ece:	3b03      	subs	r3, #3
10001ed0:	18cb      	adds	r3, r1, r3
10001ed2:	785a      	ldrb	r2, [r3, #1]
10001ed4:	2a00      	cmp	r2, #0
10001ed6:	d116      	bne.n	10001f06 <ph_remove_any_head+0xc6>
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001ed8:	4642      	mov	r2, r8
10001eda:	4651      	mov	r1, sl
10001edc:	0020      	movs	r0, r4
10001ede:	f7ff ff01 	bl	10001ce4 <ph_merge_nodes>
10001ee2:	6821      	ldr	r1, [r4, #0]
    if (!reserve) {
10001ee4:	9b01      	ldr	r3, [sp, #4]
10001ee6:	19ca      	adds	r2, r1, r7
10001ee8:	2b00      	cmp	r3, #0
10001eea:	d0c6      	beq.n	10001e7a <ph_remove_any_head+0x3a>
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
10001eec:	2800      	cmp	r0, #0
10001eee:	d0cf      	beq.n	10001e90 <ph_remove_any_head+0x50>
10001ef0:	0043      	lsls	r3, r0, #1
10001ef2:	181b      	adds	r3, r3, r0
10001ef4:	3b03      	subs	r3, #3
10001ef6:	18cb      	adds	r3, r1, r3
10001ef8:	2100      	movs	r1, #0
10001efa:	7099      	strb	r1, [r3, #2]
10001efc:	e7c8      	b.n	10001e90 <ph_remove_any_head+0x50>
    if (!reserve) {
10001efe:	9b01      	ldr	r3, [sp, #4]
10001f00:	2b00      	cmp	r3, #0
10001f02:	d1c5      	bne.n	10001e90 <ph_remove_any_head+0x50>
10001f04:	e7b9      	b.n	10001e7a <ph_remove_any_head+0x3a>
10001f06:	0050      	lsls	r0, r2, #1
10001f08:	1880      	adds	r0, r0, r2
10001f0a:	3803      	subs	r0, #3
10001f0c:	1809      	adds	r1, r1, r0
        new_node = ph_get_node(heap, b)->sibling;
10001f0e:	7848      	ldrb	r0, [r1, #1]
10001f10:	4683      	mov	fp, r0
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10001f12:	4648      	mov	r0, r9
10001f14:	7048      	strb	r0, [r1, #1]
10001f16:	7058      	strb	r0, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001f18:	4641      	mov	r1, r8
10001f1a:	0020      	movs	r0, r4
10001f1c:	f7ff fee2 	bl	10001ce4 <ph_merge_nodes>
10001f20:	4659      	mov	r1, fp
10001f22:	4680      	mov	r8, r0
10001f24:	0020      	movs	r0, r4
10001f26:	f7ff ff43 	bl	10001db0 <ph_merge_two_pass>
10001f2a:	4641      	mov	r1, r8
10001f2c:	0002      	movs	r2, r0
10001f2e:	0020      	movs	r0, r4
10001f30:	f7ff fed8 	bl	10001ce4 <ph_merge_nodes>
10001f34:	4680      	mov	r8, r0
10001f36:	e7cf      	b.n	10001ed8 <ph_remove_any_head+0x98>

10001f38 <ph_remove_head_reserve>:

pheap_node_id_t ph_remove_head_reserve(pheap_t *heap, bool reserve) {
10001f38:	b5f0      	push	{r4, r5, r6, r7, lr}
10001f3a:	4657      	mov	r7, sl
10001f3c:	4645      	mov	r5, r8
10001f3e:	46de      	mov	lr, fp
10001f40:	464e      	mov	r6, r9
10001f42:	b5e0      	push	{r5, r6, r7, lr}
10001f44:	b083      	sub	sp, #12
10001f46:	9101      	str	r1, [sp, #4]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
    return heap->root_id;
}

static inline pheap_node_id_t ph_peek_head(pheap_t *heap) {
    return heap->root_id;
10001f48:	7b45      	ldrb	r5, [r0, #13]
10001f4a:	0004      	movs	r4, r0
    return heap->nodes + id - 1;
10001f4c:	006b      	lsls	r3, r5, #1
10001f4e:	6800      	ldr	r0, [r0, #0]
10001f50:	195b      	adds	r3, r3, r5
10001f52:	1edf      	subs	r7, r3, #3
    pheap_node_id_t new_root_id = ph_merge_two_pass(heap, ph_get_node(heap, root_id)->child);
10001f54:	5dc1      	ldrb	r1, [r0, r7]
10001f56:	19c2      	adds	r2, r0, r7
    if (!id || !ph_get_node(heap, id)->sibling) {
10001f58:	2900      	cmp	r1, #0
10001f5a:	d04e      	beq.n	10001ffa <ph_remove_head_reserve+0xc2>
10001f5c:	004b      	lsls	r3, r1, #1
10001f5e:	185b      	adds	r3, r3, r1
10001f60:	3b03      	subs	r3, #3
10001f62:	18c3      	adds	r3, r0, r3
10001f64:	785e      	ldrb	r6, [r3, #1]
10001f66:	46b4      	mov	ip, r6
10001f68:	2e00      	cmp	r6, #0
10001f6a:	d118      	bne.n	10001f9e <ph_remove_head_reserve+0x66>
    if (!reserve) {
10001f6c:	9e01      	ldr	r6, [sp, #4]
10001f6e:	2e00      	cmp	r6, #0
10001f70:	d140      	bne.n	10001ff4 <ph_remove_head_reserve+0xbc>
        if (heap->free_tail_id) {
10001f72:	7be6      	ldrb	r6, [r4, #15]
10001f74:	2e00      	cmp	r6, #0
10001f76:	d004      	beq.n	10001f82 <ph_remove_head_reserve+0x4a>
            ph_get_node(heap, heap->free_tail_id)->sibling = root_id;
10001f78:	0073      	lsls	r3, r6, #1
10001f7a:	199b      	adds	r3, r3, r6
10001f7c:	18c3      	adds	r3, r0, r3
10001f7e:	3b03      	subs	r3, #3
10001f80:	705d      	strb	r5, [r3, #1]
        heap->free_tail_id = root_id;
10001f82:	73e5      	strb	r5, [r4, #15]
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
10001f84:	2900      	cmp	r1, #0
10001f86:	d131      	bne.n	10001fec <ph_remove_head_reserve+0xb4>
    ph_get_node(heap, root_id)->sibling = 0;
10001f88:	2300      	movs	r3, #0
    pheap_node_id_t old_root_id = ph_peek_head(heap);
    heap->root_id = ph_remove_any_head(heap, old_root_id, reserve);
    return old_root_id;
}
10001f8a:	0028      	movs	r0, r5
    ph_get_node(heap, root_id)->sibling = 0;
10001f8c:	7053      	strb	r3, [r2, #1]
    heap->root_id = ph_remove_any_head(heap, old_root_id, reserve);
10001f8e:	7361      	strb	r1, [r4, #13]
}
10001f90:	b003      	add	sp, #12
10001f92:	bcf0      	pop	{r4, r5, r6, r7}
10001f94:	46bb      	mov	fp, r7
10001f96:	46b2      	mov	sl, r6
10001f98:	46a9      	mov	r9, r5
10001f9a:	46a0      	mov	r8, r4
10001f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001f9e:	0072      	lsls	r2, r6, #1
10001fa0:	4462      	add	r2, ip
10001fa2:	3a03      	subs	r2, #3
10001fa4:	1880      	adds	r0, r0, r2
        new_node = ph_get_node(heap, b)->sibling;
10001fa6:	7842      	ldrb	r2, [r0, #1]
10001fa8:	4690      	mov	r8, r2
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10001faa:	2200      	movs	r2, #0
10001fac:	7042      	strb	r2, [r0, #1]
10001fae:	4691      	mov	r9, r2
10001fb0:	705a      	strb	r2, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001fb2:	0020      	movs	r0, r4
10001fb4:	0032      	movs	r2, r6
10001fb6:	f7ff fe95 	bl	10001ce4 <ph_merge_nodes>
    if (!id || !ph_get_node(heap, id)->sibling) {
10001fba:	4643      	mov	r3, r8
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001fbc:	4682      	mov	sl, r0
    if (!id || !ph_get_node(heap, id)->sibling) {
10001fbe:	2b00      	cmp	r3, #0
10001fc0:	d007      	beq.n	10001fd2 <ph_remove_head_reserve+0x9a>
10001fc2:	005b      	lsls	r3, r3, #1
10001fc4:	6821      	ldr	r1, [r4, #0]
10001fc6:	4443      	add	r3, r8
10001fc8:	3b03      	subs	r3, #3
10001fca:	18cb      	adds	r3, r1, r3
10001fcc:	785a      	ldrb	r2, [r3, #1]
10001fce:	2a00      	cmp	r2, #0
10001fd0:	d117      	bne.n	10002002 <ph_remove_head_reserve+0xca>
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001fd2:	4642      	mov	r2, r8
10001fd4:	4651      	mov	r1, sl
10001fd6:	0020      	movs	r0, r4
10001fd8:	f7ff fe84 	bl	10001ce4 <ph_merge_nodes>
    if (!reserve) {
10001fdc:	9b01      	ldr	r3, [sp, #4]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001fde:	0001      	movs	r1, r0
10001fe0:	6820      	ldr	r0, [r4, #0]
10001fe2:	19c2      	adds	r2, r0, r7
    if (!reserve) {
10001fe4:	2b00      	cmp	r3, #0
10001fe6:	d0c4      	beq.n	10001f72 <ph_remove_head_reserve+0x3a>
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
10001fe8:	2900      	cmp	r1, #0
10001fea:	d0cd      	beq.n	10001f88 <ph_remove_head_reserve+0x50>
10001fec:	004b      	lsls	r3, r1, #1
10001fee:	185b      	adds	r3, r3, r1
10001ff0:	3b03      	subs	r3, #3
10001ff2:	18c3      	adds	r3, r0, r3
10001ff4:	2000      	movs	r0, #0
10001ff6:	7098      	strb	r0, [r3, #2]
10001ff8:	e7c6      	b.n	10001f88 <ph_remove_head_reserve+0x50>
    if (!reserve) {
10001ffa:	9b01      	ldr	r3, [sp, #4]
10001ffc:	2b00      	cmp	r3, #0
10001ffe:	d1c3      	bne.n	10001f88 <ph_remove_head_reserve+0x50>
10002000:	e7b7      	b.n	10001f72 <ph_remove_head_reserve+0x3a>
10002002:	0050      	lsls	r0, r2, #1
10002004:	1880      	adds	r0, r0, r2
10002006:	3803      	subs	r0, #3
10002008:	1809      	adds	r1, r1, r0
        new_node = ph_get_node(heap, b)->sibling;
1000200a:	7848      	ldrb	r0, [r1, #1]
1000200c:	4683      	mov	fp, r0
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
1000200e:	4648      	mov	r0, r9
10002010:	7048      	strb	r0, [r1, #1]
10002012:	7058      	strb	r0, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10002014:	4641      	mov	r1, r8
10002016:	0020      	movs	r0, r4
10002018:	f7ff fe64 	bl	10001ce4 <ph_merge_nodes>
1000201c:	4659      	mov	r1, fp
1000201e:	4680      	mov	r8, r0
10002020:	0020      	movs	r0, r4
10002022:	f7ff fec5 	bl	10001db0 <ph_merge_two_pass>
10002026:	4641      	mov	r1, r8
10002028:	0002      	movs	r2, r0
1000202a:	0020      	movs	r0, r4
1000202c:	f7ff fe5a 	bl	10001ce4 <ph_merge_nodes>
10002030:	4680      	mov	r8, r0
10002032:	e7ce      	b.n	10001fd2 <ph_remove_head_reserve+0x9a>

10002034 <ph_delete>:

#include <stdio.h>
bool ph_delete(pheap_t *heap, pheap_node_id_t id) {
10002034:	b570      	push	{r4, r5, r6, lr}
10002036:	0004      	movs	r4, r0
    // 1) trivial cases
    if (!id) return false;
10002038:	2900      	cmp	r1, #0
1000203a:	d02c      	beq.n	10002096 <ph_delete+0x62>
    if (id == heap->root_id) {
1000203c:	7b43      	ldrb	r3, [r0, #13]
1000203e:	428b      	cmp	r3, r1
10002040:	d02e      	beq.n	100020a0 <ph_delete+0x6c>
10002042:	6805      	ldr	r5, [r0, #0]
10002044:	0048      	lsls	r0, r1, #1
10002046:	1840      	adds	r0, r0, r1
10002048:	3803      	subs	r0, #3
1000204a:	1828      	adds	r0, r5, r0
        ph_remove_head(heap);
        return true;
    }
    // 2) unlink the node from the tree
    pheap_node_t *node = ph_get_node(heap, id);
    if (!node->parent) return false; // not in tree
1000204c:	7882      	ldrb	r2, [r0, #2]
1000204e:	2a00      	cmp	r2, #0
10002050:	d021      	beq.n	10002096 <ph_delete+0x62>
10002052:	0053      	lsls	r3, r2, #1
10002054:	189b      	adds	r3, r3, r2
10002056:	3b03      	subs	r3, #3
    pheap_node_t *parent = ph_get_node(heap, node->parent);
    if (parent->child == id) {
10002058:	5cea      	ldrb	r2, [r5, r3]
1000205a:	18ee      	adds	r6, r5, r3
1000205c:	428a      	cmp	r2, r1
1000205e:	d102      	bne.n	10002066 <ph_delete+0x32>
10002060:	e01b      	b.n	1000209a <ph_delete+0x66>
                prev_sibling->sibling = node->sibling;
                found = true;
                break;
            }
            prev_sibling_id = prev_sibling->sibling;
        } while (prev_sibling_id);
10002062:	2a00      	cmp	r2, #0
10002064:	d008      	beq.n	10002078 <ph_delete+0x44>
10002066:	0053      	lsls	r3, r2, #1
10002068:	189b      	adds	r3, r3, r2
1000206a:	3b03      	subs	r3, #3
1000206c:	18eb      	adds	r3, r5, r3
            if (prev_sibling->sibling == id) {
1000206e:	785a      	ldrb	r2, [r3, #1]
10002070:	428a      	cmp	r2, r1
10002072:	d1f6      	bne.n	10002062 <ph_delete+0x2e>
                prev_sibling->sibling = node->sibling;
10002074:	7842      	ldrb	r2, [r0, #1]
10002076:	705a      	strb	r2, [r3, #1]
        assert(found);
    }
    node->sibling = node->parent = 0;
10002078:	2300      	movs	r3, #0
//    ph_dump(heap, NULL, NULL);
    // 3) remove it from the head of its own subtree
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, false);
1000207a:	2200      	movs	r2, #0
    node->sibling = node->parent = 0;
1000207c:	7083      	strb	r3, [r0, #2]
1000207e:	7043      	strb	r3, [r0, #1]
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, false);
10002080:	0020      	movs	r0, r4
10002082:	f7ff fedd 	bl	10001e40 <ph_remove_any_head>
    assert(new_sub_tree != heap->root_id);
    heap->root_id = ph_merge_nodes(heap, heap->root_id, new_sub_tree);
10002086:	7b61      	ldrb	r1, [r4, #13]
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, false);
10002088:	0002      	movs	r2, r0
    heap->root_id = ph_merge_nodes(heap, heap->root_id, new_sub_tree);
1000208a:	0020      	movs	r0, r4
1000208c:	f7ff fe2a 	bl	10001ce4 <ph_merge_nodes>
10002090:	7360      	strb	r0, [r4, #13]
    return true;
10002092:	2001      	movs	r0, #1
10002094:	e000      	b.n	10002098 <ph_delete+0x64>
    if (!id) return false;
10002096:	2000      	movs	r0, #0
}
10002098:	bd70      	pop	{r4, r5, r6, pc}
        parent->child = node->sibling;
1000209a:	7843      	ldrb	r3, [r0, #1]
1000209c:	7033      	strb	r3, [r6, #0]
1000209e:	e7eb      	b.n	10002078 <ph_delete+0x44>
    heap->root_id = ph_remove_any_head(heap, old_root_id, reserve);
100020a0:	2200      	movs	r2, #0
100020a2:	0019      	movs	r1, r3
100020a4:	f7ff fecc 	bl	10001e40 <ph_remove_any_head>
100020a8:	7360      	strb	r0, [r4, #13]
        return true;
100020aa:	2001      	movs	r0, #1
100020ac:	e7f4      	b.n	10002098 <ph_delete+0x64>
100020ae:	46c0      	nop			; (mov r8, r8)

100020b0 <__wrap_malloc>:
        panic("Out of memory");
    }
#endif
}

void *__wrap_malloc(size_t size) {
100020b0:	b510      	push	{r4, lr}
#if PICO_USE_MALLOC_MUTEX
    mutex_enter_blocking(&malloc_mutex);
#endif
    void *rc = __real_malloc(size);
100020b2:	f006 f971 	bl	10008398 <malloc>
        printf("malloc %d %p->%p\n", (uint) size, rc, ((uint8_t *) rc) + size);
    }
#endif
    check_alloc(rc, size);
    return rc;
}
100020b6:	bd10      	pop	{r4, pc}

100020b8 <__wrap_calloc>:

void *__wrap_calloc(size_t count, size_t size) {
100020b8:	b510      	push	{r4, lr}
#if PICO_USE_MALLOC_MUTEX
    mutex_enter_blocking(&malloc_mutex);
#endif
    void *rc = __real_calloc(count, size);
100020ba:	f006 f90d 	bl	100082d8 <calloc>
        printf("calloc %d %p->%p\n", (uint) (count * size), rc, ((uint8_t *) rc) + size);
    }
#endif
    check_alloc(rc, size);
    return rc;
}
100020be:	bd10      	pop	{r4, pc}

100020c0 <pio_add_program>:
    uint32_t program_mask = (1u << program->length) - 1;
    _used_instruction_space[pio_get_index(pio)] |= program_mask << offset;
}

// these assert if unable
uint pio_add_program(PIO pio, const pio_program_t *program) {
100020c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100020c2:	46d6      	mov	lr, sl
100020c4:	464f      	mov	r7, r9
100020c6:	4646      	mov	r6, r8
100020c8:	4688      	mov	r8, r1
100020ca:	b5c0      	push	{r6, r7, lr}
100020cc:	2405      	movs	r4, #5
100020ce:	0006      	movs	r6, r0
    uint32_t save = hw_claim_lock();
100020d0:	f7ff f860 	bl	10001194 <hw_claim_lock>
100020d4:	4643      	mov	r3, r8
100020d6:	791f      	ldrb	r7, [r3, #4]
100020d8:	571c      	ldrsb	r4, [r3, r4]
 * \param pio The PIO instance; either \ref pio0 or \ref pio1
 * \return the PIO instance number (either 0 or 1)
 */
static inline uint pio_get_index(PIO pio) {
    assert(pio == pio0 || pio == pio1);
    return pio == pio1 ? 1 : 0;
100020da:	4b28      	ldr	r3, [pc, #160]	; (1000217c <pio_add_program+0xbc>)
100020dc:	4681      	mov	r9, r0
100020de:	18f0      	adds	r0, r6, r3
100020e0:	4243      	negs	r3, r0
100020e2:	4158      	adcs	r0, r3
    uint32_t used_mask = _used_instruction_space[pio_get_index(pio)];
100020e4:	4b26      	ldr	r3, [pc, #152]	; (10002180 <pio_add_program+0xc0>)
100020e6:	469a      	mov	sl, r3
100020e8:	0083      	lsls	r3, r0, #2
100020ea:	469c      	mov	ip, r3
100020ec:	4653      	mov	r3, sl
100020ee:	4662      	mov	r2, ip
100020f0:	5898      	ldr	r0, [r3, r2]
    uint32_t program_mask = (1u << program->length) - 1;
100020f2:	2201      	movs	r2, #1
        if (program->origin > 32 - program->length) return -1;
100020f4:	2320      	movs	r3, #32
    uint32_t program_mask = (1u << program->length) - 1;
100020f6:	40ba      	lsls	r2, r7
        if (program->origin > 32 - program->length) return -1;
100020f8:	1bdb      	subs	r3, r3, r7
    uint32_t program_mask = (1u << program->length) - 1;
100020fa:	3a01      	subs	r2, #1
    if (program->origin >= 0) {
100020fc:	2c00      	cmp	r4, #0
100020fe:	db32      	blt.n	10002166 <pio_add_program+0xa6>
        if (program->origin > 32 - program->length) return -1;
10002100:	429c      	cmp	r4, r3
10002102:	dc2d      	bgt.n	10002160 <pio_add_program+0xa0>
        return used_mask & (program_mask << program->origin) ? -1 : program->origin;
10002104:	40a2      	lsls	r2, r4
10002106:	0015      	movs	r5, r2
10002108:	4210      	tst	r0, r2
1000210a:	d129      	bne.n	10002160 <pio_add_program+0xa0>
    for (uint i = 0; i < program->length; ++i) {
1000210c:	2f00      	cmp	r7, #0
1000210e:	d01a      	beq.n	10002146 <pio_add_program+0x86>
        uint16_t instr = program->instructions[i];
10002110:	4643      	mov	r3, r8
10002112:	785a      	ldrb	r2, [r3, #1]
10002114:	7819      	ldrb	r1, [r3, #0]
10002116:	0212      	lsls	r2, r2, #8
10002118:	4311      	orrs	r1, r2
1000211a:	4642      	mov	r2, r8
1000211c:	789b      	ldrb	r3, [r3, #2]
1000211e:	78d2      	ldrb	r2, [r2, #3]
10002120:	041b      	lsls	r3, r3, #16
10002122:	430b      	orrs	r3, r1
10002124:	0612      	lsls	r2, r2, #24
10002126:	431a      	orrs	r2, r3
10002128:	4690      	mov	r8, r2
    for (uint i = 0; i < program->length; ++i) {
1000212a:	2200      	movs	r2, #0
        uint16_t instr = program->instructions[i];
1000212c:	4641      	mov	r1, r8
1000212e:	0053      	lsls	r3, r2, #1
10002130:	5ac9      	ldrh	r1, [r1, r3]
        pio->instr_mem[offset + i] = pio_instr_bits_jmp != _pio_major_instr_bits(instr) ? instr : instr + offset;
10002132:	0b4b      	lsrs	r3, r1, #13
10002134:	d100      	bne.n	10002138 <pio_add_program+0x78>
10002136:	1909      	adds	r1, r1, r4
10002138:	1913      	adds	r3, r2, r4
1000213a:	3312      	adds	r3, #18
1000213c:	009b      	lsls	r3, r3, #2
    for (uint i = 0; i < program->length; ++i) {
1000213e:	3201      	adds	r2, #1
        pio->instr_mem[offset + i] = pio_instr_bits_jmp != _pio_major_instr_bits(instr) ? instr : instr + offset;
10002140:	5199      	str	r1, [r3, r6]
    for (uint i = 0; i < program->length; ++i) {
10002142:	4297      	cmp	r7, r2
10002144:	d8f2      	bhi.n	1000212c <pio_add_program+0x6c>
    _used_instruction_space[pio_get_index(pio)] |= program_mask << offset;
10002146:	4653      	mov	r3, sl
10002148:	4662      	mov	r2, ip
1000214a:	4305      	orrs	r5, r0
1000214c:	509d      	str	r5, [r3, r2]
    int offset = _pio_find_offset_for_program(pio, program);
    if (offset < 0) {
        panic("No program space");
    }
    _pio_add_program_at_offset(pio, program, offset);
    hw_claim_unlock(save);
1000214e:	4648      	mov	r0, r9
10002150:	f7ff f82c 	bl	100011ac <hw_claim_unlock>
    return offset;
}
10002154:	0020      	movs	r0, r4
10002156:	bce0      	pop	{r5, r6, r7}
10002158:	46ba      	mov	sl, r7
1000215a:	46b1      	mov	r9, r6
1000215c:	46a8      	mov	r8, r5
1000215e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        panic("No program space");
10002160:	4808      	ldr	r0, [pc, #32]	; (10002184 <pio_add_program+0xc4>)
10002162:	f001 fc4b 	bl	100039fc <panic>
        for (int i = 32 - program->length; i >= 0; i--) {
10002166:	2b00      	cmp	r3, #0
10002168:	da02      	bge.n	10002170 <pio_add_program+0xb0>
1000216a:	e7f9      	b.n	10002160 <pio_add_program+0xa0>
1000216c:	3b01      	subs	r3, #1
1000216e:	d3f7      	bcc.n	10002160 <pio_add_program+0xa0>
            if (!(used_mask & (program_mask << (uint) i))) {
10002170:	0015      	movs	r5, r2
10002172:	409d      	lsls	r5, r3
10002174:	001c      	movs	r4, r3
10002176:	4205      	tst	r5, r0
10002178:	d1f8      	bne.n	1000216c <pio_add_program+0xac>
1000217a:	e7c7      	b.n	1000210c <pio_add_program+0x4c>
1000217c:	afd00000 	.word	0xafd00000
10002180:	20023344 	.word	0x20023344
10002184:	10008d28 	.word	0x10008d28

10002188 <pio_clear_instruction_memory>:
    assert(program_mask == (_used_instruction_space[pio_get_index(pio)] & program_mask));
    _used_instruction_space[pio_get_index(pio)] &= ~program_mask;
    hw_claim_unlock(save);
}

void pio_clear_instruction_memory(PIO pio) {
10002188:	b510      	push	{r4, lr}
1000218a:	0004      	movs	r4, r0
    uint32_t save = hw_claim_lock();
1000218c:	f7ff f802 	bl	10001194 <hw_claim_lock>
10002190:	4b09      	ldr	r3, [pc, #36]	; (100021b8 <pio_clear_instruction_memory+0x30>)
    _used_instruction_space[pio_get_index(pio)] = 0;
10002192:	2100      	movs	r1, #0
10002194:	18e3      	adds	r3, r4, r3
10002196:	425a      	negs	r2, r3
10002198:	4153      	adcs	r3, r2
1000219a:	4a08      	ldr	r2, [pc, #32]	; (100021bc <pio_clear_instruction_memory+0x34>)
1000219c:	009b      	lsls	r3, r3, #2
1000219e:	5099      	str	r1, [r3, r2]
    for(uint i=0;i<PIO_INSTRUCTION_COUNT;i++) {
100021a0:	2300      	movs	r3, #0
        pio->instr_mem[i] = pio_encode_jmp(i);
100021a2:	001a      	movs	r2, r3
100021a4:	3212      	adds	r2, #18
100021a6:	0092      	lsls	r2, r2, #2
100021a8:	5113      	str	r3, [r2, r4]
    for(uint i=0;i<PIO_INSTRUCTION_COUNT;i++) {
100021aa:	3301      	adds	r3, #1
100021ac:	2b20      	cmp	r3, #32
100021ae:	d1f8      	bne.n	100021a2 <pio_clear_instruction_memory+0x1a>
    }
    hw_claim_unlock(save);
100021b0:	f7fe fffc 	bl	100011ac <hw_claim_unlock>
}
100021b4:	bd10      	pop	{r4, pc}
100021b6:	46c0      	nop			; (mov r8, r8)
100021b8:	afd00000 	.word	0xafd00000
100021bc:	20023344 	.word	0x20023344

100021c0 <pio_sm_set_consecutive_pindirs>:
        pin_mask &= pin_mask - 1;
    }
    pio->sm[sm].pinctrl = pinctrl_saved;
}

void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
100021c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100021c2:	464e      	mov	r6, r9
100021c4:	4645      	mov	r5, r8
100021c6:	46de      	mov	lr, fp
100021c8:	4657      	mov	r7, sl
100021ca:	468a      	mov	sl, r1
    assert(pin < 32u);
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
100021cc:	0049      	lsls	r1, r1, #1
void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
100021ce:	b5e0      	push	{r5, r6, r7, lr}
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
100021d0:	000d      	movs	r5, r1
void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
100021d2:	4680      	mov	r8, r0
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
100021d4:	4455      	add	r5, sl
100021d6:	00ed      	lsls	r5, r5, #3
100021d8:	4445      	add	r5, r8
100021da:	4689      	mov	r9, r1
100021dc:	0029      	movs	r1, r5
void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
100021de:	ac09      	add	r4, sp, #36	; 0x24
100021e0:	7826      	ldrb	r6, [r4, #0]
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
100021e2:	31dc      	adds	r1, #220	; 0xdc
    uint pindir_val = is_out ? 0x1f : 0;
100021e4:	1e74      	subs	r4, r6, #1
100021e6:	41a6      	sbcs	r6, r4
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
100021e8:	6808      	ldr	r0, [r1, #0]
    uint pindir_val = is_out ? 0x1f : 0;
100021ea:	4274      	negs	r4, r6
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
100021ec:	4684      	mov	ip, r0
    uint pindir_val = is_out ? 0x1f : 0;
100021ee:	4814      	ldr	r0, [pc, #80]	; (10002240 <pio_sm_set_consecutive_pindirs+0x80>)
100021f0:	261f      	movs	r6, #31
100021f2:	4683      	mov	fp, r0
100021f4:	4026      	ands	r6, r4
100021f6:	445e      	add	r6, fp
    while (count > 5) {
100021f8:	2b05      	cmp	r3, #5
100021fa:	d90c      	bls.n	10002216 <pio_sm_set_consecutive_pindirs+0x56>
        pio->sm[sm].pinctrl = (5u << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
100021fc:	20a0      	movs	r0, #160	; 0xa0
        pio_sm_exec(pio, sm, pio_encode_set(pio_pindirs, pindir_val));
        count -= 5;
        pin = (pin + 5) & 0x1f;
100021fe:	271f      	movs	r7, #31
        pio->sm[sm].pinctrl = (5u << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
10002200:	0540      	lsls	r0, r0, #21
 * \param sm State machine index (0..3)
 * \param instr the encoded PIO instruction
 */
inline static void pio_sm_exec(PIO pio, uint sm, uint instr) {
    check_sm_param(sm);
    pio->sm[sm].instr = instr;
10002202:	35d8      	adds	r5, #216	; 0xd8
10002204:	0154      	lsls	r4, r2, #5
10002206:	4304      	orrs	r4, r0
        pin = (pin + 5) & 0x1f;
10002208:	3205      	adds	r2, #5
        count -= 5;
1000220a:	3b05      	subs	r3, #5
        pio->sm[sm].pinctrl = (5u << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
1000220c:	600c      	str	r4, [r1, #0]
        pin = (pin + 5) & 0x1f;
1000220e:	403a      	ands	r2, r7
10002210:	602e      	str	r6, [r5, #0]
    while (count > 5) {
10002212:	2b05      	cmp	r3, #5
10002214:	d8f6      	bhi.n	10002204 <pio_sm_set_consecutive_pindirs+0x44>
    }
    pio->sm[sm].pinctrl = (count << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
10002216:	4649      	mov	r1, r9
10002218:	4451      	add	r1, sl
1000221a:	00c9      	lsls	r1, r1, #3
1000221c:	4441      	add	r1, r8
1000221e:	0152      	lsls	r2, r2, #5
10002220:	069b      	lsls	r3, r3, #26
10002222:	4313      	orrs	r3, r2
10002224:	000a      	movs	r2, r1
10002226:	0008      	movs	r0, r1
10002228:	32dc      	adds	r2, #220	; 0xdc
1000222a:	6013      	str	r3, [r2, #0]
    pio_sm_exec(pio, sm, pio_encode_set(pio_pindirs, pindir_val));
    pio->sm[sm].pinctrl = pinctrl_saved;
1000222c:	4663      	mov	r3, ip
1000222e:	30d8      	adds	r0, #216	; 0xd8
10002230:	6006      	str	r6, [r0, #0]
10002232:	6013      	str	r3, [r2, #0]
}
10002234:	bcf0      	pop	{r4, r5, r6, r7}
10002236:	46bb      	mov	fp, r7
10002238:	46b2      	mov	sl, r6
1000223a:	46a9      	mov	r9, r5
1000223c:	46a0      	mov	r8, r4
1000223e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002240:	0000e080 	.word	0x0000e080

10002244 <pio_sm_init>:

void pio_sm_init(PIO pio, uint sm, uint initial_pc, const pio_sm_config *config) {
10002244:	b5f0      	push	{r4, r5, r6, r7, lr}
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
10002246:	2501      	movs	r5, #1
10002248:	408d      	lsls	r5, r1
1000224a:	6804      	ldr	r4, [r0, #0]
1000224c:	43ac      	bics	r4, r5
    pio->sm[sm].clkdiv = config->clkdiv;
1000224e:	004d      	lsls	r5, r1, #1
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
10002250:	6004      	str	r4, [r0, #0]
    pio->sm[sm].clkdiv = config->clkdiv;
10002252:	186c      	adds	r4, r5, r1
10002254:	00e4      	lsls	r4, r4, #3
10002256:	1904      	adds	r4, r0, r4
10002258:	0026      	movs	r6, r4
1000225a:	36c8      	adds	r6, #200	; 0xc8
    // Halt the machine, set some sensible defaults
    pio_sm_set_enabled(pio, sm, false);

    if (config) {
1000225c:	2b00      	cmp	r3, #0
1000225e:	d02a      	beq.n	100022b6 <pio_sm_init+0x72>
10002260:	681f      	ldr	r7, [r3, #0]
    pio->sm[sm].pinctrl = config->pinctrl;
10002262:	34dc      	adds	r4, #220	; 0xdc
    pio->sm[sm].clkdiv = config->clkdiv;
10002264:	6037      	str	r7, [r6, #0]
    pio->sm[sm].execctrl = config->execctrl;
10002266:	685f      	ldr	r7, [r3, #4]
10002268:	6077      	str	r7, [r6, #4]
    pio->sm[sm].shiftctrl = config->shiftctrl;
1000226a:	689f      	ldr	r7, [r3, #8]
    pio->sm[sm].pinctrl = config->pinctrl;
1000226c:	68db      	ldr	r3, [r3, #12]
    pio->sm[sm].shiftctrl = config->shiftctrl;
1000226e:	60b7      	str	r7, [r6, #8]
    pio->sm[sm].pinctrl = config->pinctrl;
10002270:	6023      	str	r3, [r4, #0]
 * \param sm State machine index (0..3)
 */
static inline void pio_sm_clear_fifos(PIO pio, uint sm) {
    // changing the FIFO join state clears the fifo
    check_sm_param(sm);
    hw_xor_bits(&pio->sm[sm].shiftctrl, PIO_SM0_SHIFTCTRL_FJOIN_RX_BITS);
10002272:	186d      	adds	r5, r5, r1
10002274:	00eb      	lsls	r3, r5, #3
10002276:	001d      	movs	r5, r3
10002278:	2480      	movs	r4, #128	; 0x80
1000227a:	35d0      	adds	r5, #208	; 0xd0
1000227c:	1945      	adds	r5, r0, r5
1000227e:	0164      	lsls	r4, r4, #5
10002280:	432c      	orrs	r4, r5
10002282:	2580      	movs	r5, #128	; 0x80
10002284:	062d      	lsls	r5, r5, #24
10002286:	6025      	str	r5, [r4, #0]
10002288:	6025      	str	r5, [r4, #0]
    const uint32_t fdebug_sm_mask =
            (1u << PIO_FDEBUG_TXOVER_LSB) |
            (1u << PIO_FDEBUG_RXUNDER_LSB) |
            (1u << PIO_FDEBUG_TXSTALL_LSB) |
            (1u << PIO_FDEBUG_RXSTALL_LSB);
    pio->fdebug = fdebug_sm_mask << sm;
1000228a:	4c11      	ldr	r4, [pc, #68]	; (100022d0 <pio_sm_init+0x8c>)
    pio->ctrl |= 1u << (PIO_CTRL_SM_RESTART_LSB + sm);
1000228c:	1d0d      	adds	r5, r1, #4
1000228e:	408c      	lsls	r4, r1
10002290:	6084      	str	r4, [r0, #8]
10002292:	2401      	movs	r4, #1
10002294:	0027      	movs	r7, r4
10002296:	40af      	lsls	r7, r5
10002298:	003d      	movs	r5, r7
    pio->ctrl |= 1u << (PIO_CTRL_CLKDIV_RESTART_LSB + sm);
1000229a:	3108      	adds	r1, #8
1000229c:	408c      	lsls	r4, r1
        assert(arg2 && arg2 <= 32);
    } else {
        assert(arg2 <= 31);
    }
#endif
    return instr_bits | (arg1 << 5u) | (arg2 & 0x1fu);
1000229e:	211f      	movs	r1, #31
    pio->ctrl |= 1u << (PIO_CTRL_SM_RESTART_LSB + sm);
100022a0:	6806      	ldr	r6, [r0, #0]
100022a2:	400a      	ands	r2, r1
100022a4:	4335      	orrs	r5, r6
100022a6:	6005      	str	r5, [r0, #0]
    pio->ctrl |= 1u << (PIO_CTRL_CLKDIV_RESTART_LSB + sm);
100022a8:	6805      	ldr	r5, [r0, #0]
100022aa:	432c      	orrs	r4, r5
100022ac:	6004      	str	r4, [r0, #0]
    pio->sm[sm].instr = instr;
100022ae:	18c0      	adds	r0, r0, r3
100022b0:	30d8      	adds	r0, #216	; 0xd8
100022b2:	6002      	str	r2, [r0, #0]

    // Finally, clear some internal SM state
    pio_sm_restart(pio, sm);
    pio_sm_clkdiv_restart(pio, sm);
    pio_sm_exec(pio, sm, pio_encode_jmp(initial_pc));
}
100022b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pio->sm[sm].clkdiv = config->clkdiv;
100022b6:	2780      	movs	r7, #128	; 0x80
100022b8:	027f      	lsls	r7, r7, #9
100022ba:	6037      	str	r7, [r6, #0]
    pio->sm[sm].execctrl = config->execctrl;
100022bc:	27f8      	movs	r7, #248	; 0xf8
100022be:	027f      	lsls	r7, r7, #9
100022c0:	6077      	str	r7, [r6, #4]
    pio->sm[sm].shiftctrl = config->shiftctrl;
100022c2:	27c0      	movs	r7, #192	; 0xc0
    pio->sm[sm].pinctrl = config->pinctrl;
100022c4:	34dc      	adds	r4, #220	; 0xdc
    pio->sm[sm].shiftctrl = config->shiftctrl;
100022c6:	033f      	lsls	r7, r7, #12
100022c8:	60b7      	str	r7, [r6, #8]
    pio->sm[sm].pinctrl = config->pinctrl;
100022ca:	6023      	str	r3, [r4, #0]
100022cc:	e7d1      	b.n	10002272 <pio_sm_init+0x2e>
100022ce:	46c0      	nop			; (mov r8, r8)
100022d0:	01010101 	.word	0x01010101

100022d4 <running_on_fpga>:
#include "hardware/address_mapped.h"
#include "hardware/regs/tbman.h"
#include "hardware/regs/sysinfo.h"

bool running_on_fpga() {
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
100022d4:	4b02      	ldr	r3, [pc, #8]	; (100022e0 <running_on_fpga+0xc>)
100022d6:	6818      	ldr	r0, [r3, #0]
100022d8:	0780      	lsls	r0, r0, #30
100022da:	0fc0      	lsrs	r0, r0, #31
}
100022dc:	4770      	bx	lr
100022de:	46c0      	nop			; (mov r8, r8)
100022e0:	4006c000 	.word	0x4006c000

100022e4 <pll_init>:
// For MHZ definitions etc
#include "hardware/clocks.h"
#include "hardware/pll.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint32_t refdiv, uint32_t vco_freq, uint32_t post_div1, uint8_t post_div2) {
100022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100022e6:	46c6      	mov	lr, r8
100022e8:	b500      	push	{lr}
100022ea:	001e      	movs	r6, r3
100022ec:	ab06      	add	r3, sp, #24
100022ee:	781f      	ldrb	r7, [r3, #0]
    // Turn off PLL in case it is already running
    pll->pwr = 0xffffffff;
100022f0:	2301      	movs	r3, #1
100022f2:	425b      	negs	r3, r3
100022f4:	6043      	str	r3, [r0, #4]
    pll->fbdiv_int = 0;
100022f6:	2300      	movs	r3, #0
void pll_init(PLL pll, uint32_t refdiv, uint32_t vco_freq, uint32_t post_div1, uint8_t post_div2) {
100022f8:	0004      	movs	r4, r0
    pll->fbdiv_int = 0;
100022fa:	6083      	str	r3, [r0, #8]

    uint32_t ref_mhz = XOSC_MHZ / refdiv;
    pll->cs = refdiv;
100022fc:	6001      	str	r1, [r0, #0]
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
100022fe:	200c      	movs	r0, #12
void pll_init(PLL pll, uint32_t refdiv, uint32_t vco_freq, uint32_t post_div1, uint8_t post_div2) {
10002300:	4690      	mov	r8, r2
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10002302:	f7fe f837 	bl	10000374 <__wrap___aeabi_uidiv>

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * MHZ);
10002306:	0141      	lsls	r1, r0, #5
10002308:	1a09      	subs	r1, r1, r0
1000230a:	018d      	lsls	r5, r1, #6
1000230c:	1a69      	subs	r1, r5, r1
1000230e:	00c9      	lsls	r1, r1, #3
10002310:	1809      	adds	r1, r1, r0
10002312:	0189      	lsls	r1, r1, #6
10002314:	4640      	mov	r0, r8
10002316:	f7fe f82d 	bl	10000374 <__wrap___aeabi_uidiv>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000231a:	21c0      	movs	r1, #192	; 0xc0

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
1000231c:	1d23      	adds	r3, r4, #4
1000231e:	0189      	lsls	r1, r1, #6
10002320:	4319      	orrs	r1, r3
10002322:	2321      	movs	r3, #33	; 0x21
    pll->fbdiv_int = fbdiv;
10002324:	60a0      	str	r0, [r4, #8]
10002326:	600b      	str	r3, [r1, #0]

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
10002328:	6822      	ldr	r2, [r4, #0]
1000232a:	2a00      	cmp	r2, #0
1000232c:	dafc      	bge.n	10002328 <pll_init+0x44>
1000232e:	2308      	movs	r3, #8

    // Set up post dividers - div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
10002330:	033f      	lsls	r7, r7, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10002332:	0436      	lsls	r6, r6, #16
10002334:	433e      	orrs	r6, r7
    pll->prim = pdiv;
10002336:	60e6      	str	r6, [r4, #12]
10002338:	600b      	str	r3, [r1, #0]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
/// \end::pll_init_finish[]
}
1000233a:	bc80      	pop	{r7}
1000233c:	46b8      	mov	r8, r7
1000233e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10002340 <_out_null>:
static inline void _out_null(char character, void *buffer, size_t idx, size_t maxlen) {
    (void) character;
    (void) buffer;
    (void) idx;
    (void) maxlen;
}
10002340:	4770      	bx	lr
10002342:	46c0      	nop			; (mov r8, r8)

10002344 <_out_rev>:
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char *buffer, size_t idx, size_t maxlen, const char *buf, size_t len,
                       unsigned int width, unsigned int flags) {
10002344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002346:	4657      	mov	r7, sl
10002348:	464e      	mov	r6, r9
1000234a:	4645      	mov	r5, r8
1000234c:	46de      	mov	lr, fp
1000234e:	b5e0      	push	{r5, r6, r7, lr}
10002350:	4699      	mov	r9, r3
10002352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10002354:	0007      	movs	r7, r0
10002356:	469a      	mov	sl, r3
    const size_t start_idx = idx;

    // pad spaces up to given width
    if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
10002358:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                       unsigned int width, unsigned int flags) {
1000235a:	4688      	mov	r8, r1
1000235c:	4693      	mov	fp, r2
1000235e:	0015      	movs	r5, r2
10002360:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
10002362:	079b      	lsls	r3, r3, #30
10002364:	d110      	bne.n	10002388 <_out_rev+0x44>
        for (size_t i = len; i < width; i++) {
10002366:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10002368:	429e      	cmp	r6, r3
1000236a:	d20d      	bcs.n	10002388 <_out_rev+0x44>
1000236c:	1b9d      	subs	r5, r3, r6
1000236e:	0014      	movs	r4, r2
10002370:	000e      	movs	r6, r1
10002372:	445d      	add	r5, fp
            out(' ', buffer, idx++, maxlen);
10002374:	0022      	movs	r2, r4
10002376:	464b      	mov	r3, r9
10002378:	3401      	adds	r4, #1
1000237a:	0031      	movs	r1, r6
1000237c:	2020      	movs	r0, #32
1000237e:	47b8      	blx	r7
        for (size_t i = len; i < width; i++) {
10002380:	42a5      	cmp	r5, r4
10002382:	d1f7      	bne.n	10002374 <_out_rev+0x30>
10002384:	46b0      	mov	r8, r6
10002386:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
        }
    }

    // reverse string
    while (len) {
10002388:	2e00      	cmp	r6, #0
1000238a:	d027      	beq.n	100023dc <_out_rev+0x98>
1000238c:	4644      	mov	r4, r8
1000238e:	1975      	adds	r5, r6, r5
        out(buf[--len], buffer, idx++, maxlen);
10002390:	4653      	mov	r3, sl
10002392:	1baa      	subs	r2, r5, r6
10002394:	3e01      	subs	r6, #1
10002396:	5d98      	ldrb	r0, [r3, r6]
10002398:	0021      	movs	r1, r4
1000239a:	464b      	mov	r3, r9
1000239c:	47b8      	blx	r7
    while (len) {
1000239e:	2e00      	cmp	r6, #0
100023a0:	d1f6      	bne.n	10002390 <_out_rev+0x4c>
100023a2:	0023      	movs	r3, r4
100023a4:	002c      	movs	r4, r5
100023a6:	4698      	mov	r8, r3
    }

    // append pad spaces up to given width
    if (flags & FLAGS_LEFT) {
100023a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100023aa:	079b      	lsls	r3, r3, #30
100023ac:	d50f      	bpl.n	100023ce <_out_rev+0x8a>
        while (idx - start_idx < width) {
100023ae:	465b      	mov	r3, fp
100023b0:	1ae5      	subs	r5, r4, r3
100023b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100023b4:	42ab      	cmp	r3, r5
100023b6:	d90a      	bls.n	100023ce <_out_rev+0x8a>
100023b8:	4646      	mov	r6, r8
100023ba:	4698      	mov	r8, r3
            out(' ', buffer, idx++, maxlen);
100023bc:	0022      	movs	r2, r4
100023be:	464b      	mov	r3, r9
100023c0:	0031      	movs	r1, r6
100023c2:	2020      	movs	r0, #32
        while (idx - start_idx < width) {
100023c4:	3501      	adds	r5, #1
            out(' ', buffer, idx++, maxlen);
100023c6:	47b8      	blx	r7
100023c8:	3401      	adds	r4, #1
        while (idx - start_idx < width) {
100023ca:	45a8      	cmp	r8, r5
100023cc:	d8f6      	bhi.n	100023bc <_out_rev+0x78>
        }
    }

    return idx;
}
100023ce:	0020      	movs	r0, r4
100023d0:	bcf0      	pop	{r4, r5, r6, r7}
100023d2:	46bb      	mov	fp, r7
100023d4:	46b2      	mov	sl, r6
100023d6:	46a9      	mov	r9, r5
100023d8:	46a0      	mov	r8, r4
100023da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (len) {
100023dc:	002c      	movs	r4, r5
100023de:	e7e3      	b.n	100023a8 <_out_rev+0x64>

100023e0 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char *buffer, size_t idx, size_t maxlen, char *buf, size_t len,
                           bool negative, unsigned int base, unsigned int prec, unsigned int width,
                           unsigned int flags) {
100023e0:	b5f0      	push	{r4, r5, r6, r7, lr}
100023e2:	464f      	mov	r7, r9
100023e4:	4646      	mov	r6, r8
100023e6:	46d6      	mov	lr, sl
100023e8:	b5c0      	push	{r6, r7, lr}
100023ea:	b084      	sub	sp, #16
100023ec:	4698      	mov	r8, r3
100023ee:	ab0e      	add	r3, sp, #56	; 0x38
100023f0:	781b      	ldrb	r3, [r3, #0]
100023f2:	9f12      	ldr	r7, [sp, #72]	; 0x48
100023f4:	4699      	mov	r9, r3
100023f6:	4694      	mov	ip, r2
100023f8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
100023fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
100023fc:	9e11      	ldr	r6, [sp, #68]	; 0x44
    // pad leading zeros
    if (!(flags & FLAGS_LEFT)) {
100023fe:	07ba      	lsls	r2, r7, #30
10002400:	d425      	bmi.n	1000244e <_ntoa_format+0x6e>
        if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
10002402:	2e00      	cmp	r6, #0
10002404:	d14b      	bne.n	1000249e <_ntoa_format+0xbe>
            width--;
        }
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002406:	429c      	cmp	r4, r3
10002408:	d300      	bcc.n	1000240c <_ntoa_format+0x2c>
1000240a:	e0bf      	b.n	1000258c <_ntoa_format+0x1ac>
        if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
1000240c:	2201      	movs	r2, #1
1000240e:	403a      	ands	r2, r7
10002410:	4692      	mov	sl, r2
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002412:	2c1f      	cmp	r4, #31
10002414:	d900      	bls.n	10002418 <_ntoa_format+0x38>
10002416:	e0b8      	b.n	1000258a <_ntoa_format+0x1aa>
10002418:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000241a:	1e55      	subs	r5, r2, #1
            buf[len++] = '0';
1000241c:	2230      	movs	r2, #48	; 0x30
1000241e:	e001      	b.n	10002424 <_ntoa_format+0x44>
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002420:	2c20      	cmp	r4, #32
10002422:	d003      	beq.n	1000242c <_ntoa_format+0x4c>
            buf[len++] = '0';
10002424:	3401      	adds	r4, #1
10002426:	552a      	strb	r2, [r5, r4]
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002428:	42a3      	cmp	r3, r4
1000242a:	d8f9      	bhi.n	10002420 <_ntoa_format+0x40>
        }
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
1000242c:	4652      	mov	r2, sl
1000242e:	2a00      	cmp	r2, #0
10002430:	d00d      	beq.n	1000244e <_ntoa_format+0x6e>
10002432:	42a6      	cmp	r6, r4
10002434:	d90b      	bls.n	1000244e <_ntoa_format+0x6e>
10002436:	2c20      	cmp	r4, #32
10002438:	d044      	beq.n	100024c4 <_ntoa_format+0xe4>
1000243a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000243c:	1e55      	subs	r5, r2, #1
            buf[len++] = '0';
1000243e:	2230      	movs	r2, #48	; 0x30
10002440:	e001      	b.n	10002446 <_ntoa_format+0x66>
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002442:	2c20      	cmp	r4, #32
10002444:	d03e      	beq.n	100024c4 <_ntoa_format+0xe4>
            buf[len++] = '0';
10002446:	3401      	adds	r4, #1
10002448:	552a      	strb	r2, [r5, r4]
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
1000244a:	42b4      	cmp	r4, r6
1000244c:	d1f9      	bne.n	10002442 <_ntoa_format+0x62>
        }
    }

    // handle hash
    if (flags & FLAGS_HASH) {
1000244e:	06fa      	lsls	r2, r7, #27
10002450:	d54d      	bpl.n	100024ee <_ntoa_format+0x10e>
        if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
10002452:	057a      	lsls	r2, r7, #21
10002454:	d43f      	bmi.n	100024d6 <_ntoa_format+0xf6>
10002456:	2c00      	cmp	r4, #0
10002458:	d139      	bne.n	100024ce <_ntoa_format+0xee>
            len--;
            if (len && (base == 16U)) {
                len--;
            }
        }
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
1000245a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000245c:	2b10      	cmp	r3, #16
1000245e:	d100      	bne.n	10002462 <_ntoa_format+0x82>
10002460:	e079      	b.n	10002556 <_ntoa_format+0x176>
            buf[len++] = 'x';
        } else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'X';
        } else if ((base == 2U) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002462:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10002464:	2b02      	cmp	r3, #2
10002466:	d100      	bne.n	1000246a <_ntoa_format+0x8a>
10002468:	e08a      	b.n	10002580 <_ntoa_format+0x1a0>
            buf[len++] = 'b';
        }
        if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
            buf[len++] = '0';
1000246a:	2330      	movs	r3, #48	; 0x30
1000246c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000246e:	2401      	movs	r4, #1
10002470:	7013      	strb	r3, [r2, #0]
        }
    }

    if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
        if (negative) {
10002472:	464b      	mov	r3, r9
10002474:	2b00      	cmp	r3, #0
10002476:	d03f      	beq.n	100024f8 <_ntoa_format+0x118>
            buf[len++] = '-';
10002478:	232d      	movs	r3, #45	; 0x2d
1000247a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000247c:	5513      	strb	r3, [r2, r4]
1000247e:	3401      	adds	r4, #1
        } else if (flags & FLAGS_SPACE) {
            buf[len++] = ' ';
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
10002480:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10002482:	4662      	mov	r2, ip
10002484:	9300      	str	r3, [sp, #0]
10002486:	9703      	str	r7, [sp, #12]
10002488:	4643      	mov	r3, r8
1000248a:	9602      	str	r6, [sp, #8]
1000248c:	9401      	str	r4, [sp, #4]
1000248e:	f7ff ff59 	bl	10002344 <_out_rev>
}
10002492:	b004      	add	sp, #16
10002494:	bce0      	pop	{r5, r6, r7}
10002496:	46ba      	mov	sl, r7
10002498:	46b1      	mov	r9, r6
1000249a:	46a8      	mov	r8, r5
1000249c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
1000249e:	2201      	movs	r2, #1
100024a0:	0015      	movs	r5, r2
100024a2:	403d      	ands	r5, r7
100024a4:	46aa      	mov	sl, r5
100024a6:	423a      	tst	r2, r7
100024a8:	d02f      	beq.n	1000250a <_ntoa_format+0x12a>
100024aa:	464a      	mov	r2, r9
100024ac:	2a00      	cmp	r2, #0
100024ae:	d102      	bne.n	100024b6 <_ntoa_format+0xd6>
100024b0:	320c      	adds	r2, #12
100024b2:	423a      	tst	r2, r7
100024b4:	d000      	beq.n	100024b8 <_ntoa_format+0xd8>
            width--;
100024b6:	3e01      	subs	r6, #1
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100024b8:	429c      	cmp	r4, r3
100024ba:	d2ba      	bcs.n	10002432 <_ntoa_format+0x52>
100024bc:	2c1f      	cmp	r4, #31
100024be:	d9ab      	bls.n	10002418 <_ntoa_format+0x38>
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100024c0:	2e20      	cmp	r6, #32
100024c2:	d927      	bls.n	10002514 <_ntoa_format+0x134>
        if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
100024c4:	2420      	movs	r4, #32
    if (flags & FLAGS_HASH) {
100024c6:	06fa      	lsls	r2, r7, #27
100024c8:	d5da      	bpl.n	10002480 <_ntoa_format+0xa0>
        if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
100024ca:	057a      	lsls	r2, r7, #21
100024cc:	d403      	bmi.n	100024d6 <_ntoa_format+0xf6>
100024ce:	42a3      	cmp	r3, r4
100024d0:	d02d      	beq.n	1000252e <_ntoa_format+0x14e>
100024d2:	42a6      	cmp	r6, r4
100024d4:	d02b      	beq.n	1000252e <_ntoa_format+0x14e>
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100024d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
100024d8:	2b10      	cmp	r3, #16
100024da:	d032      	beq.n	10002542 <_ntoa_format+0x162>
        } else if ((base == 2U) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100024dc:	2b02      	cmp	r3, #2
100024de:	d020      	beq.n	10002522 <_ntoa_format+0x142>
        if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
100024e0:	2c20      	cmp	r4, #32
100024e2:	d0cd      	beq.n	10002480 <_ntoa_format+0xa0>
            buf[len++] = '0';
100024e4:	2230      	movs	r2, #48	; 0x30
100024e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100024e8:	191b      	adds	r3, r3, r4
100024ea:	701a      	strb	r2, [r3, #0]
100024ec:	3401      	adds	r4, #1
    if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
100024ee:	2c20      	cmp	r4, #32
100024f0:	d0c6      	beq.n	10002480 <_ntoa_format+0xa0>
        if (negative) {
100024f2:	464b      	mov	r3, r9
100024f4:	2b00      	cmp	r3, #0
100024f6:	d1bf      	bne.n	10002478 <_ntoa_format+0x98>
        } else if (flags & FLAGS_PLUS) {
100024f8:	077b      	lsls	r3, r7, #29
100024fa:	d40d      	bmi.n	10002518 <_ntoa_format+0x138>
        } else if (flags & FLAGS_SPACE) {
100024fc:	073b      	lsls	r3, r7, #28
100024fe:	d5bf      	bpl.n	10002480 <_ntoa_format+0xa0>
            buf[len++] = ' ';
10002500:	2320      	movs	r3, #32
10002502:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002504:	5513      	strb	r3, [r2, r4]
10002506:	3401      	adds	r4, #1
10002508:	e7ba      	b.n	10002480 <_ntoa_format+0xa0>
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
1000250a:	429c      	cmp	r4, r3
1000250c:	d29f      	bcs.n	1000244e <_ntoa_format+0x6e>
1000250e:	2c1f      	cmp	r4, #31
10002510:	d800      	bhi.n	10002514 <_ntoa_format+0x134>
10002512:	e781      	b.n	10002418 <_ntoa_format+0x38>
10002514:	2420      	movs	r4, #32
10002516:	e79a      	b.n	1000244e <_ntoa_format+0x6e>
            buf[len++] = '+';  // ignore the space if the '+' exists
10002518:	232b      	movs	r3, #43	; 0x2b
1000251a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000251c:	5513      	strb	r3, [r2, r4]
1000251e:	3401      	adds	r4, #1
10002520:	e7ae      	b.n	10002480 <_ntoa_format+0xa0>
        } else if ((base == 2U) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002522:	2c20      	cmp	r4, #32
10002524:	d0ac      	beq.n	10002480 <_ntoa_format+0xa0>
            buf[len++] = 'b';
10002526:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10002528:	191b      	adds	r3, r3, r4
1000252a:	3401      	adds	r4, #1
1000252c:	e03a      	b.n	100025a4 <_ntoa_format+0x1c4>
            len--;
1000252e:	1e63      	subs	r3, r4, #1
            if (len && (base == 16U)) {
10002530:	2c01      	cmp	r4, #1
10002532:	d092      	beq.n	1000245a <_ntoa_format+0x7a>
10002534:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10002536:	2a10      	cmp	r2, #16
10002538:	d02a      	beq.n	10002590 <_ntoa_format+0x1b0>
        } else if ((base == 2U) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
1000253a:	2a02      	cmp	r2, #2
1000253c:	d02f      	beq.n	1000259e <_ntoa_format+0x1be>
1000253e:	001c      	movs	r4, r3
10002540:	e7d0      	b.n	100024e4 <_ntoa_format+0x104>
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002542:	06bb      	lsls	r3, r7, #26
10002544:	d40e      	bmi.n	10002564 <_ntoa_format+0x184>
10002546:	2c20      	cmp	r4, #32
10002548:	d09a      	beq.n	10002480 <_ntoa_format+0xa0>
            buf[len++] = 'x';
1000254a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000254c:	191a      	adds	r2, r3, r4
1000254e:	3401      	adds	r4, #1
10002550:	2378      	movs	r3, #120	; 0x78
10002552:	7013      	strb	r3, [r2, #0]
10002554:	e7c4      	b.n	100024e0 <_ntoa_format+0x100>
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002556:	06bb      	lsls	r3, r7, #26
10002558:	d40d      	bmi.n	10002576 <_ntoa_format+0x196>
            buf[len++] = 'x';
1000255a:	2378      	movs	r3, #120	; 0x78
1000255c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000255e:	2401      	movs	r4, #1
10002560:	7013      	strb	r3, [r2, #0]
        if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
10002562:	e7bf      	b.n	100024e4 <_ntoa_format+0x104>
        } else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002564:	2c20      	cmp	r4, #32
10002566:	d100      	bne.n	1000256a <_ntoa_format+0x18a>
10002568:	e78a      	b.n	10002480 <_ntoa_format+0xa0>
            buf[len++] = 'X';
1000256a:	2258      	movs	r2, #88	; 0x58
1000256c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000256e:	191b      	adds	r3, r3, r4
10002570:	701a      	strb	r2, [r3, #0]
10002572:	3401      	adds	r4, #1
10002574:	e7b4      	b.n	100024e0 <_ntoa_format+0x100>
10002576:	2358      	movs	r3, #88	; 0x58
10002578:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000257a:	2401      	movs	r4, #1
1000257c:	7013      	strb	r3, [r2, #0]
        if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
1000257e:	e7b1      	b.n	100024e4 <_ntoa_format+0x104>
            buf[len++] = 'b';
10002580:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002582:	3360      	adds	r3, #96	; 0x60
10002584:	2401      	movs	r4, #1
10002586:	7013      	strb	r3, [r2, #0]
        if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
10002588:	e7ac      	b.n	100024e4 <_ntoa_format+0x104>
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
1000258a:	2420      	movs	r4, #32
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
1000258c:	2600      	movs	r6, #0
1000258e:	e75e      	b.n	1000244e <_ntoa_format+0x6e>
                len--;
10002590:	3c02      	subs	r4, #2
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002592:	06ba      	lsls	r2, r7, #26
10002594:	d4e9      	bmi.n	1000256a <_ntoa_format+0x18a>
            buf[len++] = 'x';
10002596:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002598:	1912      	adds	r2, r2, r4
1000259a:	001c      	movs	r4, r3
1000259c:	e7d8      	b.n	10002550 <_ntoa_format+0x170>
            buf[len++] = 'b';
1000259e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100025a0:	4692      	mov	sl, r2
100025a2:	4453      	add	r3, sl
100025a4:	2262      	movs	r2, #98	; 0x62
100025a6:	701a      	strb	r2, [r3, #0]
100025a8:	e79a      	b.n	100024e0 <_ntoa_format+0x100>
100025aa:	46c0      	nop			; (mov r8, r8)

100025ac <_out_char>:
static inline void _out_char(char character, void *buffer, size_t idx, size_t maxlen) {
100025ac:	b510      	push	{r4, lr}
    if (character) {
100025ae:	2800      	cmp	r0, #0
100025b0:	d100      	bne.n	100025b4 <_out_char+0x8>
}
100025b2:	bd10      	pop	{r4, pc}
    putchar(character);
100025b4:	f001 fb48 	bl	10003c48 <__wrap_putchar>
}
100025b8:	e7fb      	b.n	100025b2 <_out_char+0x6>
100025ba:	46c0      	nop			; (mov r8, r8)

100025bc <_out_fct>:
static inline void _out_fct(char character, void *buffer, size_t idx, size_t maxlen) {
100025bc:	000b      	movs	r3, r1
100025be:	b510      	push	{r4, lr}
    if (character) {
100025c0:	2800      	cmp	r0, #0
100025c2:	d002      	beq.n	100025ca <_out_fct+0xe>
        ((out_fct_wrap_type *) buffer)->fct(character, ((out_fct_wrap_type *) buffer)->arg);
100025c4:	6849      	ldr	r1, [r1, #4]
100025c6:	681b      	ldr	r3, [r3, #0]
100025c8:	4798      	blx	r3
}
100025ca:	bd10      	pop	{r4, pc}

100025cc <_etoa>:

#if PICO_PRINTF_SUPPORT_EXPONENTIAL

// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char *buffer, size_t idx, size_t maxlen, double value, unsigned int prec,
                    unsigned int width, unsigned int flags) {
100025cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100025ce:	46de      	mov	lr, fp
100025d0:	4657      	mov	r7, sl
100025d2:	464e      	mov	r6, r9
100025d4:	4645      	mov	r5, r8
100025d6:	b5e0      	push	{r5, r6, r7, lr}
100025d8:	b09b      	sub	sp, #108	; 0x6c
100025da:	469a      	mov	sl, r3
100025dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
100025de:	468b      	mov	fp, r1
100025e0:	4699      	mov	r9, r3
100025e2:	9b25      	ldr	r3, [sp, #148]	; 0x94
100025e4:	900b      	str	r0, [sp, #44]	; 0x2c
100025e6:	4698      	mov	r8, r3
100025e8:	920c      	str	r2, [sp, #48]	; 0x30
    // check for NaN and special values
    if (is_nan(value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
100025ea:	4643      	mov	r3, r8
100025ec:	464a      	mov	r2, r9
100025ee:	4648      	mov	r0, r9
100025f0:	4641      	mov	r1, r8
100025f2:	f7fe f994 	bl	1000091e <__wrap___aeabi_dcmpun>
100025f6:	2800      	cmp	r0, #0
100025f8:	d000      	beq.n	100025fc <_etoa+0x30>
100025fa:	e194      	b.n	10002926 <_etoa+0x35a>
100025fc:	2201      	movs	r2, #1
100025fe:	4648      	mov	r0, r9
10002600:	4641      	mov	r1, r8
10002602:	4be0      	ldr	r3, [pc, #896]	; (10002984 <_etoa+0x3b8>)
10002604:	4252      	negs	r2, r2
10002606:	f7fe f985 	bl	10000914 <__wrap___aeabi_dcmpgt>
1000260a:	2800      	cmp	r0, #0
1000260c:	d000      	beq.n	10002610 <_etoa+0x44>
1000260e:	e18a      	b.n	10002926 <_etoa+0x35a>
10002610:	2201      	movs	r2, #1
10002612:	4648      	mov	r0, r9
10002614:	4641      	mov	r1, r8
10002616:	4bdc      	ldr	r3, [pc, #880]	; (10002988 <_etoa+0x3bc>)
10002618:	4252      	negs	r2, r2
1000261a:	f7fe f965 	bl	100008e8 <__wrap___aeabi_dcmplt>
1000261e:	2800      	cmp	r0, #0
10002620:	d000      	beq.n	10002624 <_etoa+0x58>
10002622:	e180      	b.n	10002926 <_etoa+0x35a>
        return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    }

    // determine the sign
    const bool negative = value < 0;
    if (negative) {
10002624:	2200      	movs	r2, #0
10002626:	2300      	movs	r3, #0
10002628:	4648      	mov	r0, r9
1000262a:	4641      	mov	r1, r8
1000262c:	f7fe f95c 	bl	100008e8 <__wrap___aeabi_dcmplt>
10002630:	2800      	cmp	r0, #0
10002632:	d000      	beq.n	10002636 <_etoa+0x6a>
10002634:	e19b      	b.n	1000296e <_etoa+0x3a2>
10002636:	464a      	mov	r2, r9
10002638:	4643      	mov	r3, r8
1000263a:	920a      	str	r2, [sp, #40]	; 0x28
1000263c:	9309      	str	r3, [sp, #36]	; 0x24
        value = -value;
    }

    // default precision
    if (!(flags & FLAGS_PRECISION)) {
1000263e:	2380      	movs	r3, #128	; 0x80
10002640:	9a28      	ldr	r2, [sp, #160]	; 0xa0
10002642:	00db      	lsls	r3, r3, #3
10002644:	401a      	ands	r2, r3
10002646:	9211      	str	r2, [sp, #68]	; 0x44
10002648:	9a28      	ldr	r2, [sp, #160]	; 0xa0
1000264a:	421a      	tst	r2, r3
1000264c:	d101      	bne.n	10002652 <_etoa+0x86>
        prec = PICO_PRINTF_DEFAULT_FLOAT_PRECISION;
1000264e:	2306      	movs	r3, #6
10002650:	9326      	str	r3, [sp, #152]	; 0x98
        uint64_t U;
        double F;
    } conv;

    conv.F = value;
    int exp2 = (int) ((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
10002652:	4bce      	ldr	r3, [pc, #824]	; (1000298c <_etoa+0x3c0>)
10002654:	9f09      	ldr	r7, [sp, #36]	; 0x24
10002656:	469c      	mov	ip, r3
10002658:	0078      	lsls	r0, r7, #1
1000265a:	0d40      	lsrs	r0, r0, #21
1000265c:	4460      	add	r0, ip
    conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
    // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
    int expval = (int) (0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
1000265e:	f7fe f971 	bl	10000944 <__wrap___aeabi_i2d>
10002662:	4acb      	ldr	r2, [pc, #812]	; (10002990 <_etoa+0x3c4>)
10002664:	4bcb      	ldr	r3, [pc, #812]	; (10002994 <_etoa+0x3c8>)
10002666:	f7fe f8fd 	bl	10000864 <__wrap___aeabi_dmul>
1000266a:	4acb      	ldr	r2, [pc, #812]	; (10002998 <_etoa+0x3cc>)
1000266c:	4bcb      	ldr	r3, [pc, #812]	; (1000299c <_etoa+0x3d0>)
1000266e:	f7fe f8e7 	bl	10000840 <__wrap___aeabi_dadd>
    conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
10002672:	033b      	lsls	r3, r7, #12
10002674:	4aca      	ldr	r2, [pc, #808]	; (100029a0 <_etoa+0x3d4>)
    conv.F = value;
10002676:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
10002678:	0b1b      	lsrs	r3, r3, #12
1000267a:	431a      	orrs	r2, r3
    int expval = (int) (0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
1000267c:	0004      	movs	r4, r0
1000267e:	000d      	movs	r5, r1
    conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
10002680:	0030      	movs	r0, r6
10002682:	0011      	movs	r1, r2
    int expval = (int) (0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
10002684:	4bc7      	ldr	r3, [pc, #796]	; (100029a4 <_etoa+0x3d8>)
10002686:	2200      	movs	r2, #0
10002688:	f7fe f8d1 	bl	1000082e <__wrap___aeabi_dsub>
1000268c:	4ac6      	ldr	r2, [pc, #792]	; (100029a8 <_etoa+0x3dc>)
1000268e:	4bc7      	ldr	r3, [pc, #796]	; (100029ac <_etoa+0x3e0>)
10002690:	f7fe f8e8 	bl	10000864 <__wrap___aeabi_dmul>
10002694:	0002      	movs	r2, r0
10002696:	000b      	movs	r3, r1
10002698:	0020      	movs	r0, r4
1000269a:	0029      	movs	r1, r5
1000269c:	f7fe f8d0 	bl	10000840 <__wrap___aeabi_dadd>
100026a0:	f7fe f968 	bl	10000974 <__wrap___aeabi_d2iz>
    // now we want to compute 10^expval but we want to be sure it won't overflow
    exp2 = (int) (expval * 3.321928094887362 + 0.5);
100026a4:	900d      	str	r0, [sp, #52]	; 0x34
100026a6:	f7fe f94d 	bl	10000944 <__wrap___aeabi_i2d>
100026aa:	4ac1      	ldr	r2, [pc, #772]	; (100029b0 <_etoa+0x3e4>)
100026ac:	4bc1      	ldr	r3, [pc, #772]	; (100029b4 <_etoa+0x3e8>)
100026ae:	0004      	movs	r4, r0
100026b0:	000d      	movs	r5, r1
100026b2:	f7fe f8d7 	bl	10000864 <__wrap___aeabi_dmul>
100026b6:	2200      	movs	r2, #0
100026b8:	4bbf      	ldr	r3, [pc, #764]	; (100029b8 <_etoa+0x3ec>)
100026ba:	f7fe f8c1 	bl	10000840 <__wrap___aeabi_dadd>
100026be:	f7fe f959 	bl	10000974 <__wrap___aeabi_d2iz>
    const double z = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
100026c2:	4abe      	ldr	r2, [pc, #760]	; (100029bc <_etoa+0x3f0>)
    exp2 = (int) (expval * 3.321928094887362 + 0.5);
100026c4:	0006      	movs	r6, r0
    const double z = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
100026c6:	4bbe      	ldr	r3, [pc, #760]	; (100029c0 <_etoa+0x3f4>)
100026c8:	0020      	movs	r0, r4
100026ca:	0029      	movs	r1, r5
100026cc:	f7fe f8ca 	bl	10000864 <__wrap___aeabi_dmul>
100026d0:	0004      	movs	r4, r0
100026d2:	0030      	movs	r0, r6
100026d4:	000d      	movs	r5, r1
100026d6:	9610      	str	r6, [sp, #64]	; 0x40
100026d8:	f7fe f934 	bl	10000944 <__wrap___aeabi_i2d>
100026dc:	4ab9      	ldr	r2, [pc, #740]	; (100029c4 <_etoa+0x3f8>)
100026de:	4bba      	ldr	r3, [pc, #744]	; (100029c8 <_etoa+0x3fc>)
100026e0:	f7fe f8c0 	bl	10000864 <__wrap___aeabi_dmul>
100026e4:	0002      	movs	r2, r0
100026e6:	000b      	movs	r3, r1
100026e8:	0020      	movs	r0, r4
100026ea:	0029      	movs	r1, r5
100026ec:	f7fe f89f 	bl	1000082e <__wrap___aeabi_dsub>
    const double z2 = z * z;
100026f0:	0002      	movs	r2, r0
100026f2:	000b      	movs	r3, r1
    const double z = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
100026f4:	0006      	movs	r6, r0
100026f6:	000f      	movs	r7, r1
    const double z2 = z * z;
100026f8:	f7fe f8b4 	bl	10000864 <__wrap___aeabi_dmul>
    conv.U = (uint64_t) (exp2 + 1023) << 52U;
    // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
    conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
100026fc:	0032      	movs	r2, r6
    const double z2 = z * z;
100026fe:	0004      	movs	r4, r0
10002700:	000d      	movs	r5, r1
    conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
10002702:	003b      	movs	r3, r7
10002704:	0030      	movs	r0, r6
10002706:	0039      	movs	r1, r7
10002708:	f7fe f89a 	bl	10000840 <__wrap___aeabi_dadd>
1000270c:	2200      	movs	r2, #0
1000270e:	900e      	str	r0, [sp, #56]	; 0x38
10002710:	910f      	str	r1, [sp, #60]	; 0x3c
10002712:	4bae      	ldr	r3, [pc, #696]	; (100029cc <_etoa+0x400>)
10002714:	0020      	movs	r0, r4
10002716:	0029      	movs	r1, r5
10002718:	f7fe f89b 	bl	10000852 <__wrap___aeabi_ddiv>
1000271c:	2200      	movs	r2, #0
1000271e:	4bac      	ldr	r3, [pc, #688]	; (100029d0 <_etoa+0x404>)
10002720:	f7fe f88e 	bl	10000840 <__wrap___aeabi_dadd>
10002724:	0002      	movs	r2, r0
10002726:	000b      	movs	r3, r1
10002728:	0020      	movs	r0, r4
1000272a:	0029      	movs	r1, r5
1000272c:	f7fe f891 	bl	10000852 <__wrap___aeabi_ddiv>
10002730:	2200      	movs	r2, #0
10002732:	4ba8      	ldr	r3, [pc, #672]	; (100029d4 <_etoa+0x408>)
10002734:	f7fe f884 	bl	10000840 <__wrap___aeabi_dadd>
10002738:	0002      	movs	r2, r0
1000273a:	000b      	movs	r3, r1
1000273c:	0020      	movs	r0, r4
1000273e:	0029      	movs	r1, r5
10002740:	f7fe f887 	bl	10000852 <__wrap___aeabi_ddiv>
10002744:	000d      	movs	r5, r1
10002746:	2180      	movs	r1, #128	; 0x80
10002748:	0004      	movs	r4, r0
1000274a:	0032      	movs	r2, r6
1000274c:	003b      	movs	r3, r7
1000274e:	2000      	movs	r0, #0
10002750:	05c9      	lsls	r1, r1, #23
10002752:	f7fe f86c 	bl	1000082e <__wrap___aeabi_dsub>
10002756:	0002      	movs	r2, r0
10002758:	000b      	movs	r3, r1
1000275a:	0020      	movs	r0, r4
1000275c:	0029      	movs	r1, r5
1000275e:	f7fe f86f 	bl	10000840 <__wrap___aeabi_dadd>
10002762:	0002      	movs	r2, r0
10002764:	000b      	movs	r3, r1
10002766:	980e      	ldr	r0, [sp, #56]	; 0x38
10002768:	990f      	ldr	r1, [sp, #60]	; 0x3c
1000276a:	f7fe f872 	bl	10000852 <__wrap___aeabi_ddiv>
1000276e:	2200      	movs	r2, #0
10002770:	4b8b      	ldr	r3, [pc, #556]	; (100029a0 <_etoa+0x3d4>)
10002772:	f7fe f865 	bl	10000840 <__wrap___aeabi_dadd>
    conv.U = (uint64_t) (exp2 + 1023) << 52U;
10002776:	4b98      	ldr	r3, [pc, #608]	; (100029d8 <_etoa+0x40c>)
10002778:	9c10      	ldr	r4, [sp, #64]	; 0x40
1000277a:	469c      	mov	ip, r3
1000277c:	4464      	add	r4, ip
1000277e:	2200      	movs	r2, #0
10002780:	0523      	lsls	r3, r4, #20
    conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
10002782:	f7fe f86f 	bl	10000864 <__wrap___aeabi_dmul>
10002786:	0006      	movs	r6, r0
10002788:	000f      	movs	r7, r1
    // correct for rounding errors
    if (value < conv.F) {
1000278a:	0002      	movs	r2, r0
1000278c:	000b      	movs	r3, r1
1000278e:	980a      	ldr	r0, [sp, #40]	; 0x28
10002790:	9909      	ldr	r1, [sp, #36]	; 0x24
10002792:	f7fe f8a9 	bl	100008e8 <__wrap___aeabi_dcmplt>
10002796:	2800      	cmp	r0, #0
10002798:	d00a      	beq.n	100027b0 <_etoa+0x1e4>
        expval--;
1000279a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        conv.F /= 10;
1000279c:	0030      	movs	r0, r6
        expval--;
1000279e:	3b01      	subs	r3, #1
        conv.F /= 10;
100027a0:	0039      	movs	r1, r7
        expval--;
100027a2:	930d      	str	r3, [sp, #52]	; 0x34
        conv.F /= 10;
100027a4:	2200      	movs	r2, #0
100027a6:	4b8a      	ldr	r3, [pc, #552]	; (100029d0 <_etoa+0x404>)
100027a8:	f7fe f853 	bl	10000852 <__wrap___aeabi_ddiv>
100027ac:	0006      	movs	r6, r0
100027ae:	000f      	movs	r7, r1
    }

    // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
    unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
100027b0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
100027b2:	24c6      	movs	r4, #198	; 0xc6
100027b4:	002b      	movs	r3, r5
100027b6:	3363      	adds	r3, #99	; 0x63
100027b8:	429c      	cmp	r4, r3
100027ba:	41a4      	sbcs	r4, r4

    // in "%g" mode, "prec" is the number of *significant figures* not decimals
    if (flags & FLAGS_ADAPT_EXP) {
100027bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
100027be:	4264      	negs	r4, r4
100027c0:	3404      	adds	r4, #4
    if (flags & FLAGS_ADAPT_EXP) {
100027c2:	051b      	lsls	r3, r3, #20
100027c4:	d51f      	bpl.n	10002806 <_etoa+0x23a>
        // do we want to fall-back to "%f" mode?
        if ((value >= 1e-4) && (value < 1e6)) {
100027c6:	4a85      	ldr	r2, [pc, #532]	; (100029dc <_etoa+0x410>)
100027c8:	4b85      	ldr	r3, [pc, #532]	; (100029e0 <_etoa+0x414>)
100027ca:	980a      	ldr	r0, [sp, #40]	; 0x28
100027cc:	9909      	ldr	r1, [sp, #36]	; 0x24
100027ce:	f7fe f899 	bl	10000904 <__wrap___aeabi_dcmpge>
100027d2:	2800      	cmp	r0, #0
100027d4:	d100      	bne.n	100027d8 <_etoa+0x20c>
100027d6:	e0bf      	b.n	10002958 <_etoa+0x38c>
100027d8:	2200      	movs	r2, #0
100027da:	4b82      	ldr	r3, [pc, #520]	; (100029e4 <_etoa+0x418>)
100027dc:	980a      	ldr	r0, [sp, #40]	; 0x28
100027de:	9909      	ldr	r1, [sp, #36]	; 0x24
100027e0:	f7fe f882 	bl	100008e8 <__wrap___aeabi_dcmplt>
100027e4:	2800      	cmp	r0, #0
100027e6:	d100      	bne.n	100027ea <_etoa+0x21e>
100027e8:	e0b6      	b.n	10002958 <_etoa+0x38c>
            if ((int) prec > expval) {
100027ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
100027ec:	429d      	cmp	r5, r3
100027ee:	da00      	bge.n	100027f2 <_etoa+0x226>
100027f0:	e0c4      	b.n	1000297c <_etoa+0x3b0>
                prec = (unsigned) ((int) prec - expval - 1);
            } else {
                prec = 0;
100027f2:	2300      	movs	r3, #0
100027f4:	9326      	str	r3, [sp, #152]	; 0x98
            }
            flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
100027f6:	2380      	movs	r3, #128	; 0x80
100027f8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
100027fa:	00db      	lsls	r3, r3, #3
100027fc:	431a      	orrs	r2, r3
            // no characters in exponent
            minwidth = 0U;
            expval = 0;
100027fe:	2300      	movs	r3, #0
            minwidth = 0U;
10002800:	2400      	movs	r4, #0
            flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
10002802:	9228      	str	r2, [sp, #160]	; 0xa0
            expval = 0;
10002804:	930d      	str	r3, [sp, #52]	; 0x34
        }
    }

    // will everything fit?
    unsigned int fwidth = width;
    if (width > minwidth) {
10002806:	9b27      	ldr	r3, [sp, #156]	; 0x9c
        // we didn't fall-back so subtract the characters required for the exponent
        fwidth -= minwidth;
    } else {
        // not enough characters, so go back to default sizing
        fwidth = 0U;
10002808:	2500      	movs	r5, #0
    if (width > minwidth) {
1000280a:	42a3      	cmp	r3, r4
1000280c:	d900      	bls.n	10002810 <_etoa+0x244>
        fwidth -= minwidth;
1000280e:	1b1d      	subs	r5, r3, r4
    }
    if ((flags & FLAGS_LEFT) && minwidth) {
10002810:	2302      	movs	r3, #2
10002812:	9a28      	ldr	r2, [sp, #160]	; 0xa0
10002814:	401a      	ands	r2, r3
10002816:	9210      	str	r2, [sp, #64]	; 0x40
10002818:	9a28      	ldr	r2, [sp, #160]	; 0xa0
1000281a:	4213      	tst	r3, r2
1000281c:	d003      	beq.n	10002826 <_etoa+0x25a>
        // if we're padding on the right, DON'T pad the floating part
        fwidth = 0U;
1000281e:	4263      	negs	r3, r4
10002820:	4163      	adcs	r3, r4
10002822:	425b      	negs	r3, r3
10002824:	401d      	ands	r5, r3
    }

    // rescale the float value
    if (expval) {
10002826:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10002828:	2b00      	cmp	r3, #0
1000282a:	d007      	beq.n	1000283c <_etoa+0x270>
        value /= conv.F;
1000282c:	980a      	ldr	r0, [sp, #40]	; 0x28
1000282e:	9909      	ldr	r1, [sp, #36]	; 0x24
10002830:	0032      	movs	r2, r6
10002832:	003b      	movs	r3, r7
10002834:	f7fe f80d 	bl	10000852 <__wrap___aeabi_ddiv>
10002838:	900a      	str	r0, [sp, #40]	; 0x28
1000283a:	9109      	str	r1, [sp, #36]	; 0x24
    }

    // output the floating part
    const size_t start_idx = idx;
    idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
1000283c:	2200      	movs	r2, #0
1000283e:	2300      	movs	r3, #0
10002840:	4648      	mov	r0, r9
10002842:	4641      	mov	r1, r8
10002844:	f7fe f850 	bl	100008e8 <__wrap___aeabi_dcmplt>
10002848:	2800      	cmp	r0, #0
1000284a:	d005      	beq.n	10002858 <_etoa+0x28c>
1000284c:	2080      	movs	r0, #128	; 0x80
1000284e:	0600      	lsls	r0, r0, #24
10002850:	4684      	mov	ip, r0
10002852:	9909      	ldr	r1, [sp, #36]	; 0x24
10002854:	4461      	add	r1, ip
10002856:	9109      	str	r1, [sp, #36]	; 0x24
10002858:	9a28      	ldr	r2, [sp, #160]	; 0xa0
1000285a:	4b63      	ldr	r3, [pc, #396]	; (100029e8 <_etoa+0x41c>)
1000285c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
1000285e:	4013      	ands	r3, r2
10002860:	9304      	str	r3, [sp, #16]
10002862:	9b26      	ldr	r3, [sp, #152]	; 0x98
10002864:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10002866:	9302      	str	r3, [sp, #8]
10002868:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000286a:	9503      	str	r5, [sp, #12]
1000286c:	9200      	str	r2, [sp, #0]
1000286e:	9301      	str	r3, [sp, #4]
10002870:	4659      	mov	r1, fp
10002872:	4653      	mov	r3, sl
10002874:	0030      	movs	r0, r6
10002876:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002878:	f000 f8b8 	bl	100029ec <_ftoa>
1000287c:	0005      	movs	r5, r0

    // output the exponent part
    if (minwidth) {
1000287e:	2c00      	cmp	r4, #0
10002880:	d062      	beq.n	10002948 <_etoa+0x37c>
        // output the exponential symbol
        out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
10002882:	9b28      	ldr	r3, [sp, #160]	; 0xa0
10002884:	002a      	movs	r2, r5
10002886:	0698      	lsls	r0, r3, #26
10002888:	231f      	movs	r3, #31
1000288a:	17c0      	asrs	r0, r0, #31
1000288c:	4398      	bics	r0, r3
1000288e:	1c6b      	adds	r3, r5, #1
10002890:	4698      	mov	r8, r3
10002892:	4659      	mov	r1, fp
10002894:	4653      	mov	r3, sl
10002896:	3065      	adds	r0, #101	; 0x65
10002898:	47b0      	blx	r6
        // output the exponent value
        idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth - 1,
1000289a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000289c:	2600      	movs	r6, #0
1000289e:	17da      	asrs	r2, r3, #31
100028a0:	189d      	adds	r5, r3, r2
100028a2:	0fdb      	lsrs	r3, r3, #31
100028a4:	4699      	mov	r9, r3
100028a6:	4055      	eors	r5, r2
100028a8:	3c01      	subs	r4, #1
    if (!(flags & FLAGS_PRECISION) || value) {
100028aa:	e001      	b.n	100028b0 <_etoa+0x2e4>
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
100028ac:	2e20      	cmp	r6, #32
100028ae:	d013      	beq.n	100028d8 <_etoa+0x30c>
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
100028b0:	aa0a      	add	r2, sp, #40	; 0x28
100028b2:	4694      	mov	ip, r2
100028b4:	231f      	movs	r3, #31
            const char digit = (char) (value % base);
100028b6:	0028      	movs	r0, r5
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
100028b8:	4463      	add	r3, ip
            const char digit = (char) (value % base);
100028ba:	210a      	movs	r1, #10
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
100028bc:	3601      	adds	r6, #1
100028be:	199f      	adds	r7, r3, r6
            const char digit = (char) (value % base);
100028c0:	f7fd fd58 	bl	10000374 <__wrap___aeabi_uidiv>
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
100028c4:	3130      	adds	r1, #48	; 0x30
100028c6:	7039      	strb	r1, [r7, #0]
            value /= base;
100028c8:	0028      	movs	r0, r5
100028ca:	210a      	movs	r1, #10
100028cc:	f7fd fd52 	bl	10000374 <__wrap___aeabi_uidiv>
100028d0:	002f      	movs	r7, r5
100028d2:	0005      	movs	r5, r0
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
100028d4:	2f09      	cmp	r7, #9
100028d6:	d8e9      	bhi.n	100028ac <_etoa+0x2e0>
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
100028d8:	2305      	movs	r3, #5
100028da:	9306      	str	r3, [sp, #24]
100028dc:	2300      	movs	r3, #0
100028de:	9304      	str	r3, [sp, #16]
100028e0:	330a      	adds	r3, #10
100028e2:	9303      	str	r3, [sp, #12]
100028e4:	464b      	mov	r3, r9
100028e6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
100028e8:	9302      	str	r3, [sp, #8]
100028ea:	ab12      	add	r3, sp, #72	; 0x48
100028ec:	9300      	str	r3, [sp, #0]
100028ee:	4642      	mov	r2, r8
100028f0:	4653      	mov	r3, sl
100028f2:	4659      	mov	r1, fp
100028f4:	0038      	movs	r0, r7
100028f6:	9405      	str	r4, [sp, #20]
100028f8:	9601      	str	r6, [sp, #4]
100028fa:	f7ff fd71 	bl	100023e0 <_ntoa_format>
                         FLAGS_ZEROPAD | FLAGS_PLUS);
        // might need to right-pad spaces
        if (flags & FLAGS_LEFT) {
100028fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10002900:	0005      	movs	r5, r0
        if (flags & FLAGS_LEFT) {
10002902:	2b00      	cmp	r3, #0
10002904:	d020      	beq.n	10002948 <_etoa+0x37c>
            while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
10002906:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10002908:	1ac4      	subs	r4, r0, r3
1000290a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
1000290c:	42a3      	cmp	r3, r4
1000290e:	d91b      	bls.n	10002948 <_etoa+0x37c>
10002910:	001e      	movs	r6, r3
10002912:	002a      	movs	r2, r5
10002914:	4653      	mov	r3, sl
10002916:	4659      	mov	r1, fp
10002918:	2020      	movs	r0, #32
1000291a:	3401      	adds	r4, #1
1000291c:	47b8      	blx	r7
1000291e:	3501      	adds	r5, #1
10002920:	42a6      	cmp	r6, r4
10002922:	d8f6      	bhi.n	10002912 <_etoa+0x346>
10002924:	e010      	b.n	10002948 <_etoa+0x37c>
        return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
10002926:	9b28      	ldr	r3, [sp, #160]	; 0xa0
10002928:	464a      	mov	r2, r9
1000292a:	9304      	str	r3, [sp, #16]
1000292c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
1000292e:	4659      	mov	r1, fp
10002930:	9303      	str	r3, [sp, #12]
10002932:	9b26      	ldr	r3, [sp, #152]	; 0x98
10002934:	980b      	ldr	r0, [sp, #44]	; 0x2c
10002936:	9302      	str	r3, [sp, #8]
10002938:	4643      	mov	r3, r8
1000293a:	9200      	str	r2, [sp, #0]
1000293c:	9301      	str	r3, [sp, #4]
1000293e:	4653      	mov	r3, sl
10002940:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002942:	f000 f853 	bl	100029ec <_ftoa>
10002946:	0005      	movs	r5, r0
        }
    }
    return idx;
}
10002948:	0028      	movs	r0, r5
1000294a:	b01b      	add	sp, #108	; 0x6c
1000294c:	bcf0      	pop	{r4, r5, r6, r7}
1000294e:	46bb      	mov	fp, r7
10002950:	46b2      	mov	sl, r6
10002952:	46a9      	mov	r9, r5
10002954:	46a0      	mov	r8, r4
10002956:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if ((prec > 0) && (flags & FLAGS_PRECISION)) {
10002958:	9b26      	ldr	r3, [sp, #152]	; 0x98
1000295a:	2b00      	cmp	r3, #0
1000295c:	d100      	bne.n	10002960 <_etoa+0x394>
1000295e:	e752      	b.n	10002806 <_etoa+0x23a>
                --prec;
10002960:	9b11      	ldr	r3, [sp, #68]	; 0x44
10002962:	1e5a      	subs	r2, r3, #1
10002964:	4193      	sbcs	r3, r2
10002966:	9a26      	ldr	r2, [sp, #152]	; 0x98
10002968:	1ad3      	subs	r3, r2, r3
1000296a:	9326      	str	r3, [sp, #152]	; 0x98
1000296c:	e74b      	b.n	10002806 <_etoa+0x23a>
        value = -value;
1000296e:	464b      	mov	r3, r9
10002970:	930a      	str	r3, [sp, #40]	; 0x28
10002972:	2380      	movs	r3, #128	; 0x80
10002974:	061b      	lsls	r3, r3, #24
10002976:	4443      	add	r3, r8
10002978:	9309      	str	r3, [sp, #36]	; 0x24
1000297a:	e660      	b.n	1000263e <_etoa+0x72>
                prec = (unsigned) ((int) prec - expval - 1);
1000297c:	1b58      	subs	r0, r3, r5
1000297e:	1e43      	subs	r3, r0, #1
10002980:	9326      	str	r3, [sp, #152]	; 0x98
10002982:	e738      	b.n	100027f6 <_etoa+0x22a>
10002984:	7fefffff 	.word	0x7fefffff
10002988:	ffefffff 	.word	0xffefffff
1000298c:	fffffc01 	.word	0xfffffc01
10002990:	509f79fb 	.word	0x509f79fb
10002994:	3fd34413 	.word	0x3fd34413
10002998:	8b60c8b3 	.word	0x8b60c8b3
1000299c:	3fc68a28 	.word	0x3fc68a28
100029a0:	3ff00000 	.word	0x3ff00000
100029a4:	3ff80000 	.word	0x3ff80000
100029a8:	636f4361 	.word	0x636f4361
100029ac:	3fd287a7 	.word	0x3fd287a7
100029b0:	0979a371 	.word	0x0979a371
100029b4:	400a934f 	.word	0x400a934f
100029b8:	3fe00000 	.word	0x3fe00000
100029bc:	bbb55516 	.word	0xbbb55516
100029c0:	40026bb1 	.word	0x40026bb1
100029c4:	fefa39ef 	.word	0xfefa39ef
100029c8:	3fe62e42 	.word	0x3fe62e42
100029cc:	402c0000 	.word	0x402c0000
100029d0:	40240000 	.word	0x40240000
100029d4:	40180000 	.word	0x40180000
100029d8:	000003ff 	.word	0x000003ff
100029dc:	eb1c432d 	.word	0xeb1c432d
100029e0:	3f1a36e2 	.word	0x3f1a36e2
100029e4:	412e8480 	.word	0x412e8480
100029e8:	fffff7ff 	.word	0xfffff7ff

100029ec <_ftoa>:
                    unsigned int width, unsigned int flags) {
100029ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100029ee:	464e      	mov	r6, r9
100029f0:	46de      	mov	lr, fp
100029f2:	4657      	mov	r7, sl
100029f4:	4645      	mov	r5, r8
100029f6:	b5e0      	push	{r5, r6, r7, lr}
100029f8:	b097      	sub	sp, #92	; 0x5c
100029fa:	4699      	mov	r9, r3
100029fc:	9e20      	ldr	r6, [sp, #128]	; 0x80
100029fe:	9f21      	ldr	r7, [sp, #132]	; 0x84
10002a00:	9b22      	ldr	r3, [sp, #136]	; 0x88
10002a02:	4683      	mov	fp, r0
10002a04:	4698      	mov	r8, r3
10002a06:	9107      	str	r1, [sp, #28]
10002a08:	920c      	str	r2, [sp, #48]	; 0x30
    if (is_nan(value))
10002a0a:	003b      	movs	r3, r7
10002a0c:	0032      	movs	r2, r6
10002a0e:	0030      	movs	r0, r6
10002a10:	0039      	movs	r1, r7
10002a12:	f7fd ff84 	bl	1000091e <__wrap___aeabi_dcmpun>
10002a16:	2800      	cmp	r0, #0
10002a18:	d000      	beq.n	10002a1c <_ftoa+0x30>
10002a1a:	e1a9      	b.n	10002d70 <_ftoa+0x384>
    if (value < -DBL_MAX)
10002a1c:	2201      	movs	r2, #1
10002a1e:	0030      	movs	r0, r6
10002a20:	0039      	movs	r1, r7
10002a22:	4bca      	ldr	r3, [pc, #808]	; (10002d4c <_ftoa+0x360>)
10002a24:	4252      	negs	r2, r2
10002a26:	f7fd ff5f 	bl	100008e8 <__wrap___aeabi_dcmplt>
10002a2a:	2800      	cmp	r0, #0
10002a2c:	d000      	beq.n	10002a30 <_ftoa+0x44>
10002a2e:	e0e1      	b.n	10002bf4 <_ftoa+0x208>
    if (value > DBL_MAX)
10002a30:	2201      	movs	r2, #1
10002a32:	0030      	movs	r0, r6
10002a34:	0039      	movs	r1, r7
10002a36:	4bc6      	ldr	r3, [pc, #792]	; (10002d50 <_ftoa+0x364>)
10002a38:	4252      	negs	r2, r2
10002a3a:	f7fd ff6b 	bl	10000914 <__wrap___aeabi_dcmpgt>
10002a3e:	2800      	cmp	r0, #0
10002a40:	d000      	beq.n	10002a44 <_ftoa+0x58>
10002a42:	e0b7      	b.n	10002bb4 <_ftoa+0x1c8>
    if ((value > PICO_PRINTF_MAX_FLOAT) || (value < -PICO_PRINTF_MAX_FLOAT)) {
10002a44:	2200      	movs	r2, #0
10002a46:	0030      	movs	r0, r6
10002a48:	0039      	movs	r1, r7
10002a4a:	4bc2      	ldr	r3, [pc, #776]	; (10002d54 <_ftoa+0x368>)
10002a4c:	f7fd ff62 	bl	10000914 <__wrap___aeabi_dcmpgt>
10002a50:	2800      	cmp	r0, #0
10002a52:	d000      	beq.n	10002a56 <_ftoa+0x6a>
10002a54:	e099      	b.n	10002b8a <_ftoa+0x19e>
10002a56:	2200      	movs	r2, #0
10002a58:	0030      	movs	r0, r6
10002a5a:	0039      	movs	r1, r7
10002a5c:	4bbe      	ldr	r3, [pc, #760]	; (10002d58 <_ftoa+0x36c>)
10002a5e:	f7fd ff43 	bl	100008e8 <__wrap___aeabi_dcmplt>
10002a62:	2800      	cmp	r0, #0
10002a64:	d000      	beq.n	10002a68 <_ftoa+0x7c>
10002a66:	e090      	b.n	10002b8a <_ftoa+0x19e>
    if (value < 0) {
10002a68:	2200      	movs	r2, #0
10002a6a:	2300      	movs	r3, #0
10002a6c:	0030      	movs	r0, r6
10002a6e:	0039      	movs	r1, r7
10002a70:	f7fd ff3a 	bl	100008e8 <__wrap___aeabi_dcmplt>
10002a74:	2800      	cmp	r0, #0
10002a76:	d000      	beq.n	10002a7a <_ftoa+0x8e>
10002a78:	e0b1      	b.n	10002bde <_ftoa+0x1f2>
    bool negative = false;
10002a7a:	2300      	movs	r3, #0
10002a7c:	930d      	str	r3, [sp, #52]	; 0x34
    if (!(flags & FLAGS_PRECISION)) {
10002a7e:	9b24      	ldr	r3, [sp, #144]	; 0x90
10002a80:	055b      	lsls	r3, r3, #21
10002a82:	d401      	bmi.n	10002a88 <_ftoa+0x9c>
        prec = PICO_PRINTF_DEFAULT_FLOAT_PRECISION;
10002a84:	2306      	movs	r3, #6
10002a86:	4698      	mov	r8, r3
        buf[len++] = '0';
10002a88:	ab08      	add	r3, sp, #32
10002a8a:	469c      	mov	ip, r3
10002a8c:	2217      	movs	r2, #23
        prec = PICO_PRINTF_DEFAULT_FLOAT_PRECISION;
10002a8e:	2400      	movs	r4, #0
        buf[len++] = '0';
10002a90:	2330      	movs	r3, #48	; 0x30
10002a92:	4641      	mov	r1, r8
10002a94:	4462      	add	r2, ip
10002a96:	e004      	b.n	10002aa2 <_ftoa+0xb6>
10002a98:	3401      	adds	r4, #1
10002a9a:	5513      	strb	r3, [r2, r4]
        prec--;
10002a9c:	3901      	subs	r1, #1
    while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
10002a9e:	2c20      	cmp	r4, #32
10002aa0:	d001      	beq.n	10002aa6 <_ftoa+0xba>
10002aa2:	2909      	cmp	r1, #9
10002aa4:	d8f8      	bhi.n	10002a98 <_ftoa+0xac>
10002aa6:	4688      	mov	r8, r1
    int whole = (int) value;
10002aa8:	0030      	movs	r0, r6
10002aaa:	0039      	movs	r1, r7
10002aac:	f7fd ff62 	bl	10000974 <__wrap___aeabi_d2iz>
    double tmp = (value - whole) * pow10[prec];
10002ab0:	4643      	mov	r3, r8
10002ab2:	00da      	lsls	r2, r3, #3
10002ab4:	4ba9      	ldr	r3, [pc, #676]	; (10002d5c <_ftoa+0x370>)
    int whole = (int) value;
10002ab6:	0005      	movs	r5, r0
    double tmp = (value - whole) * pow10[prec];
10002ab8:	189b      	adds	r3, r3, r2
10002aba:	681a      	ldr	r2, [r3, #0]
10002abc:	685b      	ldr	r3, [r3, #4]
10002abe:	9208      	str	r2, [sp, #32]
10002ac0:	9309      	str	r3, [sp, #36]	; 0x24
10002ac2:	f7fd ff3f 	bl	10000944 <__wrap___aeabi_i2d>
10002ac6:	0002      	movs	r2, r0
10002ac8:	000b      	movs	r3, r1
10002aca:	0030      	movs	r0, r6
10002acc:	0039      	movs	r1, r7
10002ace:	f7fd feae 	bl	1000082e <__wrap___aeabi_dsub>
10002ad2:	9a08      	ldr	r2, [sp, #32]
10002ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
10002ad6:	f7fd fec5 	bl	10000864 <__wrap___aeabi_dmul>
    unsigned long frac = (unsigned long) tmp;
10002ada:	900a      	str	r0, [sp, #40]	; 0x28
10002adc:	910b      	str	r1, [sp, #44]	; 0x2c
10002ade:	f7fd ff6d 	bl	100009bc <__wrap___aeabi_d2uiz>
10002ae2:	4682      	mov	sl, r0
    diff = tmp - frac;
10002ae4:	f7fd ff2a 	bl	1000093c <__wrap___aeabi_ui2d>
10002ae8:	0002      	movs	r2, r0
10002aea:	000b      	movs	r3, r1
10002aec:	980a      	ldr	r0, [sp, #40]	; 0x28
10002aee:	990b      	ldr	r1, [sp, #44]	; 0x2c
10002af0:	f7fd fe9d 	bl	1000082e <__wrap___aeabi_dsub>
    if (diff > 0.5) {
10002af4:	2200      	movs	r2, #0
10002af6:	4b9a      	ldr	r3, [pc, #616]	; (10002d60 <_ftoa+0x374>)
    diff = tmp - frac;
10002af8:	900a      	str	r0, [sp, #40]	; 0x28
10002afa:	910b      	str	r1, [sp, #44]	; 0x2c
    if (diff > 0.5) {
10002afc:	f7fd ff0a 	bl	10000914 <__wrap___aeabi_dcmpgt>
10002b00:	2800      	cmp	r0, #0
10002b02:	d100      	bne.n	10002b06 <_ftoa+0x11a>
10002b04:	e0c0      	b.n	10002c88 <_ftoa+0x29c>
        ++frac;
10002b06:	2301      	movs	r3, #1
10002b08:	469c      	mov	ip, r3
10002b0a:	44e2      	add	sl, ip
        if (frac >= pow10[prec]) {
10002b0c:	4650      	mov	r0, sl
10002b0e:	f7fd ff15 	bl	1000093c <__wrap___aeabi_ui2d>
10002b12:	0002      	movs	r2, r0
10002b14:	000b      	movs	r3, r1
10002b16:	9808      	ldr	r0, [sp, #32]
10002b18:	9909      	ldr	r1, [sp, #36]	; 0x24
10002b1a:	f7fd feeb 	bl	100008f4 <__wrap___aeabi_dcmple>
10002b1e:	2800      	cmp	r0, #0
10002b20:	d002      	beq.n	10002b28 <_ftoa+0x13c>
            frac = 0;
10002b22:	2300      	movs	r3, #0
10002b24:	469a      	mov	sl, r3
            ++whole;
10002b26:	3501      	adds	r5, #1
    if (prec == 0U) {
10002b28:	4643      	mov	r3, r8
10002b2a:	2b00      	cmp	r3, #0
10002b2c:	d06a      	beq.n	10002c04 <_ftoa+0x218>
            buf[len++] = (char) (48U + (frac % 10U));
10002b2e:	ab08      	add	r3, sp, #32
10002b30:	2617      	movs	r6, #23
10002b32:	469c      	mov	ip, r3
10002b34:	9508      	str	r5, [sp, #32]
10002b36:	4466      	add	r6, ip
10002b38:	4655      	mov	r5, sl
10002b3a:	e014      	b.n	10002b66 <_ftoa+0x17a>
            --count;
10002b3c:	2301      	movs	r3, #1
10002b3e:	425b      	negs	r3, r3
10002b40:	4443      	add	r3, r8
            buf[len++] = (char) (48U + (frac % 10U));
10002b42:	210a      	movs	r1, #10
10002b44:	0028      	movs	r0, r5
            --count;
10002b46:	469a      	mov	sl, r3
            buf[len++] = (char) (48U + (frac % 10U));
10002b48:	f7fd fc14 	bl	10000374 <__wrap___aeabi_uidiv>
10002b4c:	3401      	adds	r4, #1
10002b4e:	3130      	adds	r1, #48	; 0x30
10002b50:	1937      	adds	r7, r6, r4
10002b52:	7039      	strb	r1, [r7, #0]
            if (!(frac /= 10U)) {
10002b54:	0028      	movs	r0, r5
10002b56:	210a      	movs	r1, #10
10002b58:	f7fd fc0c 	bl	10000374 <__wrap___aeabi_uidiv>
10002b5c:	2d09      	cmp	r5, #9
10002b5e:	d800      	bhi.n	10002b62 <_ftoa+0x176>
10002b60:	e0d0      	b.n	10002d04 <_ftoa+0x318>
            --count;
10002b62:	46d0      	mov	r8, sl
            if (!(frac /= 10U)) {
10002b64:	0005      	movs	r5, r0
        while (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
10002b66:	2c20      	cmp	r4, #32
10002b68:	d1e8      	bne.n	10002b3c <_ftoa+0x150>
10002b6a:	ab0e      	add	r3, sp, #56	; 0x38
10002b6c:	4698      	mov	r8, r3
    if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
10002b6e:	2303      	movs	r3, #3
10002b70:	9a24      	ldr	r2, [sp, #144]	; 0x90
10002b72:	4013      	ands	r3, r2
10002b74:	2b01      	cmp	r3, #1
10002b76:	d100      	bne.n	10002b7a <_ftoa+0x18e>
10002b78:	e096      	b.n	10002ca8 <_ftoa+0x2bc>
10002b7a:	2320      	movs	r3, #32
    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
10002b7c:	9a24      	ldr	r2, [sp, #144]	; 0x90
10002b7e:	9301      	str	r3, [sp, #4]
10002b80:	9203      	str	r2, [sp, #12]
10002b82:	9a23      	ldr	r2, [sp, #140]	; 0x8c
10002b84:	4643      	mov	r3, r8
10002b86:	9202      	str	r2, [sp, #8]
10002b88:	e01e      	b.n	10002bc8 <_ftoa+0x1dc>
        return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
10002b8a:	9b24      	ldr	r3, [sp, #144]	; 0x90
10002b8c:	4658      	mov	r0, fp
10002b8e:	9304      	str	r3, [sp, #16]
10002b90:	9b23      	ldr	r3, [sp, #140]	; 0x8c
10002b92:	9600      	str	r6, [sp, #0]
10002b94:	9701      	str	r7, [sp, #4]
10002b96:	9303      	str	r3, [sp, #12]
10002b98:	4643      	mov	r3, r8
10002b9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002b9c:	9302      	str	r3, [sp, #8]
10002b9e:	9907      	ldr	r1, [sp, #28]
10002ba0:	464b      	mov	r3, r9
10002ba2:	f7ff fd13 	bl	100025cc <_etoa>
}
10002ba6:	b017      	add	sp, #92	; 0x5c
10002ba8:	bcf0      	pop	{r4, r5, r6, r7}
10002baa:	46bb      	mov	fp, r7
10002bac:	46b2      	mov	sl, r6
10002bae:	46a9      	mov	r9, r5
10002bb0:	46a0      	mov	r8, r4
10002bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U,
10002bb4:	9b24      	ldr	r3, [sp, #144]	; 0x90
10002bb6:	075b      	lsls	r3, r3, #29
10002bb8:	d40e      	bmi.n	10002bd8 <_ftoa+0x1ec>
10002bba:	2203      	movs	r2, #3
10002bbc:	4b69      	ldr	r3, [pc, #420]	; (10002d64 <_ftoa+0x378>)
10002bbe:	9924      	ldr	r1, [sp, #144]	; 0x90
10002bc0:	9201      	str	r2, [sp, #4]
10002bc2:	9103      	str	r1, [sp, #12]
10002bc4:	9923      	ldr	r1, [sp, #140]	; 0x8c
10002bc6:	9102      	str	r1, [sp, #8]
    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
10002bc8:	9300      	str	r3, [sp, #0]
10002bca:	4658      	mov	r0, fp
10002bcc:	464b      	mov	r3, r9
10002bce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002bd0:	9907      	ldr	r1, [sp, #28]
10002bd2:	f7ff fbb7 	bl	10002344 <_out_rev>
10002bd6:	e7e6      	b.n	10002ba6 <_ftoa+0x1ba>
        return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U,
10002bd8:	2204      	movs	r2, #4
10002bda:	4b63      	ldr	r3, [pc, #396]	; (10002d68 <_ftoa+0x37c>)
10002bdc:	e7ef      	b.n	10002bbe <_ftoa+0x1d2>
        value = 0 - value;
10002bde:	003b      	movs	r3, r7
10002be0:	0032      	movs	r2, r6
10002be2:	2000      	movs	r0, #0
10002be4:	2100      	movs	r1, #0
10002be6:	f7fd fe22 	bl	1000082e <__wrap___aeabi_dsub>
        negative = true;
10002bea:	2301      	movs	r3, #1
        value = 0 - value;
10002bec:	0006      	movs	r6, r0
10002bee:	000f      	movs	r7, r1
        negative = true;
10002bf0:	930d      	str	r3, [sp, #52]	; 0x34
10002bf2:	e744      	b.n	10002a7e <_ftoa+0x92>
        return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
10002bf4:	9b24      	ldr	r3, [sp, #144]	; 0x90
10002bf6:	9303      	str	r3, [sp, #12]
10002bf8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
10002bfa:	9302      	str	r3, [sp, #8]
10002bfc:	2304      	movs	r3, #4
10002bfe:	9301      	str	r3, [sp, #4]
10002c00:	4b5a      	ldr	r3, [pc, #360]	; (10002d6c <_ftoa+0x380>)
10002c02:	e7e1      	b.n	10002bc8 <_ftoa+0x1dc>
        diff = value - (double) whole;
10002c04:	0028      	movs	r0, r5
10002c06:	f7fd fe9d 	bl	10000944 <__wrap___aeabi_i2d>
10002c0a:	0002      	movs	r2, r0
10002c0c:	000b      	movs	r3, r1
10002c0e:	0030      	movs	r0, r6
10002c10:	0039      	movs	r1, r7
10002c12:	f7fd fe0c 	bl	1000082e <__wrap___aeabi_dsub>
        if (!((diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
10002c16:	4b52      	ldr	r3, [pc, #328]	; (10002d60 <_ftoa+0x374>)
10002c18:	2200      	movs	r2, #0
        diff = value - (double) whole;
10002c1a:	0006      	movs	r6, r0
10002c1c:	000f      	movs	r7, r1
        if (!((diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
10002c1e:	f7fd fe63 	bl	100008e8 <__wrap___aeabi_dcmplt>
10002c22:	ab0e      	add	r3, sp, #56	; 0x38
10002c24:	4698      	mov	r8, r3
10002c26:	2800      	cmp	r0, #0
10002c28:	d10a      	bne.n	10002c40 <_ftoa+0x254>
10002c2a:	2200      	movs	r2, #0
10002c2c:	0030      	movs	r0, r6
10002c2e:	0039      	movs	r1, r7
10002c30:	4b4b      	ldr	r3, [pc, #300]	; (10002d60 <_ftoa+0x374>)
10002c32:	f7fd fe6f 	bl	10000914 <__wrap___aeabi_dcmpgt>
10002c36:	2800      	cmp	r0, #0
10002c38:	d102      	bne.n	10002c40 <_ftoa+0x254>
10002c3a:	07eb      	lsls	r3, r5, #31
10002c3c:	d500      	bpl.n	10002c40 <_ftoa+0x254>
            ++whole;
10002c3e:	3501      	adds	r5, #1
    while (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
10002c40:	2c20      	cmp	r4, #32
10002c42:	d094      	beq.n	10002b6e <_ftoa+0x182>
        buf[len++] = (char) (48 + (whole % 10));
10002c44:	aa08      	add	r2, sp, #32
10002c46:	4694      	mov	ip, r2
10002c48:	2317      	movs	r3, #23
10002c4a:	0028      	movs	r0, r5
10002c4c:	4463      	add	r3, ip
10002c4e:	210a      	movs	r1, #10
10002c50:	3401      	adds	r4, #1
10002c52:	191e      	adds	r6, r3, r4
10002c54:	f7fd fb62 	bl	1000031c <__wrap___aeabi_idiv>
10002c58:	3130      	adds	r1, #48	; 0x30
        if (!(whole /= 10)) {
10002c5a:	0028      	movs	r0, r5
        buf[len++] = (char) (48 + (whole % 10));
10002c5c:	7031      	strb	r1, [r6, #0]
        if (!(whole /= 10)) {
10002c5e:	210a      	movs	r1, #10
10002c60:	f7fd fb5c 	bl	1000031c <__wrap___aeabi_idiv>
10002c64:	1e05      	subs	r5, r0, #0
10002c66:	d1eb      	bne.n	10002c40 <_ftoa+0x254>
    if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
10002c68:	2303      	movs	r3, #3
10002c6a:	9a24      	ldr	r2, [sp, #144]	; 0x90
10002c6c:	4013      	ands	r3, r2
10002c6e:	2b01      	cmp	r3, #1
10002c70:	d01b      	beq.n	10002caa <_ftoa+0x2be>
    if (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
10002c72:	2c20      	cmp	r4, #32
10002c74:	d100      	bne.n	10002c78 <_ftoa+0x28c>
10002c76:	e780      	b.n	10002b7a <_ftoa+0x18e>
        if (negative) {
10002c78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10002c7a:	2b00      	cmp	r3, #0
10002c7c:	d035      	beq.n	10002cea <_ftoa+0x2fe>
            buf[len++] = '-';
10002c7e:	222d      	movs	r2, #45	; 0x2d
10002c80:	4641      	mov	r1, r8
10002c82:	1c63      	adds	r3, r4, #1
10002c84:	550a      	strb	r2, [r1, r4]
10002c86:	e779      	b.n	10002b7c <_ftoa+0x190>
    } else if (diff < 0.5) {
10002c88:	2200      	movs	r2, #0
10002c8a:	980a      	ldr	r0, [sp, #40]	; 0x28
10002c8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
10002c8e:	4b34      	ldr	r3, [pc, #208]	; (10002d60 <_ftoa+0x374>)
10002c90:	f7fd fe2a 	bl	100008e8 <__wrap___aeabi_dcmplt>
10002c94:	2800      	cmp	r0, #0
10002c96:	d000      	beq.n	10002c9a <_ftoa+0x2ae>
10002c98:	e746      	b.n	10002b28 <_ftoa+0x13c>
    } else if ((frac == 0U) || (frac & 1U)) {
10002c9a:	4653      	mov	r3, sl
10002c9c:	2b00      	cmp	r3, #0
10002c9e:	d151      	bne.n	10002d44 <_ftoa+0x358>
        ++frac;
10002ca0:	2301      	movs	r3, #1
10002ca2:	469c      	mov	ip, r3
10002ca4:	44e2      	add	sl, ip
10002ca6:	e73f      	b.n	10002b28 <_ftoa+0x13c>
    if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
10002ca8:	2420      	movs	r4, #32
        if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
10002caa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
10002cac:	2b00      	cmp	r3, #0
10002cae:	d0e0      	beq.n	10002c72 <_ftoa+0x286>
10002cb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10002cb2:	2b00      	cmp	r3, #0
10002cb4:	d103      	bne.n	10002cbe <_ftoa+0x2d2>
10002cb6:	9a24      	ldr	r2, [sp, #144]	; 0x90
10002cb8:	330c      	adds	r3, #12
10002cba:	4213      	tst	r3, r2
10002cbc:	d002      	beq.n	10002cc4 <_ftoa+0x2d8>
            width--;
10002cbe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
10002cc0:	3b01      	subs	r3, #1
10002cc2:	9323      	str	r3, [sp, #140]	; 0x8c
        while ((len < width) && (len < PICO_PRINTF_FTOA_BUFFER_SIZE)) {
10002cc4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
10002cc6:	42a3      	cmp	r3, r4
10002cc8:	d9d3      	bls.n	10002c72 <_ftoa+0x286>
10002cca:	ab08      	add	r3, sp, #32
10002ccc:	469c      	mov	ip, r3
10002cce:	2217      	movs	r2, #23
            buf[len++] = '0';
10002cd0:	2330      	movs	r3, #48	; 0x30
10002cd2:	4462      	add	r2, ip
        while ((len < width) && (len < PICO_PRINTF_FTOA_BUFFER_SIZE)) {
10002cd4:	2c20      	cmp	r4, #32
10002cd6:	d100      	bne.n	10002cda <_ftoa+0x2ee>
10002cd8:	e74f      	b.n	10002b7a <_ftoa+0x18e>
10002cda:	9923      	ldr	r1, [sp, #140]	; 0x8c
            buf[len++] = '0';
10002cdc:	3401      	adds	r4, #1
10002cde:	5513      	strb	r3, [r2, r4]
        while ((len < width) && (len < PICO_PRINTF_FTOA_BUFFER_SIZE)) {
10002ce0:	428c      	cmp	r4, r1
10002ce2:	d0c6      	beq.n	10002c72 <_ftoa+0x286>
10002ce4:	2c20      	cmp	r4, #32
10002ce6:	d1f8      	bne.n	10002cda <_ftoa+0x2ee>
10002ce8:	e747      	b.n	10002b7a <_ftoa+0x18e>
        } else if (flags & FLAGS_PLUS) {
10002cea:	9b24      	ldr	r3, [sp, #144]	; 0x90
10002cec:	075b      	lsls	r3, r3, #29
10002cee:	d424      	bmi.n	10002d3a <_ftoa+0x34e>
        } else if (flags & FLAGS_SPACE) {
10002cf0:	9a24      	ldr	r2, [sp, #144]	; 0x90
10002cf2:	0023      	movs	r3, r4
10002cf4:	0712      	lsls	r2, r2, #28
10002cf6:	d400      	bmi.n	10002cfa <_ftoa+0x30e>
10002cf8:	e740      	b.n	10002b7c <_ftoa+0x190>
            buf[len++] = ' ';
10002cfa:	2220      	movs	r2, #32
10002cfc:	4641      	mov	r1, r8
10002cfe:	3301      	adds	r3, #1
10002d00:	550a      	strb	r2, [r1, r4]
10002d02:	e73b      	b.n	10002b7c <_ftoa+0x190>
        while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
10002d04:	4657      	mov	r7, sl
10002d06:	9d08      	ldr	r5, [sp, #32]
10002d08:	2c20      	cmp	r4, #32
10002d0a:	d100      	bne.n	10002d0e <_ftoa+0x322>
10002d0c:	e72d      	b.n	10002b6a <_ftoa+0x17e>
10002d0e:	0022      	movs	r2, r4
            buf[len++] = '0';
10002d10:	2130      	movs	r1, #48	; 0x30
10002d12:	4640      	mov	r0, r8
        while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
10002d14:	2f00      	cmp	r7, #0
10002d16:	d009      	beq.n	10002d2c <_ftoa+0x340>
            buf[len++] = '0';
10002d18:	3201      	adds	r2, #1
10002d1a:	54b1      	strb	r1, [r6, r2]
        while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
10002d1c:	2a20      	cmp	r2, #32
10002d1e:	d100      	bne.n	10002d22 <_ftoa+0x336>
10002d20:	e723      	b.n	10002b6a <_ftoa+0x17e>
10002d22:	43d3      	mvns	r3, r2
10002d24:	191b      	adds	r3, r3, r4
10002d26:	181b      	adds	r3, r3, r0
10002d28:	2b00      	cmp	r3, #0
10002d2a:	d1f5      	bne.n	10002d18 <_ftoa+0x32c>
            buf[len++] = '.';
10002d2c:	ab0e      	add	r3, sp, #56	; 0x38
10002d2e:	4698      	mov	r8, r3
10002d30:	232e      	movs	r3, #46	; 0x2e
10002d32:	4641      	mov	r1, r8
10002d34:	1c54      	adds	r4, r2, #1
10002d36:	548b      	strb	r3, [r1, r2]
10002d38:	e782      	b.n	10002c40 <_ftoa+0x254>
            buf[len++] = '+';  // ignore the space if the '+' exists
10002d3a:	222b      	movs	r2, #43	; 0x2b
10002d3c:	4641      	mov	r1, r8
10002d3e:	1c63      	adds	r3, r4, #1
10002d40:	550a      	strb	r2, [r1, r4]
10002d42:	e71b      	b.n	10002b7c <_ftoa+0x190>
    } else if ((frac == 0U) || (frac & 1U)) {
10002d44:	07db      	lsls	r3, r3, #31
10002d46:	d400      	bmi.n	10002d4a <_ftoa+0x35e>
10002d48:	e6ee      	b.n	10002b28 <_ftoa+0x13c>
10002d4a:	e7a9      	b.n	10002ca0 <_ftoa+0x2b4>
10002d4c:	ffefffff 	.word	0xffefffff
10002d50:	7fefffff 	.word	0x7fefffff
10002d54:	41cdcd65 	.word	0x41cdcd65
10002d58:	c1cdcd65 	.word	0xc1cdcd65
10002d5c:	10008f38 	.word	0x10008f38
10002d60:	3fe00000 	.word	0x3fe00000
10002d64:	10008d3c 	.word	0x10008d3c
10002d68:	10008d40 	.word	0x10008d40
10002d6c:	10008d4c 	.word	0x10008d4c
        return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
10002d70:	9b24      	ldr	r3, [sp, #144]	; 0x90
10002d72:	9303      	str	r3, [sp, #12]
10002d74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
10002d76:	9302      	str	r3, [sp, #8]
10002d78:	2303      	movs	r3, #3
10002d7a:	9301      	str	r3, [sp, #4]
10002d7c:	4b00      	ldr	r3, [pc, #0]	; (10002d80 <_ftoa+0x394>)
10002d7e:	e723      	b.n	10002bc8 <_ftoa+0x1dc>
10002d80:	10008d48 	.word	0x10008d48

10002d84 <_vsnprintf>:

#endif  // PICO_PRINTF_SUPPORT_EXPONENTIAL
#endif  // PICO_PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char *buffer, const size_t maxlen, const char *format, va_list va) {
10002d84:	b5f0      	push	{r4, r5, r6, r7, lr}
10002d86:	46de      	mov	lr, fp
10002d88:	464e      	mov	r6, r9
10002d8a:	4657      	mov	r7, sl
10002d8c:	4645      	mov	r5, r8
10002d8e:	b5e0      	push	{r5, r6, r7, lr}
10002d90:	b09f      	sub	sp, #124	; 0x7c
10002d92:	001c      	movs	r4, r3
10002d94:	9b28      	ldr	r3, [sp, #160]	; 0xa0
10002d96:	4691      	mov	r9, r2
10002d98:	9309      	str	r3, [sp, #36]	; 0x24
#if !PICO_PRINTF_ALWAYS_INCLUDED
    lazy_vsnprintf = _vsnprintf;
10002d9a:	4ac9      	ldr	r2, [pc, #804]	; (100030c0 <_vsnprintf+0x33c>)
10002d9c:	4bc9      	ldr	r3, [pc, #804]	; (100030c4 <_vsnprintf+0x340>)
static int _vsnprintf(out_fct_type out, char *buffer, const size_t maxlen, const char *format, va_list va) {
10002d9e:	468b      	mov	fp, r1
10002da0:	9008      	str	r0, [sp, #32]
    lazy_vsnprintf = _vsnprintf;
10002da2:	601a      	str	r2, [r3, #0]
#endif
    unsigned int flags, width, precision, n;
    size_t idx = 0U;

    if (!buffer) {
10002da4:	2900      	cmp	r1, #0
10002da6:	d100      	bne.n	10002daa <_vsnprintf+0x26>
10002da8:	e218      	b.n	100031dc <_vsnprintf+0x458>
        // use null output function
        out = _out_null;
    }

    while (*format) {
10002daa:	2300      	movs	r3, #0
10002dac:	7820      	ldrb	r0, [r4, #0]
10002dae:	469a      	mov	sl, r3
10002db0:	2800      	cmp	r0, #0
10002db2:	d100      	bne.n	10002db6 <_vsnprintf+0x32>
10002db4:	e21a      	b.n	100031ec <_vsnprintf+0x468>
10002db6:	0026      	movs	r6, r4
10002db8:	001d      	movs	r5, r3
10002dba:	465c      	mov	r4, fp
10002dbc:	e00a      	b.n	10002dd4 <_vsnprintf+0x50>
                out('%', buffer, idx++, maxlen);
                format++;
                break;

            default :
                out(*format, buffer, idx++, maxlen);
10002dbe:	002a      	movs	r2, r5
10002dc0:	1c6f      	adds	r7, r5, #1
10002dc2:	464b      	mov	r3, r9
10002dc4:	9d08      	ldr	r5, [sp, #32]
10002dc6:	0021      	movs	r1, r4
10002dc8:	47a8      	blx	r5
10002dca:	003d      	movs	r5, r7
                format++;
10002dcc:	3601      	adds	r6, #1
    while (*format) {
10002dce:	7830      	ldrb	r0, [r6, #0]
10002dd0:	2800      	cmp	r0, #0
10002dd2:	d070      	beq.n	10002eb6 <_vsnprintf+0x132>
        if (*format != '%') {
10002dd4:	2825      	cmp	r0, #37	; 0x25
10002dd6:	d1f2      	bne.n	10002dbe <_vsnprintf+0x3a>
                    flags |= FLAGS_HASH;
10002dd8:	2310      	movs	r3, #16
10002dda:	469b      	mov	fp, r3
                    flags |= FLAGS_SPACE;
10002ddc:	3b08      	subs	r3, #8
10002dde:	469a      	mov	sl, r3
                    flags |= FLAGS_PLUS;
10002de0:	3b04      	subs	r3, #4
10002de2:	4698      	mov	r8, r3
                    flags |= FLAGS_LEFT;
10002de4:	3b02      	subs	r3, #2
        flags = 0U;
10002de6:	2100      	movs	r1, #0
                    flags |= FLAGS_LEFT;
10002de8:	469c      	mov	ip, r3
            format++;
10002dea:	1c72      	adds	r2, r6, #1
            switch (*format) {
10002dec:	7810      	ldrb	r0, [r2, #0]
10002dee:	0016      	movs	r6, r2
10002df0:	0003      	movs	r3, r0
10002df2:	3b20      	subs	r3, #32
10002df4:	b2db      	uxtb	r3, r3
10002df6:	2b10      	cmp	r3, #16
10002df8:	d803      	bhi.n	10002e02 <_vsnprintf+0x7e>
10002dfa:	4fb3      	ldr	r7, [pc, #716]	; (100030c8 <_vsnprintf+0x344>)
10002dfc:	009b      	lsls	r3, r3, #2
10002dfe:	58fb      	ldr	r3, [r7, r3]
10002e00:	469f      	mov	pc, r3
        if (_is_digit(*format)) {
10002e02:	0003      	movs	r3, r0
10002e04:	3b30      	subs	r3, #48	; 0x30
10002e06:	2b09      	cmp	r3, #9
10002e08:	d932      	bls.n	10002e70 <_vsnprintf+0xec>
        width = 0U;
10002e0a:	2300      	movs	r3, #0
10002e0c:	930a      	str	r3, [sp, #40]	; 0x28
        } else if (*format == '*') {
10002e0e:	282a      	cmp	r0, #42	; 0x2a
10002e10:	d068      	beq.n	10002ee4 <_vsnprintf+0x160>
        precision = 0U;
10002e12:	2300      	movs	r3, #0
10002e14:	4698      	mov	r8, r3
        if (*format == '.') {
10002e16:	282e      	cmp	r0, #46	; 0x2e
10002e18:	d03e      	beq.n	10002e98 <_vsnprintf+0x114>
        switch (*format) {
10002e1a:	0003      	movs	r3, r0
10002e1c:	3b68      	subs	r3, #104	; 0x68
10002e1e:	b2db      	uxtb	r3, r3
10002e20:	2b12      	cmp	r3, #18
10002e22:	d81c      	bhi.n	10002e5e <_vsnprintf+0xda>
10002e24:	4aa9      	ldr	r2, [pc, #676]	; (100030cc <_vsnprintf+0x348>)
10002e26:	009b      	lsls	r3, r3, #2
10002e28:	58d3      	ldr	r3, [r2, r3]
10002e2a:	469f      	mov	pc, r3
                    flags |= FLAGS_ZEROPAD;
10002e2c:	2301      	movs	r3, #1
10002e2e:	3201      	adds	r2, #1
10002e30:	4319      	orrs	r1, r3
        } while (n);
10002e32:	e7db      	b.n	10002dec <_vsnprintf+0x68>
                    flags |= FLAGS_LEFT;
10002e34:	4663      	mov	r3, ip
10002e36:	3201      	adds	r2, #1
10002e38:	4319      	orrs	r1, r3
        } while (n);
10002e3a:	e7d7      	b.n	10002dec <_vsnprintf+0x68>
                    flags |= FLAGS_PLUS;
10002e3c:	4643      	mov	r3, r8
10002e3e:	3201      	adds	r2, #1
10002e40:	4319      	orrs	r1, r3
        } while (n);
10002e42:	e7d3      	b.n	10002dec <_vsnprintf+0x68>
                    flags |= FLAGS_HASH;
10002e44:	465b      	mov	r3, fp
10002e46:	3201      	adds	r2, #1
10002e48:	4319      	orrs	r1, r3
        } while (n);
10002e4a:	e7cf      	b.n	10002dec <_vsnprintf+0x68>
                    flags |= FLAGS_SPACE;
10002e4c:	4653      	mov	r3, sl
10002e4e:	3201      	adds	r2, #1
10002e50:	4319      	orrs	r1, r3
        } while (n);
10002e52:	e7cb      	b.n	10002dec <_vsnprintf+0x68>
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
10002e54:	2380      	movs	r3, #128	; 0x80
10002e56:	005b      	lsls	r3, r3, #1
        switch (*format) {
10002e58:	7870      	ldrb	r0, [r6, #1]
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
10002e5a:	4319      	orrs	r1, r3
                format++;
10002e5c:	3601      	adds	r6, #1
        switch (*format) {
10002e5e:	0003      	movs	r3, r0
10002e60:	3b25      	subs	r3, #37	; 0x25
10002e62:	b2db      	uxtb	r3, r3
10002e64:	2b53      	cmp	r3, #83	; 0x53
10002e66:	d8aa      	bhi.n	10002dbe <_vsnprintf+0x3a>
10002e68:	4a99      	ldr	r2, [pc, #612]	; (100030d0 <_vsnprintf+0x34c>)
10002e6a:	009b      	lsls	r3, r3, #2
10002e6c:	58d3      	ldr	r3, [r2, r3]
10002e6e:	469f      	mov	pc, r3
    unsigned int i = 0U;
10002e70:	2700      	movs	r7, #0
10002e72:	0003      	movs	r3, r0
        i = i * 10U + (unsigned int) (*((*str)++) - '0');
10002e74:	00b8      	lsls	r0, r7, #2
10002e76:	19c0      	adds	r0, r0, r7
10002e78:	3601      	adds	r6, #1
10002e7a:	0040      	lsls	r0, r0, #1
10002e7c:	18c0      	adds	r0, r0, r3
    while (_is_digit(**str)) {
10002e7e:	7833      	ldrb	r3, [r6, #0]
        i = i * 10U + (unsigned int) (*((*str)++) - '0');
10002e80:	3830      	subs	r0, #48	; 0x30
    while (_is_digit(**str)) {
10002e82:	001a      	movs	r2, r3
10002e84:	3a30      	subs	r2, #48	; 0x30
        i = i * 10U + (unsigned int) (*((*str)++) - '0');
10002e86:	0007      	movs	r7, r0
    while (_is_digit(**str)) {
10002e88:	2a09      	cmp	r2, #9
10002e8a:	d9f3      	bls.n	10002e74 <_vsnprintf+0xf0>
10002e8c:	900a      	str	r0, [sp, #40]	; 0x28
10002e8e:	0018      	movs	r0, r3
        precision = 0U;
10002e90:	2300      	movs	r3, #0
10002e92:	4698      	mov	r8, r3
        if (*format == '.') {
10002e94:	282e      	cmp	r0, #46	; 0x2e
10002e96:	d1c0      	bne.n	10002e1a <_vsnprintf+0x96>
            flags |= FLAGS_PRECISION;
10002e98:	2380      	movs	r3, #128	; 0x80
            if (_is_digit(*format)) {
10002e9a:	7870      	ldrb	r0, [r6, #1]
            flags |= FLAGS_PRECISION;
10002e9c:	00db      	lsls	r3, r3, #3
10002e9e:	4319      	orrs	r1, r3
            if (_is_digit(*format)) {
10002ea0:	0003      	movs	r3, r0
10002ea2:	3b30      	subs	r3, #48	; 0x30
            format++;
10002ea4:	1c72      	adds	r2, r6, #1
            if (_is_digit(*format)) {
10002ea6:	2b09      	cmp	r3, #9
10002ea8:	d800      	bhi.n	10002eac <_vsnprintf+0x128>
10002eaa:	e1a1      	b.n	100031f0 <_vsnprintf+0x46c>
            } else if (*format == '*') {
10002eac:	282a      	cmp	r0, #42	; 0x2a
10002eae:	d100      	bne.n	10002eb2 <_vsnprintf+0x12e>
10002eb0:	e1b2      	b.n	10003218 <_vsnprintf+0x494>
            format++;
10002eb2:	0016      	movs	r6, r2
10002eb4:	e7b1      	b.n	10002e1a <_vsnprintf+0x96>

    // termination
    out((char) 0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);

    // return written chars without terminating \0
    return (int) idx;
10002eb6:	46a3      	mov	fp, r4
10002eb8:	46aa      	mov	sl, r5
10002eba:	002c      	movs	r4, r5
    out((char) 0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
10002ebc:	45d1      	cmp	r9, sl
10002ebe:	d803      	bhi.n	10002ec8 <_vsnprintf+0x144>
10002ec0:	2301      	movs	r3, #1
10002ec2:	425b      	negs	r3, r3
10002ec4:	444b      	add	r3, r9
10002ec6:	469a      	mov	sl, r3
10002ec8:	464b      	mov	r3, r9
10002eca:	4652      	mov	r2, sl
10002ecc:	4659      	mov	r1, fp
10002ece:	2000      	movs	r0, #0
10002ed0:	9d08      	ldr	r5, [sp, #32]
10002ed2:	47a8      	blx	r5
}
10002ed4:	0020      	movs	r0, r4
10002ed6:	b01f      	add	sp, #124	; 0x7c
10002ed8:	bcf0      	pop	{r4, r5, r6, r7}
10002eda:	46bb      	mov	fp, r7
10002edc:	46b2      	mov	sl, r6
10002ede:	46a9      	mov	r9, r5
10002ee0:	46a0      	mov	r8, r4
10002ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            const int w = va_arg(va, int);
10002ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
10002ee6:	cb40      	ldmia	r3!, {r6}
10002ee8:	960a      	str	r6, [sp, #40]	; 0x28
            if (w < 0) {
10002eea:	2e00      	cmp	r6, #0
10002eec:	db03      	blt.n	10002ef6 <_vsnprintf+0x172>
        if (*format == '.') {
10002eee:	7850      	ldrb	r0, [r2, #1]
            const int w = va_arg(va, int);
10002ef0:	9309      	str	r3, [sp, #36]	; 0x24
            format++;
10002ef2:	1c56      	adds	r6, r2, #1
10002ef4:	e78d      	b.n	10002e12 <_vsnprintf+0x8e>
                flags |= FLAGS_LEFT;    // reverse padding
10002ef6:	3828      	subs	r0, #40	; 0x28
10002ef8:	4301      	orrs	r1, r0
                width = (unsigned int) -w;
10002efa:	4270      	negs	r0, r6
10002efc:	900a      	str	r0, [sp, #40]	; 0x28
            const int w = va_arg(va, int);
10002efe:	9309      	str	r3, [sp, #36]	; 0x24
        if (*format == '.') {
10002f00:	7850      	ldrb	r0, [r2, #1]
            format++;
10002f02:	1c56      	adds	r6, r2, #1
10002f04:	e785      	b.n	10002e12 <_vsnprintf+0x8e>
                if (*format == 'x' || *format == 'X') {
10002f06:	2878      	cmp	r0, #120	; 0x78
10002f08:	d100      	bne.n	10002f0c <_vsnprintf+0x188>
10002f0a:	e1df      	b.n	100032cc <_vsnprintf+0x548>
10002f0c:	2858      	cmp	r0, #88	; 0x58
10002f0e:	d100      	bne.n	10002f12 <_vsnprintf+0x18e>
10002f10:	e24c      	b.n	100033ac <_vsnprintf+0x628>
                } else if (*format == 'o') {
10002f12:	286f      	cmp	r0, #111	; 0x6f
10002f14:	d100      	bne.n	10002f18 <_vsnprintf+0x194>
10002f16:	e34f      	b.n	100035b8 <_vsnprintf+0x834>
                } else if (*format == 'b') {
10002f18:	2862      	cmp	r0, #98	; 0x62
10002f1a:	d101      	bne.n	10002f20 <_vsnprintf+0x19c>
10002f1c:	f000 fc30 	bl	10003780 <_vsnprintf+0x9fc>
                    flags &= ~FLAGS_HASH;   // no hash for dec format
10002f20:	2310      	movs	r3, #16
10002f22:	000a      	movs	r2, r1
10002f24:	439a      	bics	r2, r3
10002f26:	920b      	str	r2, [sp, #44]	; 0x2c
                if ((*format != 'i') && (*format != 'd')) {
10002f28:	2869      	cmp	r0, #105	; 0x69
10002f2a:	d001      	beq.n	10002f30 <_vsnprintf+0x1ac>
10002f2c:	f000 fca9 	bl	10003882 <_vsnprintf+0xafe>
                    base = 10U;
10002f30:	230a      	movs	r3, #10
10002f32:	930c      	str	r3, [sp, #48]	; 0x30
                if (flags & FLAGS_PRECISION) {
10002f34:	054b      	lsls	r3, r1, #21
10002f36:	d500      	bpl.n	10002f3a <_vsnprintf+0x1b6>
10002f38:	e1d0      	b.n	100032dc <_vsnprintf+0x558>
                    if (flags & FLAGS_LONG_LONG) {
10002f3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10002f3c:	2380      	movs	r3, #128	; 0x80
10002f3e:	0011      	movs	r1, r2
10002f40:	009b      	lsls	r3, r3, #2
10002f42:	4019      	ands	r1, r3
10002f44:	468b      	mov	fp, r1
10002f46:	421a      	tst	r2, r3
10002f48:	d000      	beq.n	10002f4c <_vsnprintf+0x1c8>
10002f4a:	e2a1      	b.n	10003490 <_vsnprintf+0x70c>
                    } else if (flags & FLAGS_LONG) {
10002f4c:	2380      	movs	r3, #128	; 0x80
10002f4e:	0011      	movs	r1, r2
10002f50:	005b      	lsls	r3, r3, #1
10002f52:	4019      	ands	r1, r3
10002f54:	468a      	mov	sl, r1
10002f56:	421a      	tst	r2, r3
10002f58:	d000      	beq.n	10002f5c <_vsnprintf+0x1d8>
10002f5a:	e3b6      	b.n	100036ca <_vsnprintf+0x946>
10002f5c:	0013      	movs	r3, r2
                        const int value = (flags & FLAGS_CHAR) ? (char) va_arg(va, int) : (flags & FLAGS_SHORT)
10002f5e:	065b      	lsls	r3, r3, #25
10002f60:	d500      	bpl.n	10002f64 <_vsnprintf+0x1e0>
10002f62:	e2ed      	b.n	10003540 <_vsnprintf+0x7bc>
10002f64:	0013      	movs	r3, r2
                                                                                          ? (short int) va_arg(va, int)
10002f66:	9909      	ldr	r1, [sp, #36]	; 0x24
                                                                                          : va_arg(va, int);
10002f68:	061b      	lsls	r3, r3, #24
10002f6a:	d401      	bmi.n	10002f70 <_vsnprintf+0x1ec>
10002f6c:	f000 fc76 	bl	1000385c <_vsnprintf+0xad8>
                                                                                          ? (short int) va_arg(va, int)
10002f70:	c908      	ldmia	r1!, {r3}
                                                                                          : va_arg(va, int);
10002f72:	b21b      	sxth	r3, r3
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int) (value > 0 ? value : 0 - value),
10002f74:	17d8      	asrs	r0, r3, #31
10002f76:	181a      	adds	r2, r3, r0
10002f78:	4042      	eors	r2, r0
10002f7a:	b292      	uxth	r2, r2
                                                                                          ? (short int) va_arg(va, int)
10002f7c:	9109      	str	r1, [sp, #36]	; 0x24
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int) (value > 0 ? value : 0 - value),
10002f7e:	4693      	mov	fp, r2
10002f80:	0fda      	lsrs	r2, r3, #31
10002f82:	9212      	str	r2, [sp, #72]	; 0x48
    if (!value) {
10002f84:	2b00      	cmp	r3, #0
10002f86:	d109      	bne.n	10002f9c <_vsnprintf+0x218>
    if (!(flags & FLAGS_PRECISION) || value) {
10002f88:	2380      	movs	r3, #128	; 0x80
        flags &= ~FLAGS_HASH;
10002f8a:	2210      	movs	r2, #16
    if (!(flags & FLAGS_PRECISION) || value) {
10002f8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
10002f8e:	00db      	lsls	r3, r3, #3
10002f90:	400b      	ands	r3, r1
        flags &= ~FLAGS_HASH;
10002f92:	4391      	bics	r1, r2
10002f94:	910b      	str	r1, [sp, #44]	; 0x2c
    if (!(flags & FLAGS_PRECISION) || value) {
10002f96:	2b00      	cmp	r3, #0
10002f98:	d000      	beq.n	10002f9c <_vsnprintf+0x218>
10002f9a:	e2e4      	b.n	10003566 <_vsnprintf+0x7e2>
10002f9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10002f9e:	2361      	movs	r3, #97	; 0x61
10002fa0:	0692      	lsls	r2, r2, #26
10002fa2:	d500      	bpl.n	10002fa6 <_vsnprintf+0x222>
10002fa4:	2341      	movs	r3, #65	; 0x41
10002fa6:	a90e      	add	r1, sp, #56	; 0x38
10002fa8:	221f      	movs	r2, #31
10002faa:	468c      	mov	ip, r1
10002fac:	b2db      	uxtb	r3, r3
10002fae:	4462      	add	r2, ip
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
10002fb0:	3b0a      	subs	r3, #10
10002fb2:	465f      	mov	r7, fp
10002fb4:	9513      	str	r5, [sp, #76]	; 0x4c
10002fb6:	46a3      	mov	fp, r4
10002fb8:	4655      	mov	r5, sl
10002fba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
10002fbc:	46b2      	mov	sl, r6
10002fbe:	930d      	str	r3, [sp, #52]	; 0x34
10002fc0:	0016      	movs	r6, r2
10002fc2:	e00a      	b.n	10002fda <_vsnprintf+0x256>
10002fc4:	3330      	adds	r3, #48	; 0x30
10002fc6:	b2db      	uxtb	r3, r3
10002fc8:	3501      	adds	r5, #1
10002fca:	5573      	strb	r3, [r6, r5]
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
10002fcc:	42a7      	cmp	r7, r4
10002fce:	d200      	bcs.n	10002fd2 <_vsnprintf+0x24e>
10002fd0:	e2ed      	b.n	100035ae <_vsnprintf+0x82a>
10002fd2:	2d20      	cmp	r5, #32
10002fd4:	d100      	bne.n	10002fd8 <_vsnprintf+0x254>
10002fd6:	e2ea      	b.n	100035ae <_vsnprintf+0x82a>
            value /= base;
10002fd8:	0007      	movs	r7, r0
            const char digit = (char) (value % base);
10002fda:	0021      	movs	r1, r4
10002fdc:	0038      	movs	r0, r7
10002fde:	f7fd f9c9 	bl	10000374 <__wrap___aeabi_uidiv>
10002fe2:	b2cb      	uxtb	r3, r1
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
10002fe4:	2909      	cmp	r1, #9
10002fe6:	d9ed      	bls.n	10002fc4 <_vsnprintf+0x240>
10002fe8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10002fea:	4694      	mov	ip, r2
10002fec:	4463      	add	r3, ip
10002fee:	b2db      	uxtb	r3, r3
10002ff0:	e7ea      	b.n	10002fc8 <_vsnprintf+0x244>
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
10002ff2:	2380      	movs	r3, #128	; 0x80
10002ff4:	009b      	lsls	r3, r3, #2
        switch (*format) {
10002ff6:	7870      	ldrb	r0, [r6, #1]
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
10002ff8:	4319      	orrs	r1, r3
                format++;
10002ffa:	3601      	adds	r6, #1
                break;
10002ffc:	e72f      	b.n	10002e5e <_vsnprintf+0xda>
                if (*format == 'h') {
10002ffe:	7870      	ldrb	r0, [r6, #1]
10003000:	2868      	cmp	r0, #104	; 0x68
10003002:	d100      	bne.n	10003006 <_vsnprintf+0x282>
10003004:	e1cd      	b.n	100033a2 <_vsnprintf+0x61e>
                flags |= FLAGS_SHORT;
10003006:	2380      	movs	r3, #128	; 0x80
                format++;
10003008:	3601      	adds	r6, #1
                flags |= FLAGS_SHORT;
1000300a:	4319      	orrs	r1, r3
1000300c:	e727      	b.n	10002e5e <_vsnprintf+0xda>
                if (*format == 'l') {
1000300e:	7870      	ldrb	r0, [r6, #1]
10003010:	286c      	cmp	r0, #108	; 0x6c
10003012:	d100      	bne.n	10003016 <_vsnprintf+0x292>
10003014:	e1bf      	b.n	10003396 <_vsnprintf+0x612>
                flags |= FLAGS_LONG;
10003016:	2380      	movs	r3, #128	; 0x80
10003018:	005b      	lsls	r3, r3, #1
1000301a:	4319      	orrs	r1, r3
                format++;
1000301c:	3601      	adds	r6, #1
1000301e:	e71e      	b.n	10002e5e <_vsnprintf+0xda>
                if (*format == 'F') flags |= FLAGS_UPPERCASE;
10003020:	2846      	cmp	r0, #70	; 0x46
10003022:	d100      	bne.n	10003026 <_vsnprintf+0x2a2>
10003024:	e19b      	b.n	1000335e <_vsnprintf+0x5da>
                idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
10003026:	2207      	movs	r2, #7
10003028:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000302a:	9104      	str	r1, [sp, #16]
1000302c:	3307      	adds	r3, #7
1000302e:	4393      	bics	r3, r2
10003030:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10003032:	0019      	movs	r1, r3
10003034:	9203      	str	r2, [sp, #12]
10003036:	4642      	mov	r2, r8
10003038:	9202      	str	r2, [sp, #8]
1000303a:	c90c      	ldmia	r1!, {r2, r3}
1000303c:	9808      	ldr	r0, [sp, #32]
1000303e:	9200      	str	r2, [sp, #0]
10003040:	9301      	str	r3, [sp, #4]
10003042:	9109      	str	r1, [sp, #36]	; 0x24
10003044:	002a      	movs	r2, r5
10003046:	464b      	mov	r3, r9
10003048:	0021      	movs	r1, r4
1000304a:	f7ff fccf 	bl	100029ec <_ftoa>
                format++;
1000304e:	3601      	adds	r6, #1
                idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
10003050:	0005      	movs	r5, r0
                break;
10003052:	e6bc      	b.n	10002dce <_vsnprintf+0x4a>
                out('%', buffer, idx++, maxlen);
10003054:	002a      	movs	r2, r5
10003056:	1c6f      	adds	r7, r5, #1
10003058:	464b      	mov	r3, r9
1000305a:	9d08      	ldr	r5, [sp, #32]
1000305c:	0021      	movs	r1, r4
1000305e:	2025      	movs	r0, #37	; 0x25
10003060:	47a8      	blx	r5
                format++;
10003062:	3601      	adds	r6, #1
                out('%', buffer, idx++, maxlen);
10003064:	003d      	movs	r5, r7
                break;
10003066:	e6b2      	b.n	10002dce <_vsnprintf+0x4a>
                if (!(flags & FLAGS_LEFT)) {
10003068:	078b      	lsls	r3, r1, #30
1000306a:	d400      	bmi.n	1000306e <_vsnprintf+0x2ea>
1000306c:	e1ad      	b.n	100033ca <_vsnprintf+0x646>
                out((char) va_arg(va, int), buffer, idx++, maxlen);
1000306e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10003070:	002a      	movs	r2, r5
10003072:	469a      	mov	sl, r3
10003074:	1c6b      	adds	r3, r5, #1
10003076:	4698      	mov	r8, r3
10003078:	4653      	mov	r3, sl
1000307a:	cb01      	ldmia	r3!, {r0}
1000307c:	0021      	movs	r1, r4
1000307e:	469a      	mov	sl, r3
10003080:	9f08      	ldr	r7, [sp, #32]
10003082:	464b      	mov	r3, r9
10003084:	b2c0      	uxtb	r0, r0
10003086:	47b8      	blx	r7
                    while (l++ < width) {
10003088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000308a:	469c      	mov	ip, r3
1000308c:	4465      	add	r5, ip
1000308e:	2b01      	cmp	r3, #1
10003090:	d800      	bhi.n	10003094 <_vsnprintf+0x310>
10003092:	e286      	b.n	100035a2 <_vsnprintf+0x81e>
10003094:	9b08      	ldr	r3, [sp, #32]
10003096:	4647      	mov	r7, r8
10003098:	46b0      	mov	r8, r6
1000309a:	0026      	movs	r6, r4
1000309c:	464c      	mov	r4, r9
1000309e:	4699      	mov	r9, r3
                        out(' ', buffer, idx++, maxlen);
100030a0:	003a      	movs	r2, r7
100030a2:	0023      	movs	r3, r4
100030a4:	3701      	adds	r7, #1
100030a6:	0031      	movs	r1, r6
100030a8:	2020      	movs	r0, #32
100030aa:	47c8      	blx	r9
                    while (l++ < width) {
100030ac:	42af      	cmp	r7, r5
100030ae:	d1f7      	bne.n	100030a0 <_vsnprintf+0x31c>
                out((char) va_arg(va, int), buffer, idx++, maxlen);
100030b0:	46a1      	mov	r9, r4
100030b2:	4653      	mov	r3, sl
100030b4:	0034      	movs	r4, r6
100030b6:	4646      	mov	r6, r8
100030b8:	9309      	str	r3, [sp, #36]	; 0x24
                format++;
100030ba:	3601      	adds	r6, #1
                break;
100030bc:	e687      	b.n	10002dce <_vsnprintf+0x4a>
100030be:	46c0      	nop			; (mov r8, r8)
100030c0:	10002d85 	.word	0x10002d85
100030c4:	20023b44 	.word	0x20023b44
100030c8:	10008d54 	.word	0x10008d54
100030cc:	10008d98 	.word	0x10008d98
100030d0:	10008de4 	.word	0x10008de4
                const char *p = va_arg(va, char*);
100030d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
100030d6:	cb04      	ldmia	r3!, {r2}
100030d8:	469b      	mov	fp, r3
                unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
100030da:	4643      	mov	r3, r8
                const char *p = va_arg(va, char*);
100030dc:	9209      	str	r2, [sp, #36]	; 0x24
                unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
100030de:	2b00      	cmp	r3, #0
100030e0:	d100      	bne.n	100030e4 <_vsnprintf+0x360>
100030e2:	e0c6      	b.n	10003272 <_vsnprintf+0x4ee>
    for (s = str; *s && maxsize--; ++s);
100030e4:	7813      	ldrb	r3, [r2, #0]
100030e6:	469c      	mov	ip, r3
100030e8:	2b00      	cmp	r3, #0
100030ea:	d100      	bne.n	100030ee <_vsnprintf+0x36a>
100030ec:	e3bd      	b.n	1000386a <_vsnprintf+0xae6>
100030ee:	4643      	mov	r3, r8
100030f0:	3b01      	subs	r3, #1
100030f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
100030f4:	3301      	adds	r3, #1
100030f6:	18d0      	adds	r0, r2, r3
                const char *p = va_arg(va, char*);
100030f8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
100030fa:	0013      	movs	r3, r2
100030fc:	e001      	b.n	10003102 <_vsnprintf+0x37e>
    for (s = str; *s && maxsize--; ++s);
100030fe:	4283      	cmp	r3, r0
10003100:	d003      	beq.n	1000310a <_vsnprintf+0x386>
10003102:	785a      	ldrb	r2, [r3, #1]
10003104:	3301      	adds	r3, #1
10003106:	2a00      	cmp	r2, #0
10003108:	d1f9      	bne.n	100030fe <_vsnprintf+0x37a>
    return (unsigned int) (s - str);
1000310a:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000310c:	970a      	str	r7, [sp, #40]	; 0x28
1000310e:	1a9b      	subs	r3, r3, r2
10003110:	930b      	str	r3, [sp, #44]	; 0x2c
                if (flags & FLAGS_PRECISION) {
10003112:	2380      	movs	r3, #128	; 0x80
10003114:	000a      	movs	r2, r1
10003116:	00db      	lsls	r3, r3, #3
10003118:	401a      	ands	r2, r3
1000311a:	920c      	str	r2, [sp, #48]	; 0x30
1000311c:	4219      	tst	r1, r3
1000311e:	d004      	beq.n	1000312a <_vsnprintf+0x3a6>
                    l = (l < precision ? l : precision);
10003120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10003122:	4543      	cmp	r3, r8
10003124:	d901      	bls.n	1000312a <_vsnprintf+0x3a6>
10003126:	4643      	mov	r3, r8
10003128:	930b      	str	r3, [sp, #44]	; 0x2c
                if (!(flags & FLAGS_LEFT)) {
1000312a:	2302      	movs	r3, #2
1000312c:	001a      	movs	r2, r3
1000312e:	400a      	ands	r2, r1
10003130:	920d      	str	r2, [sp, #52]	; 0x34
10003132:	420b      	tst	r3, r1
10003134:	d100      	bne.n	10003138 <_vsnprintf+0x3b4>
10003136:	e187      	b.n	10003448 <_vsnprintf+0x6c4>
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
10003138:	4660      	mov	r0, ip
1000313a:	2800      	cmp	r0, #0
1000313c:	d100      	bne.n	10003140 <_vsnprintf+0x3bc>
1000313e:	e168      	b.n	10003412 <_vsnprintf+0x68e>
10003140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10003142:	2b00      	cmp	r3, #0
10003144:	d100      	bne.n	10003148 <_vsnprintf+0x3c4>
10003146:	e10d      	b.n	10003364 <_vsnprintf+0x5e0>
10003148:	44a8      	add	r8, r5
1000314a:	46c2      	mov	sl, r8
1000314c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000314e:	4657      	mov	r7, sl
10003150:	1b5b      	subs	r3, r3, r5
10003152:	4698      	mov	r8, r3
10003154:	9b08      	ldr	r3, [sp, #32]
10003156:	46b2      	mov	sl, r6
    for (s = str; *s && maxsize--; ++s);
10003158:	002a      	movs	r2, r5
1000315a:	0026      	movs	r6, r4
1000315c:	464c      	mov	r4, r9
1000315e:	4699      	mov	r9, r3
10003160:	e009      	b.n	10003176 <_vsnprintf+0x3f2>
                    out(*(p++), buffer, idx++, maxlen);
10003162:	0023      	movs	r3, r4
10003164:	0031      	movs	r1, r6
10003166:	1c55      	adds	r5, r2, #1
10003168:	47c8      	blx	r9
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
1000316a:	4643      	mov	r3, r8
1000316c:	5d58      	ldrb	r0, [r3, r5]
1000316e:	2800      	cmp	r0, #0
10003170:	d100      	bne.n	10003174 <_vsnprintf+0x3f0>
10003172:	e126      	b.n	100033c2 <_vsnprintf+0x63e>
                    out(*(p++), buffer, idx++, maxlen);
10003174:	002a      	movs	r2, r5
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
10003176:	4297      	cmp	r7, r2
10003178:	d1f3      	bne.n	10003162 <_vsnprintf+0x3de>
1000317a:	46a1      	mov	r9, r4
1000317c:	003d      	movs	r5, r7
1000317e:	0034      	movs	r4, r6
10003180:	4656      	mov	r6, sl
                if (flags & FLAGS_LEFT) {
10003182:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10003184:	2b00      	cmp	r3, #0
10003186:	d000      	beq.n	1000318a <_vsnprintf+0x406>
10003188:	e143      	b.n	10003412 <_vsnprintf+0x68e>
                const char *p = va_arg(va, char*);
1000318a:	465b      	mov	r3, fp
                format++;
1000318c:	3601      	adds	r6, #1
                const char *p = va_arg(va, char*);
1000318e:	9309      	str	r3, [sp, #36]	; 0x24
                break;
10003190:	e61d      	b.n	10002dce <_vsnprintf+0x4a>
                    idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long) ((uintptr_t) va_arg(va, void*)), false,
10003192:	9b09      	ldr	r3, [sp, #36]	; 0x24
10003194:	001a      	movs	r2, r3
10003196:	ca08      	ldmia	r2!, {r3}
10003198:	4692      	mov	sl, r2
    if (!value) {
1000319a:	2b00      	cmp	r3, #0
1000319c:	d048      	beq.n	10003230 <_vsnprintf+0x4ac>
                flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
1000319e:	2221      	movs	r2, #33	; 0x21
100031a0:	4311      	orrs	r1, r2
100031a2:	468b      	mov	fp, r1
100031a4:	a80e      	add	r0, sp, #56	; 0x38
100031a6:	4684      	mov	ip, r0
100031a8:	211f      	movs	r1, #31
100031aa:	4461      	add	r1, ip
100031ac:	9509      	str	r5, [sp, #36]	; 0x24
                    while (l++ < width) {
100031ae:	2200      	movs	r2, #0
            const char digit = (char) (value % base);
100031b0:	270f      	movs	r7, #15
100031b2:	46a4      	mov	ip, r4
100031b4:	000d      	movs	r5, r1
100031b6:	e002      	b.n	100031be <_vsnprintf+0x43a>
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
100031b8:	2a20      	cmp	r2, #32
100031ba:	d00c      	beq.n	100031d6 <_vsnprintf+0x452>
            value /= base;
100031bc:	000b      	movs	r3, r1
            const char digit = (char) (value % base);
100031be:	003c      	movs	r4, r7
100031c0:	401c      	ands	r4, r3
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
100031c2:	0020      	movs	r0, r4
100031c4:	3037      	adds	r0, #55	; 0x37
100031c6:	2c09      	cmp	r4, #9
100031c8:	d800      	bhi.n	100031cc <_vsnprintf+0x448>
100031ca:	3807      	subs	r0, #7
100031cc:	3201      	adds	r2, #1
100031ce:	54a8      	strb	r0, [r5, r2]
            value /= base;
100031d0:	0919      	lsrs	r1, r3, #4
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
100031d2:	2b0f      	cmp	r3, #15
100031d4:	d8f0      	bhi.n	100031b8 <_vsnprintf+0x434>
100031d6:	4664      	mov	r4, ip
100031d8:	9d09      	ldr	r5, [sp, #36]	; 0x24
100031da:	e032      	b.n	10003242 <_vsnprintf+0x4be>
        out = _out_null;
100031dc:	4bdc      	ldr	r3, [pc, #880]	; (10003550 <_vsnprintf+0x7cc>)
    while (*format) {
100031de:	7820      	ldrb	r0, [r4, #0]
        out = _out_null;
100031e0:	9308      	str	r3, [sp, #32]
    while (*format) {
100031e2:	2300      	movs	r3, #0
100031e4:	469a      	mov	sl, r3
100031e6:	2800      	cmp	r0, #0
100031e8:	d000      	beq.n	100031ec <_vsnprintf+0x468>
100031ea:	e5e4      	b.n	10002db6 <_vsnprintf+0x32>
100031ec:	2400      	movs	r4, #0
100031ee:	e665      	b.n	10002ebc <_vsnprintf+0x138>
100031f0:	4643      	mov	r3, r8
100031f2:	0006      	movs	r6, r0
100031f4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
        i = i * 10U + (unsigned int) (*((*str)++) - '0');
100031f6:	0098      	lsls	r0, r3, #2
100031f8:	18c0      	adds	r0, r0, r3
100031fa:	3201      	adds	r2, #1
100031fc:	0040      	lsls	r0, r0, #1
100031fe:	1980      	adds	r0, r0, r6
    while (_is_digit(**str)) {
10003200:	7816      	ldrb	r6, [r2, #0]
        i = i * 10U + (unsigned int) (*((*str)++) - '0');
10003202:	0003      	movs	r3, r0
    while (_is_digit(**str)) {
10003204:	0030      	movs	r0, r6
10003206:	3830      	subs	r0, #48	; 0x30
        i = i * 10U + (unsigned int) (*((*str)++) - '0');
10003208:	3b30      	subs	r3, #48	; 0x30
    while (_is_digit(**str)) {
1000320a:	2809      	cmp	r0, #9
1000320c:	d9f3      	bls.n	100031f6 <_vsnprintf+0x472>
1000320e:	0030      	movs	r0, r6
10003210:	4698      	mov	r8, r3
10003212:	0016      	movs	r6, r2
10003214:	970a      	str	r7, [sp, #40]	; 0x28
10003216:	e600      	b.n	10002e1a <_vsnprintf+0x96>
                const int prec = (int) va_arg(va, int);
10003218:	9b09      	ldr	r3, [sp, #36]	; 0x24
                format++;
1000321a:	3602      	adds	r6, #2
                precision = prec > 0 ? (unsigned int) prec : 0U;
1000321c:	cb04      	ldmia	r3!, {r2}
1000321e:	4690      	mov	r8, r2
10003220:	43d2      	mvns	r2, r2
10003222:	4640      	mov	r0, r8
10003224:	17d2      	asrs	r2, r2, #31
10003226:	4010      	ands	r0, r2
10003228:	4680      	mov	r8, r0
                const int prec = (int) va_arg(va, int);
1000322a:	9309      	str	r3, [sp, #36]	; 0x24
        switch (*format) {
1000322c:	7830      	ldrb	r0, [r6, #0]
1000322e:	e5f4      	b.n	10002e1a <_vsnprintf+0x96>
        flags &= ~FLAGS_HASH;
10003230:	2210      	movs	r2, #16
10003232:	0008      	movs	r0, r1
10003234:	4390      	bics	r0, r2
10003236:	3211      	adds	r2, #17
10003238:	4310      	orrs	r0, r2
1000323a:	4683      	mov	fp, r0
    size_t len = 0U;
1000323c:	2200      	movs	r2, #0
    if (!(flags & FLAGS_PRECISION) || value) {
1000323e:	0549      	lsls	r1, r1, #21
10003240:	d5b0      	bpl.n	100031a4 <_vsnprintf+0x420>
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10003242:	465b      	mov	r3, fp
10003244:	9306      	str	r3, [sp, #24]
10003246:	2308      	movs	r3, #8
10003248:	9305      	str	r3, [sp, #20]
1000324a:	4643      	mov	r3, r8
1000324c:	9304      	str	r3, [sp, #16]
1000324e:	2310      	movs	r3, #16
10003250:	9303      	str	r3, [sp, #12]
10003252:	2300      	movs	r3, #0
10003254:	9302      	str	r3, [sp, #8]
10003256:	ab16      	add	r3, sp, #88	; 0x58
10003258:	9201      	str	r2, [sp, #4]
1000325a:	9300      	str	r3, [sp, #0]
1000325c:	002a      	movs	r2, r5
1000325e:	464b      	mov	r3, r9
10003260:	0021      	movs	r1, r4
10003262:	9808      	ldr	r0, [sp, #32]
10003264:	f7ff f8bc 	bl	100023e0 <_ntoa_format>
                    idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long) ((uintptr_t) va_arg(va, void*)), false,
10003268:	4653      	mov	r3, sl
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
1000326a:	0005      	movs	r5, r0
                format++;
1000326c:	3601      	adds	r6, #1
                    idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long) ((uintptr_t) va_arg(va, void*)), false,
1000326e:	9309      	str	r3, [sp, #36]	; 0x24
                break;
10003270:	e5ad      	b.n	10002dce <_vsnprintf+0x4a>
    for (s = str; *s && maxsize--; ++s);
10003272:	7813      	ldrb	r3, [r2, #0]
10003274:	469c      	mov	ip, r3
10003276:	2b00      	cmp	r3, #0
10003278:	d100      	bne.n	1000327c <_vsnprintf+0x4f8>
1000327a:	e2f7      	b.n	1000386c <_vsnprintf+0xae8>
1000327c:	2302      	movs	r3, #2
1000327e:	425b      	negs	r3, r3
10003280:	e737      	b.n	100030f2 <_vsnprintf+0x36e>
                if ((*format == 'g') || (*format == 'G')) flags |= FLAGS_ADAPT_EXP;
10003282:	2320      	movs	r3, #32
10003284:	0002      	movs	r2, r0
10003286:	439a      	bics	r2, r3
10003288:	2a47      	cmp	r2, #71	; 0x47
1000328a:	d104      	bne.n	10003296 <_vsnprintf+0x512>
1000328c:	2380      	movs	r3, #128	; 0x80
1000328e:	011b      	lsls	r3, r3, #4
10003290:	4319      	orrs	r1, r3
                if ((*format == 'E') || (*format == 'G')) flags |= FLAGS_UPPERCASE;
10003292:	2302      	movs	r3, #2
10003294:	4398      	bics	r0, r3
10003296:	2845      	cmp	r0, #69	; 0x45
10003298:	d101      	bne.n	1000329e <_vsnprintf+0x51a>
1000329a:	2320      	movs	r3, #32
1000329c:	4319      	orrs	r1, r3
                idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
1000329e:	2207      	movs	r2, #7
100032a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
100032a2:	9104      	str	r1, [sp, #16]
100032a4:	3307      	adds	r3, #7
100032a6:	4393      	bics	r3, r2
100032a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100032aa:	0019      	movs	r1, r3
100032ac:	9203      	str	r2, [sp, #12]
100032ae:	4642      	mov	r2, r8
100032b0:	9202      	str	r2, [sp, #8]
100032b2:	c90c      	ldmia	r1!, {r2, r3}
100032b4:	9808      	ldr	r0, [sp, #32]
100032b6:	9200      	str	r2, [sp, #0]
100032b8:	9301      	str	r3, [sp, #4]
100032ba:	9109      	str	r1, [sp, #36]	; 0x24
100032bc:	002a      	movs	r2, r5
100032be:	464b      	mov	r3, r9
100032c0:	0021      	movs	r1, r4
100032c2:	f7ff f983 	bl	100025cc <_etoa>
                format++;
100032c6:	3601      	adds	r6, #1
                idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
100032c8:	0005      	movs	r5, r0
                break;
100032ca:	e580      	b.n	10002dce <_vsnprintf+0x4a>
                    base = 16U;
100032cc:	2310      	movs	r3, #16
100032ce:	930c      	str	r3, [sp, #48]	; 0x30
                    flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
100032d0:	230c      	movs	r3, #12
100032d2:	000a      	movs	r2, r1
100032d4:	439a      	bics	r2, r3
100032d6:	920b      	str	r2, [sp, #44]	; 0x2c
                if (flags & FLAGS_PRECISION) {
100032d8:	054b      	lsls	r3, r1, #21
100032da:	d503      	bpl.n	100032e4 <_vsnprintf+0x560>
                    flags &= ~FLAGS_ZEROPAD;
100032dc:	2301      	movs	r3, #1
100032de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
100032e0:	439a      	bics	r2, r3
100032e2:	920b      	str	r2, [sp, #44]	; 0x2c
                if ((*format == 'i') || (*format == 'd')) {
100032e4:	2869      	cmp	r0, #105	; 0x69
100032e6:	d100      	bne.n	100032ea <_vsnprintf+0x566>
100032e8:	e627      	b.n	10002f3a <_vsnprintf+0x1b6>
100032ea:	2864      	cmp	r0, #100	; 0x64
100032ec:	d100      	bne.n	100032f0 <_vsnprintf+0x56c>
100032ee:	e624      	b.n	10002f3a <_vsnprintf+0x1b6>
                    if (flags & FLAGS_LONG_LONG) {
100032f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
100032f2:	2380      	movs	r3, #128	; 0x80
100032f4:	0011      	movs	r1, r2
100032f6:	009b      	lsls	r3, r3, #2
100032f8:	4019      	ands	r1, r3
100032fa:	468b      	mov	fp, r1
100032fc:	421a      	tst	r2, r3
100032fe:	d000      	beq.n	10003302 <_vsnprintf+0x57e>
10003300:	e166      	b.n	100035d0 <_vsnprintf+0x84c>
                    } else if (flags & FLAGS_LONG) {
10003302:	2380      	movs	r3, #128	; 0x80
10003304:	0011      	movs	r1, r2
10003306:	005b      	lsls	r3, r3, #1
10003308:	4019      	ands	r1, r3
1000330a:	468a      	mov	sl, r1
1000330c:	421a      	tst	r2, r3
1000330e:	d000      	beq.n	10003312 <_vsnprintf+0x58e>
10003310:	e239      	b.n	10003786 <_vsnprintf+0xa02>
10003312:	0013      	movs	r3, r2
                                                                        : (flags & FLAGS_SHORT)
10003314:	065b      	lsls	r3, r3, #25
10003316:	d500      	bpl.n	1000331a <_vsnprintf+0x596>
10003318:	e13c      	b.n	10003594 <_vsnprintf+0x810>
1000331a:	0013      	movs	r3, r2
                                                                          : va_arg(va, unsigned int);
1000331c:	061b      	lsls	r3, r3, #24
1000331e:	d400      	bmi.n	10003322 <_vsnprintf+0x59e>
10003320:	e2a6      	b.n	10003870 <_vsnprintf+0xaec>
                                                                          ? (unsigned short int) va_arg(va,
10003322:	9b09      	ldr	r3, [sp, #36]	; 0x24
10003324:	cb04      	ldmia	r3!, {r2}
10003326:	0412      	lsls	r2, r2, #16
10003328:	0c12      	lsrs	r2, r2, #16
1000332a:	4693      	mov	fp, r2
1000332c:	9309      	str	r3, [sp, #36]	; 0x24
    if (!value) {
1000332e:	465b      	mov	r3, fp
10003330:	2b00      	cmp	r3, #0
10003332:	d000      	beq.n	10003336 <_vsnprintf+0x5b2>
10003334:	e19a      	b.n	1000366c <_vsnprintf+0x8e8>
        flags &= ~FLAGS_HASH;
10003336:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10003338:	3310      	adds	r3, #16
1000333a:	0011      	movs	r1, r2
1000333c:	4399      	bics	r1, r3
1000333e:	910b      	str	r1, [sp, #44]	; 0x2c
    if (!(flags & FLAGS_PRECISION) || value) {
10003340:	0552      	lsls	r2, r2, #21
10003342:	d400      	bmi.n	10003346 <_vsnprintf+0x5c2>
10003344:	e192      	b.n	1000366c <_vsnprintf+0x8e8>
    size_t len = 0U;
10003346:	2300      	movs	r3, #0
10003348:	469a      	mov	sl, r3
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
1000334a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000334c:	9306      	str	r3, [sp, #24]
1000334e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10003350:	9305      	str	r3, [sp, #20]
10003352:	4643      	mov	r3, r8
10003354:	9304      	str	r3, [sp, #16]
10003356:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10003358:	9303      	str	r3, [sp, #12]
1000335a:	2300      	movs	r3, #0
1000335c:	e10c      	b.n	10003578 <_vsnprintf+0x7f4>
                if (*format == 'F') flags |= FLAGS_UPPERCASE;
1000335e:	2320      	movs	r3, #32
10003360:	4319      	orrs	r1, r3
10003362:	e660      	b.n	10003026 <_vsnprintf+0x2a2>
10003364:	9b09      	ldr	r3, [sp, #36]	; 0x24
10003366:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10003368:	1b5b      	subs	r3, r3, r5
1000336a:	4698      	mov	r8, r3
1000336c:	464b      	mov	r3, r9
1000336e:	4691      	mov	r9, r2
10003370:	001f      	movs	r7, r3
10003372:	46b2      	mov	sl, r6
10003374:	0026      	movs	r6, r4
10003376:	9c08      	ldr	r4, [sp, #32]
                    out(*(p++), buffer, idx++, maxlen);
10003378:	002a      	movs	r2, r5
1000337a:	003b      	movs	r3, r7
1000337c:	0031      	movs	r1, r6
1000337e:	47a0      	blx	r4
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
10003380:	4643      	mov	r3, r8
                    out(*(p++), buffer, idx++, maxlen);
10003382:	3501      	adds	r5, #1
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
10003384:	5d58      	ldrb	r0, [r3, r5]
10003386:	2800      	cmp	r0, #0
10003388:	d1f6      	bne.n	10003378 <_vsnprintf+0x5f4>
                    out(*(p++), buffer, idx++, maxlen);
1000338a:	464a      	mov	r2, r9
1000338c:	0034      	movs	r4, r6
1000338e:	46b9      	mov	r9, r7
10003390:	4656      	mov	r6, sl
10003392:	920a      	str	r2, [sp, #40]	; 0x28
10003394:	e6f5      	b.n	10003182 <_vsnprintf+0x3fe>
                    flags |= FLAGS_LONG_LONG;
10003396:	23c0      	movs	r3, #192	; 0xc0
10003398:	009b      	lsls	r3, r3, #2
        switch (*format) {
1000339a:	78b0      	ldrb	r0, [r6, #2]
                    flags |= FLAGS_LONG_LONG;
1000339c:	4319      	orrs	r1, r3
                    format++;
1000339e:	3602      	adds	r6, #2
100033a0:	e55d      	b.n	10002e5e <_vsnprintf+0xda>
                    flags |= FLAGS_CHAR;
100033a2:	23c0      	movs	r3, #192	; 0xc0
        switch (*format) {
100033a4:	78b0      	ldrb	r0, [r6, #2]
                    flags |= FLAGS_CHAR;
100033a6:	4319      	orrs	r1, r3
                    format++;
100033a8:	3602      	adds	r6, #2
100033aa:	e558      	b.n	10002e5e <_vsnprintf+0xda>
                    flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
100033ac:	230c      	movs	r3, #12
100033ae:	000a      	movs	r2, r1
100033b0:	439a      	bics	r2, r3
100033b2:	3314      	adds	r3, #20
100033b4:	431a      	orrs	r2, r3
                    base = 16U;
100033b6:	3b10      	subs	r3, #16
                    flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
100033b8:	920b      	str	r2, [sp, #44]	; 0x2c
                    base = 16U;
100033ba:	930c      	str	r3, [sp, #48]	; 0x30
                if (flags & FLAGS_PRECISION) {
100033bc:	054b      	lsls	r3, r1, #21
100033be:	d48d      	bmi.n	100032dc <_vsnprintf+0x558>
100033c0:	e796      	b.n	100032f0 <_vsnprintf+0x56c>
                    out(*(p++), buffer, idx++, maxlen);
100033c2:	46a1      	mov	r9, r4
100033c4:	0034      	movs	r4, r6
100033c6:	4656      	mov	r6, sl
100033c8:	e6db      	b.n	10003182 <_vsnprintf+0x3fe>
                    while (l++ < width) {
100033ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100033cc:	2a01      	cmp	r2, #1
100033ce:	d800      	bhi.n	100033d2 <_vsnprintf+0x64e>
100033d0:	e253      	b.n	1000387a <_vsnprintf+0xaf6>
100033d2:	1e6b      	subs	r3, r5, #1
100033d4:	189f      	adds	r7, r3, r2
100033d6:	9b08      	ldr	r3, [sp, #32]
100033d8:	46b0      	mov	r8, r6
100033da:	0026      	movs	r6, r4
100033dc:	464c      	mov	r4, r9
100033de:	4699      	mov	r9, r3
                        out(' ', buffer, idx++, maxlen);
100033e0:	002a      	movs	r2, r5
100033e2:	0023      	movs	r3, r4
100033e4:	3501      	adds	r5, #1
100033e6:	0031      	movs	r1, r6
100033e8:	2020      	movs	r0, #32
100033ea:	47c8      	blx	r9
                    while (l++ < width) {
100033ec:	42bd      	cmp	r5, r7
100033ee:	d1f7      	bne.n	100033e0 <_vsnprintf+0x65c>
100033f0:	46a1      	mov	r9, r4
100033f2:	0034      	movs	r4, r6
100033f4:	4646      	mov	r6, r8
                out((char) va_arg(va, int), buffer, idx++, maxlen);
100033f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
100033f8:	003a      	movs	r2, r7
100033fa:	cb01      	ldmia	r3!, {r0}
100033fc:	0021      	movs	r1, r4
100033fe:	4698      	mov	r8, r3
10003400:	1c7d      	adds	r5, r7, #1
10003402:	464b      	mov	r3, r9
10003404:	9f08      	ldr	r7, [sp, #32]
10003406:	b2c0      	uxtb	r0, r0
10003408:	47b8      	blx	r7
1000340a:	4643      	mov	r3, r8
                format++;
1000340c:	3601      	adds	r6, #1
                out((char) va_arg(va, int), buffer, idx++, maxlen);
1000340e:	9309      	str	r3, [sp, #36]	; 0x24
                break;
10003410:	e4dd      	b.n	10002dce <_vsnprintf+0x4a>
                    while (l++ < width) {
10003412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10003414:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10003416:	46a8      	mov	r8, r5
10003418:	429a      	cmp	r2, r3
1000341a:	d800      	bhi.n	1000341e <_vsnprintf+0x69a>
1000341c:	e6b5      	b.n	1000318a <_vsnprintf+0x406>
1000341e:	4694      	mov	ip, r2
10003420:	4465      	add	r5, ip
10003422:	1aed      	subs	r5, r5, r3
10003424:	9b08      	ldr	r3, [sp, #32]
10003426:	4647      	mov	r7, r8
10003428:	46b0      	mov	r8, r6
1000342a:	0026      	movs	r6, r4
1000342c:	464c      	mov	r4, r9
1000342e:	4699      	mov	r9, r3
                        out(' ', buffer, idx++, maxlen);
10003430:	003a      	movs	r2, r7
10003432:	0023      	movs	r3, r4
10003434:	3701      	adds	r7, #1
10003436:	0031      	movs	r1, r6
10003438:	2020      	movs	r0, #32
1000343a:	47c8      	blx	r9
                    while (l++ < width) {
1000343c:	42af      	cmp	r7, r5
1000343e:	d1f7      	bne.n	10003430 <_vsnprintf+0x6ac>
10003440:	46a1      	mov	r9, r4
10003442:	0034      	movs	r4, r6
10003444:	4646      	mov	r6, r8
10003446:	e6a0      	b.n	1000318a <_vsnprintf+0x406>
                    while (l++ < width) {
10003448:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000344a:	990a      	ldr	r1, [sp, #40]	; 0x28
1000344c:	1c53      	adds	r3, r2, #1
1000344e:	4291      	cmp	r1, r2
10003450:	d800      	bhi.n	10003454 <_vsnprintf+0x6d0>
10003452:	e214      	b.n	1000387e <_vsnprintf+0xafa>
10003454:	194b      	adds	r3, r1, r5
10003456:	1a9b      	subs	r3, r3, r2
10003458:	001f      	movs	r7, r3
1000345a:	9b08      	ldr	r3, [sp, #32]
1000345c:	46b2      	mov	sl, r6
1000345e:	0026      	movs	r6, r4
10003460:	464c      	mov	r4, r9
10003462:	4699      	mov	r9, r3
                        out(' ', buffer, idx++, maxlen);
10003464:	002a      	movs	r2, r5
10003466:	0023      	movs	r3, r4
10003468:	3501      	adds	r5, #1
1000346a:	0031      	movs	r1, r6
1000346c:	2020      	movs	r0, #32
1000346e:	47c8      	blx	r9
                    while (l++ < width) {
10003470:	42bd      	cmp	r5, r7
10003472:	d1f7      	bne.n	10003464 <_vsnprintf+0x6e0>
10003474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10003476:	46a1      	mov	r9, r4
10003478:	3301      	adds	r3, #1
1000347a:	930b      	str	r3, [sp, #44]	; 0x2c
1000347c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000347e:	0034      	movs	r4, r6
10003480:	781b      	ldrb	r3, [r3, #0]
10003482:	4656      	mov	r6, sl
10003484:	469c      	mov	ip, r3
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
10003486:	4660      	mov	r0, ip
10003488:	2800      	cmp	r0, #0
1000348a:	d000      	beq.n	1000348e <_vsnprintf+0x70a>
1000348c:	e658      	b.n	10003140 <_vsnprintf+0x3bc>
1000348e:	e67c      	b.n	1000318a <_vsnprintf+0x406>
                        const long long value = va_arg(va, long long);
10003490:	2207      	movs	r2, #7
10003492:	9b09      	ldr	r3, [sp, #36]	; 0x24
10003494:	3307      	adds	r3, #7
10003496:	4393      	bics	r3, r2
10003498:	3201      	adds	r2, #1
1000349a:	4694      	mov	ip, r2
1000349c:	449c      	add	ip, r3
1000349e:	4662      	mov	r2, ip
100034a0:	685f      	ldr	r7, [r3, #4]
100034a2:	9209      	str	r2, [sp, #36]	; 0x24
100034a4:	681a      	ldr	r2, [r3, #0]
                                              (unsigned long long) (value > 0 ? value : 0 - value), value < 0, base,
100034a6:	17fb      	asrs	r3, r7, #31
100034a8:	9310      	str	r3, [sp, #64]	; 0x40
100034aa:	9311      	str	r3, [sp, #68]	; 0x44
100034ac:	9810      	ldr	r0, [sp, #64]	; 0x40
100034ae:	9911      	ldr	r1, [sp, #68]	; 0x44
100034b0:	0003      	movs	r3, r0
100034b2:	4053      	eors	r3, r2
100034b4:	930e      	str	r3, [sp, #56]	; 0x38
100034b6:	000b      	movs	r3, r1
100034b8:	407b      	eors	r3, r7
100034ba:	930f      	str	r3, [sp, #60]	; 0x3c
                        const long long value = va_arg(va, long long);
100034bc:	4694      	mov	ip, r2
                                              (unsigned long long) (value > 0 ? value : 0 - value), value < 0, base,
100034be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
100034c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
100034c2:	1a12      	subs	r2, r2, r0
100034c4:	418b      	sbcs	r3, r1
100034c6:	920e      	str	r2, [sp, #56]	; 0x38
100034c8:	930f      	str	r3, [sp, #60]	; 0x3c
                        idx = _ntoa_long_long(out, buffer, idx, maxlen,
100034ca:	0ffb      	lsrs	r3, r7, #31
    if (!value) {
100034cc:	4662      	mov	r2, ip
                        idx = _ntoa_long_long(out, buffer, idx, maxlen,
100034ce:	9312      	str	r3, [sp, #72]	; 0x48
100034d0:	2300      	movs	r3, #0
    if (!value) {
100034d2:	433a      	orrs	r2, r7
                        idx = _ntoa_long_long(out, buffer, idx, maxlen,
100034d4:	469b      	mov	fp, r3
    if (!value) {
100034d6:	d03d      	beq.n	10003554 <_vsnprintf+0x7d0>
100034d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
100034da:	2361      	movs	r3, #97	; 0x61
100034dc:	0692      	lsls	r2, r2, #26
100034de:	d500      	bpl.n	100034e2 <_vsnprintf+0x75e>
100034e0:	2341      	movs	r3, #65	; 0x41
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
100034e2:	2200      	movs	r2, #0
100034e4:	b2db      	uxtb	r3, r3
100034e6:	a90e      	add	r1, sp, #56	; 0x38
100034e8:	3b0a      	subs	r3, #10
100034ea:	468c      	mov	ip, r1
100034ec:	4692      	mov	sl, r2
100034ee:	930d      	str	r3, [sp, #52]	; 0x34
100034f0:	4643      	mov	r3, r8
100034f2:	321f      	adds	r2, #31
100034f4:	4462      	add	r2, ip
100034f6:	9513      	str	r5, [sp, #76]	; 0x4c
100034f8:	9615      	str	r6, [sp, #84]	; 0x54
100034fa:	4655      	mov	r5, sl
100034fc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
100034fe:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
10003500:	46a2      	mov	sl, r4
10003502:	4690      	mov	r8, r2
10003504:	9c0c      	ldr	r4, [sp, #48]	; 0x30
10003506:	9314      	str	r3, [sp, #80]	; 0x50
10003508:	e00c      	b.n	10003524 <_vsnprintf+0x7a0>
1000350a:	3230      	adds	r2, #48	; 0x30
1000350c:	b2d2      	uxtb	r2, r2
1000350e:	4643      	mov	r3, r8
10003510:	3501      	adds	r5, #1
10003512:	555a      	strb	r2, [r3, r5]
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
10003514:	45bb      	cmp	fp, r7
10003516:	d100      	bne.n	1000351a <_vsnprintf+0x796>
10003518:	e18a      	b.n	10003830 <_vsnprintf+0xaac>
1000351a:	2d20      	cmp	r5, #32
1000351c:	d100      	bne.n	10003520 <_vsnprintf+0x79c>
1000351e:	e18a      	b.n	10003836 <_vsnprintf+0xab2>
            value /= base;
10003520:	0006      	movs	r6, r0
10003522:	000f      	movs	r7, r1
            const char digit = (char) (value % base);
10003524:	0022      	movs	r2, r4
10003526:	2300      	movs	r3, #0
10003528:	0030      	movs	r0, r6
1000352a:	0039      	movs	r1, r7
1000352c:	f7fc ff68 	bl	10000400 <__wrap___aeabi_uldivmod>
10003530:	b2d2      	uxtb	r2, r2
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
10003532:	2a09      	cmp	r2, #9
10003534:	d9e9      	bls.n	1000350a <_vsnprintf+0x786>
10003536:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10003538:	469c      	mov	ip, r3
1000353a:	4462      	add	r2, ip
1000353c:	b2d2      	uxtb	r2, r2
1000353e:	e7e6      	b.n	1000350e <_vsnprintf+0x78a>
10003540:	23ff      	movs	r3, #255	; 0xff
                        const int value = (flags & FLAGS_CHAR) ? (char) va_arg(va, int) : (flags & FLAGS_SHORT)
10003542:	9909      	ldr	r1, [sp, #36]	; 0x24
10003544:	c904      	ldmia	r1!, {r2}
10003546:	4013      	ands	r3, r2
10003548:	001a      	movs	r2, r3
1000354a:	9109      	str	r1, [sp, #36]	; 0x24
1000354c:	e517      	b.n	10002f7e <_vsnprintf+0x1fa>
1000354e:	46c0      	nop			; (mov r8, r8)
10003550:	10002341 	.word	0x10002341
        flags &= ~FLAGS_HASH;
10003554:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10003556:	3310      	adds	r3, #16
10003558:	0011      	movs	r1, r2
1000355a:	4399      	bics	r1, r3
1000355c:	910b      	str	r1, [sp, #44]	; 0x2c
    if (!(flags & FLAGS_PRECISION) || value) {
1000355e:	0552      	lsls	r2, r2, #21
10003560:	d5ba      	bpl.n	100034d8 <_vsnprintf+0x754>
    size_t len = 0U;
10003562:	2300      	movs	r3, #0
10003564:	469a      	mov	sl, r3
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10003566:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10003568:	9306      	str	r3, [sp, #24]
1000356a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000356c:	9305      	str	r3, [sp, #20]
1000356e:	4643      	mov	r3, r8
10003570:	9304      	str	r3, [sp, #16]
10003572:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10003574:	9303      	str	r3, [sp, #12]
10003576:	9b12      	ldr	r3, [sp, #72]	; 0x48
10003578:	9302      	str	r3, [sp, #8]
1000357a:	4653      	mov	r3, sl
1000357c:	9301      	str	r3, [sp, #4]
1000357e:	ab16      	add	r3, sp, #88	; 0x58
10003580:	002a      	movs	r2, r5
10003582:	9300      	str	r3, [sp, #0]
10003584:	0021      	movs	r1, r4
10003586:	464b      	mov	r3, r9
10003588:	9808      	ldr	r0, [sp, #32]
1000358a:	f7fe ff29 	bl	100023e0 <_ntoa_format>
                format++;
1000358e:	3601      	adds	r6, #1
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10003590:	0005      	movs	r5, r0
                break;
10003592:	e41c      	b.n	10002dce <_vsnprintf+0x4a>
10003594:	22ff      	movs	r2, #255	; 0xff
                        const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char) va_arg(va, unsigned int)
10003596:	9b09      	ldr	r3, [sp, #36]	; 0x24
10003598:	cb02      	ldmia	r3!, {r1}
1000359a:	4011      	ands	r1, r2
1000359c:	468b      	mov	fp, r1
1000359e:	9309      	str	r3, [sp, #36]	; 0x24
100035a0:	e6c5      	b.n	1000332e <_vsnprintf+0x5aa>
                out((char) va_arg(va, int), buffer, idx++, maxlen);
100035a2:	4653      	mov	r3, sl
                    while (l++ < width) {
100035a4:	4645      	mov	r5, r8
                out((char) va_arg(va, int), buffer, idx++, maxlen);
100035a6:	9309      	str	r3, [sp, #36]	; 0x24
                format++;
100035a8:	3601      	adds	r6, #1
                break;
100035aa:	f7ff fc10 	bl	10002dce <_vsnprintf+0x4a>
100035ae:	4656      	mov	r6, sl
100035b0:	465c      	mov	r4, fp
100035b2:	46aa      	mov	sl, r5
100035b4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
100035b6:	e7d6      	b.n	10003566 <_vsnprintf+0x7e2>
                    base = 8U;
100035b8:	2308      	movs	r3, #8
100035ba:	930c      	str	r3, [sp, #48]	; 0x30
                format++;
100035bc:	910b      	str	r1, [sp, #44]	; 0x2c
100035be:	990b      	ldr	r1, [sp, #44]	; 0x2c
                if ((*format != 'i') && (*format != 'd')) {
100035c0:	2864      	cmp	r0, #100	; 0x64
100035c2:	d000      	beq.n	100035c6 <_vsnprintf+0x842>
100035c4:	e684      	b.n	100032d0 <_vsnprintf+0x54c>
                if (flags & FLAGS_PRECISION) {
100035c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100035c8:	055b      	lsls	r3, r3, #21
100035ca:	d500      	bpl.n	100035ce <_vsnprintf+0x84a>
100035cc:	e686      	b.n	100032dc <_vsnprintf+0x558>
100035ce:	e4b4      	b.n	10002f3a <_vsnprintf+0x1b6>
                        idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base,
100035d0:	2207      	movs	r2, #7
100035d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
100035d4:	3307      	adds	r3, #7
100035d6:	4393      	bics	r3, r2
100035d8:	3201      	adds	r2, #1
100035da:	4694      	mov	ip, r2
100035dc:	449c      	add	ip, r3
100035de:	4662      	mov	r2, ip
100035e0:	9209      	str	r2, [sp, #36]	; 0x24
100035e2:	681a      	ldr	r2, [r3, #0]
100035e4:	685b      	ldr	r3, [r3, #4]
100035e6:	0010      	movs	r0, r2
100035e8:	469b      	mov	fp, r3
    if (!value) {
100035ea:	0013      	movs	r3, r2
100035ec:	465a      	mov	r2, fp
100035ee:	4313      	orrs	r3, r2
100035f0:	d107      	bne.n	10003602 <_vsnprintf+0x87e>
        flags &= ~FLAGS_HASH;
100035f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
100035f4:	3310      	adds	r3, #16
100035f6:	0011      	movs	r1, r2
100035f8:	4399      	bics	r1, r3
100035fa:	910b      	str	r1, [sp, #44]	; 0x2c
    if (!(flags & FLAGS_PRECISION) || value) {
100035fc:	0552      	lsls	r2, r2, #21
100035fe:	d500      	bpl.n	10003602 <_vsnprintf+0x87e>
10003600:	e6a1      	b.n	10003346 <_vsnprintf+0x5c2>
10003602:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10003604:	2361      	movs	r3, #97	; 0x61
10003606:	0692      	lsls	r2, r2, #26
10003608:	d500      	bpl.n	1000360c <_vsnprintf+0x888>
1000360a:	2341      	movs	r3, #65	; 0x41
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
1000360c:	2200      	movs	r2, #0
1000360e:	b2db      	uxtb	r3, r3
10003610:	a90e      	add	r1, sp, #56	; 0x38
10003612:	3b0a      	subs	r3, #10
10003614:	468c      	mov	ip, r1
10003616:	4692      	mov	sl, r2
10003618:	930d      	str	r3, [sp, #52]	; 0x34
1000361a:	4643      	mov	r3, r8
1000361c:	321f      	adds	r2, #31
1000361e:	4462      	add	r2, ip
10003620:	465f      	mov	r7, fp
10003622:	9512      	str	r5, [sp, #72]	; 0x48
10003624:	46a3      	mov	fp, r4
10003626:	4655      	mov	r5, sl
10003628:	0004      	movs	r4, r0
1000362a:	46b2      	mov	sl, r6
1000362c:	4690      	mov	r8, r2
1000362e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
10003630:	9313      	str	r3, [sp, #76]	; 0x4c
10003632:	e00d      	b.n	10003650 <_vsnprintf+0x8cc>
10003634:	3230      	adds	r2, #48	; 0x30
10003636:	b2d2      	uxtb	r2, r2
10003638:	4643      	mov	r3, r8
1000363a:	3501      	adds	r5, #1
1000363c:	555a      	strb	r2, [r3, r5]
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
1000363e:	2300      	movs	r3, #0
10003640:	42bb      	cmp	r3, r7
10003642:	d100      	bne.n	10003646 <_vsnprintf+0x8c2>
10003644:	e100      	b.n	10003848 <_vsnprintf+0xac4>
10003646:	2d20      	cmp	r5, #32
10003648:	d100      	bne.n	1000364c <_vsnprintf+0x8c8>
1000364a:	e100      	b.n	1000384e <_vsnprintf+0xaca>
            value /= base;
1000364c:	0004      	movs	r4, r0
1000364e:	000f      	movs	r7, r1
            const char digit = (char) (value % base);
10003650:	0032      	movs	r2, r6
10003652:	2300      	movs	r3, #0
10003654:	0020      	movs	r0, r4
10003656:	0039      	movs	r1, r7
10003658:	f7fc fed2 	bl	10000400 <__wrap___aeabi_uldivmod>
1000365c:	b2d2      	uxtb	r2, r2
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
1000365e:	2a09      	cmp	r2, #9
10003660:	d9e8      	bls.n	10003634 <_vsnprintf+0x8b0>
10003662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10003664:	469c      	mov	ip, r3
10003666:	4462      	add	r2, ip
10003668:	b2d2      	uxtb	r2, r2
1000366a:	e7e5      	b.n	10003638 <_vsnprintf+0x8b4>
1000366c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000366e:	2361      	movs	r3, #97	; 0x61
10003670:	0692      	lsls	r2, r2, #26
10003672:	d500      	bpl.n	10003676 <_vsnprintf+0x8f2>
10003674:	2341      	movs	r3, #65	; 0x41
10003676:	b2db      	uxtb	r3, r3
10003678:	a90e      	add	r1, sp, #56	; 0x38
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
1000367a:	3b0a      	subs	r3, #10
1000367c:	221f      	movs	r2, #31
1000367e:	468c      	mov	ip, r1
10003680:	930d      	str	r3, [sp, #52]	; 0x34
10003682:	0023      	movs	r3, r4
10003684:	4462      	add	r2, ip
10003686:	465c      	mov	r4, fp
10003688:	9512      	str	r5, [sp, #72]	; 0x48
1000368a:	0017      	movs	r7, r2
1000368c:	4655      	mov	r5, sl
1000368e:	469b      	mov	fp, r3
10003690:	46b2      	mov	sl, r6
10003692:	9e0c      	ldr	r6, [sp, #48]	; 0x30
10003694:	e008      	b.n	100036a8 <_vsnprintf+0x924>
10003696:	3330      	adds	r3, #48	; 0x30
10003698:	b2db      	uxtb	r3, r3
1000369a:	3501      	adds	r5, #1
1000369c:	557b      	strb	r3, [r7, r5]
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
1000369e:	42b4      	cmp	r4, r6
100036a0:	d30e      	bcc.n	100036c0 <_vsnprintf+0x93c>
100036a2:	2d20      	cmp	r5, #32
100036a4:	d00c      	beq.n	100036c0 <_vsnprintf+0x93c>
            value /= base;
100036a6:	0004      	movs	r4, r0
            const char digit = (char) (value % base);
100036a8:	0031      	movs	r1, r6
100036aa:	0020      	movs	r0, r4
100036ac:	f7fc fe62 	bl	10000374 <__wrap___aeabi_uidiv>
100036b0:	b2cb      	uxtb	r3, r1
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
100036b2:	2909      	cmp	r1, #9
100036b4:	d9ef      	bls.n	10003696 <_vsnprintf+0x912>
100036b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
100036b8:	4694      	mov	ip, r2
100036ba:	4463      	add	r3, ip
100036bc:	b2db      	uxtb	r3, r3
100036be:	e7ec      	b.n	1000369a <_vsnprintf+0x916>
100036c0:	4656      	mov	r6, sl
100036c2:	465c      	mov	r4, fp
100036c4:	46aa      	mov	sl, r5
100036c6:	9d12      	ldr	r5, [sp, #72]	; 0x48
100036c8:	e63f      	b.n	1000334a <_vsnprintf+0x5c6>
                        const long value = va_arg(va, long);
100036ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
100036cc:	001a      	movs	r2, r3
100036ce:	ca08      	ldmia	r2!, {r3}
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long) (value > 0 ? value : 0 - value),
100036d0:	17d9      	asrs	r1, r3, #31
                        const long value = va_arg(va, long);
100036d2:	9213      	str	r2, [sp, #76]	; 0x4c
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long) (value > 0 ? value : 0 - value),
100036d4:	185a      	adds	r2, r3, r1
100036d6:	404a      	eors	r2, r1
100036d8:	4692      	mov	sl, r2
100036da:	0fda      	lsrs	r2, r3, #31
100036dc:	9212      	str	r2, [sp, #72]	; 0x48
    if (!value) {
100036de:	2b00      	cmp	r3, #0
100036e0:	d108      	bne.n	100036f4 <_vsnprintf+0x970>
    if (!(flags & FLAGS_PRECISION) || value) {
100036e2:	2380      	movs	r3, #128	; 0x80
        flags &= ~FLAGS_HASH;
100036e4:	2210      	movs	r2, #16
    if (!(flags & FLAGS_PRECISION) || value) {
100036e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
100036e8:	00db      	lsls	r3, r3, #3
100036ea:	400b      	ands	r3, r1
        flags &= ~FLAGS_HASH;
100036ec:	4391      	bics	r1, r2
100036ee:	910b      	str	r1, [sp, #44]	; 0x2c
    if (!(flags & FLAGS_PRECISION) || value) {
100036f0:	2b00      	cmp	r3, #0
100036f2:	d12b      	bne.n	1000374c <_vsnprintf+0x9c8>
100036f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
100036f6:	2361      	movs	r3, #97	; 0x61
100036f8:	0692      	lsls	r2, r2, #26
100036fa:	d500      	bpl.n	100036fe <_vsnprintf+0x97a>
100036fc:	2341      	movs	r3, #65	; 0x41
100036fe:	aa0e      	add	r2, sp, #56	; 0x38
10003700:	271f      	movs	r7, #31
10003702:	4694      	mov	ip, r2
10003704:	b2db      	uxtb	r3, r3
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
10003706:	3b0a      	subs	r3, #10
10003708:	950d      	str	r5, [sp, #52]	; 0x34
1000370a:	4467      	add	r7, ip
1000370c:	465d      	mov	r5, fp
1000370e:	9309      	str	r3, [sp, #36]	; 0x24
10003710:	46a3      	mov	fp, r4
10003712:	4654      	mov	r4, sl
10003714:	46b2      	mov	sl, r6
10003716:	9e0c      	ldr	r6, [sp, #48]	; 0x30
10003718:	e008      	b.n	1000372c <_vsnprintf+0x9a8>
1000371a:	3330      	adds	r3, #48	; 0x30
1000371c:	b2db      	uxtb	r3, r3
1000371e:	3501      	adds	r5, #1
10003720:	557b      	strb	r3, [r7, r5]
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
10003722:	42b4      	cmp	r4, r6
10003724:	d30e      	bcc.n	10003744 <_vsnprintf+0x9c0>
10003726:	2d20      	cmp	r5, #32
10003728:	d00c      	beq.n	10003744 <_vsnprintf+0x9c0>
            value /= base;
1000372a:	0004      	movs	r4, r0
            const char digit = (char) (value % base);
1000372c:	0031      	movs	r1, r6
1000372e:	0020      	movs	r0, r4
10003730:	f7fc fe20 	bl	10000374 <__wrap___aeabi_uidiv>
10003734:	b2cb      	uxtb	r3, r1
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
10003736:	2909      	cmp	r1, #9
10003738:	d9ef      	bls.n	1000371a <_vsnprintf+0x996>
1000373a:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000373c:	4694      	mov	ip, r2
1000373e:	4463      	add	r3, ip
10003740:	b2db      	uxtb	r3, r3
10003742:	e7ec      	b.n	1000371e <_vsnprintf+0x99a>
10003744:	4656      	mov	r6, sl
10003746:	465c      	mov	r4, fp
10003748:	46ab      	mov	fp, r5
1000374a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
1000374c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000374e:	002a      	movs	r2, r5
10003750:	9306      	str	r3, [sp, #24]
10003752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10003754:	0021      	movs	r1, r4
10003756:	9305      	str	r3, [sp, #20]
10003758:	4643      	mov	r3, r8
1000375a:	9304      	str	r3, [sp, #16]
1000375c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000375e:	9808      	ldr	r0, [sp, #32]
10003760:	9303      	str	r3, [sp, #12]
10003762:	9b12      	ldr	r3, [sp, #72]	; 0x48
                format++;
10003764:	3601      	adds	r6, #1
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10003766:	9302      	str	r3, [sp, #8]
10003768:	465b      	mov	r3, fp
1000376a:	9301      	str	r3, [sp, #4]
1000376c:	ab16      	add	r3, sp, #88	; 0x58
1000376e:	9300      	str	r3, [sp, #0]
10003770:	464b      	mov	r3, r9
10003772:	f7fe fe35 	bl	100023e0 <_ntoa_format>
                        const long value = va_arg(va, long);
10003776:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10003778:	0005      	movs	r5, r0
                        const long value = va_arg(va, long);
1000377a:	9309      	str	r3, [sp, #36]	; 0x24
                break;
1000377c:	f7ff fb27 	bl	10002dce <_vsnprintf+0x4a>
                    base = 2U;
10003780:	2302      	movs	r3, #2
10003782:	930c      	str	r3, [sp, #48]	; 0x30
10003784:	e71a      	b.n	100035bc <_vsnprintf+0x838>
                        idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision,
10003786:	9b09      	ldr	r3, [sp, #36]	; 0x24
10003788:	cb04      	ldmia	r3!, {r2}
1000378a:	4692      	mov	sl, r2
1000378c:	9312      	str	r3, [sp, #72]	; 0x48
    if (!value) {
1000378e:	2a00      	cmp	r2, #0
10003790:	d108      	bne.n	100037a4 <_vsnprintf+0xa20>
    if (!(flags & FLAGS_PRECISION) || value) {
10003792:	2380      	movs	r3, #128	; 0x80
        flags &= ~FLAGS_HASH;
10003794:	2210      	movs	r2, #16
    if (!(flags & FLAGS_PRECISION) || value) {
10003796:	990b      	ldr	r1, [sp, #44]	; 0x2c
10003798:	00db      	lsls	r3, r3, #3
1000379a:	400b      	ands	r3, r1
        flags &= ~FLAGS_HASH;
1000379c:	4391      	bics	r1, r2
1000379e:	910b      	str	r1, [sp, #44]	; 0x2c
    if (!(flags & FLAGS_PRECISION) || value) {
100037a0:	2b00      	cmp	r3, #0
100037a2:	d12b      	bne.n	100037fc <_vsnprintf+0xa78>
100037a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
100037a6:	2361      	movs	r3, #97	; 0x61
100037a8:	0692      	lsls	r2, r2, #26
100037aa:	d500      	bpl.n	100037ae <_vsnprintf+0xa2a>
100037ac:	2341      	movs	r3, #65	; 0x41
100037ae:	aa0e      	add	r2, sp, #56	; 0x38
100037b0:	271f      	movs	r7, #31
100037b2:	4694      	mov	ip, r2
100037b4:	b2db      	uxtb	r3, r3
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
100037b6:	3b0a      	subs	r3, #10
100037b8:	950d      	str	r5, [sp, #52]	; 0x34
100037ba:	4467      	add	r7, ip
100037bc:	465d      	mov	r5, fp
100037be:	9309      	str	r3, [sp, #36]	; 0x24
100037c0:	46a3      	mov	fp, r4
100037c2:	4654      	mov	r4, sl
100037c4:	46b2      	mov	sl, r6
100037c6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
100037c8:	e008      	b.n	100037dc <_vsnprintf+0xa58>
100037ca:	3330      	adds	r3, #48	; 0x30
100037cc:	b2db      	uxtb	r3, r3
100037ce:	3501      	adds	r5, #1
100037d0:	557b      	strb	r3, [r7, r5]
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
100037d2:	42b4      	cmp	r4, r6
100037d4:	d30e      	bcc.n	100037f4 <_vsnprintf+0xa70>
100037d6:	2d20      	cmp	r5, #32
100037d8:	d00c      	beq.n	100037f4 <_vsnprintf+0xa70>
            value /= base;
100037da:	0004      	movs	r4, r0
            const char digit = (char) (value % base);
100037dc:	0031      	movs	r1, r6
100037de:	0020      	movs	r0, r4
100037e0:	f7fc fdc8 	bl	10000374 <__wrap___aeabi_uidiv>
100037e4:	b2cb      	uxtb	r3, r1
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
100037e6:	2909      	cmp	r1, #9
100037e8:	d9ef      	bls.n	100037ca <_vsnprintf+0xa46>
100037ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
100037ec:	4694      	mov	ip, r2
100037ee:	4463      	add	r3, ip
100037f0:	b2db      	uxtb	r3, r3
100037f2:	e7ec      	b.n	100037ce <_vsnprintf+0xa4a>
100037f4:	4656      	mov	r6, sl
100037f6:	465c      	mov	r4, fp
100037f8:	46ab      	mov	fp, r5
100037fa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
100037fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100037fe:	002a      	movs	r2, r5
10003800:	9306      	str	r3, [sp, #24]
10003802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10003804:	0021      	movs	r1, r4
10003806:	9305      	str	r3, [sp, #20]
10003808:	4643      	mov	r3, r8
1000380a:	9304      	str	r3, [sp, #16]
1000380c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000380e:	9808      	ldr	r0, [sp, #32]
10003810:	9303      	str	r3, [sp, #12]
10003812:	2300      	movs	r3, #0
10003814:	9302      	str	r3, [sp, #8]
10003816:	465b      	mov	r3, fp
10003818:	9301      	str	r3, [sp, #4]
1000381a:	ab16      	add	r3, sp, #88	; 0x58
1000381c:	9300      	str	r3, [sp, #0]
1000381e:	464b      	mov	r3, r9
10003820:	f7fe fdde 	bl	100023e0 <_ntoa_format>
                        idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision,
10003824:	9b12      	ldr	r3, [sp, #72]	; 0x48
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10003826:	0005      	movs	r5, r0
                        idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision,
10003828:	9309      	str	r3, [sp, #36]	; 0x24
                format++;
1000382a:	3601      	adds	r6, #1
                break;
1000382c:	f7ff facf 	bl	10002dce <_vsnprintf+0x4a>
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
10003830:	42b4      	cmp	r4, r6
10003832:	d800      	bhi.n	10003836 <_vsnprintf+0xab2>
10003834:	e671      	b.n	1000351a <_vsnprintf+0x796>
10003836:	9b14      	ldr	r3, [sp, #80]	; 0x50
10003838:	4654      	mov	r4, sl
1000383a:	960e      	str	r6, [sp, #56]	; 0x38
1000383c:	970f      	str	r7, [sp, #60]	; 0x3c
1000383e:	46aa      	mov	sl, r5
10003840:	4698      	mov	r8, r3
10003842:	9e15      	ldr	r6, [sp, #84]	; 0x54
10003844:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10003846:	e68e      	b.n	10003566 <_vsnprintf+0x7e2>
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
10003848:	42a6      	cmp	r6, r4
1000384a:	d800      	bhi.n	1000384e <_vsnprintf+0xaca>
1000384c:	e6fb      	b.n	10003646 <_vsnprintf+0x8c2>
1000384e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10003850:	4656      	mov	r6, sl
10003852:	4698      	mov	r8, r3
10003854:	46aa      	mov	sl, r5
10003856:	465c      	mov	r4, fp
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10003858:	9d12      	ldr	r5, [sp, #72]	; 0x48
1000385a:	e576      	b.n	1000334a <_vsnprintf+0x5c6>
                                                                                          : va_arg(va, int);
1000385c:	c908      	ldmia	r1!, {r3}
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int) (value > 0 ? value : 0 - value),
1000385e:	17d8      	asrs	r0, r3, #31
10003860:	181a      	adds	r2, r3, r0
10003862:	4042      	eors	r2, r0
                                                                                          : va_arg(va, int);
10003864:	9109      	str	r1, [sp, #36]	; 0x24
10003866:	f7ff fb8a 	bl	10002f7e <_vsnprintf+0x1fa>
    for (s = str; *s && maxsize--; ++s);
1000386a:	2300      	movs	r3, #0
1000386c:	930b      	str	r3, [sp, #44]	; 0x2c
1000386e:	e450      	b.n	10003112 <_vsnprintf+0x38e>
                                                                          : va_arg(va, unsigned int);
10003870:	9b09      	ldr	r3, [sp, #36]	; 0x24
10003872:	cb04      	ldmia	r3!, {r2}
10003874:	4693      	mov	fp, r2
10003876:	9309      	str	r3, [sp, #36]	; 0x24
10003878:	e559      	b.n	1000332e <_vsnprintf+0x5aa>
                    while (l++ < width) {
1000387a:	002f      	movs	r7, r5
1000387c:	e5bb      	b.n	100033f6 <_vsnprintf+0x672>
                    while (l++ < width) {
1000387e:	930b      	str	r3, [sp, #44]	; 0x2c
10003880:	e601      	b.n	10003486 <_vsnprintf+0x702>
                    base = 10U;
10003882:	3b06      	subs	r3, #6
10003884:	930c      	str	r3, [sp, #48]	; 0x30
10003886:	e69a      	b.n	100035be <_vsnprintf+0x83a>

10003888 <vfctprintf>:

int WRAPPER_FUNC(vsnprintf)(char *buffer, size_t count, const char *format, va_list va) {
    return _vsnprintf(_out_buffer, buffer, count, format, va);
}

int vfctprintf(void (*out)(char character, void *arg), void *arg, const char *format, va_list va) {
10003888:	b500      	push	{lr}
1000388a:	b085      	sub	sp, #20
    const out_fct_wrap_type out_fct_wrap = {out, arg};
1000388c:	9103      	str	r1, [sp, #12]
    return _vsnprintf(_out_fct, (char *) (uintptr_t) &out_fct_wrap, (size_t) -1, format, va);
1000388e:	2101      	movs	r1, #1
    const out_fct_wrap_type out_fct_wrap = {out, arg};
10003890:	9002      	str	r0, [sp, #8]
    return _vsnprintf(_out_fct, (char *) (uintptr_t) &out_fct_wrap, (size_t) -1, format, va);
10003892:	9300      	str	r3, [sp, #0]
10003894:	4803      	ldr	r0, [pc, #12]	; (100038a4 <vfctprintf+0x1c>)
10003896:	0013      	movs	r3, r2
10003898:	424a      	negs	r2, r1
1000389a:	a902      	add	r1, sp, #8
1000389c:	f7ff fa72 	bl	10002d84 <_vsnprintf>
}
100038a0:	b005      	add	sp, #20
100038a2:	bd00      	pop	{pc}
100038a4:	100025bd 	.word	0x100025bd

100038a8 <weak_raw_vprintf>:
    bool rc = weak_raw_vprintf(fmt, va);
    va_end(va);
    return rc;
}

bool weak_raw_vprintf(const char *fmt, va_list args) {
100038a8:	b510      	push	{r4, lr}
    if (lazy_vsnprintf) {
100038aa:	4a09      	ldr	r2, [pc, #36]	; (100038d0 <weak_raw_vprintf+0x28>)
bool weak_raw_vprintf(const char *fmt, va_list args) {
100038ac:	0003      	movs	r3, r0
    if (lazy_vsnprintf) {
100038ae:	6814      	ldr	r4, [r2, #0]
bool weak_raw_vprintf(const char *fmt, va_list args) {
100038b0:	b084      	sub	sp, #16
    if (lazy_vsnprintf) {
100038b2:	2c00      	cmp	r4, #0
100038b4:	d008      	beq.n	100038c8 <weak_raw_vprintf+0x20>
        char buffer[1];
        lazy_vsnprintf(_out_char, buffer, (size_t) -1, fmt, args);
100038b6:	2201      	movs	r2, #1
100038b8:	9100      	str	r1, [sp, #0]
100038ba:	4806      	ldr	r0, [pc, #24]	; (100038d4 <weak_raw_vprintf+0x2c>)
100038bc:	4252      	negs	r2, r2
100038be:	a903      	add	r1, sp, #12
100038c0:	47a0      	blx	r4
        return true;
100038c2:	2001      	movs	r0, #1
    } else {
        puts(fmt);
        return false;
    }
}
100038c4:	b004      	add	sp, #16
100038c6:	bd10      	pop	{r4, pc}
        puts(fmt);
100038c8:	f000 f9cc 	bl	10003c64 <__wrap_puts>
        return false;
100038cc:	2000      	movs	r0, #0
100038ce:	e7f9      	b.n	100038c4 <weak_raw_vprintf+0x1c>
100038d0:	20023b44 	.word	0x20023b44
100038d4:	100025ad 	.word	0x100025ad

100038d8 <runtime_init>:
                   | (0x7 << 1) // size 2^(7 + 1) = 256
                   | (subregion_select << 8)
                   | 0x10000000; // XN = disable instruction fetch; no other bits means no permissions
}

void runtime_init(void) {
100038d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100038da:	4a2b      	ldr	r2, [pc, #172]	; (10003988 <runtime_init+0xb0>)
100038dc:	4b2b      	ldr	r3, [pc, #172]	; (1000398c <runtime_init+0xb4>)
100038de:	492c      	ldr	r1, [pc, #176]	; (10003990 <runtime_init+0xb8>)
100038e0:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100038e2:	4a2c      	ldr	r2, [pc, #176]	; (10003994 <runtime_init+0xbc>)
100038e4:	4b2c      	ldr	r3, [pc, #176]	; (10003998 <runtime_init+0xc0>)
100038e6:	601a      	str	r2, [r3, #0]
100038e8:	0014      	movs	r4, r2
100038ea:	688b      	ldr	r3, [r1, #8]
100038ec:	439c      	bics	r4, r3
100038ee:	d1fb      	bne.n	100038e8 <runtime_init+0x10>
    extern void (*__preinit_array_end)();

    // Call each function in the list.
    // We have to take the address of the symbols, as __preinit_array_start *is*
    // the first function pointer, not the address of it.
    for (void (**p)() = &__preinit_array_start; p < &__preinit_array_end; ++p) {
100038f0:	4d2a      	ldr	r5, [pc, #168]	; (1000399c <runtime_init+0xc4>)
100038f2:	4e2b      	ldr	r6, [pc, #172]	; (100039a0 <runtime_init+0xc8>)
100038f4:	42b5      	cmp	r5, r6
100038f6:	d208      	bcs.n	1000390a <runtime_init+0x32>
100038f8:	3e01      	subs	r6, #1
100038fa:	1b76      	subs	r6, r6, r5
100038fc:	08b6      	lsrs	r6, r6, #2
        (*p)();
100038fe:	cd08      	ldmia	r5!, {r3}
10003900:	4798      	blx	r3
    for (void (**p)() = &__preinit_array_start; p < &__preinit_array_end; ++p) {
10003902:	0023      	movs	r3, r4
10003904:	3401      	adds	r4, #1
10003906:	42b3      	cmp	r3, r6
10003908:	d1f9      	bne.n	100038fe <runtime_init+0x26>
    }

    // After calling preinit we have enough runtime to do the exciting maths
    // in clocks_init
    clocks_init();
1000390a:	f7fd fd4b 	bl	100013a4 <clocks_init>
1000390e:	4a25      	ldr	r2, [pc, #148]	; (100039a4 <runtime_init+0xcc>)
10003910:	4b21      	ldr	r3, [pc, #132]	; (10003998 <runtime_init+0xc0>)
10003912:	601a      	str	r2, [r3, #0]
10003914:	4a1e      	ldr	r2, [pc, #120]	; (10003990 <runtime_init+0xb8>)
10003916:	6893      	ldr	r3, [r2, #8]
10003918:	43db      	mvns	r3, r3
1000391a:	01db      	lsls	r3, r3, #7
1000391c:	09dc      	lsrs	r4, r3, #7
1000391e:	2b00      	cmp	r3, #0
10003920:	d1f9      	bne.n	10003916 <runtime_init+0x3e>
    unreset_block_wait(RESETS_RESET_BITS);

#if !PICO_IE_26_29_UNCHANGED_ON_RESET
    // after resetting BANK0 we should disable IE on 26-29
    hw_clear_alias(padsbank0_hw)->io[26] = hw_clear_alias(padsbank0_hw)->io[27] =
            hw_clear_alias(padsbank0_hw)->io[28] = hw_clear_alias(padsbank0_hw)->io[29] = PADS_BANK0_GPIO0_IE_BITS;
10003922:	2240      	movs	r2, #64	; 0x40
10003924:	4b20      	ldr	r3, [pc, #128]	; (100039a8 <runtime_init+0xd0>)

    extern mutex_t __mutex_array_start;
    extern mutex_t __mutex_array_end;

    // the first function pointer, not the address of it.
    for (mutex_t *m = &__mutex_array_start; m < &__mutex_array_end; m++) {
10003926:	4d21      	ldr	r5, [pc, #132]	; (100039ac <runtime_init+0xd4>)
10003928:	4f21      	ldr	r7, [pc, #132]	; (100039b0 <runtime_init+0xd8>)
            hw_clear_alias(padsbank0_hw)->io[28] = hw_clear_alias(padsbank0_hw)->io[29] = PADS_BANK0_GPIO0_IE_BITS;
1000392a:	679a      	str	r2, [r3, #120]	; 0x78
1000392c:	675a      	str	r2, [r3, #116]	; 0x74
    hw_clear_alias(padsbank0_hw)->io[26] = hw_clear_alias(padsbank0_hw)->io[27] =
1000392e:	671a      	str	r2, [r3, #112]	; 0x70
10003930:	66da      	str	r2, [r3, #108]	; 0x6c
    for (mutex_t *m = &__mutex_array_start; m < &__mutex_array_end; m++) {
10003932:	42bd      	cmp	r5, r7
10003934:	d20b      	bcs.n	1000394e <runtime_init+0x76>
10003936:	2600      	movs	r6, #0
10003938:	3f01      	subs	r7, #1
1000393a:	1b7f      	subs	r7, r7, r5
1000393c:	08ff      	lsrs	r7, r7, #3
        mutex_init(m);
1000393e:	0028      	movs	r0, r5
10003940:	f7fe f9c2 	bl	10001cc8 <mutex_init>
    for (mutex_t *m = &__mutex_array_start; m < &__mutex_array_end; m++) {
10003944:	3508      	adds	r5, #8
10003946:	0033      	movs	r3, r6
10003948:	3601      	adds	r6, #1
1000394a:	42bb      	cmp	r3, r7
1000394c:	d1f7      	bne.n	1000393e <runtime_init+0x66>
    }

#if !(PICO_NO_RAM_VECTOR_TABLE || PICO_NO_FLASH)
    __builtin_memcpy(ram_vector_table, (uint32_t *) scb_hw->vtor, sizeof(ram_vector_table));
1000394e:	4e19      	ldr	r6, [pc, #100]	; (100039b4 <runtime_init+0xdc>)
10003950:	4d19      	ldr	r5, [pc, #100]	; (100039b8 <runtime_init+0xe0>)
10003952:	22c0      	movs	r2, #192	; 0xc0
10003954:	68a9      	ldr	r1, [r5, #8]
10003956:	0030      	movs	r0, r6
10003958:	f7fd fbca 	bl	100010f0 <__wrap___aeabi_memcpy>
    scb_hw->vtor = (intptr_t) ram_vector_table;
1000395c:	60ae      	str	r6, [r5, #8]
    // install core0 stack guard
    extern char __StackBottom;
    runtime_install_stack_guard(&__StackBottom);
#endif

    spin_locks_reset();
1000395e:	f000 fbbd 	bl	100040dc <spin_locks_reset>
    irq_init_priorities();
10003962:	f7fe f931 	bl	10001bc8 <irq_init_priorities>
    alarm_pool_init_default();
10003966:	f000 fe03 	bl	10004570 <alarm_pool_init_default>
    extern void (*__init_array_end)();

    // Call each function in the list.
    // We have to take the address of the symbols, as __init_array_start *is*
    // the first function pointer, not the address of it.
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {
1000396a:	4d14      	ldr	r5, [pc, #80]	; (100039bc <runtime_init+0xe4>)
1000396c:	4e14      	ldr	r6, [pc, #80]	; (100039c0 <runtime_init+0xe8>)
1000396e:	42b5      	cmp	r5, r6
10003970:	d208      	bcs.n	10003984 <runtime_init+0xac>
10003972:	3e01      	subs	r6, #1
10003974:	1b76      	subs	r6, r6, r5
10003976:	08b6      	lsrs	r6, r6, #2
        (*p)();
10003978:	cd08      	ldmia	r5!, {r3}
1000397a:	4798      	blx	r3
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {
1000397c:	0023      	movs	r3, r4
1000397e:	3401      	adds	r4, #1
10003980:	429e      	cmp	r6, r3
10003982:	d1f9      	bne.n	10003978 <runtime_init+0xa0>
    }

}
10003984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10003986:	46c0      	nop			; (mov r8, r8)
10003988:	ffffcdbf 	.word	0xffffcdbf
1000398c:	4000e000 	.word	0x4000e000
10003990:	4000c000 	.word	0x4000c000
10003994:	003c7ffe 	.word	0x003c7ffe
10003998:	4000f000 	.word	0x4000f000
1000399c:	20003030 	.word	0x20003030
100039a0:	20003040 	.word	0x20003040
100039a4:	01ffffff 	.word	0x01ffffff
100039a8:	4001f000 	.word	0x4001f000
100039ac:	20003028 	.word	0x20003028
100039b0:	20003030 	.word	0x20003030
100039b4:	20000000 	.word	0x20000000
100039b8:	e000ed00 	.word	0xe000ed00
100039bc:	20003040 	.word	0x20003040
100039c0:	20003048 	.word	0x20003048

100039c4 <_sbrk>:
void *_sbrk(int incr) {
    extern char end; /* Set by linker.  */
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0)
100039c4:	4a09      	ldr	r2, [pc, #36]	; (100039ec <_sbrk+0x28>)
void *_sbrk(int incr) {
100039c6:	0003      	movs	r3, r0
    if (heap_end == 0)
100039c8:	6810      	ldr	r0, [r2, #0]
100039ca:	2800      	cmp	r0, #0
100039cc:	d005      	beq.n	100039da <_sbrk+0x16>
        heap_end = &end;

    prev_heap_end = heap_end;
    char *next_heap_end = heap_end + incr;

    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
100039ce:	4908      	ldr	r1, [pc, #32]	; (100039f0 <_sbrk+0x2c>)
    char *next_heap_end = heap_end + incr;
100039d0:	18c3      	adds	r3, r0, r3
    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
100039d2:	428b      	cmp	r3, r1
100039d4:	d207      	bcs.n	100039e6 <_sbrk+0x22>
#else
        return (char *) -1;
#endif
    }

    heap_end = next_heap_end;
100039d6:	6013      	str	r3, [r2, #0]
    return (void *) prev_heap_end;
}
100039d8:	4770      	bx	lr
        heap_end = &end;
100039da:	4806      	ldr	r0, [pc, #24]	; (100039f4 <_sbrk+0x30>)
    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
100039dc:	4904      	ldr	r1, [pc, #16]	; (100039f0 <_sbrk+0x2c>)
    char *next_heap_end = heap_end + incr;
100039de:	18c3      	adds	r3, r0, r3
        heap_end = &end;
100039e0:	6010      	str	r0, [r2, #0]
    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
100039e2:	428b      	cmp	r3, r1
100039e4:	d3f7      	bcc.n	100039d6 <_sbrk+0x12>
        return (char *) -1;
100039e6:	2001      	movs	r0, #1
100039e8:	4240      	negs	r0, r0
100039ea:	e7f5      	b.n	100039d8 <_sbrk+0x14>
100039ec:	200234c0 	.word	0x200234c0
100039f0:	20040000 	.word	0x20040000
100039f4:	20023b8c 	.word	0x20023b8c

100039f8 <exit>:
    __asm__("bkpt #0");
100039f8:	be00      	bkpt	0x0000
100039fa:	e7fd      	b.n	100039f8 <exit>

100039fc <panic>:
//  right now, print mutex may be uninitialised (in which case it deadlocks - although after printing "PANIC")
//  more importantly there may be no stdout/UART initialized yet
// todo we may want to think about where we print panic messages to; writing to USB appears to work
//  though it doesn't seem like we can expect it to... fine for now
//
void __attribute__((noreturn)) __printflike(1, 0) panic(const char *fmt, ...) {
100039fc:	b40f      	push	{r0, r1, r2, r3}
100039fe:	b500      	push	{lr}
    puts("\n*** PANIC ***\n");
10003a00:	4808      	ldr	r0, [pc, #32]	; (10003a24 <panic+0x28>)
void __attribute__((noreturn)) __printflike(1, 0) panic(const char *fmt, ...) {
10003a02:	b083      	sub	sp, #12
    puts("\n*** PANIC ***\n");
10003a04:	f000 f92e 	bl	10003c64 <__wrap_puts>
    if (fmt) {
10003a08:	9b04      	ldr	r3, [sp, #16]
10003a0a:	2b00      	cmp	r3, #0
10003a0c:	d007      	beq.n	10003a1e <panic+0x22>
#if PICO_PRINTF_NONE
        puts(fmt);
#else
        va_list args;
        va_start(args, fmt);
10003a0e:	a905      	add	r1, sp, #20
#if PICO_PRINTF_ALWAYS_INCLUDED
        vprintf(fmt, args);
#else
        weak_raw_vprintf(fmt, args);
10003a10:	0018      	movs	r0, r3
        va_start(args, fmt);
10003a12:	9101      	str	r1, [sp, #4]
        weak_raw_vprintf(fmt, args);
10003a14:	f7ff ff48 	bl	100038a8 <weak_raw_vprintf>
#endif
        va_end(args);
        puts("\n");
10003a18:	4803      	ldr	r0, [pc, #12]	; (10003a28 <panic+0x2c>)
10003a1a:	f000 f923 	bl	10003c64 <__wrap_puts>
10003a1e:	be00      	bkpt	0x0000
10003a20:	e7fd      	b.n	10003a1e <panic+0x22>
10003a22:	46c0      	nop			; (mov r8, r8)
10003a24:	10008f88 	.word	0x10008f88
10003a28:	10008f98 	.word	0x10008f98

10003a2c <hard_assertion_failure>:
    }

    _exit(1);
}

void hard_assertion_failure(void) {
10003a2c:	b510      	push	{r4, lr}
    panic("Hard assert");
10003a2e:	4801      	ldr	r0, [pc, #4]	; (10003a34 <hard_assertion_failure+0x8>)
10003a30:	f7ff ffe4 	bl	100039fc <panic>
10003a34:	10008f9c 	.word	0x10008f9c

10003a38 <stdio_out_chars_crlf.part.0>:
}
static void print_serialize_end() {
}
#endif

static void stdio_out_chars_crlf(stdio_driver_t *driver, const char *s, int len) {
10003a38:	b5f0      	push	{r4, r5, r6, r7, lr}
10003a3a:	4646      	mov	r6, r8
10003a3c:	464f      	mov	r7, r9
10003a3e:	46d6      	mov	lr, sl
10003a40:	4680      	mov	r8, r0
10003a42:	b5c0      	push	{r6, r7, lr}
10003a44:	000e      	movs	r6, r1
10003a46:	1e17      	subs	r7, r2, #0
        driver->out_chars(s, len);
        return;
    }
    int first_of_chunk = 0;
    static const char crlf_str[] = {'\r', '\n'};
    for (int i = 0; i < len; i++) {
10003a48:	dd3f      	ble.n	10003aca <stdio_out_chars_crlf.part.0+0x92>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10003a4a:	1e4b      	subs	r3, r1, #1
10003a4c:	4699      	mov	r9, r3
        if (s[i] == '\n' && !prev_char_was_cr) {
            if (i > first_of_chunk) {
                driver->out_chars(&s[first_of_chunk], i - first_of_chunk);
            }
            driver->out_chars(crlf_str, 2);
10003a4e:	4b21      	ldr	r3, [pc, #132]	; (10003ad4 <stdio_out_chars_crlf.part.0+0x9c>)
    for (int i = 0; i < len; i++) {
10003a50:	2501      	movs	r5, #1
10003a52:	2400      	movs	r4, #0
    int first_of_chunk = 0;
10003a54:	2000      	movs	r0, #0
            driver->out_chars(crlf_str, 2);
10003a56:	469a      	mov	sl, r3
10003a58:	e00d      	b.n	10003a76 <stdio_out_chars_crlf.part.0+0x3e>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10003a5a:	464b      	mov	r3, r9
10003a5c:	5d1b      	ldrb	r3, [r3, r4]
10003a5e:	3b0d      	subs	r3, #13
10003a60:	425a      	negs	r2, r3
10003a62:	4153      	adcs	r3, r2
        if (s[i] == '\n' && !prev_char_was_cr) {
10003a64:	5d32      	ldrb	r2, [r6, r4]
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10003a66:	b2db      	uxtb	r3, r3
        if (s[i] == '\n' && !prev_char_was_cr) {
10003a68:	2a0a      	cmp	r2, #10
10003a6a:	d00b      	beq.n	10003a84 <stdio_out_chars_crlf.part.0+0x4c>
            first_of_chunk = i + 1;
10003a6c:	002b      	movs	r3, r5
    for (int i = 0; i < len; i++) {
10003a6e:	3401      	adds	r4, #1
10003a70:	3501      	adds	r5, #1
10003a72:	429f      	cmp	r7, r3
10003a74:	dd1a      	ble.n	10003aac <stdio_out_chars_crlf.part.0+0x74>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10003a76:	2c00      	cmp	r4, #0
10003a78:	d1ef      	bne.n	10003a5a <stdio_out_chars_crlf.part.0+0x22>
10003a7a:	4643      	mov	r3, r8
        if (s[i] == '\n' && !prev_char_was_cr) {
10003a7c:	5d32      	ldrb	r2, [r6, r4]
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10003a7e:	7c1b      	ldrb	r3, [r3, #16]
        if (s[i] == '\n' && !prev_char_was_cr) {
10003a80:	2a0a      	cmp	r2, #10
10003a82:	d1f3      	bne.n	10003a6c <stdio_out_chars_crlf.part.0+0x34>
10003a84:	2b00      	cmp	r3, #0
10003a86:	d1f1      	bne.n	10003a6c <stdio_out_chars_crlf.part.0+0x34>
            if (i > first_of_chunk) {
10003a88:	42a0      	cmp	r0, r4
10003a8a:	da04      	bge.n	10003a96 <stdio_out_chars_crlf.part.0+0x5e>
                driver->out_chars(&s[first_of_chunk], i - first_of_chunk);
10003a8c:	4643      	mov	r3, r8
10003a8e:	1a21      	subs	r1, r4, r0
10003a90:	681b      	ldr	r3, [r3, #0]
10003a92:	1830      	adds	r0, r6, r0
10003a94:	4798      	blx	r3
            driver->out_chars(crlf_str, 2);
10003a96:	4643      	mov	r3, r8
10003a98:	4650      	mov	r0, sl
10003a9a:	681b      	ldr	r3, [r3, #0]
10003a9c:	2102      	movs	r1, #2
10003a9e:	4798      	blx	r3
    for (int i = 0; i < len; i++) {
10003aa0:	3401      	adds	r4, #1
            first_of_chunk = i + 1;
10003aa2:	0028      	movs	r0, r5
10003aa4:	002b      	movs	r3, r5
    for (int i = 0; i < len; i++) {
10003aa6:	3501      	adds	r5, #1
10003aa8:	429f      	cmp	r7, r3
10003aaa:	dce4      	bgt.n	10003a76 <stdio_out_chars_crlf.part.0+0x3e>
        }
    }
    if (first_of_chunk < len) {
10003aac:	4287      	cmp	r7, r0
10003aae:	dd04      	ble.n	10003aba <stdio_out_chars_crlf.part.0+0x82>
        driver->out_chars(&s[first_of_chunk], len - first_of_chunk);
10003ab0:	4643      	mov	r3, r8
10003ab2:	1a39      	subs	r1, r7, r0
10003ab4:	681b      	ldr	r3, [r3, #0]
10003ab6:	1830      	adds	r0, r6, r0
10003ab8:	4798      	blx	r3
    }
    if (len > 0) {
        driver->last_ended_with_cr = s[len - 1] == '\r';
10003aba:	19f6      	adds	r6, r6, r7
10003abc:	3e01      	subs	r6, #1
10003abe:	7833      	ldrb	r3, [r6, #0]
10003ac0:	3b0d      	subs	r3, #13
10003ac2:	425a      	negs	r2, r3
10003ac4:	4153      	adcs	r3, r2
10003ac6:	4642      	mov	r2, r8
10003ac8:	7413      	strb	r3, [r2, #16]
    }
#else
    driver->out_chars(s, len);
#endif
}
10003aca:	bce0      	pop	{r5, r6, r7}
10003acc:	46ba      	mov	sl, r7
10003ace:	46b1      	mov	r9, r6
10003ad0:	46a8      	mov	r8, r5
10003ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003ad4:	10008fa8 	.word	0x10008fa8

10003ad8 <stdio_buffered_printer>:
        }
        buffer->used = 0;
    }
}

static void stdio_buffered_printer(char c, void *arg) {
10003ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003ada:	46ce      	mov	lr, r9
10003adc:	4647      	mov	r7, r8
10003ade:	000d      	movs	r5, r1
    stdio_stack_buffer_t *buffer = (stdio_stack_buffer_t *)arg;
    if (buffer->used == PICO_STDIO_STACK_BUFFER_SIZE) {
10003ae0:	6809      	ldr	r1, [r1, #0]
static void stdio_buffered_printer(char c, void *arg) {
10003ae2:	0006      	movs	r6, r0
10003ae4:	b580      	push	{r7, lr}
    if (buffer->used == PICO_STDIO_STACK_BUFFER_SIZE) {
10003ae6:	2980      	cmp	r1, #128	; 0x80
10003ae8:	d007      	beq.n	10003afa <stdio_buffered_printer+0x22>
        stdio_stack_buffer_flush(buffer);
    }
    buffer->buf[buffer->used++] = c;
10003aea:	1c4b      	adds	r3, r1, #1
10003aec:	602b      	str	r3, [r5, #0]
10003aee:	186d      	adds	r5, r5, r1
10003af0:	712e      	strb	r6, [r5, #4]
}
10003af2:	bcc0      	pop	{r6, r7}
10003af4:	46b9      	mov	r9, r7
10003af6:	46b0      	mov	r8, r6
10003af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (stdio_driver_t *d = drivers; d; d = d->next) {
10003afa:	4b13      	ldr	r3, [pc, #76]	; (10003b48 <stdio_buffered_printer+0x70>)
10003afc:	681c      	ldr	r4, [r3, #0]
10003afe:	2c00      	cmp	r4, #0
10003b00:	d01b      	beq.n	10003b3a <stdio_buffered_printer+0x62>
            if (filter && filter != d) continue;
10003b02:	4b12      	ldr	r3, [pc, #72]	; (10003b4c <stdio_buffered_printer+0x74>)
10003b04:	4698      	mov	r8, r3
            stdio_out_chars_crlf(d, buffer->buf, buffer->used);
10003b06:	1d2b      	adds	r3, r5, #4
10003b08:	4699      	mov	r9, r3
10003b0a:	e002      	b.n	10003b12 <stdio_buffered_printer+0x3a>
        for (stdio_driver_t *d = drivers; d; d = d->next) {
10003b0c:	68e4      	ldr	r4, [r4, #12]
10003b0e:	2c00      	cmp	r4, #0
10003b10:	d013      	beq.n	10003b3a <stdio_buffered_printer+0x62>
            if (!d->out_chars) continue;
10003b12:	6827      	ldr	r7, [r4, #0]
10003b14:	2f00      	cmp	r7, #0
10003b16:	d0f9      	beq.n	10003b0c <stdio_buffered_printer+0x34>
            if (filter && filter != d) continue;
10003b18:	4643      	mov	r3, r8
10003b1a:	681b      	ldr	r3, [r3, #0]
10003b1c:	2b00      	cmp	r3, #0
10003b1e:	d001      	beq.n	10003b24 <stdio_buffered_printer+0x4c>
10003b20:	429c      	cmp	r4, r3
10003b22:	d1f3      	bne.n	10003b0c <stdio_buffered_printer+0x34>
    if (!driver->crlf_enabled) {
10003b24:	7c63      	ldrb	r3, [r4, #17]
            stdio_out_chars_crlf(d, buffer->buf, buffer->used);
10003b26:	682a      	ldr	r2, [r5, #0]
    if (!driver->crlf_enabled) {
10003b28:	2b00      	cmp	r3, #0
10003b2a:	d009      	beq.n	10003b40 <stdio_buffered_printer+0x68>
10003b2c:	0020      	movs	r0, r4
10003b2e:	4649      	mov	r1, r9
10003b30:	f7ff ff82 	bl	10003a38 <stdio_out_chars_crlf.part.0>
        for (stdio_driver_t *d = drivers; d; d = d->next) {
10003b34:	68e4      	ldr	r4, [r4, #12]
10003b36:	2c00      	cmp	r4, #0
10003b38:	d1eb      	bne.n	10003b12 <stdio_buffered_printer+0x3a>
}
10003b3a:	2301      	movs	r3, #1
10003b3c:	2100      	movs	r1, #0
10003b3e:	e7d5      	b.n	10003aec <stdio_buffered_printer+0x14>
        driver->out_chars(s, len);
10003b40:	0011      	movs	r1, r2
10003b42:	4648      	mov	r0, r9
10003b44:	47b8      	blx	r7
        return;
10003b46:	e7e1      	b.n	10003b0c <stdio_buffered_printer+0x34>
10003b48:	200234b4 	.word	0x200234b4
10003b4c:	200234bc 	.word	0x200234bc

10003b50 <stdio_put_string.isra.0>:
static bool stdio_put_string(const char *s, int len, bool newline) {
10003b50:	b5f0      	push	{r4, r5, r6, r7, lr}
10003b52:	4657      	mov	r7, sl
10003b54:	4645      	mov	r5, r8
10003b56:	46de      	mov	lr, fp
10003b58:	464e      	mov	r6, r9
 *  \ingroup hardware_sync
 *
 * \return The core number the call was made from
 */
static inline uint get_core_num() {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
10003b5a:	23d0      	movs	r3, #208	; 0xd0
10003b5c:	b5e0      	push	{r5, r6, r7, lr}
10003b5e:	061b      	lsls	r3, r3, #24
10003b60:	681c      	ldr	r4, [r3, #0]
    if (!mutex_try_enter(&print_mutex, &owner)) {
10003b62:	4b35      	ldr	r3, [pc, #212]	; (10003c38 <stdio_put_string.isra.0+0xe8>)
static bool stdio_put_string(const char *s, int len, bool newline) {
10003b64:	b083      	sub	sp, #12
10003b66:	0007      	movs	r7, r0
10003b68:	000d      	movs	r5, r1
    if (!mutex_try_enter(&print_mutex, &owner)) {
10003b6a:	0018      	movs	r0, r3
10003b6c:	a901      	add	r1, sp, #4
static bool stdio_put_string(const char *s, int len, bool newline) {
10003b6e:	4690      	mov	r8, r2
    if (!mutex_try_enter(&print_mutex, &owner)) {
10003b70:	469a      	mov	sl, r3
10003b72:	f005 f87d 	bl	10008c70 <__mutex_try_enter_veneer>
10003b76:	4681      	mov	r9, r0
10003b78:	2800      	cmp	r0, #0
10003b7a:	d107      	bne.n	10003b8c <stdio_put_string.isra.0+0x3c>
        if (owner == core_num) {
10003b7c:	9b01      	ldr	r3, [sp, #4]
10003b7e:	429c      	cmp	r4, r3
10003b80:	d004      	beq.n	10003b8c <stdio_put_string.isra.0+0x3c>
        mutex_enter_blocking(&print_mutex);
10003b82:	4650      	mov	r0, sl
10003b84:	f005 f88c 	bl	10008ca0 <__mutex_enter_blocking_veneer>
    return true;
10003b88:	2301      	movs	r3, #1
10003b8a:	4699      	mov	r9, r3
    if (len == -1) len = strlen(s);
10003b8c:	1c6b      	adds	r3, r5, #1
10003b8e:	d103      	bne.n	10003b98 <stdio_put_string.isra.0+0x48>
10003b90:	0038      	movs	r0, r7
10003b92:	f004 feef 	bl	10008974 <strlen>
10003b96:	0005      	movs	r5, r0
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10003b98:	4b28      	ldr	r3, [pc, #160]	; (10003c3c <stdio_put_string.isra.0+0xec>)
10003b9a:	681c      	ldr	r4, [r3, #0]
10003b9c:	2c00      	cmp	r4, #0
10003b9e:	d02f      	beq.n	10003c00 <stdio_put_string.isra.0+0xb0>
            const char c = '\n';
10003ba0:	230a      	movs	r3, #10
        if (filter && filter != driver) continue;
10003ba2:	4e27      	ldr	r6, [pc, #156]	; (10003c40 <stdio_put_string.isra.0+0xf0>)
            const char c = '\n';
10003ba4:	469b      	mov	fp, r3
10003ba6:	e002      	b.n	10003bae <stdio_put_string.isra.0+0x5e>
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10003ba8:	68e4      	ldr	r4, [r4, #12]
10003baa:	2c00      	cmp	r4, #0
10003bac:	d028      	beq.n	10003c00 <stdio_put_string.isra.0+0xb0>
        if (!driver->out_chars) continue;
10003bae:	6822      	ldr	r2, [r4, #0]
10003bb0:	2a00      	cmp	r2, #0
10003bb2:	d0f9      	beq.n	10003ba8 <stdio_put_string.isra.0+0x58>
        if (filter && filter != driver) continue;
10003bb4:	6833      	ldr	r3, [r6, #0]
10003bb6:	2b00      	cmp	r3, #0
10003bb8:	d001      	beq.n	10003bbe <stdio_put_string.isra.0+0x6e>
10003bba:	42a3      	cmp	r3, r4
10003bbc:	d1f4      	bne.n	10003ba8 <stdio_put_string.isra.0+0x58>
    if (!driver->crlf_enabled) {
10003bbe:	7c63      	ldrb	r3, [r4, #17]
10003bc0:	2b00      	cmp	r3, #0
10003bc2:	d027      	beq.n	10003c14 <stdio_put_string.isra.0+0xc4>
10003bc4:	002a      	movs	r2, r5
10003bc6:	0039      	movs	r1, r7
10003bc8:	0020      	movs	r0, r4
10003bca:	f7ff ff35 	bl	10003a38 <stdio_out_chars_crlf.part.0>
        if (newline) {
10003bce:	4643      	mov	r3, r8
10003bd0:	2b00      	cmp	r3, #0
10003bd2:	d0e9      	beq.n	10003ba8 <stdio_put_string.isra.0+0x58>
            const char c = '\n';
10003bd4:	466b      	mov	r3, sp
10003bd6:	465a      	mov	r2, fp
10003bd8:	711a      	strb	r2, [r3, #4]
    if (!driver->crlf_enabled) {
10003bda:	7c63      	ldrb	r3, [r4, #17]
10003bdc:	2b00      	cmp	r3, #0
10003bde:	d01d      	beq.n	10003c1c <stdio_put_string.isra.0+0xcc>
        if (s[i] == '\n' && !prev_char_was_cr) {
10003be0:	7c23      	ldrb	r3, [r4, #16]
10003be2:	2b00      	cmp	r3, #0
10003be4:	d023      	beq.n	10003c2e <stdio_put_string.isra.0+0xde>
        driver->out_chars(&s[first_of_chunk], len - first_of_chunk);
10003be6:	2101      	movs	r1, #1
10003be8:	6823      	ldr	r3, [r4, #0]
10003bea:	a801      	add	r0, sp, #4
10003bec:	4798      	blx	r3
        driver->last_ended_with_cr = s[len - 1] == '\r';
10003bee:	466b      	mov	r3, sp
10003bf0:	791b      	ldrb	r3, [r3, #4]
10003bf2:	3b0d      	subs	r3, #13
10003bf4:	425a      	negs	r2, r3
10003bf6:	4153      	adcs	r3, r2
10003bf8:	7423      	strb	r3, [r4, #16]
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10003bfa:	68e4      	ldr	r4, [r4, #12]
10003bfc:	2c00      	cmp	r4, #0
10003bfe:	d1d6      	bne.n	10003bae <stdio_put_string.isra.0+0x5e>
    if (serialzed) {
10003c00:	464b      	mov	r3, r9
10003c02:	2b00      	cmp	r3, #0
10003c04:	d10f      	bne.n	10003c26 <stdio_put_string.isra.0+0xd6>
}
10003c06:	b003      	add	sp, #12
10003c08:	bcf0      	pop	{r4, r5, r6, r7}
10003c0a:	46bb      	mov	fp, r7
10003c0c:	46b2      	mov	sl, r6
10003c0e:	46a9      	mov	r9, r5
10003c10:	46a0      	mov	r8, r4
10003c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
        driver->out_chars(s, len);
10003c14:	0029      	movs	r1, r5
10003c16:	0038      	movs	r0, r7
10003c18:	4790      	blx	r2
        return;
10003c1a:	e7d8      	b.n	10003bce <stdio_put_string.isra.0+0x7e>
        driver->out_chars(s, len);
10003c1c:	2101      	movs	r1, #1
10003c1e:	6823      	ldr	r3, [r4, #0]
10003c20:	a801      	add	r0, sp, #4
10003c22:	4798      	blx	r3
        return;
10003c24:	e7c0      	b.n	10003ba8 <stdio_put_string.isra.0+0x58>
    mutex_exit(&print_mutex);
10003c26:	4650      	mov	r0, sl
10003c28:	f005 f80a 	bl	10008c40 <__mutex_exit_veneer>
    return len;
10003c2c:	e7eb      	b.n	10003c06 <stdio_put_string.isra.0+0xb6>
            driver->out_chars(crlf_str, 2);
10003c2e:	2102      	movs	r1, #2
10003c30:	4804      	ldr	r0, [pc, #16]	; (10003c44 <stdio_put_string.isra.0+0xf4>)
10003c32:	6823      	ldr	r3, [r4, #0]
10003c34:	4798      	blx	r3
    if (first_of_chunk < len) {
10003c36:	e7da      	b.n	10003bee <stdio_put_string.isra.0+0x9e>
10003c38:	20003028 	.word	0x20003028
10003c3c:	200234b4 	.word	0x200234b4
10003c40:	200234bc 	.word	0x200234bc
10003c44:	10008fa8 	.word	0x10008fa8

10003c48 <__wrap_putchar>:
int WRAPPER_FUNC(putchar)(int c) {
10003c48:	b510      	push	{r4, lr}
10003c4a:	b082      	sub	sp, #8
    char cc = c;
10003c4c:	466b      	mov	r3, sp
int WRAPPER_FUNC(putchar)(int c) {
10003c4e:	0004      	movs	r4, r0
    stdio_put_string(&cc, 1, false);
10003c50:	2200      	movs	r2, #0
    char cc = c;
10003c52:	1dd8      	adds	r0, r3, #7
    stdio_put_string(&cc, 1, false);
10003c54:	2101      	movs	r1, #1
    char cc = c;
10003c56:	7004      	strb	r4, [r0, #0]
    stdio_put_string(&cc, 1, false);
10003c58:	f7ff ff7a 	bl	10003b50 <stdio_put_string.isra.0>
}
10003c5c:	0020      	movs	r0, r4
10003c5e:	b002      	add	sp, #8
10003c60:	bd10      	pop	{r4, pc}
10003c62:	46c0      	nop			; (mov r8, r8)

10003c64 <__wrap_puts>:
int WRAPPER_FUNC(puts)(const char *s) {
10003c64:	b570      	push	{r4, r5, r6, lr}
10003c66:	0004      	movs	r4, r0
    int len = strlen(s);
10003c68:	f004 fe84 	bl	10008974 <strlen>
    stdio_put_string(s, len, true);
10003c6c:	2201      	movs	r2, #1
10003c6e:	0001      	movs	r1, r0
    int len = strlen(s);
10003c70:	0005      	movs	r5, r0
    stdio_put_string(s, len, true);
10003c72:	0020      	movs	r0, r4
10003c74:	f7ff ff6c 	bl	10003b50 <stdio_put_string.isra.0>
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003c78:	4b08      	ldr	r3, [pc, #32]	; (10003c9c <__wrap_puts+0x38>)
10003c7a:	681c      	ldr	r4, [r3, #0]
10003c7c:	2c00      	cmp	r4, #0
10003c7e:	d006      	beq.n	10003c8e <__wrap_puts+0x2a>
        if (d->out_flush) d->out_flush();
10003c80:	6863      	ldr	r3, [r4, #4]
10003c82:	2b00      	cmp	r3, #0
10003c84:	d005      	beq.n	10003c92 <__wrap_puts+0x2e>
10003c86:	4798      	blx	r3
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003c88:	68e4      	ldr	r4, [r4, #12]
10003c8a:	2c00      	cmp	r4, #0
10003c8c:	d1f8      	bne.n	10003c80 <__wrap_puts+0x1c>
}
10003c8e:	0028      	movs	r0, r5
10003c90:	bd70      	pop	{r4, r5, r6, pc}
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003c92:	68e4      	ldr	r4, [r4, #12]
10003c94:	2c00      	cmp	r4, #0
10003c96:	d1f3      	bne.n	10003c80 <__wrap_puts+0x1c>
10003c98:	e7f9      	b.n	10003c8e <__wrap_puts+0x2a>
10003c9a:	46c0      	nop			; (mov r8, r8)
10003c9c:	200234b4 	.word	0x200234b4

10003ca0 <stdio_set_driver_enabled>:
    stdio_driver_t *prev = drivers;
10003ca0:	4a0d      	ldr	r2, [pc, #52]	; (10003cd8 <stdio_set_driver_enabled+0x38>)
10003ca2:	6813      	ldr	r3, [r2, #0]
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003ca4:	2b00      	cmp	r3, #0
10003ca6:	d013      	beq.n	10003cd0 <stdio_set_driver_enabled+0x30>
        if (d == driver) {
10003ca8:	4283      	cmp	r3, r0
10003caa:	d102      	bne.n	10003cb2 <stdio_set_driver_enabled+0x12>
10003cac:	e009      	b.n	10003cc2 <stdio_set_driver_enabled+0x22>
10003cae:	4298      	cmp	r0, r3
10003cb0:	d008      	beq.n	10003cc4 <stdio_set_driver_enabled+0x24>
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003cb2:	001a      	movs	r2, r3
10003cb4:	68db      	ldr	r3, [r3, #12]
10003cb6:	2b00      	cmp	r3, #0
10003cb8:	d1f9      	bne.n	10003cae <stdio_set_driver_enabled+0xe>
    if (enable) {
10003cba:	2900      	cmp	r1, #0
10003cbc:	d000      	beq.n	10003cc0 <stdio_set_driver_enabled+0x20>
        if (prev) prev->next = driver;
10003cbe:	60d0      	str	r0, [r2, #12]
}
10003cc0:	4770      	bx	lr
        if (d == driver) {
10003cc2:	001a      	movs	r2, r3
            if (!enable) {
10003cc4:	2900      	cmp	r1, #0
10003cc6:	d1fb      	bne.n	10003cc0 <stdio_set_driver_enabled+0x20>
                prev->next = d->next;
10003cc8:	68db      	ldr	r3, [r3, #12]
10003cca:	60d3      	str	r3, [r2, #12]
                driver->next = NULL;
10003ccc:	60c1      	str	r1, [r0, #12]
10003cce:	e7f7      	b.n	10003cc0 <stdio_set_driver_enabled+0x20>
    if (enable) {
10003cd0:	2900      	cmp	r1, #0
10003cd2:	d0f5      	beq.n	10003cc0 <stdio_set_driver_enabled+0x20>
        else drivers = driver;
10003cd4:	6010      	str	r0, [r2, #0]
10003cd6:	e7f3      	b.n	10003cc0 <stdio_set_driver_enabled+0x20>
10003cd8:	200234b4 	.word	0x200234b4

10003cdc <__wrap_vprintf>:

int WRAPPER_FUNC(vprintf)(const char *format, va_list va) {
10003cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
10003cde:	4646      	mov	r6, r8
10003ce0:	46d6      	mov	lr, sl
10003ce2:	464f      	mov	r7, r9
10003ce4:	23d0      	movs	r3, #208	; 0xd0
10003ce6:	b5c0      	push	{r6, r7, lr}
10003ce8:	061b      	lsls	r3, r3, #24
10003cea:	681f      	ldr	r7, [r3, #0]
    if (!mutex_try_enter(&print_mutex, &owner)) {
10003cec:	4b31      	ldr	r3, [pc, #196]	; (10003db4 <__wrap_vprintf+0xd8>)
int WRAPPER_FUNC(vprintf)(const char *format, va_list va) {
10003cee:	b0a2      	sub	sp, #136	; 0x88
10003cf0:	0004      	movs	r4, r0
10003cf2:	000d      	movs	r5, r1
    if (!mutex_try_enter(&print_mutex, &owner)) {
10003cf4:	0018      	movs	r0, r3
10003cf6:	a901      	add	r1, sp, #4
10003cf8:	4698      	mov	r8, r3
10003cfa:	f004 ffb9 	bl	10008c70 <__mutex_try_enter_veneer>
10003cfe:	1e06      	subs	r6, r0, #0
10003d00:	d106      	bne.n	10003d10 <__wrap_vprintf+0x34>
        if (owner == core_num) {
10003d02:	9b01      	ldr	r3, [sp, #4]
10003d04:	429f      	cmp	r7, r3
10003d06:	d003      	beq.n	10003d10 <__wrap_vprintf+0x34>
        mutex_enter_blocking(&print_mutex);
10003d08:	4640      	mov	r0, r8
10003d0a:	f004 ffc9 	bl	10008ca0 <__mutex_enter_blocking_veneer>
    return true;
10003d0e:	3601      	adds	r6, #1
        return 0;
#endif
    }
    int ret;
#if PICO_PRINTF_PICO
    struct stdio_stack_buffer buffer = {.used = 0};
10003d10:	2284      	movs	r2, #132	; 0x84
10003d12:	2100      	movs	r1, #0
10003d14:	a801      	add	r0, sp, #4
10003d16:	f7fd f9e5 	bl	100010e4 <__wrap_memset>
    ret = vfctprintf(stdio_buffered_printer, &buffer, format, va);
10003d1a:	002b      	movs	r3, r5
10003d1c:	0022      	movs	r2, r4
10003d1e:	4826      	ldr	r0, [pc, #152]	; (10003db8 <__wrap_vprintf+0xdc>)
10003d20:	a901      	add	r1, sp, #4
10003d22:	f7ff fdb1 	bl	10003888 <vfctprintf>
    if (buffer->used) {
10003d26:	9b01      	ldr	r3, [sp, #4]
    ret = vfctprintf(stdio_buffered_printer, &buffer, format, va);
10003d28:	0007      	movs	r7, r0
    if (buffer->used) {
10003d2a:	2b00      	cmp	r3, #0
10003d2c:	d115      	bne.n	10003d5a <__wrap_vprintf+0x7e>
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003d2e:	4b23      	ldr	r3, [pc, #140]	; (10003dbc <__wrap_vprintf+0xe0>)
10003d30:	681c      	ldr	r4, [r3, #0]
10003d32:	2c00      	cmp	r4, #0
10003d34:	d006      	beq.n	10003d44 <__wrap_vprintf+0x68>
        if (d->out_flush) d->out_flush();
10003d36:	6863      	ldr	r3, [r4, #4]
10003d38:	2b00      	cmp	r3, #0
10003d3a:	d00c      	beq.n	10003d56 <__wrap_vprintf+0x7a>
10003d3c:	4798      	blx	r3
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003d3e:	68e4      	ldr	r4, [r4, #12]
10003d40:	2c00      	cmp	r4, #0
10003d42:	d1f8      	bne.n	10003d36 <__wrap_vprintf+0x5a>
    printf_none_assert();
#else
    extern int REAL_FUNC(vprintf)(const char *format, va_list va);
    ret = REAL_FUNC(vprintf)(format, va);
#endif
    if (serialzed) {
10003d44:	2e00      	cmp	r6, #0
10003d46:	d12f      	bne.n	10003da8 <__wrap_vprintf+0xcc>
        stdout_serialize_end();
    }
    return ret;
}
10003d48:	0038      	movs	r0, r7
10003d4a:	b022      	add	sp, #136	; 0x88
10003d4c:	bce0      	pop	{r5, r6, r7}
10003d4e:	46ba      	mov	sl, r7
10003d50:	46b1      	mov	r9, r6
10003d52:	46a8      	mov	r8, r5
10003d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003d56:	68e4      	ldr	r4, [r4, #12]
10003d58:	e7eb      	b.n	10003d32 <__wrap_vprintf+0x56>
        for (stdio_driver_t *d = drivers; d; d = d->next) {
10003d5a:	4b18      	ldr	r3, [pc, #96]	; (10003dbc <__wrap_vprintf+0xe0>)
10003d5c:	681d      	ldr	r5, [r3, #0]
10003d5e:	469a      	mov	sl, r3
10003d60:	2d00      	cmp	r5, #0
10003d62:	d025      	beq.n	10003db0 <__wrap_vprintf+0xd4>
            if (filter && filter != d) continue;
10003d64:	4b16      	ldr	r3, [pc, #88]	; (10003dc0 <__wrap_vprintf+0xe4>)
10003d66:	4699      	mov	r9, r3
10003d68:	e002      	b.n	10003d70 <__wrap_vprintf+0x94>
        for (stdio_driver_t *d = drivers; d; d = d->next) {
10003d6a:	68ed      	ldr	r5, [r5, #12]
10003d6c:	2d00      	cmp	r5, #0
10003d6e:	d013      	beq.n	10003d98 <__wrap_vprintf+0xbc>
            if (!d->out_chars) continue;
10003d70:	682c      	ldr	r4, [r5, #0]
10003d72:	2c00      	cmp	r4, #0
10003d74:	d0f9      	beq.n	10003d6a <__wrap_vprintf+0x8e>
            if (filter && filter != d) continue;
10003d76:	464b      	mov	r3, r9
10003d78:	681b      	ldr	r3, [r3, #0]
10003d7a:	2b00      	cmp	r3, #0
10003d7c:	d001      	beq.n	10003d82 <__wrap_vprintf+0xa6>
10003d7e:	429d      	cmp	r5, r3
10003d80:	d1f3      	bne.n	10003d6a <__wrap_vprintf+0x8e>
    if (!driver->crlf_enabled) {
10003d82:	7c6b      	ldrb	r3, [r5, #17]
            stdio_out_chars_crlf(d, buffer->buf, buffer->used);
10003d84:	9a01      	ldr	r2, [sp, #4]
    if (!driver->crlf_enabled) {
10003d86:	2b00      	cmp	r3, #0
10003d88:	d00a      	beq.n	10003da0 <__wrap_vprintf+0xc4>
10003d8a:	0028      	movs	r0, r5
10003d8c:	a902      	add	r1, sp, #8
10003d8e:	f7ff fe53 	bl	10003a38 <stdio_out_chars_crlf.part.0>
        for (stdio_driver_t *d = drivers; d; d = d->next) {
10003d92:	68ed      	ldr	r5, [r5, #12]
10003d94:	2d00      	cmp	r5, #0
10003d96:	d1eb      	bne.n	10003d70 <__wrap_vprintf+0x94>
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003d98:	4653      	mov	r3, sl
        buffer->used = 0;
10003d9a:	9501      	str	r5, [sp, #4]
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003d9c:	681c      	ldr	r4, [r3, #0]
}
10003d9e:	e7c8      	b.n	10003d32 <__wrap_vprintf+0x56>
        driver->out_chars(s, len);
10003da0:	0011      	movs	r1, r2
10003da2:	a802      	add	r0, sp, #8
10003da4:	47a0      	blx	r4
        return;
10003da6:	e7e0      	b.n	10003d6a <__wrap_vprintf+0x8e>
    mutex_exit(&print_mutex);
10003da8:	4640      	mov	r0, r8
10003daa:	f004 ff49 	bl	10008c40 <__mutex_exit_veneer>
    return ret;
10003dae:	e7cb      	b.n	10003d48 <__wrap_vprintf+0x6c>
        buffer->used = 0;
10003db0:	9501      	str	r5, [sp, #4]
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003db2:	e7c7      	b.n	10003d44 <__wrap_vprintf+0x68>
10003db4:	20003028 	.word	0x20003028
10003db8:	10003ad9 	.word	0x10003ad9
10003dbc:	200234b4 	.word	0x200234b4
10003dc0:	200234bc 	.word	0x200234bc

10003dc4 <__wrap_printf>:

int __printflike(1, 0) WRAPPER_FUNC(printf)(const char* format, ...)
{
10003dc4:	b40f      	push	{r0, r1, r2, r3}
10003dc6:	b500      	push	{lr}
10003dc8:	b083      	sub	sp, #12
10003dca:	a904      	add	r1, sp, #16
10003dcc:	c901      	ldmia	r1!, {r0}
    va_list va;
    va_start(va, format);
10003dce:	9101      	str	r1, [sp, #4]
    int ret = vprintf(format, va);
10003dd0:	f7ff ff84 	bl	10003cdc <__wrap_vprintf>
    va_end(va);
    return ret;
}
10003dd4:	b003      	add	sp, #12
10003dd6:	bc08      	pop	{r3}
10003dd8:	b004      	add	sp, #16
10003dda:	4718      	bx	r3

10003ddc <stdio_init_all>:

void stdio_init_all() {
10003ddc:	b510      	push	{r4, lr}
#if PICO_STDIO_SEMIHOSTING
    stdio_semihosting_init();
#endif

#if PICO_STDIO_USB
    stdio_usb_init();
10003dde:	f000 f8c1 	bl	10003f64 <stdio_usb_init>
#endif
}
10003de2:	bd10      	pop	{r4, pc}

10003de4 <stdio_usb_in_chars>:
        last_avail_time = 0;
    }
    mutex_exit(&stdio_usb_mutex);
}

int stdio_usb_in_chars(char *buf, int length) {
10003de4:	b570      	push	{r4, r5, r6, lr}
    uint32_t owner;
    if (!mutex_try_enter(&stdio_usb_mutex, &owner)) {
10003de6:	4c18      	ldr	r4, [pc, #96]	; (10003e48 <stdio_usb_in_chars+0x64>)
int stdio_usb_in_chars(char *buf, int length) {
10003de8:	b082      	sub	sp, #8
10003dea:	0006      	movs	r6, r0
10003dec:	000d      	movs	r5, r1
    if (!mutex_try_enter(&stdio_usb_mutex, &owner)) {
10003dee:	0020      	movs	r0, r4
10003df0:	a901      	add	r1, sp, #4
10003df2:	f004 ff3d 	bl	10008c70 <__mutex_try_enter_veneer>
10003df6:	2800      	cmp	r0, #0
10003df8:	d108      	bne.n	10003e0c <stdio_usb_in_chars+0x28>
        if (owner == get_core_num()) return PICO_ERROR_NO_DATA; // would deadlock otherwise
10003dfa:	23d0      	movs	r3, #208	; 0xd0
10003dfc:	061b      	lsls	r3, r3, #24
10003dfe:	681b      	ldr	r3, [r3, #0]
10003e00:	9a01      	ldr	r2, [sp, #4]
10003e02:	429a      	cmp	r2, r3
10003e04:	d01c      	beq.n	10003e40 <stdio_usb_in_chars+0x5c>
        mutex_enter_blocking(&stdio_usb_mutex);
10003e06:	0020      	movs	r0, r4
10003e08:	f004 ff4a 	bl	10008ca0 <__mutex_enter_blocking_veneer>
  return tud_cdc_n_write(itf, str, strlen(str));
}

static inline bool tud_cdc_connected (void)
{
  return tud_cdc_n_connected(0);
10003e0c:	2000      	movs	r0, #0
10003e0e:	f000 feeb 	bl	10004be8 <tud_cdc_n_connected>
    }
    int rc = PICO_ERROR_NO_DATA;
    if (tud_cdc_connected() && tud_cdc_available()) {
10003e12:	2800      	cmp	r0, #0
10003e14:	d107      	bne.n	10003e26 <stdio_usb_in_chars+0x42>
    int rc = PICO_ERROR_NO_DATA;
10003e16:	2503      	movs	r5, #3
10003e18:	426d      	negs	r5, r5
        int count = tud_cdc_read(buf, length);
        rc =  count ? count : PICO_ERROR_NO_DATA;
    }
    mutex_exit(&stdio_usb_mutex);
10003e1a:	0020      	movs	r0, r4
10003e1c:	f004 ff10 	bl	10008c40 <__mutex_exit_veneer>
    return rc;
}
10003e20:	0028      	movs	r0, r5
10003e22:	b002      	add	sp, #8
10003e24:	bd70      	pop	{r4, r5, r6, pc}
  tud_cdc_n_set_wanted_char(0, wanted);
}

static inline uint32_t tud_cdc_available (void)
{
  return tud_cdc_n_available(0);
10003e26:	2000      	movs	r0, #0
10003e28:	f000 fef8 	bl	10004c1c <tud_cdc_n_available>
    if (tud_cdc_connected() && tud_cdc_available()) {
10003e2c:	2800      	cmp	r0, #0
10003e2e:	d0f2      	beq.n	10003e16 <stdio_usb_in_chars+0x32>
  return tud_cdc_n_read_char(0);
}

static inline uint32_t tud_cdc_read (void* buffer, uint32_t bufsize)
{
  return tud_cdc_n_read(0, buffer, bufsize);
10003e30:	002a      	movs	r2, r5
10003e32:	0031      	movs	r1, r6
10003e34:	2000      	movs	r0, #0
10003e36:	f000 feff 	bl	10004c38 <tud_cdc_n_read>
10003e3a:	1e05      	subs	r5, r0, #0
        rc =  count ? count : PICO_ERROR_NO_DATA;
10003e3c:	d0eb      	beq.n	10003e16 <stdio_usb_in_chars+0x32>
10003e3e:	e7ec      	b.n	10003e1a <stdio_usb_in_chars+0x36>
        if (owner == get_core_num()) return PICO_ERROR_NO_DATA; // would deadlock otherwise
10003e40:	2503      	movs	r5, #3
10003e42:	426d      	negs	r5, r5
10003e44:	e7ec      	b.n	10003e20 <stdio_usb_in_chars+0x3c>
10003e46:	46c0      	nop			; (mov r8, r8)
10003e48:	20023b68 	.word	0x20023b68

10003e4c <stdio_usb_out_chars>:
static void stdio_usb_out_chars(const char *buf, int length) {
10003e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10003e4e:	46de      	mov	lr, fp
10003e50:	464f      	mov	r7, r9
10003e52:	4646      	mov	r6, r8
10003e54:	b5c0      	push	{r6, r7, lr}
    if (!mutex_try_enter(&stdio_usb_mutex, &owner)) {
10003e56:	4b33      	ldr	r3, [pc, #204]	; (10003f24 <stdio_usb_out_chars+0xd8>)
static void stdio_usb_out_chars(const char *buf, int length) {
10003e58:	b082      	sub	sp, #8
10003e5a:	4681      	mov	r9, r0
10003e5c:	000d      	movs	r5, r1
    if (!mutex_try_enter(&stdio_usb_mutex, &owner)) {
10003e5e:	0018      	movs	r0, r3
10003e60:	a901      	add	r1, sp, #4
10003e62:	469b      	mov	fp, r3
10003e64:	f004 ff04 	bl	10008c70 <__mutex_try_enter_veneer>
10003e68:	2800      	cmp	r0, #0
10003e6a:	d108      	bne.n	10003e7e <stdio_usb_out_chars+0x32>
        if (owner == get_core_num()) return; // would deadlock otherwise
10003e6c:	23d0      	movs	r3, #208	; 0xd0
10003e6e:	061b      	lsls	r3, r3, #24
10003e70:	681b      	ldr	r3, [r3, #0]
10003e72:	9a01      	ldr	r2, [sp, #4]
10003e74:	429a      	cmp	r2, r3
10003e76:	d04f      	beq.n	10003f18 <stdio_usb_out_chars+0xcc>
        mutex_enter_blocking(&stdio_usb_mutex);
10003e78:	4658      	mov	r0, fp
10003e7a:	f004 ff11 	bl	10008ca0 <__mutex_enter_blocking_veneer>
  return tud_cdc_n_connected(0);
10003e7e:	2000      	movs	r0, #0
10003e80:	f000 feb2 	bl	10004be8 <tud_cdc_n_connected>
    if (tud_cdc_connected()) {
10003e84:	2800      	cmp	r0, #0
10003e86:	d03f      	beq.n	10003f08 <stdio_usb_out_chars+0xbc>
        for (int i = 0; i < length;) {
10003e88:	2400      	movs	r4, #0
10003e8a:	2d00      	cmp	r5, #0
10003e8c:	dd41      	ble.n	10003f12 <stdio_usb_out_chars+0xc6>
                    (!tud_cdc_write_available() && time_us_64() > last_avail_time + PICO_STDIO_USB_STDOUT_TIMEOUT_US)) {
10003e8e:	4e26      	ldr	r6, [pc, #152]	; (10003f28 <stdio_usb_out_chars+0xdc>)
10003e90:	e011      	b.n	10003eb6 <stdio_usb_out_chars+0x6a>
                int n2 = tud_cdc_write(buf + i, n);
10003e92:	464b      	mov	r3, r9
  return tud_cdc_n_write_char(0, ch);
}

static inline uint32_t tud_cdc_write (void const* buffer, uint32_t bufsize)
{
  return tud_cdc_n_write(0, buffer, bufsize);
10003e94:	2000      	movs	r0, #0
10003e96:	1919      	adds	r1, r3, r4
10003e98:	f000 ff5a 	bl	10004d50 <tud_cdc_n_write>
10003e9c:	4680      	mov	r8, r0
                tud_task();
10003e9e:	f001 fbab 	bl	100055f8 <tud_task>
  return tud_cdc_n_write_str(0, str);
}

static inline uint32_t tud_cdc_write_flush (void)
{
  return tud_cdc_n_write_flush(0);
10003ea2:	2000      	movs	r0, #0
10003ea4:	f000 ff02 	bl	10004cac <tud_cdc_n_write_flush>
                last_avail_time = time_us_64();
10003ea8:	f000 fd9a 	bl	100049e0 <time_us_64>
10003eac:	6030      	str	r0, [r6, #0]
10003eae:	6071      	str	r1, [r6, #4]
                i += n2;
10003eb0:	4444      	add	r4, r8
        for (int i = 0; i < length;) {
10003eb2:	42ac      	cmp	r4, r5
10003eb4:	da2d      	bge.n	10003f12 <stdio_usb_out_chars+0xc6>
}

static inline uint32_t tud_cdc_write_available(void)
{
  return tud_cdc_n_write_available(0);
10003eb6:	2000      	movs	r0, #0
10003eb8:	f000 ff66 	bl	10004d88 <tud_cdc_n_write_available>
            int n = length - i;
10003ebc:	1b2f      	subs	r7, r5, r4
10003ebe:	0002      	movs	r2, r0
            if (n > avail) n = avail;
10003ec0:	42b8      	cmp	r0, r7
10003ec2:	dd00      	ble.n	10003ec6 <stdio_usb_out_chars+0x7a>
10003ec4:	003a      	movs	r2, r7
            if (n) {
10003ec6:	2a00      	cmp	r2, #0
10003ec8:	d1e3      	bne.n	10003e92 <stdio_usb_out_chars+0x46>
                tud_task();
10003eca:	f001 fb95 	bl	100055f8 <tud_task>
  return tud_cdc_n_write_flush(0);
10003ece:	2000      	movs	r0, #0
10003ed0:	f000 feec 	bl	10004cac <tud_cdc_n_write_flush>
  return tud_cdc_n_connected(0);
10003ed4:	2000      	movs	r0, #0
10003ed6:	f000 fe87 	bl	10004be8 <tud_cdc_n_connected>
                if (!tud_cdc_connected() ||
10003eda:	2800      	cmp	r0, #0
10003edc:	d019      	beq.n	10003f12 <stdio_usb_out_chars+0xc6>
  return tud_cdc_n_write_available(0);
10003ede:	2000      	movs	r0, #0
10003ee0:	f000 ff52 	bl	10004d88 <tud_cdc_n_write_available>
10003ee4:	2800      	cmp	r0, #0
10003ee6:	d1e4      	bne.n	10003eb2 <stdio_usb_out_chars+0x66>
                    (!tud_cdc_write_available() && time_us_64() > last_avail_time + PICO_STDIO_USB_STDOUT_TIMEOUT_US)) {
10003ee8:	f000 fd7a 	bl	100049e0 <time_us_64>
10003eec:	6832      	ldr	r2, [r6, #0]
10003eee:	6873      	ldr	r3, [r6, #4]
10003ef0:	000f      	movs	r7, r1
10003ef2:	2100      	movs	r1, #0
10003ef4:	4684      	mov	ip, r0
10003ef6:	480d      	ldr	r0, [pc, #52]	; (10003f2c <stdio_usb_out_chars+0xe0>)
10003ef8:	1812      	adds	r2, r2, r0
10003efa:	414b      	adcs	r3, r1
10003efc:	429f      	cmp	r7, r3
10003efe:	d808      	bhi.n	10003f12 <stdio_usb_out_chars+0xc6>
10003f00:	d1d7      	bne.n	10003eb2 <stdio_usb_out_chars+0x66>
10003f02:	4594      	cmp	ip, r2
10003f04:	d9d5      	bls.n	10003eb2 <stdio_usb_out_chars+0x66>
10003f06:	e004      	b.n	10003f12 <stdio_usb_out_chars+0xc6>
        last_avail_time = 0;
10003f08:	2000      	movs	r0, #0
10003f0a:	2100      	movs	r1, #0
10003f0c:	4b06      	ldr	r3, [pc, #24]	; (10003f28 <stdio_usb_out_chars+0xdc>)
10003f0e:	6018      	str	r0, [r3, #0]
10003f10:	6059      	str	r1, [r3, #4]
    mutex_exit(&stdio_usb_mutex);
10003f12:	4658      	mov	r0, fp
10003f14:	f004 fe94 	bl	10008c40 <__mutex_exit_veneer>
}
10003f18:	b002      	add	sp, #8
10003f1a:	bce0      	pop	{r5, r6, r7}
10003f1c:	46bb      	mov	fp, r7
10003f1e:	46b1      	mov	r9, r6
10003f20:	46a8      	mov	r8, r5
10003f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003f24:	20023b68 	.word	0x20023b68
10003f28:	20003048 	.word	0x20003048
10003f2c:	0007a120 	.word	0x0007a120

10003f30 <timer_task>:
    irq_set_pending(PICO_STDIO_USB_LOW_PRIORITY_IRQ);
10003f30:	201f      	movs	r0, #31
static int64_t timer_task(__unused alarm_id_t id, __unused void *user_data) {
10003f32:	b510      	push	{r4, lr}
    irq_set_pending(PICO_STDIO_USB_LOW_PRIORITY_IRQ);
10003f34:	f7fd fcbc 	bl	100018b0 <irq_set_pending>
}
10003f38:	20fa      	movs	r0, #250	; 0xfa
10003f3a:	2100      	movs	r1, #0
10003f3c:	0080      	lsls	r0, r0, #2
10003f3e:	bd10      	pop	{r4, pc}

10003f40 <low_priority_worker_irq>:
static void low_priority_worker_irq() {
10003f40:	b510      	push	{r4, lr}
    if (mutex_try_enter(&stdio_usb_mutex, NULL)) {
10003f42:	4c07      	ldr	r4, [pc, #28]	; (10003f60 <low_priority_worker_irq+0x20>)
10003f44:	2100      	movs	r1, #0
10003f46:	0020      	movs	r0, r4
10003f48:	f004 fe92 	bl	10008c70 <__mutex_try_enter_veneer>
10003f4c:	2800      	cmp	r0, #0
10003f4e:	d100      	bne.n	10003f52 <low_priority_worker_irq+0x12>
}
10003f50:	bd10      	pop	{r4, pc}
        tud_task();
10003f52:	f001 fb51 	bl	100055f8 <tud_task>
        mutex_exit(&stdio_usb_mutex);
10003f56:	0020      	movs	r0, r4
10003f58:	f004 fe72 	bl	10008c40 <__mutex_exit_veneer>
}
10003f5c:	e7f8      	b.n	10003f50 <low_priority_worker_irq+0x10>
10003f5e:	46c0      	nop			; (mov r8, r8)
10003f60:	20023b68 	.word	0x20023b68

10003f64 <stdio_usb_init>:
#if PICO_STDIO_ENABLE_CRLF_SUPPORT
    .crlf_enabled = PICO_STDIO_USB_DEFAULT_CRLF
#endif
};

bool stdio_usb_init(void) {
10003f64:	b570      	push	{r4, r5, r6, lr}
#if !PICO_NO_BI_STDIO_USB
    bi_decl_if_func_used(bi_program_feature("USB stdin / stdout"));
10003f66:	4b1e      	ldr	r3, [pc, #120]	; (10003fe0 <stdio_usb_init+0x7c>)
bool stdio_usb_init(void) {
10003f68:	b084      	sub	sp, #16
    bi_decl_if_func_used(bi_program_feature("USB stdin / stdout"));
10003f6a:	781b      	ldrb	r3, [r3, #0]
#endif

    // initialize TinyUSB
    tusb_init();
10003f6c:	f002 fd42 	bl	100069f4 <tusb_init>

    irq_set_exclusive_handler(PICO_STDIO_USB_LOW_PRIORITY_IRQ, low_priority_worker_irq);
10003f70:	201f      	movs	r0, #31
10003f72:	491c      	ldr	r1, [pc, #112]	; (10003fe4 <stdio_usb_init+0x80>)
10003f74:	f7fd fcac 	bl	100018d0 <irq_set_exclusive_handler>
    irq_set_enabled(PICO_STDIO_USB_LOW_PRIORITY_IRQ, true);
10003f78:	2101      	movs	r1, #1
10003f7a:	201f      	movs	r0, #31
10003f7c:	f7fd fc86 	bl	1000188c <irq_set_enabled>

    mutex_init(&stdio_usb_mutex);
10003f80:	4819      	ldr	r0, [pc, #100]	; (10003fe8 <stdio_usb_init+0x84>)
10003f82:	f7fd fea1 	bl	10001cc8 <mutex_init>
 * @return >0 the alarm id
 * @return 0 the target timestamp was during or before this method call (whether the callback was called depends on fire_if_past)
 * @return -1 if there were no alarm slots available
 */
static inline alarm_id_t add_alarm_in_us(uint64_t us, alarm_callback_t callback, void *user_data, bool fire_if_past) {
    return alarm_pool_add_alarm_in_us(alarm_pool_get_default(), us, callback, user_data, fire_if_past);
10003f86:	f000 fb2f 	bl	100045e8 <alarm_pool_get_default>
10003f8a:	0006      	movs	r6, r0
    update_us_since_boot(&t, time_us_64());
10003f8c:	f000 fd28 	bl	100049e0 <time_us_64>
    uint64_t delayed = base + us;
10003f90:	22fa      	movs	r2, #250	; 0xfa
    update_us_since_boot(&t, time_us_64());
10003f92:	0004      	movs	r4, r0
10003f94:	000d      	movs	r5, r1
    uint64_t delayed = base + us;
10003f96:	2300      	movs	r3, #0
10003f98:	0092      	lsls	r2, r2, #2
10003f9a:	1912      	adds	r2, r2, r4
10003f9c:	416b      	adcs	r3, r5
    if (delayed < base) {
10003f9e:	4299      	cmp	r1, r3
10003fa0:	d814      	bhi.n	10003fcc <stdio_usb_init+0x68>
10003fa2:	d011      	beq.n	10003fc8 <stdio_usb_init+0x64>
    return alarm_pool_add_alarm_at(pool, delayed_by_us(get_absolute_time(), us), callback, user_data, fire_if_past);
10003fa4:	2101      	movs	r1, #1
10003fa6:	9102      	str	r1, [sp, #8]
10003fa8:	2100      	movs	r1, #0
10003faa:	9101      	str	r1, [sp, #4]
10003fac:	490f      	ldr	r1, [pc, #60]	; (10003fec <stdio_usb_init+0x88>)
10003fae:	0030      	movs	r0, r6
10003fb0:	9100      	str	r1, [sp, #0]
10003fb2:	f000 fb1f 	bl	100045f4 <alarm_pool_add_alarm_at>
    bool rc = add_alarm_in_us(PICO_STDIO_USB_TASK_INTERVAL_US, timer_task, NULL, true);
10003fb6:	0004      	movs	r4, r0
10003fb8:	1e63      	subs	r3, r4, #1
10003fba:	419c      	sbcs	r4, r3
10003fbc:	b2e4      	uxtb	r4, r4
    if (rc) {
10003fbe:	2800      	cmp	r0, #0
10003fc0:	d108      	bne.n	10003fd4 <stdio_usb_init+0x70>
        stdio_set_driver_enabled(&stdio_usb, true);
    }
    return rc;
}
10003fc2:	0020      	movs	r0, r4
10003fc4:	b004      	add	sp, #16
10003fc6:	bd70      	pop	{r4, r5, r6, pc}
    if (delayed < base) {
10003fc8:	4290      	cmp	r0, r2
10003fca:	d9eb      	bls.n	10003fa4 <stdio_usb_init+0x40>
        delayed = (uint64_t)-1;
10003fcc:	2201      	movs	r2, #1
10003fce:	4252      	negs	r2, r2
10003fd0:	17d3      	asrs	r3, r2, #31
10003fd2:	e7e7      	b.n	10003fa4 <stdio_usb_init+0x40>
        stdio_set_driver_enabled(&stdio_usb, true);
10003fd4:	2101      	movs	r1, #1
10003fd6:	4806      	ldr	r0, [pc, #24]	; (10003ff0 <stdio_usb_init+0x8c>)
10003fd8:	f7ff fe62 	bl	10003ca0 <stdio_set_driver_enabled>
10003fdc:	e7f1      	b.n	10003fc2 <stdio_usb_init+0x5e>
10003fde:	46c0      	nop			; (mov r8, r8)
10003fe0:	101af89c 	.word	0x101af89c
10003fe4:	10003f41 	.word	0x10003f41
10003fe8:	20023b68 	.word	0x20023b68
10003fec:	10003f31 	.word	0x10003f31
10003ff0:	20002718 	.word	0x20002718

10003ff4 <tud_descriptor_device_cb>:
    [USBD_STR_CDC] = "Board CDC",
};

const uint8_t *tud_descriptor_device_cb(void) {
    return (const uint8_t *)&usbd_desc_device;
}
10003ff4:	4800      	ldr	r0, [pc, #0]	; (10003ff8 <tud_descriptor_device_cb+0x4>)
10003ff6:	4770      	bx	lr
10003ff8:	1000904c 	.word	0x1000904c

10003ffc <tud_descriptor_configuration_cb>:

const uint8_t *tud_descriptor_configuration_cb(uint8_t index) {
    (void)index;
    return usbd_desc_cfg;
}
10003ffc:	4800      	ldr	r0, [pc, #0]	; (10004000 <tud_descriptor_configuration_cb+0x4>)
10003ffe:	4770      	bx	lr
10004000:	10009000 	.word	0x10009000

10004004 <tud_descriptor_string_cb>:

const uint16_t *tud_descriptor_string_cb(uint8_t index, uint16_t langid) {
10004004:	b530      	push	{r4, r5, lr}
    #define DESC_STR_MAX (20)
    static uint16_t desc_str[DESC_STR_MAX];

    uint8_t len;
    if (index == 0) {
10004006:	2800      	cmp	r0, #0
10004008:	d106      	bne.n	10004018 <tud_descriptor_string_cb+0x14>
        desc_str[1] = 0x0409; // supported language is English
1000400a:	24c1      	movs	r4, #193	; 0xc1
1000400c:	4811      	ldr	r0, [pc, #68]	; (10004054 <tud_descriptor_string_cb+0x50>)
1000400e:	4b12      	ldr	r3, [pc, #72]	; (10004058 <tud_descriptor_string_cb+0x54>)
10004010:	00a4      	lsls	r4, r4, #2
10004012:	8043      	strh	r3, [r0, #2]
            desc_str[1 + len] = str[len];
        }
    }

    // first byte is length (including header), second byte is string type
    desc_str[0] = (TUSB_DESC_STRING << 8) | (2 * len + 2);
10004014:	8004      	strh	r4, [r0, #0]

    return desc_str;
}
10004016:	bd30      	pop	{r4, r5, pc}
        if (index >= sizeof(usbd_desc_str) / sizeof(usbd_desc_str[0])) {
10004018:	2804      	cmp	r0, #4
1000401a:	d819      	bhi.n	10004050 <tud_descriptor_string_cb+0x4c>
        const char *str = usbd_desc_str[index];
1000401c:	4b0f      	ldr	r3, [pc, #60]	; (1000405c <tud_descriptor_string_cb+0x58>)
1000401e:	0080      	lsls	r0, r0, #2
10004020:	58c5      	ldr	r5, [r0, r3]
        for (len = 0; len < DESC_STR_MAX - 1 && str[len]; ++len) {
10004022:	480c      	ldr	r0, [pc, #48]	; (10004054 <tud_descriptor_string_cb+0x50>)
        const char *str = usbd_desc_str[index];
10004024:	2300      	movs	r3, #0
10004026:	1c81      	adds	r1, r0, #2
10004028:	e004      	b.n	10004034 <tud_descriptor_string_cb+0x30>
        for (len = 0; len < DESC_STR_MAX - 1 && str[len]; ++len) {
1000402a:	3301      	adds	r3, #1
            desc_str[1 + len] = str[len];
1000402c:	800a      	strh	r2, [r1, #0]
        for (len = 0; len < DESC_STR_MAX - 1 && str[len]; ++len) {
1000402e:	3102      	adds	r1, #2
10004030:	2b13      	cmp	r3, #19
10004032:	d00a      	beq.n	1000404a <tud_descriptor_string_cb+0x46>
10004034:	5cea      	ldrb	r2, [r5, r3]
10004036:	b2dc      	uxtb	r4, r3
10004038:	2a00      	cmp	r2, #0
1000403a:	d1f6      	bne.n	1000402a <tud_descriptor_string_cb+0x26>
    desc_str[0] = (TUSB_DESC_STRING << 8) | (2 * len + 2);
1000403c:	23c0      	movs	r3, #192	; 0xc0
1000403e:	3401      	adds	r4, #1
10004040:	b2e4      	uxtb	r4, r4
10004042:	0064      	lsls	r4, r4, #1
10004044:	009b      	lsls	r3, r3, #2
10004046:	431c      	orrs	r4, r3
10004048:	e7e4      	b.n	10004014 <tud_descriptor_string_cb+0x10>
1000404a:	24ca      	movs	r4, #202	; 0xca
1000404c:	00a4      	lsls	r4, r4, #2
1000404e:	e7e1      	b.n	10004014 <tud_descriptor_string_cb+0x10>
            return NULL;
10004050:	2000      	movs	r0, #0
10004052:	e7e0      	b.n	10004016 <tud_descriptor_string_cb+0x12>
10004054:	2002348c 	.word	0x2002348c
10004058:	00000409 	.word	0x00000409
1000405c:	10009060 	.word	0x10009060

10004060 <set_sys_clock_pll>:
                        48 * MHZ,
                        48 * MHZ);
    }
}

void set_sys_clock_pll(uint32_t vco_freq, uint post_div1, uint post_div2) {
10004060:	b5f0      	push	{r4, r5, r6, r7, lr}
10004062:	b083      	sub	sp, #12
10004064:	0006      	movs	r6, r0
10004066:	000c      	movs	r4, r1
10004068:	0015      	movs	r5, r2
    if (!running_on_fpga()) {
1000406a:	f7fe f933 	bl	100022d4 <running_on_fpga>
1000406e:	2800      	cmp	r0, #0
10004070:	d001      	beq.n	10004076 <set_sys_clock_pll+0x16>
                        0, // Only AUX mux on ADC
                        CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLKSRC_PLL_USB,
                        48 * MHZ,
                        48 * MHZ);
    }
}
10004072:	b003      	add	sp, #12
10004074:	bdf0      	pop	{r4, r5, r6, r7, pc}
        clock_configure(clk_sys,
10004076:	4f16      	ldr	r7, [pc, #88]	; (100040d0 <set_sys_clock_pll+0x70>)
10004078:	2201      	movs	r2, #1
1000407a:	003b      	movs	r3, r7
1000407c:	2101      	movs	r1, #1
1000407e:	9700      	str	r7, [sp, #0]
10004080:	3005      	adds	r0, #5
10004082:	f7fd f917 	bl	100012b4 <clock_configure>
        pll_init(pll_sys, 1, vco_freq, post_div1, post_div2);
10004086:	b2eb      	uxtb	r3, r5
10004088:	0032      	movs	r2, r6
1000408a:	9300      	str	r3, [sp, #0]
1000408c:	2101      	movs	r1, #1
1000408e:	0023      	movs	r3, r4
10004090:	4810      	ldr	r0, [pc, #64]	; (100040d4 <set_sys_clock_pll+0x74>)
10004092:	f7fe f927 	bl	100022e4 <pll_init>
        uint32_t freq = vco_freq / (post_div1 * post_div2);
10004096:	0021      	movs	r1, r4
10004098:	0030      	movs	r0, r6
1000409a:	4369      	muls	r1, r5
1000409c:	f7fc f96a 	bl	10000374 <__wrap___aeabi_uidiv>
100040a0:	0004      	movs	r4, r0
        clock_configure(clk_ref,
100040a2:	4b0d      	ldr	r3, [pc, #52]	; (100040d8 <set_sys_clock_pll+0x78>)
100040a4:	2200      	movs	r2, #0
100040a6:	9300      	str	r3, [sp, #0]
100040a8:	2102      	movs	r1, #2
100040aa:	2004      	movs	r0, #4
100040ac:	f7fd f902 	bl	100012b4 <clock_configure>
        clock_configure(clk_sys,
100040b0:	0023      	movs	r3, r4
100040b2:	2200      	movs	r2, #0
100040b4:	2101      	movs	r1, #1
100040b6:	9400      	str	r4, [sp, #0]
100040b8:	2005      	movs	r0, #5
100040ba:	f7fd f8fb 	bl	100012b4 <clock_configure>
        clock_configure(clk_peri,
100040be:	003b      	movs	r3, r7
100040c0:	2202      	movs	r2, #2
100040c2:	2100      	movs	r1, #0
100040c4:	9700      	str	r7, [sp, #0]
100040c6:	2006      	movs	r0, #6
100040c8:	f7fd f8f4 	bl	100012b4 <clock_configure>
}
100040cc:	e7d1      	b.n	10004072 <set_sys_clock_pll+0x12>
100040ce:	46c0      	nop			; (mov r8, r8)
100040d0:	02dc6c00 	.word	0x02dc6c00
100040d4:	40028000 	.word	0x40028000
100040d8:	00b71b00 	.word	0x00b71b00

100040dc <spin_locks_reset>:
    *lock = 0;
100040dc:	2100      	movs	r1, #0

static void check_lock_num(uint __unused lock_num) {
    invalid_params_if(SYNC, lock_num >= 32);
}

void spin_locks_reset(void) {
100040de:	4b04      	ldr	r3, [pc, #16]	; (100040f0 <spin_locks_reset+0x14>)
    for (uint i = 0; i < NUM_SPIN_LOCKS; i++) {
100040e0:	4a04      	ldr	r2, [pc, #16]	; (100040f4 <spin_locks_reset+0x18>)
    __asm volatile ("dmb");
100040e2:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100040e6:	c302      	stmia	r3!, {r1}
100040e8:	4293      	cmp	r3, r2
100040ea:	d1fa      	bne.n	100040e2 <spin_locks_reset+0x6>
        spin_unlock_unsafe(spin_lock_instance(i));
    }
}
100040ec:	4770      	bx	lr
100040ee:	46c0      	nop			; (mov r8, r8)
100040f0:	d0000100 	.word	0xd0000100
100040f4:	d0000180 	.word	0xd0000180

100040f8 <next_striped_spin_lock_num>:
    spin_unlock_unsafe(lock);
    return lock;
}

uint next_striped_spin_lock_num() {
    uint rc = striped_spin_lock_num++;
100040f8:	4a04      	ldr	r2, [pc, #16]	; (1000410c <next_striped_spin_lock_num+0x14>)
100040fa:	7810      	ldrb	r0, [r2, #0]
100040fc:	1c43      	adds	r3, r0, #1
100040fe:	b2db      	uxtb	r3, r3
    if (striped_spin_lock_num > PICO_SPINLOCK_ID_STRIPED_LAST) {
10004100:	2b17      	cmp	r3, #23
10004102:	d900      	bls.n	10004106 <next_striped_spin_lock_num+0xe>
        striped_spin_lock_num = PICO_SPINLOCK_ID_STRIPED_FIRST;
10004104:	2310      	movs	r3, #16
10004106:	7013      	strb	r3, [r2, #0]
    }
    return rc;
}
10004108:	4770      	bx	lr
1000410a:	46c0      	nop			; (mov r8, r8)
1000410c:	2000272c 	.word	0x2000272c

10004110 <spin_lock_claim_unused>:
void spin_lock_unclaim(uint lock_num) {
    check_lock_num(lock_num);
    hw_claim_clear((uint8_t *) &claimed, lock_num);
}

int spin_lock_claim_unused(bool required) {
10004110:	b500      	push	{lr}
    return hw_claim_unused_from_range((uint8_t*)&claimed, required, PICO_SPINLOCK_ID_CLAIM_FREE_FIRST, PICO_SPINLOCK_ID_CLAIM_FREE_END, "No spinlocks are available");
10004112:	4b05      	ldr	r3, [pc, #20]	; (10004128 <spin_lock_claim_unused+0x18>)
int spin_lock_claim_unused(bool required) {
10004114:	b083      	sub	sp, #12
10004116:	0001      	movs	r1, r0
    return hw_claim_unused_from_range((uint8_t*)&claimed, required, PICO_SPINLOCK_ID_CLAIM_FREE_FIRST, PICO_SPINLOCK_ID_CLAIM_FREE_END, "No spinlocks are available");
10004118:	9300      	str	r3, [sp, #0]
1000411a:	2218      	movs	r2, #24
1000411c:	231f      	movs	r3, #31
1000411e:	4803      	ldr	r0, [pc, #12]	; (1000412c <spin_lock_claim_unused+0x1c>)
10004120:	f7fd f87a 	bl	10001218 <hw_claim_unused_from_range>
}
10004124:	b003      	add	sp, #12
10004126:	bd00      	pop	{pc}
10004128:	10009074 	.word	0x10009074
1000412c:	2002345c 	.word	0x2002345c

10004130 <timer_pool_entry_comparator>:
}
#endif

static inline alarm_pool_entry_t *get_entry(alarm_pool_t *pool, pheap_node_id_t id) {
    assert(id && id <= pool->heap->max_nodes);
    return pool->entries + id - 1;
10004130:	6883      	ldr	r3, [r0, #8]
10004132:	480b      	ldr	r0, [pc, #44]	; (10004160 <timer_pool_entry_comparator+0x30>)
static inline uint8_t *get_entry_id_high(alarm_pool_t *pool, pheap_node_id_t id) {
    assert(id && id <= pool->heap->max_nodes);
    return pool->entry_ids_high + id - 1;
}

bool timer_pool_entry_comparator(void *user_data, pheap_node_id_t a, pheap_node_id_t b) {
10004134:	b510      	push	{r4, lr}
    return pool->entries + id - 1;
10004136:	4684      	mov	ip, r0
10004138:	4461      	add	r1, ip
1000413a:	4462      	add	r2, ip
    alarm_pool_t *pool = (alarm_pool_t *)user_data;
    return to_us_since_boot(get_entry(pool, a)->target) < to_us_since_boot(get_entry(pool, b)->target);
1000413c:	0109      	lsls	r1, r1, #4
1000413e:	0112      	lsls	r2, r2, #4
10004140:	189a      	adds	r2, r3, r2
10004142:	1859      	adds	r1, r3, r1
10004144:	6854      	ldr	r4, [r2, #4]
10004146:	684b      	ldr	r3, [r1, #4]
10004148:	2001      	movs	r0, #1
1000414a:	429c      	cmp	r4, r3
1000414c:	d801      	bhi.n	10004152 <timer_pool_entry_comparator+0x22>
1000414e:	d002      	beq.n	10004156 <timer_pool_entry_comparator+0x26>
10004150:	2000      	movs	r0, #0
10004152:	b2c0      	uxtb	r0, r0
}
10004154:	bd10      	pop	{r4, pc}
    return to_us_since_boot(get_entry(pool, a)->target) < to_us_since_boot(get_entry(pool, b)->target);
10004156:	6812      	ldr	r2, [r2, #0]
10004158:	680b      	ldr	r3, [r1, #0]
1000415a:	429a      	cmp	r2, r3
1000415c:	d8f9      	bhi.n	10004152 <timer_pool_entry_comparator+0x22>
1000415e:	e7f7      	b.n	10004150 <timer_pool_entry_comparator+0x20>
10004160:	0fffffff 	.word	0x0fffffff

10004164 <sev_callback>:
    __asm volatile ("sev");
10004164:	bf40      	sev

#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
static int64_t sev_callback(alarm_id_t id, void *user_data) {
    __sev();
    return 0;
}
10004166:	2000      	movs	r0, #0
10004168:	2100      	movs	r1, #0
1000416a:	4770      	bx	lr

1000416c <add_alarm_under_lock.isra.0>:
static alarm_id_t add_alarm_under_lock(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
1000416c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000416e:	46de      	mov	lr, fp
10004170:	4657      	mov	r7, sl
10004172:	464e      	mov	r6, r9
10004174:	4645      	mov	r5, r8
10004176:	b5e0      	push	{r5, r6, r7, lr}
10004178:	001f      	movs	r7, r3
1000417a:	ab0d      	add	r3, sp, #52	; 0x34
1000417c:	781b      	ldrb	r3, [r3, #0]
1000417e:	0005      	movs	r5, r0
10004180:	469b      	mov	fp, r3
    if (reuse_id) {
10004182:	9b0c      	ldr	r3, [sp, #48]	; 0x30
static alarm_id_t add_alarm_under_lock(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
10004184:	0016      	movs	r6, r2
    if (reuse_id) {
10004186:	2b00      	cmp	r3, #0
10004188:	d045      	beq.n	10004216 <add_alarm_under_lock.isra.0+0xaa>
    return pool->entries + id - 1;
1000418a:	4a3f      	ldr	r2, [pc, #252]	; (10004288 <add_alarm_under_lock.isra.0+0x11c>)
        alarm_pool_entry_t *entry = get_entry(pool, id);
1000418c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return pool->entries + id - 1;
1000418e:	4694      	mov	ip, r2
        alarm_pool_entry_t *entry = get_entry(pool, id);
10004190:	b2db      	uxtb	r3, r3
    return pool->entries + id - 1;
10004192:	68aa      	ldr	r2, [r5, #8]
        alarm_pool_entry_t *entry = get_entry(pool, id);
10004194:	469a      	mov	sl, r3
    return pool->entries + id - 1;
10004196:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        if (id == ph_insert(pool->heap, id)) {
10004198:	682c      	ldr	r4, [r5, #0]
    return pool->entries + id - 1;
1000419a:	4463      	add	r3, ip
1000419c:	4694      	mov	ip, r2
1000419e:	011b      	lsls	r3, r3, #4
        entry->callback = callback;
100041a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    return pool->entries + id - 1;
100041a2:	4463      	add	r3, ip
        entry->callback = callback;
100041a4:	609a      	str	r2, [r3, #8]
        entry->user_data = user_data;
100041a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        entry->target = time;
100041a8:	601e      	str	r6, [r3, #0]
        entry->user_data = user_data;
100041aa:	60da      	str	r2, [r3, #12]
100041ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        entry->target = time;
100041ae:	605f      	str	r7, [r3, #4]
100041b0:	4694      	mov	ip, r2
100041b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hn->child = hn->sibling = hn->parent = 0;
100041b4:	2200      	movs	r2, #0
    return heap->nodes + id - 1;
100041b6:	005b      	lsls	r3, r3, #1
100041b8:	4463      	add	r3, ip
100041ba:	3b03      	subs	r3, #3
100041bc:	4698      	mov	r8, r3
100041be:	6823      	ldr	r3, [r4, #0]
100041c0:	4443      	add	r3, r8
    hn->child = hn->sibling = hn->parent = 0;
100041c2:	709a      	strb	r2, [r3, #2]
100041c4:	705a      	strb	r2, [r3, #1]
100041c6:	701a      	strb	r2, [r3, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
100041c8:	7b63      	ldrb	r3, [r4, #13]
100041ca:	4699      	mov	r9, r3
    if (!a) return b;
100041cc:	2b00      	cmp	r3, #0
100041ce:	d042      	beq.n	10004256 <add_alarm_under_lock.isra.0+0xea>
    if (heap->comparator(heap->user_data, a, b)) {
100041d0:	4652      	mov	r2, sl
100041d2:	0019      	movs	r1, r3
100041d4:	68a0      	ldr	r0, [r4, #8]
100041d6:	6863      	ldr	r3, [r4, #4]
100041d8:	4798      	blx	r3
    return heap->nodes + id - 1;
100041da:	6822      	ldr	r2, [r4, #0]
    if (heap->comparator(heap->user_data, a, b)) {
100041dc:	2800      	cmp	r0, #0
100041de:	d02b      	beq.n	10004238 <add_alarm_under_lock.isra.0+0xcc>
    return heap->nodes + id - 1;
100041e0:	464b      	mov	r3, r9
100041e2:	005b      	lsls	r3, r3, #1
100041e4:	444b      	add	r3, r9
100041e6:	3b03      	subs	r3, #3
100041e8:	18d1      	adds	r1, r2, r3
100041ea:	468c      	mov	ip, r1
100041ec:	4641      	mov	r1, r8
    c->parent = parent_id;
100041ee:	4648      	mov	r0, r9
    return heap->nodes + id - 1;
100041f0:	1851      	adds	r1, r2, r1
    c->parent = parent_id;
100041f2:	7088      	strb	r0, [r1, #2]
    if (!n->child) {
100041f4:	5cd3      	ldrb	r3, [r2, r3]
100041f6:	2b00      	cmp	r3, #0
100041f8:	d142      	bne.n	10004280 <add_alarm_under_lock.isra.0+0x114>
        n->child = child_id;
100041fa:	4653      	mov	r3, sl
100041fc:	4662      	mov	r2, ip
100041fe:	7013      	strb	r3, [r2, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10004200:	464b      	mov	r3, r9
10004202:	7363      	strb	r3, [r4, #13]
        if (id == ph_insert(pool->heap, id)) {
10004204:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10004206:	4599      	cmp	r9, r3
10004208:	d027      	beq.n	1000425a <add_alarm_under_lock.isra.0+0xee>
}
1000420a:	bcf0      	pop	{r4, r5, r6, r7}
1000420c:	46bb      	mov	fp, r7
1000420e:	46b2      	mov	sl, r6
10004210:	46a9      	mov	r9, r5
10004212:	46a0      	mov	r8, r4
10004214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        id = ph_new_node(pool->heap);
10004216:	6802      	ldr	r2, [r0, #0]
    if (!heap->free_head_id) return 0;
10004218:	7b94      	ldrb	r4, [r2, #14]
1000421a:	2c00      	cmp	r4, #0
1000421c:	d0f5      	beq.n	1000420a <add_alarm_under_lock.isra.0+0x9e>
    heap->free_head_id = ph_get_node(heap, id)->sibling;
1000421e:	6811      	ldr	r1, [r2, #0]
10004220:	0063      	lsls	r3, r4, #1
10004222:	468c      	mov	ip, r1
10004224:	191b      	adds	r3, r3, r4
10004226:	4463      	add	r3, ip
10004228:	3b03      	subs	r3, #3
1000422a:	785b      	ldrb	r3, [r3, #1]
1000422c:	7393      	strb	r3, [r2, #14]
    if (!heap->free_head_id) heap->free_tail_id = 0;
1000422e:	2b00      	cmp	r3, #0
10004230:	d100      	bne.n	10004234 <add_alarm_under_lock.isra.0+0xc8>
10004232:	73d3      	strb	r3, [r2, #15]
10004234:	940c      	str	r4, [sp, #48]	; 0x30
    if (id) {
10004236:	e7a8      	b.n	1000418a <add_alarm_under_lock.isra.0+0x1e>
    return heap->nodes + id - 1;
10004238:	4643      	mov	r3, r8
1000423a:	18d1      	adds	r1, r2, r3
1000423c:	464b      	mov	r3, r9
    c->parent = parent_id;
1000423e:	4650      	mov	r0, sl
    return heap->nodes + id - 1;
10004240:	005b      	lsls	r3, r3, #1
10004242:	444b      	add	r3, r9
10004244:	3b03      	subs	r3, #3
10004246:	18d3      	adds	r3, r2, r3
    c->parent = parent_id;
10004248:	7098      	strb	r0, [r3, #2]
    if (!n->child) {
1000424a:	4640      	mov	r0, r8
1000424c:	5c12      	ldrb	r2, [r2, r0]
1000424e:	2a00      	cmp	r2, #0
10004250:	d118      	bne.n	10004284 <add_alarm_under_lock.isra.0+0x118>
        n->child = child_id;
10004252:	464b      	mov	r3, r9
10004254:	700b      	strb	r3, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10004256:	4653      	mov	r3, sl
10004258:	7363      	strb	r3, [r4, #13]
            bool is_missed = hardware_alarm_set_target(pool->hardware_alarm_num, time);
1000425a:	0032      	movs	r2, r6
1000425c:	003b      	movs	r3, r7
1000425e:	7d28      	ldrb	r0, [r5, #20]
10004260:	f000 fc1e 	bl	10004aa0 <hardware_alarm_set_target>
10004264:	1e04      	subs	r4, r0, #0
            if (is_missed && !create_if_past) {
10004266:	d006      	beq.n	10004276 <add_alarm_under_lock.isra.0+0x10a>
10004268:	465b      	mov	r3, fp
1000426a:	2b00      	cmp	r3, #0
1000426c:	d103      	bne.n	10004276 <add_alarm_under_lock.isra.0+0x10a>
                ph_delete(pool->heap, id);
1000426e:	4651      	mov	r1, sl
10004270:	6828      	ldr	r0, [r5, #0]
10004272:	f7fd fedf 	bl	10002034 <ph_delete>
            if (missed) *missed = is_missed;
10004276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10004278:	2b00      	cmp	r3, #0
1000427a:	d0c6      	beq.n	1000420a <add_alarm_under_lock.isra.0+0x9e>
1000427c:	701c      	strb	r4, [r3, #0]
    return id;
1000427e:	e7c4      	b.n	1000420a <add_alarm_under_lock.isra.0+0x9e>
        c->sibling = n->child;
10004280:	704b      	strb	r3, [r1, #1]
10004282:	e7ba      	b.n	100041fa <add_alarm_under_lock.isra.0+0x8e>
10004284:	705a      	strb	r2, [r3, #1]
10004286:	e7e4      	b.n	10004252 <add_alarm_under_lock.isra.0+0xe6>
10004288:	0fffffff 	.word	0x0fffffff

1000428c <alarm_pool_alarm_callback>:
static void alarm_pool_alarm_callback(uint alarm_num) {
1000428c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000428e:	46de      	mov	lr, fp
10004290:	464e      	mov	r6, r9
10004292:	4657      	mov	r7, sl
10004294:	4645      	mov	r5, r8
10004296:	2300      	movs	r3, #0
10004298:	b5e0      	push	{r5, r6, r7, lr}
1000429a:	b08d      	sub	sp, #52	; 0x34
1000429c:	930a      	str	r3, [sp, #40]	; 0x28
    alarm_pool_t *pool = pools[alarm_num];
1000429e:	4b6b      	ldr	r3, [pc, #428]	; (1000444c <alarm_pool_alarm_callback+0x1c0>)
100042a0:	0082      	lsls	r2, r0, #2
100042a2:	58d3      	ldr	r3, [r2, r3]
static void alarm_pool_alarm_callback(uint alarm_num) {
100042a4:	900b      	str	r0, [sp, #44]	; 0x2c
    alarm_pool_t *pool = pools[alarm_num];
100042a6:	4699      	mov	r9, r3
        void *user_data = NULL;
100042a8:	2300      	movs	r3, #0
100042aa:	469b      	mov	fp, r3
100042ac:	464b      	mov	r3, r9
100042ae:	9307      	str	r3, [sp, #28]
    update_us_since_boot(&t, time_us_64());
100042b0:	f000 fb96 	bl	100049e0 <time_us_64>
        uint32_t save = spin_lock_blocking(pool->lock);
100042b4:	9c07      	ldr	r4, [sp, #28]
100042b6:	0006      	movs	r6, r0
100042b8:	000f      	movs	r7, r1
100042ba:	6862      	ldr	r2, [r4, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100042bc:	f3ef 8510 	mrs	r5, PRIMASK
    __asm volatile ("cpsid i");
100042c0:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100042c2:	6813      	ldr	r3, [r2, #0]
100042c4:	2b00      	cmp	r3, #0
100042c6:	d0fc      	beq.n	100042c2 <alarm_pool_alarm_callback+0x36>
    __asm volatile ("dmb");
100042c8:	0022      	movs	r2, r4
100042ca:	9407      	str	r4, [sp, #28]
100042cc:	f3bf 8f5f 	dmb	sy
        pheap_node_id_t next_id = ph_peek_head(pool->heap);
100042d0:	6824      	ldr	r4, [r4, #0]
    return heap->root_id;
100042d2:	7b63      	ldrb	r3, [r4, #13]
100042d4:	4699      	mov	r9, r3
        if (next_id) {
100042d6:	2b00      	cmp	r3, #0
100042d8:	d067      	beq.n	100043aa <alarm_pool_alarm_callback+0x11e>
    return pool->entries + id - 1;
100042da:	6892      	ldr	r2, [r2, #8]
100042dc:	4b5c      	ldr	r3, [pc, #368]	; (10004450 <alarm_pool_alarm_callback+0x1c4>)
100042de:	4690      	mov	r8, r2
100042e0:	444b      	add	r3, r9
100042e2:	011b      	lsls	r3, r3, #4
100042e4:	4498      	add	r8, r3
            if (absolute_time_diff_us(now, entry->target) <= 0) {
100042e6:	4643      	mov	r3, r8
100042e8:	681a      	ldr	r2, [r3, #0]
100042ea:	685b      	ldr	r3, [r3, #4]
    return to_us_since_boot(to) - to_us_since_boot(from);
100042ec:	0010      	movs	r0, r2
100042ee:	0019      	movs	r1, r3
100042f0:	1b80      	subs	r0, r0, r6
100042f2:	41b9      	sbcs	r1, r7
100042f4:	2900      	cmp	r1, #0
100042f6:	dd5f      	ble.n	100043b8 <alarm_pool_alarm_callback+0x12c>
                if (hardware_alarm_set_target(alarm_num, entry->target)) {
100042f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
100042fa:	f000 fbd1 	bl	10004aa0 <hardware_alarm_set_target>
        void *user_data = NULL;
100042fe:	2300      	movs	r3, #0
        absolute_time_t target = nil_time;
10004300:	2600      	movs	r6, #0
        void *user_data = NULL;
10004302:	4698      	mov	r8, r3
        absolute_time_t target = nil_time;
10004304:	2700      	movs	r7, #0
        alarm_callback_t callback = NULL;
10004306:	469a      	mov	sl, r3
        spin_unlock(pool->lock, save);
10004308:	9c07      	ldr	r4, [sp, #28]
1000430a:	6863      	ldr	r3, [r4, #4]
1000430c:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004310:	465a      	mov	r2, fp
10004312:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004314:	f385 8810 	msr	PRIMASK, r5
        if (callback) {
10004318:	4653      	mov	r3, sl
1000431a:	2b00      	cmp	r3, #0
1000431c:	d108      	bne.n	10004330 <alarm_pool_alarm_callback+0xa4>
    } while (again);
1000431e:	2800      	cmp	r0, #0
10004320:	d1c6      	bne.n	100042b0 <alarm_pool_alarm_callback+0x24>
}
10004322:	b00d      	add	sp, #52	; 0x34
10004324:	bcf0      	pop	{r4, r5, r6, r7}
10004326:	46bb      	mov	fp, r7
10004328:	46b2      	mov	sl, r6
1000432a:	46a9      	mov	r9, r5
1000432c:	46a0      	mov	r8, r4
1000432e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ((uint)id_high << 8u * sizeof(id)) | id;
10004330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            int64_t repeat = callback(make_public_id(id_high, next_id), user_data);
10004332:	4641      	mov	r1, r8
    return ((uint)id_high << 8u * sizeof(id)) | id;
10004334:	0218      	lsls	r0, r3, #8
10004336:	464b      	mov	r3, r9
10004338:	4318      	orrs	r0, r3
            int64_t repeat = callback(make_public_id(id_high, next_id), user_data);
1000433a:	47d0      	blx	sl
1000433c:	9008      	str	r0, [sp, #32]
1000433e:	9109      	str	r1, [sp, #36]	; 0x24
            save = spin_lock_blocking(pool->lock);
10004340:	6862      	ldr	r2, [r4, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004342:	f3ef 8510 	mrs	r5, PRIMASK
    __asm volatile ("cpsid i");
10004346:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004348:	6813      	ldr	r3, [r2, #0]
1000434a:	2b00      	cmp	r3, #0
1000434c:	d0fc      	beq.n	10004348 <alarm_pool_alarm_callback+0xbc>
    __asm volatile ("dmb");
1000434e:	9407      	str	r4, [sp, #28]
10004350:	f3bf 8f5f 	dmb	sy
            if (repeat < 0 && pool->alarm_in_progress) {
10004354:	9908      	ldr	r1, [sp, #32]
10004356:	9a09      	ldr	r2, [sp, #36]	; 0x24
10004358:	2a00      	cmp	r2, #0
1000435a:	db48      	blt.n	100043ee <alarm_pool_alarm_callback+0x162>
            } else if (repeat > 0 && pool->alarm_in_progress) {
1000435c:	4311      	orrs	r1, r2
1000435e:	d003      	beq.n	10004368 <alarm_pool_alarm_callback+0xdc>
10004360:	9b07      	ldr	r3, [sp, #28]
10004362:	691b      	ldr	r3, [r3, #16]
10004364:	2b00      	cmp	r3, #0
10004366:	d15d      	bne.n	10004424 <alarm_pool_alarm_callback+0x198>
                ph_add_to_free_list(pool->heap, next_id);
10004368:	9b07      	ldr	r3, [sp, #28]
1000436a:	681b      	ldr	r3, [r3, #0]

bool ph_delete(pheap_t *heap, pheap_node_id_t id);

static inline void ph_add_to_free_list(pheap_t *heap, pheap_node_id_t id) {
    assert(id && !ph_contains(heap, id));
    if (heap->free_tail_id) {
1000436c:	7bd9      	ldrb	r1, [r3, #15]
1000436e:	2900      	cmp	r1, #0
10004370:	d007      	beq.n	10004382 <alarm_pool_alarm_callback+0xf6>
        ph_get_node(heap, heap->free_tail_id)->sibling = id;
10004372:	004a      	lsls	r2, r1, #1
10004374:	1852      	adds	r2, r2, r1
10004376:	6819      	ldr	r1, [r3, #0]
10004378:	468c      	mov	ip, r1
1000437a:	4649      	mov	r1, r9
1000437c:	4462      	add	r2, ip
1000437e:	3a03      	subs	r2, #3
10004380:	7051      	strb	r1, [r2, #1]
    }
    heap->free_tail_id = id;
10004382:	464a      	mov	r2, r9
10004384:	73da      	strb	r2, [r3, #15]
    return pool->entry_ids_high + id - 1;
10004386:	464b      	mov	r3, r9
10004388:	9a07      	ldr	r2, [sp, #28]
1000438a:	3b01      	subs	r3, #1
1000438c:	68d1      	ldr	r1, [r2, #12]
                (*get_entry_id_high(pool, next_id))++; // we bump it for next use of id
1000438e:	5cca      	ldrb	r2, [r1, r3]
10004390:	3201      	adds	r2, #1
10004392:	54ca      	strb	r2, [r1, r3]
            pool->alarm_in_progress = 0;
10004394:	465b      	mov	r3, fp
10004396:	9a07      	ldr	r2, [sp, #28]
10004398:	6113      	str	r3, [r2, #16]
            spin_unlock(pool->lock, save);
1000439a:	6853      	ldr	r3, [r2, #4]
1000439c:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100043a0:	465a      	mov	r2, fp
100043a2:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100043a4:	f385 8810 	msr	PRIMASK, r5
    } while (again);
100043a8:	e782      	b.n	100042b0 <alarm_pool_alarm_callback+0x24>
        void *user_data = NULL;
100043aa:	2300      	movs	r3, #0
        absolute_time_t target = nil_time;
100043ac:	2600      	movs	r6, #0
        void *user_data = NULL;
100043ae:	4698      	mov	r8, r3
        absolute_time_t target = nil_time;
100043b0:	2700      	movs	r7, #0
        alarm_callback_t callback = NULL;
100043b2:	469a      	mov	sl, r3
        again = false;
100043b4:	2000      	movs	r0, #0
100043b6:	e7a7      	b.n	10004308 <alarm_pool_alarm_callback+0x7c>
            if (absolute_time_diff_us(now, entry->target) <= 0) {
100043b8:	2900      	cmp	r1, #0
100043ba:	d101      	bne.n	100043c0 <alarm_pool_alarm_callback+0x134>
100043bc:	2800      	cmp	r0, #0
100043be:	d19b      	bne.n	100042f8 <alarm_pool_alarm_callback+0x6c>
                pheap_node_id_t __unused removed_id = ph_remove_head_reserve(pool->heap, true);
100043c0:	2101      	movs	r1, #1
100043c2:	0020      	movs	r0, r4
100043c4:	f7fd fdb8 	bl	10001f38 <ph_remove_head_reserve>
                target = entry->target;
100043c8:	4643      	mov	r3, r8
100043ca:	681e      	ldr	r6, [r3, #0]
100043cc:	685f      	ldr	r7, [r3, #4]
                callback = entry->callback;
100043ce:	689b      	ldr	r3, [r3, #8]
                id_high = *get_entry_id_high(pool, next_id);
100043d0:	9a07      	ldr	r2, [sp, #28]
                callback = entry->callback;
100043d2:	469a      	mov	sl, r3
                user_data = entry->user_data;
100043d4:	4643      	mov	r3, r8
100043d6:	68db      	ldr	r3, [r3, #12]
100043d8:	4698      	mov	r8, r3
                id_high = *get_entry_id_high(pool, next_id);
100043da:	68d3      	ldr	r3, [r2, #12]
100043dc:	444b      	add	r3, r9
100043de:	3b01      	subs	r3, #1
100043e0:	781b      	ldrb	r3, [r3, #0]
100043e2:	930a      	str	r3, [sp, #40]	; 0x28
    return ((uint)id_high << 8u * sizeof(id)) | id;
100043e4:	021b      	lsls	r3, r3, #8
100043e6:	4303      	orrs	r3, r0
                pool->alarm_in_progress = make_public_id(id_high, removed_id);
100043e8:	6113      	str	r3, [r2, #16]
        again = false;
100043ea:	2000      	movs	r0, #0
100043ec:	e78c      	b.n	10004308 <alarm_pool_alarm_callback+0x7c>
            if (repeat < 0 && pool->alarm_in_progress) {
100043ee:	6923      	ldr	r3, [r4, #16]
100043f0:	2b00      	cmp	r3, #0
100043f2:	d0b9      	beq.n	10004368 <alarm_pool_alarm_callback+0xdc>
    uint64_t delayed = base + us;
100043f4:	0033      	movs	r3, r6
100043f6:	003c      	movs	r4, r7
100043f8:	1a5b      	subs	r3, r3, r1
100043fa:	4194      	sbcs	r4, r2
100043fc:	001a      	movs	r2, r3
100043fe:	0023      	movs	r3, r4
    if (delayed < base) {
10004400:	42a7      	cmp	r7, r4
10004402:	d819      	bhi.n	10004438 <alarm_pool_alarm_callback+0x1ac>
10004404:	429f      	cmp	r7, r3
10004406:	d01b      	beq.n	10004440 <alarm_pool_alarm_callback+0x1b4>
                add_alarm_under_lock(pool, delayed_by_us(get_absolute_time(), repeat), callback, user_data, next_id,
10004408:	4659      	mov	r1, fp
1000440a:	9104      	str	r1, [sp, #16]
1000440c:	2101      	movs	r1, #1
1000440e:	9103      	str	r1, [sp, #12]
10004410:	4649      	mov	r1, r9
10004412:	9102      	str	r1, [sp, #8]
10004414:	4641      	mov	r1, r8
10004416:	9101      	str	r1, [sp, #4]
10004418:	4651      	mov	r1, sl
1000441a:	9807      	ldr	r0, [sp, #28]
1000441c:	9100      	str	r1, [sp, #0]
1000441e:	f7ff fea5 	bl	1000416c <add_alarm_under_lock.isra.0>
10004422:	e7b7      	b.n	10004394 <alarm_pool_alarm_callback+0x108>
    update_us_since_boot(&t, time_us_64());
10004424:	f000 fadc 	bl	100049e0 <time_us_64>
    uint64_t delayed = base + us;
10004428:	9a08      	ldr	r2, [sp, #32]
1000442a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    update_us_since_boot(&t, time_us_64());
1000442c:	0006      	movs	r6, r0
1000442e:	000f      	movs	r7, r1
    uint64_t delayed = base + us;
10004430:	1992      	adds	r2, r2, r6
10004432:	417b      	adcs	r3, r7
    if (delayed < base) {
10004434:	4299      	cmp	r1, r3
10004436:	d9e5      	bls.n	10004404 <alarm_pool_alarm_callback+0x178>
        delayed = (uint64_t)-1;
10004438:	2201      	movs	r2, #1
1000443a:	4252      	negs	r2, r2
1000443c:	17d3      	asrs	r3, r2, #31
1000443e:	e7e3      	b.n	10004408 <alarm_pool_alarm_callback+0x17c>
    if (delayed < base) {
10004440:	4296      	cmp	r6, r2
10004442:	d9e1      	bls.n	10004408 <alarm_pool_alarm_callback+0x17c>
        delayed = (uint64_t)-1;
10004444:	2201      	movs	r2, #1
10004446:	4252      	negs	r2, r2
10004448:	17d3      	asrs	r3, r2, #31
1000444a:	e7dd      	b.n	10004408 <alarm_pool_alarm_callback+0x17c>
1000444c:	20023b4c 	.word	0x20023b4c
10004450:	0fffffff 	.word	0x0fffffff

10004454 <alarm_pool_add_alarm_at.constprop.0>:
alarm_id_t alarm_pool_add_alarm_at(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
10004454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004456:	4657      	mov	r7, sl
10004458:	464e      	mov	r6, r9
1000445a:	46de      	mov	lr, fp
1000445c:	4645      	mov	r5, r8
1000445e:	4691      	mov	r9, r2
10004460:	b5e0      	push	{r5, r6, r7, lr}
10004462:	0004      	movs	r4, r0
10004464:	469a      	mov	sl, r3
        uint32_t save = spin_lock_blocking(pool->lock);
10004466:	6842      	ldr	r2, [r0, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004468:	f3ef 8810 	mrs	r8, PRIMASK
    __asm volatile ("cpsid i");
1000446c:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000446e:	6813      	ldr	r3, [r2, #0]
10004470:	2b00      	cmp	r3, #0
10004472:	d0fc      	beq.n	1000446e <alarm_pool_add_alarm_at.constprop.0+0x1a>
    __asm volatile ("dmb");
10004474:	f3bf 8f5f 	dmb	sy
        id = ph_new_node(pool->heap);
10004478:	6826      	ldr	r6, [r4, #0]
    if (!heap->free_head_id) return 0;
1000447a:	7bb5      	ldrb	r5, [r6, #14]
1000447c:	2d00      	cmp	r5, #0
1000447e:	d048      	beq.n	10004512 <alarm_pool_add_alarm_at.constprop.0+0xbe>
    return heap->nodes + id - 1;
10004480:	006f      	lsls	r7, r5, #1
10004482:	6833      	ldr	r3, [r6, #0]
10004484:	197f      	adds	r7, r7, r5
10004486:	3f03      	subs	r7, #3
10004488:	19d9      	adds	r1, r3, r7
    heap->free_head_id = ph_get_node(heap, id)->sibling;
1000448a:	784b      	ldrb	r3, [r1, #1]
1000448c:	73b3      	strb	r3, [r6, #14]
    if (!heap->free_head_id) heap->free_tail_id = 0;
1000448e:	2b00      	cmp	r3, #0
10004490:	d100      	bne.n	10004494 <alarm_pool_add_alarm_at.constprop.0+0x40>
10004492:	73f3      	strb	r3, [r6, #15]
    return pool->entries + id - 1;
10004494:	68a2      	ldr	r2, [r4, #8]
10004496:	4b34      	ldr	r3, [pc, #208]	; (10004568 <alarm_pool_add_alarm_at.constprop.0+0x114>)
10004498:	4694      	mov	ip, r2
        entry->target = time;
1000449a:	464a      	mov	r2, r9
    return pool->entries + id - 1;
1000449c:	18eb      	adds	r3, r5, r3
1000449e:	011b      	lsls	r3, r3, #4
100044a0:	4463      	add	r3, ip
        entry->target = time;
100044a2:	601a      	str	r2, [r3, #0]
100044a4:	4652      	mov	r2, sl
100044a6:	605a      	str	r2, [r3, #4]
        entry->callback = callback;
100044a8:	4a30      	ldr	r2, [pc, #192]	; (1000456c <alarm_pool_add_alarm_at.constprop.0+0x118>)
100044aa:	609a      	str	r2, [r3, #8]
        entry->user_data = user_data;
100044ac:	2200      	movs	r2, #0
100044ae:	60da      	str	r2, [r3, #12]
    hn->child = hn->sibling = hn->parent = 0;
100044b0:	708a      	strb	r2, [r1, #2]
100044b2:	704a      	strb	r2, [r1, #1]
100044b4:	700a      	strb	r2, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
100044b6:	7b73      	ldrb	r3, [r6, #13]
100044b8:	469b      	mov	fp, r3
    if (!a) return b;
100044ba:	2b00      	cmp	r3, #0
100044bc:	d043      	beq.n	10004546 <alarm_pool_add_alarm_at.constprop.0+0xf2>
    if (heap->comparator(heap->user_data, a, b)) {
100044be:	002a      	movs	r2, r5
100044c0:	0019      	movs	r1, r3
100044c2:	68b0      	ldr	r0, [r6, #8]
100044c4:	6873      	ldr	r3, [r6, #4]
100044c6:	4798      	blx	r3
    return heap->nodes + id - 1;
100044c8:	6832      	ldr	r2, [r6, #0]
    if (heap->comparator(heap->user_data, a, b)) {
100044ca:	2800      	cmp	r0, #0
100044cc:	d02f      	beq.n	1000452e <alarm_pool_add_alarm_at.constprop.0+0xda>
    return heap->nodes + id - 1;
100044ce:	465b      	mov	r3, fp
    c->parent = parent_id;
100044d0:	4658      	mov	r0, fp
    return heap->nodes + id - 1;
100044d2:	005b      	lsls	r3, r3, #1
100044d4:	445b      	add	r3, fp
100044d6:	19d7      	adds	r7, r2, r7
100044d8:	3b03      	subs	r3, #3
    c->parent = parent_id;
100044da:	70b8      	strb	r0, [r7, #2]
    return heap->nodes + id - 1;
100044dc:	18d1      	adds	r1, r2, r3
    if (!n->child) {
100044de:	5cd3      	ldrb	r3, [r2, r3]
100044e0:	2b00      	cmp	r3, #0
100044e2:	d13f      	bne.n	10004564 <alarm_pool_add_alarm_at.constprop.0+0x110>
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
100044e4:	465b      	mov	r3, fp
        n->child = child_id;
100044e6:	700d      	strb	r5, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
100044e8:	7373      	strb	r3, [r6, #13]
        if (id == ph_insert(pool->heap, id)) {
100044ea:	455d      	cmp	r5, fp
100044ec:	d02c      	beq.n	10004548 <alarm_pool_add_alarm_at.constprop.0+0xf4>
    bool missed = false;
100044ee:	2600      	movs	r6, #0
        if (id) id_high = *get_entry_id_high(pool, id);
100044f0:	68e3      	ldr	r3, [r4, #12]
100044f2:	195b      	adds	r3, r3, r5
100044f4:	3b01      	subs	r3, #1
100044f6:	7819      	ldrb	r1, [r3, #0]
        spin_unlock(pool->lock, save);
100044f8:	6863      	ldr	r3, [r4, #4]
100044fa:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100044fe:	2200      	movs	r2, #0
10004500:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004502:	f388 8810 	msr	PRIMASK, r8
        public_id = missed ? 0 : make_public_id(id_high, id);
10004506:	2000      	movs	r0, #0
10004508:	2e00      	cmp	r6, #0
1000450a:	d10a      	bne.n	10004522 <alarm_pool_add_alarm_at.constprop.0+0xce>
    return ((uint)id_high << 8u * sizeof(id)) | id;
1000450c:	0208      	lsls	r0, r1, #8
1000450e:	4328      	orrs	r0, r5
10004510:	e007      	b.n	10004522 <alarm_pool_add_alarm_at.constprop.0+0xce>
        spin_unlock(pool->lock, save);
10004512:	6863      	ldr	r3, [r4, #4]
    __asm volatile ("dmb");
10004514:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004518:	601d      	str	r5, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000451a:	f388 8810 	msr	PRIMASK, r8
            return -1;
1000451e:	2001      	movs	r0, #1
10004520:	4240      	negs	r0, r0
}
10004522:	bcf0      	pop	{r4, r5, r6, r7}
10004524:	46bb      	mov	fp, r7
10004526:	46b2      	mov	sl, r6
10004528:	46a9      	mov	r9, r5
1000452a:	46a0      	mov	r8, r4
1000452c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return heap->nodes + id - 1;
1000452e:	465b      	mov	r3, fp
10004530:	005b      	lsls	r3, r3, #1
10004532:	445b      	add	r3, fp
10004534:	3b03      	subs	r3, #3
10004536:	18d3      	adds	r3, r2, r3
    c->parent = parent_id;
10004538:	709d      	strb	r5, [r3, #2]
    return heap->nodes + id - 1;
1000453a:	19d1      	adds	r1, r2, r7
    if (!n->child) {
1000453c:	5dd2      	ldrb	r2, [r2, r7]
1000453e:	2a00      	cmp	r2, #0
10004540:	d10e      	bne.n	10004560 <alarm_pool_add_alarm_at.constprop.0+0x10c>
        n->child = child_id;
10004542:	465b      	mov	r3, fp
10004544:	700b      	strb	r3, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10004546:	7375      	strb	r5, [r6, #13]
            bool is_missed = hardware_alarm_set_target(pool->hardware_alarm_num, time);
10004548:	464a      	mov	r2, r9
1000454a:	4653      	mov	r3, sl
1000454c:	7d20      	ldrb	r0, [r4, #20]
1000454e:	f000 faa7 	bl	10004aa0 <hardware_alarm_set_target>
10004552:	1e06      	subs	r6, r0, #0
            if (is_missed && !create_if_past) {
10004554:	d0cb      	beq.n	100044ee <alarm_pool_add_alarm_at.constprop.0+0x9a>
                ph_delete(pool->heap, id);
10004556:	0029      	movs	r1, r5
10004558:	6820      	ldr	r0, [r4, #0]
1000455a:	f7fd fd6b 	bl	10002034 <ph_delete>
1000455e:	e7c7      	b.n	100044f0 <alarm_pool_add_alarm_at.constprop.0+0x9c>
        c->sibling = n->child;
10004560:	705a      	strb	r2, [r3, #1]
10004562:	e7ee      	b.n	10004542 <alarm_pool_add_alarm_at.constprop.0+0xee>
10004564:	707b      	strb	r3, [r7, #1]
10004566:	e7bd      	b.n	100044e4 <alarm_pool_add_alarm_at.constprop.0+0x90>
10004568:	0fffffff 	.word	0x0fffffff
1000456c:	10004165 	.word	0x10004165

10004570 <alarm_pool_init_default>:
void alarm_pool_init_default() {
10004570:	b570      	push	{r4, r5, r6, lr}
    if (!default_alarm_pool) {
10004572:	4c18      	ldr	r4, [pc, #96]	; (100045d4 <alarm_pool_init_default+0x64>)
10004574:	6823      	ldr	r3, [r4, #0]
10004576:	2b00      	cmp	r3, #0
10004578:	d000      	beq.n	1000457c <alarm_pool_init_default+0xc>
}
1000457a:	bd70      	pop	{r4, r5, r6, pc}
    hardware_alarm_claim(hardware_alarm_num);
1000457c:	2003      	movs	r0, #3
1000457e:	f000 fa23 	bl	100049c8 <hardware_alarm_claim>
    hardware_alarm_cancel(hardware_alarm_num);
10004582:	2003      	movs	r0, #3
10004584:	f000 faee 	bl	10004b64 <hardware_alarm_cancel>
    hardware_alarm_set_callback(hardware_alarm_num, alarm_pool_alarm_callback);
10004588:	4913      	ldr	r1, [pc, #76]	; (100045d8 <alarm_pool_init_default+0x68>)
1000458a:	2003      	movs	r0, #3
1000458c:	f000 fa42 	bl	10004a14 <hardware_alarm_set_callback>
    alarm_pool_t *pool = (alarm_pool_t *)malloc(sizeof(alarm_pool_t));
10004590:	2018      	movs	r0, #24
10004592:	f7fd fd8d 	bl	100020b0 <__wrap_malloc>
10004596:	0005      	movs	r5, r0
    pool->lock = spin_lock_instance(next_striped_spin_lock_num());
10004598:	f7ff fdae 	bl	100040f8 <next_striped_spin_lock_num>
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
1000459c:	4b0f      	ldr	r3, [pc, #60]	; (100045dc <alarm_pool_init_default+0x6c>)
    pool->heap = ph_create(max_timers, timer_pool_entry_comparator, pool);
1000459e:	002a      	movs	r2, r5
100045a0:	469c      	mov	ip, r3
100045a2:	4460      	add	r0, ip
100045a4:	0080      	lsls	r0, r0, #2
100045a6:	490e      	ldr	r1, [pc, #56]	; (100045e0 <alarm_pool_init_default+0x70>)
    pool->lock = spin_lock_instance(next_striped_spin_lock_num());
100045a8:	6068      	str	r0, [r5, #4]
    pool->heap = ph_create(max_timers, timer_pool_entry_comparator, pool);
100045aa:	2010      	movs	r0, #16
100045ac:	f7fd fbce 	bl	10001d4c <ph_create>
    pool->entries = (alarm_pool_entry_t *)calloc(max_timers, sizeof(alarm_pool_entry_t));
100045b0:	2110      	movs	r1, #16
    pool->heap = ph_create(max_timers, timer_pool_entry_comparator, pool);
100045b2:	6028      	str	r0, [r5, #0]
    pool->entries = (alarm_pool_entry_t *)calloc(max_timers, sizeof(alarm_pool_entry_t));
100045b4:	2010      	movs	r0, #16
100045b6:	f7fd fd7f 	bl	100020b8 <__wrap_calloc>
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
100045ba:	2101      	movs	r1, #1
    pool->entries = (alarm_pool_entry_t *)calloc(max_timers, sizeof(alarm_pool_entry_t));
100045bc:	60a8      	str	r0, [r5, #8]
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
100045be:	2010      	movs	r0, #16
100045c0:	f7fd fd7a 	bl	100020b8 <__wrap_calloc>
    pool->hardware_alarm_num = hardware_alarm_num;
100045c4:	2303      	movs	r3, #3
100045c6:	752b      	strb	r3, [r5, #20]
    pools[hardware_alarm_num] = pool;
100045c8:	4b06      	ldr	r3, [pc, #24]	; (100045e4 <alarm_pool_init_default+0x74>)
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
100045ca:	60e8      	str	r0, [r5, #12]
    pools[hardware_alarm_num] = pool;
100045cc:	60dd      	str	r5, [r3, #12]
        default_alarm_pool = alarm_pool_create(PICO_TIME_DEFAULT_ALARM_POOL_HARDWARE_ALARM_NUM,
100045ce:	6025      	str	r5, [r4, #0]
}
100045d0:	e7d3      	b.n	1000457a <alarm_pool_init_default+0xa>
100045d2:	46c0      	nop			; (mov r8, r8)
100045d4:	20023488 	.word	0x20023488
100045d8:	1000428d 	.word	0x1000428d
100045dc:	34000040 	.word	0x34000040
100045e0:	10004131 	.word	0x10004131
100045e4:	20023b4c 	.word	0x20023b4c

100045e8 <alarm_pool_get_default>:
    return default_alarm_pool;
100045e8:	4b01      	ldr	r3, [pc, #4]	; (100045f0 <alarm_pool_get_default+0x8>)
100045ea:	6818      	ldr	r0, [r3, #0]
}
100045ec:	4770      	bx	lr
100045ee:	46c0      	nop			; (mov r8, r8)
100045f0:	20023488 	.word	0x20023488

100045f4 <alarm_pool_add_alarm_at>:
                                   void *user_data, bool fire_if_past) {
100045f4:	b5f0      	push	{r4, r5, r6, r7, lr}
100045f6:	46de      	mov	lr, fp
100045f8:	464e      	mov	r6, r9
100045fa:	4645      	mov	r5, r8
100045fc:	4657      	mov	r7, sl
100045fe:	b5e0      	push	{r5, r6, r7, lr}
10004600:	b085      	sub	sp, #20
10004602:	9301      	str	r3, [sp, #4]
10004604:	ab10      	add	r3, sp, #64	; 0x40
10004606:	781b      	ldrb	r3, [r3, #0]
10004608:	0006      	movs	r6, r0
1000460a:	9303      	str	r3, [sp, #12]
    bool missed = false;
1000460c:	2300      	movs	r3, #0
1000460e:	469b      	mov	fp, r3
    hn->child = hn->sibling = hn->parent = 0;
10004610:	4698      	mov	r8, r3
                                   void *user_data, bool fire_if_past) {
10004612:	9200      	str	r2, [sp, #0]
        uint32_t save = spin_lock_blocking(pool->lock);
10004614:	6872      	ldr	r2, [r6, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004616:	f3ef 8a10 	mrs	sl, PRIMASK
    __asm volatile ("cpsid i");
1000461a:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000461c:	6813      	ldr	r3, [r2, #0]
1000461e:	2b00      	cmp	r3, #0
10004620:	d0fc      	beq.n	1000461c <alarm_pool_add_alarm_at+0x28>
    __asm volatile ("dmb");
10004622:	f3bf 8f5f 	dmb	sy
        id = ph_new_node(pool->heap);
10004626:	6835      	ldr	r5, [r6, #0]
    if (!heap->free_head_id) return 0;
10004628:	7bac      	ldrb	r4, [r5, #14]
1000462a:	2c00      	cmp	r4, #0
1000462c:	d100      	bne.n	10004630 <alarm_pool_add_alarm_at+0x3c>
1000462e:	e080      	b.n	10004732 <alarm_pool_add_alarm_at+0x13e>
    return heap->nodes + id - 1;
10004630:	0067      	lsls	r7, r4, #1
10004632:	682b      	ldr	r3, [r5, #0]
10004634:	193f      	adds	r7, r7, r4
10004636:	3f03      	subs	r7, #3
10004638:	19db      	adds	r3, r3, r7
    heap->free_head_id = ph_get_node(heap, id)->sibling;
1000463a:	785a      	ldrb	r2, [r3, #1]
1000463c:	73aa      	strb	r2, [r5, #14]
    if (!heap->free_head_id) heap->free_tail_id = 0;
1000463e:	2a00      	cmp	r2, #0
10004640:	d100      	bne.n	10004644 <alarm_pool_add_alarm_at+0x50>
10004642:	73ea      	strb	r2, [r5, #15]
    return pool->entries + id - 1;
10004644:	68b1      	ldr	r1, [r6, #8]
10004646:	4a55      	ldr	r2, [pc, #340]	; (1000479c <alarm_pool_add_alarm_at+0x1a8>)
10004648:	468c      	mov	ip, r1
        entry->target = time;
1000464a:	9800      	ldr	r0, [sp, #0]
1000464c:	9901      	ldr	r1, [sp, #4]
    return pool->entries + id - 1;
1000464e:	18a2      	adds	r2, r4, r2
10004650:	0112      	lsls	r2, r2, #4
10004652:	4462      	add	r2, ip
        entry->target = time;
10004654:	6010      	str	r0, [r2, #0]
10004656:	6051      	str	r1, [r2, #4]
        entry->callback = callback;
10004658:	990e      	ldr	r1, [sp, #56]	; 0x38
1000465a:	6091      	str	r1, [r2, #8]
        entry->user_data = user_data;
1000465c:	990f      	ldr	r1, [sp, #60]	; 0x3c
1000465e:	60d1      	str	r1, [r2, #12]
    hn->child = hn->sibling = hn->parent = 0;
10004660:	4642      	mov	r2, r8
10004662:	709a      	strb	r2, [r3, #2]
10004664:	705a      	strb	r2, [r3, #1]
10004666:	701a      	strb	r2, [r3, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10004668:	7b6b      	ldrb	r3, [r5, #13]
1000466a:	4699      	mov	r9, r3
    if (!a) return b;
1000466c:	2b00      	cmp	r3, #0
1000466e:	d100      	bne.n	10004672 <alarm_pool_add_alarm_at+0x7e>
10004670:	e07d      	b.n	1000476e <alarm_pool_add_alarm_at+0x17a>
    if (heap->comparator(heap->user_data, a, b)) {
10004672:	0022      	movs	r2, r4
10004674:	0019      	movs	r1, r3
10004676:	68a8      	ldr	r0, [r5, #8]
10004678:	686b      	ldr	r3, [r5, #4]
1000467a:	4798      	blx	r3
    return heap->nodes + id - 1;
1000467c:	682a      	ldr	r2, [r5, #0]
    if (heap->comparator(heap->user_data, a, b)) {
1000467e:	2800      	cmp	r0, #0
10004680:	d069      	beq.n	10004756 <alarm_pool_add_alarm_at+0x162>
    return heap->nodes + id - 1;
10004682:	464b      	mov	r3, r9
    c->parent = parent_id;
10004684:	4648      	mov	r0, r9
    return heap->nodes + id - 1;
10004686:	005b      	lsls	r3, r3, #1
10004688:	444b      	add	r3, r9
1000468a:	19d7      	adds	r7, r2, r7
1000468c:	3b03      	subs	r3, #3
    c->parent = parent_id;
1000468e:	70b8      	strb	r0, [r7, #2]
    return heap->nodes + id - 1;
10004690:	18d1      	adds	r1, r2, r3
    if (!n->child) {
10004692:	5cd3      	ldrb	r3, [r2, r3]
10004694:	2b00      	cmp	r3, #0
10004696:	d000      	beq.n	1000469a <alarm_pool_add_alarm_at+0xa6>
10004698:	e07c      	b.n	10004794 <alarm_pool_add_alarm_at+0x1a0>
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
1000469a:	464b      	mov	r3, r9
        n->child = child_id;
1000469c:	700c      	strb	r4, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
1000469e:	736b      	strb	r3, [r5, #13]
        if (id == ph_insert(pool->heap, id)) {
100046a0:	454c      	cmp	r4, r9
100046a2:	d065      	beq.n	10004770 <alarm_pool_add_alarm_at+0x17c>
        if (id) id_high = *get_entry_id_high(pool, id);
100046a4:	68f3      	ldr	r3, [r6, #12]
100046a6:	191b      	adds	r3, r3, r4
100046a8:	3b01      	subs	r3, #1
100046aa:	7818      	ldrb	r0, [r3, #0]
        spin_unlock(pool->lock, save);
100046ac:	6873      	ldr	r3, [r6, #4]
100046ae:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100046b2:	4642      	mov	r2, r8
100046b4:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100046b6:	f38a 8810 	msr	PRIMASK, sl
        public_id = missed ? 0 : make_public_id(id_high, id);
100046ba:	465b      	mov	r3, fp
100046bc:	2b00      	cmp	r3, #0
100046be:	d108      	bne.n	100046d2 <alarm_pool_add_alarm_at+0xde>
    return ((uint)id_high << 8u * sizeof(id)) | id;
100046c0:	0200      	lsls	r0, r0, #8
100046c2:	4320      	orrs	r0, r4
}
100046c4:	b005      	add	sp, #20
100046c6:	bcf0      	pop	{r4, r5, r6, r7}
100046c8:	46bb      	mov	fp, r7
100046ca:	46b2      	mov	sl, r6
100046cc:	46a9      	mov	r9, r5
100046ce:	46a0      	mov	r8, r4
100046d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (missed && fire_if_past) {
100046d2:	9b03      	ldr	r3, [sp, #12]
100046d4:	2b00      	cmp	r3, #0
100046d6:	d05f      	beq.n	10004798 <alarm_pool_add_alarm_at+0x1a4>
            int64_t repeat = callback(public_id, user_data);
100046d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100046da:	2000      	movs	r0, #0
100046dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
100046de:	4798      	blx	r3
            if (!repeat) {
100046e0:	0003      	movs	r3, r0
            int64_t repeat = callback(public_id, user_data);
100046e2:	0004      	movs	r4, r0
100046e4:	000d      	movs	r5, r1
            if (!repeat) {
100046e6:	430b      	orrs	r3, r1
100046e8:	d056      	beq.n	10004798 <alarm_pool_add_alarm_at+0x1a4>
            } else if (repeat < 0) {
100046ea:	2900      	cmp	r1, #0
100046ec:	da0d      	bge.n	1000470a <alarm_pool_add_alarm_at+0x116>
    uint64_t delayed = base + us;
100046ee:	9800      	ldr	r0, [sp, #0]
100046f0:	9901      	ldr	r1, [sp, #4]
100046f2:	0002      	movs	r2, r0
100046f4:	000b      	movs	r3, r1
100046f6:	1b12      	subs	r2, r2, r4
100046f8:	41ab      	sbcs	r3, r5
    if (delayed < base) {
100046fa:	4299      	cmp	r1, r3
100046fc:	d813      	bhi.n	10004726 <alarm_pool_add_alarm_at+0x132>
100046fe:	d021      	beq.n	10004744 <alarm_pool_add_alarm_at+0x150>
10004700:	9200      	str	r2, [sp, #0]
10004702:	9301      	str	r3, [sp, #4]
        delayed = (uint64_t)-1;
10004704:	9b03      	ldr	r3, [sp, #12]
10004706:	469b      	mov	fp, r3
10004708:	e784      	b.n	10004614 <alarm_pool_add_alarm_at+0x20>
    update_us_since_boot(&t, time_us_64());
1000470a:	f000 f969 	bl	100049e0 <time_us_64>
1000470e:	0002      	movs	r2, r0
10004710:	000b      	movs	r3, r1
    uint64_t delayed = base + us;
10004712:	18a4      	adds	r4, r4, r2
10004714:	415d      	adcs	r5, r3
10004716:	9400      	str	r4, [sp, #0]
10004718:	9501      	str	r5, [sp, #4]
    if (delayed < base) {
1000471a:	42a9      	cmp	r1, r5
1000471c:	d803      	bhi.n	10004726 <alarm_pool_add_alarm_at+0x132>
1000471e:	d1f1      	bne.n	10004704 <alarm_pool_add_alarm_at+0x110>
10004720:	9900      	ldr	r1, [sp, #0]
10004722:	428a      	cmp	r2, r1
10004724:	d9ee      	bls.n	10004704 <alarm_pool_add_alarm_at+0x110>
        delayed = (uint64_t)-1;
10004726:	2301      	movs	r3, #1
10004728:	425b      	negs	r3, r3
1000472a:	17dc      	asrs	r4, r3, #31
1000472c:	9300      	str	r3, [sp, #0]
1000472e:	9401      	str	r4, [sp, #4]
10004730:	e7e8      	b.n	10004704 <alarm_pool_add_alarm_at+0x110>
        spin_unlock(pool->lock, save);
10004732:	6873      	ldr	r3, [r6, #4]
    __asm volatile ("dmb");
10004734:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004738:	601c      	str	r4, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000473a:	f38a 8810 	msr	PRIMASK, sl
            return -1;
1000473e:	2001      	movs	r0, #1
10004740:	4240      	negs	r0, r0
10004742:	e7bf      	b.n	100046c4 <alarm_pool_add_alarm_at+0xd0>
    if (delayed < base) {
10004744:	9900      	ldr	r1, [sp, #0]
10004746:	4291      	cmp	r1, r2
10004748:	d9da      	bls.n	10004700 <alarm_pool_add_alarm_at+0x10c>
        delayed = (uint64_t)-1;
1000474a:	2301      	movs	r3, #1
1000474c:	425b      	negs	r3, r3
1000474e:	17dc      	asrs	r4, r3, #31
10004750:	9300      	str	r3, [sp, #0]
10004752:	9401      	str	r4, [sp, #4]
10004754:	e7d6      	b.n	10004704 <alarm_pool_add_alarm_at+0x110>
    return heap->nodes + id - 1;
10004756:	464b      	mov	r3, r9
10004758:	005b      	lsls	r3, r3, #1
1000475a:	444b      	add	r3, r9
1000475c:	3b03      	subs	r3, #3
1000475e:	18d3      	adds	r3, r2, r3
    c->parent = parent_id;
10004760:	709c      	strb	r4, [r3, #2]
    return heap->nodes + id - 1;
10004762:	19d1      	adds	r1, r2, r7
    if (!n->child) {
10004764:	5dd2      	ldrb	r2, [r2, r7]
10004766:	2a00      	cmp	r2, #0
10004768:	d110      	bne.n	1000478c <alarm_pool_add_alarm_at+0x198>
        n->child = child_id;
1000476a:	464b      	mov	r3, r9
1000476c:	700b      	strb	r3, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
1000476e:	736c      	strb	r4, [r5, #13]
            bool is_missed = hardware_alarm_set_target(pool->hardware_alarm_num, time);
10004770:	7d30      	ldrb	r0, [r6, #20]
10004772:	9a00      	ldr	r2, [sp, #0]
10004774:	9b01      	ldr	r3, [sp, #4]
10004776:	f000 f993 	bl	10004aa0 <hardware_alarm_set_target>
1000477a:	4683      	mov	fp, r0
            if (is_missed && !create_if_past) {
1000477c:	2800      	cmp	r0, #0
1000477e:	d100      	bne.n	10004782 <alarm_pool_add_alarm_at+0x18e>
10004780:	e790      	b.n	100046a4 <alarm_pool_add_alarm_at+0xb0>
                ph_delete(pool->heap, id);
10004782:	0021      	movs	r1, r4
10004784:	6830      	ldr	r0, [r6, #0]
10004786:	f7fd fc55 	bl	10002034 <ph_delete>
1000478a:	e78b      	b.n	100046a4 <alarm_pool_add_alarm_at+0xb0>
        c->sibling = n->child;
1000478c:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
1000478e:	464b      	mov	r3, r9
10004790:	700b      	strb	r3, [r1, #0]
10004792:	e7ec      	b.n	1000476e <alarm_pool_add_alarm_at+0x17a>
        c->sibling = n->child;
10004794:	707b      	strb	r3, [r7, #1]
10004796:	e780      	b.n	1000469a <alarm_pool_add_alarm_at+0xa6>
    bool missed = false;
10004798:	2000      	movs	r0, #0
    return public_id;
1000479a:	e793      	b.n	100046c4 <alarm_pool_add_alarm_at+0xd0>
1000479c:	0fffffff 	.word	0x0fffffff

100047a0 <alarm_pool_cancel_alarm>:
bool alarm_pool_cancel_alarm(alarm_pool_t *pool, alarm_id_t alarm_id) {
100047a0:	b570      	push	{r4, r5, r6, lr}
    uint32_t save = spin_lock_blocking(pool->lock);
100047a2:	6842      	ldr	r2, [r0, #4]
bool alarm_pool_cancel_alarm(alarm_pool_t *pool, alarm_id_t alarm_id) {
100047a4:	0004      	movs	r4, r0
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100047a6:	f3ef 8510 	mrs	r5, PRIMASK
    __asm volatile ("cpsid i");
100047aa:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100047ac:	6813      	ldr	r3, [r2, #0]
100047ae:	2b00      	cmp	r3, #0
100047b0:	d0fc      	beq.n	100047ac <alarm_pool_cancel_alarm+0xc>
    __asm volatile ("dmb");
100047b2:	f3bf 8f5f 	dmb	sy
    if (ph_contains(pool->heap, id)) {
100047b6:	6820      	ldr	r0, [r4, #0]
    pheap_node_id_t id = (pheap_node_id_t) alarm_id;
100047b8:	b2ce      	uxtb	r6, r1
    return id == heap->root_id || ph_get_node(heap, id)->parent;
100047ba:	7b43      	ldrb	r3, [r0, #13]
100047bc:	42b3      	cmp	r3, r6
100047be:	d00a      	beq.n	100047d6 <alarm_pool_cancel_alarm+0x36>
    return heap->nodes + id - 1;
100047c0:	23ff      	movs	r3, #255	; 0xff
100047c2:	400b      	ands	r3, r1
    return id == heap->root_id || ph_get_node(heap, id)->parent;
100047c4:	005a      	lsls	r2, r3, #1
100047c6:	18d3      	adds	r3, r2, r3
100047c8:	6802      	ldr	r2, [r0, #0]
100047ca:	4694      	mov	ip, r2
100047cc:	4463      	add	r3, ip
100047ce:	3b03      	subs	r3, #3
100047d0:	789b      	ldrb	r3, [r3, #2]
100047d2:	2b00      	cmp	r3, #0
100047d4:	d013      	beq.n	100047fe <alarm_pool_cancel_alarm+0x5e>
        if (id_high == *get_entry_id_high(pool, id)) {
100047d6:	68e2      	ldr	r2, [r4, #12]
    return heap->nodes + id - 1;
100047d8:	23ff      	movs	r3, #255	; 0xff
100047da:	4694      	mov	ip, r2
100047dc:	400b      	ands	r3, r1
100047de:	4463      	add	r3, ip
100047e0:	3b01      	subs	r3, #1
        uint8_t id_high = (uint8_t)((uint)alarm_id >> 8u * sizeof(pheap_node_id_t));
100047e2:	0a0a      	lsrs	r2, r1, #8
        if (id_high == *get_entry_id_high(pool, id)) {
100047e4:	7819      	ldrb	r1, [r3, #0]
100047e6:	b2d2      	uxtb	r2, r2
100047e8:	4291      	cmp	r1, r2
100047ea:	d00e      	beq.n	1000480a <alarm_pool_cancel_alarm+0x6a>
    bool rc = false;
100047ec:	2000      	movs	r0, #0
    spin_unlock(pool->lock, save);
100047ee:	6863      	ldr	r3, [r4, #4]
100047f0:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100047f4:	2200      	movs	r2, #0
100047f6:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100047f8:	f385 8810 	msr	PRIMASK, r5
}
100047fc:	bd70      	pop	{r4, r5, r6, pc}
        if (alarm_id == pool->alarm_in_progress) {
100047fe:	6922      	ldr	r2, [r4, #16]
10004800:	428a      	cmp	r2, r1
10004802:	d1f3      	bne.n	100047ec <alarm_pool_cancel_alarm+0x4c>
    bool rc = false;
10004804:	2000      	movs	r0, #0
            pool->alarm_in_progress = 0;
10004806:	6123      	str	r3, [r4, #16]
10004808:	e7f1      	b.n	100047ee <alarm_pool_cancel_alarm+0x4e>
            rc = ph_delete(pool->heap, id);
1000480a:	0031      	movs	r1, r6
1000480c:	f7fd fc12 	bl	10002034 <ph_delete>
10004810:	e7ed      	b.n	100047ee <alarm_pool_cancel_alarm+0x4e>
10004812:	46c0      	nop			; (mov r8, r8)

10004814 <sleep_ms>:
    }
#endif

}

void sleep_ms(uint32_t ms) {
10004814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004816:	0004      	movs	r4, r0
    update_us_since_boot(&t, time_us_64());
10004818:	f000 f8e2 	bl	100049e0 <time_us_64>
    sleep_us(ms * 1000ull);
1000481c:	22fa      	movs	r2, #250	; 0xfa
1000481e:	0006      	movs	r6, r0
10004820:	000f      	movs	r7, r1
10004822:	0020      	movs	r0, r4
10004824:	2300      	movs	r3, #0
10004826:	2100      	movs	r1, #0
10004828:	0092      	lsls	r2, r2, #2
1000482a:	f7fc fc67 	bl	100010fc <__wrap___aeabi_lmul>
    uint64_t delayed = base + us;
1000482e:	1980      	adds	r0, r0, r6
10004830:	4179      	adcs	r1, r7
10004832:	0004      	movs	r4, r0
10004834:	000d      	movs	r5, r1
    if (delayed < base) {
10004836:	428f      	cmp	r7, r1
10004838:	d81a      	bhi.n	10004870 <sleep_ms+0x5c>
1000483a:	d017      	beq.n	1000486c <sleep_ms+0x58>
    uint64_t t_before_us = t_us - PICO_TIME_SLEEP_OVERHEAD_ADJUST_US;
1000483c:	2606      	movs	r6, #6
1000483e:	4276      	negs	r6, r6
10004840:	17f7      	asrs	r7, r6, #31
10004842:	1936      	adds	r6, r6, r4
10004844:	416f      	adcs	r7, r5
    if (t_before_us > t_us) t_before_us = 0;
10004846:	42af      	cmp	r7, r5
10004848:	d937      	bls.n	100048ba <sleep_ms+0xa6>
1000484a:	2600      	movs	r6, #0
1000484c:	2700      	movs	r7, #0
    update_us_since_boot(&t, time_us_64());
1000484e:	f000 f8c7 	bl	100049e0 <time_us_64>
    return to_us_since_boot(to) - to_us_since_boot(from);
10004852:	0032      	movs	r2, r6
10004854:	003b      	movs	r3, r7
10004856:	1a12      	subs	r2, r2, r0
10004858:	418b      	sbcs	r3, r1
    if (absolute_time_diff_us(get_absolute_time(), t_before) > 0) {
1000485a:	2b00      	cmp	r3, #0
1000485c:	dc16      	bgt.n	1000488c <sleep_ms+0x78>
1000485e:	2b00      	cmp	r3, #0
10004860:	d028      	beq.n	100048b4 <sleep_ms+0xa0>
    busy_wait_until(t);
10004862:	0029      	movs	r1, r5
10004864:	0020      	movs	r0, r4
10004866:	f000 f8c5 	bl	100049f4 <busy_wait_until>
}
1000486a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (delayed < base) {
1000486c:	4286      	cmp	r6, r0
1000486e:	d9e5      	bls.n	1000483c <sleep_ms+0x28>
    uint64_t t_before_us = t_us - PICO_TIME_SLEEP_OVERHEAD_ADJUST_US;
10004870:	2607      	movs	r6, #7
10004872:	4276      	negs	r6, r6
10004874:	17f7      	asrs	r7, r6, #31
    update_us_since_boot(&t, time_us_64());
10004876:	f000 f8b3 	bl	100049e0 <time_us_64>
    return to_us_since_boot(to) - to_us_since_boot(from);
1000487a:	0032      	movs	r2, r6
1000487c:	003b      	movs	r3, r7
1000487e:	1a12      	subs	r2, r2, r0
10004880:	418b      	sbcs	r3, r1
        delayed = (uint64_t)-1;
10004882:	2401      	movs	r4, #1
10004884:	4264      	negs	r4, r4
10004886:	17e5      	asrs	r5, r4, #31
    if (absolute_time_diff_us(get_absolute_time(), t_before) > 0) {
10004888:	2b00      	cmp	r3, #0
1000488a:	dde8      	ble.n	1000485e <sleep_ms+0x4a>
    return default_alarm_pool;
1000488c:	4b0d      	ldr	r3, [pc, #52]	; (100048c4 <sleep_ms+0xb0>)
    return alarm_pool_add_alarm_at(alarm_pool_get_default(), time, callback, user_data, fire_if_past);
1000488e:	0032      	movs	r2, r6
10004890:	6818      	ldr	r0, [r3, #0]
10004892:	003b      	movs	r3, r7
10004894:	f7ff fdde 	bl	10004454 <alarm_pool_add_alarm_at.constprop.0>
        if (add_alarm_at(t_before, sev_callback, NULL, false) >= 0) {
10004898:	2800      	cmp	r0, #0
1000489a:	dbe2      	blt.n	10004862 <sleep_ms+0x4e>
 * \param t Absolute time to compare against current time
 * \return true if it is now after the specified timestamp
 */
static inline bool time_reached(absolute_time_t t) {
    uint64_t target = to_us_since_boot(t);
    uint32_t hi_target = target >> 32u;
1000489c:	0039      	movs	r1, r7
    uint32_t hi = timer_hw->timerawh;
1000489e:	4a0a      	ldr	r2, [pc, #40]	; (100048c8 <sleep_ms+0xb4>)
100048a0:	6a53      	ldr	r3, [r2, #36]	; 0x24
    return (hi >= hi_target && (timer_hw->timerawl >= (uint32_t) target || hi != hi_target));
100048a2:	4299      	cmp	r1, r3
100048a4:	d804      	bhi.n	100048b0 <sleep_ms+0x9c>
100048a6:	6a90      	ldr	r0, [r2, #40]	; 0x28
100048a8:	4286      	cmp	r6, r0
100048aa:	d9da      	bls.n	10004862 <sleep_ms+0x4e>
100048ac:	4299      	cmp	r1, r3
100048ae:	d1d8      	bne.n	10004862 <sleep_ms+0x4e>
    __asm volatile ("wfe");
100048b0:	bf20      	wfe
}
100048b2:	e7f5      	b.n	100048a0 <sleep_ms+0x8c>
    if (absolute_time_diff_us(get_absolute_time(), t_before) > 0) {
100048b4:	2a00      	cmp	r2, #0
100048b6:	d0d4      	beq.n	10004862 <sleep_ms+0x4e>
100048b8:	e7e8      	b.n	1000488c <sleep_ms+0x78>
    if (t_before_us > t_us) t_before_us = 0;
100048ba:	42af      	cmp	r7, r5
100048bc:	d1c7      	bne.n	1000484e <sleep_ms+0x3a>
100048be:	42a6      	cmp	r6, r4
100048c0:	d8c3      	bhi.n	1000484a <sleep_ms+0x36>
100048c2:	e7c4      	b.n	1000484e <sleep_ms+0x3a>
100048c4:	20023488 	.word	0x20023488
100048c8:	40054000 	.word	0x40054000

100048cc <best_effort_wfe_or_timeout>:

bool best_effort_wfe_or_timeout(absolute_time_t timeout_timestamp) {
100048cc:	b570      	push	{r4, r5, r6, lr}
    return default_alarm_pool;
100048ce:	4d0e      	ldr	r5, [pc, #56]	; (10004908 <best_effort_wfe_or_timeout+0x3c>)
100048d0:	0002      	movs	r2, r0
100048d2:	000b      	movs	r3, r1
bool best_effort_wfe_or_timeout(absolute_time_t timeout_timestamp) {
100048d4:	0006      	movs	r6, r0
100048d6:	6828      	ldr	r0, [r5, #0]
100048d8:	000c      	movs	r4, r1
100048da:	f7ff fdbb 	bl	10004454 <alarm_pool_add_alarm_at.constprop.0>
100048de:	1e01      	subs	r1, r0, #0
#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
    alarm_id_t id;
    id = add_alarm_at(timeout_timestamp, sev_callback, NULL, false);
    if (id <= 0) {
100048e0:	dd03      	ble.n	100048ea <best_effort_wfe_or_timeout+0x1e>
    __asm volatile ("wfe");
100048e2:	bf20      	wfe
 * \param alarm_id the alarm
 * \return true if the alarm was cancelled, false if it didn't exist
 * \sa alarm_id_t for a note on reuse of IDs
 */
static inline bool cancel_alarm(alarm_id_t alarm_id) {
    return alarm_pool_cancel_alarm(alarm_pool_get_default(), alarm_id);
100048e4:	6828      	ldr	r0, [r5, #0]
100048e6:	f7ff ff5b 	bl	100047a0 <alarm_pool_cancel_alarm>
    uint32_t hi = timer_hw->timerawh;
100048ea:	4b08      	ldr	r3, [pc, #32]	; (1000490c <best_effort_wfe_or_timeout+0x40>)
100048ec:	2000      	movs	r0, #0
100048ee:	6a59      	ldr	r1, [r3, #36]	; 0x24
    return (hi >= hi_target && (timer_hw->timerawl >= (uint32_t) target || hi != hi_target));
100048f0:	428c      	cmp	r4, r1
100048f2:	d803      	bhi.n	100048fc <best_effort_wfe_or_timeout+0x30>
100048f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100048f6:	3001      	adds	r0, #1
100048f8:	42b3      	cmp	r3, r6
100048fa:	d300      	bcc.n	100048fe <best_effort_wfe_or_timeout+0x32>
    }
#else
    tight_loop_contents();
    return time_reached(timeout_timestamp);
#endif
}
100048fc:	bd70      	pop	{r4, r5, r6, pc}
100048fe:	1a64      	subs	r4, r4, r1
10004900:	1e63      	subs	r3, r4, #1
10004902:	419c      	sbcs	r4, r3
10004904:	b2e0      	uxtb	r0, r4
10004906:	e7f9      	b.n	100048fc <best_effort_wfe_or_timeout+0x30>
10004908:	20023488 	.word	0x20023488
1000490c:	40054000 	.word	0x40054000

10004910 <hardware_alarm_irq_handler>:

static inline uint harware_alarm_irq_number(uint alarm_num) {
    return TIMER_IRQ_0 + alarm_num;
}

static void hardware_alarm_irq_handler() {
10004910:	b5f0      	push	{r4, r5, r6, r7, lr}
10004912:	46d6      	mov	lr, sl
10004914:	464f      	mov	r7, r9
10004916:	4646      	mov	r6, r8
10004918:	b5c0      	push	{r6, r7, lr}
    // Determine which timer this IRQ is for
    uint32_t ipsr;
    __asm volatile ("mrs %0, ipsr" : "=r" (ipsr)::);
1000491a:	f3ef 8305 	mrs	r3, IPSR
    uint alarm_num = (ipsr & 0x3fu) - 16 - TIMER_IRQ_0;
1000491e:	223f      	movs	r2, #63	; 0x3f
10004920:	4013      	ands	r3, r2
10004922:	0018      	movs	r0, r3
10004924:	3810      	subs	r0, #16
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004926:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
1000492a:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000492c:	4d20      	ldr	r5, [pc, #128]	; (100049b0 <hardware_alarm_irq_handler+0xa0>)
1000492e:	682a      	ldr	r2, [r5, #0]
10004930:	2a00      	cmp	r2, #0
10004932:	d0fc      	beq.n	1000492e <hardware_alarm_irq_handler+0x1e>
    __asm volatile ("dmb");
10004934:	f3bf 8f5f 	dmb	sy
    hardware_alarm_callback_t callback = NULL;

    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
    uint32_t save = spin_lock_blocking(lock);
    // Clear the timer IRQ (inside lock, because we check whether we have handled the IRQ yet in alarm_set by looking at the interrupt status
    timer_hw->intr = 1u << alarm_num;
10004938:	2201      	movs	r2, #1
1000493a:	0011      	movs	r1, r2
1000493c:	4081      	lsls	r1, r0
1000493e:	4c1d      	ldr	r4, [pc, #116]	; (100049b4 <hardware_alarm_irq_handler+0xa4>)
10004940:	4688      	mov	r8, r1
10004942:	6361      	str	r1, [r4, #52]	; 0x34

    // make sure the IRQ is still valid
    if (timer_callbacks_pending & (1u << alarm_num)) {
10004944:	491c      	ldr	r1, [pc, #112]	; (100049b8 <hardware_alarm_irq_handler+0xa8>)
10004946:	0017      	movs	r7, r2
10004948:	780e      	ldrb	r6, [r1, #0]
1000494a:	468a      	mov	sl, r1
1000494c:	0031      	movs	r1, r6
1000494e:	40c1      	lsrs	r1, r0
10004950:	400f      	ands	r7, r1
10004952:	420a      	tst	r2, r1
10004954:	d109      	bne.n	1000496a <hardware_alarm_irq_handler+0x5a>
10004956:	f3bf 8f5f 	dmb	sy
    *lock = 0;
1000495a:	602f      	str	r7, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000495c:	f38c 8810 	msr	PRIMASK, ip
    spin_unlock(lock, save);

    if (callback) {
        callback(alarm_num);
    }
}
10004960:	bce0      	pop	{r5, r6, r7}
10004962:	46ba      	mov	sl, r7
10004964:	46b1      	mov	r9, r6
10004966:	46a8      	mov	r8, r5
10004968:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (timer_hw->timerawh >= target_hi[alarm_num]) {
1000496a:	4914      	ldr	r1, [pc, #80]	; (100049bc <hardware_alarm_irq_handler+0xac>)
1000496c:	0082      	lsls	r2, r0, #2
1000496e:	6a64      	ldr	r4, [r4, #36]	; 0x24
10004970:	5851      	ldr	r1, [r2, r1]
10004972:	428c      	cmp	r4, r1
10004974:	d30f      	bcc.n	10004996 <hardware_alarm_irq_handler+0x86>
            callback = alarm_callbacks[alarm_num];
10004976:	4b12      	ldr	r3, [pc, #72]	; (100049c0 <hardware_alarm_irq_handler+0xb0>)
10004978:	58d2      	ldr	r2, [r2, r3]
            timer_callbacks_pending &= ~(1u << alarm_num);
1000497a:	4643      	mov	r3, r8
1000497c:	439e      	bics	r6, r3
1000497e:	4653      	mov	r3, sl
10004980:	701e      	strb	r6, [r3, #0]
    __asm volatile ("dmb");
10004982:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004986:	2300      	movs	r3, #0
10004988:	602b      	str	r3, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000498a:	f38c 8810 	msr	PRIMASK, ip
    if (callback) {
1000498e:	2a00      	cmp	r2, #0
10004990:	d0e6      	beq.n	10004960 <hardware_alarm_irq_handler+0x50>
        callback(alarm_num);
10004992:	4790      	blx	r2
}
10004994:	e7e4      	b.n	10004960 <hardware_alarm_irq_handler+0x50>
            timer_hw->alarm[alarm_num] = timer_hw->alarm[alarm_num]; // re-arm the timer
10004996:	4a0b      	ldr	r2, [pc, #44]	; (100049c4 <hardware_alarm_irq_handler+0xb4>)
10004998:	009b      	lsls	r3, r3, #2
1000499a:	4690      	mov	r8, r2
1000499c:	4443      	add	r3, r8
1000499e:	681a      	ldr	r2, [r3, #0]
100049a0:	601a      	str	r2, [r3, #0]
    __asm volatile ("dmb");
100049a2:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100049a6:	2300      	movs	r3, #0
100049a8:	602b      	str	r3, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100049aa:	f38c 8810 	msr	PRIMASK, ip
    if (callback) {
100049ae:	e7d7      	b.n	10004960 <hardware_alarm_irq_handler+0x50>
100049b0:	d0000128 	.word	0xd0000128
100049b4:	40054000 	.word	0x40054000
100049b8:	20023b8b 	.word	0x20023b8b
100049bc:	20023b70 	.word	0x20023b70
100049c0:	2002334c 	.word	0x2002334c
100049c4:	40053fd0 	.word	0x40053fd0

100049c8 <hardware_alarm_claim>:
void hardware_alarm_claim(uint alarm_num) {
100049c8:	b510      	push	{r4, lr}
100049ca:	0001      	movs	r1, r0
    hw_claim_or_assert(&claimed, alarm_num, "Hardware alarm %d already claimed");
100049cc:	4a02      	ldr	r2, [pc, #8]	; (100049d8 <hardware_alarm_claim+0x10>)
100049ce:	4803      	ldr	r0, [pc, #12]	; (100049dc <hardware_alarm_claim+0x14>)
100049d0:	f7fc fbf6 	bl	100011c0 <hw_claim_or_assert>
}
100049d4:	bd10      	pop	{r4, pc}
100049d6:	46c0      	nop			; (mov r8, r8)
100049d8:	10009090 	.word	0x10009090
100049dc:	20023b89 	.word	0x20023b89

100049e0 <time_us_64>:
    uint32_t hi = timer_hw->timerawh;
100049e0:	4b03      	ldr	r3, [pc, #12]	; (100049f0 <time_us_64+0x10>)
100049e2:	6a59      	ldr	r1, [r3, #36]	; 0x24
        lo = timer_hw->timerawl;
100049e4:	000a      	movs	r2, r1
100049e6:	6a98      	ldr	r0, [r3, #40]	; 0x28
        uint32_t next_hi = timer_hw->timerawh;
100049e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
        if (hi == next_hi) break;
100049ea:	428a      	cmp	r2, r1
100049ec:	d1fa      	bne.n	100049e4 <time_us_64+0x4>
}
100049ee:	4770      	bx	lr
100049f0:	40054000 	.word	0x40054000

100049f4 <busy_wait_until>:
    uint32_t hi = timer_hw->timerawh;
100049f4:	4a06      	ldr	r2, [pc, #24]	; (10004a10 <busy_wait_until+0x1c>)
100049f6:	6a53      	ldr	r3, [r2, #36]	; 0x24
    while (hi < hi_target) {
100049f8:	4299      	cmp	r1, r3
100049fa:	d8fc      	bhi.n	100049f6 <busy_wait_until+0x2>
    while (hi == hi_target && timer_hw->timerawl < (uint32_t) target) {
100049fc:	d107      	bne.n	10004a0e <busy_wait_until+0x1a>
100049fe:	4b04      	ldr	r3, [pc, #16]	; (10004a10 <busy_wait_until+0x1c>)
10004a00:	e002      	b.n	10004a08 <busy_wait_until+0x14>
        hi = timer_hw->timerawh;
10004a02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    while (hi == hi_target && timer_hw->timerawl < (uint32_t) target) {
10004a04:	4291      	cmp	r1, r2
10004a06:	d102      	bne.n	10004a0e <busy_wait_until+0x1a>
10004a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
10004a0a:	4282      	cmp	r2, r0
10004a0c:	d3f9      	bcc.n	10004a02 <busy_wait_until+0xe>
}
10004a0e:	4770      	bx	lr
10004a10:	40054000 	.word	0x40054000

10004a14 <hardware_alarm_set_callback>:

void hardware_alarm_set_callback(uint alarm_num, hardware_alarm_callback_t callback) {
10004a14:	b570      	push	{r4, r5, r6, lr}
10004a16:	0004      	movs	r4, r0
10004a18:	000d      	movs	r5, r1
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004a1a:	f3ef 8610 	mrs	r6, PRIMASK
    __asm volatile ("cpsid i");
10004a1e:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004a20:	4a1a      	ldr	r2, [pc, #104]	; (10004a8c <hardware_alarm_set_callback+0x78>)
10004a22:	6813      	ldr	r3, [r2, #0]
10004a24:	2b00      	cmp	r3, #0
10004a26:	d0fc      	beq.n	10004a22 <hardware_alarm_set_callback+0xe>
    __asm volatile ("dmb");
10004a28:	f3bf 8f5f 	dmb	sy
    //  should disallow IRQ handlers on both cores
    check_hardware_alarm_num_param(alarm_num);
    uint irq_num = harware_alarm_irq_number(alarm_num);
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
    uint32_t save = spin_lock_blocking(lock);
    if (callback) {
10004a2c:	2d00      	cmp	r5, #0
10004a2e:	d01b      	beq.n	10004a68 <hardware_alarm_set_callback+0x54>
        if (hardware_alarm_irq_handler != irq_get_vtable_handler(irq_num)) {
10004a30:	0020      	movs	r0, r4
10004a32:	f7fc ff45 	bl	100018c0 <irq_get_vtable_handler>
10004a36:	4916      	ldr	r1, [pc, #88]	; (10004a90 <hardware_alarm_set_callback+0x7c>)
10004a38:	4281      	cmp	r1, r0
10004a3a:	d00a      	beq.n	10004a52 <hardware_alarm_set_callback+0x3e>
            // note that set_exclusive will silently allow you to set the handler to the same thing
            // since it is idempotent, which means we don't need to worry about locking ourselves
            irq_set_exclusive_handler(irq_num, hardware_alarm_irq_handler);
10004a3c:	0020      	movs	r0, r4
10004a3e:	f7fc ff47 	bl	100018d0 <irq_set_exclusive_handler>
            irq_set_enabled(irq_num, true);
10004a42:	2101      	movs	r1, #1
10004a44:	0020      	movs	r0, r4
10004a46:	f7fc ff21 	bl	1000188c <irq_set_enabled>
            // Enable interrupt in block and at processor
            hw_set_bits(&timer_hw->inte, 1u << alarm_num);
10004a4a:	2301      	movs	r3, #1
10004a4c:	40a3      	lsls	r3, r4
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10004a4e:	4a11      	ldr	r2, [pc, #68]	; (10004a94 <hardware_alarm_set_callback+0x80>)
10004a50:	6013      	str	r3, [r2, #0]
        }
        alarm_callbacks[alarm_num] = callback;
10004a52:	4b11      	ldr	r3, [pc, #68]	; (10004a98 <hardware_alarm_set_callback+0x84>)
10004a54:	00a4      	lsls	r4, r4, #2
10004a56:	50e5      	str	r5, [r4, r3]
10004a58:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004a5c:	2200      	movs	r2, #0
10004a5e:	4b0b      	ldr	r3, [pc, #44]	; (10004a8c <hardware_alarm_set_callback+0x78>)
10004a60:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004a62:	f386 8810 	msr	PRIMASK, r6
        timer_callbacks_pending &= ~(1u << alarm_num);
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
        irq_set_enabled(irq_num, false);
    }
    spin_unlock(lock, save);
}
10004a66:	bd70      	pop	{r4, r5, r6, pc}
        alarm_callbacks[alarm_num] = NULL;
10004a68:	4b0b      	ldr	r3, [pc, #44]	; (10004a98 <hardware_alarm_set_callback+0x84>)
10004a6a:	00a2      	lsls	r2, r4, #2
10004a6c:	50d5      	str	r5, [r2, r3]
        timer_callbacks_pending &= ~(1u << alarm_num);
10004a6e:	2201      	movs	r2, #1
10004a70:	40a2      	lsls	r2, r4
10004a72:	490a      	ldr	r1, [pc, #40]	; (10004a9c <hardware_alarm_set_callback+0x88>)
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
10004a74:	0020      	movs	r0, r4
        timer_callbacks_pending &= ~(1u << alarm_num);
10004a76:	780b      	ldrb	r3, [r1, #0]
10004a78:	4393      	bics	r3, r2
10004a7a:	700b      	strb	r3, [r1, #0]
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
10004a7c:	4904      	ldr	r1, [pc, #16]	; (10004a90 <hardware_alarm_set_callback+0x7c>)
10004a7e:	f7fc ff51 	bl	10001924 <irq_remove_handler>
        irq_set_enabled(irq_num, false);
10004a82:	2100      	movs	r1, #0
10004a84:	0020      	movs	r0, r4
10004a86:	f7fc ff01 	bl	1000188c <irq_set_enabled>
10004a8a:	e7e5      	b.n	10004a58 <hardware_alarm_set_callback+0x44>
10004a8c:	d0000128 	.word	0xd0000128
10004a90:	10004911 	.word	0x10004911
10004a94:	40056038 	.word	0x40056038
10004a98:	2002334c 	.word	0x2002334c
10004a9c:	20023b8b 	.word	0x20023b8b

10004aa0 <hardware_alarm_set_target>:

bool hardware_alarm_set_target(uint alarm_num, absolute_time_t target) {
10004aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
10004aa2:	46ce      	mov	lr, r9
10004aa4:	4647      	mov	r7, r8
10004aa6:	b580      	push	{r7, lr}
    uint32_t hi = timer_hw->timerawh;
10004aa8:	4c2a      	ldr	r4, [pc, #168]	; (10004b54 <hardware_alarm_set_target+0xb4>)
10004aaa:	6a61      	ldr	r1, [r4, #36]	; 0x24
        lo = timer_hw->timerawl;
10004aac:	000d      	movs	r5, r1
10004aae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        uint32_t next_hi = timer_hw->timerawh;
10004ab0:	6a61      	ldr	r1, [r4, #36]	; 0x24
        if (hi == next_hi) break;
10004ab2:	42a9      	cmp	r1, r5
10004ab4:	d1fa      	bne.n	10004aac <hardware_alarm_set_target+0xc>
    bool missed;
    uint64_t now = time_us_64();
    uint64_t t = to_us_since_boot(target);
    if (now >= t) {
10004ab6:	428b      	cmp	r3, r1
10004ab8:	d807      	bhi.n	10004aca <hardware_alarm_set_target+0x2a>
10004aba:	d004      	beq.n	10004ac6 <hardware_alarm_set_target+0x26>
        missed = true;
10004abc:	2001      	movs	r0, #1
            }
        }
        spin_unlock(lock, save);
    }
    return missed;
}
10004abe:	bcc0      	pop	{r6, r7}
10004ac0:	46b9      	mov	r9, r7
10004ac2:	46b0      	mov	r8, r6
10004ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (now >= t) {
10004ac6:	42b2      	cmp	r2, r6
10004ac8:	d9f8      	bls.n	10004abc <hardware_alarm_set_target+0x1c>
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004aca:	f3ef 8910 	mrs	r9, PRIMASK
    __asm volatile ("cpsid i");
10004ace:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004ad0:	4c21      	ldr	r4, [pc, #132]	; (10004b58 <hardware_alarm_set_target+0xb8>)
10004ad2:	6821      	ldr	r1, [r4, #0]
10004ad4:	2900      	cmp	r1, #0
10004ad6:	d0fc      	beq.n	10004ad2 <hardware_alarm_set_target+0x32>
    __asm volatile ("dmb");
10004ad8:	f3bf 8f5f 	dmb	sy
        timer_hw->intr = 1u << alarm_num;
10004adc:	2501      	movs	r5, #1
10004ade:	4085      	lsls	r5, r0
10004ae0:	4c1c      	ldr	r4, [pc, #112]	; (10004b54 <hardware_alarm_set_target+0xb4>)
        timer_callbacks_pending |= 1u << alarm_num;
10004ae2:	4f1e      	ldr	r7, [pc, #120]	; (10004b5c <hardware_alarm_set_target+0xbc>)
        timer_hw->intr = 1u << alarm_num;
10004ae4:	6365      	str	r5, [r4, #52]	; 0x34
        timer_callbacks_pending |= 1u << alarm_num;
10004ae6:	b2e9      	uxtb	r1, r5
10004ae8:	4688      	mov	r8, r1
10004aea:	7839      	ldrb	r1, [r7, #0]
10004aec:	468c      	mov	ip, r1
10004aee:	4641      	mov	r1, r8
10004af0:	4666      	mov	r6, ip
10004af2:	4331      	orrs	r1, r6
10004af4:	7039      	strb	r1, [r7, #0]
        timer_hw->alarm[alarm_num] = (uint32_t) t;
10004af6:	1d01      	adds	r1, r0, #4
10004af8:	0089      	lsls	r1, r1, #2
10004afa:	510a      	str	r2, [r1, r4]
        target_hi[alarm_num] = t >> 32u;
10004afc:	4918      	ldr	r1, [pc, #96]	; (10004b60 <hardware_alarm_set_target+0xc0>)
10004afe:	0080      	lsls	r0, r0, #2
10004b00:	5043      	str	r3, [r0, r1]
        if (!(timer_hw->armed & 1u << alarm_num)) {
10004b02:	6a21      	ldr	r1, [r4, #32]
        missed = false;
10004b04:	2000      	movs	r0, #0
        if (!(timer_hw->armed & 1u << alarm_num)) {
10004b06:	4229      	tst	r1, r5
10004b08:	d00b      	beq.n	10004b22 <hardware_alarm_set_target+0x82>
    uint32_t hi = timer_hw->timerawh;
10004b0a:	6a61      	ldr	r1, [r4, #36]	; 0x24
        lo = timer_hw->timerawl;
10004b0c:	0008      	movs	r0, r1
10004b0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        uint32_t next_hi = timer_hw->timerawh;
10004b10:	6a61      	ldr	r1, [r4, #36]	; 0x24
        if (hi == next_hi) break;
10004b12:	4281      	cmp	r1, r0
10004b14:	d1fa      	bne.n	10004b0c <hardware_alarm_set_target+0x6c>
            if (time_us_64() >= t) {
10004b16:	428b      	cmp	r3, r1
10004b18:	d802      	bhi.n	10004b20 <hardware_alarm_set_target+0x80>
10004b1a:	d10a      	bne.n	10004b32 <hardware_alarm_set_target+0x92>
10004b1c:	42b2      	cmp	r2, r6
10004b1e:	d908      	bls.n	10004b32 <hardware_alarm_set_target+0x92>
        missed = false;
10004b20:	2000      	movs	r0, #0
10004b22:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004b26:	2200      	movs	r2, #0
10004b28:	4b0b      	ldr	r3, [pc, #44]	; (10004b58 <hardware_alarm_set_target+0xb8>)
10004b2a:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004b2c:	f389 8810 	msr	PRIMASK, r9
}
10004b30:	e7c5      	b.n	10004abe <hardware_alarm_set_target+0x1e>
                timer_hw->armed = 1u << alarm_num;
10004b32:	4b08      	ldr	r3, [pc, #32]	; (10004b54 <hardware_alarm_set_target+0xb4>)
                timer_callbacks_pending &= ~(1u << alarm_num);
10004b34:	4642      	mov	r2, r8
                timer_hw->armed = 1u << alarm_num;
10004b36:	621d      	str	r5, [r3, #32]
                timer_hw->intr = 1u << alarm_num; // clear the IRQ too
10004b38:	635d      	str	r5, [r3, #52]	; 0x34
                timer_callbacks_pending &= ~(1u << alarm_num);
10004b3a:	4663      	mov	r3, ip
10004b3c:	4393      	bics	r3, r2
                missed = true;
10004b3e:	2001      	movs	r0, #1
                timer_callbacks_pending &= ~(1u << alarm_num);
10004b40:	703b      	strb	r3, [r7, #0]
    __asm volatile ("dmb");
10004b42:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004b46:	2200      	movs	r2, #0
10004b48:	4b03      	ldr	r3, [pc, #12]	; (10004b58 <hardware_alarm_set_target+0xb8>)
10004b4a:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004b4c:	f389 8810 	msr	PRIMASK, r9
10004b50:	e7b5      	b.n	10004abe <hardware_alarm_set_target+0x1e>
10004b52:	46c0      	nop			; (mov r8, r8)
10004b54:	40054000 	.word	0x40054000
10004b58:	d0000128 	.word	0xd0000128
10004b5c:	20023b8b 	.word	0x20023b8b
10004b60:	20023b70 	.word	0x20023b70

10004b64 <hardware_alarm_cancel>:
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004b64:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10004b68:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004b6a:	490a      	ldr	r1, [pc, #40]	; (10004b94 <hardware_alarm_cancel+0x30>)
10004b6c:	680b      	ldr	r3, [r1, #0]
10004b6e:	2b00      	cmp	r3, #0
10004b70:	d0fc      	beq.n	10004b6c <hardware_alarm_cancel+0x8>
    __asm volatile ("dmb");
10004b72:	f3bf 8f5f 	dmb	sy
void hardware_alarm_cancel(uint alarm_num) {
    check_hardware_alarm_num_param(alarm_num);

    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
    uint32_t save = spin_lock_blocking(lock);
    timer_hw->armed = 1u << alarm_num;
10004b76:	2301      	movs	r3, #1
10004b78:	4083      	lsls	r3, r0
10004b7a:	4a07      	ldr	r2, [pc, #28]	; (10004b98 <hardware_alarm_cancel+0x34>)
    timer_callbacks_pending &= ~(1u << alarm_num);
10004b7c:	4807      	ldr	r0, [pc, #28]	; (10004b9c <hardware_alarm_cancel+0x38>)
    timer_hw->armed = 1u << alarm_num;
10004b7e:	6213      	str	r3, [r2, #32]
    timer_callbacks_pending &= ~(1u << alarm_num);
10004b80:	7802      	ldrb	r2, [r0, #0]
10004b82:	439a      	bics	r2, r3
10004b84:	7002      	strb	r2, [r0, #0]
10004b86:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004b8a:	2300      	movs	r3, #0
10004b8c:	600b      	str	r3, [r1, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004b8e:	f38c 8810 	msr	PRIMASK, ip
    spin_unlock(lock, save);
}
10004b92:	4770      	bx	lr
10004b94:	d0000128 	.word	0xd0000128
10004b98:	40054000 	.word	0x40054000
10004b9c:	20023b8b 	.word	0x20023b8b

10004ba0 <_retrieve_unique_id_on_boot>:

static_assert(PICO_UNIQUE_BOARD_ID_SIZE_BYTES == FLASH_UNIQUE_ID_SIZE_BYTES, "Board ID size must match flash ID size");

static pico_unique_board_id_t retrieved_id;

static void __attribute__((constructor)) _retrieve_unique_id_on_boot() {
10004ba0:	b510      	push	{r4, lr}
    // build. Since this constructor is pre-main it would be annoying to
    // debug, so just produce something well-defined and obviously wrong.
    for (int i = 0; i < PICO_UNIQUE_BOARD_ID_SIZE_BYTES; i++)
        retrieved_id.id[i] = 0xee;
#else
    flash_get_unique_id(retrieved_id.id);
10004ba2:	4802      	ldr	r0, [pc, #8]	; (10004bac <_retrieve_unique_id_on_boot+0xc>)
10004ba4:	f7fc fdc0 	bl	10001728 <flash_get_unique_id>
#endif
}
10004ba8:	bd10      	pop	{r4, pc}
10004baa:	46c0      	nop			; (mov r8, r8)
10004bac:	20023b5c 	.word	0x20023b5c

10004bb0 <watchdog_start_tick>:
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
10004bb0:	2380      	movs	r3, #128	; 0x80
10004bb2:	4a02      	ldr	r2, [pc, #8]	; (10004bbc <watchdog_start_tick+0xc>)
10004bb4:	009b      	lsls	r3, r3, #2
10004bb6:	4303      	orrs	r3, r0
10004bb8:	62d3      	str	r3, [r2, #44]	; 0x2c
}
10004bba:	4770      	bx	lr
10004bbc:	40058000 	.word	0x40058000

10004bc0 <xosc_init>:
#include "hardware/structs/xosc.h"

void xosc_init(void) {
    // Assumes 1-15 MHz input
    assert(XOSC_MHZ <= 15);
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
10004bc0:	23aa      	movs	r3, #170	; 0xaa
10004bc2:	4a06      	ldr	r2, [pc, #24]	; (10004bdc <xosc_init+0x1c>)
10004bc4:	011b      	lsls	r3, r3, #4
10004bc6:	6013      	str	r3, [r2, #0]

    // Set xosc startup delay
    uint32_t startup_delay = (((12 * MHZ) / 1000) + 128) / 256;
    xosc_hw->startup = startup_delay;
10004bc8:	232f      	movs	r3, #47	; 0x2f
10004bca:	4905      	ldr	r1, [pc, #20]	; (10004be0 <xosc_init+0x20>)
10004bcc:	60d3      	str	r3, [r2, #12]
10004bce:	4b05      	ldr	r3, [pc, #20]	; (10004be4 <xosc_init+0x24>)
10004bd0:	6019      	str	r1, [r3, #0]

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
10004bd2:	6853      	ldr	r3, [r2, #4]
10004bd4:	2b00      	cmp	r3, #0
10004bd6:	dafc      	bge.n	10004bd2 <xosc_init+0x12>
}
10004bd8:	4770      	bx	lr
10004bda:	46c0      	nop			; (mov r8, r8)
10004bdc:	40024000 	.word	0x40024000
10004be0:	00fab000 	.word	0x00fab000
10004be4:	40026000 	.word	0x40026000

10004be8 <tud_cdc_n_connected>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_cdc_n_connected(uint8_t itf)
{
10004be8:	b510      	push	{r4, lr}
10004bea:	0004      	movs	r4, r0
bool tud_suspended(void);

// Check if device is ready to transfer
static inline bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
10004bec:	f000 fc9c 	bl	10005528 <tud_mounted>
10004bf0:	2800      	cmp	r0, #0
10004bf2:	d101      	bne.n	10004bf8 <tud_cdc_n_connected+0x10>
10004bf4:	2000      	movs	r0, #0
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
}
10004bf6:	bd10      	pop	{r4, pc}
10004bf8:	f000 fc9e 	bl	10005538 <tud_suspended>
10004bfc:	2800      	cmp	r0, #0
10004bfe:	d1f9      	bne.n	10004bf4 <tud_cdc_n_connected+0xc>
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
10004c00:	0060      	lsls	r0, r4, #1
10004c02:	1904      	adds	r4, r0, r4
10004c04:	0123      	lsls	r3, r4, #4
10004c06:	4804      	ldr	r0, [pc, #16]	; (10004c18 <tud_cdc_n_connected+0x30>)
10004c08:	1b1c      	subs	r4, r3, r4
10004c0a:	0124      	lsls	r4, r4, #4
10004c0c:	1904      	adds	r4, r0, r4
10004c0e:	2001      	movs	r0, #1
10004c10:	7923      	ldrb	r3, [r4, #4]
10004c12:	4018      	ands	r0, r3
10004c14:	e7ef      	b.n	10004bf6 <tud_cdc_n_connected+0xe>
10004c16:	46c0      	nop			; (mov r8, r8)
10004c18:	20022f18 	.word	0x20022f18

10004c1c <tud_cdc_n_available>:
//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
10004c1c:	0043      	lsls	r3, r0, #1
10004c1e:	181b      	adds	r3, r3, r0
{
10004c20:	b510      	push	{r4, lr}
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
10004c22:	0118      	lsls	r0, r3, #4
10004c24:	1ac0      	subs	r0, r0, r3
10004c26:	0100      	lsls	r0, r0, #4
10004c28:	4b02      	ldr	r3, [pc, #8]	; (10004c34 <tud_cdc_n_available+0x18>)
10004c2a:	3010      	adds	r0, #16
10004c2c:	18c0      	adds	r0, r0, r3
10004c2e:	f000 fab9 	bl	100051a4 <tu_fifo_count>
}
10004c32:	bd10      	pop	{r4, pc}
10004c34:	20022f18 	.word	0x20022f18

10004c38 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
10004c38:	b5f0      	push	{r4, r5, r6, r7, lr}
10004c3a:	0044      	lsls	r4, r0, #1
10004c3c:	1820      	adds	r0, r4, r0
10004c3e:	0104      	lsls	r4, r0, #4
10004c40:	1a24      	subs	r4, r4, r0
10004c42:	0124      	lsls	r4, r4, #4
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, bufsize);
10004c44:	0026      	movs	r6, r4
{
10004c46:	46c6      	mov	lr, r8
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, bufsize);
10004c48:	4f17      	ldr	r7, [pc, #92]	; (10004ca8 <tud_cdc_n_read+0x70>)
10004c4a:	3610      	adds	r6, #16
10004c4c:	19f6      	adds	r6, r6, r7
{
10004c4e:	b500      	push	{lr}
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, bufsize);
10004c50:	0030      	movs	r0, r6
10004c52:	b292      	uxth	r2, r2
10004c54:	f000 fb14 	bl	10005280 <tu_fifo_read_n>
10004c58:	0005      	movs	r5, r0
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
10004c5a:	0030      	movs	r0, r6
10004c5c:	f000 faae 	bl	100051bc <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf), );
10004c60:	283f      	cmp	r0, #63	; 0x3f
10004c62:	d803      	bhi.n	10004c6c <tud_cdc_n_read+0x34>
  _prep_out_transaction(p_cdc);
  return num_read;
}
10004c64:	0028      	movs	r0, r5
10004c66:	bc80      	pop	{r7}
10004c68:	46b8      	mov	r8, r7
10004c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out), );
10004c6c:	193b      	adds	r3, r7, r4
10004c6e:	2000      	movs	r0, #0
10004c70:	78d9      	ldrb	r1, [r3, #3]
10004c72:	4698      	mov	r8, r3
10004c74:	f001 f9c6 	bl	10006004 <usbd_edpt_claim>
10004c78:	2800      	cmp	r0, #0
10004c7a:	d0f3      	beq.n	10004c64 <tud_cdc_n_read+0x2c>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
10004c7c:	0030      	movs	r0, r6
10004c7e:	f000 fa9d 	bl	100051bc <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )  {
10004c82:	283f      	cmp	r0, #63	; 0x3f
10004c84:	d90a      	bls.n	10004c9c <tud_cdc_n_read+0x64>
    usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
10004c86:	2394      	movs	r3, #148	; 0x94
10004c88:	009b      	lsls	r3, r3, #2
10004c8a:	18e2      	adds	r2, r4, r3
10004c8c:	4643      	mov	r3, r8
10004c8e:	19d2      	adds	r2, r2, r7
10004c90:	78d9      	ldrb	r1, [r3, #3]
10004c92:	2000      	movs	r0, #0
10004c94:	2340      	movs	r3, #64	; 0x40
10004c96:	f001 fa0d 	bl	100060b4 <usbd_edpt_xfer>
10004c9a:	e7e3      	b.n	10004c64 <tud_cdc_n_read+0x2c>
    usbd_edpt_release(rhport, p_cdc->ep_out);
10004c9c:	4643      	mov	r3, r8
10004c9e:	2000      	movs	r0, #0
10004ca0:	78d9      	ldrb	r1, [r3, #3]
10004ca2:	f001 f9e1 	bl	10006068 <usbd_edpt_release>
  return num_read;
10004ca6:	e7dd      	b.n	10004c64 <tud_cdc_n_read+0x2c>
10004ca8:	20022f18 	.word	0x20022f18

10004cac <tud_cdc_n_write_flush>:

  return ret;
}

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
10004cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004cae:	4647      	mov	r7, r8
10004cb0:	46ce      	mov	lr, r9
10004cb2:	b580      	push	{r7, lr}
10004cb4:	0047      	lsls	r7, r0, #1
10004cb6:	183b      	adds	r3, r7, r0
10004cb8:	011c      	lsls	r4, r3, #4
10004cba:	1ae4      	subs	r4, r4, r3
10004cbc:	0124      	lsls	r4, r4, #4
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];

  // No data to send
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
10004cbe:	4b23      	ldr	r3, [pc, #140]	; (10004d4c <tud_cdc_n_write_flush+0xa0>)
10004cc0:	0026      	movs	r6, r4
10004cc2:	4698      	mov	r8, r3
10004cc4:	3628      	adds	r6, #40	; 0x28
10004cc6:	4446      	add	r6, r8
{
10004cc8:	0005      	movs	r5, r0
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
10004cca:	0030      	movs	r0, r6
10004ccc:	f000 fa6a 	bl	100051a4 <tu_fifo_count>
10004cd0:	2800      	cmp	r0, #0
10004cd2:	d104      	bne.n	10004cde <tud_cdc_n_write_flush+0x32>
  }else
  {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
    return 0;
10004cd4:	2000      	movs	r0, #0
  }
}
10004cd6:	bcc0      	pop	{r6, r7}
10004cd8:	46b9      	mov	r9, r7
10004cda:	46b0      	mov	r8, r6
10004cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
10004cde:	46a1      	mov	r9, r4
10004ce0:	44c1      	add	r9, r8
10004ce2:	464b      	mov	r3, r9
10004ce4:	2000      	movs	r0, #0
10004ce6:	7899      	ldrb	r1, [r3, #2]
10004ce8:	f001 f98c 	bl	10006004 <usbd_edpt_claim>
10004cec:	2800      	cmp	r0, #0
10004cee:	d0f1      	beq.n	10004cd4 <tud_cdc_n_write_flush+0x28>
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
10004cf0:	23a4      	movs	r3, #164	; 0xa4
10004cf2:	009b      	lsls	r3, r3, #2
10004cf4:	469c      	mov	ip, r3
10004cf6:	4464      	add	r4, ip
10004cf8:	4444      	add	r4, r8
10004cfa:	0030      	movs	r0, r6
10004cfc:	2240      	movs	r2, #64	; 0x40
10004cfe:	0021      	movs	r1, r4
10004d00:	f000 fabe 	bl	10005280 <tu_fifo_read_n>
10004d04:	1e06      	subs	r6, r0, #0
  if ( count && tud_cdc_n_connected(itf) )
10004d06:	d016      	beq.n	10004d36 <tud_cdc_n_write_flush+0x8a>
10004d08:	f000 fc0e 	bl	10005528 <tud_mounted>
10004d0c:	2800      	cmp	r0, #0
10004d0e:	d012      	beq.n	10004d36 <tud_cdc_n_write_flush+0x8a>
10004d10:	f000 fc12 	bl	10005538 <tud_suspended>
10004d14:	2800      	cmp	r0, #0
10004d16:	d10e      	bne.n	10004d36 <tud_cdc_n_write_flush+0x8a>
10004d18:	464b      	mov	r3, r9
10004d1a:	791b      	ldrb	r3, [r3, #4]
10004d1c:	07db      	lsls	r3, r3, #31
10004d1e:	d50a      	bpl.n	10004d36 <tud_cdc_n_write_flush+0x8a>
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
10004d20:	464b      	mov	r3, r9
10004d22:	0022      	movs	r2, r4
10004d24:	7899      	ldrb	r1, [r3, #2]
10004d26:	2000      	movs	r0, #0
10004d28:	0033      	movs	r3, r6
10004d2a:	f001 f9c3 	bl	100060b4 <usbd_edpt_xfer>
10004d2e:	2800      	cmp	r0, #0
10004d30:	d0d0      	beq.n	10004cd4 <tud_cdc_n_write_flush+0x28>
    return count;
10004d32:	0030      	movs	r0, r6
10004d34:	e7cf      	b.n	10004cd6 <tud_cdc_n_write_flush+0x2a>
    usbd_edpt_release(rhport, p_cdc->ep_in);
10004d36:	197d      	adds	r5, r7, r5
10004d38:	012b      	lsls	r3, r5, #4
10004d3a:	1b5d      	subs	r5, r3, r5
10004d3c:	012d      	lsls	r5, r5, #4
10004d3e:	4445      	add	r5, r8
10004d40:	78a9      	ldrb	r1, [r5, #2]
10004d42:	2000      	movs	r0, #0
10004d44:	f001 f990 	bl	10006068 <usbd_edpt_release>
10004d48:	e7c4      	b.n	10004cd4 <tud_cdc_n_write_flush+0x28>
10004d4a:	46c0      	nop			; (mov r8, r8)
10004d4c:	20022f18 	.word	0x20022f18

10004d50 <tud_cdc_n_write>:
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, bufsize);
10004d50:	0043      	lsls	r3, r0, #1
10004d52:	181b      	adds	r3, r3, r0
{
10004d54:	b570      	push	{r4, r5, r6, lr}
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, bufsize);
10004d56:	011c      	lsls	r4, r3, #4
10004d58:	1ae4      	subs	r4, r4, r3
10004d5a:	0124      	lsls	r4, r4, #4
10004d5c:	4b09      	ldr	r3, [pc, #36]	; (10004d84 <tud_cdc_n_write+0x34>)
10004d5e:	3428      	adds	r4, #40	; 0x28
10004d60:	18e4      	adds	r4, r4, r3
{
10004d62:	0005      	movs	r5, r0
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, bufsize);
10004d64:	b292      	uxth	r2, r2
10004d66:	0020      	movs	r0, r4
10004d68:	f000 fb4a 	bl	10005400 <tu_fifo_write_n>
10004d6c:	0006      	movs	r6, r0
  if ( tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE )
10004d6e:	0020      	movs	r0, r4
10004d70:	f000 fa18 	bl	100051a4 <tu_fifo_count>
10004d74:	283f      	cmp	r0, #63	; 0x3f
10004d76:	d801      	bhi.n	10004d7c <tud_cdc_n_write+0x2c>
}
10004d78:	0030      	movs	r0, r6
10004d7a:	bd70      	pop	{r4, r5, r6, pc}
    tud_cdc_n_write_flush(itf);
10004d7c:	0028      	movs	r0, r5
10004d7e:	f7ff ff95 	bl	10004cac <tud_cdc_n_write_flush>
10004d82:	e7f9      	b.n	10004d78 <tud_cdc_n_write+0x28>
10004d84:	20022f18 	.word	0x20022f18

10004d88 <tud_cdc_n_write_available>:

uint32_t tud_cdc_n_write_available (uint8_t itf)
{
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
10004d88:	0043      	lsls	r3, r0, #1
10004d8a:	181b      	adds	r3, r3, r0
{
10004d8c:	b510      	push	{r4, lr}
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
10004d8e:	0118      	lsls	r0, r3, #4
10004d90:	1ac0      	subs	r0, r0, r3
10004d92:	0100      	lsls	r0, r0, #4
10004d94:	4b02      	ldr	r3, [pc, #8]	; (10004da0 <tud_cdc_n_write_available+0x18>)
10004d96:	3028      	adds	r0, #40	; 0x28
10004d98:	18c0      	adds	r0, r0, r3
10004d9a:	f000 fa0f 	bl	100051bc <tu_fifo_remaining>
}
10004d9e:	bd10      	pop	{r4, pc}
10004da0:	20022f18 	.word	0x20022f18

10004da4 <cdcd_init>:
//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
10004da4:	22b4      	movs	r2, #180	; 0xb4
{
10004da6:	b570      	push	{r4, r5, r6, lr}
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
10004da8:	4c1a      	ldr	r4, [pc, #104]	; (10004e14 <cdcd_init+0x70>)
{
10004daa:	b082      	sub	sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
10004dac:	2100      	movs	r1, #0
10004dae:	0020      	movs	r0, r4
10004db0:	0092      	lsls	r2, r2, #2
10004db2:	f7fc f997 	bl	100010e4 <__wrap_memset>

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];

    p_cdc->wanted_char = -1;
10004db6:	23ff      	movs	r3, #255	; 0xff
10004db8:	7163      	strb	r3, [r4, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate  = 115200;
10004dba:	4b17      	ldr	r3, [pc, #92]	; (10004e18 <cdcd_init+0x74>)
    p_cdc->line_coding.stop_bits = 0;
    p_cdc->line_coding.parity    = 0;
    p_cdc->line_coding.data_bits = 8;

    // config fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
10004dbc:	2580      	movs	r5, #128	; 0x80
    p_cdc->line_coding.bit_rate  = 115200;
10004dbe:	80e3      	strh	r3, [r4, #6]
10004dc0:	2301      	movs	r3, #1
10004dc2:	2600      	movs	r6, #0
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
10004dc4:	0021      	movs	r1, r4
10004dc6:	0020      	movs	r0, r4
    p_cdc->line_coding.bit_rate  = 115200;
10004dc8:	8123      	strh	r3, [r4, #8]
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
10004dca:	006d      	lsls	r5, r5, #1
    p_cdc->line_coding.data_bits = 8;
10004dcc:	3307      	adds	r3, #7
10004dce:	7323      	strb	r3, [r4, #12]
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
10004dd0:	002a      	movs	r2, r5
10004dd2:	3140      	adds	r1, #64	; 0x40
10004dd4:	9600      	str	r6, [sp, #0]
10004dd6:	3b07      	subs	r3, #7
10004dd8:	3010      	adds	r0, #16
10004dda:	f000 f9a7 	bl	1000512c <tu_fifo_config>
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, false);
10004dde:	0021      	movs	r1, r4
10004de0:	0020      	movs	r0, r4
10004de2:	3141      	adds	r1, #65	; 0x41
10004de4:	002a      	movs	r2, r5
10004de6:	31ff      	adds	r1, #255	; 0xff
10004de8:	2301      	movs	r3, #1
10004dea:	9600      	str	r6, [sp, #0]
10004dec:	3028      	adds	r0, #40	; 0x28
10004dee:	f000 f99d 	bl	1000512c <tu_fifo_config>
//--------------------------------------------------------------------+
typedef struct mutex osal_mutex_def_t, *osal_mutex_t;

static inline osal_mutex_t osal_mutex_create(osal_mutex_def_t* mdef)
{
    mutex_init(mdef);
10004df2:	2390      	movs	r3, #144	; 0x90
10004df4:	009b      	lsls	r3, r3, #2
10004df6:	18e5      	adds	r5, r4, r3
10004df8:	0028      	movs	r0, r5
10004dfa:	f7fc ff65 	bl	10001cc8 <mutex_init>
10004dfe:	2392      	movs	r3, #146	; 0x92
10004e00:	009b      	lsls	r3, r3, #2
bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable);

#if CFG_FIFO_MUTEX
static inline void tu_fifo_config_mutex(tu_fifo_t *f, tu_fifo_mutex_t mutex_hdl)
{
  f->mutex = mutex_hdl;
10004e02:	6265      	str	r5, [r4, #36]	; 0x24
10004e04:	18e5      	adds	r5, r4, r3
10004e06:	0028      	movs	r0, r5
10004e08:	f7fc ff5e 	bl	10001cc8 <mutex_init>
10004e0c:	63e5      	str	r5, [r4, #60]	; 0x3c
#if CFG_FIFO_MUTEX
    tu_fifo_config_mutex(&p_cdc->rx_ff, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex));
#endif
  }
}
10004e0e:	b002      	add	sp, #8
10004e10:	bd70      	pop	{r4, r5, r6, pc}
10004e12:	46c0      	nop			; (mov r8, r8)
10004e14:	20022f18 	.word	0x20022f18
10004e18:	ffffc200 	.word	0xffffc200

10004e1c <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
10004e1c:	b510      	push	{r4, lr}
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
  {
    tu_memclr(&_cdcd_itf[i], ITF_MEM_RESET_SIZE);
10004e1e:	4c07      	ldr	r4, [pc, #28]	; (10004e3c <cdcd_reset+0x20>)
10004e20:	2205      	movs	r2, #5
10004e22:	2100      	movs	r1, #0
10004e24:	0020      	movs	r0, r4
10004e26:	f7fc f95d 	bl	100010e4 <__wrap_memset>
    tu_fifo_clear(&_cdcd_itf[i].rx_ff);
10004e2a:	0020      	movs	r0, r4
10004e2c:	3010      	adds	r0, #16
10004e2e:	f000 fb65 	bl	100054fc <tu_fifo_clear>
    tu_fifo_clear(&_cdcd_itf[i].tx_ff);
10004e32:	0020      	movs	r0, r4
10004e34:	3028      	adds	r0, #40	; 0x28
10004e36:	f000 fb61 	bl	100054fc <tu_fifo_clear>
  }
}
10004e3a:	bd10      	pop	{r4, pc}
10004e3c:	20022f18 	.word	0x20022f18

10004e40 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
10004e40:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
10004e42:	794b      	ldrb	r3, [r1, #5]
{
10004e44:	0006      	movs	r6, r0
10004e46:	b083      	sub	sp, #12
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
10004e48:	2b02      	cmp	r3, #2
10004e4a:	d102      	bne.n	10004e52 <cdcd_open+0x12>
10004e4c:	798b      	ldrb	r3, [r1, #6]
10004e4e:	2b02      	cmp	r3, #2
10004e50:	d003      	beq.n	10004e5a <cdcd_open+0x1a>
10004e52:	2500      	movs	r5, #0

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);

  return drv_len;
}
10004e54:	0028      	movs	r0, r5
10004e56:	b003      	add	sp, #12
10004e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
static inline uint32_t tu_abs(int32_t value) { return (uint32_t)((value < 0) ? (-value) : value); }

/// inclusive range checking
static inline bool tu_within(uint32_t lower, uint32_t value, uint32_t upper)
{
  return (lower <= value) && (value <= upper);
10004e5a:	79cb      	ldrb	r3, [r1, #7]
10004e5c:	2b06      	cmp	r3, #6
10004e5e:	d8f8      	bhi.n	10004e52 <cdcd_open+0x12>
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
10004e60:	4f2f      	ldr	r7, [pc, #188]	; (10004f20 <cdcd_open+0xe0>)
10004e62:	78bb      	ldrb	r3, [r7, #2]
10004e64:	2b00      	cmp	r3, #0
10004e66:	d1f4      	bne.n	10004e52 <cdcd_open+0x12>
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
10004e68:	788b      	ldrb	r3, [r1, #2]
  uint16_t drv_len = sizeof(tusb_desc_interface_t);
10004e6a:	2509      	movs	r5, #9
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
10004e6c:	703b      	strb	r3, [r7, #0]
// Descriptor helper
//--------------------------------------------------------------------+
static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
  return desc8 + desc8[DESC_OFFSET_LEN];
10004e6e:	780c      	ldrb	r4, [r1, #0]
10004e70:	190c      	adds	r4, r1, r4
}

static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10004e72:	7863      	ldrb	r3, [r4, #1]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
10004e74:	2b24      	cmp	r3, #36	; 0x24
10004e76:	d10b      	bne.n	10004e90 <cdcd_open+0x50>
10004e78:	2a08      	cmp	r2, #8
10004e7a:	d802      	bhi.n	10004e82 <cdcd_open+0x42>
10004e7c:	e00f      	b.n	10004e9e <cdcd_open+0x5e>
10004e7e:	42aa      	cmp	r2, r5
10004e80:	d30d      	bcc.n	10004e9e <cdcd_open+0x5e>
}

static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
10004e82:	7823      	ldrb	r3, [r4, #0]
  return desc8 + desc8[DESC_OFFSET_LEN];
10004e84:	18e4      	adds	r4, r4, r3
    drv_len += tu_desc_len(p_desc);
10004e86:	18ed      	adds	r5, r5, r3
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10004e88:	7863      	ldrb	r3, [r4, #1]
10004e8a:	b2ad      	uxth	r5, r5
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
10004e8c:	2b24      	cmp	r3, #36	; 0x24
10004e8e:	d0f6      	beq.n	10004e7e <cdcd_open+0x3e>
  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
10004e90:	2b05      	cmp	r3, #5
10004e92:	d020      	beq.n	10004ed6 <cdcd_open+0x96>
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
10004e94:	2b04      	cmp	r3, #4
10004e96:	d102      	bne.n	10004e9e <cdcd_open+0x5e>
10004e98:	7963      	ldrb	r3, [r4, #5]
10004e9a:	2b0a      	cmp	r3, #10
10004e9c:	d02e      	beq.n	10004efc <cdcd_open+0xbc>
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
10004e9e:	4c21      	ldr	r4, [pc, #132]	; (10004f24 <cdcd_open+0xe4>)
10004ea0:	0020      	movs	r0, r4
10004ea2:	f000 f98b 	bl	100051bc <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf), );
10004ea6:	283f      	cmp	r0, #63	; 0x3f
10004ea8:	d9d4      	bls.n	10004e54 <cdcd_open+0x14>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out), );
10004eaa:	0026      	movs	r6, r4
10004eac:	3e10      	subs	r6, #16
10004eae:	2000      	movs	r0, #0
10004eb0:	78f1      	ldrb	r1, [r6, #3]
10004eb2:	f001 f8a7 	bl	10006004 <usbd_edpt_claim>
10004eb6:	2800      	cmp	r0, #0
10004eb8:	d0cc      	beq.n	10004e54 <cdcd_open+0x14>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
10004eba:	0020      	movs	r0, r4
10004ebc:	f000 f97e 	bl	100051bc <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )  {
10004ec0:	283f      	cmp	r0, #63	; 0x3f
10004ec2:	d916      	bls.n	10004ef2 <cdcd_open+0xb2>
    usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
10004ec4:	2390      	movs	r3, #144	; 0x90
10004ec6:	009b      	lsls	r3, r3, #2
10004ec8:	18e2      	adds	r2, r4, r3
10004eca:	78f1      	ldrb	r1, [r6, #3]
10004ecc:	2340      	movs	r3, #64	; 0x40
10004ece:	2000      	movs	r0, #0
10004ed0:	f001 f8f0 	bl	100060b4 <usbd_edpt_xfer>
10004ed4:	e7be      	b.n	10004e54 <cdcd_open+0x14>
    TU_ASSERT( usbd_edpt_open(rhport, (tusb_desc_endpoint_t const *) p_desc), 0 );
10004ed6:	0021      	movs	r1, r4
10004ed8:	0030      	movs	r0, r6
10004eda:	f001 f88f 	bl	10005ffc <usbd_edpt_open>
10004ede:	2800      	cmp	r0, #0
10004ee0:	d0b7      	beq.n	10004e52 <cdcd_open+0x12>
    p_cdc->ep_notif = ((tusb_desc_endpoint_t const *) p_desc)->bEndpointAddress;
10004ee2:	78a3      	ldrb	r3, [r4, #2]
10004ee4:	707b      	strb	r3, [r7, #1]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
10004ee6:	7823      	ldrb	r3, [r4, #0]
    drv_len += tu_desc_len(p_desc);
10004ee8:	18ed      	adds	r5, r5, r3
  return desc8 + desc8[DESC_OFFSET_LEN];
10004eea:	18e4      	adds	r4, r4, r3
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10004eec:	7863      	ldrb	r3, [r4, #1]
10004eee:	b2ad      	uxth	r5, r5
  return desc8 + desc8[DESC_OFFSET_LEN];
10004ef0:	e7d0      	b.n	10004e94 <cdcd_open+0x54>
    usbd_edpt_release(rhport, p_cdc->ep_out);
10004ef2:	78f1      	ldrb	r1, [r6, #3]
10004ef4:	2000      	movs	r0, #0
10004ef6:	f001 f8b7 	bl	10006068 <usbd_edpt_release>
10004efa:	e7ab      	b.n	10004e54 <cdcd_open+0x14>
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
10004efc:	4b0a      	ldr	r3, [pc, #40]	; (10004f28 <cdcd_open+0xe8>)
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
10004efe:	7827      	ldrb	r7, [r4, #0]
10004f00:	9301      	str	r3, [sp, #4]
10004f02:	3301      	adds	r3, #1
10004f04:	9300      	str	r3, [sp, #0]
10004f06:	2202      	movs	r2, #2
10004f08:	2302      	movs	r3, #2
10004f0a:	0030      	movs	r0, r6
  return desc8 + desc8[DESC_OFFSET_LEN];
10004f0c:	19e1      	adds	r1, r4, r7
10004f0e:	f001 f841 	bl	10005f94 <usbd_open_edpt_pair>
10004f12:	2800      	cmp	r0, #0
10004f14:	d09d      	beq.n	10004e52 <cdcd_open+0x12>
    drv_len += 2*sizeof(tusb_desc_endpoint_t);
10004f16:	350e      	adds	r5, #14
10004f18:	19ed      	adds	r5, r5, r7
10004f1a:	b2ad      	uxth	r5, r5
10004f1c:	e7bf      	b.n	10004e9e <cdcd_open+0x5e>
10004f1e:	46c0      	nop			; (mov r8, r8)
10004f20:	20022f18 	.word	0x20022f18
10004f24:	20022f28 	.word	0x20022f28
10004f28:	20022f1a 	.word	0x20022f1a

10004f2c <cdcd_control_complete>:
bool cdcd_control_complete(uint8_t rhport, tusb_control_request_t const * request)
{
  (void) rhport;

  //------------- Class Specific Request -------------//
  TU_VERIFY (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
10004f2c:	2360      	movs	r3, #96	; 0x60
10004f2e:	780a      	ldrb	r2, [r1, #0]
{
10004f30:	b570      	push	{r4, r5, r6, lr}
  TU_VERIFY (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
10004f32:	4013      	ands	r3, r2
10004f34:	2400      	movs	r4, #0
10004f36:	2b20      	cmp	r3, #32
10004f38:	d10b      	bne.n	10004f52 <cdcd_control_complete+0x26>
  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;

    if ( p_cdc->itf_num == request->wIndex ) break;
10004f3a:	4a0b      	ldr	r2, [pc, #44]	; (10004f68 <cdcd_control_complete+0x3c>)
10004f3c:	794b      	ldrb	r3, [r1, #5]
10004f3e:	790d      	ldrb	r5, [r1, #4]
10004f40:	7810      	ldrb	r0, [r2, #0]
10004f42:	021b      	lsls	r3, r3, #8
10004f44:	432b      	orrs	r3, r5
10004f46:	4298      	cmp	r0, r3
10004f48:	d103      	bne.n	10004f52 <cdcd_control_complete+0x26>
  }

  // Invoke callback
  if ( CDC_REQUEST_SET_LINE_CODING == request->bRequest )
10004f4a:	784b      	ldrb	r3, [r1, #1]
  {
    if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
  }

  return true;
10004f4c:	3401      	adds	r4, #1
  if ( CDC_REQUEST_SET_LINE_CODING == request->bRequest )
10004f4e:	2b20      	cmp	r3, #32
10004f50:	d001      	beq.n	10004f56 <cdcd_control_complete+0x2a>
}
10004f52:	0020      	movs	r0, r4
10004f54:	bd70      	pop	{r4, r5, r6, pc}
    if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
10004f56:	4b05      	ldr	r3, [pc, #20]	; (10004f6c <cdcd_control_complete+0x40>)
10004f58:	2b00      	cmp	r3, #0
10004f5a:	d0fa      	beq.n	10004f52 <cdcd_control_complete+0x26>
10004f5c:	2000      	movs	r0, #0
10004f5e:	1d91      	adds	r1, r2, #6
10004f60:	e000      	b.n	10004f64 <cdcd_control_complete+0x38>
10004f62:	bf00      	nop
10004f64:	e7f5      	b.n	10004f52 <cdcd_control_complete+0x26>
10004f66:	46c0      	nop			; (mov r8, r8)
10004f68:	20022f18 	.word	0x20022f18
10004f6c:	00000000 	.word	0x00000000

10004f70 <cdcd_control_request>:
// Handle class control request
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_request(uint8_t rhport, tusb_control_request_t const * request)
{
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
10004f70:	2360      	movs	r3, #96	; 0x60
10004f72:	780a      	ldrb	r2, [r1, #0]
{
10004f74:	b570      	push	{r4, r5, r6, lr}
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
10004f76:	4013      	ands	r3, r2
10004f78:	2400      	movs	r4, #0
10004f7a:	2b20      	cmp	r3, #32
10004f7c:	d111      	bne.n	10004fa2 <cdcd_control_request+0x32>
  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;

    if ( p_cdc->itf_num == request->wIndex ) break;
10004f7e:	4a14      	ldr	r2, [pc, #80]	; (10004fd0 <cdcd_control_request+0x60>)
10004f80:	794b      	ldrb	r3, [r1, #5]
10004f82:	790e      	ldrb	r6, [r1, #4]
10004f84:	7815      	ldrb	r5, [r2, #0]
10004f86:	021b      	lsls	r3, r3, #8
10004f88:	4333      	orrs	r3, r6
10004f8a:	429d      	cmp	r5, r3
10004f8c:	d109      	bne.n	10004fa2 <cdcd_control_request+0x32>
  }

  switch ( request->bRequest )
10004f8e:	784b      	ldrb	r3, [r1, #1]
10004f90:	2b21      	cmp	r3, #33	; 0x21
10004f92:	d808      	bhi.n	10004fa6 <cdcd_control_request+0x36>
10004f94:	2b1f      	cmp	r3, #31
10004f96:	d904      	bls.n	10004fa2 <cdcd_control_request+0x32>
  {
    case CDC_REQUEST_SET_LINE_CODING:
      TU_LOG2("  Set Line Coding\r\n");
      tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
10004f98:	2307      	movs	r3, #7
10004f9a:	3206      	adds	r2, #6
10004f9c:	f001 f8c6 	bl	1000612c <tud_control_xfer>
    break;

    default: return false; // stall unsupported request
  }

  return true;
10004fa0:	2401      	movs	r4, #1
}
10004fa2:	0020      	movs	r0, r4
10004fa4:	bd70      	pop	{r4, r5, r6, pc}
  switch ( request->bRequest )
10004fa6:	2b22      	cmp	r3, #34	; 0x22
10004fa8:	d1fb      	bne.n	10004fa2 <cdcd_control_request+0x32>
      bool const dtr = tu_bit_test(request->wValue, 0);
10004faa:	78cd      	ldrb	r5, [r1, #3]
10004fac:	788b      	ldrb	r3, [r1, #2]
10004fae:	022d      	lsls	r5, r5, #8
10004fb0:	431d      	orrs	r5, r3
      p_cdc->line_state = (uint8_t) request->wValue;
10004fb2:	7115      	strb	r5, [r2, #4]
      tud_control_status(rhport, request);
10004fb4:	f001 f8a2 	bl	100060fc <tud_control_status>
      if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
10004fb8:	4b06      	ldr	r3, [pc, #24]	; (10004fd4 <cdcd_control_request+0x64>)
  return true;
10004fba:	2401      	movs	r4, #1
      if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
10004fbc:	2b00      	cmp	r3, #0
10004fbe:	d0f0      	beq.n	10004fa2 <cdcd_control_request+0x32>
10004fc0:	0029      	movs	r1, r5
}

// Bit
static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
10004fc2:	086a      	lsrs	r2, r5, #1
10004fc4:	2000      	movs	r0, #0
10004fc6:	4022      	ands	r2, r4
10004fc8:	4021      	ands	r1, r4
10004fca:	e000      	b.n	10004fce <cdcd_control_request+0x5e>
10004fcc:	bf00      	nop
10004fce:	e7e8      	b.n	10004fa2 <cdcd_control_request+0x32>
10004fd0:	20022f18 	.word	0x20022f18
10004fd4:	00000000 	.word	0x00000000

10004fd8 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
10004fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
10004fda:	4646      	mov	r6, r8
10004fdc:	464f      	mov	r7, r9
10004fde:	46d6      	mov	lr, sl
10004fe0:	b5c0      	push	{r6, r7, lr}

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
  {
    p_cdc = &_cdcd_itf[itf];
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
10004fe2:	4e4d      	ldr	r6, [pc, #308]	; (10005118 <cdcd_xfer_cb+0x140>)
{
10004fe4:	4699      	mov	r9, r3
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
10004fe6:	78f3      	ldrb	r3, [r6, #3]
{
10004fe8:	4680      	mov	r8, r0
10004fea:	000d      	movs	r5, r1
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
10004fec:	428b      	cmp	r3, r1
10004fee:	d157      	bne.n	100050a0 <cdcd_xfer_cb+0xc8>

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
  {
    // TODO search for wanted char first for better performance
    for(uint32_t i=0; i<xferred_bytes; i++)
10004ff0:	464b      	mov	r3, r9
10004ff2:	2b00      	cmp	r3, #0
10004ff4:	d100      	bne.n	10004ff8 <cdcd_xfer_cb+0x20>
10004ff6:	e088      	b.n	1000510a <cdcd_xfer_cb+0x132>
10004ff8:	4b48      	ldr	r3, [pc, #288]	; (1000511c <cdcd_xfer_cb+0x144>)
10004ffa:	2b00      	cmp	r3, #0
10004ffc:	d100      	bne.n	10005000 <cdcd_xfer_cb+0x28>
10004ffe:	e075      	b.n	100050ec <cdcd_xfer_cb+0x114>
10005000:	2394      	movs	r3, #148	; 0x94
10005002:	009b      	lsls	r3, r3, #2
10005004:	18f4      	adds	r4, r6, r3
10005006:	46a2      	mov	sl, r4
10005008:	0037      	movs	r7, r6
1000500a:	44ca      	add	sl, r9
1000500c:	3710      	adds	r7, #16
    {
      tu_fifo_write(&p_cdc->rx_ff, &p_cdc->epout_buf[i]);
1000500e:	0021      	movs	r1, r4
10005010:	0038      	movs	r0, r7
10005012:	f000 f9b3 	bl	1000537c <tu_fifo_write>

      // Check for wanted char and invoke callback if needed
      if ( tud_cdc_rx_wanted_cb && ( ((signed char) p_cdc->wanted_char) != -1 ) && ( p_cdc->wanted_char == p_cdc->epout_buf[i] ) )
10005016:	7973      	ldrb	r3, [r6, #5]
10005018:	2bff      	cmp	r3, #255	; 0xff
1000501a:	d002      	beq.n	10005022 <cdcd_xfer_cb+0x4a>
1000501c:	7821      	ldrb	r1, [r4, #0]
1000501e:	4299      	cmp	r1, r3
10005020:	d043      	beq.n	100050aa <cdcd_xfer_cb+0xd2>
    for(uint32_t i=0; i<xferred_bytes; i++)
10005022:	3401      	adds	r4, #1
10005024:	4554      	cmp	r4, sl
10005026:	d1f2      	bne.n	1000500e <cdcd_xfer_cb+0x36>
        tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && tu_fifo_count(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
10005028:	4b3d      	ldr	r3, [pc, #244]	; (10005120 <cdcd_xfer_cb+0x148>)
1000502a:	2b00      	cmp	r3, #0
1000502c:	d004      	beq.n	10005038 <cdcd_xfer_cb+0x60>
1000502e:	0038      	movs	r0, r7
10005030:	f000 f8b8 	bl	100051a4 <tu_fifo_count>
10005034:	2800      	cmp	r0, #0
10005036:	d16b      	bne.n	10005110 <cdcd_xfer_cb+0x138>
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
10005038:	0038      	movs	r0, r7
1000503a:	f000 f8bf 	bl	100051bc <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf), );
1000503e:	283f      	cmp	r0, #63	; 0x3f
10005040:	d837      	bhi.n	100050b2 <cdcd_xfer_cb+0xda>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
10005042:	3f10      	subs	r7, #16
10005044:	78bb      	ldrb	r3, [r7, #2]
10005046:	429d      	cmp	r5, r3
10005048:	d006      	beq.n	10005058 <cdcd_xfer_cb+0x80>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
1000504a:	2401      	movs	r4, #1
}
1000504c:	0020      	movs	r0, r4
1000504e:	bce0      	pop	{r5, r6, r7}
10005050:	46ba      	mov	sl, r7
10005052:	46b1      	mov	r9, r6
10005054:	46a8      	mov	r8, r5
10005056:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
10005058:	4b32      	ldr	r3, [pc, #200]	; (10005124 <cdcd_xfer_cb+0x14c>)
1000505a:	2b00      	cmp	r3, #0
1000505c:	d002      	beq.n	10005064 <cdcd_xfer_cb+0x8c>
1000505e:	2000      	movs	r0, #0
10005060:	e000      	b.n	10005064 <cdcd_xfer_cb+0x8c>
10005062:	bf00      	nop
    if ( 0 == tud_cdc_n_write_flush(itf) )
10005064:	2000      	movs	r0, #0
10005066:	f7ff fe21 	bl	10004cac <tud_cdc_n_write_flush>
1000506a:	2800      	cmp	r0, #0
1000506c:	d1ed      	bne.n	1000504a <cdcd_xfer_cb+0x72>
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
1000506e:	4d2e      	ldr	r5, [pc, #184]	; (10005128 <cdcd_xfer_cb+0x150>)
10005070:	0028      	movs	r0, r5
10005072:	f000 f897 	bl	100051a4 <tu_fifo_count>
10005076:	2800      	cmp	r0, #0
10005078:	d1e7      	bne.n	1000504a <cdcd_xfer_cb+0x72>
1000507a:	464b      	mov	r3, r9
1000507c:	2b00      	cmp	r3, #0
1000507e:	d0e4      	beq.n	1000504a <cdcd_xfer_cb+0x72>
10005080:	069b      	lsls	r3, r3, #26
10005082:	d1e2      	bne.n	1000504a <cdcd_xfer_cb+0x72>
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
10005084:	3d28      	subs	r5, #40	; 0x28
10005086:	4640      	mov	r0, r8
10005088:	78a9      	ldrb	r1, [r5, #2]
1000508a:	f000 ffbb 	bl	10006004 <usbd_edpt_claim>
1000508e:	1e04      	subs	r4, r0, #0
10005090:	d0db      	beq.n	1000504a <cdcd_xfer_cb+0x72>
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
10005092:	2300      	movs	r3, #0
10005094:	2200      	movs	r2, #0
10005096:	4640      	mov	r0, r8
10005098:	78a9      	ldrb	r1, [r5, #2]
1000509a:	f001 f80b 	bl	100060b4 <usbd_edpt_xfer>
1000509e:	e7d5      	b.n	1000504c <cdcd_xfer_cb+0x74>
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
100050a0:	78b3      	ldrb	r3, [r6, #2]
100050a2:	428b      	cmp	r3, r1
100050a4:	d0d8      	beq.n	10005058 <cdcd_xfer_cb+0x80>
  TU_ASSERT(itf < CFG_TUD_CDC);
100050a6:	2400      	movs	r4, #0
100050a8:	e7d0      	b.n	1000504c <cdcd_xfer_cb+0x74>
        tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
100050aa:	2000      	movs	r0, #0
100050ac:	e000      	b.n	100050b0 <cdcd_xfer_cb+0xd8>
100050ae:	bf00      	nop
100050b0:	e7b7      	b.n	10005022 <cdcd_xfer_cb+0x4a>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out), );
100050b2:	003c      	movs	r4, r7
100050b4:	3c10      	subs	r4, #16
100050b6:	2000      	movs	r0, #0
100050b8:	78e1      	ldrb	r1, [r4, #3]
100050ba:	f000 ffa3 	bl	10006004 <usbd_edpt_claim>
100050be:	2800      	cmp	r0, #0
100050c0:	d012      	beq.n	100050e8 <cdcd_xfer_cb+0x110>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
100050c2:	0038      	movs	r0, r7
100050c4:	f000 f87a 	bl	100051bc <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )  {
100050c8:	283f      	cmp	r0, #63	; 0x3f
100050ca:	d909      	bls.n	100050e0 <cdcd_xfer_cb+0x108>
    usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
100050cc:	2390      	movs	r3, #144	; 0x90
100050ce:	009b      	lsls	r3, r3, #2
100050d0:	18fa      	adds	r2, r7, r3
100050d2:	2000      	movs	r0, #0
100050d4:	2340      	movs	r3, #64	; 0x40
100050d6:	78e1      	ldrb	r1, [r4, #3]
100050d8:	f000 ffec 	bl	100060b4 <usbd_edpt_xfer>
  if ( ep_addr == p_cdc->ep_in )
100050dc:	78a3      	ldrb	r3, [r4, #2]
100050de:	e7b2      	b.n	10005046 <cdcd_xfer_cb+0x6e>
    usbd_edpt_release(rhport, p_cdc->ep_out);
100050e0:	2000      	movs	r0, #0
100050e2:	78e1      	ldrb	r1, [r4, #3]
100050e4:	f000 ffc0 	bl	10006068 <usbd_edpt_release>
  if ( ep_addr == p_cdc->ep_in )
100050e8:	78a3      	ldrb	r3, [r4, #2]
100050ea:	e7ac      	b.n	10005046 <cdcd_xfer_cb+0x6e>
100050ec:	2394      	movs	r3, #148	; 0x94
100050ee:	009b      	lsls	r3, r3, #2
100050f0:	18f4      	adds	r4, r6, r3
100050f2:	46a2      	mov	sl, r4
100050f4:	3610      	adds	r6, #16
100050f6:	0037      	movs	r7, r6
100050f8:	44ca      	add	sl, r9
      tu_fifo_write(&p_cdc->rx_ff, &p_cdc->epout_buf[i]);
100050fa:	0021      	movs	r1, r4
100050fc:	0038      	movs	r0, r7
    for(uint32_t i=0; i<xferred_bytes; i++)
100050fe:	3401      	adds	r4, #1
      tu_fifo_write(&p_cdc->rx_ff, &p_cdc->epout_buf[i]);
10005100:	f000 f93c 	bl	1000537c <tu_fifo_write>
    for(uint32_t i=0; i<xferred_bytes; i++)
10005104:	4554      	cmp	r4, sl
10005106:	d1f8      	bne.n	100050fa <cdcd_xfer_cb+0x122>
10005108:	e78e      	b.n	10005028 <cdcd_xfer_cb+0x50>
1000510a:	3610      	adds	r6, #16
1000510c:	0037      	movs	r7, r6
1000510e:	e78b      	b.n	10005028 <cdcd_xfer_cb+0x50>
    if (tud_cdc_rx_cb && tu_fifo_count(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
10005110:	2000      	movs	r0, #0
10005112:	e000      	b.n	10005116 <cdcd_xfer_cb+0x13e>
10005114:	bf00      	nop
10005116:	e78f      	b.n	10005038 <cdcd_xfer_cb+0x60>
10005118:	20022f18 	.word	0x20022f18
	...
10005128:	20022f40 	.word	0x20022f40

1000512c <tu_fifo_config>:
#define tu_fifo_unlock(_ff)

#endif

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
1000512c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000512e:	46c6      	mov	lr, r8
10005130:	b500      	push	{lr}
10005132:	0014      	movs	r4, r2
10005134:	aa06      	add	r2, sp, #24
10005136:	001e      	movs	r6, r3
10005138:	7813      	ldrb	r3, [r2, #0]
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
1000513a:	2280      	movs	r2, #128	; 0x80
{
1000513c:	0005      	movs	r5, r0
1000513e:	000f      	movs	r7, r1
10005140:	4698      	mov	r8, r3
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
10005142:	0212      	lsls	r2, r2, #8
10005144:	4294      	cmp	r4, r2
10005146:	d82b      	bhi.n	100051a0 <tu_fifo_config+0x74>
  if (f->mutex)
10005148:	6940      	ldr	r0, [r0, #20]
1000514a:	2800      	cmp	r0, #0
1000514c:	d01a      	beq.n	10005184 <tu_fifo_config+0x58>
    return mdef;
}

static inline bool osal_mutex_lock (osal_mutex_t mutex_hdl, uint32_t msec)
{
    return mutex_enter_timeout_ms(mutex_hdl, msec);
1000514e:	2101      	movs	r1, #1
10005150:	4249      	negs	r1, r1
10005152:	f003 fd95 	bl	10008c80 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);

  f->buffer = (uint8_t*) buffer;
  f->depth  = depth;
  f->item_size = item_size;
  f->overwritable = overwritable;
10005156:	4643      	mov	r3, r8
  f->depth  = depth;
10005158:	80ac      	strh	r4, [r5, #4]

  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
1000515a:	0064      	lsls	r4, r4, #1
1000515c:	b2a4      	uxth	r4, r4
  f->overwritable = overwritable;
1000515e:	722b      	strb	r3, [r5, #8]
  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
10005160:	1e63      	subs	r3, r4, #1
10005162:	81ab      	strh	r3, [r5, #12]
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;

  f->rd_idx = f->wr_idx = 0;
10005164:	2300      	movs	r3, #0
  if (f->mutex)
10005166:	6968      	ldr	r0, [r5, #20]
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;
10005168:	4264      	negs	r4, r4
  f->rd_idx = f->wr_idx = 0;
1000516a:	81eb      	strh	r3, [r5, #14]
  f->buffer = (uint8_t*) buffer;
1000516c:	602f      	str	r7, [r5, #0]
  f->item_size = item_size;
1000516e:	80ee      	strh	r6, [r5, #6]
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;
10005170:	816c      	strh	r4, [r5, #10]
  f->rd_idx = f->wr_idx = 0;
10005172:	822b      	strh	r3, [r5, #16]
  if (f->mutex)
10005174:	2800      	cmp	r0, #0
10005176:	d011      	beq.n	1000519c <tu_fifo_config+0x70>
}

static inline bool osal_mutex_unlock(osal_mutex_t mutex_hdl)
{
    mutex_exit(mutex_hdl);
10005178:	f003 fd62 	bl	10008c40 <__mutex_exit_veneer>

  tu_fifo_unlock(f);

  return true;
1000517c:	2001      	movs	r0, #1
}
1000517e:	bc80      	pop	{r7}
10005180:	46b8      	mov	r8, r7
10005182:	bdf0      	pop	{r4, r5, r6, r7, pc}
  f->depth  = depth;
10005184:	80ac      	strh	r4, [r5, #4]
  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
10005186:	0064      	lsls	r4, r4, #1
10005188:	b2a4      	uxth	r4, r4
  f->overwritable = overwritable;
1000518a:	722b      	strb	r3, [r5, #8]
  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
1000518c:	1e63      	subs	r3, r4, #1
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;
1000518e:	4264      	negs	r4, r4
  f->rd_idx = f->wr_idx = 0;
10005190:	81e8      	strh	r0, [r5, #14]
  f->buffer = (uint8_t*) buffer;
10005192:	6029      	str	r1, [r5, #0]
  f->item_size = item_size;
10005194:	80ee      	strh	r6, [r5, #6]
  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
10005196:	81ab      	strh	r3, [r5, #12]
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;
10005198:	816c      	strh	r4, [r5, #10]
  f->rd_idx = f->wr_idx = 0;
1000519a:	8228      	strh	r0, [r5, #16]
  return true;
1000519c:	2001      	movs	r0, #1
1000519e:	e7ee      	b.n	1000517e <tu_fifo_config+0x52>
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
100051a0:	2000      	movs	r0, #0
100051a2:	e7ec      	b.n	1000517e <tu_fifo_config+0x52>

100051a4 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
100051a4:	b510      	push	{r4, lr}
  return _tu_fifo_count(f, f->wr_idx, f->rd_idx);
100051a6:	89c4      	ldrh	r4, [r0, #14]
100051a8:	8a01      	ldrh	r1, [r0, #16]
{
100051aa:	0002      	movs	r2, r0
  uint16_t cnt = wAbs-rAbs;
100051ac:	1a60      	subs	r0, r4, r1
100051ae:	b280      	uxth	r0, r0
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
100051b0:	428c      	cmp	r4, r1
100051b2:	d202      	bcs.n	100051ba <tu_fifo_count+0x16>
100051b4:	8953      	ldrh	r3, [r2, #10]
100051b6:	1ac0      	subs	r0, r0, r3
100051b8:	b280      	uxth	r0, r0
}
100051ba:	bd10      	pop	{r4, pc}

100051bc <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
100051bc:	b510      	push	{r4, lr}
  return _tu_fifo_remaining(f, f->wr_idx, f->rd_idx);
100051be:	89c4      	ldrh	r4, [r0, #14]
100051c0:	8a01      	ldrh	r1, [r0, #16]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
100051c2:	8883      	ldrh	r3, [r0, #4]
  uint16_t cnt = wAbs-rAbs;
100051c4:	1a62      	subs	r2, r4, r1
100051c6:	b292      	uxth	r2, r2
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
100051c8:	428c      	cmp	r4, r1
100051ca:	d202      	bcs.n	100051d2 <tu_fifo_remaining+0x16>
100051cc:	8940      	ldrh	r0, [r0, #10]
100051ce:	1a12      	subs	r2, r2, r0
100051d0:	b292      	uxth	r2, r2
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
100051d2:	1a98      	subs	r0, r3, r2
  return _tu_fifo_remaining(f, f->wr_idx, f->rd_idx);
100051d4:	b280      	uxth	r0, r0
}
100051d6:	bd10      	pop	{r4, pc}

100051d8 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
100051d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100051da:	0004      	movs	r4, r0
  if (f->mutex)
100051dc:	6940      	ldr	r0, [r0, #20]
{
100051de:	000e      	movs	r6, r1
  if (f->mutex)
100051e0:	2800      	cmp	r0, #0
100051e2:	d003      	beq.n	100051ec <tu_fifo_read+0x14>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
100051e4:	2101      	movs	r1, #1
100051e6:	4249      	negs	r1, r1
100051e8:	f003 fd4a 	bl	10008c80 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);                                          // TODO: Here we may distinguish for read and write pointer mutexes!

  // Peek the data
  bool ret = _tu_fifo_peek_at(f, 0, buffer, f->wr_idx, f->rd_idx);    // f->rd_idx might get modified in case of an overflow so we can not use a local variable
100051ec:	89e1      	ldrh	r1, [r4, #14]
100051ee:	8a22      	ldrh	r2, [r4, #16]
100051f0:	b28f      	uxth	r7, r1
  uint16_t cnt = wAbs-rAbs;
100051f2:	1a8d      	subs	r5, r1, r2
  bool ret = _tu_fifo_peek_at(f, 0, buffer, f->wr_idx, f->rd_idx);    // f->rd_idx might get modified in case of an overflow so we can not use a local variable
100051f4:	b293      	uxth	r3, r2
  uint16_t cnt = wAbs-rAbs;
100051f6:	b2ad      	uxth	r5, r5
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
100051f8:	4291      	cmp	r1, r2
100051fa:	d202      	bcs.n	10005202 <tu_fifo_read+0x2a>
100051fc:	8962      	ldrh	r2, [r4, #10]
100051fe:	1aad      	subs	r5, r5, r2
10005200:	b2ad      	uxth	r5, r5
  if (cnt > f->depth)
10005202:	88a2      	ldrh	r2, [r4, #4]
  if ((p < p - offset) || (p - offset > f->max_pointer_idx))
10005204:	89a1      	ldrh	r1, [r4, #12]
  if (cnt > f->depth)
10005206:	42aa      	cmp	r2, r5
10005208:	d205      	bcs.n	10005216 <tu_fifo_read+0x3e>
  if ((p < p - offset) || (p - offset > f->max_pointer_idx))
1000520a:	1ab8      	subs	r0, r7, r2
1000520c:	4288      	cmp	r0, r1
1000520e:	dc2b      	bgt.n	10005268 <tu_fifo_read+0x90>
    p -= offset;
10005210:	b280      	uxth	r0, r0
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
10005212:	0015      	movs	r5, r2
10005214:	8220      	strh	r0, [r4, #16]
  if (cnt == 0 || offset >= cnt) return false;
10005216:	2d00      	cmp	r5, #0
10005218:	d02e      	beq.n	10005278 <tu_fifo_read+0xa0>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
1000521a:	428b      	cmp	r3, r1
1000521c:	d906      	bls.n	1000522c <tu_fifo_read+0x54>
    p = (p + offset) + f->non_used_index_space;
1000521e:	8961      	ldrh	r1, [r4, #10]
10005220:	185b      	adds	r3, r3, r1
10005222:	b29b      	uxth	r3, r3
  while ( idx >= depth) idx -= depth;
10005224:	429a      	cmp	r2, r3
10005226:	d803      	bhi.n	10005230 <tu_fifo_read+0x58>
10005228:	1a9b      	subs	r3, r3, r2
1000522a:	b29b      	uxth	r3, r3
1000522c:	429a      	cmp	r2, r3
1000522e:	d9fb      	bls.n	10005228 <tu_fifo_read+0x50>
  memcpy(p_buffer, f->buffer + (rRel * f->item_size), f->item_size);
10005230:	88e2      	ldrh	r2, [r4, #6]
10005232:	6821      	ldr	r1, [r4, #0]
10005234:	4353      	muls	r3, r2
10005236:	0030      	movs	r0, r6
10005238:	18c9      	adds	r1, r1, r3
1000523a:	f7fb ff59 	bl	100010f0 <__wrap___aeabi_memcpy>
  return true;
1000523e:	2501      	movs	r5, #1
10005240:	2001      	movs	r0, #1
10005242:	2601      	movs	r6, #1
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10005244:	89a1      	ldrh	r1, [r4, #12]

  // Advance pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
10005246:	8a22      	ldrh	r2, [r4, #16]
10005248:	b293      	uxth	r3, r2
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
1000524a:	1812      	adds	r2, r2, r0
1000524c:	428a      	cmp	r2, r1
1000524e:	dd10      	ble.n	10005272 <tu_fifo_read+0x9a>
    p = (p + offset) + f->non_used_index_space;
10005250:	8962      	ldrh	r2, [r4, #10]
10005252:	189b      	adds	r3, r3, r2
10005254:	18ed      	adds	r5, r5, r3
10005256:	b2ad      	uxth	r5, r5
  if (f->mutex)
10005258:	6960      	ldr	r0, [r4, #20]
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
1000525a:	8225      	strh	r5, [r4, #16]
  if (f->mutex)
1000525c:	2800      	cmp	r0, #0
1000525e:	d001      	beq.n	10005264 <tu_fifo_read+0x8c>
    mutex_exit(mutex_hdl);
10005260:	f003 fcee 	bl	10008c40 <__mutex_exit_veneer>

  tu_fifo_unlock(f);
  return ret;
}
10005264:	0030      	movs	r0, r6
10005266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    p = (p - offset) - f->non_used_index_space;
10005268:	8960      	ldrh	r0, [r4, #10]
1000526a:	1810      	adds	r0, r2, r0
1000526c:	1a38      	subs	r0, r7, r0
1000526e:	b280      	uxth	r0, r0
10005270:	e7cf      	b.n	10005212 <tu_fifo_read+0x3a>
    p += offset;
10005272:	195d      	adds	r5, r3, r5
10005274:	b2ad      	uxth	r5, r5
10005276:	e7ef      	b.n	10005258 <tu_fifo_read+0x80>
10005278:	2000      	movs	r0, #0
  if (cnt == 0 || offset >= cnt) return false;
1000527a:	2600      	movs	r6, #0
1000527c:	e7e3      	b.n	10005246 <tu_fifo_read+0x6e>
1000527e:	46c0      	nop			; (mov r8, r8)

10005280 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t count)
{
10005280:	b5f0      	push	{r4, r5, r6, r7, lr}
10005282:	46c6      	mov	lr, r8
10005284:	0004      	movs	r4, r0
  if (f->mutex)
10005286:	6940      	ldr	r0, [r0, #20]
{
10005288:	4688      	mov	r8, r1
1000528a:	0017      	movs	r7, r2
1000528c:	b500      	push	{lr}
  if (f->mutex)
1000528e:	2800      	cmp	r0, #0
10005290:	d003      	beq.n	1000529a <tu_fifo_read_n+0x1a>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10005292:	2101      	movs	r1, #1
10005294:	4249      	negs	r1, r1
10005296:	f003 fcf3 	bl	10008c80 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);                                          // TODO: Here we may distinguish for read and write pointer mutexes!

  // Peek the data
  count = _tu_fifo_peek_at_n(f, 0, buffer, count, f->wr_idx, f->rd_idx);        // f->rd_idx might get modified in case of an overflow so we can not use a local variable
1000529a:	89e0      	ldrh	r0, [r4, #14]
1000529c:	8a21      	ldrh	r1, [r4, #16]
1000529e:	b282      	uxth	r2, r0
  uint16_t cnt = wAbs-rAbs;
100052a0:	1a46      	subs	r6, r0, r1
  count = _tu_fifo_peek_at_n(f, 0, buffer, count, f->wr_idx, f->rd_idx);        // f->rd_idx might get modified in case of an overflow so we can not use a local variable
100052a2:	b28b      	uxth	r3, r1
  uint16_t cnt = wAbs-rAbs;
100052a4:	b2b6      	uxth	r6, r6
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
100052a6:	4288      	cmp	r0, r1
100052a8:	d202      	bcs.n	100052b0 <tu_fifo_read_n+0x30>
100052aa:	8961      	ldrh	r1, [r4, #10]
100052ac:	1a76      	subs	r6, r6, r1
100052ae:	b2b6      	uxth	r6, r6
  if (cnt > f->depth)
100052b0:	88a5      	ldrh	r5, [r4, #4]
  if ((p < p - offset) || (p - offset > f->max_pointer_idx))
100052b2:	89a0      	ldrh	r0, [r4, #12]
  if (cnt > f->depth)
100052b4:	42b5      	cmp	r5, r6
100052b6:	d207      	bcs.n	100052c8 <tu_fifo_read_n+0x48>
  if ((p < p - offset) || (p - offset > f->max_pointer_idx))
100052b8:	1b53      	subs	r3, r2, r5
100052ba:	4283      	cmp	r3, r0
100052bc:	dc2c      	bgt.n	10005318 <tu_fifo_read_n+0x98>
    p -= offset;
100052be:	b29b      	uxth	r3, r3
    rAbs = f->rd_idx;
100052c0:	002e      	movs	r6, r5
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
100052c2:	8223      	strh	r3, [r4, #16]
    rAbs = f->rd_idx;
100052c4:	8a23      	ldrh	r3, [r4, #16]
100052c6:	b29b      	uxth	r3, r3
  if (cnt == 0 || offset >= cnt) return 0;
100052c8:	2e00      	cmp	r6, #0
100052ca:	d02c      	beq.n	10005326 <tu_fifo_read_n+0xa6>
  if (cnt < n) {
100052cc:	1c3a      	adds	r2, r7, #0
100052ce:	42b7      	cmp	r7, r6
100052d0:	d827      	bhi.n	10005322 <tu_fifo_read_n+0xa2>
100052d2:	b296      	uxth	r6, r2
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
100052d4:	4283      	cmp	r3, r0
100052d6:	d902      	bls.n	100052de <tu_fifo_read_n+0x5e>
    p = (p + offset) + f->non_used_index_space;
100052d8:	8961      	ldrh	r1, [r4, #10]
100052da:	185b      	adds	r3, r3, r1
100052dc:	b29b      	uxth	r3, r3
  while ( idx >= depth) idx -= depth;
100052de:	429d      	cmp	r5, r3
100052e0:	d803      	bhi.n	100052ea <tu_fifo_read_n+0x6a>
100052e2:	1b5b      	subs	r3, r3, r5
100052e4:	b29b      	uxth	r3, r3
100052e6:	429d      	cmp	r5, r3
100052e8:	d9fb      	bls.n	100052e2 <tu_fifo_read_n+0x62>
  if(rRel + n <= f->depth)       // Linear mode only
100052ea:	199a      	adds	r2, r3, r6
100052ec:	0037      	movs	r7, r6
    memcpy(p_buffer, f->buffer + (rRel * f->item_size), n*f->item_size);
100052ee:	88e1      	ldrh	r1, [r4, #6]
  if(rRel + n <= f->depth)       // Linear mode only
100052f0:	42aa      	cmp	r2, r5
100052f2:	dc2c      	bgt.n	1000534e <tu_fifo_read_n+0xce>
    memcpy(p_buffer, f->buffer + (rRel * f->item_size), n*f->item_size);
100052f4:	000a      	movs	r2, r1
100052f6:	4359      	muls	r1, r3
100052f8:	6823      	ldr	r3, [r4, #0]
100052fa:	4372      	muls	r2, r6
100052fc:	469c      	mov	ip, r3
100052fe:	4640      	mov	r0, r8
10005300:	4461      	add	r1, ip
10005302:	f7fb fef5 	bl	100010f0 <__wrap___aeabi_memcpy>

  // Advance read pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, count);
10005306:	8a22      	ldrh	r2, [r4, #16]
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10005308:	89a0      	ldrh	r0, [r4, #12]
  f->rd_idx = advance_pointer(f, f->rd_idx, count);
1000530a:	b293      	uxth	r3, r2
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
1000530c:	19d2      	adds	r2, r2, r7
1000530e:	4282      	cmp	r2, r0
10005310:	dc0f      	bgt.n	10005332 <tu_fifo_read_n+0xb2>
    p += offset;
10005312:	199b      	adds	r3, r3, r6
10005314:	b29b      	uxth	r3, r3
10005316:	e010      	b.n	1000533a <tu_fifo_read_n+0xba>
    p = (p - offset) - f->non_used_index_space;
10005318:	8963      	ldrh	r3, [r4, #10]
1000531a:	18eb      	adds	r3, r5, r3
1000531c:	1ad3      	subs	r3, r2, r3
1000531e:	b29b      	uxth	r3, r3
10005320:	e7ce      	b.n	100052c0 <tu_fifo_read_n+0x40>
10005322:	1c32      	adds	r2, r6, #0
10005324:	e7d5      	b.n	100052d2 <tu_fifo_read_n+0x52>
10005326:	2700      	movs	r7, #0
  f->rd_idx = advance_pointer(f, f->rd_idx, count);
10005328:	8a22      	ldrh	r2, [r4, #16]
1000532a:	b293      	uxth	r3, r2
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
1000532c:	19d2      	adds	r2, r2, r7
1000532e:	4282      	cmp	r2, r0
10005330:	ddef      	ble.n	10005312 <tu_fifo_read_n+0x92>
    p = (p + offset) + f->non_used_index_space;
10005332:	8962      	ldrh	r2, [r4, #10]
10005334:	189b      	adds	r3, r3, r2
10005336:	18f3      	adds	r3, r6, r3
10005338:	b29b      	uxth	r3, r3
  if (f->mutex)
1000533a:	6960      	ldr	r0, [r4, #20]
  f->rd_idx = advance_pointer(f, f->rd_idx, count);
1000533c:	8223      	strh	r3, [r4, #16]
  if (f->mutex)
1000533e:	2800      	cmp	r0, #0
10005340:	d001      	beq.n	10005346 <tu_fifo_read_n+0xc6>
    mutex_exit(mutex_hdl);
10005342:	f003 fc7d 	bl	10008c40 <__mutex_exit_veneer>

  tu_fifo_unlock(f);
  return count;
}
10005346:	0030      	movs	r0, r6
10005348:	bc80      	pop	{r7}
1000534a:	46b8      	mov	r8, r7
1000534c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint16_t nLin = f->depth - rRel;
1000534e:	1aed      	subs	r5, r5, r3
    memcpy(p_buffer, f->buffer + (rRel * f->item_size), nLin*f->item_size);
10005350:	b2ad      	uxth	r5, r5
10005352:	002a      	movs	r2, r5
10005354:	434a      	muls	r2, r1
10005356:	4359      	muls	r1, r3
10005358:	6823      	ldr	r3, [r4, #0]
1000535a:	4640      	mov	r0, r8
1000535c:	469c      	mov	ip, r3
1000535e:	4461      	add	r1, ip
10005360:	f7fb fec6 	bl	100010f0 <__wrap___aeabi_memcpy>
    memcpy(p_buffer + nLin*f->item_size, f->buffer, (n - nLin) * f->item_size);
10005364:	88e3      	ldrh	r3, [r4, #6]
10005366:	1b72      	subs	r2, r6, r5
10005368:	0018      	movs	r0, r3
1000536a:	4368      	muls	r0, r5
1000536c:	435a      	muls	r2, r3
1000536e:	6821      	ldr	r1, [r4, #0]
10005370:	4440      	add	r0, r8
10005372:	f7fb febd 	bl	100010f0 <__wrap___aeabi_memcpy>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10005376:	89a0      	ldrh	r0, [r4, #12]
10005378:	e7d6      	b.n	10005328 <tu_fifo_read_n+0xa8>
1000537a:	46c0      	nop			; (mov r8, r8)

1000537c <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
1000537c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000537e:	0004      	movs	r4, r0
  if (f->mutex)
10005380:	6940      	ldr	r0, [r0, #20]
{
10005382:	000e      	movs	r6, r1
  if (f->mutex)
10005384:	2800      	cmp	r0, #0
10005386:	d003      	beq.n	10005390 <tu_fifo_write+0x14>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10005388:	2101      	movs	r1, #1
1000538a:	4249      	negs	r1, r1
1000538c:	f003 fc78 	bl	10008c80 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);

  uint16_t w = f->wr_idx;
10005390:	89e2      	ldrh	r2, [r4, #14]

  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable ) return false;
10005392:	8a21      	ldrh	r1, [r4, #16]
  uint16_t w = f->wr_idx;
10005394:	b295      	uxth	r5, r2
  uint16_t cnt = wAbs-rAbs;
10005396:	1a53      	subs	r3, r2, r1
10005398:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
1000539a:	4291      	cmp	r1, r2
1000539c:	d902      	bls.n	100053a4 <tu_fifo_write+0x28>
1000539e:	8962      	ldrh	r2, [r4, #10]
100053a0:	1a9b      	subs	r3, r3, r2
100053a2:	b29b      	uxth	r3, r3
  return (_tu_fifo_count(f, wAbs, rAbs) == f->depth);
100053a4:	88a2      	ldrh	r2, [r4, #4]
  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable ) return false;
100053a6:	429a      	cmp	r2, r3
100053a8:	d026      	beq.n	100053f8 <tu_fifo_write+0x7c>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
100053aa:	89a1      	ldrh	r1, [r4, #12]
100053ac:	002b      	movs	r3, r5
100053ae:	42a9      	cmp	r1, r5
100053b0:	d206      	bcs.n	100053c0 <tu_fifo_write+0x44>
    p = (p + offset) + f->non_used_index_space;
100053b2:	8963      	ldrh	r3, [r4, #10]
100053b4:	18eb      	adds	r3, r5, r3
100053b6:	b29b      	uxth	r3, r3
  while ( idx >= depth) idx -= depth;
100053b8:	429a      	cmp	r2, r3
100053ba:	d803      	bhi.n	100053c4 <tu_fifo_write+0x48>
100053bc:	1a9b      	subs	r3, r3, r2
100053be:	b29b      	uxth	r3, r3
100053c0:	429a      	cmp	r2, r3
100053c2:	d9fb      	bls.n	100053bc <tu_fifo_write+0x40>
  memcpy(f->buffer + (wRel * f->item_size), data, f->item_size);
100053c4:	88e2      	ldrh	r2, [r4, #6]
100053c6:	6821      	ldr	r1, [r4, #0]
100053c8:	4353      	muls	r3, r2
100053ca:	18c8      	adds	r0, r1, r3
100053cc:	0031      	movs	r1, r6
100053ce:	f7fb fe8f 	bl	100010f0 <__wrap___aeabi_memcpy>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
100053d2:	89a3      	ldrh	r3, [r4, #12]
100053d4:	42ab      	cmp	r3, r5
100053d6:	d90a      	bls.n	100053ee <tu_fifo_write+0x72>
    p += offset;
100053d8:	3501      	adds	r5, #1
100053da:	b2ad      	uxth	r5, r5
  if (f->mutex)
100053dc:	6960      	ldr	r0, [r4, #20]
  // Advance pointer
  f->wr_idx = advance_pointer(f, w, 1);

  tu_fifo_unlock(f);

  return true;
100053de:	2701      	movs	r7, #1
  f->wr_idx = advance_pointer(f, w, 1);
100053e0:	81e5      	strh	r5, [r4, #14]
  if (f->mutex)
100053e2:	2800      	cmp	r0, #0
100053e4:	d001      	beq.n	100053ea <tu_fifo_write+0x6e>
    mutex_exit(mutex_hdl);
100053e6:	f003 fc2b 	bl	10008c40 <__mutex_exit_veneer>
}
100053ea:	0038      	movs	r0, r7
100053ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    p = (p + offset) + f->non_used_index_space;
100053ee:	8963      	ldrh	r3, [r4, #10]
100053f0:	18ed      	adds	r5, r5, r3
100053f2:	3501      	adds	r5, #1
100053f4:	b2ad      	uxth	r5, r5
100053f6:	e7f1      	b.n	100053dc <tu_fifo_write+0x60>
  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable ) return false;
100053f8:	7a27      	ldrb	r7, [r4, #8]
100053fa:	2f00      	cmp	r7, #0
100053fc:	d1d5      	bne.n	100053aa <tu_fifo_write+0x2e>
100053fe:	e7f4      	b.n	100053ea <tu_fifo_write+0x6e>

10005400 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t count)
{
10005400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10005402:	4647      	mov	r7, r8
10005404:	46ce      	mov	lr, r9
10005406:	0004      	movs	r4, r0
10005408:	b580      	push	{r7, lr}
1000540a:	0015      	movs	r5, r2
1000540c:	000f      	movs	r7, r1
  if ( count == 0 ) return 0;
1000540e:	2a00      	cmp	r2, #0
10005410:	d052      	beq.n	100054b8 <tu_fifo_write_n+0xb8>
  if (f->mutex)
10005412:	6940      	ldr	r0, [r0, #20]
10005414:	2800      	cmp	r0, #0
10005416:	d003      	beq.n	10005420 <tu_fifo_write_n+0x20>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10005418:	2101      	movs	r1, #1
1000541a:	4249      	negs	r1, r1
1000541c:	f003 fc30 	bl	10008c80 <__mutex_enter_timeout_ms_veneer>

  tu_fifo_lock(f);

  uint16_t w = f->wr_idx, r = f->rd_idx;
10005420:	89e6      	ldrh	r6, [r4, #14]
  uint8_t const* buf8 = (uint8_t const*) data;

  if (!f->overwritable)
10005422:	7a23      	ldrb	r3, [r4, #8]
  uint16_t w = f->wr_idx, r = f->rd_idx;
10005424:	8a20      	ldrh	r0, [r4, #16]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
10005426:	88a1      	ldrh	r1, [r4, #4]
  uint16_t w = f->wr_idx, r = f->rd_idx;
10005428:	b2b6      	uxth	r6, r6
1000542a:	b280      	uxth	r0, r0
  if (!f->overwritable)
1000542c:	2b00      	cmp	r3, #0
1000542e:	d138      	bne.n	100054a2 <tu_fifo_write_n+0xa2>
  uint16_t cnt = wAbs-rAbs;
10005430:	1a33      	subs	r3, r6, r0
10005432:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
10005434:	4286      	cmp	r6, r0
10005436:	d202      	bcs.n	1000543e <tu_fifo_write_n+0x3e>
10005438:	8962      	ldrh	r2, [r4, #10]
1000543a:	1a9b      	subs	r3, r3, r2
1000543c:	b29b      	uxth	r3, r3
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
1000543e:	1acb      	subs	r3, r1, r3
static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
10005440:	1c1a      	adds	r2, r3, #0
10005442:	b29b      	uxth	r3, r3
10005444:	42ab      	cmp	r3, r5
10005446:	d852      	bhi.n	100054ee <tu_fifo_write_n+0xee>
10005448:	b293      	uxth	r3, r2
1000544a:	4698      	mov	r8, r3
  if(wRel + n <= f->depth)  // Linear mode only
1000544c:	001d      	movs	r5, r3
    count = tu_min16(count, _tu_fifo_remaining(f, w, r));
  }
  else if (count > f->depth)
  {
    // Only copy last part
    buf8 = buf8 + (count - f->depth) * f->item_size;
1000544e:	88e2      	ldrh	r2, [r4, #6]
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10005450:	89a0      	ldrh	r0, [r4, #12]
  uint16_t w = f->wr_idx, r = f->rd_idx;
10005452:	0033      	movs	r3, r6
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10005454:	4286      	cmp	r6, r0
10005456:	dd05      	ble.n	10005464 <tu_fifo_write_n+0x64>
    p = (p + offset) + f->non_used_index_space;
10005458:	8963      	ldrh	r3, [r4, #10]
1000545a:	18f3      	adds	r3, r6, r3
1000545c:	b29b      	uxth	r3, r3
  while ( idx >= depth) idx -= depth;
1000545e:	e001      	b.n	10005464 <tu_fifo_write_n+0x64>
10005460:	1a5b      	subs	r3, r3, r1
10005462:	b29b      	uxth	r3, r3
10005464:	428b      	cmp	r3, r1
10005466:	d2fb      	bcs.n	10005460 <tu_fifo_write_n+0x60>
  if(wRel + n <= f->depth)  // Linear mode only
10005468:	1958      	adds	r0, r3, r5
1000546a:	4288      	cmp	r0, r1
1000546c:	dc2a      	bgt.n	100054c4 <tu_fifo_write_n+0xc4>
    memcpy(f->buffer + (wRel * f->item_size), data, n*f->item_size);
1000546e:	4353      	muls	r3, r2
10005470:	6821      	ldr	r1, [r4, #0]
10005472:	436a      	muls	r2, r5
10005474:	18c8      	adds	r0, r1, r3
10005476:	0039      	movs	r1, r7
10005478:	f7fb fe3a 	bl	100010f0 <__wrap___aeabi_memcpy>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
1000547c:	89a3      	ldrh	r3, [r4, #12]
1000547e:	1975      	adds	r5, r6, r5
10005480:	429d      	cmp	r5, r3
10005482:	dd1c      	ble.n	100054be <tu_fifo_write_n+0xbe>
    p = (p + offset) + f->non_used_index_space;
10005484:	8963      	ldrh	r3, [r4, #10]
10005486:	18f6      	adds	r6, r6, r3
10005488:	4446      	add	r6, r8
1000548a:	b2b6      	uxth	r6, r6
  if (f->mutex)
1000548c:	6960      	ldr	r0, [r4, #20]

  // Write data
  _ff_push_n(f, buf8, count, wRel);

  // Advance pointer
  f->wr_idx = advance_pointer(f, w, count);
1000548e:	81e6      	strh	r6, [r4, #14]
  if (f->mutex)
10005490:	2800      	cmp	r0, #0
10005492:	d001      	beq.n	10005498 <tu_fifo_write_n+0x98>
    mutex_exit(mutex_hdl);
10005494:	f003 fbd4 	bl	10008c40 <__mutex_exit_veneer>

  tu_fifo_unlock(f);

  return count;
}
10005498:	4640      	mov	r0, r8
1000549a:	bcc0      	pop	{r6, r7}
1000549c:	46b9      	mov	r9, r7
1000549e:	46b0      	mov	r8, r6
100054a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(wRel + n <= f->depth)  // Linear mode only
100054a2:	46a8      	mov	r8, r5
    buf8 = buf8 + (count - f->depth) * f->item_size;
100054a4:	88e2      	ldrh	r2, [r4, #6]
  else if (count > f->depth)
100054a6:	42a9      	cmp	r1, r5
100054a8:	d2d2      	bcs.n	10005450 <tu_fifo_write_n+0x50>
    buf8 = buf8 + (count - f->depth) * f->item_size;
100054aa:	1a6d      	subs	r5, r5, r1
100054ac:	4355      	muls	r5, r2
    f->wr_idx = r;
100054ae:	4688      	mov	r8, r1
    buf8 = buf8 + (count - f->depth) * f->item_size;
100054b0:	197f      	adds	r7, r7, r5
    f->wr_idx = r;
100054b2:	81e0      	strh	r0, [r4, #14]
100054b4:	000d      	movs	r5, r1
100054b6:	e7cb      	b.n	10005450 <tu_fifo_write_n+0x50>
  if ( count == 0 ) return 0;
100054b8:	2300      	movs	r3, #0
100054ba:	4698      	mov	r8, r3
100054bc:	e7ec      	b.n	10005498 <tu_fifo_write_n+0x98>
    p += offset;
100054be:	4446      	add	r6, r8
100054c0:	b2b6      	uxth	r6, r6
100054c2:	e7e3      	b.n	1000548c <tu_fifo_write_n+0x8c>
    uint16_t nLin = f->depth - wRel;
100054c4:	1ac9      	subs	r1, r1, r3
    memcpy(f->buffer + (wRel * f->item_size), data, nLin*f->item_size);
100054c6:	b289      	uxth	r1, r1
100054c8:	4689      	mov	r9, r1
100054ca:	4353      	muls	r3, r2
100054cc:	6821      	ldr	r1, [r4, #0]
100054ce:	18c8      	adds	r0, r1, r3
100054d0:	464b      	mov	r3, r9
100054d2:	0039      	movs	r1, r7
100054d4:	435a      	muls	r2, r3
100054d6:	f7fb fe0b 	bl	100010f0 <__wrap___aeabi_memcpy>
    memcpy(f->buffer, data + nLin*f->item_size, (n - nLin) * f->item_size);
100054da:	464b      	mov	r3, r9
100054dc:	88e1      	ldrh	r1, [r4, #6]
100054de:	1aea      	subs	r2, r5, r3
100054e0:	434a      	muls	r2, r1
100054e2:	4359      	muls	r1, r3
100054e4:	6820      	ldr	r0, [r4, #0]
100054e6:	1879      	adds	r1, r7, r1
100054e8:	f7fb fe02 	bl	100010f0 <__wrap___aeabi_memcpy>
100054ec:	e7c6      	b.n	1000547c <tu_fifo_write_n+0x7c>
100054ee:	1c2a      	adds	r2, r5, #0
100054f0:	b293      	uxth	r3, r2
100054f2:	4698      	mov	r8, r3
  if(wRel + n <= f->depth)  // Linear mode only
100054f4:	001d      	movs	r5, r3
    buf8 = buf8 + (count - f->depth) * f->item_size;
100054f6:	88e2      	ldrh	r2, [r4, #6]
100054f8:	e7aa      	b.n	10005450 <tu_fifo_write_n+0x50>
100054fa:	46c0      	nop			; (mov r8, r8)

100054fc <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
100054fc:	b510      	push	{r4, lr}
100054fe:	0004      	movs	r4, r0
  if (f->mutex)
10005500:	6940      	ldr	r0, [r0, #20]
10005502:	2800      	cmp	r0, #0
10005504:	d00d      	beq.n	10005522 <tu_fifo_clear+0x26>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10005506:	2101      	movs	r1, #1
10005508:	4249      	negs	r1, r1
1000550a:	f003 fbb9 	bl	10008c80 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);
  f->rd_idx = f->wr_idx = 0;
1000550e:	2300      	movs	r3, #0
  if (f->mutex)
10005510:	6960      	ldr	r0, [r4, #20]
  f->rd_idx = f->wr_idx = 0;
10005512:	81e3      	strh	r3, [r4, #14]
10005514:	8223      	strh	r3, [r4, #16]
  if (f->mutex)
10005516:	2800      	cmp	r0, #0
10005518:	d001      	beq.n	1000551e <tu_fifo_clear+0x22>
    mutex_exit(mutex_hdl);
1000551a:	f003 fb91 	bl	10008c40 <__mutex_exit_veneer>
  tu_fifo_unlock(f);

  return true;
}
1000551e:	2001      	movs	r0, #1
10005520:	bd10      	pop	{r4, pc}
  f->rd_idx = f->wr_idx = 0;
10005522:	81e0      	strh	r0, [r4, #14]
10005524:	8220      	strh	r0, [r4, #16]
  return true;
10005526:	e7fa      	b.n	1000551e <tu_fifo_clear+0x22>

10005528 <tud_mounted>:
  return (tusb_speed_t) _usbd_dev.speed;
}

bool tud_mounted(void)
{
  return _usbd_dev.cfg_num ? 1 : 0;
10005528:	4b02      	ldr	r3, [pc, #8]	; (10005534 <tud_mounted+0xc>)
1000552a:	7858      	ldrb	r0, [r3, #1]
1000552c:	1e43      	subs	r3, r0, #1
1000552e:	4198      	sbcs	r0, r3
10005530:	b2c0      	uxtb	r0, r0
}
10005532:	4770      	bx	lr
10005534:	20023244 	.word	0x20023244

10005538 <tud_suspended>:

bool tud_suspended(void)
{
  return _usbd_dev.suspended;
10005538:	4b02      	ldr	r3, [pc, #8]	; (10005544 <tud_suspended+0xc>)
1000553a:	7818      	ldrb	r0, [r3, #0]
1000553c:	0740      	lsls	r0, r0, #29
1000553e:	0fc0      	lsrs	r0, r0, #31
}
10005540:	4770      	bx	lr
10005542:	46c0      	nop			; (mov r8, r8)
10005544:	20023244 	.word	0x20023244

10005548 <tud_init>:

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_init (void)
{
10005548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  TU_LOG2("USBD init\r\n");

  tu_varclr(&_usbd_dev);
1000554a:	2237      	movs	r2, #55	; 0x37
1000554c:	2100      	movs	r1, #0
1000554e:	4821      	ldr	r0, [pc, #132]	; (100055d4 <tud_init+0x8c>)
10005550:	f7fb fdc8 	bl	100010e4 <__wrap_memset>
    mutex_init(mdef);
10005554:	4c20      	ldr	r4, [pc, #128]	; (100055d8 <tud_init+0x90>)
10005556:	0020      	movs	r0, r4
10005558:	f7fc fbb6 	bl	10001cc8 <mutex_init>

#if CFG_TUSB_OS != OPT_OS_NONE
  // Init device mutex
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
1000555c:	4b1f      	ldr	r3, [pc, #124]	; (100055dc <tud_init+0x94>)
1000555e:	601c      	str	r4, [r3, #0]
    critical_section_exit(&qhdl->critsec);
}

static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
  critical_section_init(&qdef->critsec);
10005560:	4c1f      	ldr	r4, [pc, #124]	; (100055e0 <tud_init+0x98>)
10005562:	0020      	movs	r0, r4
10005564:	3018      	adds	r0, #24
10005566:	f7fc f893 	bl	10001690 <critical_section_init>
  tu_fifo_clear(&qdef->ff);
1000556a:	0020      	movs	r0, r4
1000556c:	f7ff ffc6 	bl	100054fc <tu_fifo_clear>
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
10005570:	4b1c      	ldr	r3, [pc, #112]	; (100055e4 <tud_init+0x9c>)
  TU_ASSERT(_usbd_q);

  // Get application driver if available
  if ( usbd_app_driver_get_cb )
10005572:	4e1d      	ldr	r6, [pc, #116]	; (100055e8 <tud_init+0xa0>)
  {
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
10005574:	4d1d      	ldr	r5, [pc, #116]	; (100055ec <tud_init+0xa4>)
  _usbd_q = osal_queue_create(&_usbd_qdef);
10005576:	601c      	str	r4, [r3, #0]
  if ( usbd_app_driver_get_cb )
10005578:	2e00      	cmp	r6, #0
1000557a:	d004      	beq.n	10005586 <tud_init+0x3e>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
1000557c:	0028      	movs	r0, r5
1000557e:	e000      	b.n	10005582 <tud_init+0x3a>
10005580:	bf00      	nop
10005582:	4b1b      	ldr	r3, [pc, #108]	; (100055f0 <tud_init+0xa8>)
10005584:	6018      	str	r0, [r3, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
10005586:	2400      	movs	r4, #0
10005588:	782b      	ldrb	r3, [r5, #0]
1000558a:	2e00      	cmp	r6, #0
1000558c:	d019      	beq.n	100055c2 <tud_init+0x7a>
1000558e:	4e19      	ldr	r6, [pc, #100]	; (100055f4 <tud_init+0xac>)
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005590:	4f17      	ldr	r7, [pc, #92]	; (100055f0 <tud_init+0xa8>)
10005592:	429c      	cmp	r4, r3
10005594:	d30f      	bcc.n	100055b6 <tud_init+0x6e>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10005596:	d119      	bne.n	100055cc <tud_init+0x84>
10005598:	0033      	movs	r3, r6
  {
    usbd_class_driver_t const * driver = get_driver(i);
    TU_LOG2("%s init\r\n", driver->name);
    driver->init();
1000559a:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
1000559c:	3401      	adds	r4, #1
1000559e:	782b      	ldrb	r3, [r5, #0]
100055a0:	b2e4      	uxtb	r4, r4
100055a2:	42a3      	cmp	r3, r4
100055a4:	d2f5      	bcs.n	10005592 <tud_init+0x4a>
  }

  // Init device controller driver
  dcd_init(TUD_OPT_RHPORT);
100055a6:	2000      	movs	r0, #0
100055a8:	f000 ff72 	bl	10006490 <dcd_init>
  dcd_int_enable(TUD_OPT_RHPORT);
100055ac:	2000      	movs	r0, #0
100055ae:	f000 ff49 	bl	10006444 <dcd_int_enable>

  return true;
}
100055b2:	2001      	movs	r0, #1
100055b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    driver->init();
100055b6:	00e3      	lsls	r3, r4, #3
100055b8:	683a      	ldr	r2, [r7, #0]
100055ba:	1b1b      	subs	r3, r3, r4
100055bc:	009b      	lsls	r3, r3, #2
100055be:	589b      	ldr	r3, [r3, r2]
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
100055c0:	e7eb      	b.n	1000559a <tud_init+0x52>
    driver->init();
100055c2:	f7ff fbef 	bl	10004da4 <cdcd_init>
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
100055c6:	782b      	ldrb	r3, [r5, #0]
100055c8:	2b00      	cmp	r3, #0
100055ca:	d0ec      	beq.n	100055a6 <tud_init+0x5e>
    driver->init();
100055cc:	2300      	movs	r3, #0
100055ce:	681b      	ldr	r3, [r3, #0]
100055d0:	deff      	udf	#255	; 0xff
100055d2:	46c0      	nop			; (mov r8, r8)
100055d4:	20023244 	.word	0x20023244
100055d8:	200231fc 	.word	0x200231fc
100055dc:	2002327c 	.word	0x2002327c
100055e0:	20002730 	.word	0x20002730
100055e4:	20023280 	.word	0x20023280
100055e8:	00000000 	.word	0x00000000
100055ec:	20023b85 	.word	0x20023b85
100055f0:	20022f14 	.word	0x20022f14
100055f4:	10004da5 	.word	0x10004da5

100055f8 <tud_task>:
      }
    }
    @endcode
 */
void tud_task (void)
{
100055f8:	b5f0      	push	{r4, r5, r6, r7, lr}
100055fa:	46de      	mov	lr, fp
100055fc:	4657      	mov	r7, sl
100055fe:	464e      	mov	r6, r9
10005600:	4645      	mov	r5, r8
10005602:	b5e0      	push	{r5, r6, r7, lr}
10005604:	b08b      	sub	sp, #44	; 0x2c
  // Skip if stack is not initialized
  if ( !tusb_inited() ) return;
10005606:	f001 fa05 	bl	10006a14 <tusb_inited>
1000560a:	2800      	cmp	r0, #0
1000560c:	d100      	bne.n	10005610 <tud_task+0x18>
1000560e:	e123      	b.n	10005858 <tud_task+0x260>
10005610:	4bb3      	ldr	r3, [pc, #716]	; (100058e0 <tud_task+0x2e8>)
10005612:	af07      	add	r7, sp, #28
10005614:	469a      	mov	sl, r3
#if CFG_TUSB_DEBUG >= 2
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG2("\r\n"); // extra line for setup
    TU_LOG2("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch ( event.event_id )
10005616:	4bb3      	ldr	r3, [pc, #716]	; (100058e4 <tud_task+0x2ec>)
10005618:	469b      	mov	fp, r3
    if ( !osal_queue_receive(_usbd_q, &event) ) return;
1000561a:	4653      	mov	r3, sl
1000561c:	681d      	ldr	r5, [r3, #0]
 * method will block until it is released.
 *
 * \param critsec Pointer to critical_section structure
 */
static inline void critical_section_enter_blocking(critical_section_t *critsec) {
    critsec->save = spin_lock_blocking(critsec->core.spin_lock);
1000561e:	69aa      	ldr	r2, [r5, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10005620:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
10005624:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10005626:	6813      	ldr	r3, [r2, #0]
10005628:	2b00      	cmp	r3, #0
1000562a:	d0fc      	beq.n	10005626 <tud_task+0x2e>
    __asm volatile ("dmb");
1000562c:	f3bf 8f5f 	dmb	sy
10005630:	61e9      	str	r1, [r5, #28]
  //  however osal_queue_recieve may be. therefore my assumption is that
  //  the fifo mutex is not populated for queues used from an IRQ context
  assert(!qhdl->ff.mutex);

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
10005632:	0028      	movs	r0, r5
10005634:	0039      	movs	r1, r7
10005636:	f7ff fdcf 	bl	100051d8 <tu_fifo_read>
 *  \ingroup critical_section
 *
 * \param critsec Pointer to critical_section structure
 */
static inline void critical_section_exit(critical_section_t *critsec) {
    spin_unlock(critsec->core.spin_lock, critsec->save);
1000563a:	69aa      	ldr	r2, [r5, #24]
1000563c:	0004      	movs	r4, r0
1000563e:	69eb      	ldr	r3, [r5, #28]
10005640:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10005644:	2100      	movs	r1, #0
10005646:	6011      	str	r1, [r2, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10005648:	f383 8810 	msr	PRIMASK, r3
1000564c:	2800      	cmp	r0, #0
1000564e:	d100      	bne.n	10005652 <tud_task+0x5a>
10005650:	e102      	b.n	10005858 <tud_task+0x260>
    switch ( event.event_id )
10005652:	787b      	ldrb	r3, [r7, #1]
10005654:	2b08      	cmp	r3, #8
10005656:	d8e0      	bhi.n	1000561a <tud_task+0x22>
10005658:	465a      	mov	r2, fp
1000565a:	009b      	lsls	r3, r3, #2
1000565c:	58d3      	ldr	r3, [r2, r3]
1000565e:	469f      	mov	pc, r3
        }
      break;

      case USBD_EVENT_FUNC_CALL:
        TU_LOG2("\r\n");
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
10005660:	687b      	ldr	r3, [r7, #4]
10005662:	2b00      	cmp	r3, #0
10005664:	d0d9      	beq.n	1000561a <tud_task+0x22>
10005666:	68b8      	ldr	r0, [r7, #8]
10005668:	4798      	blx	r3
  {
1000566a:	e7d6      	b.n	1000561a <tud_task+0x22>
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
1000566c:	227f      	movs	r2, #127	; 0x7f
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
1000566e:	7939      	ldrb	r1, [r7, #4]
        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
10005670:	4b9d      	ldr	r3, [pc, #628]	; (100058e8 <tud_task+0x2f0>)
10005672:	400a      	ands	r2, r1
10005674:	0054      	lsls	r4, r2, #1
10005676:	09c8      	lsrs	r0, r1, #7
10005678:	191b      	adds	r3, r3, r4
1000567a:	181b      	adds	r3, r3, r0
1000567c:	0018      	movs	r0, r3
1000567e:	2501      	movs	r5, #1
10005680:	3020      	adds	r0, #32
10005682:	7944      	ldrb	r4, [r0, #5]
10005684:	43ac      	bics	r4, r5
10005686:	7144      	strb	r4, [r0, #5]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
10005688:	7944      	ldrb	r4, [r0, #5]
1000568a:	3503      	adds	r5, #3
1000568c:	43ac      	bics	r4, r5
1000568e:	7144      	strb	r4, [r0, #5]
        if ( 0 == epnum )
10005690:	2a00      	cmp	r2, #0
10005692:	d100      	bne.n	10005696 <tud_task+0x9e>
10005694:	e0e7      	b.n	10005866 <tud_task+0x26e>
  if ( usbd_app_driver_get_cb )
10005696:	4a95      	ldr	r2, [pc, #596]	; (100058ec <tud_task+0x2f4>)
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
10005698:	7cdb      	ldrb	r3, [r3, #19]
  if ( usbd_app_driver_get_cb )
1000569a:	2a00      	cmp	r2, #0
1000569c:	d006      	beq.n	100056ac <tud_task+0xb4>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
1000569e:	4a94      	ldr	r2, [pc, #592]	; (100058f0 <tud_task+0x2f8>)
100056a0:	7812      	ldrb	r2, [r2, #0]
100056a2:	4293      	cmp	r3, r2
100056a4:	d200      	bcs.n	100056a8 <tud_task+0xb0>
100056a6:	e16f      	b.n	10005988 <tud_task+0x390>
    drvid -= _app_driver_count;
100056a8:	1a9b      	subs	r3, r3, r2
100056aa:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
100056ac:	2b00      	cmp	r3, #0
100056ae:	d000      	beq.n	100056b2 <tud_task+0xba>
100056b0:	e0d2      	b.n	10005858 <tud_task+0x260>
100056b2:	4c90      	ldr	r4, [pc, #576]	; (100058f4 <tud_task+0x2fc>)
          driver->xfer_cb(event.rhport, ep_addr, event.xfer_complete.result, event.xfer_complete.len);
100056b4:	797a      	ldrb	r2, [r7, #5]
100056b6:	7838      	ldrb	r0, [r7, #0]
100056b8:	68bb      	ldr	r3, [r7, #8]
100056ba:	47a0      	blx	r4
100056bc:	e7ad      	b.n	1000561a <tud_task+0x22>
        _usbd_dev.connected = 1;
100056be:	4b8a      	ldr	r3, [pc, #552]	; (100058e8 <tud_task+0x2f0>)
100056c0:	2601      	movs	r6, #1
100056c2:	4698      	mov	r8, r3
100056c4:	4642      	mov	r2, r8
100056c6:	781b      	ldrb	r3, [r3, #0]

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
  usbd_control_set_complete_callback(NULL);
100056c8:	2000      	movs	r0, #0
        _usbd_dev.connected = 1;
100056ca:	4333      	orrs	r3, r6
100056cc:	7013      	strb	r3, [r2, #0]
        if ( !process_control_request(event.rhport, &event.setup_received) )
100056ce:	783b      	ldrb	r3, [r7, #0]
100056d0:	4699      	mov	r9, r3
  usbd_control_set_complete_callback(NULL);
100056d2:	f000 fd93 	bl	100061fc <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
100056d6:	2360      	movs	r3, #96	; 0x60
100056d8:	793d      	ldrb	r5, [r7, #4]
100056da:	402b      	ands	r3, r5
100056dc:	2b60      	cmp	r3, #96	; 0x60
100056de:	d00d      	beq.n	100056fc <tud_task+0x104>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
100056e0:	2b40      	cmp	r3, #64	; 0x40
100056e2:	d100      	bne.n	100056e6 <tud_task+0xee>
100056e4:	e0db      	b.n	1000589e <tud_task+0x2a6>
    TU_LOG2("  %s", _tusb_std_request_str[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG2("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
100056e6:	06ed      	lsls	r5, r5, #27
100056e8:	0eed      	lsrs	r5, r5, #27
100056ea:	2d01      	cmp	r5, #1
100056ec:	d100      	bne.n	100056f0 <tud_task+0xf8>
100056ee:	e156      	b.n	1000599e <tud_task+0x3a6>
100056f0:	2d02      	cmp	r5, #2
100056f2:	d100      	bne.n	100056f6 <tud_task+0xfe>
100056f4:	e112      	b.n	1000591c <tud_task+0x324>
100056f6:	2d00      	cmp	r5, #0
100056f8:	d100      	bne.n	100056fc <tud_task+0x104>
100056fa:	e0e2      	b.n	100058c2 <tud_task+0x2ca>
          dcd_edpt_stall(event.rhport, 0);
100056fc:	7838      	ldrb	r0, [r7, #0]
100056fe:	2100      	movs	r1, #0
10005700:	f000 fff0 	bl	100066e4 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
10005704:	2180      	movs	r1, #128	; 0x80
10005706:	7838      	ldrb	r0, [r7, #0]
10005708:	f000 ffec 	bl	100066e4 <dcd_edpt_stall>
1000570c:	e785      	b.n	1000561a <tud_task+0x22>
        if (tud_resume_cb) tud_resume_cb();
1000570e:	4b7a      	ldr	r3, [pc, #488]	; (100058f8 <tud_task+0x300>)
10005710:	2b00      	cmp	r3, #0
10005712:	d082      	beq.n	1000561a <tud_task+0x22>
10005714:	e000      	b.n	10005718 <tud_task+0x120>
10005716:	bf00      	nop
10005718:	e77f      	b.n	1000561a <tud_task+0x22>
        if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
1000571a:	4b78      	ldr	r3, [pc, #480]	; (100058fc <tud_task+0x304>)
1000571c:	2b00      	cmp	r3, #0
1000571e:	d100      	bne.n	10005722 <tud_task+0x12a>
10005720:	e77b      	b.n	1000561a <tud_task+0x22>
10005722:	4b71      	ldr	r3, [pc, #452]	; (100058e8 <tud_task+0x2f0>)
10005724:	7818      	ldrb	r0, [r3, #0]
10005726:	0700      	lsls	r0, r0, #28
10005728:	0fc0      	lsrs	r0, r0, #31
1000572a:	e000      	b.n	1000572e <tud_task+0x136>
1000572c:	bf00      	nop
1000572e:	e774      	b.n	1000561a <tud_task+0x22>
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10005730:	4d6f      	ldr	r5, [pc, #444]	; (100058f0 <tud_task+0x2f8>)
10005732:	4a6e      	ldr	r2, [pc, #440]	; (100058ec <tud_task+0x2f4>)
10005734:	2400      	movs	r4, #0
10005736:	782b      	ldrb	r3, [r5, #0]
10005738:	2a00      	cmp	r2, #0
1000573a:	d100      	bne.n	1000573e <tud_task+0x146>
1000573c:	e099      	b.n	10005872 <tud_task+0x27a>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
1000573e:	4e70      	ldr	r6, [pc, #448]	; (10005900 <tud_task+0x308>)
10005740:	42a3      	cmp	r3, r4
10005742:	d809      	bhi.n	10005758 <tud_task+0x160>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10005744:	42a3      	cmp	r3, r4
10005746:	d000      	beq.n	1000574a <tud_task+0x152>
10005748:	e096      	b.n	10005878 <tud_task+0x280>
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
1000574a:	3401      	adds	r4, #1
1000574c:	b2e4      	uxtb	r4, r4
1000574e:	429c      	cmp	r4, r3
10005750:	d900      	bls.n	10005754 <tud_task+0x15c>
10005752:	e762      	b.n	1000561a <tud_task+0x22>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005754:	42a3      	cmp	r3, r4
10005756:	d9f5      	bls.n	10005744 <tud_task+0x14c>
          if ( driver->sof ) driver->sof(event.rhport);
10005758:	6831      	ldr	r1, [r6, #0]
1000575a:	00e2      	lsls	r2, r4, #3
1000575c:	468c      	mov	ip, r1
1000575e:	1b12      	subs	r2, r2, r4
10005760:	0092      	lsls	r2, r2, #2
10005762:	4462      	add	r2, ip
10005764:	6992      	ldr	r2, [r2, #24]
10005766:	2a00      	cmp	r2, #0
10005768:	d0ef      	beq.n	1000574a <tud_task+0x152>
1000576a:	7838      	ldrb	r0, [r7, #0]
1000576c:	4790      	blx	r2
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
1000576e:	3401      	adds	r4, #1
10005770:	782b      	ldrb	r3, [r5, #0]
10005772:	b2e4      	uxtb	r4, r4
10005774:	429c      	cmp	r4, r3
10005776:	d9e3      	bls.n	10005740 <tud_task+0x148>
10005778:	e74f      	b.n	1000561a <tud_task+0x22>
  tu_varclr(&_usbd_dev);
1000577a:	2237      	movs	r2, #55	; 0x37
1000577c:	2100      	movs	r1, #0
1000577e:	485a      	ldr	r0, [pc, #360]	; (100058e8 <tud_task+0x2f0>)
        usbd_reset(event.rhport);
10005780:	783e      	ldrb	r6, [r7, #0]
  tu_varclr(&_usbd_dev);
10005782:	f7fb fcaf 	bl	100010e4 <__wrap_memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
10005786:	2210      	movs	r2, #16
10005788:	21ff      	movs	r1, #255	; 0xff
1000578a:	485e      	ldr	r0, [pc, #376]	; (10005904 <tud_task+0x30c>)
1000578c:	f7fb fcaa 	bl	100010e4 <__wrap_memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
10005790:	4855      	ldr	r0, [pc, #340]	; (100058e8 <tud_task+0x2f0>)
10005792:	2212      	movs	r2, #18
10005794:	21ff      	movs	r1, #255	; 0xff
10005796:	3013      	adds	r0, #19
10005798:	f7fb fca4 	bl	100010e4 <__wrap_memset>
  usbd_control_reset();
1000579c:	f000 fd24 	bl	100061e8 <usbd_control_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
100057a0:	4d53      	ldr	r5, [pc, #332]	; (100058f0 <tud_task+0x2f8>)
100057a2:	4a52      	ldr	r2, [pc, #328]	; (100058ec <tud_task+0x2f4>)
100057a4:	2400      	movs	r4, #0
100057a6:	782b      	ldrb	r3, [r5, #0]
100057a8:	2a00      	cmp	r2, #0
100057aa:	d100      	bne.n	100057ae <tud_task+0x1b6>
100057ac:	e070      	b.n	10005890 <tud_task+0x298>
100057ae:	4a56      	ldr	r2, [pc, #344]	; (10005908 <tud_task+0x310>)
100057b0:	4690      	mov	r8, r2
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
100057b2:	4a53      	ldr	r2, [pc, #332]	; (10005900 <tud_task+0x308>)
100057b4:	4691      	mov	r9, r2
100057b6:	42a3      	cmp	r3, r4
100057b8:	d845      	bhi.n	10005846 <tud_task+0x24e>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
100057ba:	d166      	bne.n	1000588a <tud_task+0x292>
100057bc:	4643      	mov	r3, r8
    get_driver(i)->reset(rhport);
100057be:	0030      	movs	r0, r6
100057c0:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
100057c2:	3401      	adds	r4, #1
100057c4:	782b      	ldrb	r3, [r5, #0]
100057c6:	b2e4      	uxtb	r4, r4
100057c8:	42a3      	cmp	r3, r4
100057ca:	d2f4      	bcs.n	100057b6 <tud_task+0x1be>
        if (tud_umount_cb) tud_umount_cb();
100057cc:	4b4f      	ldr	r3, [pc, #316]	; (1000590c <tud_task+0x314>)
100057ce:	2b00      	cmp	r3, #0
100057d0:	d100      	bne.n	100057d4 <tud_task+0x1dc>
100057d2:	e722      	b.n	1000561a <tud_task+0x22>
100057d4:	e000      	b.n	100057d8 <tud_task+0x1e0>
100057d6:	bf00      	nop
100057d8:	e71f      	b.n	1000561a <tud_task+0x22>
  tu_varclr(&_usbd_dev);
100057da:	4b43      	ldr	r3, [pc, #268]	; (100058e8 <tud_task+0x2f0>)
100057dc:	2237      	movs	r2, #55	; 0x37
100057de:	4698      	mov	r8, r3
100057e0:	2100      	movs	r1, #0
100057e2:	0018      	movs	r0, r3
        usbd_reset(event.rhport);
100057e4:	783e      	ldrb	r6, [r7, #0]
  tu_varclr(&_usbd_dev);
100057e6:	f7fb fc7d 	bl	100010e4 <__wrap_memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
100057ea:	4643      	mov	r3, r8
100057ec:	2210      	movs	r2, #16
100057ee:	1cd8      	adds	r0, r3, #3
100057f0:	21ff      	movs	r1, #255	; 0xff
100057f2:	f7fb fc77 	bl	100010e4 <__wrap_memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
100057f6:	4640      	mov	r0, r8
100057f8:	2212      	movs	r2, #18
100057fa:	21ff      	movs	r1, #255	; 0xff
100057fc:	3013      	adds	r0, #19
100057fe:	f7fb fc71 	bl	100010e4 <__wrap_memset>
  usbd_control_reset();
10005802:	f000 fcf1 	bl	100061e8 <usbd_control_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10005806:	4d3a      	ldr	r5, [pc, #232]	; (100058f0 <tud_task+0x2f8>)
10005808:	4a38      	ldr	r2, [pc, #224]	; (100058ec <tud_task+0x2f4>)
1000580a:	2400      	movs	r4, #0
1000580c:	782b      	ldrb	r3, [r5, #0]
1000580e:	2a00      	cmp	r2, #0
10005810:	d035      	beq.n	1000587e <tud_task+0x286>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005812:	4a3b      	ldr	r2, [pc, #236]	; (10005900 <tud_task+0x308>)
10005814:	4691      	mov	r9, r2
10005816:	429c      	cmp	r4, r3
10005818:	d30c      	bcc.n	10005834 <tud_task+0x23c>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
1000581a:	d136      	bne.n	1000588a <tud_task+0x292>
1000581c:	4b3a      	ldr	r3, [pc, #232]	; (10005908 <tud_task+0x310>)
    get_driver(i)->reset(rhport);
1000581e:	0030      	movs	r0, r6
10005820:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10005822:	3401      	adds	r4, #1
10005824:	782b      	ldrb	r3, [r5, #0]
10005826:	b2e4      	uxtb	r4, r4
10005828:	42a3      	cmp	r3, r4
1000582a:	d2f4      	bcs.n	10005816 <tud_task+0x21e>
        _usbd_dev.speed = event.bus_reset.speed;
1000582c:	4642      	mov	r2, r8
1000582e:	793b      	ldrb	r3, [r7, #4]
10005830:	7093      	strb	r3, [r2, #2]
      break;
10005832:	e6f2      	b.n	1000561a <tud_task+0x22>
    get_driver(i)->reset(rhport);
10005834:	464a      	mov	r2, r9
10005836:	6812      	ldr	r2, [r2, #0]
10005838:	00e3      	lsls	r3, r4, #3
1000583a:	4694      	mov	ip, r2
1000583c:	1b1b      	subs	r3, r3, r4
1000583e:	009b      	lsls	r3, r3, #2
10005840:	4463      	add	r3, ip
10005842:	685b      	ldr	r3, [r3, #4]
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005844:	e7eb      	b.n	1000581e <tud_task+0x226>
    get_driver(i)->reset(rhport);
10005846:	464a      	mov	r2, r9
10005848:	6812      	ldr	r2, [r2, #0]
1000584a:	00e3      	lsls	r3, r4, #3
1000584c:	4694      	mov	ip, r2
1000584e:	1b1b      	subs	r3, r3, r4
10005850:	009b      	lsls	r3, r3, #2
10005852:	4463      	add	r3, ip
10005854:	685b      	ldr	r3, [r3, #4]
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005856:	e7b2      	b.n	100057be <tud_task+0x1c6>
}
10005858:	b00b      	add	sp, #44	; 0x2c
1000585a:	bcf0      	pop	{r4, r5, r6, r7}
1000585c:	46bb      	mov	fp, r7
1000585e:	46b2      	mov	sl, r6
10005860:	46a9      	mov	r9, r5
10005862:	46a0      	mov	r8, r4
10005864:	bdf0      	pop	{r4, r5, r6, r7, pc}
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
10005866:	797a      	ldrb	r2, [r7, #5]
10005868:	7838      	ldrb	r0, [r7, #0]
1000586a:	68bb      	ldr	r3, [r7, #8]
1000586c:	f000 fcda 	bl	10006224 <usbd_control_xfer_cb>
10005870:	e6d3      	b.n	1000561a <tud_task+0x22>
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10005872:	2b00      	cmp	r3, #0
10005874:	d100      	bne.n	10005878 <tud_task+0x280>
10005876:	e6d0      	b.n	1000561a <tud_task+0x22>
          if ( driver->sof ) driver->sof(event.rhport);
10005878:	2300      	movs	r3, #0
1000587a:	699b      	ldr	r3, [r3, #24]
1000587c:	deff      	udf	#255	; 0xff
    get_driver(i)->reset(rhport);
1000587e:	0030      	movs	r0, r6
10005880:	f7ff facc 	bl	10004e1c <cdcd_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10005884:	782b      	ldrb	r3, [r5, #0]
10005886:	2b00      	cmp	r3, #0
10005888:	d0d0      	beq.n	1000582c <tud_task+0x234>
    get_driver(i)->reset(rhport);
1000588a:	2300      	movs	r3, #0
1000588c:	685b      	ldr	r3, [r3, #4]
1000588e:	deff      	udf	#255	; 0xff
10005890:	0030      	movs	r0, r6
10005892:	f7ff fac3 	bl	10004e1c <cdcd_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10005896:	782b      	ldrb	r3, [r5, #0]
10005898:	2b00      	cmp	r3, #0
1000589a:	d097      	beq.n	100057cc <tud_task+0x1d4>
1000589c:	e7f5      	b.n	1000588a <tud_task+0x292>
    TU_VERIFY(tud_vendor_control_request_cb);
1000589e:	4b1c      	ldr	r3, [pc, #112]	; (10005910 <tud_task+0x318>)
100058a0:	2b00      	cmp	r3, #0
100058a2:	d100      	bne.n	100058a6 <tud_task+0x2ae>
100058a4:	e72a      	b.n	100056fc <tud_task+0x104>
    if (tud_vendor_control_complete_cb) usbd_control_set_complete_callback(tud_vendor_control_complete_cb);
100058a6:	481b      	ldr	r0, [pc, #108]	; (10005914 <tud_task+0x31c>)
100058a8:	2800      	cmp	r0, #0
100058aa:	d001      	beq.n	100058b0 <tud_task+0x2b8>
100058ac:	f000 fca6 	bl	100061fc <usbd_control_set_complete_callback>
    return tud_vendor_control_request_cb(rhport, p_request);
100058b0:	4648      	mov	r0, r9
100058b2:	a908      	add	r1, sp, #32
100058b4:	e000      	b.n	100058b8 <tud_task+0x2c0>
100058b6:	bf00      	nop
100058b8:	0004      	movs	r4, r0
        if ( !process_control_request(event.rhport, &event.setup_received) )
100058ba:	2c00      	cmp	r4, #0
100058bc:	d000      	beq.n	100058c0 <tud_task+0x2c8>
100058be:	e6ac      	b.n	1000561a <tud_task+0x22>
100058c0:	e71c      	b.n	100056fc <tud_task+0x104>
  {
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
100058c2:	2b20      	cmp	r3, #32
100058c4:	d100      	bne.n	100058c8 <tud_task+0x2d0>
100058c6:	e09b      	b.n	10005a00 <tud_task+0x408>
        TU_VERIFY(driver);

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
      }
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
100058c8:	2b00      	cmp	r3, #0
100058ca:	d000      	beq.n	100058ce <tud_task+0x2d6>
100058cc:	e716      	b.n	100056fc <tud_task+0x104>
        // Non standard request is not supported
        TU_BREAKPOINT();
        return false;
      }

      switch ( p_request->bRequest )
100058ce:	797b      	ldrb	r3, [r7, #5]
100058d0:	2b09      	cmp	r3, #9
100058d2:	d900      	bls.n	100058d6 <tud_task+0x2de>
100058d4:	e712      	b.n	100056fc <tud_task+0x104>
100058d6:	4a10      	ldr	r2, [pc, #64]	; (10005918 <tud_task+0x320>)
100058d8:	009b      	lsls	r3, r3, #2
100058da:	58d3      	ldr	r3, [r2, r3]
100058dc:	469f      	mov	pc, r3
100058de:	46c0      	nop			; (mov r8, r8)
100058e0:	20023280 	.word	0x20023280
100058e4:	100090b4 	.word	0x100090b4
100058e8:	20023244 	.word	0x20023244
100058ec:	00000000 	.word	0x00000000
100058f0:	20023b85 	.word	0x20023b85
100058f4:	10004fd9 	.word	0x10004fd9
	...
10005900:	20022f14 	.word	0x20022f14
10005904:	20023247 	.word	0x20023247
10005908:	10004e1d 	.word	0x10004e1d
	...
10005918:	100090d8 	.word	0x100090d8
1000591c:	227f      	movs	r2, #127	; 0x7f
static inline uint8_t tu_u16_low (uint16_t u16) { return (uint8_t) (u16 & 0x00ff); }
1000591e:	7a39      	ldrb	r1, [r7, #8]
10005920:	400a      	ands	r2, r1
10005922:	9202      	str	r2, [sp, #8]
    {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
10005924:	2a08      	cmp	r2, #8
10005926:	d900      	bls.n	1000592a <tud_task+0x332>
10005928:	e6e8      	b.n	100056fc <tud_task+0x104>
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
1000592a:	09c8      	lsrs	r0, r1, #7
1000592c:	9001      	str	r0, [sp, #4]

      bool ret = false;

      // Handle STD request to endpoint
      if ( TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type )
1000592e:	2b00      	cmp	r3, #0
10005930:	d100      	bne.n	10005934 <tud_task+0x33c>
10005932:	e082      	b.n	10005a3a <tud_task+0x442>
      bool ret = false;
10005934:	2400      	movs	r4, #0
10005936:	0053      	lsls	r3, r2, #1
10005938:	9302      	str	r3, [sp, #8]
          // Unknown/Unsupported request
          default: TU_BREAKPOINT(); return false;
        }
      }

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
1000593a:	9a01      	ldr	r2, [sp, #4]
1000593c:	9b02      	ldr	r3, [sp, #8]
1000593e:	4694      	mov	ip, r2
10005940:	4443      	add	r3, r8
  if ( usbd_app_driver_get_cb )
10005942:	4ac9      	ldr	r2, [pc, #804]	; (10005c68 <tud_task+0x670>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
10005944:	4463      	add	r3, ip
10005946:	7cdb      	ldrb	r3, [r3, #19]
  if ( usbd_app_driver_get_cb )
10005948:	2a00      	cmp	r2, #0
1000594a:	d006      	beq.n	1000595a <tud_task+0x362>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
1000594c:	4ac7      	ldr	r2, [pc, #796]	; (10005c6c <tud_task+0x674>)
1000594e:	7812      	ldrb	r2, [r2, #0]
10005950:	4293      	cmp	r3, r2
10005952:	d200      	bcs.n	10005956 <tud_task+0x35e>
10005954:	e100      	b.n	10005b58 <tud_task+0x560>
    drvid -= _app_driver_count;
10005956:	1a9b      	subs	r3, r3, r2
10005958:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
1000595a:	2b00      	cmp	r3, #0
1000595c:	d000      	beq.n	10005960 <tud_task+0x368>
1000595e:	e0f2      	b.n	10005b46 <tud_task+0x54e>
10005960:	48c3      	ldr	r0, [pc, #780]	; (10005c70 <tud_task+0x678>)
10005962:	4dc4      	ldr	r5, [pc, #784]	; (10005c74 <tud_task+0x67c>)
  usbd_control_set_complete_callback(driver->control_complete);
10005964:	f000 fc4a 	bl	100061fc <usbd_control_set_complete_callback>
  return driver->control_request(rhport, request);
10005968:	4648      	mov	r0, r9
1000596a:	68eb      	ldr	r3, [r5, #12]
1000596c:	a908      	add	r1, sp, #32
1000596e:	4798      	blx	r3
        // We will forward all request targeted endpoint to class drivers after
        // - For class-type requests: driver is fully responsible to reply to host
        // - For std-type requests  : driver init/re-init internal variable/buffer only, and
        //                            must not call tud_control_status(), driver's return value will have no effect.
        //                            EP state has already affected (stalled/cleared)
        if ( invoke_class_control(rhport, driver, p_request) ) ret = true;
10005970:	2800      	cmp	r0, #0
10005972:	d100      	bne.n	10005976 <tud_task+0x37e>
10005974:	e0e7      	b.n	10005b46 <tud_task+0x54e>
      }

      if ( TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type )
10005976:	2260      	movs	r2, #96	; 0x60
10005978:	793b      	ldrb	r3, [r7, #4]
1000597a:	421a      	tst	r2, r3
1000597c:	d000      	beq.n	10005980 <tud_task+0x388>
1000597e:	e64c      	b.n	1000561a <tud_task+0x22>
      {
        // Set complete callback = NULL since it can also stall the request.
        usbd_control_set_complete_callback(NULL);
10005980:	2000      	movs	r0, #0
10005982:	f000 fc3b 	bl	100061fc <usbd_control_set_complete_callback>
10005986:	e648      	b.n	1000561a <tud_task+0x22>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005988:	00da      	lsls	r2, r3, #3
1000598a:	1ad3      	subs	r3, r2, r3
1000598c:	4aba      	ldr	r2, [pc, #744]	; (10005c78 <tud_task+0x680>)
1000598e:	009b      	lsls	r3, r3, #2
10005990:	6812      	ldr	r2, [r2, #0]
10005992:	18d3      	adds	r3, r2, r3
          TU_ASSERT(driver, );
10005994:	2b00      	cmp	r3, #0
10005996:	d100      	bne.n	1000599a <tud_task+0x3a2>
10005998:	e75e      	b.n	10005858 <tud_task+0x260>
          driver->xfer_cb(event.rhport, ep_addr, event.xfer_complete.result, event.xfer_complete.len);
1000599a:	695c      	ldr	r4, [r3, #20]
1000599c:	e68a      	b.n	100056b4 <tud_task+0xbc>
1000599e:	7a3b      	ldrb	r3, [r7, #8]
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
100059a0:	2b0f      	cmp	r3, #15
100059a2:	d900      	bls.n	100059a6 <tud_task+0x3ae>
100059a4:	e6aa      	b.n	100056fc <tud_task+0x104>
  if ( usbd_app_driver_get_cb )
100059a6:	4ab0      	ldr	r2, [pc, #704]	; (10005c68 <tud_task+0x670>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
100059a8:	4443      	add	r3, r8
100059aa:	78db      	ldrb	r3, [r3, #3]
  if ( usbd_app_driver_get_cb )
100059ac:	2a00      	cmp	r2, #0
100059ae:	d005      	beq.n	100059bc <tud_task+0x3c4>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
100059b0:	4aae      	ldr	r2, [pc, #696]	; (10005c6c <tud_task+0x674>)
100059b2:	7812      	ldrb	r2, [r2, #0]
100059b4:	4293      	cmp	r3, r2
100059b6:	d35e      	bcc.n	10005a76 <tud_task+0x47e>
    drvid -= _app_driver_count;
100059b8:	1a9b      	subs	r3, r3, r2
100059ba:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
100059bc:	2b00      	cmp	r3, #0
100059be:	d000      	beq.n	100059c2 <tud_task+0x3ca>
100059c0:	e69c      	b.n	100056fc <tud_task+0x104>
100059c2:	48ab      	ldr	r0, [pc, #684]	; (10005c70 <tud_task+0x678>)
100059c4:	4cab      	ldr	r4, [pc, #684]	; (10005c74 <tud_task+0x67c>)
  usbd_control_set_complete_callback(driver->control_complete);
100059c6:	f000 fc19 	bl	100061fc <usbd_control_set_complete_callback>
  return driver->control_request(rhport, request);
100059ca:	4648      	mov	r0, r9
100059cc:	68e3      	ldr	r3, [r4, #12]
100059ce:	a908      	add	r1, sp, #32
100059d0:	4798      	blx	r3
      if ( !invoke_class_control(rhport, driver, p_request) )
100059d2:	2800      	cmp	r0, #0
100059d4:	d000      	beq.n	100059d8 <tud_task+0x3e0>
100059d6:	e620      	b.n	1000561a <tud_task+0x22>
        TU_VERIFY( TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type &&
100059d8:	2260      	movs	r2, #96	; 0x60
100059da:	0011      	movs	r1, r2
100059dc:	793b      	ldrb	r3, [r7, #4]
100059de:	4019      	ands	r1, r3
100059e0:	421a      	tst	r2, r3
100059e2:	d000      	beq.n	100059e6 <tud_task+0x3ee>
100059e4:	e68a      	b.n	100056fc <tud_task+0x104>
100059e6:	797b      	ldrb	r3, [r7, #5]
100059e8:	2b0a      	cmp	r3, #10
100059ea:	d000      	beq.n	100059ee <tud_task+0x3f6>
100059ec:	e686      	b.n	100056fc <tud_task+0x104>
        uint8_t alternate = 0;
100059ee:	ab06      	add	r3, sp, #24
100059f0:	1c9a      	adds	r2, r3, #2
100059f2:	7011      	strb	r1, [r2, #0]
        tud_control_xfer(rhport, p_request, &alternate, 1);
100059f4:	2301      	movs	r3, #1
100059f6:	4648      	mov	r0, r9
100059f8:	a908      	add	r1, sp, #32
100059fa:	f000 fb97 	bl	1000612c <tud_control_xfer>
100059fe:	e60c      	b.n	1000561a <tud_task+0x22>
10005a00:	7a3b      	ldrb	r3, [r7, #8]
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
10005a02:	2b0f      	cmp	r3, #15
10005a04:	d900      	bls.n	10005a08 <tud_task+0x410>
10005a06:	e679      	b.n	100056fc <tud_task+0x104>
  if ( usbd_app_driver_get_cb )
10005a08:	4a97      	ldr	r2, [pc, #604]	; (10005c68 <tud_task+0x670>)
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
10005a0a:	4443      	add	r3, r8
10005a0c:	78db      	ldrb	r3, [r3, #3]
  if ( usbd_app_driver_get_cb )
10005a0e:	2a00      	cmp	r2, #0
10005a10:	d006      	beq.n	10005a20 <tud_task+0x428>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005a12:	4a96      	ldr	r2, [pc, #600]	; (10005c6c <tud_task+0x674>)
10005a14:	7812      	ldrb	r2, [r2, #0]
10005a16:	4293      	cmp	r3, r2
10005a18:	d200      	bcs.n	10005a1c <tud_task+0x424>
10005a1a:	e0c7      	b.n	10005bac <tud_task+0x5b4>
    drvid -= _app_driver_count;
10005a1c:	1a9b      	subs	r3, r3, r2
10005a1e:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10005a20:	2b00      	cmp	r3, #0
10005a22:	d000      	beq.n	10005a26 <tud_task+0x42e>
10005a24:	e66a      	b.n	100056fc <tud_task+0x104>
10005a26:	4892      	ldr	r0, [pc, #584]	; (10005c70 <tud_task+0x678>)
10005a28:	4c92      	ldr	r4, [pc, #584]	; (10005c74 <tud_task+0x67c>)
  usbd_control_set_complete_callback(driver->control_complete);
10005a2a:	f000 fbe7 	bl	100061fc <usbd_control_set_complete_callback>
  return driver->control_request(rhport, request);
10005a2e:	68e3      	ldr	r3, [r4, #12]
10005a30:	4648      	mov	r0, r9
10005a32:	a908      	add	r1, sp, #32
10005a34:	4798      	blx	r3
10005a36:	0004      	movs	r4, r0
        return invoke_class_control(rhport, driver, p_request);
10005a38:	e73f      	b.n	100058ba <tud_task+0x2c2>
        switch ( p_request->bRequest )
10005a3a:	797b      	ldrb	r3, [r7, #5]
10005a3c:	9303      	str	r3, [sp, #12]
10005a3e:	2b01      	cmp	r3, #1
10005a40:	d100      	bne.n	10005a44 <tud_task+0x44c>
10005a42:	e09d      	b.n	10005b80 <tud_task+0x588>
10005a44:	2b03      	cmp	r3, #3
10005a46:	d100      	bne.n	10005a4a <tud_task+0x452>
10005a48:	e090      	b.n	10005b6c <tud_task+0x574>
10005a4a:	2b00      	cmp	r3, #0
10005a4c:	d000      	beq.n	10005a50 <tud_task+0x458>
10005a4e:	e655      	b.n	100056fc <tud_task+0x104>
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].stalled;
10005a50:	0053      	lsls	r3, r2, #1
10005a52:	9a01      	ldr	r2, [sp, #4]
10005a54:	9302      	str	r3, [sp, #8]
10005a56:	4694      	mov	ip, r2
10005a58:	4443      	add	r3, r8
10005a5a:	4463      	add	r3, ip
10005a5c:	3320      	adds	r3, #32
10005a5e:	795b      	ldrb	r3, [r3, #5]
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
10005a60:	aa06      	add	r2, sp, #24
  return _usbd_dev.ep_status[epnum][dir].stalled;
10005a62:	079b      	lsls	r3, r3, #30
10005a64:	0fdb      	lsrs	r3, r3, #31
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
10005a66:	3202      	adds	r2, #2
10005a68:	8013      	strh	r3, [r2, #0]
            tud_control_xfer(rhport, p_request, &status, 2);
10005a6a:	4648      	mov	r0, r9
10005a6c:	2302      	movs	r3, #2
10005a6e:	a908      	add	r1, sp, #32
10005a70:	f000 fb5c 	bl	1000612c <tud_control_xfer>
          break;
10005a74:	e761      	b.n	1000593a <tud_task+0x342>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005a76:	4a80      	ldr	r2, [pc, #512]	; (10005c78 <tud_task+0x680>)
10005a78:	00dc      	lsls	r4, r3, #3
10005a7a:	1ae3      	subs	r3, r4, r3
10005a7c:	6814      	ldr	r4, [r2, #0]
10005a7e:	009b      	lsls	r3, r3, #2
10005a80:	18e4      	adds	r4, r4, r3
      TU_VERIFY(driver);
10005a82:	2c00      	cmp	r4, #0
10005a84:	d100      	bne.n	10005a88 <tud_task+0x490>
10005a86:	e639      	b.n	100056fc <tud_task+0x104>
  usbd_control_set_complete_callback(driver->control_complete);
10005a88:	6920      	ldr	r0, [r4, #16]
10005a8a:	e79c      	b.n	100059c6 <tud_task+0x3ce>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
10005a8c:	88fb      	ldrh	r3, [r7, #6]
10005a8e:	2b01      	cmp	r3, #1
10005a90:	d000      	beq.n	10005a94 <tud_task+0x49c>
10005a92:	e633      	b.n	100056fc <tud_task+0x104>
          _usbd_dev.remote_wakeup_en = false;
10005a94:	4643      	mov	r3, r8
10005a96:	2208      	movs	r2, #8
10005a98:	781b      	ldrb	r3, [r3, #0]
10005a9a:	4393      	bics	r3, r2
10005a9c:	4642      	mov	r2, r8
          tud_control_status(rhport, p_request);
10005a9e:	4648      	mov	r0, r9
10005aa0:	a908      	add	r1, sp, #32
          _usbd_dev.remote_wakeup_en = false;
10005aa2:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
10005aa4:	f000 fb2a 	bl	100060fc <tud_control_status>
        break;
10005aa8:	e5b7      	b.n	1000561a <tud_task+0x22>
          uint16_t status = (_usbd_dev.self_powered ? 1 : 0) | (_usbd_dev.remote_wakeup_en ? 2 : 0);
10005aaa:	4643      	mov	r3, r8
10005aac:	2002      	movs	r0, #2
10005aae:	7819      	ldrb	r1, [r3, #0]
10005ab0:	ab06      	add	r3, sp, #24
10005ab2:	1c9a      	adds	r2, r3, #2
10005ab4:	068b      	lsls	r3, r1, #26
10005ab6:	0889      	lsrs	r1, r1, #2
10005ab8:	4001      	ands	r1, r0
10005aba:	0fdb      	lsrs	r3, r3, #31
10005abc:	430b      	orrs	r3, r1
10005abe:	8013      	strh	r3, [r2, #0]
          tud_control_xfer(rhport, p_request, &status, 2);
10005ac0:	4648      	mov	r0, r9
10005ac2:	2302      	movs	r3, #2
10005ac4:	a908      	add	r1, sp, #32
10005ac6:	f000 fb31 	bl	1000612c <tud_control_xfer>
        break;
10005aca:	e5a6      	b.n	1000561a <tud_task+0x22>
          if ( !_usbd_dev.cfg_num && cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
10005acc:	4643      	mov	r3, r8
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
10005ace:	79ba      	ldrb	r2, [r7, #6]
10005ad0:	9203      	str	r2, [sp, #12]
          if ( !_usbd_dev.cfg_num && cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
10005ad2:	785b      	ldrb	r3, [r3, #1]
10005ad4:	2b00      	cmp	r3, #0
10005ad6:	d102      	bne.n	10005ade <tud_task+0x4e6>
10005ad8:	2a00      	cmp	r2, #0
10005ada:	d000      	beq.n	10005ade <tud_task+0x4e6>
10005adc:	e084      	b.n	10005be8 <tud_task+0x5f0>
          _usbd_dev.cfg_num = cfg_num;
10005ade:	4643      	mov	r3, r8
10005ae0:	9a03      	ldr	r2, [sp, #12]
          tud_control_status(rhport, p_request);
10005ae2:	4648      	mov	r0, r9
10005ae4:	a908      	add	r1, sp, #32
          _usbd_dev.cfg_num = cfg_num;
10005ae6:	705a      	strb	r2, [r3, #1]
          tud_control_status(rhport, p_request);
10005ae8:	f000 fb08 	bl	100060fc <tud_control_status>
        break;
10005aec:	e595      	b.n	1000561a <tud_task+0x22>
          uint8_t cfg_num = _usbd_dev.cfg_num;
10005aee:	4643      	mov	r3, r8
10005af0:	aa06      	add	r2, sp, #24
10005af2:	785b      	ldrb	r3, [r3, #1]
10005af4:	3202      	adds	r2, #2
10005af6:	7013      	strb	r3, [r2, #0]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
10005af8:	4648      	mov	r0, r9
10005afa:	2301      	movs	r3, #1
10005afc:	a908      	add	r1, sp, #32
10005afe:	f000 fb15 	bl	1000612c <tud_control_xfer>
        break;
10005b02:	e58a      	b.n	1000561a <tud_task+0x22>
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
10005b04:	88fb      	ldrh	r3, [r7, #6]
10005b06:	79b8      	ldrb	r0, [r7, #6]
  switch(desc_type)
10005b08:	0a1b      	lsrs	r3, r3, #8
10005b0a:	2b0f      	cmp	r3, #15
10005b0c:	d900      	bls.n	10005b10 <tud_task+0x518>
10005b0e:	e5f5      	b.n	100056fc <tud_task+0x104>
10005b10:	4a5a      	ldr	r2, [pc, #360]	; (10005c7c <tud_task+0x684>)
10005b12:	009b      	lsls	r3, r3, #2
10005b14:	58d3      	ldr	r3, [r2, r3]
10005b16:	469f      	mov	pc, r3
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
10005b18:	a808      	add	r0, sp, #32
10005b1a:	f000 fb75 	bl	10006208 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
10005b1e:	4648      	mov	r0, r9
10005b20:	79b9      	ldrb	r1, [r7, #6]
10005b22:	f000 fc95 	bl	10006450 <dcd_set_address>
          _usbd_dev.addressed = 1;
10005b26:	4643      	mov	r3, r8
10005b28:	2202      	movs	r2, #2
10005b2a:	781b      	ldrb	r3, [r3, #0]
10005b2c:	4313      	orrs	r3, r2
10005b2e:	4642      	mov	r2, r8
10005b30:	7013      	strb	r3, [r2, #0]
        break;
10005b32:	e572      	b.n	1000561a <tud_task+0x22>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
10005b34:	88fb      	ldrh	r3, [r7, #6]
10005b36:	2b01      	cmp	r3, #1
10005b38:	d000      	beq.n	10005b3c <tud_task+0x544>
10005b3a:	e5df      	b.n	100056fc <tud_task+0x104>
          _usbd_dev.remote_wakeup_en = true;
10005b3c:	4643      	mov	r3, r8
10005b3e:	2208      	movs	r2, #8
10005b40:	781b      	ldrb	r3, [r3, #0]
10005b42:	4313      	orrs	r3, r2
10005b44:	e7aa      	b.n	10005a9c <tud_task+0x4a4>
      if ( TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type )
10005b46:	2260      	movs	r2, #96	; 0x60
10005b48:	793b      	ldrb	r3, [r7, #4]
10005b4a:	421a      	tst	r2, r3
10005b4c:	d000      	beq.n	10005b50 <tud_task+0x558>
10005b4e:	e6b4      	b.n	100058ba <tud_task+0x2c2>
        usbd_control_set_complete_callback(NULL);
10005b50:	2000      	movs	r0, #0
10005b52:	f000 fb53 	bl	100061fc <usbd_control_set_complete_callback>
10005b56:	e6b0      	b.n	100058ba <tud_task+0x2c2>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005b58:	4a47      	ldr	r2, [pc, #284]	; (10005c78 <tud_task+0x680>)
10005b5a:	00dd      	lsls	r5, r3, #3
10005b5c:	1aeb      	subs	r3, r5, r3
10005b5e:	6815      	ldr	r5, [r2, #0]
10005b60:	009b      	lsls	r3, r3, #2
10005b62:	18ed      	adds	r5, r5, r3
      if (driver)
10005b64:	2d00      	cmp	r5, #0
10005b66:	d0ee      	beq.n	10005b46 <tud_task+0x54e>
  usbd_control_set_complete_callback(driver->control_complete);
10005b68:	6928      	ldr	r0, [r5, #16]
10005b6a:	e6fb      	b.n	10005964 <tud_task+0x36c>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) usbd_edpt_stall(rhport, ep_addr);
10005b6c:	88fb      	ldrh	r3, [r7, #6]
10005b6e:	2b00      	cmp	r3, #0
10005b70:	d027      	beq.n	10005bc2 <tud_task+0x5ca>
10005b72:	0053      	lsls	r3, r2, #1
10005b74:	9302      	str	r3, [sp, #8]
            tud_control_status(rhport, p_request);
10005b76:	4648      	mov	r0, r9
10005b78:	a908      	add	r1, sp, #32
10005b7a:	f000 fabf 	bl	100060fc <tud_control_status>
          break;
10005b7e:	e6dc      	b.n	1000593a <tud_task+0x342>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) usbd_edpt_clear_stall(rhport, ep_addr);
10005b80:	88fb      	ldrh	r3, [r7, #6]
10005b82:	2b00      	cmp	r3, #0
10005b84:	d1f5      	bne.n	10005b72 <tud_task+0x57a>
  dcd_edpt_clear_stall(rhport, ep_addr);
10005b86:	4648      	mov	r0, r9
10005b88:	f000 fdd4 	bl	10006734 <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = false;
10005b8c:	9a01      	ldr	r2, [sp, #4]
10005b8e:	9b02      	ldr	r3, [sp, #8]
10005b90:	4694      	mov	ip, r2
10005b92:	005b      	lsls	r3, r3, #1
10005b94:	9302      	str	r3, [sp, #8]
10005b96:	4443      	add	r3, r8
10005b98:	4463      	add	r3, ip
10005b9a:	3320      	adds	r3, #32
10005b9c:	795a      	ldrb	r2, [r3, #5]
  _usbd_dev.ep_status[epnum][dir].busy = false;
10005b9e:	9903      	ldr	r1, [sp, #12]
  _usbd_dev.ep_status[epnum][dir].stalled = false;
10005ba0:	43aa      	bics	r2, r5
10005ba2:	715a      	strb	r2, [r3, #5]
  _usbd_dev.ep_status[epnum][dir].busy = false;
10005ba4:	795a      	ldrb	r2, [r3, #5]
10005ba6:	438a      	bics	r2, r1
10005ba8:	715a      	strb	r2, [r3, #5]
}
10005baa:	e7e4      	b.n	10005b76 <tud_task+0x57e>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005bac:	4a32      	ldr	r2, [pc, #200]	; (10005c78 <tud_task+0x680>)
10005bae:	00dc      	lsls	r4, r3, #3
10005bb0:	1ae3      	subs	r3, r4, r3
10005bb2:	6814      	ldr	r4, [r2, #0]
10005bb4:	009b      	lsls	r3, r3, #2
10005bb6:	18e4      	adds	r4, r4, r3
        TU_VERIFY(driver);
10005bb8:	2c00      	cmp	r4, #0
10005bba:	d100      	bne.n	10005bbe <tud_task+0x5c6>
10005bbc:	e59e      	b.n	100056fc <tud_task+0x104>
  usbd_control_set_complete_callback(driver->control_complete);
10005bbe:	6920      	ldr	r0, [r4, #16]
10005bc0:	e733      	b.n	10005a2a <tud_task+0x432>
  dcd_edpt_stall(rhport, ep_addr);
10005bc2:	4648      	mov	r0, r9
10005bc4:	f000 fd8e 	bl	100066e4 <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = true;
10005bc8:	9a01      	ldr	r2, [sp, #4]
10005bca:	2102      	movs	r1, #2
10005bcc:	4694      	mov	ip, r2
10005bce:	9b02      	ldr	r3, [sp, #8]
10005bd0:	005b      	lsls	r3, r3, #1
10005bd2:	9302      	str	r3, [sp, #8]
10005bd4:	4443      	add	r3, r8
10005bd6:	4463      	add	r3, ip
10005bd8:	3320      	adds	r3, #32
10005bda:	795a      	ldrb	r2, [r3, #5]
10005bdc:	430a      	orrs	r2, r1
10005bde:	715a      	strb	r2, [r3, #5]
  _usbd_dev.ep_status[epnum][dir].busy = true;
10005be0:	795a      	ldrb	r2, [r3, #5]
10005be2:	4316      	orrs	r6, r2
10005be4:	715e      	strb	r6, [r3, #5]
}
10005be6:	e7c6      	b.n	10005b76 <tud_task+0x57e>
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1); // index is cfg_num-1
10005be8:	1e50      	subs	r0, r2, #1
10005bea:	b2c0      	uxtb	r0, r0
10005bec:	f7fe fa06 	bl	10003ffc <tud_descriptor_configuration_cb>
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
10005bf0:	2800      	cmp	r0, #0
10005bf2:	d100      	bne.n	10005bf6 <tud_task+0x5fe>
10005bf4:	e582      	b.n	100056fc <tud_task+0x104>
10005bf6:	7843      	ldrb	r3, [r0, #1]
10005bf8:	2b02      	cmp	r3, #2
10005bfa:	d000      	beq.n	10005bfe <tud_task+0x606>
10005bfc:	e57e      	b.n	100056fc <tud_task+0x104>
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
10005bfe:	2101      	movs	r1, #1
10005c00:	79c2      	ldrb	r2, [r0, #7]
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
10005c02:	0005      	movs	r5, r0
  _usbd_dev.self_powered = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED) ? 1 : 0;
10005c04:	1193      	asrs	r3, r2, #6
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
10005c06:	1152      	asrs	r2, r2, #5
10005c08:	400b      	ands	r3, r1
10005c0a:	400a      	ands	r2, r1
10005c0c:	0112      	lsls	r2, r2, #4
10005c0e:	015b      	lsls	r3, r3, #5
10005c10:	4313      	orrs	r3, r2
10005c12:	4642      	mov	r2, r8
10005c14:	7812      	ldrb	r2, [r2, #0]
10005c16:	312f      	adds	r1, #47	; 0x2f
10005c18:	438a      	bics	r2, r1
10005c1a:	4313      	orrs	r3, r2
10005c1c:	4642      	mov	r2, r8
10005c1e:	7013      	strb	r3, [r2, #0]
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + desc_cfg->wTotalLength;
10005c20:	78c3      	ldrb	r3, [r0, #3]
10005c22:	7882      	ldrb	r2, [r0, #2]
10005c24:	021b      	lsls	r3, r3, #8
10005c26:	4313      	orrs	r3, r2
10005c28:	18c3      	adds	r3, r0, r3
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
10005c2a:	3509      	adds	r5, #9
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + desc_cfg->wTotalLength;
10005c2c:	9304      	str	r3, [sp, #16]
  while( p_desc < desc_end )
10005c2e:	9b04      	ldr	r3, [sp, #16]
10005c30:	42ab      	cmp	r3, r5
10005c32:	d800      	bhi.n	10005c36 <tud_task+0x63e>
10005c34:	e0cf      	b.n	10005dd6 <tud_task+0x7de>
    tusb_desc_interface_assoc_t const * desc_itf_assoc = NULL;
10005c36:	2300      	movs	r3, #0
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10005c38:	786a      	ldrb	r2, [r5, #1]
10005c3a:	9302      	str	r3, [sp, #8]
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
10005c3c:	2a0b      	cmp	r2, #11
10005c3e:	d104      	bne.n	10005c4a <tud_task+0x652>
  return desc8 + desc8[DESC_OFFSET_LEN];
10005c40:	782b      	ldrb	r3, [r5, #0]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10005c42:	9502      	str	r5, [sp, #8]
  return desc8 + desc8[DESC_OFFSET_LEN];
10005c44:	18eb      	adds	r3, r5, r3
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10005c46:	001d      	movs	r5, r3
10005c48:	785a      	ldrb	r2, [r3, #1]
    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
10005c4a:	2a04      	cmp	r2, #4
10005c4c:	d000      	beq.n	10005c50 <tud_task+0x658>
10005c4e:	e555      	b.n	100056fc <tud_task+0x104>
    uint16_t const remaining_len = desc_end-p_desc;
10005c50:	9b04      	ldr	r3, [sp, #16]
10005c52:	4a05      	ldr	r2, [pc, #20]	; (10005c68 <tud_task+0x670>)
10005c54:	1b5b      	subs	r3, r3, r5
10005c56:	b29b      	uxth	r3, r3
10005c58:	9301      	str	r3, [sp, #4]
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
10005c5a:	4b04      	ldr	r3, [pc, #16]	; (10005c6c <tud_task+0x674>)
10005c5c:	2400      	movs	r4, #0
10005c5e:	781b      	ldrb	r3, [r3, #0]
10005c60:	2a00      	cmp	r2, #0
10005c62:	d11d      	bne.n	10005ca0 <tud_task+0x6a8>
10005c64:	e029      	b.n	10005cba <tud_task+0x6c2>
10005c66:	46c0      	nop			; (mov r8, r8)
10005c68:	00000000 	.word	0x00000000
10005c6c:	20023b85 	.word	0x20023b85
10005c70:	10004f2d 	.word	0x10004f2d
10005c74:	10009140 	.word	0x10009140
10005c78:	20022f14 	.word	0x20022f14
10005c7c:	10009100 	.word	0x10009100
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10005c80:	429c      	cmp	r4, r3
10005c82:	d126      	bne.n	10005cd2 <tud_task+0x6da>
10005c84:	4b57      	ldr	r3, [pc, #348]	; (10005de4 <tud_task+0x7ec>)
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
10005c86:	0029      	movs	r1, r5
10005c88:	4648      	mov	r0, r9
10005c8a:	9a01      	ldr	r2, [sp, #4]
10005c8c:	4798      	blx	r3
      if ( drv_len > 0 )
10005c8e:	2800      	cmp	r0, #0
10005c90:	d122      	bne.n	10005cd8 <tud_task+0x6e0>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
10005c92:	4b55      	ldr	r3, [pc, #340]	; (10005de8 <tud_task+0x7f0>)
10005c94:	3401      	adds	r4, #1
10005c96:	781b      	ldrb	r3, [r3, #0]
10005c98:	b2e4      	uxtb	r4, r4
10005c9a:	42a3      	cmp	r3, r4
10005c9c:	d200      	bcs.n	10005ca0 <tud_task+0x6a8>
10005c9e:	e52d      	b.n	100056fc <tud_task+0x104>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005ca0:	429c      	cmp	r4, r3
10005ca2:	d2ed      	bcs.n	10005c80 <tud_task+0x688>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
10005ca4:	4b51      	ldr	r3, [pc, #324]	; (10005dec <tud_task+0x7f4>)
10005ca6:	681b      	ldr	r3, [r3, #0]
10005ca8:	9305      	str	r3, [sp, #20]
10005caa:	9a05      	ldr	r2, [sp, #20]
10005cac:	00e3      	lsls	r3, r4, #3
10005cae:	4694      	mov	ip, r2
10005cb0:	1b1b      	subs	r3, r3, r4
10005cb2:	009b      	lsls	r3, r3, #2
10005cb4:	4463      	add	r3, ip
10005cb6:	689b      	ldr	r3, [r3, #8]
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005cb8:	e7e5      	b.n	10005c86 <tud_task+0x68e>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
10005cba:	0029      	movs	r1, r5
10005cbc:	4648      	mov	r0, r9
10005cbe:	9a01      	ldr	r2, [sp, #4]
10005cc0:	f7ff f8be 	bl	10004e40 <cdcd_open>
10005cc4:	1e06      	subs	r6, r0, #0
      if ( drv_len > 0 )
10005cc6:	d108      	bne.n	10005cda <tud_task+0x6e2>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
10005cc8:	4b47      	ldr	r3, [pc, #284]	; (10005de8 <tud_task+0x7f0>)
10005cca:	781b      	ldrb	r3, [r3, #0]
10005ccc:	2b00      	cmp	r3, #0
10005cce:	d100      	bne.n	10005cd2 <tud_task+0x6da>
10005cd0:	e514      	b.n	100056fc <tud_task+0x104>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
10005cd2:	2300      	movs	r3, #0
10005cd4:	689b      	ldr	r3, [r3, #8]
10005cd6:	deff      	udf	#255	; 0xff
10005cd8:	0006      	movs	r6, r0
        TU_ASSERT( sizeof(tusb_desc_interface_t) <= drv_len && drv_len <= remaining_len);
10005cda:	2e08      	cmp	r6, #8
10005cdc:	d800      	bhi.n	10005ce0 <tud_task+0x6e8>
10005cde:	e50d      	b.n	100056fc <tud_task+0x104>
10005ce0:	9b01      	ldr	r3, [sp, #4]
10005ce2:	42b3      	cmp	r3, r6
10005ce4:	d200      	bcs.n	10005ce8 <tud_task+0x6f0>
10005ce6:	e509      	b.n	100056fc <tud_task+0x104>
        TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[desc_itf->bInterfaceNumber]);
10005ce8:	4643      	mov	r3, r8
10005cea:	78aa      	ldrb	r2, [r5, #2]
10005cec:	189b      	adds	r3, r3, r2
10005cee:	78d9      	ldrb	r1, [r3, #3]
10005cf0:	29ff      	cmp	r1, #255	; 0xff
10005cf2:	d000      	beq.n	10005cf6 <tud_task+0x6fe>
10005cf4:	e502      	b.n	100056fc <tud_task+0x104>
        _usbd_dev.itf2drv[desc_itf->bInterfaceNumber] = drv_id;
10005cf6:	70dc      	strb	r4, [r3, #3]
        if (desc_itf_assoc)
10005cf8:	9b02      	ldr	r3, [sp, #8]
10005cfa:	2b00      	cmp	r3, #0
10005cfc:	d014      	beq.n	10005d28 <tud_task+0x730>
10005cfe:	0018      	movs	r0, r3
          TU_ASSERT(desc_itf_assoc->bFirstInterface == desc_itf->bInterfaceNumber &&
10005d00:	789b      	ldrb	r3, [r3, #2]
10005d02:	4293      	cmp	r3, r2
10005d04:	d000      	beq.n	10005d08 <tud_task+0x710>
10005d06:	e4f9      	b.n	100056fc <tud_task+0x104>
10005d08:	7901      	ldrb	r1, [r0, #4]
10005d0a:	796a      	ldrb	r2, [r5, #5]
10005d0c:	4291      	cmp	r1, r2
10005d0e:	d000      	beq.n	10005d12 <tud_task+0x71a>
10005d10:	e4f4      	b.n	100056fc <tud_task+0x104>
          for(uint8_t i=1; i<desc_itf_assoc->bInterfaceCount; i++)
10005d12:	78c2      	ldrb	r2, [r0, #3]
10005d14:	2a01      	cmp	r2, #1
10005d16:	d907      	bls.n	10005d28 <tud_task+0x730>
            _usbd_dev.itf2drv[desc_itf->bInterfaceNumber+i] = drv_id;
10005d18:	3304      	adds	r3, #4
10005d1a:	3a01      	subs	r2, #1
10005d1c:	4443      	add	r3, r8
10005d1e:	0018      	movs	r0, r3
10005d20:	0021      	movs	r1, r4
10005d22:	b2d2      	uxtb	r2, r2
10005d24:	f7fb f9de 	bl	100010e4 <__wrap_memset>
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
10005d28:	217f      	movs	r1, #127	; 0x7f
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
10005d2a:	002a      	movs	r2, r5
10005d2c:	2300      	movs	r3, #0
10005d2e:	468c      	mov	ip, r1
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
10005d30:	7851      	ldrb	r1, [r2, #1]
10005d32:	2905      	cmp	r1, #5
10005d34:	d107      	bne.n	10005d46 <tud_task+0x74e>
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
10005d36:	4661      	mov	r1, ip
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
10005d38:	7890      	ldrb	r0, [r2, #2]
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
10005d3a:	4001      	ands	r1, r0
10005d3c:	0049      	lsls	r1, r1, #1
10005d3e:	4441      	add	r1, r8
10005d40:	3113      	adds	r1, #19
10005d42:	09c0      	lsrs	r0, r0, #7
10005d44:	540c      	strb	r4, [r1, r0]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
10005d46:	7811      	ldrb	r1, [r2, #0]
    len   = (uint16_t)(len + tu_desc_len(p_desc));
10005d48:	185b      	adds	r3, r3, r1
10005d4a:	b29b      	uxth	r3, r3
  return desc8 + desc8[DESC_OFFSET_LEN];
10005d4c:	1852      	adds	r2, r2, r1
  while( len < desc_len )
10005d4e:	42b3      	cmp	r3, r6
10005d50:	d3ee      	bcc.n	10005d30 <tud_task+0x738>
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
10005d52:	4b25      	ldr	r3, [pc, #148]	; (10005de8 <tud_task+0x7f0>)
        p_desc += drv_len; // next interface
10005d54:	19ad      	adds	r5, r5, r6
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
10005d56:	781b      	ldrb	r3, [r3, #0]
10005d58:	42a3      	cmp	r3, r4
10005d5a:	d300      	bcc.n	10005d5e <tud_task+0x766>
10005d5c:	e767      	b.n	10005c2e <tud_task+0x636>
10005d5e:	e4cd      	b.n	100056fc <tud_task+0x104>
      if (!tud_descriptor_bos_cb) return false;
10005d60:	4b23      	ldr	r3, [pc, #140]	; (10005df0 <tud_task+0x7f8>)
10005d62:	2b00      	cmp	r3, #0
10005d64:	d100      	bne.n	10005d68 <tud_task+0x770>
10005d66:	e4c9      	b.n	100056fc <tud_task+0x104>
      tusb_desc_bos_t const* desc_bos = (tusb_desc_bos_t const*) tud_descriptor_bos_cb();
10005d68:	e000      	b.n	10005d6c <tud_task+0x774>
10005d6a:	bf00      	nop
10005d6c:	0004      	movs	r4, r0
      memcpy(&total_len, (uint8_t*) desc_config + offsetof(tusb_desc_configuration_t, wTotalLength), 2);
10005d6e:	ab06      	add	r3, sp, #24
10005d70:	1c9d      	adds	r5, r3, #2
10005d72:	2202      	movs	r2, #2
10005d74:	1ca1      	adds	r1, r4, #2
10005d76:	0028      	movs	r0, r5
10005d78:	f7fb f9ba 	bl	100010f0 <__wrap___aeabi_memcpy>
      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
10005d7c:	0022      	movs	r2, r4
10005d7e:	4648      	mov	r0, r9
10005d80:	882b      	ldrh	r3, [r5, #0]
10005d82:	a908      	add	r1, sp, #32
10005d84:	f000 f9d2 	bl	1000612c <tud_control_xfer>
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
10005d88:	2800      	cmp	r0, #0
10005d8a:	d000      	beq.n	10005d8e <tud_task+0x796>
10005d8c:	e445      	b.n	1000561a <tud_task+0x22>
10005d8e:	e4b5      	b.n	100056fc <tud_task+0x104>
      if ( tud_descriptor_device_qualifier_cb )
10005d90:	4b18      	ldr	r3, [pc, #96]	; (10005df4 <tud_task+0x7fc>)
10005d92:	2b00      	cmp	r3, #0
10005d94:	d100      	bne.n	10005d98 <tud_task+0x7a0>
10005d96:	e4b1      	b.n	100056fc <tud_task+0x104>
        uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
10005d98:	e000      	b.n	10005d9c <tud_task+0x7a4>
10005d9a:	bf00      	nop
10005d9c:	1e02      	subs	r2, r0, #0
        TU_ASSERT(desc_qualifier);
10005d9e:	d100      	bne.n	10005da2 <tud_task+0x7aa>
10005da0:	e4ac      	b.n	100056fc <tud_task+0x104>
        return tud_control_xfer(rhport, p_request, (void*) desc_qualifier, desc_qualifier[0]);
10005da2:	4648      	mov	r0, r9
10005da4:	7813      	ldrb	r3, [r2, #0]
10005da6:	a908      	add	r1, sp, #32
10005da8:	f000 f9c0 	bl	1000612c <tud_control_xfer>
10005dac:	e7ec      	b.n	10005d88 <tud_task+0x790>
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, p_request->wIndex);
10005dae:	8939      	ldrh	r1, [r7, #8]
10005db0:	f7fe f928 	bl	10004004 <tud_descriptor_string_cb>
10005db4:	1e02      	subs	r2, r0, #0
      TU_VERIFY(desc_str);
10005db6:	d1f4      	bne.n	10005da2 <tud_task+0x7aa>
10005db8:	e4a0      	b.n	100056fc <tud_task+0x104>
      tusb_desc_configuration_t const* desc_config = (tusb_desc_configuration_t const*) tud_descriptor_configuration_cb(desc_index);
10005dba:	f7fe f91f 	bl	10003ffc <tud_descriptor_configuration_cb>
10005dbe:	1e04      	subs	r4, r0, #0
      TU_ASSERT(desc_config);
10005dc0:	d1d5      	bne.n	10005d6e <tud_task+0x776>
10005dc2:	e49b      	b.n	100056fc <tud_task+0x104>
      return tud_control_xfer(rhport, p_request, (void*) tud_descriptor_device_cb(), len);
10005dc4:	f7fe f916 	bl	10003ff4 <tud_descriptor_device_cb>
10005dc8:	2312      	movs	r3, #18
10005dca:	0002      	movs	r2, r0
10005dcc:	a908      	add	r1, sp, #32
10005dce:	4648      	mov	r0, r9
10005dd0:	f000 f9ac 	bl	1000612c <tud_control_xfer>
10005dd4:	e7d8      	b.n	10005d88 <tud_task+0x790>
  if (tud_mount_cb) tud_mount_cb();
10005dd6:	4b08      	ldr	r3, [pc, #32]	; (10005df8 <tud_task+0x800>)
10005dd8:	2b00      	cmp	r3, #0
10005dda:	d100      	bne.n	10005dde <tud_task+0x7e6>
10005ddc:	e67f      	b.n	10005ade <tud_task+0x4e6>
10005dde:	e000      	b.n	10005de2 <tud_task+0x7ea>
10005de0:	bf00      	nop
10005de2:	e67c      	b.n	10005ade <tud_task+0x4e6>
10005de4:	10004e41 	.word	0x10004e41
10005de8:	20023b85 	.word	0x20023b85
10005dec:	20022f14 	.word	0x20022f14
	...

10005dfc <dcd_event_bus_signal>:
{
10005dfc:	b530      	push	{r4, r5, lr}
10005dfe:	b085      	sub	sp, #20
10005e00:	0005      	movs	r5, r0
10005e02:	000c      	movs	r4, r1
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
10005e04:	220c      	movs	r2, #12
10005e06:	2100      	movs	r1, #0
10005e08:	a801      	add	r0, sp, #4
10005e0a:	f7fb f96b 	bl	100010e4 <__wrap_memset>
10005e0e:	466b      	mov	r3, sp
10005e10:	711d      	strb	r5, [r3, #4]
10005e12:	715c      	strb	r4, [r3, #5]
  switch (event->event_id)
10005e14:	2c04      	cmp	r4, #4
10005e16:	d04b      	beq.n	10005eb0 <dcd_event_bus_signal+0xb4>
10005e18:	d805      	bhi.n	10005e26 <dcd_event_bus_signal+0x2a>
10005e1a:	2c02      	cmp	r4, #2
10005e1c:	d030      	beq.n	10005e80 <dcd_event_bus_signal+0x84>
10005e1e:	2c03      	cmp	r4, #3
10005e20:	d115      	bne.n	10005e4e <dcd_event_bus_signal+0x52>
}
10005e22:	b005      	add	sp, #20
10005e24:	bd30      	pop	{r4, r5, pc}
  switch (event->event_id)
10005e26:	2c05      	cmp	r4, #5
10005e28:	d111      	bne.n	10005e4e <dcd_event_bus_signal+0x52>
      if ( _usbd_dev.connected )
10005e2a:	4b2a      	ldr	r3, [pc, #168]	; (10005ed4 <dcd_event_bus_signal+0xd8>)
10005e2c:	781a      	ldrb	r2, [r3, #0]
10005e2e:	07d2      	lsls	r2, r2, #31
10005e30:	d5f7      	bpl.n	10005e22 <dcd_event_bus_signal+0x26>
        _usbd_dev.suspended = 0;
10005e32:	2104      	movs	r1, #4
10005e34:	781a      	ldrb	r2, [r3, #0]
10005e36:	438a      	bics	r2, r1
10005e38:	701a      	strb	r2, [r3, #0]
        osal_queue_send(_usbd_q, event, in_isr);
10005e3a:	4b27      	ldr	r3, [pc, #156]	; (10005ed8 <dcd_event_bus_signal+0xdc>)
10005e3c:	681c      	ldr	r4, [r3, #0]
    critsec->save = spin_lock_blocking(critsec->core.spin_lock);
10005e3e:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10005e40:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
10005e44:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10005e46:	6813      	ldr	r3, [r2, #0]
10005e48:	2b00      	cmp	r3, #0
10005e4a:	d109      	bne.n	10005e60 <dcd_event_bus_signal+0x64>
10005e4c:	e7fb      	b.n	10005e46 <dcd_event_bus_signal+0x4a>
      osal_queue_send(_usbd_q, event, in_isr);
10005e4e:	4b22      	ldr	r3, [pc, #136]	; (10005ed8 <dcd_event_bus_signal+0xdc>)
10005e50:	681c      	ldr	r4, [r3, #0]
10005e52:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10005e54:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
10005e58:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10005e5a:	6813      	ldr	r3, [r2, #0]
10005e5c:	2b00      	cmp	r3, #0
10005e5e:	d0fc      	beq.n	10005e5a <dcd_event_bus_signal+0x5e>
    __asm volatile ("dmb");
10005e60:	f3bf 8f5f 	dmb	sy
10005e64:	61e1      	str	r1, [r4, #28]
  //  however osal_queue_recieve may be. therefore my assumption is that
  //  the fifo mutex is not populated for queues used from an IRQ context
  assert(!qhdl->ff.mutex);

  _osal_q_lock(qhdl);
  bool success = tu_fifo_write(&qhdl->ff, data);
10005e66:	0020      	movs	r0, r4
10005e68:	a901      	add	r1, sp, #4
10005e6a:	f7ff fa87 	bl	1000537c <tu_fifo_write>
    spin_unlock(critsec->core.spin_lock, critsec->save);
10005e6e:	69a2      	ldr	r2, [r4, #24]
10005e70:	69e3      	ldr	r3, [r4, #28]
10005e72:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10005e76:	2100      	movs	r1, #0
10005e78:	6011      	str	r1, [r2, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10005e7a:	f383 8810 	msr	PRIMASK, r3
}
10005e7e:	e7d0      	b.n	10005e22 <dcd_event_bus_signal+0x26>
      _usbd_dev.connected  = 0;
10005e80:	2101      	movs	r1, #1
10005e82:	4b14      	ldr	r3, [pc, #80]	; (10005ed4 <dcd_event_bus_signal+0xd8>)
10005e84:	781a      	ldrb	r2, [r3, #0]
10005e86:	438a      	bics	r2, r1
10005e88:	701a      	strb	r2, [r3, #0]
      _usbd_dev.addressed  = 0;
10005e8a:	781a      	ldrb	r2, [r3, #0]
      _usbd_dev.suspended  = 0;
10005e8c:	3103      	adds	r1, #3
      _usbd_dev.addressed  = 0;
10005e8e:	43a2      	bics	r2, r4
10005e90:	701a      	strb	r2, [r3, #0]
      _usbd_dev.cfg_num    = 0;
10005e92:	2200      	movs	r2, #0
10005e94:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended  = 0;
10005e96:	781a      	ldrb	r2, [r3, #0]
10005e98:	438a      	bics	r2, r1
10005e9a:	701a      	strb	r2, [r3, #0]
      osal_queue_send(_usbd_q, event, in_isr);
10005e9c:	4b0e      	ldr	r3, [pc, #56]	; (10005ed8 <dcd_event_bus_signal+0xdc>)
10005e9e:	681c      	ldr	r4, [r3, #0]
    critsec->save = spin_lock_blocking(critsec->core.spin_lock);
10005ea0:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10005ea2:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
10005ea6:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10005ea8:	6813      	ldr	r3, [r2, #0]
10005eaa:	2b00      	cmp	r3, #0
10005eac:	d1d8      	bne.n	10005e60 <dcd_event_bus_signal+0x64>
10005eae:	e7fb      	b.n	10005ea8 <dcd_event_bus_signal+0xac>
      if ( _usbd_dev.connected )
10005eb0:	4b08      	ldr	r3, [pc, #32]	; (10005ed4 <dcd_event_bus_signal+0xd8>)
10005eb2:	781a      	ldrb	r2, [r3, #0]
10005eb4:	07d2      	lsls	r2, r2, #31
10005eb6:	d5b4      	bpl.n	10005e22 <dcd_event_bus_signal+0x26>
        _usbd_dev.suspended = 1;
10005eb8:	2104      	movs	r1, #4
10005eba:	781a      	ldrb	r2, [r3, #0]
10005ebc:	430a      	orrs	r2, r1
10005ebe:	701a      	strb	r2, [r3, #0]
        osal_queue_send(_usbd_q, event, in_isr);
10005ec0:	4b05      	ldr	r3, [pc, #20]	; (10005ed8 <dcd_event_bus_signal+0xdc>)
10005ec2:	681c      	ldr	r4, [r3, #0]
10005ec4:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10005ec6:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
10005eca:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10005ecc:	6813      	ldr	r3, [r2, #0]
10005ece:	2b00      	cmp	r3, #0
10005ed0:	d1c6      	bne.n	10005e60 <dcd_event_bus_signal+0x64>
10005ed2:	e7fb      	b.n	10005ecc <dcd_event_bus_signal+0xd0>
10005ed4:	20023244 	.word	0x20023244
10005ed8:	20023280 	.word	0x20023280

10005edc <dcd_event_setup_received>:
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
10005edc:	2300      	movs	r3, #0
{
10005ede:	b530      	push	{r4, r5, lr}
10005ee0:	b085      	sub	sp, #20
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
10005ee2:	ad01      	add	r5, sp, #4
10005ee4:	806b      	strh	r3, [r5, #2]
10005ee6:	7028      	strb	r0, [r5, #0]
10005ee8:	3306      	adds	r3, #6
  memcpy(&event.setup_received, setup, 8);
10005eea:	2208      	movs	r2, #8
10005eec:	a802      	add	r0, sp, #8
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
10005eee:	706b      	strb	r3, [r5, #1]
  memcpy(&event.setup_received, setup, 8);
10005ef0:	f7fb f8fe 	bl	100010f0 <__wrap___aeabi_memcpy>
      osal_queue_send(_usbd_q, event, in_isr);
10005ef4:	4b0c      	ldr	r3, [pc, #48]	; (10005f28 <dcd_event_setup_received+0x4c>)
10005ef6:	681c      	ldr	r4, [r3, #0]
10005ef8:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10005efa:	f3ef 8310 	mrs	r3, PRIMASK
    __asm volatile ("cpsid i");
10005efe:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10005f00:	6811      	ldr	r1, [r2, #0]
10005f02:	2900      	cmp	r1, #0
10005f04:	d0fc      	beq.n	10005f00 <dcd_event_setup_received+0x24>
    __asm volatile ("dmb");
10005f06:	f3bf 8f5f 	dmb	sy
10005f0a:	61e3      	str	r3, [r4, #28]
10005f0c:	0029      	movs	r1, r5
10005f0e:	0020      	movs	r0, r4
10005f10:	f7ff fa34 	bl	1000537c <tu_fifo_write>
    spin_unlock(critsec->core.spin_lock, critsec->save);
10005f14:	69a2      	ldr	r2, [r4, #24]
10005f16:	69e3      	ldr	r3, [r4, #28]
10005f18:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10005f1c:	2100      	movs	r1, #0
10005f1e:	6011      	str	r1, [r2, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10005f20:	f383 8810 	msr	PRIMASK, r3
}
10005f24:	b005      	add	sp, #20
10005f26:	bd30      	pop	{r4, r5, pc}
10005f28:	20023280 	.word	0x20023280

10005f2c <dcd_event_xfer_complete>:
{
10005f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
10005f2e:	46c6      	mov	lr, r8
10005f30:	4680      	mov	r8, r0
10005f32:	b500      	push	{lr}
10005f34:	b084      	sub	sp, #16
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
10005f36:	ac01      	add	r4, sp, #4
{
10005f38:	000f      	movs	r7, r1
10005f3a:	0016      	movs	r6, r2
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
10005f3c:	2100      	movs	r1, #0
10005f3e:	2208      	movs	r2, #8
10005f40:	0020      	movs	r0, r4
{
10005f42:	001d      	movs	r5, r3
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
10005f44:	f7fb f8ce 	bl	100010e4 <__wrap_memset>
10005f48:	4643      	mov	r3, r8
10005f4a:	7023      	strb	r3, [r4, #0]
10005f4c:	2307      	movs	r3, #7
10005f4e:	7063      	strb	r3, [r4, #1]
      osal_queue_send(_usbd_q, event, in_isr);
10005f50:	4b0f      	ldr	r3, [pc, #60]	; (10005f90 <dcd_event_xfer_complete+0x64>)
  event.xfer_complete.result  = result;
10005f52:	7165      	strb	r5, [r4, #5]
      osal_queue_send(_usbd_q, event, in_isr);
10005f54:	681d      	ldr	r5, [r3, #0]
  event.xfer_complete.ep_addr = ep_addr;
10005f56:	7127      	strb	r7, [r4, #4]
  event.xfer_complete.len     = xferred_bytes;
10005f58:	60a6      	str	r6, [r4, #8]
    critsec->save = spin_lock_blocking(critsec->core.spin_lock);
10005f5a:	69aa      	ldr	r2, [r5, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10005f5c:	f3ef 8310 	mrs	r3, PRIMASK
    __asm volatile ("cpsid i");
10005f60:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10005f62:	6811      	ldr	r1, [r2, #0]
10005f64:	2900      	cmp	r1, #0
10005f66:	d0fc      	beq.n	10005f62 <dcd_event_xfer_complete+0x36>
    __asm volatile ("dmb");
10005f68:	f3bf 8f5f 	dmb	sy
10005f6c:	61eb      	str	r3, [r5, #28]
10005f6e:	0021      	movs	r1, r4
10005f70:	0028      	movs	r0, r5
10005f72:	f7ff fa03 	bl	1000537c <tu_fifo_write>
    spin_unlock(critsec->core.spin_lock, critsec->save);
10005f76:	69aa      	ldr	r2, [r5, #24]
10005f78:	69eb      	ldr	r3, [r5, #28]
10005f7a:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10005f7e:	2100      	movs	r1, #0
10005f80:	6011      	str	r1, [r2, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10005f82:	f383 8810 	msr	PRIMASK, r3
}
10005f86:	b004      	add	sp, #16
10005f88:	bc80      	pop	{r7}
10005f8a:	46b8      	mov	r8, r7
10005f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10005f8e:	46c0      	nop			; (mov r8, r8)
10005f90:	20023280 	.word	0x20023280

10005f94 <usbd_open_edpt_pair>:
{
10005f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10005f96:	4647      	mov	r7, r8
10005f98:	46d6      	mov	lr, sl
10005f9a:	b580      	push	{r7, lr}
10005f9c:	4698      	mov	r8, r3
10005f9e:	9b08      	ldr	r3, [sp, #32]
10005fa0:	0006      	movs	r6, r0
10005fa2:	000c      	movs	r4, r1
10005fa4:	1e17      	subs	r7, r2, #0
10005fa6:	469a      	mov	sl, r3
  for(int i=0; i<ep_count; i++)
10005fa8:	d021      	beq.n	10005fee <usbd_open_edpt_pair+0x5a>
10005faa:	2500      	movs	r5, #0
10005fac:	e006      	b.n	10005fbc <usbd_open_edpt_pair+0x28>
      (*ep_out) = desc_ep->bEndpointAddress;
10005fae:	4652      	mov	r2, sl
10005fb0:	7013      	strb	r3, [r2, #0]
10005fb2:	7823      	ldrb	r3, [r4, #0]
  for(int i=0; i<ep_count; i++)
10005fb4:	3501      	adds	r5, #1
10005fb6:	18e4      	adds	r4, r4, r3
10005fb8:	42bd      	cmp	r5, r7
10005fba:	da18      	bge.n	10005fee <usbd_open_edpt_pair+0x5a>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
10005fbc:	7863      	ldrb	r3, [r4, #1]
10005fbe:	2b05      	cmp	r3, #5
10005fc0:	d117      	bne.n	10005ff2 <usbd_open_edpt_pair+0x5e>
10005fc2:	78e1      	ldrb	r1, [r4, #3]
10005fc4:	0789      	lsls	r1, r1, #30
10005fc6:	0f89      	lsrs	r1, r1, #30
10005fc8:	4541      	cmp	r1, r8
10005fca:	d112      	bne.n	10005ff2 <usbd_open_edpt_pair+0x5e>
  return dcd_edpt_open(rhport, desc_ep);
10005fcc:	0021      	movs	r1, r4
10005fce:	0030      	movs	r0, r6
10005fd0:	f000 facc 	bl	1000656c <dcd_edpt_open>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
10005fd4:	2800      	cmp	r0, #0
10005fd6:	d00c      	beq.n	10005ff2 <usbd_open_edpt_pair+0x5e>
    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
10005fd8:	78a3      	ldrb	r3, [r4, #2]
10005fda:	09da      	lsrs	r2, r3, #7
10005fdc:	2a01      	cmp	r2, #1
10005fde:	d1e6      	bne.n	10005fae <usbd_open_edpt_pair+0x1a>
      (*ep_in) = desc_ep->bEndpointAddress;
10005fe0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  for(int i=0; i<ep_count; i++)
10005fe2:	3501      	adds	r5, #1
      (*ep_out) = desc_ep->bEndpointAddress;
10005fe4:	7013      	strb	r3, [r2, #0]
10005fe6:	7823      	ldrb	r3, [r4, #0]
10005fe8:	18e4      	adds	r4, r4, r3
  for(int i=0; i<ep_count; i++)
10005fea:	42bd      	cmp	r5, r7
10005fec:	dbe6      	blt.n	10005fbc <usbd_open_edpt_pair+0x28>
  return true;
10005fee:	2001      	movs	r0, #1
10005ff0:	e000      	b.n	10005ff4 <usbd_open_edpt_pair+0x60>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
10005ff2:	2000      	movs	r0, #0
}
10005ff4:	bcc0      	pop	{r6, r7}
10005ff6:	46ba      	mov	sl, r7
10005ff8:	46b0      	mov	r8, r6
10005ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10005ffc <usbd_edpt_open>:
{
10005ffc:	b510      	push	{r4, lr}
  return dcd_edpt_open(rhport, desc_ep);
10005ffe:	f000 fab5 	bl	1000656c <dcd_edpt_open>
}
10006002:	bd10      	pop	{r4, pc}

10006004 <usbd_edpt_claim>:
{
10006004:	b570      	push	{r4, r5, r6, lr}
  TU_VERIFY((_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0));
10006006:	247f      	movs	r4, #127	; 0x7f
10006008:	400c      	ands	r4, r1
1000600a:	0063      	lsls	r3, r4, #1
1000600c:	4c14      	ldr	r4, [pc, #80]	; (10006060 <usbd_edpt_claim+0x5c>)
1000600e:	09c9      	lsrs	r1, r1, #7
10006010:	18e4      	adds	r4, r4, r3
10006012:	1864      	adds	r4, r4, r1
10006014:	3420      	adds	r4, #32
10006016:	7963      	ldrb	r3, [r4, #5]
10006018:	07db      	lsls	r3, r3, #31
1000601a:	0fdd      	lsrs	r5, r3, #31
1000601c:	2b00      	cmp	r3, #0
1000601e:	d118      	bne.n	10006052 <usbd_edpt_claim+0x4e>
10006020:	7963      	ldrb	r3, [r4, #5]
10006022:	075b      	lsls	r3, r3, #29
10006024:	d501      	bpl.n	1000602a <usbd_edpt_claim+0x26>
}
10006026:	0028      	movs	r0, r5
10006028:	bd70      	pop	{r4, r5, r6, pc}
    return mutex_enter_timeout_ms(mutex_hdl, msec);
1000602a:	2101      	movs	r1, #1
  osal_mutex_lock(_usbd_mutex, OSAL_TIMEOUT_WAIT_FOREVER);
1000602c:	4e0d      	ldr	r6, [pc, #52]	; (10006064 <usbd_edpt_claim+0x60>)
1000602e:	4249      	negs	r1, r1
10006030:	6830      	ldr	r0, [r6, #0]
10006032:	f002 fe25 	bl	10008c80 <__mutex_enter_timeout_ms_veneer>
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0);
10006036:	7963      	ldrb	r3, [r4, #5]
10006038:	07db      	lsls	r3, r3, #31
1000603a:	0fdd      	lsrs	r5, r3, #31
1000603c:	2b00      	cmp	r3, #0
1000603e:	d10a      	bne.n	10006056 <usbd_edpt_claim+0x52>
10006040:	7963      	ldrb	r3, [r4, #5]
10006042:	075b      	lsls	r3, r3, #29
10006044:	d408      	bmi.n	10006058 <usbd_edpt_claim+0x54>
    _usbd_dev.ep_status[epnum][dir].claimed = 1;
10006046:	2204      	movs	r2, #4
10006048:	7963      	ldrb	r3, [r4, #5]
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0);
1000604a:	2501      	movs	r5, #1
    _usbd_dev.ep_status[epnum][dir].claimed = 1;
1000604c:	4313      	orrs	r3, r2
1000604e:	7163      	strb	r3, [r4, #5]
10006050:	e002      	b.n	10006058 <usbd_edpt_claim+0x54>
  TU_VERIFY((_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0));
10006052:	2500      	movs	r5, #0
10006054:	e7e7      	b.n	10006026 <usbd_edpt_claim+0x22>
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0);
10006056:	2500      	movs	r5, #0
    mutex_exit(mutex_hdl);
10006058:	6830      	ldr	r0, [r6, #0]
1000605a:	f002 fdf1 	bl	10008c40 <__mutex_exit_veneer>
  return ret;
1000605e:	e7e2      	b.n	10006026 <usbd_edpt_claim+0x22>
10006060:	20023244 	.word	0x20023244
10006064:	2002327c 	.word	0x2002327c

10006068 <usbd_edpt_release>:
{
10006068:	b570      	push	{r4, r5, r6, lr}
1000606a:	000c      	movs	r4, r1
    return mutex_enter_timeout_ms(mutex_hdl, msec);
1000606c:	2101      	movs	r1, #1
  osal_mutex_lock(_usbd_mutex, OSAL_TIMEOUT_WAIT_FOREVER);
1000606e:	4d0f      	ldr	r5, [pc, #60]	; (100060ac <usbd_edpt_release+0x44>)
10006070:	4249      	negs	r1, r1
10006072:	6828      	ldr	r0, [r5, #0]
10006074:	f002 fe04 	bl	10008c80 <__mutex_enter_timeout_ms_veneer>
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 1);
10006078:	217f      	movs	r1, #127	; 0x7f
1000607a:	4021      	ands	r1, r4
1000607c:	004b      	lsls	r3, r1, #1
1000607e:	490c      	ldr	r1, [pc, #48]	; (100060b0 <usbd_edpt_release+0x48>)
10006080:	09e4      	lsrs	r4, r4, #7
10006082:	18c9      	adds	r1, r1, r3
10006084:	1909      	adds	r1, r1, r4
10006086:	3120      	adds	r1, #32
10006088:	794b      	ldrb	r3, [r1, #5]
1000608a:	2400      	movs	r4, #0
1000608c:	07db      	lsls	r3, r3, #31
1000608e:	d408      	bmi.n	100060a2 <usbd_edpt_release+0x3a>
10006090:	794b      	ldrb	r3, [r1, #5]
10006092:	075b      	lsls	r3, r3, #29
10006094:	0fdc      	lsrs	r4, r3, #31
10006096:	2b00      	cmp	r3, #0
10006098:	da03      	bge.n	100060a2 <usbd_edpt_release+0x3a>
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
1000609a:	2204      	movs	r2, #4
1000609c:	794b      	ldrb	r3, [r1, #5]
1000609e:	4393      	bics	r3, r2
100060a0:	714b      	strb	r3, [r1, #5]
    mutex_exit(mutex_hdl);
100060a2:	6828      	ldr	r0, [r5, #0]
100060a4:	f002 fdcc 	bl	10008c40 <__mutex_exit_veneer>
}
100060a8:	0020      	movs	r0, r4
100060aa:	bd70      	pop	{r4, r5, r6, pc}
100060ac:	2002327c 	.word	0x2002327c
100060b0:	20023244 	.word	0x20023244

100060b4 <usbd_edpt_xfer>:
{
100060b4:	b570      	push	{r4, r5, r6, lr}
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
100060b6:	257f      	movs	r5, #127	; 0x7f
100060b8:	4c0f      	ldr	r4, [pc, #60]	; (100060f8 <usbd_edpt_xfer+0x44>)
100060ba:	400d      	ands	r5, r1
100060bc:	006d      	lsls	r5, r5, #1
100060be:	1964      	adds	r4, r4, r5
{
100060c0:	0006      	movs	r6, r0
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
100060c2:	09c8      	lsrs	r0, r1, #7
100060c4:	1824      	adds	r4, r4, r0
100060c6:	3420      	adds	r4, #32
100060c8:	7965      	ldrb	r5, [r4, #5]
100060ca:	2000      	movs	r0, #0
100060cc:	07ed      	lsls	r5, r5, #31
100060ce:	d500      	bpl.n	100060d2 <usbd_edpt_xfer+0x1e>
}
100060d0:	bd70      	pop	{r4, r5, r6, pc}
  _usbd_dev.ep_status[epnum][dir].busy = true;
100060d2:	2501      	movs	r5, #1
100060d4:	7960      	ldrb	r0, [r4, #5]
100060d6:	4328      	orrs	r0, r5
100060d8:	7160      	strb	r0, [r4, #5]
  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
100060da:	0030      	movs	r0, r6
100060dc:	f000 faec 	bl	100066b8 <dcd_edpt_xfer>
100060e0:	2800      	cmp	r0, #0
100060e2:	d1f5      	bne.n	100060d0 <usbd_edpt_xfer+0x1c>
    _usbd_dev.ep_status[epnum][dir].busy = false;
100060e4:	2201      	movs	r2, #1
100060e6:	7963      	ldrb	r3, [r4, #5]
100060e8:	4393      	bics	r3, r2
100060ea:	7163      	strb	r3, [r4, #5]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
100060ec:	7963      	ldrb	r3, [r4, #5]
100060ee:	3203      	adds	r2, #3
100060f0:	4393      	bics	r3, r2
100060f2:	7163      	strb	r3, [r4, #5]
    return false;
100060f4:	e7ec      	b.n	100060d0 <usbd_edpt_xfer+0x1c>
100060f6:	46c0      	nop			; (mov r8, r8)
100060f8:	20023244 	.word	0x20023244

100060fc <tud_control_status>:
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
}

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
100060fc:	b570      	push	{r4, r5, r6, lr}
  _ctrl_xfer.request       = (*request);
100060fe:	4e0a      	ldr	r6, [pc, #40]	; (10006128 <tud_control_status+0x2c>)
{
10006100:	0005      	movs	r5, r0
  _ctrl_xfer.request       = (*request);
10006102:	0030      	movs	r0, r6
10006104:	2208      	movs	r2, #8
{
10006106:	000c      	movs	r4, r1
  _ctrl_xfer.request       = (*request);
10006108:	f7fa fff2 	bl	100010f0 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer        = NULL;
1000610c:	2300      	movs	r3, #0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
1000610e:	217f      	movs	r1, #127	; 0x7f
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
10006110:	60f3      	str	r3, [r6, #12]
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10006112:	7822      	ldrb	r2, [r4, #0]
  _ctrl_xfer.buffer        = NULL;
10006114:	60b3      	str	r3, [r6, #8]
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10006116:	4291      	cmp	r1, r2
10006118:	415b      	adcs	r3, r3
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
1000611a:	0028      	movs	r0, r5
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
1000611c:	01d9      	lsls	r1, r3, #7
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
1000611e:	2200      	movs	r2, #0
10006120:	2300      	movs	r3, #0
10006122:	f000 fac9 	bl	100066b8 <dcd_edpt_xfer>

  return _status_stage_xact(rhport, request);
}
10006126:	bd70      	pop	{r4, r5, r6, pc}
10006128:	200231e8 	.word	0x200231e8

1000612c <tud_control_xfer>:
}

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
1000612c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000612e:	46ce      	mov	lr, r9
10006130:	4647      	mov	r7, r8
10006132:	4691      	mov	r9, r2
  _ctrl_xfer.request       = (*request);
10006134:	4e2a      	ldr	r6, [pc, #168]	; (100061e0 <tud_control_xfer+0xb4>)
{
10006136:	b580      	push	{r7, lr}
  _ctrl_xfer.request       = (*request);
10006138:	2208      	movs	r2, #8
{
1000613a:	0007      	movs	r7, r0
  _ctrl_xfer.request       = (*request);
1000613c:	0030      	movs	r0, r6
{
1000613e:	000d      	movs	r5, r1
10006140:	4698      	mov	r8, r3
  _ctrl_xfer.request       = (*request);
10006142:	f7fa ffd5 	bl	100010f0 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
10006146:	464b      	mov	r3, r9
10006148:	60b3      	str	r3, [r6, #8]
  _ctrl_xfer.total_xferred = 0U;
1000614a:	2300      	movs	r3, #0
1000614c:	81f3      	strh	r3, [r6, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
1000614e:	79ec      	ldrb	r4, [r5, #7]
10006150:	79a9      	ldrb	r1, [r5, #6]
10006152:	0224      	lsls	r4, r4, #8
10006154:	430c      	orrs	r4, r1
static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
10006156:	1c23      	adds	r3, r4, #0
10006158:	4544      	cmp	r4, r8
1000615a:	d900      	bls.n	1000615e <tud_control_xfer+0x32>
1000615c:	4643      	mov	r3, r8
1000615e:	b29a      	uxth	r2, r3
10006160:	4690      	mov	r8, r2
10006162:	81b3      	strh	r3, [r6, #12]
  
  if (request->wLength > 0U)
10006164:	2c00      	cmp	r4, #0
10006166:	d013      	beq.n	10006190 <tud_control_xfer+0x64>
  {
    if(_ctrl_xfer.data_len > 0U)
10006168:	2a00      	cmp	r2, #0
1000616a:	d01f      	beq.n	100061ac <tud_control_xfer+0x80>
    {
      TU_ASSERT(buffer);
1000616c:	464b      	mov	r3, r9
1000616e:	2b00      	cmp	r3, #0
10006170:	d034      	beq.n	100061dc <tud_control_xfer+0xb0>
10006172:	1c13      	adds	r3, r2, #0
10006174:	2a40      	cmp	r2, #64	; 0x40
10006176:	d81f      	bhi.n	100061b8 <tud_control_xfer+0x8c>
10006178:	b29b      	uxth	r3, r3
1000617a:	4698      	mov	r8, r3
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
1000617c:	7833      	ldrb	r3, [r6, #0]
1000617e:	2b7f      	cmp	r3, #127	; 0x7f
10006180:	d820      	bhi.n	100061c4 <tud_control_xfer+0x98>
10006182:	2100      	movs	r1, #0
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
10006184:	4a17      	ldr	r2, [pc, #92]	; (100061e4 <tud_control_xfer+0xb8>)
10006186:	4643      	mov	r3, r8
10006188:	0038      	movs	r0, r7
1000618a:	f000 fa95 	bl	100066b8 <dcd_edpt_xfer>
1000618e:	e009      	b.n	100061a4 <tud_control_xfer+0x78>
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10006190:	227f      	movs	r2, #127	; 0x7f
10006192:	782b      	ldrb	r3, [r5, #0]
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
10006194:	0038      	movs	r0, r7
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10006196:	429a      	cmp	r2, r3
10006198:	4164      	adcs	r4, r4
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
1000619a:	2300      	movs	r3, #0
1000619c:	2200      	movs	r2, #0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
1000619e:	01e1      	lsls	r1, r4, #7
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
100061a0:	f000 fa8a 	bl	100066b8 <dcd_edpt_xfer>
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
  }

  return true;
}
100061a4:	bcc0      	pop	{r6, r7}
100061a6:	46b9      	mov	r9, r7
100061a8:	46b0      	mov	r8, r6
100061aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
100061ac:	7833      	ldrb	r3, [r6, #0]
100061ae:	2b7f      	cmp	r3, #127	; 0x7f
100061b0:	d911      	bls.n	100061d6 <tud_control_xfer+0xaa>
    ep_addr = EDPT_CTRL_IN;
100061b2:	2180      	movs	r1, #128	; 0x80
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
100061b4:	2200      	movs	r2, #0
100061b6:	e7e6      	b.n	10006186 <tud_control_xfer+0x5a>
100061b8:	2340      	movs	r3, #64	; 0x40
100061ba:	b29b      	uxth	r3, r3
100061bc:	4698      	mov	r8, r3
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
100061be:	7833      	ldrb	r3, [r6, #0]
100061c0:	2b7f      	cmp	r3, #127	; 0x7f
100061c2:	d9de      	bls.n	10006182 <tud_control_xfer+0x56>
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
100061c4:	4c07      	ldr	r4, [pc, #28]	; (100061e4 <tud_control_xfer+0xb8>)
100061c6:	4642      	mov	r2, r8
100061c8:	4649      	mov	r1, r9
100061ca:	0020      	movs	r0, r4
100061cc:	f7fa ff90 	bl	100010f0 <__wrap___aeabi_memcpy>
    ep_addr = EDPT_CTRL_IN;
100061d0:	2180      	movs	r1, #128	; 0x80
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
100061d2:	0022      	movs	r2, r4
100061d4:	e7d7      	b.n	10006186 <tud_control_xfer+0x5a>
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
100061d6:	2100      	movs	r1, #0
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
100061d8:	2200      	movs	r2, #0
100061da:	e7d4      	b.n	10006186 <tud_control_xfer+0x5a>
      TU_ASSERT(buffer);
100061dc:	2000      	movs	r0, #0
100061de:	e7e1      	b.n	100061a4 <tud_control_xfer+0x78>
100061e0:	200231e8 	.word	0x200231e8
100061e4:	20023204 	.word	0x20023204

100061e8 <usbd_control_reset>:
//--------------------------------------------------------------------+
// USBD API
//--------------------------------------------------------------------+

void usbd_control_reset(void)
{
100061e8:	b510      	push	{r4, lr}
  tu_varclr(&_ctrl_xfer);
100061ea:	2214      	movs	r2, #20
100061ec:	2100      	movs	r1, #0
100061ee:	4802      	ldr	r0, [pc, #8]	; (100061f8 <usbd_control_reset+0x10>)
100061f0:	f7fa ff78 	bl	100010e4 <__wrap_memset>
}
100061f4:	bd10      	pop	{r4, pc}
100061f6:	46c0      	nop			; (mov r8, r8)
100061f8:	200231e8 	.word	0x200231e8

100061fc <usbd_control_set_complete_callback>:

// TODO may find a better way
void usbd_control_set_complete_callback( bool (*fp) (uint8_t, tusb_control_request_t const * ) )
{
  _ctrl_xfer.complete_cb = fp;
100061fc:	4b01      	ldr	r3, [pc, #4]	; (10006204 <usbd_control_set_complete_callback+0x8>)
100061fe:	6118      	str	r0, [r3, #16]
}
10006200:	4770      	bx	lr
10006202:	46c0      	nop			; (mov r8, r8)
10006204:	200231e8 	.word	0x200231e8

10006208 <usbd_control_set_request>:

// useful for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
10006208:	b510      	push	{r4, lr}
  _ctrl_xfer.request       = (*request);
1000620a:	4c05      	ldr	r4, [pc, #20]	; (10006220 <usbd_control_set_request+0x18>)
{
1000620c:	0001      	movs	r1, r0
  _ctrl_xfer.request       = (*request);
1000620e:	2208      	movs	r2, #8
10006210:	0020      	movs	r0, r4
10006212:	f7fa ff6d 	bl	100010f0 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer        = NULL;
10006216:	2300      	movs	r3, #0
10006218:	60a3      	str	r3, [r4, #8]
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
1000621a:	60e3      	str	r3, [r4, #12]
}
1000621c:	bd10      	pop	{r4, pc}
1000621e:	46c0      	nop			; (mov r8, r8)
10006220:	200231e8 	.word	0x200231e8

10006224 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
10006224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
10006226:	4d37      	ldr	r5, [pc, #220]	; (10006304 <usbd_control_xfer_cb+0xe0>)
{
10006228:	001c      	movs	r4, r3
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
1000622a:	782b      	ldrb	r3, [r5, #0]
{
1000622c:	0006      	movs	r6, r0
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
1000622e:	09da      	lsrs	r2, r3, #7
10006230:	09c9      	lsrs	r1, r1, #7
10006232:	428a      	cmp	r2, r1
10006234:	d00c      	beq.n	10006250 <usbd_control_xfer_cb+0x2c>
  {
    TU_ASSERT(0 == xferred_bytes);
10006236:	2700      	movs	r7, #0
10006238:	2c00      	cmp	r4, #0
1000623a:	d001      	beq.n	10006240 <usbd_control_xfer_cb+0x1c>
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
  }

  return true;
}
1000623c:	0038      	movs	r0, r7
1000623e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
10006240:	4b31      	ldr	r3, [pc, #196]	; (10006308 <usbd_control_xfer_cb+0xe4>)
    return true;
10006242:	3701      	adds	r7, #1
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
10006244:	2b00      	cmp	r3, #0
10006246:	d0f9      	beq.n	1000623c <usbd_control_xfer_cb+0x18>
10006248:	0029      	movs	r1, r5
1000624a:	f000 f973 	bl	10006534 <dcd_edpt0_status_complete>
1000624e:	e7f5      	b.n	1000623c <usbd_control_xfer_cb+0x18>
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
10006250:	2b7f      	cmp	r3, #127	; 0x7f
10006252:	d806      	bhi.n	10006262 <usbd_control_xfer_cb+0x3e>
    TU_VERIFY(_ctrl_xfer.buffer);
10006254:	68a8      	ldr	r0, [r5, #8]
10006256:	2800      	cmp	r0, #0
10006258:	d038      	beq.n	100062cc <usbd_control_xfer_cb+0xa8>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
1000625a:	0022      	movs	r2, r4
1000625c:	492b      	ldr	r1, [pc, #172]	; (1000630c <usbd_control_xfer_cb+0xe8>)
1000625e:	f7fa ff47 	bl	100010f0 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer += xferred_bytes;
10006262:	68ab      	ldr	r3, [r5, #8]
  _ctrl_xfer.total_xferred += xferred_bytes;
10006264:	89ea      	ldrh	r2, [r5, #14]
  _ctrl_xfer.buffer += xferred_bytes;
10006266:	1919      	adds	r1, r3, r4
  _ctrl_xfer.total_xferred += xferred_bytes;
10006268:	1912      	adds	r2, r2, r4
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
1000626a:	88eb      	ldrh	r3, [r5, #6]
  _ctrl_xfer.total_xferred += xferred_bytes;
1000626c:	b292      	uxth	r2, r2
1000626e:	81ea      	strh	r2, [r5, #14]
  _ctrl_xfer.buffer += xferred_bytes;
10006270:	60a9      	str	r1, [r5, #8]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
10006272:	4293      	cmp	r3, r2
10006274:	d015      	beq.n	100062a2 <usbd_control_xfer_cb+0x7e>
10006276:	2c3f      	cmp	r4, #63	; 0x3f
10006278:	d913      	bls.n	100062a2 <usbd_control_xfer_cb+0x7e>
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
1000627a:	89ac      	ldrh	r4, [r5, #12]
1000627c:	1aa0      	subs	r0, r4, r2
1000627e:	1c07      	adds	r7, r0, #0
10006280:	b280      	uxth	r0, r0
10006282:	2840      	cmp	r0, #64	; 0x40
10006284:	d82e      	bhi.n	100062e4 <usbd_control_xfer_cb+0xc0>
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
10006286:	782b      	ldrb	r3, [r5, #0]
10006288:	b2bf      	uxth	r7, r7
1000628a:	2b7f      	cmp	r3, #127	; 0x7f
1000628c:	d82c      	bhi.n	100062e8 <usbd_control_xfer_cb+0xc4>
  uint8_t ep_addr = EDPT_CTRL_OUT;
1000628e:	2100      	movs	r1, #0
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
10006290:	42a2      	cmp	r2, r4
10006292:	d034      	beq.n	100062fe <usbd_control_xfer_cb+0xda>
10006294:	4a1d      	ldr	r2, [pc, #116]	; (1000630c <usbd_control_xfer_cb+0xe8>)
10006296:	003b      	movs	r3, r7
10006298:	0030      	movs	r0, r6
1000629a:	f000 fa0d 	bl	100066b8 <dcd_edpt_xfer>
1000629e:	0007      	movs	r7, r0
100062a0:	e7cc      	b.n	1000623c <usbd_control_xfer_cb+0x18>
    if ( _ctrl_xfer.complete_cb )
100062a2:	692b      	ldr	r3, [r5, #16]
100062a4:	2b00      	cmp	r3, #0
100062a6:	d004      	beq.n	100062b2 <usbd_control_xfer_cb+0x8e>
      is_ok = _ctrl_xfer.complete_cb(rhport, &_ctrl_xfer.request);
100062a8:	0029      	movs	r1, r5
100062aa:	0030      	movs	r0, r6
100062ac:	4798      	blx	r3
    if ( is_ok )
100062ae:	2800      	cmp	r0, #0
100062b0:	d00e      	beq.n	100062d0 <usbd_control_xfer_cb+0xac>
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
100062b2:	227f      	movs	r2, #127	; 0x7f
100062b4:	2100      	movs	r1, #0
100062b6:	782b      	ldrb	r3, [r5, #0]
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
100062b8:	0030      	movs	r0, r6
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
100062ba:	429a      	cmp	r2, r3
100062bc:	4149      	adcs	r1, r1
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
100062be:	2300      	movs	r3, #0
100062c0:	2200      	movs	r2, #0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
100062c2:	01c9      	lsls	r1, r1, #7
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
100062c4:	f000 f9f8 	bl	100066b8 <dcd_edpt_xfer>
100062c8:	0007      	movs	r7, r0
100062ca:	e7b7      	b.n	1000623c <usbd_control_xfer_cb+0x18>
    TU_ASSERT(0 == xferred_bytes);
100062cc:	2700      	movs	r7, #0
100062ce:	e7b5      	b.n	1000623c <usbd_control_xfer_cb+0x18>
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
100062d0:	2100      	movs	r1, #0
100062d2:	0030      	movs	r0, r6
100062d4:	f000 fa06 	bl	100066e4 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
100062d8:	2180      	movs	r1, #128	; 0x80
100062da:	0030      	movs	r0, r6
100062dc:	f000 fa02 	bl	100066e4 <dcd_edpt_stall>
  return true;
100062e0:	2701      	movs	r7, #1
100062e2:	e7ab      	b.n	1000623c <usbd_control_xfer_cb+0x18>
100062e4:	2740      	movs	r7, #64	; 0x40
100062e6:	e7ce      	b.n	10006286 <usbd_control_xfer_cb+0x62>
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
100062e8:	42a2      	cmp	r2, r4
100062ea:	d007      	beq.n	100062fc <usbd_control_xfer_cb+0xd8>
100062ec:	4c07      	ldr	r4, [pc, #28]	; (1000630c <usbd_control_xfer_cb+0xe8>)
100062ee:	003a      	movs	r2, r7
100062f0:	0020      	movs	r0, r4
100062f2:	f7fa fefd 	bl	100010f0 <__wrap___aeabi_memcpy>
    ep_addr = EDPT_CTRL_IN;
100062f6:	2180      	movs	r1, #128	; 0x80
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
100062f8:	0022      	movs	r2, r4
100062fa:	e7cc      	b.n	10006296 <usbd_control_xfer_cb+0x72>
    ep_addr = EDPT_CTRL_IN;
100062fc:	2180      	movs	r1, #128	; 0x80
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
100062fe:	2200      	movs	r2, #0
10006300:	e7c9      	b.n	10006296 <usbd_control_xfer_cb+0x72>
10006302:	46c0      	nop			; (mov r8, r8)
10006304:	200231e8 	.word	0x200231e8
10006308:	10006535 	.word	0x10006535
1000630c:	20023204 	.word	0x20023204

10006310 <dcd_rp2040_irq>:
    _hw_endpoint_clear_stall(ep);
}

static void dcd_rp2040_irq(void)
{
    uint32_t status = usb_hw->ints;
10006310:	2398      	movs	r3, #152	; 0x98
{
10006312:	b5f0      	push	{r4, r5, r6, r7, lr}
10006314:	4645      	mov	r5, r8
10006316:	46de      	mov	lr, fp
10006318:	4657      	mov	r7, sl
1000631a:	464e      	mov	r6, r9
    uint32_t status = usb_hw->ints;
1000631c:	4a42      	ldr	r2, [pc, #264]	; (10006428 <dcd_rp2040_irq+0x118>)
{
1000631e:	b5e0      	push	{r5, r6, r7, lr}
    uint32_t status = usb_hw->ints;
10006320:	58d3      	ldr	r3, [r2, r3]
    uint32_t handled = 0;

    if (status & USB_INTS_SETUP_REQ_BITS)
10006322:	2480      	movs	r4, #128	; 0x80
    uint32_t status = usb_hw->ints;
10006324:	4698      	mov	r8, r3
    if (status & USB_INTS_SETUP_REQ_BITS)
10006326:	001d      	movs	r5, r3
10006328:	2310      	movs	r3, #16
{
1000632a:	b085      	sub	sp, #20
1000632c:	9303      	str	r3, [sp, #12]
    if (status & USB_INTS_SETUP_REQ_BITS)
1000632e:	4643      	mov	r3, r8
10006330:	0264      	lsls	r4, r4, #9
10006332:	4025      	ands	r5, r4
10006334:	4223      	tst	r3, r4
10006336:	d014      	beq.n	10006362 <dcd_rp2040_irq+0x52>
        ep->next_pid = 1u;
10006338:	2101      	movs	r1, #1
1000633a:	2039      	movs	r0, #57	; 0x39
        ep->stalled  = 0;
1000633c:	2200      	movs	r2, #0
        ep->next_pid = 1u;
1000633e:	4b3b      	ldr	r3, [pc, #236]	; (1000642c <dcd_rp2040_irq+0x11c>)
    {
        handled |= USB_INTS_SETUP_REQ_BITS;
10006340:	0025      	movs	r5, r4
        ep->next_pid = 1u;
10006342:	5419      	strb	r1, [r3, r0]
10006344:	7159      	strb	r1, [r3, #5]
        ep->stalled  = 0;
10006346:	3147      	adds	r1, #71	; 0x47
10006348:	545a      	strb	r2, [r3, r1]
1000634a:	751a      	strb	r2, [r3, #20]
        uint8_t const *setup = (uint8_t const *)&usb_dpram->setup_packet;
        // Clear stall bits and reset pid
        reset_ep0();
        // Pass setup packet to tiny usb
        dcd_event_setup_received(0, setup, true);
1000634c:	2000      	movs	r0, #0
1000634e:	3201      	adds	r2, #1
10006350:	4937      	ldr	r1, [pc, #220]	; (10006430 <dcd_rp2040_irq+0x120>)
10006352:	f7ff fdc3 	bl	10005edc <dcd_event_setup_received>
        usb_hw_clear->sie_status = USB_SIE_STATUS_SETUP_REC_BITS;
10006356:	2280      	movs	r2, #128	; 0x80
10006358:	4b36      	ldr	r3, [pc, #216]	; (10006434 <dcd_rp2040_irq+0x124>)
1000635a:	0292      	lsls	r2, r2, #10
1000635c:	651a      	str	r2, [r3, #80]	; 0x50
1000635e:	4b36      	ldr	r3, [pc, #216]	; (10006438 <dcd_rp2040_irq+0x128>)
10006360:	9303      	str	r3, [sp, #12]
    }

    if (status & USB_INTS_BUFF_STATUS_BITS)
10006362:	4643      	mov	r3, r8
10006364:	06db      	lsls	r3, r3, #27
10006366:	d40d      	bmi.n	10006384 <dcd_rp2040_irq+0x74>
    {
        handled |= USB_INTS_BUFF_STATUS_BITS;
        hw_handle_buff_status();
    }

    if (status & USB_INTS_BUS_RESET_BITS)
10006368:	2380      	movs	r3, #128	; 0x80
1000636a:	4642      	mov	r2, r8
1000636c:	015b      	lsls	r3, r3, #5
1000636e:	421a      	tst	r2, r3
10006370:	d138      	bne.n	100063e4 <dcd_rp2040_irq+0xd4>
#if TUD_OPT_RP2040_USB_DEVICE_ENUMERATION_FIX
        rp2040_usb_device_enumeration_fix();
#endif
    }

    if (status ^ handled)
10006372:	4545      	cmp	r5, r8
10006374:	d152      	bne.n	1000641c <dcd_rp2040_irq+0x10c>
    {
        panic("Unhandled IRQ 0x%x\n", (uint) (status ^ handled));
    }
}
10006376:	b005      	add	sp, #20
10006378:	bcf0      	pop	{r4, r5, r6, r7}
1000637a:	46bb      	mov	fp, r7
1000637c:	46b2      	mov	sl, r6
1000637e:	46a9      	mov	r9, r5
10006380:	46a0      	mov	r8, r4
10006382:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t remaining_buffers = usb_hw->buf_status;
10006384:	4b28      	ldr	r3, [pc, #160]	; (10006428 <dcd_rp2040_irq+0x118>)
10006386:	6d9f      	ldr	r7, [r3, #88]	; 0x58
10006388:	469a      	mov	sl, r3
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
1000638a:	2f00      	cmp	r7, #0
1000638c:	d024      	beq.n	100063d8 <dcd_rp2040_irq+0xc8>
            usb_hw_clear->buf_status = bit;
1000638e:	4b29      	ldr	r3, [pc, #164]	; (10006434 <dcd_rp2040_irq+0x124>)
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
10006390:	2500      	movs	r5, #0
    uint bit = 1u;
10006392:	2401      	movs	r4, #1
            usb_hw_clear->buf_status = bit;
10006394:	469b      	mov	fp, r3
10006396:	e003      	b.n	100063a0 <dcd_rp2040_irq+0x90>
        bit <<= 1u;
10006398:	0064      	lsls	r4, r4, #1
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
1000639a:	3501      	adds	r5, #1
1000639c:	2d20      	cmp	r5, #32
1000639e:	d01b      	beq.n	100063d8 <dcd_rp2040_irq+0xc8>
        if (remaining_buffers & bit)
100063a0:	4227      	tst	r7, r4
100063a2:	d0f9      	beq.n	10006398 <dcd_rp2040_irq+0x88>
            uint __unused which = (usb_hw->buf_cpu_should_handle & bit) ? 1 : 0;
100063a4:	4653      	mov	r3, sl
100063a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            usb_hw_clear->buf_status = bit;
100063a8:	465b      	mov	r3, fp
    return &hw_endpoints[num][in];
100063aa:	2668      	movs	r6, #104	; 0x68
100063ac:	2201      	movs	r2, #1
            usb_hw_clear->buf_status = bit;
100063ae:	659c      	str	r4, [r3, #88]	; 0x58
            struct hw_endpoint *ep = hw_endpoint_get_by_num(i >> 1u, !(i & 1u));
100063b0:	086b      	lsrs	r3, r5, #1
    return &hw_endpoints[num][in];
100063b2:	435e      	muls	r6, r3
100063b4:	2334      	movs	r3, #52	; 0x34
100063b6:	4691      	mov	r9, r2
100063b8:	43aa      	bics	r2, r5
100063ba:	4353      	muls	r3, r2
100063bc:	18f6      	adds	r6, r6, r3
100063be:	4b1b      	ldr	r3, [pc, #108]	; (1000642c <dcd_rp2040_irq+0x11c>)
100063c0:	469c      	mov	ip, r3
100063c2:	4466      	add	r6, ip
            bool done = _hw_endpoint_xfer_continue(ep);
100063c4:	0030      	movs	r0, r6
100063c6:	f000 fa3d 	bl	10006844 <_hw_endpoint_xfer_continue>
            if (done)
100063ca:	2800      	cmp	r0, #0
100063cc:	d11a      	bne.n	10006404 <dcd_rp2040_irq+0xf4>
            remaining_buffers &= ~bit;
100063ce:	43a7      	bics	r7, r4
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
100063d0:	3501      	adds	r5, #1
        bit <<= 1u;
100063d2:	0064      	lsls	r4, r4, #1
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
100063d4:	2f00      	cmp	r7, #0
100063d6:	d1e1      	bne.n	1000639c <dcd_rp2040_irq+0x8c>
    if (status & USB_INTS_BUS_RESET_BITS)
100063d8:	2380      	movs	r3, #128	; 0x80
100063da:	4642      	mov	r2, r8
100063dc:	015b      	lsls	r3, r3, #5
        handled |= USB_INTS_BUFF_STATUS_BITS;
100063de:	9d03      	ldr	r5, [sp, #12]
    if (status & USB_INTS_BUS_RESET_BITS)
100063e0:	421a      	tst	r2, r3
100063e2:	d0c6      	beq.n	10006372 <dcd_rp2040_irq+0x62>
        assigned_address = 0;
100063e4:	2200      	movs	r2, #0
100063e6:	4915      	ldr	r1, [pc, #84]	; (1000643c <dcd_rp2040_irq+0x12c>)
        dcd_event_bus_signal(0, DCD_EVENT_BUS_RESET, true);
100063e8:	2000      	movs	r0, #0
        assigned_address = 0;
100063ea:	700a      	strb	r2, [r1, #0]
        usb_hw->dev_addr_ctrl = assigned_address;
100063ec:	490e      	ldr	r1, [pc, #56]	; (10006428 <dcd_rp2040_irq+0x118>)
        handled |= USB_INTS_BUS_RESET_BITS;
100063ee:	431d      	orrs	r5, r3
        usb_hw->dev_addr_ctrl = assigned_address;
100063f0:	600a      	str	r2, [r1, #0]
        dcd_event_bus_signal(0, DCD_EVENT_BUS_RESET, true);
100063f2:	3201      	adds	r2, #1
100063f4:	2101      	movs	r1, #1
100063f6:	f7ff fd01 	bl	10005dfc <dcd_event_bus_signal>
        usb_hw_clear->sie_status = USB_SIE_STATUS_BUS_RESET_BITS;
100063fa:	2280      	movs	r2, #128	; 0x80
100063fc:	4b0d      	ldr	r3, [pc, #52]	; (10006434 <dcd_rp2040_irq+0x124>)
100063fe:	0312      	lsls	r2, r2, #12
10006400:	651a      	str	r2, [r3, #80]	; 0x50
10006402:	e7b6      	b.n	10006372 <dcd_rp2040_irq+0x62>
                dcd_event_xfer_complete(0, ep->ep_addr, ep->len, XFER_RESULT_SUCCESS, true);
10006404:	464b      	mov	r3, r9
10006406:	69f2      	ldr	r2, [r6, #28]
10006408:	7931      	ldrb	r1, [r6, #4]
1000640a:	2000      	movs	r0, #0
1000640c:	9300      	str	r3, [sp, #0]
1000640e:	2300      	movs	r3, #0
10006410:	f7ff fd8c 	bl	10005f2c <dcd_event_xfer_complete>
                hw_endpoint_reset_transfer(ep);
10006414:	0030      	movs	r0, r6
10006416:	f000 f9e9 	bl	100067ec <hw_endpoint_reset_transfer>
1000641a:	e7d8      	b.n	100063ce <dcd_rp2040_irq+0xbe>
        panic("Unhandled IRQ 0x%x\n", (uint) (status ^ handled));
1000641c:	4641      	mov	r1, r8
1000641e:	4808      	ldr	r0, [pc, #32]	; (10006440 <dcd_rp2040_irq+0x130>)
10006420:	4069      	eors	r1, r5
10006422:	f7fd faeb 	bl	100039fc <panic>
10006426:	46c0      	nop			; (mov r8, r8)
10006428:	50110000 	.word	0x50110000
1000642c:	200234c4 	.word	0x200234c4
10006430:	50100000 	.word	0x50100000
10006434:	50113000 	.word	0x50113000
10006438:	00010010 	.word	0x00010010
1000643c:	20023b87 	.word	0x20023b87
10006440:	1000915c 	.word	0x1000915c

10006444 <dcd_int_enable>:

    dcd_connect(rhport);
}

void dcd_int_enable(uint8_t rhport)
{
10006444:	b510      	push	{r4, lr}
    assert(rhport == 0);
    irq_set_enabled(USBCTRL_IRQ, true);
10006446:	2101      	movs	r1, #1
10006448:	2005      	movs	r0, #5
1000644a:	f7fb fa1f 	bl	1000188c <irq_set_enabled>
}
1000644e:	bd10      	pop	{r4, pc}

10006450 <dcd_set_address>:
{
    pico_trace("dcd_set_address %d %d\n", rhport, dev_addr);
    assert(rhport == 0);

    // Can't set device address in hardware until status xfer has complete
    assigned_address = dev_addr;
10006450:	4b09      	ldr	r3, [pc, #36]	; (10006478 <dcd_set_address+0x28>)
{
10006452:	b510      	push	{r4, lr}
        ep->next_pid = 1u;
10006454:	2201      	movs	r2, #1
    assigned_address = dev_addr;
10006456:	7019      	strb	r1, [r3, #0]
        ep->next_pid = 1u;
10006458:	2139      	movs	r1, #57	; 0x39
        ep->stalled  = 0;
1000645a:	2300      	movs	r3, #0
        ep->next_pid = 1u;
1000645c:	4807      	ldr	r0, [pc, #28]	; (1000647c <dcd_set_address+0x2c>)
1000645e:	5442      	strb	r2, [r0, r1]
10006460:	7142      	strb	r2, [r0, #5]
        ep->stalled  = 0;
10006462:	3247      	adds	r2, #71	; 0x47
10006464:	5483      	strb	r3, [r0, r2]
10006466:	7503      	strb	r3, [r0, #20]
    _hw_endpoint_xfer(ep, buffer, total_bytes, start);
10006468:	2200      	movs	r2, #0
1000646a:	2100      	movs	r1, #0
1000646c:	3034      	adds	r0, #52	; 0x34
1000646e:	3301      	adds	r3, #1
10006470:	f000 fa68 	bl	10006944 <_hw_endpoint_xfer>

    ep0_0len_status();
}
10006474:	bd10      	pop	{r4, pc}
10006476:	46c0      	nop			; (mov r8, r8)
10006478:	20023b87 	.word	0x20023b87
1000647c:	200234c4 	.word	0x200234c4

10006480 <dcd_connect>:
// connect by enabling internal pull-up resistor on D+/D-
void dcd_connect(uint8_t rhport)
{
    pico_info("dcd_connect %d\n", rhport);
    assert(rhport == 0);
    usb_hw_set->sie_ctrl = USB_SIE_CTRL_PULLUP_EN_BITS;
10006480:	2280      	movs	r2, #128	; 0x80
10006482:	4b02      	ldr	r3, [pc, #8]	; (1000648c <dcd_connect+0xc>)
10006484:	0252      	lsls	r2, r2, #9
10006486:	64da      	str	r2, [r3, #76]	; 0x4c
}
10006488:	4770      	bx	lr
1000648a:	46c0      	nop			; (mov r8, r8)
1000648c:	50112000 	.word	0x50112000

10006490 <dcd_init>:
{
10006490:	b570      	push	{r4, r5, r6, lr}
10006492:	0005      	movs	r5, r0
    rp2040_usb_init();
10006494:	f000 f982 	bl	1000679c <rp2040_usb_init>
    irq_set_exclusive_handler(USBCTRL_IRQ, dcd_rp2040_irq);
10006498:	2005      	movs	r0, #5
1000649a:	491c      	ldr	r1, [pc, #112]	; (1000650c <dcd_init+0x7c>)
1000649c:	f7fb fa18 	bl	100018d0 <irq_set_exclusive_handler>
    memset(hw_endpoints, 0, sizeof(hw_endpoints));
100064a0:	22d0      	movs	r2, #208	; 0xd0
100064a2:	4c1b      	ldr	r4, [pc, #108]	; (10006510 <dcd_init+0x80>)
100064a4:	2100      	movs	r1, #0
100064a6:	0020      	movs	r0, r4
100064a8:	00d2      	lsls	r2, r2, #3
100064aa:	f7fa fe1b 	bl	100010e4 <__wrap_memset>
    assigned_address = 0;
100064ae:	2200      	movs	r2, #0
100064b0:	4b18      	ldr	r3, [pc, #96]	; (10006514 <dcd_init+0x84>)
    next_buffer_ptr = &usb_dpram->epx_data[0];
100064b2:	4919      	ldr	r1, [pc, #100]	; (10006518 <dcd_init+0x88>)
    assigned_address = 0;
100064b4:	701a      	strb	r2, [r3, #0]
    next_buffer_ptr = &usb_dpram->epx_data[0];
100064b6:	4b19      	ldr	r3, [pc, #100]	; (1000651c <dcd_init+0x8c>)
    ep->wMaxPacketSize = wMaxPacketSize;
100064b8:	2040      	movs	r0, #64	; 0x40
    next_buffer_ptr = &usb_dpram->epx_data[0];
100064ba:	6019      	str	r1, [r3, #0]
    ep->in = in;
100064bc:	2635      	movs	r6, #53	; 0x35
    ep->rx = in == false;
100064be:	2301      	movs	r3, #1
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].out;
100064c0:	4917      	ldr	r1, [pc, #92]	; (10006520 <dcd_init+0x90>)
    ep->rx = in == false;
100064c2:	70e3      	strb	r3, [r4, #3]
    ep->next_pid = num == 0 ? 1u : 0u;
100064c4:	7163      	strb	r3, [r4, #5]
    ep->wMaxPacketSize = wMaxPacketSize;
100064c6:	62e0      	str	r0, [r4, #44]	; 0x2c
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].out;
100064c8:	60e1      	str	r1, [r4, #12]
    *ep->buffer_control = 0;
100064ca:	600a      	str	r2, [r1, #0]
    ep->in = in;
100064cc:	55a3      	strb	r3, [r4, r6]
    ep->ep_addr = ep_addr;
100064ce:	364c      	adds	r6, #76	; 0x4c
100064d0:	36ff      	adds	r6, #255	; 0xff
100064d2:	8726      	strh	r6, [r4, #56]	; 0x38
    ep->transfer_type = transfer_type;
100064d4:	2600      	movs	r6, #0
    ep->wMaxPacketSize = wMaxPacketSize;
100064d6:	6620      	str	r0, [r4, #96]	; 0x60
    ep->transfer_type = transfer_type;
100064d8:	3024      	adds	r0, #36	; 0x24
100064da:	5426      	strb	r6, [r4, r0]
        ep->hw_data_buf = (uint8_t*)&usb_dpram->ep0_buf_a[0];
100064dc:	4911      	ldr	r1, [pc, #68]	; (10006524 <dcd_init+0x94>)
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].in;
100064de:	4812      	ldr	r0, [pc, #72]	; (10006528 <dcd_init+0x98>)
        ep->endpoint_control = NULL;
100064e0:	60a2      	str	r2, [r4, #8]
        ep->hw_data_buf = (uint8_t*)&usb_dpram->ep0_buf_a[0];
100064e2:	6121      	str	r1, [r4, #16]
    ep->configured = true;
100064e4:	7023      	strb	r3, [r4, #0]
    ep->num = num;
100064e6:	86e2      	strh	r2, [r4, #54]	; 0x36
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].in;
100064e8:	6420      	str	r0, [r4, #64]	; 0x40
    *ep->buffer_control = 0;
100064ea:	6002      	str	r2, [r0, #0]
        ep->endpoint_control = NULL;
100064ec:	63e2      	str	r2, [r4, #60]	; 0x3c
    ep->configured = true;
100064ee:	3234      	adds	r2, #52	; 0x34
100064f0:	54a3      	strb	r3, [r4, r2]
    usb_hw->main_ctrl = USB_MAIN_CTRL_CONTROLLER_EN_BITS;
100064f2:	4a0e      	ldr	r2, [pc, #56]	; (1000652c <dcd_init+0x9c>)
        ep->hw_data_buf = (uint8_t*)&usb_dpram->ep0_buf_a[0];
100064f4:	6461      	str	r1, [r4, #68]	; 0x44
    usb_hw->main_ctrl = USB_MAIN_CTRL_CONTROLLER_EN_BITS;
100064f6:	6413      	str	r3, [r2, #64]	; 0x40
    usb_hw->sie_ctrl = USB_SIE_CTRL_EP0_INT_1BUF_BITS; 
100064f8:	2380      	movs	r3, #128	; 0x80
100064fa:	059b      	lsls	r3, r3, #22
100064fc:	64d3      	str	r3, [r2, #76]	; 0x4c
    usb_hw->inte     = USB_INTS_BUFF_STATUS_BITS | USB_INTS_BUS_RESET_BITS | USB_INTS_SETUP_REQ_BITS;
100064fe:	2390      	movs	r3, #144	; 0x90
10006500:	490b      	ldr	r1, [pc, #44]	; (10006530 <dcd_init+0xa0>)
    dcd_connect(rhport);
10006502:	0028      	movs	r0, r5
    usb_hw->inte     = USB_INTS_BUFF_STATUS_BITS | USB_INTS_BUS_RESET_BITS | USB_INTS_SETUP_REQ_BITS;
10006504:	50d1      	str	r1, [r2, r3]
    dcd_connect(rhport);
10006506:	f7ff ffbb 	bl	10006480 <dcd_connect>
}
1000650a:	bd70      	pop	{r4, r5, r6, pc}
1000650c:	10006311 	.word	0x10006311
10006510:	200234c4 	.word	0x200234c4
10006514:	20023b87 	.word	0x20023b87
10006518:	50100180 	.word	0x50100180
1000651c:	20023b48 	.word	0x20023b48
10006520:	50100084 	.word	0x50100084
10006524:	50100100 	.word	0x50100100
10006528:	50100080 	.word	0x50100080
1000652c:	50110000 	.word	0x50110000
10006530:	00011010 	.word	0x00011010

10006534 <dcd_edpt0_status_complete>:
void dcd_edpt0_status_complete(uint8_t rhport, tusb_control_request_t const * request)
{
    pico_trace("dcd_edpt0_status_complete %d\n", rhport);
    assert(rhport == 0);

    if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
10006534:	780b      	ldrb	r3, [r1, #0]
10006536:	065b      	lsls	r3, r3, #25
10006538:	d102      	bne.n	10006540 <dcd_edpt0_status_complete+0xc>
        request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
1000653a:	784b      	ldrb	r3, [r1, #1]
1000653c:	2b05      	cmp	r3, #5
1000653e:	d009      	beq.n	10006554 <dcd_edpt0_status_complete+0x20>
        ep->next_pid = 1u;
10006540:	2101      	movs	r1, #1
10006542:	2039      	movs	r0, #57	; 0x39
        ep->stalled  = 0;
10006544:	2200      	movs	r2, #0
        ep->next_pid = 1u;
10006546:	4b06      	ldr	r3, [pc, #24]	; (10006560 <dcd_edpt0_status_complete+0x2c>)
10006548:	7159      	strb	r1, [r3, #5]
1000654a:	5419      	strb	r1, [r3, r0]
        ep->stalled  = 0;
1000654c:	3147      	adds	r1, #71	; 0x47
1000654e:	751a      	strb	r2, [r3, #20]
10006550:	545a      	strb	r2, [r3, r1]
        pico_trace("Set HW address %d\n", assigned_address);
        usb_hw->dev_addr_ctrl = assigned_address;
    }

    reset_ep0();
}
10006552:	4770      	bx	lr
        usb_hw->dev_addr_ctrl = assigned_address;
10006554:	4b03      	ldr	r3, [pc, #12]	; (10006564 <dcd_edpt0_status_complete+0x30>)
10006556:	781a      	ldrb	r2, [r3, #0]
10006558:	4b03      	ldr	r3, [pc, #12]	; (10006568 <dcd_edpt0_status_complete+0x34>)
1000655a:	601a      	str	r2, [r3, #0]
1000655c:	e7f0      	b.n	10006540 <dcd_edpt0_status_complete+0xc>
1000655e:	46c0      	nop			; (mov r8, r8)
10006560:	200234c4 	.word	0x200234c4
10006564:	20023b87 	.word	0x20023b87
10006568:	50110000 	.word	0x50110000

1000656c <dcd_edpt_open>:

bool dcd_edpt_open (uint8_t rhport, tusb_desc_endpoint_t const * desc_edpt)
{
1000656c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000656e:	4647      	mov	r7, r8
10006570:	46ce      	mov	lr, r9
    pico_info("dcd_edpt_open %d %02x\n", rhport, desc_edpt->bEndpointAddress);
    assert(rhport == 0);
    hw_endpoint_init(desc_edpt->bEndpointAddress, desc_edpt->wMaxPacketSize.size, desc_edpt->bmAttributes.xfer);
10006572:	2307      	movs	r3, #7
{
10006574:	b580      	push	{r7, lr}
    hw_endpoint_init(desc_edpt->bEndpointAddress, desc_edpt->wMaxPacketSize.size, desc_edpt->bmAttributes.xfer);
10006576:	7948      	ldrb	r0, [r1, #5]
10006578:	78cc      	ldrb	r4, [r1, #3]
1000657a:	790a      	ldrb	r2, [r1, #4]
1000657c:	4003      	ands	r3, r0
1000657e:	788f      	ldrb	r7, [r1, #2]
10006580:	07a4      	lsls	r4, r4, #30
10006582:	021b      	lsls	r3, r3, #8
10006584:	4313      	orrs	r3, r2
10006586:	0fa2      	lsrs	r2, r4, #30
10006588:	4694      	mov	ip, r2
1000658a:	0014      	movs	r4, r2
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
1000658c:	207f      	movs	r0, #127	; 0x7f
1000658e:	b27a      	sxtb	r2, r7
10006590:	4691      	mov	r9, r2
    ep->ep_addr = ep_addr;
10006592:	2168      	movs	r1, #104	; 0x68
10006594:	2234      	movs	r2, #52	; 0x34
10006596:	4038      	ands	r0, r7
    return &hw_endpoints[num][in];
10006598:	09fe      	lsrs	r6, r7, #7
    ep->ep_addr = ep_addr;
1000659a:	4341      	muls	r1, r0
1000659c:	4372      	muls	r2, r6
1000659e:	1852      	adds	r2, r2, r1
    ep->rx = in == false;
100065a0:	4649      	mov	r1, r9
100065a2:	43c9      	mvns	r1, r1
    ep->ep_addr = ep_addr;
100065a4:	4d3c      	ldr	r5, [pc, #240]	; (10006698 <dcd_edpt_open+0x12c>)
    ep->rx = in == false;
100065a6:	0fc9      	lsrs	r1, r1, #31
    ep->ep_addr = ep_addr;
100065a8:	18aa      	adds	r2, r5, r2
    ep->rx = in == false;
100065aa:	70d1      	strb	r1, [r2, #3]
    ep->next_pid = num == 0 ? 1u : 0u;
100065ac:	4241      	negs	r1, r0
100065ae:	4141      	adcs	r1, r0
    ep->ep_addr = ep_addr;
100065b0:	7117      	strb	r7, [r2, #4]
    ep->in = in;
100065b2:	7056      	strb	r6, [r2, #1]
    ep->num = num;
100065b4:	7090      	strb	r0, [r2, #2]
    ep->next_pid = num == 0 ? 1u : 0u;
100065b6:	7151      	strb	r1, [r2, #5]
    if (transfer_type == TUSB_XFER_ISOCHRONOUS)
100065b8:	2c01      	cmp	r4, #1
100065ba:	d05f      	beq.n	1000667c <dcd_edpt_open+0x110>
        if (wMaxPacketSize > USB_MAX_PACKET_SIZE)
100065bc:	2b40      	cmp	r3, #64	; 0x40
100065be:	d861      	bhi.n	10006684 <dcd_edpt_open+0x118>
    ep->wMaxPacketSize = wMaxPacketSize;
100065c0:	2234      	movs	r2, #52	; 0x34
100065c2:	2168      	movs	r1, #104	; 0x68
100065c4:	4372      	muls	r2, r6
100065c6:	4341      	muls	r1, r0
100065c8:	1852      	adds	r2, r2, r1
100065ca:	18aa      	adds	r2, r5, r2
    ep->transfer_type = transfer_type;
100065cc:	0011      	movs	r1, r2
100065ce:	4667      	mov	r7, ip
100065d0:	3130      	adds	r1, #48	; 0x30
100065d2:	700f      	strb	r7, [r1, #0]
    if (ep->in)
100065d4:	4649      	mov	r1, r9
    ep->wMaxPacketSize = wMaxPacketSize;
100065d6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ep->in)
100065d8:	2900      	cmp	r1, #0
100065da:	db3e      	blt.n	1000665a <dcd_edpt_open+0xee>
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].out;
100065dc:	4f2f      	ldr	r7, [pc, #188]	; (1000669c <dcd_edpt_open+0x130>)
100065de:	00c1      	lsls	r1, r0, #3
100065e0:	46bc      	mov	ip, r7
    *ep->buffer_control = 0;
100065e2:	2700      	movs	r7, #0
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].out;
100065e4:	4461      	add	r1, ip
100065e6:	60d1      	str	r1, [r2, #12]
    *ep->buffer_control = 0;
100065e8:	600f      	str	r7, [r1, #0]
    if (ep->num == 0)
100065ea:	2800      	cmp	r0, #0
100065ec:	d03e      	beq.n	1000666c <dcd_edpt_open+0x100>
            ep->endpoint_control = &usb_dpram->ep_ctrl[num-1].out;
100065ee:	4f2c      	ldr	r7, [pc, #176]	; (100066a0 <dcd_edpt_open+0x134>)
100065f0:	00c1      	lsls	r1, r0, #3
100065f2:	46bc      	mov	ip, r7
100065f4:	4461      	add	r1, ip
100065f6:	6091      	str	r1, [r2, #8]
    ep->hw_data_buf = next_buffer_ptr;
100065f8:	2768      	movs	r7, #104	; 0x68
100065fa:	4a2a      	ldr	r2, [pc, #168]	; (100066a4 <dcd_edpt_open+0x138>)
100065fc:	4347      	muls	r7, r0
100065fe:	6811      	ldr	r1, [r2, #0]
10006600:	4690      	mov	r8, r2
10006602:	2234      	movs	r2, #52	; 0x34
10006604:	46bc      	mov	ip, r7
10006606:	4372      	muls	r2, r6
10006608:	4462      	add	r2, ip
1000660a:	18aa      	adds	r2, r5, r2
1000660c:	6111      	str	r1, [r2, #16]
    next_buffer_ptr += size;
1000660e:	2b40      	cmp	r3, #64	; 0x40
10006610:	d200      	bcs.n	10006614 <dcd_edpt_open+0xa8>
10006612:	2340      	movs	r3, #64	; 0x40
    if ((uintptr_t)next_buffer_ptr & 0b111111u)
10006614:	223f      	movs	r2, #63	; 0x3f
    next_buffer_ptr += size;
10006616:	18cb      	adds	r3, r1, r3
    if ((uintptr_t)next_buffer_ptr & 0b111111u)
10006618:	4213      	tst	r3, r2
1000661a:	d001      	beq.n	10006620 <dcd_edpt_open+0xb4>
        fixptr &= ~0b111111u;
1000661c:	4393      	bics	r3, r2
        fixptr += 64;
1000661e:	3340      	adds	r3, #64	; 0x40
        next_buffer_ptr = (uint8_t*)fixptr;
10006620:	4642      	mov	r2, r8
10006622:	6013      	str	r3, [r2, #0]
}

static inline uintptr_t hw_data_offset(uint8_t *buf)
{
    // Remove usb base from buffer pointer
    return (uintptr_t)buf ^ (uintptr_t)usb_dpram;
10006624:	4b20      	ldr	r3, [pc, #128]	; (100066a8 <dcd_edpt_open+0x13c>)
    *ep->endpoint_control = reg;
10006626:	2268      	movs	r2, #104	; 0x68
10006628:	4059      	eors	r1, r3
1000662a:	2334      	movs	r3, #52	; 0x34
                  | (ep->transfer_type << EP_CTRL_BUFFER_TYPE_LSB)
1000662c:	06a4      	lsls	r4, r4, #26
                  | dpram_offset;
1000662e:	430c      	orrs	r4, r1
    uint32_t reg =  EP_CTRL_ENABLE_BITS
10006630:	21a0      	movs	r1, #160	; 0xa0
    *ep->endpoint_control = reg;
10006632:	4373      	muls	r3, r6
10006634:	4342      	muls	r2, r0
10006636:	189b      	adds	r3, r3, r2
10006638:	18eb      	adds	r3, r5, r3
1000663a:	689b      	ldr	r3, [r3, #8]
    uint32_t reg =  EP_CTRL_ENABLE_BITS
1000663c:	0609      	lsls	r1, r1, #24
1000663e:	430c      	orrs	r4, r1
    *ep->endpoint_control = reg;
10006640:	601c      	str	r4, [r3, #0]
    ep->configured = true;
10006642:	2334      	movs	r3, #52	; 0x34
10006644:	435e      	muls	r6, r3
10006646:	3334      	adds	r3, #52	; 0x34
10006648:	4358      	muls	r0, r3
1000664a:	3b67      	subs	r3, #103	; 0x67
1000664c:	1836      	adds	r6, r6, r0
1000664e:	55ab      	strb	r3, [r5, r6]
    return true;
}
10006650:	2001      	movs	r0, #1
10006652:	bcc0      	pop	{r6, r7}
10006654:	46b9      	mov	r9, r7
10006656:	46b0      	mov	r8, r6
10006658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].in;
1000665a:	4f14      	ldr	r7, [pc, #80]	; (100066ac <dcd_edpt_open+0x140>)
1000665c:	00c1      	lsls	r1, r0, #3
1000665e:	46bc      	mov	ip, r7
    *ep->buffer_control = 0;
10006660:	2700      	movs	r7, #0
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].in;
10006662:	4461      	add	r1, ip
10006664:	60d1      	str	r1, [r2, #12]
    *ep->buffer_control = 0;
10006666:	600f      	str	r7, [r1, #0]
    if (ep->num == 0)
10006668:	2800      	cmp	r0, #0
1000666a:	d10f      	bne.n	1000668c <dcd_edpt_open+0x120>
        ep->endpoint_control = NULL;
1000666c:	2334      	movs	r3, #52	; 0x34
1000666e:	2200      	movs	r2, #0
10006670:	4373      	muls	r3, r6
10006672:	18eb      	adds	r3, r5, r3
10006674:	609a      	str	r2, [r3, #8]
        ep->hw_data_buf = (uint8_t*)&usb_dpram->ep0_buf_a[0];
10006676:	4a0e      	ldr	r2, [pc, #56]	; (100066b0 <dcd_edpt_open+0x144>)
10006678:	611a      	str	r2, [r3, #16]
1000667a:	e7e2      	b.n	10006642 <dcd_edpt_open+0xd6>
        if (wMaxPacketSize > USB_MAX_ISO_PACKET_SIZE)
1000667c:	2280      	movs	r2, #128	; 0x80
1000667e:	00d2      	lsls	r2, r2, #3
10006680:	4293      	cmp	r3, r2
10006682:	d39d      	bcc.n	100065c0 <dcd_edpt_open+0x54>
            panic("Isochronous wMaxPacketSize %d too large", wMaxPacketSize);
10006684:	0019      	movs	r1, r3
10006686:	480b      	ldr	r0, [pc, #44]	; (100066b4 <dcd_edpt_open+0x148>)
10006688:	f7fd f9b8 	bl	100039fc <panic>
            ep->endpoint_control = &usb_dpram->ep_ctrl[num-1].in;
1000668c:	4f06      	ldr	r7, [pc, #24]	; (100066a8 <dcd_edpt_open+0x13c>)
1000668e:	00c1      	lsls	r1, r0, #3
10006690:	46bc      	mov	ip, r7
10006692:	4461      	add	r1, ip
10006694:	6091      	str	r1, [r2, #8]
10006696:	e7af      	b.n	100065f8 <dcd_edpt_open+0x8c>
10006698:	200234c4 	.word	0x200234c4
1000669c:	50100084 	.word	0x50100084
100066a0:	50100004 	.word	0x50100004
100066a4:	20023b48 	.word	0x20023b48
100066a8:	50100000 	.word	0x50100000
100066ac:	50100080 	.word	0x50100080
100066b0:	50100100 	.word	0x50100100
100066b4:	10009170 	.word	0x10009170

100066b8 <dcd_edpt_xfer>:

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
100066b8:	b510      	push	{r4, lr}
100066ba:	000c      	movs	r4, r1
    return &hw_endpoints[num][in];
100066bc:	2034      	movs	r0, #52	; 0x34
{
100066be:	0011      	movs	r1, r2
100066c0:	001a      	movs	r2, r3
    return &hw_endpoints[num][in];
100066c2:	09e3      	lsrs	r3, r4, #7
100066c4:	4358      	muls	r0, r3
100066c6:	237f      	movs	r3, #127	; 0x7f
100066c8:	4023      	ands	r3, r4
100066ca:	2468      	movs	r4, #104	; 0x68
100066cc:	435c      	muls	r4, r3
100066ce:	4b04      	ldr	r3, [pc, #16]	; (100066e0 <dcd_edpt_xfer+0x28>)
100066d0:	1900      	adds	r0, r0, r4
100066d2:	18c0      	adds	r0, r0, r3
    _hw_endpoint_xfer(ep, buffer, total_bytes, start);
100066d4:	2301      	movs	r3, #1
100066d6:	f000 f935 	bl	10006944 <_hw_endpoint_xfer>
    assert(rhport == 0);
    // True means start new xfer
    hw_endpoint_xfer(ep_addr, buffer, total_bytes, true);
    return true;
}
100066da:	2001      	movs	r0, #1
100066dc:	bd10      	pop	{r4, pc}
100066de:	46c0      	nop			; (mov r8, r8)
100066e0:	200234c4 	.word	0x200234c4

100066e4 <dcd_edpt_stall>:

void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
100066e4:	b570      	push	{r4, r5, r6, lr}
100066e6:	257f      	movs	r5, #127	; 0x7f
    return &hw_endpoints[num][in];
100066e8:	2034      	movs	r0, #52	; 0x34
100066ea:	2368      	movs	r3, #104	; 0x68
100066ec:	400d      	ands	r5, r1
    uint8_t in = (ep_addr & TUSB_DIR_IN_MASK) ? 1 : 0;
100066ee:	09cc      	lsrs	r4, r1, #7
    return &hw_endpoints[num][in];
100066f0:	436b      	muls	r3, r5
100066f2:	4360      	muls	r0, r4
100066f4:	4e0c      	ldr	r6, [pc, #48]	; (10006728 <dcd_edpt_stall+0x44>)
100066f6:	18c0      	adds	r0, r0, r3
100066f8:	1830      	adds	r0, r6, r0
    if (ep->num == 0)
100066fa:	7883      	ldrb	r3, [r0, #2]
100066fc:	2b00      	cmp	r3, #0
100066fe:	d105      	bne.n	1000670c <dcd_edpt_stall+0x28>
        usb_hw_set->ep_stall_arm = ep->in ? USB_EP_STALL_ARM_EP0_IN_BITS : USB_EP_STALL_ARM_EP0_OUT_BITS;
10006700:	7843      	ldrb	r3, [r0, #1]
10006702:	425a      	negs	r2, r3
10006704:	4153      	adcs	r3, r2
10006706:	4a09      	ldr	r2, [pc, #36]	; (1000672c <dcd_edpt_stall+0x48>)
10006708:	3301      	adds	r3, #1
1000670a:	6693      	str	r3, [r2, #104]	; 0x68
    return _hw_endpoint_buffer_control_update32(ep, ~value, value);
1000670c:	2280      	movs	r2, #128	; 0x80
1000670e:	4908      	ldr	r1, [pc, #32]	; (10006730 <dcd_edpt_stall+0x4c>)
10006710:	0112      	lsls	r2, r2, #4
10006712:	f000 f875 	bl	10006800 <_hw_endpoint_buffer_control_update32>
    ep->stalled = true;
10006716:	2134      	movs	r1, #52	; 0x34
10006718:	2301      	movs	r3, #1
1000671a:	434c      	muls	r4, r1
1000671c:	3134      	adds	r1, #52	; 0x34
1000671e:	434d      	muls	r5, r1
10006720:	1964      	adds	r4, r4, r5
10006722:	1934      	adds	r4, r6, r4
10006724:	7523      	strb	r3, [r4, #20]
    pico_trace("dcd_edpt_stall %d %02x\n", rhport, ep_addr);
    assert(rhport == 0);
    hw_endpoint_stall(ep_addr);
}
10006726:	bd70      	pop	{r4, r5, r6, pc}
10006728:	200234c4 	.word	0x200234c4
1000672c:	50112000 	.word	0x50112000
10006730:	fffff7ff 	.word	0xfffff7ff

10006734 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall (uint8_t rhport, uint8_t ep_addr)
{
10006734:	b570      	push	{r4, r5, r6, lr}
10006736:	257f      	movs	r5, #127	; 0x7f
    return &hw_endpoints[num][in];
10006738:	2034      	movs	r0, #52	; 0x34
1000673a:	2368      	movs	r3, #104	; 0x68
1000673c:	400d      	ands	r5, r1
    uint8_t in = (ep_addr & TUSB_DIR_IN_MASK) ? 1 : 0;
1000673e:	09cc      	lsrs	r4, r1, #7
    return &hw_endpoints[num][in];
10006740:	436b      	muls	r3, r5
10006742:	4360      	muls	r0, r4
10006744:	4e0c      	ldr	r6, [pc, #48]	; (10006778 <dcd_edpt_clear_stall+0x44>)
10006746:	18c0      	adds	r0, r0, r3
10006748:	1830      	adds	r0, r6, r0
    if (ep->num == 0)
1000674a:	7883      	ldrb	r3, [r0, #2]
1000674c:	2b00      	cmp	r3, #0
1000674e:	d105      	bne.n	1000675c <dcd_edpt_clear_stall+0x28>
        usb_hw_clear->ep_stall_arm = ep->in ? USB_EP_STALL_ARM_EP0_IN_BITS : USB_EP_STALL_ARM_EP0_OUT_BITS;
10006750:	7843      	ldrb	r3, [r0, #1]
10006752:	425a      	negs	r2, r3
10006754:	4153      	adcs	r3, r2
10006756:	4a09      	ldr	r2, [pc, #36]	; (1000677c <dcd_edpt_clear_stall+0x48>)
10006758:	3301      	adds	r3, #1
1000675a:	6693      	str	r3, [r2, #104]	; 0x68
    return _hw_endpoint_buffer_control_update32(ep, ~value, 0);
1000675c:	2200      	movs	r2, #0
1000675e:	4908      	ldr	r1, [pc, #32]	; (10006780 <dcd_edpt_clear_stall+0x4c>)
10006760:	f000 f84e 	bl	10006800 <_hw_endpoint_buffer_control_update32>
    ep->stalled = false;
10006764:	2134      	movs	r1, #52	; 0x34
10006766:	2300      	movs	r3, #0
10006768:	434c      	muls	r4, r1
1000676a:	3134      	adds	r1, #52	; 0x34
1000676c:	434d      	muls	r5, r1
1000676e:	1964      	adds	r4, r4, r5
10006770:	1934      	adds	r4, r6, r4
10006772:	7523      	strb	r3, [r4, #20]
    pico_trace("dcd_edpt_clear_stall %d %02x\n", rhport, ep_addr);
    assert(rhport == 0);
    hw_endpoint_clear_stall(ep_addr);
}
10006774:	bd70      	pop	{r4, r5, r6, pc}
10006776:	46c0      	nop			; (mov r8, r8)
10006778:	200234c4 	.word	0x200234c4
1000677c:	50113000 	.word	0x50113000
10006780:	fffff7ff 	.word	0xfffff7ff

10006784 <_hw_endpoint_buffer_control_update32.part.0.isra.0>:
    }
    if (or_mask) {
        value |= or_mask;
        if (or_mask & USB_BUF_CTRL_AVAIL) {
            if (*ep->buffer_control & USB_BUF_CTRL_AVAIL) {
                panic("ep %d %s was already available", ep->num, ep_dir_string[ep->in]);
10006784:	4b03      	ldr	r3, [pc, #12]	; (10006794 <_hw_endpoint_buffer_control_update32.part.0.isra.0+0x10>)
10006786:	0080      	lsls	r0, r0, #2
10006788:	58c2      	ldr	r2, [r0, r3]
void _hw_endpoint_buffer_control_update32(struct hw_endpoint *ep, uint32_t and_mask, uint32_t or_mask) {
1000678a:	b510      	push	{r4, lr}
                panic("ep %d %s was already available", ep->num, ep_dir_string[ep->in]);
1000678c:	4802      	ldr	r0, [pc, #8]	; (10006798 <_hw_endpoint_buffer_control_update32.part.0.isra.0+0x14>)
1000678e:	f7fd f935 	bl	100039fc <panic>
10006792:	46c0      	nop			; (mov r8, r8)
10006794:	20002750 	.word	0x20002750
10006798:	10009198 	.word	0x10009198

1000679c <rp2040_usb_init>:
1000679c:	2280      	movs	r2, #128	; 0x80
1000679e:	4b0e      	ldr	r3, [pc, #56]	; (100067d8 <rp2040_usb_init+0x3c>)
100067a0:	0452      	lsls	r2, r2, #17
{
100067a2:	b510      	push	{r4, lr}
100067a4:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100067a6:	4b0d      	ldr	r3, [pc, #52]	; (100067dc <rp2040_usb_init+0x40>)
100067a8:	490d      	ldr	r1, [pc, #52]	; (100067e0 <rp2040_usb_init+0x44>)
100067aa:	601a      	str	r2, [r3, #0]
100067ac:	0010      	movs	r0, r2
100067ae:	688b      	ldr	r3, [r1, #8]
100067b0:	4398      	bics	r0, r3
100067b2:	d1fb      	bne.n	100067ac <rp2040_usb_init+0x10>
    memset(usb_hw, 0, sizeof(*usb_hw));
100067b4:	4c0b      	ldr	r4, [pc, #44]	; (100067e4 <rp2040_usb_init+0x48>)
100067b6:	229c      	movs	r2, #156	; 0x9c
100067b8:	2100      	movs	r1, #0
100067ba:	0020      	movs	r0, r4
100067bc:	f7fa fc92 	bl	100010e4 <__wrap_memset>
    memset(usb_dpram, 0, sizeof(*usb_dpram));
100067c0:	2280      	movs	r2, #128	; 0x80
100067c2:	2100      	movs	r1, #0
100067c4:	0152      	lsls	r2, r2, #5
100067c6:	4808      	ldr	r0, [pc, #32]	; (100067e8 <rp2040_usb_init+0x4c>)
100067c8:	f7fa fc8c 	bl	100010e4 <__wrap_memset>
    usb_hw->muxing    = USB_USB_MUXING_TO_PHY_BITS    | USB_USB_MUXING_SOFTCON_BITS;
100067cc:	2309      	movs	r3, #9
100067ce:	6763      	str	r3, [r4, #116]	; 0x74
    usb_hw->pwr       = USB_USB_PWR_VBUS_DETECT_BITS  | USB_USB_PWR_VBUS_DETECT_OVERRIDE_EN_BITS;
100067d0:	3303      	adds	r3, #3
100067d2:	67a3      	str	r3, [r4, #120]	; 0x78
}
100067d4:	bd10      	pop	{r4, pc}
100067d6:	46c0      	nop			; (mov r8, r8)
100067d8:	4000e000 	.word	0x4000e000
100067dc:	4000f000 	.word	0x4000f000
100067e0:	4000c000 	.word	0x4000c000
100067e4:	50110000 	.word	0x50110000
100067e8:	50100000 	.word	0x50100000

100067ec <hw_endpoint_reset_transfer>:
    ep->stalled = false;
100067ec:	2300      	movs	r3, #0
    ep->sent_setup = false;
100067ee:	2100      	movs	r1, #0
100067f0:	2232      	movs	r2, #50	; 0x32
    ep->stalled = false;
100067f2:	8283      	strh	r3, [r0, #20]
    ep->sent_setup = false;
100067f4:	5481      	strb	r1, [r0, r2]
    ep->total_len = 0;
100067f6:	6183      	str	r3, [r0, #24]
    ep->len = 0;
100067f8:	61c3      	str	r3, [r0, #28]
    ep->transfer_size = 0;
100067fa:	6203      	str	r3, [r0, #32]
    ep->user_buf = 0;
100067fc:	6283      	str	r3, [r0, #40]	; 0x28
}
100067fe:	4770      	bx	lr

10006800 <_hw_endpoint_buffer_control_update32>:
void _hw_endpoint_buffer_control_update32(struct hw_endpoint *ep, uint32_t and_mask, uint32_t or_mask) {
10006800:	b510      	push	{r4, lr}
        value = *ep->buffer_control & and_mask;
10006802:	68c3      	ldr	r3, [r0, #12]
    if (and_mask) {
10006804:	2900      	cmp	r1, #0
10006806:	d001      	beq.n	1000680c <_hw_endpoint_buffer_control_update32+0xc>
        value = *ep->buffer_control & and_mask;
10006808:	681c      	ldr	r4, [r3, #0]
1000680a:	4021      	ands	r1, r4
    if (or_mask) {
1000680c:	2a00      	cmp	r2, #0
1000680e:	d011      	beq.n	10006834 <_hw_endpoint_buffer_control_update32+0x34>
        if (or_mask & USB_BUF_CTRL_AVAIL) {
10006810:	2480      	movs	r4, #128	; 0x80
10006812:	00e4      	lsls	r4, r4, #3
        value |= or_mask;
10006814:	4311      	orrs	r1, r2
        if (or_mask & USB_BUF_CTRL_AVAIL) {
10006816:	4222      	tst	r2, r4
10006818:	d00c      	beq.n	10006834 <_hw_endpoint_buffer_control_update32+0x34>
            if (*ep->buffer_control & USB_BUF_CTRL_AVAIL) {
1000681a:	681a      	ldr	r2, [r3, #0]
1000681c:	4222      	tst	r2, r4
1000681e:	d10b      	bne.n	10006838 <_hw_endpoint_buffer_control_update32+0x38>
            }
            *ep->buffer_control = value & ~USB_BUF_CTRL_AVAIL;
10006820:	4a07      	ldr	r2, [pc, #28]	; (10006840 <_hw_endpoint_buffer_control_update32+0x40>)
10006822:	400a      	ands	r2, r1
10006824:	601a      	str	r2, [r3, #0]
            // 12 cycle delay.. (should be good for 48*12Mhz = 576Mhz)
            // Don't need delay in host mode as host is in charge
#ifndef RP2040_USB_HOST_MODE
            __asm volatile (
10006826:	e7ff      	b.n	10006828 <_hw_endpoint_buffer_control_update32+0x28>
10006828:	e7ff      	b.n	1000682a <_hw_endpoint_buffer_control_update32+0x2a>
1000682a:	e7ff      	b.n	1000682c <_hw_endpoint_buffer_control_update32+0x2c>
1000682c:	e7ff      	b.n	1000682e <_hw_endpoint_buffer_control_update32+0x2e>
1000682e:	e7ff      	b.n	10006830 <_hw_endpoint_buffer_control_update32+0x30>
10006830:	e7ff      	b.n	10006832 <_hw_endpoint_buffer_control_update32+0x32>
                    "1:\n"
                    : : : "memory");
#endif
        }
    }
    *ep->buffer_control = value;
10006832:	68c3      	ldr	r3, [r0, #12]
10006834:	6019      	str	r1, [r3, #0]
}
10006836:	bd10      	pop	{r4, pc}
10006838:	7881      	ldrb	r1, [r0, #2]
1000683a:	7840      	ldrb	r0, [r0, #1]
1000683c:	f7ff ffa2 	bl	10006784 <_hw_endpoint_buffer_control_update32.part.0.isra.0>
10006840:	fffffbff 	.word	0xfffffbff

10006844 <_hw_endpoint_xfer_continue>:
    }
}

// Returns true if transfer is complete
bool _hw_endpoint_xfer_continue(struct hw_endpoint *ep)
{
10006844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _hw_endpoint_lock_update(ep, 1);
    // Part way through a transfer
    if (!ep->active)
10006846:	7d46      	ldrb	r6, [r0, #21]
{
10006848:	0004      	movs	r4, r0
    if (!ep->active)
1000684a:	2e00      	cmp	r6, #0
1000684c:	d100      	bne.n	10006850 <_hw_endpoint_xfer_continue+0xc>
1000684e:	e067      	b.n	10006920 <_hw_endpoint_xfer_continue+0xdc>
    return *ep->buffer_control;
10006850:	68c3      	ldr	r3, [r0, #12]
    if (!ep->rx)
10006852:	78c0      	ldrb	r0, [r0, #3]
10006854:	681d      	ldr	r5, [r3, #0]
    uint transferred_bytes = buf_ctrl & USB_BUF_CTRL_LEN_MASK;
10006856:	05ad      	lsls	r5, r5, #22
10006858:	0dad      	lsrs	r5, r5, #22
    if (!ep->rx)
1000685a:	2800      	cmp	r0, #0
1000685c:	d143      	bne.n	100068e6 <_hw_endpoint_xfer_continue+0xa2>
        ep->len += transferred_bytes;
1000685e:	69e3      	ldr	r3, [r4, #28]
10006860:	18e9      	adds	r1, r5, r3
10006862:	61e1      	str	r1, [r4, #28]

    // Update EP struct from hardware state
    _hw_endpoint_xfer_sync(ep);

    // Now we have synced our state with the hardware. Is there more data to transfer?
    uint remaining_bytes = ep->total_len - ep->len;
10006864:	69a2      	ldr	r2, [r4, #24]
10006866:	1a55      	subs	r5, r2, r1
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
10006868:	2d40      	cmp	r5, #64	; 0x40
1000686a:	d82e      	bhi.n	100068ca <_hw_endpoint_xfer_continue+0x86>
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
1000686c:	186b      	adds	r3, r5, r1
1000686e:	1a9b      	subs	r3, r3, r2
10006870:	425f      	negs	r7, r3
10006872:	417b      	adcs	r3, r7
10006874:	2724      	movs	r7, #36	; 0x24
10006876:	b2db      	uxtb	r3, r3
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
10006878:	6225      	str	r5, [r4, #32]
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
1000687a:	55e3      	strb	r3, [r4, r7]
    _hw_endpoint_update_last_buf(ep);

    // Can happen because of programmer error so check for it
    if (ep->len > ep->total_len)
1000687c:	428a      	cmp	r2, r1
1000687e:	d34c      	bcc.n	1000691a <_hw_endpoint_xfer_continue+0xd6>
    {
        panic("Transferred more data than expected");
    }

    // If we are done then notify tinyusb
    if (ep->len == ep->total_len)
10006880:	d049      	beq.n	10006916 <_hw_endpoint_xfer_continue+0xd2>
    if (!ep->rx)
10006882:	2800      	cmp	r0, #0
10006884:	d023      	beq.n	100068ce <_hw_endpoint_xfer_continue+0x8a>
    uint32_t val = ep->transfer_size | USB_BUF_CTRL_AVAIL;
10006886:	2280      	movs	r2, #128	; 0x80
10006888:	00d2      	lsls	r2, r2, #3
1000688a:	432a      	orrs	r2, r5
    val |= ep->next_pid ? USB_BUF_CTRL_DATA1_PID : USB_BUF_CTRL_DATA0_PID;
1000688c:	7961      	ldrb	r1, [r4, #5]
1000688e:	2900      	cmp	r1, #0
10006890:	d002      	beq.n	10006898 <_hw_endpoint_xfer_continue+0x54>
10006892:	2080      	movs	r0, #128	; 0x80
10006894:	0180      	lsls	r0, r0, #6
10006896:	4302      	orrs	r2, r0
    ep->next_pid ^= 1u;
10006898:	2001      	movs	r0, #1
1000689a:	4041      	eors	r1, r0
1000689c:	7161      	strb	r1, [r4, #5]
    if (ep->last_buf)
1000689e:	2b00      	cmp	r3, #0
100068a0:	d002      	beq.n	100068a8 <_hw_endpoint_xfer_continue+0x64>
        val |= USB_BUF_CTRL_LAST;
100068a2:	2380      	movs	r3, #128	; 0x80
100068a4:	01db      	lsls	r3, r3, #7
100068a6:	431a      	orrs	r2, r3
            if (*ep->buffer_control & USB_BUF_CTRL_AVAIL) {
100068a8:	68e1      	ldr	r1, [r4, #12]
100068aa:	680b      	ldr	r3, [r1, #0]
100068ac:	055b      	lsls	r3, r3, #21
100068ae:	d43c      	bmi.n	1000692a <_hw_endpoint_xfer_continue+0xe6>
            *ep->buffer_control = value & ~USB_BUF_CTRL_AVAIL;
100068b0:	4b20      	ldr	r3, [pc, #128]	; (10006934 <_hw_endpoint_xfer_continue+0xf0>)
100068b2:	4013      	ands	r3, r2
100068b4:	600b      	str	r3, [r1, #0]
            __asm volatile (
100068b6:	e7ff      	b.n	100068b8 <_hw_endpoint_xfer_continue+0x74>
100068b8:	e7ff      	b.n	100068ba <_hw_endpoint_xfer_continue+0x76>
100068ba:	e7ff      	b.n	100068bc <_hw_endpoint_xfer_continue+0x78>
100068bc:	e7ff      	b.n	100068be <_hw_endpoint_xfer_continue+0x7a>
100068be:	e7ff      	b.n	100068c0 <_hw_endpoint_xfer_continue+0x7c>
100068c0:	e7ff      	b.n	100068c2 <_hw_endpoint_xfer_continue+0x7e>
        _hw_endpoint_start_next_buffer(ep);
    }

    _hw_endpoint_lock_update(ep, -1);
    // More work to do
    return false;
100068c2:	2000      	movs	r0, #0
    *ep->buffer_control = value;
100068c4:	68e3      	ldr	r3, [r4, #12]
100068c6:	601a      	str	r2, [r3, #0]
}
100068c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
100068ca:	2540      	movs	r5, #64	; 0x40
100068cc:	e7ce      	b.n	1000686c <_hw_endpoint_xfer_continue+0x28>
        memcpy(ep->hw_data_buf, &ep->user_buf[ep->len], ep->transfer_size);
100068ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
100068d0:	002a      	movs	r2, r5
100068d2:	469c      	mov	ip, r3
100068d4:	6920      	ldr	r0, [r4, #16]
100068d6:	4461      	add	r1, ip
100068d8:	f7fa fc0a 	bl	100010f0 <__wrap___aeabi_memcpy>
        val |= USB_BUF_CTRL_FULL;
100068dc:	2284      	movs	r2, #132	; 0x84
100068de:	0212      	lsls	r2, r2, #8
    if (ep->last_buf)
100068e0:	5de3      	ldrb	r3, [r4, r7]
        val |= USB_BUF_CTRL_FULL;
100068e2:	432a      	orrs	r2, r5
100068e4:	e7d2      	b.n	1000688c <_hw_endpoint_xfer_continue+0x48>
        memcpy(&ep->user_buf[ep->len], ep->hw_data_buf, transferred_bytes);
100068e6:	69e3      	ldr	r3, [r4, #28]
100068e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
100068ea:	469c      	mov	ip, r3
100068ec:	6921      	ldr	r1, [r4, #16]
100068ee:	002a      	movs	r2, r5
100068f0:	4460      	add	r0, ip
100068f2:	f7fa fbfd 	bl	100010f0 <__wrap___aeabi_memcpy>
        ep->len += transferred_bytes;
100068f6:	69e3      	ldr	r3, [r4, #28]
    if ((ep->rx) && (transferred_bytes < ep->transfer_size))
100068f8:	78e0      	ldrb	r0, [r4, #3]
        ep->len += transferred_bytes;
100068fa:	18e9      	adds	r1, r5, r3
100068fc:	61e1      	str	r1, [r4, #28]
    if ((ep->rx) && (transferred_bytes < ep->transfer_size))
100068fe:	2800      	cmp	r0, #0
10006900:	d0b0      	beq.n	10006864 <_hw_endpoint_xfer_continue+0x20>
10006902:	6a23      	ldr	r3, [r4, #32]
10006904:	429d      	cmp	r5, r3
10006906:	d2ad      	bcs.n	10006864 <_hw_endpoint_xfer_continue+0x20>
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
10006908:	2300      	movs	r3, #0
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
1000690a:	2201      	movs	r2, #1
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
1000690c:	6223      	str	r3, [r4, #32]
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
1000690e:	3324      	adds	r3, #36	; 0x24
        ep->total_len = ep->len;
10006910:	61a1      	str	r1, [r4, #24]
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10006912:	54e2      	strb	r2, [r4, r3]
    if (ep->len > ep->total_len)
10006914:	e7d8      	b.n	100068c8 <_hw_endpoint_xfer_continue+0x84>
        return true;
10006916:	0030      	movs	r0, r6
10006918:	e7d6      	b.n	100068c8 <_hw_endpoint_xfer_continue+0x84>
        panic("Transferred more data than expected");
1000691a:	4807      	ldr	r0, [pc, #28]	; (10006938 <_hw_endpoint_xfer_continue+0xf4>)
1000691c:	f7fd f86e 	bl	100039fc <panic>
        panic("Can't continue xfer on inactive ep %d %s", ep->num, ep_dir_string);
10006920:	7881      	ldrb	r1, [r0, #2]
10006922:	4a06      	ldr	r2, [pc, #24]	; (1000693c <_hw_endpoint_xfer_continue+0xf8>)
10006924:	4806      	ldr	r0, [pc, #24]	; (10006940 <_hw_endpoint_xfer_continue+0xfc>)
10006926:	f7fd f869 	bl	100039fc <panic>
1000692a:	78a1      	ldrb	r1, [r4, #2]
1000692c:	7860      	ldrb	r0, [r4, #1]
1000692e:	f7ff ff29 	bl	10006784 <_hw_endpoint_buffer_control_update32.part.0.isra.0>
10006932:	46c0      	nop			; (mov r8, r8)
10006934:	fffffbff 	.word	0xfffffbff
10006938:	100091e4 	.word	0x100091e4
1000693c:	20002750 	.word	0x20002750
10006940:	100091b8 	.word	0x100091b8

10006944 <_hw_endpoint_xfer>:

void _hw_endpoint_xfer(struct hw_endpoint *ep, uint8_t *buffer, uint16_t total_len, bool start)
{
10006944:	b570      	push	{r4, r5, r6, lr}
10006946:	0004      	movs	r4, r0
    pico_trace(" total_len %d, start=%d\n", total_len, start);

    assert(ep->configured);


    if (start)
10006948:	2b00      	cmp	r3, #0
1000694a:	d049      	beq.n	100069e0 <_hw_endpoint_xfer+0x9c>
    if (ep->active)
1000694c:	7d43      	ldrb	r3, [r0, #21]
1000694e:	2b00      	cmp	r3, #0
10006950:	d003      	beq.n	1000695a <_hw_endpoint_xfer+0x16>
    ep->stalled = false;
10006952:	2300      	movs	r3, #0
10006954:	7503      	strb	r3, [r0, #20]
    ep->sent_setup = false;
10006956:	2032      	movs	r0, #50	; 0x32
10006958:	5423      	strb	r3, [r4, r0]
    ep->len = 0;
1000695a:	2300      	movs	r3, #0
    ep->total_len = total_len;
1000695c:	61a2      	str	r2, [r4, #24]
    ep->len = 0;
1000695e:	61e3      	str	r3, [r4, #28]
    ep->transfer_size = total_len > 64 ? 64 : total_len;
10006960:	1c15      	adds	r5, r2, #0
10006962:	2a40      	cmp	r2, #64	; 0x40
10006964:	d831      	bhi.n	100069ca <_hw_endpoint_xfer+0x86>
    ep->active = true;
10006966:	2301      	movs	r3, #1
    ep->transfer_size = total_len > 64 ? 64 : total_len;
10006968:	b2ad      	uxth	r5, r5
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
1000696a:	1b52      	subs	r2, r2, r5
    ep->active = true;
1000696c:	7563      	strb	r3, [r4, #21]
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
1000696e:	4253      	negs	r3, r2
10006970:	415a      	adcs	r2, r3
10006972:	2624      	movs	r6, #36	; 0x24
    ep->buf_sel = 0;
10006974:	2325      	movs	r3, #37	; 0x25
10006976:	2000      	movs	r0, #0
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10006978:	b2d2      	uxtb	r2, r2
    ep->transfer_size = total_len > 64 ? 64 : total_len;
1000697a:	6225      	str	r5, [r4, #32]
    ep->user_buf = buffer;
1000697c:	62a1      	str	r1, [r4, #40]	; 0x28
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
1000697e:	55a2      	strb	r2, [r4, r6]
    ep->buf_sel = 0;
10006980:	54e0      	strb	r0, [r4, r3]
    if (!ep->rx)
10006982:	78e3      	ldrb	r3, [r4, #3]
10006984:	2b00      	cmp	r3, #0
10006986:	d022      	beq.n	100069ce <_hw_endpoint_xfer+0x8a>
    uint32_t val = ep->transfer_size | USB_BUF_CTRL_AVAIL;
10006988:	2380      	movs	r3, #128	; 0x80
1000698a:	00db      	lsls	r3, r3, #3
1000698c:	432b      	orrs	r3, r5
    val |= ep->next_pid ? USB_BUF_CTRL_DATA1_PID : USB_BUF_CTRL_DATA0_PID;
1000698e:	7961      	ldrb	r1, [r4, #5]
10006990:	2900      	cmp	r1, #0
10006992:	d002      	beq.n	1000699a <_hw_endpoint_xfer+0x56>
10006994:	2080      	movs	r0, #128	; 0x80
10006996:	0180      	lsls	r0, r0, #6
10006998:	4303      	orrs	r3, r0
    ep->next_pid ^= 1u;
1000699a:	2001      	movs	r0, #1
1000699c:	4041      	eors	r1, r0
1000699e:	7161      	strb	r1, [r4, #5]
    if (ep->last_buf)
100069a0:	2a00      	cmp	r2, #0
100069a2:	d002      	beq.n	100069aa <_hw_endpoint_xfer+0x66>
        val |= USB_BUF_CTRL_LAST;
100069a4:	2280      	movs	r2, #128	; 0x80
100069a6:	01d2      	lsls	r2, r2, #7
100069a8:	4313      	orrs	r3, r2
            if (*ep->buffer_control & USB_BUF_CTRL_AVAIL) {
100069aa:	68e1      	ldr	r1, [r4, #12]
100069ac:	680a      	ldr	r2, [r1, #0]
100069ae:	0552      	lsls	r2, r2, #21
100069b0:	d419      	bmi.n	100069e6 <_hw_endpoint_xfer+0xa2>
            *ep->buffer_control = value & ~USB_BUF_CTRL_AVAIL;
100069b2:	4a0f      	ldr	r2, [pc, #60]	; (100069f0 <_hw_endpoint_xfer+0xac>)
100069b4:	401a      	ands	r2, r3
100069b6:	600a      	str	r2, [r1, #0]
            __asm volatile (
100069b8:	e7ff      	b.n	100069ba <_hw_endpoint_xfer+0x76>
100069ba:	e7ff      	b.n	100069bc <_hw_endpoint_xfer+0x78>
100069bc:	e7ff      	b.n	100069be <_hw_endpoint_xfer+0x7a>
100069be:	e7ff      	b.n	100069c0 <_hw_endpoint_xfer+0x7c>
100069c0:	e7ff      	b.n	100069c2 <_hw_endpoint_xfer+0x7e>
100069c2:	e7ff      	b.n	100069c4 <_hw_endpoint_xfer+0x80>
    *ep->buffer_control = value;
100069c4:	68e2      	ldr	r2, [r4, #12]
100069c6:	6013      	str	r3, [r2, #0]
    }
    else
    {
        _hw_endpoint_xfer_continue(ep);
    }
}
100069c8:	bd70      	pop	{r4, r5, r6, pc}
    ep->transfer_size = total_len > 64 ? 64 : total_len;
100069ca:	2540      	movs	r5, #64	; 0x40
100069cc:	e7cb      	b.n	10006966 <_hw_endpoint_xfer+0x22>
        memcpy(ep->hw_data_buf, &ep->user_buf[ep->len], ep->transfer_size);
100069ce:	002a      	movs	r2, r5
100069d0:	6920      	ldr	r0, [r4, #16]
100069d2:	f7fa fb8d 	bl	100010f0 <__wrap___aeabi_memcpy>
        val |= USB_BUF_CTRL_FULL;
100069d6:	2384      	movs	r3, #132	; 0x84
100069d8:	021b      	lsls	r3, r3, #8
    if (ep->last_buf)
100069da:	5da2      	ldrb	r2, [r4, r6]
        val |= USB_BUF_CTRL_FULL;
100069dc:	432b      	orrs	r3, r5
100069de:	e7d6      	b.n	1000698e <_hw_endpoint_xfer+0x4a>
        _hw_endpoint_xfer_continue(ep);
100069e0:	f7ff ff30 	bl	10006844 <_hw_endpoint_xfer_continue>
}
100069e4:	e7f0      	b.n	100069c8 <_hw_endpoint_xfer+0x84>
100069e6:	78a1      	ldrb	r1, [r4, #2]
100069e8:	7860      	ldrb	r0, [r4, #1]
100069ea:	f7ff fecb 	bl	10006784 <_hw_endpoint_buffer_control_update32.part.0.isra.0>
100069ee:	46c0      	nop			; (mov r8, r8)
100069f0:	fffffbff 	.word	0xfffffbff

100069f4 <tusb_init>:
#if TUSB_OPT_DEVICE_ENABLED
#include "device/usbd_pvt.h"
#endif

bool tusb_init(void)
{
100069f4:	b570      	push	{r4, r5, r6, lr}
  // skip if already initialized
  if (_initialized) return true;
100069f6:	4d06      	ldr	r5, [pc, #24]	; (10006a10 <tusb_init+0x1c>)
100069f8:	782c      	ldrb	r4, [r5, #0]
100069fa:	2c00      	cmp	r4, #0
100069fc:	d001      	beq.n	10006a02 <tusb_init+0xe>
#endif

  _initialized = true;

  return TUSB_ERROR_NONE;
}
100069fe:	0020      	movs	r0, r4
10006a00:	bd70      	pop	{r4, r5, r6, pc}
  TU_ASSERT ( tud_init() ); // init device stack
10006a02:	f7fe fda1 	bl	10005548 <tud_init>
10006a06:	2800      	cmp	r0, #0
10006a08:	d0f9      	beq.n	100069fe <tusb_init+0xa>
  _initialized = true;
10006a0a:	2301      	movs	r3, #1
10006a0c:	702b      	strb	r3, [r5, #0]
  return TUSB_ERROR_NONE;
10006a0e:	e7f6      	b.n	100069fe <tusb_init+0xa>
10006a10:	20023b86 	.word	0x20023b86

10006a14 <tusb_inited>:

bool tusb_inited(void)
{
  return _initialized;
10006a14:	4b01      	ldr	r3, [pc, #4]	; (10006a1c <tusb_inited+0x8>)
10006a16:	7818      	ldrb	r0, [r3, #0]
}
10006a18:	4770      	bx	lr
10006a1a:	46c0      	nop			; (mov r8, r8)
10006a1c:	20023b86 	.word	0x20023b86

10006a20 <_Z8OpenPagev>:
	"                                T H E     E N D\n",
};

// open page
void OpenPage()
{
10006a20:	b570      	push	{r4, r5, r6, lr}
	LayerOff(IMG_LAYER);
10006a22:	2001      	movs	r0, #1
10006a24:	f000 fe2a 	bl	1000767c <_Z8LayerOffh>

	PrintSetup(Text, TEXTW, TEXTH, TEXTWB);
10006a28:	2206      	movs	r2, #6
10006a2a:	2150      	movs	r1, #80	; 0x50
10006a2c:	23a0      	movs	r3, #160	; 0xa0
10006a2e:	4816      	ldr	r0, [pc, #88]	; (10006a88 <_Z8OpenPagev+0x68>)
10006a30:	f001 fb54 	bl	100080dc <_Z10PrintSetupPhiii>
	int inx = Page;
10006a34:	4b15      	ldr	r3, [pc, #84]	; (10006a8c <_Z8OpenPagev+0x6c>)
	PrintSetCol(PC_COLOR(PC_BLACK, PC_WHITE));
10006a36:	200f      	movs	r0, #15
	int inx = Page;
10006a38:	681d      	ldr	r5, [r3, #0]
	PrintSetCol(PC_COLOR(PC_BLACK, PC_WHITE));
10006a3a:	f001 fbcf 	bl	100081dc <_Z11PrintSetColh>
	PrintClear();
10006a3e:	f001 fb77 	bl	10008130 <_Z10PrintClearv>
	memcpy(Img_rows_Copy, ImgRowsList[inx], (IMGHEIGHT+1)*sizeof(u16));
10006a42:	4b13      	ldr	r3, [pc, #76]	; (10006a90 <_Z8OpenPagev+0x70>)
10006a44:	00ac      	lsls	r4, r5, #2
10006a46:	58e1      	ldr	r1, [r4, r3]
10006a48:	4a12      	ldr	r2, [pc, #72]	; (10006a94 <_Z8OpenPagev+0x74>)
10006a4a:	4813      	ldr	r0, [pc, #76]	; (10006a98 <_Z8OpenPagev+0x78>)
10006a4c:	f7fa fb50 	bl	100010f0 <__wrap___aeabi_memcpy>
	memcpy(Img_Copy, ImgList[inx], ImgSizeList[inx]);
10006a50:	4b12      	ldr	r3, [pc, #72]	; (10006a9c <_Z8OpenPagev+0x7c>)
10006a52:	4813      	ldr	r0, [pc, #76]	; (10006aa0 <_Z8OpenPagev+0x80>)
10006a54:	58e1      	ldr	r1, [r4, r3]
10006a56:	4b13      	ldr	r3, [pc, #76]	; (10006aa4 <_Z8OpenPagev+0x84>)
10006a58:	58e2      	ldr	r2, [r4, r3]
10006a5a:	f7fa fb49 	bl	100010f0 <__wrap___aeabi_memcpy>
	PrintText(PageText[inx]);
10006a5e:	4b12      	ldr	r3, [pc, #72]	; (10006aa8 <_Z8OpenPagev+0x88>)
10006a60:	58e0      	ldr	r0, [r4, r3]
10006a62:	f001 fbc1 	bl	100081e8 <_Z9PrintTextPKc>

	// page 0
	if (inx == 0)
10006a66:	2d00      	cmp	r5, #0
10006a68:	d003      	beq.n	10006a72 <_Z8OpenPagev+0x52>
		PrintSetCol(PC_COLOR(PC_BLACK, PC_LTRED));
		PrintSetPos((TEXTW - sizeof(Title)+1)/2, 2);
		PrintText(Title);
	}

	LayerOn(IMG_LAYER);
10006a6a:	2001      	movs	r0, #1
10006a6c:	f000 fdf6 	bl	1000765c <_Z7LayerOnh>
}
10006a70:	bd70      	pop	{r4, r5, r6, pc}
		PrintSetCol(PC_COLOR(PC_BLACK, PC_LTRED));
10006a72:	200c      	movs	r0, #12
10006a74:	f001 fbb2 	bl	100081dc <_Z11PrintSetColh>
		PrintSetPos((TEXTW - sizeof(Title)+1)/2, 2);
10006a78:	2102      	movs	r1, #2
10006a7a:	201d      	movs	r0, #29
10006a7c:	f001 fba4 	bl	100081c8 <_Z11PrintSetPosii>
		PrintText(Title);
10006a80:	480a      	ldr	r0, [pc, #40]	; (10006aac <_Z8OpenPagev+0x8c>)
10006a82:	f001 fbb1 	bl	100081e8 <_Z9PrintTextPKc>
10006a86:	e7f0      	b.n	10006a6a <_Z8OpenPagev+0x4a>
10006a88:	20022abc 	.word	0x20022abc
10006a8c:	200218bc 	.word	0x200218bc
10006a90:	101aebc0 	.word	0x101aebc0
10006a94:	00000362 	.word	0x00000362
10006a98:	2001fdbc 	.word	0x2001fdbc
10006a9c:	101aec88 	.word	0x101aec88
10006aa0:	2000500c 	.word	0x2000500c
10006aa4:	101aec18 	.word	0x101aec18
10006aa8:	20002758 	.word	0x20002758
10006aac:	101aec70 	.word	0x101aec70

10006ab0 <_Z9VideoInitv>:

// initialize videomode
void VideoInit()
{
10006ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
	// setup videomode
	VgaCfgDef(&Cfg); // get default configuration
10006ab2:	4d29      	ldr	r5, [pc, #164]	; (10006b58 <_Z9VideoInitv+0xa8>)
{
10006ab4:	b085      	sub	sp, #20
	VgaCfgDef(&Cfg); // get default configuration
10006ab6:	0028      	movs	r0, r5
10006ab8:	f000 fec8 	bl	1000784c <_Z9VgaCfgDefP7sVgaCfg>
	Cfg.video = &VideoVGA; // video timings
10006abc:	4b27      	ldr	r3, [pc, #156]	; (10006b5c <_Z9VideoInitv+0xac>)

	// initialize base layer 0
	ScreenClear(pScreen);

	// initialize base layer 0 to simple color (will not be visible) + text segment
	sStrip* t = ScreenAddStrip(pScreen, IMGHEIGHT);
10006abe:	27d8      	movs	r7, #216	; 0xd8
	Cfg.video = &VideoVGA; // video timings
10006ac0:	60ab      	str	r3, [r5, #8]
	Cfg.width = WIDTH; // screen width
10006ac2:	4b27      	ldr	r3, [pc, #156]	; (10006b60 <_Z9VideoInitv+0xb0>)
	VgaCfg(&Cfg, &Vmode); // calculate videomode setup
10006ac4:	0028      	movs	r0, r5
	Cfg.width = WIDTH; // screen width
10006ac6:	602b      	str	r3, [r5, #0]
	Cfg.freq = 150000; // user faster sys_clk (AText mode is not fast enough)
10006ac8:	4b26      	ldr	r3, [pc, #152]	; (10006b64 <_Z9VideoInitv+0xb4>)
	VgaCfg(&Cfg, &Vmode); // calculate videomode setup
10006aca:	4c27      	ldr	r4, [pc, #156]	; (10006b68 <_Z9VideoInitv+0xb8>)
	Cfg.freq = 150000; // user faster sys_clk (AText mode is not fast enough)
10006acc:	60eb      	str	r3, [r5, #12]
	Cfg.mode[IMG_LAYER] = LAYERMODE_RLE; // layer 1 mode
10006ace:	2306      	movs	r3, #6
10006ad0:	756b      	strb	r3, [r5, #21]
	sSegm* g = ScreenAddSegm(t, WIDTH);
10006ad2:	25a0      	movs	r5, #160	; 0xa0
	VgaCfg(&Cfg, &Vmode); // calculate videomode setup
10006ad4:	0021      	movs	r1, r4
10006ad6:	f000 fecf 	bl	10007878 <_Z6VgaCfgPK7sVgaCfgP6sVmode>
	ScreenClear(pScreen);
10006ada:	4e24      	ldr	r6, [pc, #144]	; (10006b6c <_Z9VideoInitv+0xbc>)
	sStrip* t = ScreenAddStrip(pScreen, IMGHEIGHT);
10006adc:	007f      	lsls	r7, r7, #1
	ScreenClear(pScreen);
10006ade:	6830      	ldr	r0, [r6, #0]
10006ae0:	f000 fe60 	bl	100077a4 <_Z11ScreenClearP7sScreen>
	sSegm* g = ScreenAddSegm(t, WIDTH);
10006ae4:	00ad      	lsls	r5, r5, #2
	sStrip* t = ScreenAddStrip(pScreen, IMGHEIGHT);
10006ae6:	0039      	movs	r1, r7
10006ae8:	6830      	ldr	r0, [r6, #0]
10006aea:	f000 fe63 	bl	100077b4 <_Z14ScreenAddStripP7sScreeni>
	sSegm* g = ScreenAddSegm(t, WIDTH);
10006aee:	0029      	movs	r1, r5
10006af0:	f000 fe72 	bl	100077d8 <_Z13ScreenAddSegmP6sStripi>
	ScreenSegmColor(g, 0, 0);
10006af4:	2200      	movs	r2, #0
10006af6:	2100      	movs	r1, #0
10006af8:	f000 fe8a 	bl	10007810 <_Z15ScreenSegmColorP5sSegmmm>
	t = ScreenAddStrip(pScreen, TEXTHEIGHT);
10006afc:	2130      	movs	r1, #48	; 0x30
10006afe:	6830      	ldr	r0, [r6, #0]
10006b00:	f000 fe58 	bl	100077b4 <_Z14ScreenAddStripP7sScreeni>
	g = ScreenAddSegm(t, WIDTH);
10006b04:	0029      	movs	r1, r5
10006b06:	f000 fe67 	bl	100077d8 <_Z13ScreenAddSegmP6sStripi>
	ScreenSegmAText(g, Text, Font_Copy, 8, DefPal16, TEXTWB);
10006b0a:	23a0      	movs	r3, #160	; 0xa0
10006b0c:	9301      	str	r3, [sp, #4]
10006b0e:	4b18      	ldr	r3, [pc, #96]	; (10006b70 <_Z9VideoInitv+0xc0>)
10006b10:	4a18      	ldr	r2, [pc, #96]	; (10006b74 <_Z9VideoInitv+0xc4>)
10006b12:	9300      	str	r3, [sp, #0]
10006b14:	4918      	ldr	r1, [pc, #96]	; (10006b78 <_Z9VideoInitv+0xc8>)
10006b16:	2308      	movs	r3, #8
10006b18:	f000 fe84 	bl	10007824 <_Z15ScreenSegmATextP5sSegmPKvS2_tS2_i>

	// setup layer 1 with RLE image
	LayerSetup(IMG_LAYER, Img_Copy, &Vmode, IMGWIDTH, IMGHEIGHT, 0, Img_rows_Copy);
10006b1c:	4b17      	ldr	r3, [pc, #92]	; (10006b7c <_Z9VideoInitv+0xcc>)
10006b1e:	0022      	movs	r2, r4
10006b20:	9302      	str	r3, [sp, #8]
10006b22:	2300      	movs	r3, #0
10006b24:	4916      	ldr	r1, [pc, #88]	; (10006b80 <_Z9VideoInitv+0xd0>)
10006b26:	9301      	str	r3, [sp, #4]
10006b28:	2001      	movs	r0, #1
10006b2a:	002b      	movs	r3, r5
10006b2c:	9700      	str	r7, [sp, #0]
10006b2e:	f000 fdb5 	bl	1000769c <_Z10LayerSetuphPKhPK6sVmodetthPKv>
	LayerOn(IMG_LAYER);
10006b32:	2001      	movs	r0, #1
10006b34:	f000 fd92 	bl	1000765c <_Z7LayerOnh>

	// initialize system clock
	set_sys_clock_pll(Vmode.vco*1000, Vmode.pd1, Vmode.pd2);
10006b38:	68e3      	ldr	r3, [r4, #12]
10006b3a:	7ce2      	ldrb	r2, [r4, #19]
10006b3c:	0158      	lsls	r0, r3, #5
10006b3e:	1ac0      	subs	r0, r0, r3
10006b40:	0080      	lsls	r0, r0, #2
10006b42:	18c0      	adds	r0, r0, r3
10006b44:	7ca1      	ldrb	r1, [r4, #18]
10006b46:	00c0      	lsls	r0, r0, #3
10006b48:	f7fd fa8a 	bl	10004060 <set_sys_clock_pll>

	// initialize videomode
	VgaInitReq(&Vmode);
10006b4c:	0020      	movs	r0, r4
10006b4e:	f000 fd71 	bl	10007634 <_Z10VgaInitReqPK6sVmode>
}
10006b52:	b005      	add	sp, #20
10006b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006b56:	46c0      	nop			; (mov r8, r8)
10006b58:	20003270 	.word	0x20003270
10006b5c:	101af048 	.word	0x101af048
10006b60:	01e00280 	.word	0x01e00280
10006b64:	000249f0 	.word	0x000249f0
10006b68:	20022e80 	.word	0x20022e80
10006b6c:	200027e4 	.word	0x200027e4
10006b70:	200027d4 	.word	0x200027d4
10006b74:	20004808 	.word	0x20004808
10006b78:	20022abc 	.word	0x20022abc
10006b7c:	2001fdbc 	.word	0x2001fdbc
10006b80:	2000500c 	.word	0x2000500c

10006b84 <_Z10initJoyPadv>:
// #define PB_CF 21		// Center Fire
// #define PB_DN 22		// Down direction
// #define PB_UR 26		// Upper right
// #define PB_UP 27		// Up direction
void initJoyPad()
{
10006b84:	b510      	push	{r4, lr}
	gpio_init(PB_UL);
10006b86:	2010      	movs	r0, #16
10006b88:	f7fa fe62 	bl	10001850 <gpio_init>
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO to set to input, as bits 0-29
 */
static inline void gpio_set_dir_in_masked(uint32_t mask) {
    sio_hw->gpio_oe_clr = mask;
10006b8c:	24d0      	movs	r4, #208	; 0xd0
10006b8e:	2380      	movs	r3, #128	; 0x80
10006b90:	0624      	lsls	r4, r4, #24
10006b92:	025b      	lsls	r3, r3, #9
10006b94:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10006b96:	2200      	movs	r2, #0
10006b98:	2101      	movs	r1, #1
10006b9a:	2010      	movs	r0, #16
10006b9c:	f7fa fe2e 	bl	100017fc <gpio_set_pulls>
	gpio_set_dir(PB_UL, GPIO_IN);
	gpio_pull_up(PB_UL);
	
	gpio_init(PB_FR);
10006ba0:	2012      	movs	r0, #18
10006ba2:	f7fa fe55 	bl	10001850 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10006ba6:	2380      	movs	r3, #128	; 0x80
10006ba8:	02db      	lsls	r3, r3, #11
10006baa:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10006bac:	2200      	movs	r2, #0
10006bae:	2101      	movs	r1, #1
10006bb0:	2012      	movs	r0, #18
10006bb2:	f7fa fe23 	bl	100017fc <gpio_set_pulls>
	gpio_set_dir(PB_FR, GPIO_IN);
	gpio_pull_up(PB_FR);
	
	gpio_init(PB_UP);
10006bb6:	201b      	movs	r0, #27
10006bb8:	f7fa fe4a 	bl	10001850 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10006bbc:	2380      	movs	r3, #128	; 0x80
10006bbe:	051b      	lsls	r3, r3, #20
10006bc0:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10006bc2:	2200      	movs	r2, #0
10006bc4:	2101      	movs	r1, #1
10006bc6:	201b      	movs	r0, #27
10006bc8:	f7fa fe18 	bl	100017fc <gpio_set_pulls>
	gpio_set_dir(PB_UP, GPIO_IN);
	gpio_pull_up(PB_UP);
	
	gpio_init(PB_UR);
10006bcc:	201a      	movs	r0, #26
10006bce:	f7fa fe3f 	bl	10001850 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10006bd2:	2380      	movs	r3, #128	; 0x80
10006bd4:	04db      	lsls	r3, r3, #19
10006bd6:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10006bd8:	2200      	movs	r2, #0
10006bda:	2101      	movs	r1, #1
10006bdc:	201a      	movs	r0, #26
10006bde:	f7fa fe0d 	bl	100017fc <gpio_set_pulls>
	gpio_set_dir(PB_UR, GPIO_IN);
	gpio_pull_up(PB_UR);
	
	gpio_init(PB_DN);
10006be2:	2016      	movs	r0, #22
10006be4:	f7fa fe34 	bl	10001850 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10006be8:	2380      	movs	r3, #128	; 0x80
10006bea:	03db      	lsls	r3, r3, #15
10006bec:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10006bee:	2200      	movs	r2, #0
10006bf0:	2101      	movs	r1, #1
10006bf2:	2016      	movs	r0, #22
10006bf4:	f7fa fe02 	bl	100017fc <gpio_set_pulls>
	gpio_set_dir(PB_DN, GPIO_IN);
	gpio_pull_up(PB_DN);
	
	gpio_init(PB_LT);
10006bf8:	2014      	movs	r0, #20
10006bfa:	f7fa fe29 	bl	10001850 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10006bfe:	2380      	movs	r3, #128	; 0x80
10006c00:	035b      	lsls	r3, r3, #13
10006c02:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10006c04:	2200      	movs	r2, #0
10006c06:	2101      	movs	r1, #1
10006c08:	2014      	movs	r0, #20
10006c0a:	f7fa fdf7 	bl	100017fc <gpio_set_pulls>
	gpio_set_dir(PB_LT, GPIO_IN);
	gpio_pull_up(PB_LT);
	
	gpio_init(PB_RT);
10006c0e:	2011      	movs	r0, #17
10006c10:	f7fa fe1e 	bl	10001850 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10006c14:	2380      	movs	r3, #128	; 0x80
10006c16:	029b      	lsls	r3, r3, #10
10006c18:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10006c1a:	2200      	movs	r2, #0
10006c1c:	2101      	movs	r1, #1
10006c1e:	2011      	movs	r0, #17
10006c20:	f7fa fdec 	bl	100017fc <gpio_set_pulls>
	gpio_set_dir(PB_RT, GPIO_IN);
	gpio_pull_up(PB_RT);
	
	gpio_init(PB_CF);
10006c24:	2015      	movs	r0, #21
10006c26:	f7fa fe13 	bl	10001850 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10006c2a:	2380      	movs	r3, #128	; 0x80
10006c2c:	039b      	lsls	r3, r3, #14
    gpio_set_pulls(gpio, true, false);
10006c2e:	2200      	movs	r2, #0
10006c30:	2101      	movs	r1, #1
10006c32:	2015      	movs	r0, #21
    sio_hw->gpio_oe_clr = mask;
10006c34:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10006c36:	f7fa fde1 	bl	100017fc <gpio_set_pulls>
	gpio_set_dir(PB_CF, GPIO_IN);
	gpio_pull_up(PB_CF);
}
10006c3a:	bd10      	pop	{r4, pc}

10006c3c <main>:

int main()
{
10006c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char ch;

	// copy font to RAM buffer
	memcpy(Font_Copy, FontBold8x8, sizeof(FontBold8x8));
10006c3e:	2280      	movs	r2, #128	; 0x80
{
10006c40:	46ce      	mov	lr, r9
10006c42:	4647      	mov	r7, r8
	memcpy(Font_Copy, FontBold8x8, sizeof(FontBold8x8));
10006c44:	492f      	ldr	r1, [pc, #188]	; (10006d04 <main+0xc8>)
{
10006c46:	b580      	push	{r7, lr}
	memcpy(Font_Copy, FontBold8x8, sizeof(FontBold8x8));
10006c48:	0112      	lsls	r2, r2, #4
10006c4a:	482f      	ldr	r0, [pc, #188]	; (10006d08 <main+0xcc>)
10006c4c:	f7fa fa50 	bl	100010f0 <__wrap___aeabi_memcpy>

	// run VGA core
	multicore_launch_core1(VgaCore);
10006c50:	482e      	ldr	r0, [pc, #184]	; (10006d0c <main+0xd0>)
10006c52:	f7fa ffe5 	bl	10001c20 <multicore_launch_core1>

	// initialize videomode (and open first page)
	VideoInit();
10006c56:	f7ff ff2b 	bl	10006ab0 <_Z9VideoInitv>

	// open first page
	Page = 0;
10006c5a:	2300      	movs	r3, #0
10006c5c:	4e2c      	ldr	r6, [pc, #176]	; (10006d10 <main+0xd4>)
    return !!((1ul << gpio) & sio_hw->gpio_in);
10006c5e:	25d0      	movs	r5, #208	; 0xd0
10006c60:	6033      	str	r3, [r6, #0]
	OpenPage();
10006c62:	f7ff fedd 	bl	10006a20 <_Z8OpenPagev>

	// initialize stdio
	stdio_init_all();
10006c66:	f7fd f8b9 	bl	10003ddc <stdio_init_all>
	initJoyPad();
10006c6a:	f7ff ff8b 	bl	10006b84 <_Z10initJoyPadv>
10006c6e:	4b29      	ldr	r3, [pc, #164]	; (10006d14 <main+0xd8>)
10006c70:	2401      	movs	r4, #1
10006c72:	4699      	mov	r9, r3
10006c74:	4b28      	ldr	r3, [pc, #160]	; (10006d18 <main+0xdc>)
10006c76:	4f29      	ldr	r7, [pc, #164]	; (10006d1c <main+0xe0>)
10006c78:	4698      	mov	r8, r3
10006c7a:	062d      	lsls	r5, r5, #24
10006c7c:	686b      	ldr	r3, [r5, #4]
10006c7e:	0d1b      	lsrs	r3, r3, #20
	// main loop
	while (true)
	{
//		ch = getchar();
		ch = 0;
		if (!gpio_get(PB_LT))
10006c80:	421c      	tst	r4, r3
10006c82:	d018      	beq.n	10006cb6 <main+0x7a>
10006c84:	686b      	ldr	r3, [r5, #4]
10006c86:	0c5b      	lsrs	r3, r3, #17
		{
			while (!gpio_get(PB_LT))
				sleep_ms(20);
			ch =  'J';
		}
		else if (!gpio_get(PB_RT))
10006c88:	421c      	tst	r4, r3
10006c8a:	d028      	beq.n	10006cde <main+0xa2>
			if (Page >= PAGES) Page = 0;
			OpenPage();
			break;

		default:
			printf("J ... previous page\n");
10006c8c:	4648      	mov	r0, r9
10006c8e:	f7fc ffe9 	bl	10003c64 <__wrap_puts>
			printf("L ... next page\n");
10006c92:	4640      	mov	r0, r8
10006c94:	f7fc ffe6 	bl	10003c64 <__wrap_puts>
			printf("sys_clk = %ukHz\n", clock_get_hz(clk_sys)/1000);
10006c98:	2005      	movs	r0, #5
10006c9a:	f7fa fcf3 	bl	10001684 <clock_get_hz>
10006c9e:	21fa      	movs	r1, #250	; 0xfa
10006ca0:	0089      	lsls	r1, r1, #2
10006ca2:	f7f9 fb67 	bl	10000374 <__wrap___aeabi_uidiv>
10006ca6:	0001      	movs	r1, r0
10006ca8:	0038      	movs	r0, r7
10006caa:	f7fd f88b 	bl	10003dc4 <__wrap_printf>
10006cae:	686b      	ldr	r3, [r5, #4]
10006cb0:	0d1b      	lsrs	r3, r3, #20
		if (!gpio_get(PB_LT))
10006cb2:	421c      	tst	r4, r3
10006cb4:	d1e6      	bne.n	10006c84 <main+0x48>
10006cb6:	686b      	ldr	r3, [r5, #4]
10006cb8:	0d1b      	lsrs	r3, r3, #20
			while (!gpio_get(PB_LT))
10006cba:	421c      	tst	r4, r3
10006cbc:	d106      	bne.n	10006ccc <main+0x90>
				sleep_ms(20);
10006cbe:	2014      	movs	r0, #20
10006cc0:	f7fd fda8 	bl	10004814 <sleep_ms>
10006cc4:	686b      	ldr	r3, [r5, #4]
10006cc6:	0d1b      	lsrs	r3, r3, #20
			while (!gpio_get(PB_LT))
10006cc8:	421c      	tst	r4, r3
10006cca:	d0f8      	beq.n	10006cbe <main+0x82>
			if (Page < 0) Page = PAGES-1;
10006ccc:	6833      	ldr	r3, [r6, #0]
10006cce:	3b01      	subs	r3, #1
10006cd0:	d403      	bmi.n	10006cda <main+0x9e>
10006cd2:	6033      	str	r3, [r6, #0]
			OpenPage();
10006cd4:	f7ff fea4 	bl	10006a20 <_Z8OpenPagev>
			break;
10006cd8:	e7d0      	b.n	10006c7c <main+0x40>
			if (Page < 0) Page = PAGES-1;
10006cda:	2315      	movs	r3, #21
10006cdc:	e7f9      	b.n	10006cd2 <main+0x96>
10006cde:	686b      	ldr	r3, [r5, #4]
10006ce0:	0c5b      	lsrs	r3, r3, #17
			while (!gpio_get(PB_RT))
10006ce2:	421c      	tst	r4, r3
10006ce4:	d106      	bne.n	10006cf4 <main+0xb8>
				sleep_ms(20);
10006ce6:	2014      	movs	r0, #20
10006ce8:	f7fd fd94 	bl	10004814 <sleep_ms>
10006cec:	686b      	ldr	r3, [r5, #4]
10006cee:	0c5b      	lsrs	r3, r3, #17
			while (!gpio_get(PB_RT))
10006cf0:	421c      	tst	r4, r3
10006cf2:	d0f8      	beq.n	10006ce6 <main+0xaa>
			Page++;
10006cf4:	6833      	ldr	r3, [r6, #0]
10006cf6:	3301      	adds	r3, #1
			if (Page >= PAGES) Page = 0;
10006cf8:	2b15      	cmp	r3, #21
10006cfa:	ddea      	ble.n	10006cd2 <main+0x96>
10006cfc:	2300      	movs	r3, #0
10006cfe:	6033      	str	r3, [r6, #0]
10006d00:	e7e8      	b.n	10006cd4 <main+0x98>
10006d02:	46c0      	nop			; (mov r8, r8)
10006d04:	101af080 	.word	0x101af080
10006d08:	20004808 	.word	0x20004808
10006d0c:	100075e9 	.word	0x100075e9
10006d10:	200218bc 	.word	0x200218bc
10006d14:	101ad59c 	.word	0x101ad59c
10006d18:	101ad5b0 	.word	0x101ad5b0
10006d1c:	101ad5c0 	.word	0x101ad5c0

10006d20 <_Z10VgaDmaInitv>:
 * \param read_addr Initial read address of transfer.
 * \param trigger True to start the transfer immediately
 */
static inline void dma_channel_set_read_addr(uint channel, const volatile void *read_addr, bool trigger) {
    if (!trigger) {
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10006d20:	23a0      	movs	r3, #160	; 0xa0
// 0x10 (alias 1):  CTRL        READ_ADDR     WRITE_ADDR    TRANS_COUNT_TRIG
// 0x20 (alias 2):  CTRL        TRANS_COUNT   READ_ADDR     WRITE_ADDR_TRIG
// 0x30 (alias 3):  CTRL        WRITE_ADDR    TRANS_COUNT   READ_ADDR_TRIG ... !

void VgaDmaInit()
{
10006d22:	b570      	push	{r4, r5, r6, lr}
 * \param trans_count The number of transfers (not NOT bytes, see channel_config_set_transfer_data_size)
 * \param trigger True to start the transfer immediately
 */
static inline void dma_channel_set_trans_count(uint channel, uint32_t trans_count, bool trigger) {
    if (!trigger) {
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10006d24:	2402      	movs	r4, #2
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10006d26:	4a2a      	ldr	r2, [pc, #168]	; (10006dd0 <_Z10VgaDmaInitv+0xb0>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10006d28:	492a      	ldr	r1, [pc, #168]	; (10006dd4 <_Z10VgaDmaInitv+0xb4>)
10006d2a:	05db      	lsls	r3, r3, #23
10006d2c:	6019      	str	r1, [r3, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10006d2e:	605a      	str	r2, [r3, #4]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10006d30:	4a29      	ldr	r2, [pc, #164]	; (10006dd8 <_Z10VgaDmaInitv+0xb8>)
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10006d32:	609c      	str	r4, [r3, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10006d34:	611a      	str	r2, [r3, #16]
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10006d36:	2200      	movs	r2, #0
10006d38:	4b28      	ldr	r3, [pc, #160]	; (10006ddc <_Z10VgaDmaInitv+0xbc>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10006d3a:	4829      	ldr	r0, [pc, #164]	; (10006de0 <_Z10VgaDmaInitv+0xc0>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10006d3c:	601a      	str	r2, [r3, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10006d3e:	6058      	str	r0, [r3, #4]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10006d40:	4828      	ldr	r0, [pc, #160]	; (10006de4 <_Z10VgaDmaInitv+0xc4>)
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10006d42:	609a      	str	r2, [r3, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10006d44:	6118      	str	r0, [r3, #16]
	dma_channel_config cfg;
	int layer;
	for (layer = 0; layer < LAYERS; layer++)
	{
		// layer is not active
		if ((layer > 0) && (LayerModeInx[layer] == LAYERMODE_BASE)) continue;
10006d46:	4b28      	ldr	r3, [pc, #160]	; (10006de8 <_Z10VgaDmaInitv+0xc8>)
10006d48:	7858      	ldrb	r0, [r3, #1]
10006d4a:	2800      	cmp	r0, #0
10006d4c:	d00d      	beq.n	10006d6a <_Z10VgaDmaInitv+0x4a>
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10006d4e:	4827      	ldr	r0, [pc, #156]	; (10006dec <_Z10VgaDmaInitv+0xcc>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10006d50:	4d27      	ldr	r5, [pc, #156]	; (10006df0 <_Z10VgaDmaInitv+0xd0>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10006d52:	6001      	str	r1, [r0, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10006d54:	6045      	str	r5, [r0, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10006d56:	6084      	str	r4, [r0, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10006d58:	4c26      	ldr	r4, [pc, #152]	; (10006df4 <_Z10VgaDmaInitv+0xd4>)
10006d5a:	6104      	str	r4, [r0, #16]
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10006d5c:	4826      	ldr	r0, [pc, #152]	; (10006df8 <_Z10VgaDmaInitv+0xd8>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10006d5e:	4c27      	ldr	r4, [pc, #156]	; (10006dfc <_Z10VgaDmaInitv+0xdc>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10006d60:	6002      	str	r2, [r0, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10006d62:	6044      	str	r4, [r0, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10006d64:	6082      	str	r2, [r0, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10006d66:	4a26      	ldr	r2, [pc, #152]	; (10006e00 <_Z10VgaDmaInitv+0xe0>)
10006d68:	6102      	str	r2, [r0, #16]
10006d6a:	789a      	ldrb	r2, [r3, #2]
10006d6c:	2a00      	cmp	r2, #0
10006d6e:	d00f      	beq.n	10006d90 <_Z10VgaDmaInitv+0x70>
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10006d70:	4a24      	ldr	r2, [pc, #144]	; (10006e04 <_Z10VgaDmaInitv+0xe4>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10006d72:	4825      	ldr	r0, [pc, #148]	; (10006e08 <_Z10VgaDmaInitv+0xe8>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10006d74:	6011      	str	r1, [r2, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10006d76:	6050      	str	r0, [r2, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10006d78:	2002      	movs	r0, #2
10006d7a:	6090      	str	r0, [r2, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10006d7c:	4823      	ldr	r0, [pc, #140]	; (10006e0c <_Z10VgaDmaInitv+0xec>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10006d7e:	4c24      	ldr	r4, [pc, #144]	; (10006e10 <_Z10VgaDmaInitv+0xf0>)
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10006d80:	6110      	str	r0, [r2, #16]
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10006d82:	2000      	movs	r0, #0
10006d84:	4a23      	ldr	r2, [pc, #140]	; (10006e14 <_Z10VgaDmaInitv+0xf4>)
10006d86:	6010      	str	r0, [r2, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10006d88:	6054      	str	r4, [r2, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10006d8a:	6090      	str	r0, [r2, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10006d8c:	4822      	ldr	r0, [pc, #136]	; (10006e18 <_Z10VgaDmaInitv+0xf8>)
10006d8e:	6110      	str	r0, [r2, #16]
10006d90:	78db      	ldrb	r3, [r3, #3]
10006d92:	2b00      	cmp	r3, #0
10006d94:	d00f      	beq.n	10006db6 <_Z10VgaDmaInitv+0x96>
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10006d96:	4b21      	ldr	r3, [pc, #132]	; (10006e1c <_Z10VgaDmaInitv+0xfc>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10006d98:	4a21      	ldr	r2, [pc, #132]	; (10006e20 <_Z10VgaDmaInitv+0x100>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10006d9a:	6019      	str	r1, [r3, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10006d9c:	605a      	str	r2, [r3, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10006d9e:	2202      	movs	r2, #2
10006da0:	609a      	str	r2, [r3, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10006da2:	4a20      	ldr	r2, [pc, #128]	; (10006e24 <_Z10VgaDmaInitv+0x104>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10006da4:	4920      	ldr	r1, [pc, #128]	; (10006e28 <_Z10VgaDmaInitv+0x108>)
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10006da6:	611a      	str	r2, [r3, #16]
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10006da8:	2200      	movs	r2, #0
10006daa:	4b20      	ldr	r3, [pc, #128]	; (10006e2c <_Z10VgaDmaInitv+0x10c>)
10006dac:	601a      	str	r2, [r3, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10006dae:	6059      	str	r1, [r3, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10006db0:	609a      	str	r2, [r3, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10006db2:	4a1f      	ldr	r2, [pc, #124]	; (10006e30 <_Z10VgaDmaInitv+0x110>)
10006db4:	611a      	str	r2, [r3, #16]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10006db6:	2202      	movs	r2, #2
10006db8:	4b1e      	ldr	r3, [pc, #120]	; (10006e34 <_Z10VgaDmaInitv+0x114>)

	// enable DMA channel IRQ0
	dma_channel_set_irq0_enabled(VGA_DMA_PIO0, true);

	// set DMA IRQ handler
	irq_set_exclusive_handler(DMA_IRQ_0, VgaLine);
10006dba:	200b      	movs	r0, #11
10006dbc:	601a      	str	r2, [r3, #0]
10006dbe:	491e      	ldr	r1, [pc, #120]	; (10006e38 <_Z10VgaDmaInitv+0x118>)
10006dc0:	f7fa fd86 	bl	100018d0 <irq_set_exclusive_handler>

	// set highest IRQ priority
	irq_set_priority(DMA_IRQ_0, 0);
10006dc4:	2100      	movs	r1, #0
10006dc6:	200b      	movs	r0, #11
10006dc8:	f7fa fe8c 	bl	10001ae4 <irq_set_priority>
}
10006dcc:	bd70      	pop	{r4, r5, r6, pc}
10006dce:	46c0      	nop			; (mov r8, r8)
10006dd0:	50000078 	.word	0x50000078
10006dd4:	20003290 	.word	0x20003290
10006dd8:	001f84f9 	.word	0x001f84f9
10006ddc:	50000040 	.word	0x50000040
10006de0:	50200010 	.word	0x50200010
10006de4:	0060001b 	.word	0x0060001b
10006de8:	20020124 	.word	0x20020124
10006dec:	50000080 	.word	0x50000080
10006df0:	500000f8 	.word	0x500000f8
10006df4:	001f94f9 	.word	0x001f94f9
10006df8:	500000c0 	.word	0x500000c0
10006dfc:	50200014 	.word	0x50200014
10006e00:	0060901b 	.word	0x0060901b
10006e04:	50000100 	.word	0x50000100
10006e08:	50000178 	.word	0x50000178
10006e0c:	001fa4f9 	.word	0x001fa4f9
10006e10:	50200018 	.word	0x50200018
10006e14:	50000140 	.word	0x50000140
10006e18:	0061201b 	.word	0x0061201b
10006e1c:	50000180 	.word	0x50000180
10006e20:	500001f8 	.word	0x500001f8
10006e24:	001fb4f9 	.word	0x001fb4f9
10006e28:	5020001c 	.word	0x5020001c
10006e2c:	500001c0 	.word	0x500001c0
10006e30:	0061b01b 	.word	0x0061b01b
10006e34:	50002404 	.word	0x50002404
10006e38:	20002531 	.word	0x20002531

10006e3c <_Z10VgaPioInitv>:

// initialize VGA PIO
void VgaPioInit()
{
10006e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
10006e3e:	46ce      	mov	lr, r9
10006e40:	4647      	mov	r7, r8
10006e42:	b580      	push	{r7, lr}
10006e44:	b099      	sub	sp, #100	; 0x64
	int i;

	// clear PIO instruction memory 
	pio_clear_instruction_memory(VGA_PIO);
10006e46:	485c      	ldr	r0, [pc, #368]	; (10006fb8 <_Z10VgaPioInitv+0x17c>)

	// configure main program instructions
	uint16_t ins[32]; // temporary buffer of program instructions
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
10006e48:	ac08      	add	r4, sp, #32
	pio_clear_instruction_memory(VGA_PIO);
10006e4a:	f7fb f99d 	bl	10002188 <pio_clear_instruction_memory>
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
10006e4e:	0022      	movs	r2, r4
10006e50:	4b5a      	ldr	r3, [pc, #360]	; (10006fbc <_Z10VgaPioInitv+0x180>)
10006e52:	cb23      	ldmia	r3!, {r0, r1, r5}
10006e54:	c223      	stmia	r2!, {r0, r1, r5}
10006e56:	cb23      	ldmia	r3!, {r0, r1, r5}
10006e58:	c223      	stmia	r2!, {r0, r1, r5}
10006e5a:	6819      	ldr	r1, [r3, #0]
	u16 cpp = (u16)CurVmode.cpp; // number of clocks per pixel
10006e5c:	4d58      	ldr	r5, [pc, #352]	; (10006fc0 <_Z10VgaPioInitv+0x184>)
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
10006e5e:	6011      	str	r1, [r2, #0]
10006e60:	889b      	ldrh	r3, [r3, #4]
	// load main program into PIO's instruction memory
	struct pio_program prg;
	prg.instructions = ins;
	prg.length = vga_program.length;
	prg.origin = BASE_OFFSET;
	pio_add_program(VGA_PIO, &prg);
10006e62:	4855      	ldr	r0, [pc, #340]	; (10006fb8 <_Z10VgaPioInitv+0x17c>)
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
10006e64:	8093      	strh	r3, [r2, #4]
	ins[vga_offset_extra1] |= (cpp-2) << 8; // update waits
10006e66:	8aee      	ldrh	r6, [r5, #22]
10006e68:	4b56      	ldr	r3, [pc, #344]	; (10006fc4 <_Z10VgaPioInitv+0x188>)
10006e6a:	1eb2      	subs	r2, r6, #2
10006e6c:	0212      	lsls	r2, r2, #8
10006e6e:	4313      	orrs	r3, r2
10006e70:	b29b      	uxth	r3, r3
	prg.length = vga_program.length;
10006e72:	466a      	mov	r2, sp
	ins[vga_offset_extra1] |= (cpp-2) << 8; // update waits
10006e74:	8323      	strh	r3, [r4, #24]
	ins[vga_offset_extra2] |= (cpp-2) << 8; // update waits
10006e76:	83a3      	strh	r3, [r4, #28]
	prg.length = vga_program.length;
10006e78:	230f      	movs	r3, #15
	pio_add_program(VGA_PIO, &prg);
10006e7a:	a902      	add	r1, sp, #8
	prg.length = vga_program.length;
10006e7c:	7313      	strb	r3, [r2, #12]
	prg.origin = BASE_OFFSET;
10006e7e:	3302      	adds	r3, #2
10006e80:	7353      	strb	r3, [r2, #13]
	prg.instructions = ins;
10006e82:	9402      	str	r4, [sp, #8]
	pio_add_program(VGA_PIO, &prg);
10006e84:	f7fb f91c 	bl	100020c0 <pio_add_program>

	// load layer program
	if (LayerProgInx != LAYERPROG_BASE)
10006e88:	4b4f      	ldr	r3, [pc, #316]	; (10006fc8 <_Z10VgaPioInitv+0x18c>)
10006e8a:	781b      	ldrb	r3, [r3, #0]
10006e8c:	2b00      	cmp	r3, #0
10006e8e:	d161      	bne.n	10006f54 <_Z10VgaPioInitv+0x118>
	{
		// configure layer program instructions
		memcpy(ins, CurLayerProg.ins, CurLayerProg.length*sizeof(uint16_t)); // copy program into buffer
		for (i = 0; i < CurLayerProg.extranum; i++)
10006e90:	2400      	movs	r4, #0
    gpio_set_function(pin, pio == pio0 ? GPIO_FUNC_PIO0 : GPIO_FUNC_PIO1);
10006e92:	0020      	movs	r0, r4
10006e94:	2106      	movs	r1, #6
		prg.origin = LAYER_OFFSET;
		pio_add_program(VGA_PIO, &prg);
	}

	// connect PIO to the pad
	for (i = VGA_GPIO_FIRST; i <= VGA_GPIO_LAST; i++) pio_gpio_init(VGA_PIO, i);
10006e96:	3401      	adds	r4, #1
10006e98:	f7fa fc98 	bl	100017cc <gpio_set_function>
10006e9c:	2c09      	cmp	r4, #9
10006e9e:	d1f8      	bne.n	10006e92 <_Z10VgaPioInitv+0x56>

	// negative HSYNC output
	if (!CurVmode.psync) gpio_set_outover(VGA_GPIO_SYNC, GPIO_OVERRIDE_INVERT);
10006ea0:	2357      	movs	r3, #87	; 0x57
10006ea2:	5ceb      	ldrb	r3, [r5, r3]
10006ea4:	2b00      	cmp	r3, #0
10006ea6:	d100      	bne.n	10006eaa <_Z10VgaPioInitv+0x6e>
10006ea8:	e081      	b.n	10006fae <_Z10VgaPioInitv+0x172>

		// get default config
		pio_sm_config cfg = pio_get_default_sm_config();

		// map state machine's OUT and MOV pins	
		sm_config_set_out_pins(&cfg, LayerFirstPin[layer], LayerNumPin[layer]);
10006eaa:	4b48      	ldr	r3, [pc, #288]	; (10006fcc <_Z10VgaPioInitv+0x190>)
		for (i = 0; i < CurLayerProg.extranum; i++)
10006eac:	2400      	movs	r4, #0
		sm_config_set_out_pins(&cfg, LayerFirstPin[layer], LayerNumPin[layer]);
10006eae:	4698      	mov	r8, r3
		if ((layer > 0) && (LayerModeInx[layer] == LAYERMODE_BASE)) continue;
10006eb0:	2c00      	cmp	r4, #0
10006eb2:	d003      	beq.n	10006ebc <_Z10VgaPioInitv+0x80>
10006eb4:	4b46      	ldr	r3, [pc, #280]	; (10006fd0 <_Z10VgaPioInitv+0x194>)
10006eb6:	5d1b      	ldrb	r3, [r3, r4]
10006eb8:	2b00      	cmp	r3, #0
10006eba:	d036      	beq.n	10006f2a <_Z10VgaPioInitv+0xee>
		pio_sm_set_consecutive_pindirs(VGA_PIO, VGA_SM(layer), VGA_GPIO_FIRST, VGA_GPIO_NUM, true);
10006ebc:	2301      	movs	r3, #1
10006ebe:	2200      	movs	r2, #0
10006ec0:	0021      	movs	r1, r4
10006ec2:	483d      	ldr	r0, [pc, #244]	; (10006fb8 <_Z10VgaPioInitv+0x17c>)
10006ec4:	9300      	str	r3, [sp, #0]
10006ec6:	3308      	adds	r3, #8
10006ec8:	f7fb f97a 	bl	100021c0 <pio_sm_set_consecutive_pindirs>
		sm_config_set_out_pins(&cfg, LayerFirstPin[layer], LayerNumPin[layer]);
10006ecc:	4643      	mov	r3, r8
10006ece:	5d1e      	ldrb	r6, [r3, r4]
10006ed0:	4b40      	ldr	r3, [pc, #256]	; (10006fd4 <_Z10VgaPioInitv+0x198>)
                 (out_count << PIO_SM0_PINCTRL_OUT_COUNT_LSB);
10006ed2:	0536      	lsls	r6, r6, #20
10006ed4:	5d1b      	ldrb	r3, [r3, r4]
                 (out_base << PIO_SM0_PINCTRL_OUT_BASE_LSB) |
10006ed6:	431e      	orrs	r6, r3
    c->pinctrl = (c->pinctrl & ~(PIO_SM0_PINCTRL_OUT_BASE_BITS | PIO_SM0_PINCTRL_OUT_COUNT_BITS)) |
10006ed8:	9607      	str	r6, [sp, #28]

		// join FIFO to send only
		sm_config_set_fifo_join(&cfg, PIO_FIFO_JOIN_TX);

		// PIO clock divider
		sm_config_set_clkdiv(&cfg, CurVmode.div);
10006eda:	8aaf      	ldrh	r7, [r5, #20]
10006edc:	0038      	movs	r0, r7
10006ede:	f7fa f877 	bl	10000fd0 <__wrap___aeabi_ui2f>
10006ee2:	4681      	mov	r9, r0
    uint8_t div_frac = (uint8_t) ((div - div_int) * (1u << 8u));
10006ee4:	0038      	movs	r0, r7
10006ee6:	f7fa f879 	bl	10000fdc <__wrap___aeabi_i2f>
10006eea:	1c01      	adds	r1, r0, #0
10006eec:	4648      	mov	r0, r9
10006eee:	f7fa f860 	bl	10000fb2 <__wrap___aeabi_fsub>
10006ef2:	2187      	movs	r1, #135	; 0x87
10006ef4:	05c9      	lsls	r1, r1, #23
10006ef6:	f7fa f865 	bl	10000fc4 <__wrap___aeabi_fmul>
10006efa:	f7fa f8c3 	bl	10001084 <__wrap___aeabi_f2uiz>
            (div_frac << PIO_SM0_CLKDIV_FRAC_LSB) |
10006efe:	b2c0      	uxtb	r0, r0
            (div_int << PIO_SM0_CLKDIV_INT_LSB);
10006f00:	043b      	lsls	r3, r7, #16
            (div_frac << PIO_SM0_CLKDIV_FRAC_LSB) |
10006f02:	0200      	lsls	r0, r0, #8
10006f04:	4318      	orrs	r0, r3
    c->shiftctrl = (c->shiftctrl &
10006f06:	4b34      	ldr	r3, [pc, #208]	; (10006fd8 <_Z10VgaPioInitv+0x19c>)
    c->clkdiv =
10006f08:	9004      	str	r0, [sp, #16]
    c->shiftctrl = (c->shiftctrl &
10006f0a:	9306      	str	r3, [sp, #24]

		// shift left, autopull, pull threshold
		sm_config_set_out_shift(&cfg, false, true, 32);
	
		// base layer 0
		if (layer == 0)
10006f0c:	2c00      	cmp	r4, #0
10006f0e:	d014      	beq.n	10006f3a <_Z10VgaPioInitv+0xfe>
			pio_sm_init(VGA_PIO, VGA_SM0, vga_offset_entry+BASE_OFFSET, &cfg);
		}
		else
		{
			// set wrap
			sm_config_set_wrap(&cfg, CurLayerProg.wrap_target+LAYER_OFFSET, CurLayerProg.wrap+LAYER_OFFSET);
10006f10:	4a32      	ldr	r2, [pc, #200]	; (10006fdc <_Z10VgaPioInitv+0x1a0>)

			// initialize state machine
			pio_sm_init(VGA_PIO, VGA_SM(layer), CurLayerProg.idle+LAYER_OFFSET, &cfg);
10006f12:	4829      	ldr	r0, [pc, #164]	; (10006fb8 <_Z10VgaPioInitv+0x17c>)
			sm_config_set_wrap(&cfg, CurLayerProg.wrap_target+LAYER_OFFSET, CurLayerProg.wrap+LAYER_OFFSET);
10006f14:	7a53      	ldrb	r3, [r2, #9]
10006f16:	7a91      	ldrb	r1, [r2, #10]
                  (wrap_target << PIO_SM0_EXECCTRL_WRAP_BOTTOM_LSB) |
10006f18:	01db      	lsls	r3, r3, #7
                  (wrap << PIO_SM0_EXECCTRL_WRAP_TOP_LSB);
10006f1a:	0309      	lsls	r1, r1, #12
                  (wrap_target << PIO_SM0_EXECCTRL_WRAP_BOTTOM_LSB) |
10006f1c:	430b      	orrs	r3, r1
    c->execctrl = (c->execctrl & ~(PIO_SM0_EXECCTRL_WRAP_TOP_BITS | PIO_SM0_EXECCTRL_WRAP_BOTTOM_BITS)) |
10006f1e:	9305      	str	r3, [sp, #20]
			pio_sm_init(VGA_PIO, VGA_SM(layer), CurLayerProg.idle+LAYER_OFFSET, &cfg);
10006f20:	0021      	movs	r1, r4
10006f22:	7ad2      	ldrb	r2, [r2, #11]
10006f24:	ab04      	add	r3, sp, #16
10006f26:	f7fb f98d 	bl	10002244 <pio_sm_init>
	for (layer = 0; layer < LAYERS; layer++)
10006f2a:	3401      	adds	r4, #1
10006f2c:	2c04      	cmp	r4, #4
10006f2e:	d1bf      	bne.n	10006eb0 <_Z10VgaPioInitv+0x74>
		}
	}
}
10006f30:	b019      	add	sp, #100	; 0x64
10006f32:	bcc0      	pop	{r6, r7}
10006f34:	46b9      	mov	r9, r7
10006f36:	46b0      	mov	r8, r6
10006f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006f3a:	4b29      	ldr	r3, [pc, #164]	; (10006fe0 <_Z10VgaPioInitv+0x1a4>)
			pio_sm_init(VGA_PIO, VGA_SM0, vga_offset_entry+BASE_OFFSET, &cfg);
10006f3c:	2213      	movs	r2, #19
10006f3e:	9305      	str	r3, [sp, #20]
    c->pinctrl = (c->pinctrl & ~PIO_SM0_PINCTRL_SIDESET_BASE_BITS) |
10006f40:	4b28      	ldr	r3, [pc, #160]	; (10006fe4 <_Z10VgaPioInitv+0x1a8>)
10006f42:	2100      	movs	r1, #0
10006f44:	431e      	orrs	r6, r3
10006f46:	481c      	ldr	r0, [pc, #112]	; (10006fb8 <_Z10VgaPioInitv+0x17c>)
10006f48:	ab04      	add	r3, sp, #16
10006f4a:	9607      	str	r6, [sp, #28]
	for (layer = 0; layer < LAYERS; layer++)
10006f4c:	3401      	adds	r4, #1
			pio_sm_init(VGA_PIO, VGA_SM0, vga_offset_entry+BASE_OFFSET, &cfg);
10006f4e:	f7fb f979 	bl	10002244 <pio_sm_init>
	for (layer = 0; layer < LAYERS; layer++)
10006f52:	e7af      	b.n	10006eb4 <_Z10VgaPioInitv+0x78>
		memcpy(ins, CurLayerProg.ins, CurLayerProg.length*sizeof(uint16_t)); // copy program into buffer
10006f54:	4b21      	ldr	r3, [pc, #132]	; (10006fdc <_Z10VgaPioInitv+0x1a0>)
10006f56:	0020      	movs	r0, r4
10006f58:	4698      	mov	r8, r3
10006f5a:	7a1b      	ldrb	r3, [r3, #8]
10006f5c:	005a      	lsls	r2, r3, #1
10006f5e:	4699      	mov	r9, r3
10006f60:	4643      	mov	r3, r8
10006f62:	6819      	ldr	r1, [r3, #0]
10006f64:	f7fa f8c4 	bl	100010f0 <__wrap___aeabi_memcpy>
		for (i = 0; i < CurLayerProg.extranum; i++)
10006f68:	4643      	mov	r3, r8
10006f6a:	7b9b      	ldrb	r3, [r3, #14]
10006f6c:	469c      	mov	ip, r3
10006f6e:	2b00      	cmp	r3, #0
10006f70:	d011      	beq.n	10006f96 <_Z10VgaPioInitv+0x15a>
10006f72:	4641      	mov	r1, r8
10006f74:	2000      	movs	r0, #0
10006f76:	310f      	adds	r1, #15
			int extra = (int)cpp - CurLayerProg.extra[i*2+1];
10006f78:	784b      	ldrb	r3, [r1, #1]
			ins[CurLayerProg.extra[i*2]] |= extra << 8; // update waits
10006f7a:	780a      	ldrb	r2, [r1, #0]
			int extra = (int)cpp - CurLayerProg.extra[i*2+1];
10006f7c:	1af3      	subs	r3, r6, r3
			ins[CurLayerProg.extra[i*2]] |= extra << 8; // update waits
10006f7e:	43df      	mvns	r7, r3
10006f80:	0052      	lsls	r2, r2, #1
10006f82:	17ff      	asrs	r7, r7, #31
10006f84:	403b      	ands	r3, r7
10006f86:	5aa7      	ldrh	r7, [r4, r2]
10006f88:	021b      	lsls	r3, r3, #8
10006f8a:	433b      	orrs	r3, r7
		for (i = 0; i < CurLayerProg.extranum; i++)
10006f8c:	3001      	adds	r0, #1
			ins[CurLayerProg.extra[i*2]] |= extra << 8; // update waits
10006f8e:	52a3      	strh	r3, [r4, r2]
		for (i = 0; i < CurLayerProg.extranum; i++)
10006f90:	3102      	adds	r1, #2
10006f92:	4560      	cmp	r0, ip
10006f94:	dbf0      	blt.n	10006f78 <_Z10VgaPioInitv+0x13c>
		prg.length = CurLayerProg.length;
10006f96:	466b      	mov	r3, sp
10006f98:	464a      	mov	r2, r9
10006f9a:	731a      	strb	r2, [r3, #12]
		prg.origin = LAYER_OFFSET;
10006f9c:	2300      	movs	r3, #0
10006f9e:	466a      	mov	r2, sp
		pio_add_program(VGA_PIO, &prg);
10006fa0:	a902      	add	r1, sp, #8
10006fa2:	4805      	ldr	r0, [pc, #20]	; (10006fb8 <_Z10VgaPioInitv+0x17c>)
		prg.instructions = ins;
10006fa4:	9402      	str	r4, [sp, #8]
		prg.origin = LAYER_OFFSET;
10006fa6:	7353      	strb	r3, [r2, #13]
		pio_add_program(VGA_PIO, &prg);
10006fa8:	f7fb f88a 	bl	100020c0 <pio_add_program>
10006fac:	e770      	b.n	10006e90 <_Z10VgaPioInitv+0x54>
	if (!CurVmode.psync) gpio_set_outover(VGA_GPIO_SYNC, GPIO_OVERRIDE_INVERT);
10006fae:	2101      	movs	r1, #1
10006fb0:	2008      	movs	r0, #8
10006fb2:	f7fa fc3b 	bl	1000182c <gpio_set_outover>
10006fb6:	e778      	b.n	10006eaa <_Z10VgaPioInitv+0x6e>
10006fb8:	50200000 	.word	0x50200000
10006fbc:	101aed54 	.word	0x101aed54
10006fc0:	2000479c 	.word	0x2000479c
10006fc4:	00006008 	.word	0x00006008
10006fc8:	20023b81 	.word	0x20023b81
10006fcc:	200027d0 	.word	0x200027d0
10006fd0:	20020124 	.word	0x20020124
10006fd4:	20020120 	.word	0x20020120
10006fd8:	40060000 	.word	0x40060000
10006fdc:	2000476c 	.word	0x2000476c
10006fe0:	0001fd80 	.word	0x0001fd80
10006fe4:	20002000 	.word	0x20002000

10006fe8 <_Z10VgaBufInitv>:

// initialize scanline buffers
void VgaBufInit()
{
10006fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
10006fea:	464e      	mov	r6, r9
10006fec:	4645      	mov	r5, r8
10006fee:	4657      	mov	r7, sl
10006ff0:	46de      	mov	lr, fp
	// init HSYNC..back porch buffer
	//  hsync must be min. 3
	//  hback must be min. 13
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
10006ff2:	2388      	movs	r3, #136	; 0x88
{
10006ff4:	b5e0      	push	{r5, r6, r7, lr}
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
10006ff6:	485f      	ldr	r0, [pc, #380]	; (10007174 <_Z10VgaBufInitv+0x18c>)
10006ff8:	4f5f      	ldr	r7, [pc, #380]	; (10007178 <_Z10VgaBufInitv+0x190>)
10006ffa:	8c41      	ldrh	r1, [r0, #34]	; 0x22
	LineBufHsBp[1] = BYTESWAP(VGADARK(CurVmode.hback-4-1-9,0)); // back porch - 1 - 9
10006ffc:	4e5f      	ldr	r6, [pc, #380]	; (1000717c <_Z10VgaBufInitv+0x194>)
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
10006ffe:	1eca      	subs	r2, r1, #3
10007000:	ba12      	rev	r2, r2
10007002:	431a      	orrs	r2, r3
10007004:	603a      	str	r2, [r7, #0]
	LineBufHsBp[1] = BYTESWAP(VGADARK(CurVmode.hback-4-1-9,0)); // back porch - 1 - 9
10007006:	8c84      	ldrh	r4, [r0, #36]	; 0x24
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
10007008:	469c      	mov	ip, r3
	LineBufHsBp[1] = BYTESWAP(VGADARK(CurVmode.hback-4-1-9,0)); // back porch - 1 - 9
1000700a:	3c0e      	subs	r4, #14
1000700c:	0423      	lsls	r3, r4, #16
1000700e:	0225      	lsls	r5, r4, #8
10007010:	0e2d      	lsrs	r5, r5, #24
10007012:	4033      	ands	r3, r6
10007014:	432b      	orrs	r3, r5
10007016:	25ff      	movs	r5, #255	; 0xff
10007018:	022d      	lsls	r5, r5, #8
1000701a:	402c      	ands	r4, r5
1000701c:	4323      	orrs	r3, r4
1000701e:	24a0      	movs	r4, #160	; 0xa0
10007020:	4323      	orrs	r3, r4
10007022:	607b      	str	r3, [r7, #4]
	LineBufHsBp[2] = BYTESWAP(VGACMD(vga_offset_irqset+BASE_OFFSET,0)); // IRQ command (takes 9 clock cycles)
10007024:	23c0      	movs	r3, #192	; 0xc0
10007026:	60bb      	str	r3, [r7, #8]
	LineBufHsBp[3] = BYTESWAP(VGACMD(vga_offset_output+BASE_OFFSET, CurVmode.width - 2)); // missing 2 clock cycles after last pixel
10007028:	8803      	ldrh	r3, [r0, #0]
1000702a:	3440      	adds	r4, #64	; 0x40
1000702c:	3b02      	subs	r3, #2
1000702e:	ba1b      	rev	r3, r3
10007030:	4323      	orrs	r3, r4
10007032:	60fb      	str	r3, [r7, #12]

	// init front porch buffer
	//  hfront must be min. 4
	LineBufFp = BYTESWAP(VGADARK(CurVmode.hfront-4,0)); // front porch
10007034:	8c07      	ldrh	r7, [r0, #32]
{
10007036:	b083      	sub	sp, #12
	LineBufFp = BYTESWAP(VGADARK(CurVmode.hfront-4,0)); // front porch
10007038:	3f04      	subs	r7, #4
1000703a:	043b      	lsls	r3, r7, #16
1000703c:	023c      	lsls	r4, r7, #8
1000703e:	0e24      	lsrs	r4, r4, #24
10007040:	4033      	ands	r3, r6
10007042:	4323      	orrs	r3, r4
10007044:	24a0      	movs	r4, #160	; 0xa0
10007046:	402f      	ands	r7, r5
10007048:	433b      	orrs	r3, r7
1000704a:	4f4d      	ldr	r7, [pc, #308]	; (10007180 <_Z10VgaBufInitv+0x198>)
1000704c:	4323      	orrs	r3, r4
1000704e:	603b      	str	r3, [r7, #0]

	// init dark line
	LineBufDark[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
10007050:	4b4c      	ldr	r3, [pc, #304]	; (10007184 <_Z10VgaBufInitv+0x19c>)
10007052:	601a      	str	r2, [r3, #0]
	LineBufDark[1] = BYTESWAP(VGADARK(CurVmode.htot-CurVmode.hsync-4,0)); // dark line
10007054:	8bc2      	ldrh	r2, [r0, #30]
	LineBufDark[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
10007056:	4698      	mov	r8, r3
	LineBufDark[1] = BYTESWAP(VGADARK(CurVmode.htot-CurVmode.hsync-4,0)); // dark line
10007058:	1a57      	subs	r7, r2, r1
1000705a:	1f3b      	subs	r3, r7, #4
1000705c:	4699      	mov	r9, r3
1000705e:	464c      	mov	r4, r9
10007060:	041b      	lsls	r3, r3, #16
10007062:	0224      	lsls	r4, r4, #8
10007064:	0e24      	lsrs	r4, r4, #24
10007066:	4033      	ands	r3, r6
10007068:	4323      	orrs	r3, r4
1000706a:	464c      	mov	r4, r9
1000706c:	402c      	ands	r4, r5
1000706e:	4323      	orrs	r3, r4
10007070:	24a0      	movs	r4, #160	; 0xa0
10007072:	4323      	orrs	r3, r4
10007074:	4644      	mov	r4, r8
10007076:	6063      	str	r3, [r4, #4]

	// TV mode
	if (CurVmode.inter)
10007078:	2356      	movs	r3, #86	; 0x56
1000707a:	5cc3      	ldrb	r3, [r0, r3]
1000707c:	2b00      	cmp	r3, #0
1000707e:	d060      	beq.n	10007142 <_Z10VgaBufInitv+0x15a>
	{
		// vertical synchronization
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
10007080:	4664      	mov	r4, ip
10007082:	0848      	lsrs	r0, r1, #1
10007084:	1ec3      	subs	r3, r0, #3
10007086:	ba1b      	rev	r3, r3
10007088:	431c      	orrs	r4, r3
1000708a:	4b3f      	ldr	r3, [pc, #252]	; (10007188 <_Z10VgaBufInitv+0x1a0>)
1000708c:	46a0      	mov	r8, r4
1000708e:	601c      	str	r4, [r3, #0]
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line
10007090:	0854      	lsrs	r4, r2, #1
10007092:	1a27      	subs	r7, r4, r0
10007094:	46a1      	mov	r9, r4
10007096:	1f3c      	subs	r4, r7, #4
10007098:	46a2      	mov	sl, r4
1000709a:	0427      	lsls	r7, r4, #16
1000709c:	0224      	lsls	r4, r4, #8
1000709e:	4037      	ands	r7, r6
100070a0:	0e24      	lsrs	r4, r4, #24
100070a2:	4327      	orrs	r7, r4
100070a4:	4654      	mov	r4, sl
100070a6:	402c      	ands	r4, r5
100070a8:	4327      	orrs	r7, r4
100070aa:	24a0      	movs	r4, #160	; 0xa0
100070ac:	433c      	orrs	r4, r7
100070ae:	9401      	str	r4, [sp, #4]
100070b0:	605c      	str	r4, [r3, #4]
		LineBufSync[2] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
100070b2:	4644      	mov	r4, r8
		LineBufSync[3] = BYTESWAP(VGADARK((CurVmode.htot+1)/2-CurVmode.hsync/2-4,0)); // dark line
100070b4:	3201      	adds	r2, #1
100070b6:	1052      	asrs	r2, r2, #1
100070b8:	1a10      	subs	r0, r2, r0
100070ba:	3804      	subs	r0, #4
		LineBufSync[2] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
100070bc:	609c      	str	r4, [r3, #8]
		LineBufSync[3] = BYTESWAP(VGADARK((CurVmode.htot+1)/2-CurVmode.hsync/2-4,0)); // dark line
100070be:	0404      	lsls	r4, r0, #16
100070c0:	4034      	ands	r4, r6
100070c2:	46a2      	mov	sl, r4
100070c4:	0204      	lsls	r4, r0, #8
100070c6:	0e24      	lsrs	r4, r4, #24
100070c8:	46a3      	mov	fp, r4
100070ca:	4654      	mov	r4, sl
100070cc:	465f      	mov	r7, fp
100070ce:	4028      	ands	r0, r5
100070d0:	433c      	orrs	r4, r7
100070d2:	4320      	orrs	r0, r4
100070d4:	24a0      	movs	r4, #160	; 0xa0
100070d6:	4320      	orrs	r0, r4
100070d8:	60d8      	str	r0, [r3, #12]

		LineBufSync[4] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot/2-CurVmode.hsync-3)); // invert dark line
100070da:	4648      	mov	r0, r9
100070dc:	4664      	mov	r4, ip
100070de:	1a40      	subs	r0, r0, r1
100070e0:	3803      	subs	r0, #3
100070e2:	ba00      	rev	r0, r0
100070e4:	4320      	orrs	r0, r4
100070e6:	6118      	str	r0, [r3, #16]
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
100070e8:	1f08      	subs	r0, r1, #4
100070ea:	4681      	mov	r9, r0
100070ec:	0400      	lsls	r0, r0, #16
100070ee:	4006      	ands	r6, r0
100070f0:	4648      	mov	r0, r9
		LineBufSync[6] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,(CurVmode.htot+1)/2-CurVmode.hsync-3)); // invert dark line
100070f2:	1a52      	subs	r2, r2, r1
100070f4:	4661      	mov	r1, ip
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
100070f6:	0200      	lsls	r0, r0, #8
100070f8:	0e00      	lsrs	r0, r0, #24
100070fa:	4306      	orrs	r6, r0
100070fc:	4648      	mov	r0, r9
		LineBufSync[6] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,(CurVmode.htot+1)/2-CurVmode.hsync-3)); // invert dark line
100070fe:	3a03      	subs	r2, #3
10007100:	ba12      	rev	r2, r2
10007102:	430a      	orrs	r2, r1
10007104:	619a      	str	r2, [r3, #24]
		LineBufSync[7] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC

		LineBufSync[8] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
10007106:	4642      	mov	r2, r8
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10007108:	4005      	ands	r5, r0
		LineBufSync[9] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line

		// control blocks - initialize to VSYNC
		CtrlBuf1[0] = 4; // send 4x u32
1000710a:	2004      	movs	r0, #4
		LineBufSync[8] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
1000710c:	621a      	str	r2, [r3, #32]
		LineBufSync[9] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line
1000710e:	9a01      	ldr	r2, [sp, #4]
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10007110:	4335      	orrs	r5, r6
10007112:	3418      	adds	r4, #24
		LineBufSync[9] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line
10007114:	625a      	str	r2, [r3, #36]	; 0x24
		CtrlBuf1[0] = 4; // send 4x u32
10007116:	491d      	ldr	r1, [pc, #116]	; (1000718c <_Z10VgaBufInitv+0x1a4>)
		CtrlBuf1[1] = (u32)&LineBufSync[4]; // VSYNC

		CtrlBuf2[0] = 4; // send 4x u32
10007118:	4a1d      	ldr	r2, [pc, #116]	; (10007190 <_Z10VgaBufInitv+0x1a8>)
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000711a:	432c      	orrs	r4, r5
1000711c:	615c      	str	r4, [r3, #20]
		LineBufSync[7] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000711e:	61dc      	str	r4, [r3, #28]
		CtrlBuf1[1] = (u32)&LineBufSync[4]; // VSYNC
10007120:	3310      	adds	r3, #16
		CtrlBuf1[0] = 4; // send 4x u32
10007122:	6008      	str	r0, [r1, #0]
		CtrlBuf1[1] = (u32)&LineBufSync[4]; // VSYNC
10007124:	604b      	str	r3, [r1, #4]
		CtrlBuf2[0] = 4; // send 4x u32
10007126:	6010      	str	r0, [r2, #0]
		CtrlBuf2[1] = (u32)&LineBufSync[4]; // VSYNC
10007128:	6053      	str	r3, [r2, #4]

		CtrlBuf2[0] = 2; // send 2x u32
		CtrlBuf2[1] = (u32)&LineBufSync[0]; // VSYNC
	}

	CtrlBuf1[2] = 0; // stop mark
1000712a:	2300      	movs	r3, #0
1000712c:	608b      	str	r3, [r1, #8]
	CtrlBuf1[3] = 0; // stop mark
1000712e:	60cb      	str	r3, [r1, #12]

	CtrlBuf2[2] = 0; // stop mark
10007130:	6093      	str	r3, [r2, #8]
	CtrlBuf2[3] = 0; // stop mark
10007132:	60d3      	str	r3, [r2, #12]
}
10007134:	b003      	add	sp, #12
10007136:	bcf0      	pop	{r4, r5, r6, r7}
10007138:	46bb      	mov	fp, r7
1000713a:	46b2      	mov	sl, r6
1000713c:	46a9      	mov	r9, r5
1000713e:	46a0      	mov	r8, r4
10007140:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
10007142:	4662      	mov	r2, ip
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10007144:	24a0      	movs	r4, #160	; 0xa0
		CtrlBuf1[0] = 2; // send 2x u32
10007146:	2002      	movs	r0, #2
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
10007148:	3f03      	subs	r7, #3
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000714a:	3904      	subs	r1, #4
1000714c:	ba3f      	rev	r7, r7
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
1000714e:	4317      	orrs	r7, r2
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10007150:	040a      	lsls	r2, r1, #16
10007152:	4016      	ands	r6, r2
10007154:	020a      	lsls	r2, r1, #8
10007156:	0e12      	lsrs	r2, r2, #24
10007158:	4316      	orrs	r6, r2
1000715a:	4029      	ands	r1, r5
1000715c:	4331      	orrs	r1, r6
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
1000715e:	4b0a      	ldr	r3, [pc, #40]	; (10007188 <_Z10VgaBufInitv+0x1a0>)
		CtrlBuf2[0] = 2; // send 2x u32
10007160:	4a0b      	ldr	r2, [pc, #44]	; (10007190 <_Z10VgaBufInitv+0x1a8>)
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10007162:	430c      	orrs	r4, r1
		CtrlBuf1[0] = 2; // send 2x u32
10007164:	4909      	ldr	r1, [pc, #36]	; (1000718c <_Z10VgaBufInitv+0x1a4>)
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
10007166:	601f      	str	r7, [r3, #0]
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10007168:	605c      	str	r4, [r3, #4]
		CtrlBuf1[0] = 2; // send 2x u32
1000716a:	6008      	str	r0, [r1, #0]
		CtrlBuf1[1] = (u32)&LineBufSync[0]; // VSYNC
1000716c:	604b      	str	r3, [r1, #4]
		CtrlBuf2[0] = 2; // send 2x u32
1000716e:	6010      	str	r0, [r2, #0]
		CtrlBuf2[1] = (u32)&LineBufSync[0]; // VSYNC
10007170:	6053      	str	r3, [r2, #4]
10007172:	e7da      	b.n	1000712a <_Z10VgaBufInitv+0x142>
10007174:	2000479c 	.word	0x2000479c
10007178:	20021884 	.word	0x20021884
1000717c:	00ffff00 	.word	0x00ffff00
10007180:	20021880 	.word	0x20021880
10007184:	20021878 	.word	0x20021878
10007188:	20021894 	.word	0x20021894
1000718c:	20003290 	.word	0x20003290
10007190:	20003cf0 	.word	0x20003cf0

10007194 <_Z7VgaTermv>:
 *
 * \param channel DMA channel
 */
static inline void dma_channel_abort(uint channel) {
    check_dma_channel_param(channel);
    dma_hw->abort = 1u << channel;
10007194:	21a0      	movs	r1, #160	; 0xa0
10007196:	2302      	movs	r3, #2
    // Bit will go 0 once channel has reached safe state
    // (i.e. any in-flight transfers have retired)
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
10007198:	2002      	movs	r0, #2
    dma_hw->abort = 1u << channel;
1000719a:	4a27      	ldr	r2, [pc, #156]	; (10007238 <_Z7VgaTermv+0xa4>)
1000719c:	05c9      	lsls	r1, r1, #23

// terminate VGA service
void VgaTerm()
{
1000719e:	b570      	push	{r4, r5, r6, lr}
100071a0:	508b      	str	r3, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
100071a2:	588b      	ldr	r3, [r1, r2]
100071a4:	4218      	tst	r0, r3
100071a6:	d1fc      	bne.n	100071a2 <_Z7VgaTermv+0xe>
    dma_hw->abort = 1u << channel;
100071a8:	2301      	movs	r3, #1
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
100071aa:	20a0      	movs	r0, #160	; 0xa0
    dma_hw->abort = 1u << channel;
100071ac:	508b      	str	r3, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
100071ae:	2201      	movs	r2, #1
100071b0:	4921      	ldr	r1, [pc, #132]	; (10007238 <_Z7VgaTermv+0xa4>)
100071b2:	05c0      	lsls	r0, r0, #23
100071b4:	5843      	ldr	r3, [r0, r1]
100071b6:	421a      	tst	r2, r3
100071b8:	d1fc      	bne.n	100071b4 <_Z7VgaTermv+0x20>
    dma_hw->abort = 1u << channel;
100071ba:	24a0      	movs	r4, #160	; 0xa0
100071bc:	2001      	movs	r0, #1
100071be:	2601      	movs	r6, #1
100071c0:	4a1d      	ldr	r2, [pc, #116]	; (10007238 <_Z7VgaTermv+0xa4>)
100071c2:	05e4      	lsls	r4, r4, #23
100071c4:	0031      	movs	r1, r6
100071c6:	4081      	lsls	r1, r0
100071c8:	50a1      	str	r1, [r4, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
100071ca:	58a3      	ldr	r3, [r4, r2]
100071cc:	420b      	tst	r3, r1
100071ce:	d1fc      	bne.n	100071ca <_Z7VgaTermv+0x36>
    dma_hw->abort = 1u << channel;
100071d0:	0031      	movs	r1, r6
100071d2:	1e43      	subs	r3, r0, #1
100071d4:	4099      	lsls	r1, r3
100071d6:	50a1      	str	r1, [r4, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
100071d8:	58a3      	ldr	r3, [r4, r2]
100071da:	001d      	movs	r5, r3
100071dc:	400d      	ands	r5, r1
100071de:	420b      	tst	r3, r1
100071e0:	d1fa      	bne.n	100071d8 <_Z7VgaTermv+0x44>
	int i;

	// abort DMA channels
	dma_channel_abort(VGA_DMA_PIO0); // pre-abort, could be chaining right now
	dma_channel_abort(VGA_DMA_CB0);
	for (i = 0; i < LAYERS; i++)
100071e2:	3002      	adds	r0, #2
100071e4:	2809      	cmp	r0, #9
100071e6:	d1ed      	bne.n	100071c4 <_Z7VgaTermv+0x30>
		dma_channel_abort(VGA_DMA_PIO(i));
		dma_channel_abort(VGA_DMA_CB(i));
	}

	// disable IRQ0 from DMA0
	irq_set_enabled(DMA_IRQ_0, false);
100071e8:	2100      	movs	r1, #0
100071ea:	3002      	adds	r0, #2
100071ec:	f7fa fb4e 	bl	1000188c <irq_set_enabled>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100071f0:	2302      	movs	r3, #2
100071f2:	4a12      	ldr	r2, [pc, #72]	; (1000723c <_Z7VgaTermv+0xa8>)
    pio->ctrl = (pio->ctrl & ~mask) | (enabled ? mask : 0u);
100071f4:	4812      	ldr	r0, [pc, #72]	; (10007240 <_Z7VgaTermv+0xac>)
100071f6:	6013      	str	r3, [r2, #0]
	dma_channel_set_irq0_enabled(VGA_DMA_PIO0, false);

	// Clear the interrupt request for DMA control channel
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
100071f8:	4a12      	ldr	r2, [pc, #72]	; (10007244 <_Z7VgaTermv+0xb0>)
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100071fa:	4913      	ldr	r1, [pc, #76]	; (10007248 <_Z7VgaTermv+0xb4>)
100071fc:	50a3      	str	r3, [r4, r2]
100071fe:	220f      	movs	r2, #15
10007200:	6803      	ldr	r3, [r0, #0]
10007202:	4393      	bics	r3, r2
10007204:	6003      	str	r3, [r0, #0]
    pio->ctrl |= (mask << PIO_CTRL_SM_RESTART_LSB) & PIO_CTRL_SM_RESTART_BITS;
10007206:	6803      	ldr	r3, [r0, #0]
10007208:	32e1      	adds	r2, #225	; 0xe1
1000720a:	4313      	orrs	r3, r2
1000720c:	6003      	str	r3, [r0, #0]
1000720e:	2380      	movs	r3, #128	; 0x80
10007210:	4a0e      	ldr	r2, [pc, #56]	; (1000724c <_Z7VgaTermv+0xb8>)
10007212:	061b      	lsls	r3, r3, #24
10007214:	6013      	str	r3, [r2, #0]
10007216:	6013      	str	r3, [r2, #0]

	// clear FIFOs
	for (i = 0; i < LAYERS; i++)
	{
		pio_sm_clear_fifos(VGA_PIO, VGA_SM(i));
		CtrlBufNext[i] = NULL;
10007218:	4a0d      	ldr	r2, [pc, #52]	; (10007250 <_Z7VgaTermv+0xbc>)
1000721a:	6015      	str	r5, [r2, #0]
1000721c:	600b      	str	r3, [r1, #0]
1000721e:	600b      	str	r3, [r1, #0]
10007220:	490c      	ldr	r1, [pc, #48]	; (10007254 <_Z7VgaTermv+0xc0>)
10007222:	6055      	str	r5, [r2, #4]
10007224:	600b      	str	r3, [r1, #0]
10007226:	600b      	str	r3, [r1, #0]
10007228:	490b      	ldr	r1, [pc, #44]	; (10007258 <_Z7VgaTermv+0xc4>)
1000722a:	6095      	str	r5, [r2, #8]
1000722c:	600b      	str	r3, [r1, #0]
1000722e:	600b      	str	r3, [r1, #0]
10007230:	60d5      	str	r5, [r2, #12]
	}

	// clear PIO instruction memory 
	pio_clear_instruction_memory(VGA_PIO);
10007232:	f7fa ffa9 	bl	10002188 <pio_clear_instruction_memory>
}
10007236:	bd70      	pop	{r4, r5, r6, pc}
10007238:	00000444 	.word	0x00000444
1000723c:	50003404 	.word	0x50003404
10007240:	50200000 	.word	0x50200000
10007244:	0000040c 	.word	0x0000040c
10007248:	502010e8 	.word	0x502010e8
1000724c:	502010d0 	.word	0x502010d0
10007250:	20004750 	.word	0x20004750
10007254:	50201100 	.word	0x50201100
10007258:	50201118 	.word	0x50201118

1000725c <_Z16ScanlineTypeInitPK6sVmode>:

// initialize scanline type table
void ScanlineTypeInit(const sVmode* v)
{
1000725c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000725e:	46c6      	mov	lr, r8
	u8* d = ScanlineType;
	int i, k;

	// line 0 is not used
	*d++ = LINE_DARK;
10007260:	2305      	movs	r3, #5
{
10007262:	b500      	push	{lr}
	*d++ = LINE_DARK;
10007264:	4c6b      	ldr	r4, [pc, #428]	; (10007414 <_Z16ScanlineTypeInitPK6sVmode+0x1b8>)
{
10007266:	0005      	movs	r5, r0
	*d++ = LINE_DARK;
10007268:	7023      	strb	r3, [r4, #0]

	// progressive mode (VGA 525)
	if (!v->inter)
1000726a:	3351      	adds	r3, #81	; 0x51
1000726c:	5cc3      	ldrb	r3, [r0, r3]
1000726e:	2b00      	cmp	r3, #0
10007270:	d125      	bne.n	100072be <_Z16ScanlineTypeInitPK6sVmode+0x62>
	{
		// vertical sync (VGA 2)
		for (i = v->vsync1; i > 0; i--) *d++ = LINE_VSYNC;
10007272:	8e86      	ldrh	r6, [r0, #52]	; 0x34
	*d++ = LINE_DARK;
10007274:	3401      	adds	r4, #1
		for (i = v->vsync1; i > 0; i--) *d++ = LINE_VSYNC;
10007276:	2e00      	cmp	r6, #0
10007278:	d005      	beq.n	10007286 <_Z16ScanlineTypeInitPK6sVmode+0x2a>
1000727a:	0020      	movs	r0, r4
1000727c:	0032      	movs	r2, r6
1000727e:	2100      	movs	r1, #0
10007280:	f7f9 ff30 	bl	100010e4 <__wrap_memset>
10007284:	1934      	adds	r4, r6, r4

		// dark (VGA 33)
		for (i = v->vback1; i > 0; i--) *d++ = LINE_DARK;
10007286:	8f2e      	ldrh	r6, [r5, #56]	; 0x38
10007288:	2e00      	cmp	r6, #0
1000728a:	d005      	beq.n	10007298 <_Z16ScanlineTypeInitPK6sVmode+0x3c>
1000728c:	0020      	movs	r0, r4
1000728e:	0032      	movs	r2, r6
10007290:	2105      	movs	r1, #5
10007292:	f7f9 ff27 	bl	100010e4 <__wrap_memset>
10007296:	19a4      	adds	r4, r4, r6

		// image (VGA 480)
		for (i = v->vact1; i > 0; i--) *d++ = LINE_IMG;
10007298:	8f6e      	ldrh	r6, [r5, #58]	; 0x3a
1000729a:	2e00      	cmp	r6, #0
1000729c:	d005      	beq.n	100072aa <_Z16ScanlineTypeInitPK6sVmode+0x4e>
1000729e:	0020      	movs	r0, r4
100072a0:	0032      	movs	r2, r6
100072a2:	2106      	movs	r1, #6
100072a4:	f7f9 ff1e 	bl	100010e4 <__wrap_memset>
100072a8:	19a4      	adds	r4, r4, r6

		// dark (VGA 10)
		for (i = v->vfront1; i > 0; i--) *d++ = LINE_DARK;
100072aa:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
100072ac:	2a00      	cmp	r2, #0
100072ae:	d003      	beq.n	100072b8 <_Z16ScanlineTypeInitPK6sVmode+0x5c>
100072b0:	2105      	movs	r1, #5
100072b2:	0020      	movs	r0, r4
100072b4:	f7f9 ff16 	bl	100010e4 <__wrap_memset>
		for (i = v->vfront2; i > 0; i--) *d++ = LINE_DARK;

		// half sync (PAL 3, NTSC 3)
		for (i = v->vpre2/2; i > 0; i--) *d++ = LINE_HHSYNC;
	}
}
100072b8:	bc80      	pop	{r7}
100072ba:	46b8      	mov	r8, r7
100072bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (i = v->vsync1/2; i > 0; i--) *d++ = LINE_VVSYNC;
100072be:	8e83      	ldrh	r3, [r0, #52]	; 0x34
	*d++ = LINE_DARK;
100072c0:	3401      	adds	r4, #1
		for (i = v->vsync1/2; i > 0; i--) *d++ = LINE_VVSYNC;
100072c2:	085e      	lsrs	r6, r3, #1
100072c4:	d006      	beq.n	100072d4 <_Z16ScanlineTypeInitPK6sVmode+0x78>
100072c6:	0020      	movs	r0, r4
100072c8:	0032      	movs	r2, r6
100072ca:	2101      	movs	r1, #1
100072cc:	f7f9 ff0a 	bl	100010e4 <__wrap_memset>
		if ((v->vsync1 & 1) != 0) *d++ = LINE_VHSYNC;
100072d0:	8eab      	ldrh	r3, [r5, #52]	; 0x34
		for (i = v->vsync1/2; i > 0; i--) *d++ = LINE_VVSYNC;
100072d2:	1934      	adds	r4, r6, r4
		if ((v->vsync1 & 1) != 0) *d++ = LINE_VHSYNC;
100072d4:	07db      	lsls	r3, r3, #31
100072d6:	d502      	bpl.n	100072de <_Z16ScanlineTypeInitPK6sVmode+0x82>
100072d8:	2302      	movs	r3, #2
100072da:	7023      	strb	r3, [r4, #0]
100072dc:	3401      	adds	r4, #1
		for (i = v->vpost1/2; i > 0; i--) *d++ = LINE_HHSYNC;
100072de:	8eee      	ldrh	r6, [r5, #54]	; 0x36
100072e0:	0876      	lsrs	r6, r6, #1
100072e2:	d005      	beq.n	100072f0 <_Z16ScanlineTypeInitPK6sVmode+0x94>
100072e4:	0020      	movs	r0, r4
100072e6:	0032      	movs	r2, r6
100072e8:	2103      	movs	r1, #3
100072ea:	f7f9 fefb 	bl	100010e4 <__wrap_memset>
100072ee:	19a4      	adds	r4, r4, r6
		for (i = v->vback1; i > 0; i--) *d++ = LINE_DARK;
100072f0:	8f2e      	ldrh	r6, [r5, #56]	; 0x38
100072f2:	2e00      	cmp	r6, #0
100072f4:	d005      	beq.n	10007302 <_Z16ScanlineTypeInitPK6sVmode+0xa6>
100072f6:	0020      	movs	r0, r4
100072f8:	0032      	movs	r2, r6
100072fa:	2105      	movs	r1, #5
100072fc:	f7f9 fef2 	bl	100010e4 <__wrap_memset>
10007300:	19a4      	adds	r4, r4, r6
		if (v->odd)
10007302:	2358      	movs	r3, #88	; 0x58
10007304:	5ceb      	ldrb	r3, [r5, r3]
			for (i = v->vact1; i > 0; i--) *d++ = LINE_IMGODD1; // odd lines 1, 3, 5, ... (PAL)
10007306:	8f6e      	ldrh	r6, [r5, #58]	; 0x3a
		if (v->odd)
10007308:	2b00      	cmp	r3, #0
1000730a:	d16e      	bne.n	100073ea <_Z16ScanlineTypeInitPK6sVmode+0x18e>
			for (i = v->vact1; i > 0; i--) *d++ = LINE_IMGEVEN1; // even lines 0, 2, 4, ... (NTSC)
1000730c:	2e00      	cmp	r6, #0
1000730e:	d005      	beq.n	1000731c <_Z16ScanlineTypeInitPK6sVmode+0xc0>
10007310:	0020      	movs	r0, r4
10007312:	0032      	movs	r2, r6
10007314:	2107      	movs	r1, #7
10007316:	f7f9 fee5 	bl	100010e4 <__wrap_memset>
1000731a:	19a4      	adds	r4, r4, r6
		for (i = v->vfront1; i > 0; i--) *d++ = LINE_DARK;
1000731c:	8fae      	ldrh	r6, [r5, #60]	; 0x3c
1000731e:	2e00      	cmp	r6, #0
10007320:	d005      	beq.n	1000732e <_Z16ScanlineTypeInitPK6sVmode+0xd2>
10007322:	0020      	movs	r0, r4
10007324:	0032      	movs	r2, r6
10007326:	2105      	movs	r1, #5
10007328:	f7f9 fedc 	bl	100010e4 <__wrap_memset>
1000732c:	19a4      	adds	r4, r4, r6
		for (i = v->vpre1/2; i > 0; i--) *d++ = LINE_HHSYNC;
1000732e:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
10007330:	087e      	lsrs	r6, r7, #1
10007332:	d006      	beq.n	10007342 <_Z16ScanlineTypeInitPK6sVmode+0xe6>
10007334:	0020      	movs	r0, r4
10007336:	0032      	movs	r2, r6
10007338:	2103      	movs	r1, #3
1000733a:	f7f9 fed3 	bl	100010e4 <__wrap_memset>
		k = v->vpre1 & 1;
1000733e:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
		for (i = v->vpre1/2; i > 0; i--) *d++ = LINE_HHSYNC;
10007340:	19a4      	adds	r4, r4, r6
		k = v->vpre1 & 1;
10007342:	2301      	movs	r3, #1
10007344:	001a      	movs	r2, r3
10007346:	403a      	ands	r2, r7
		if (k != 0) *d++ = LINE_HVSYNC;
10007348:	423b      	tst	r3, r7
1000734a:	d002      	beq.n	10007352 <_Z16ScanlineTypeInitPK6sVmode+0xf6>
1000734c:	3303      	adds	r3, #3
1000734e:	7023      	strb	r3, [r4, #0]
10007350:	3401      	adds	r4, #1
		for (i = (v->vsync2 - k)/2; i > 0; i--) *d++ = LINE_VVSYNC;
10007352:	2342      	movs	r3, #66	; 0x42
10007354:	4698      	mov	r8, r3
10007356:	5aeb      	ldrh	r3, [r5, r3]
10007358:	1a9a      	subs	r2, r3, r2
1000735a:	0fd6      	lsrs	r6, r2, #31
1000735c:	18b6      	adds	r6, r6, r2
1000735e:	1076      	asrs	r6, r6, #1
10007360:	d007      	beq.n	10007372 <_Z16ScanlineTypeInitPK6sVmode+0x116>
10007362:	0020      	movs	r0, r4
10007364:	0032      	movs	r2, r6
10007366:	2101      	movs	r1, #1
10007368:	f7f9 febc 	bl	100010e4 <__wrap_memset>
		if (((v->vsync2 - k) & 1) != 0) *d++ = LINE_VHSYNC;
1000736c:	4643      	mov	r3, r8
1000736e:	5aeb      	ldrh	r3, [r5, r3]
		for (i = (v->vsync2 - k)/2; i > 0; i--) *d++ = LINE_VVSYNC;
10007370:	19a4      	adds	r4, r4, r6
		if (((v->vsync2 - k) & 1) != 0) *d++ = LINE_VHSYNC;
10007372:	1bdb      	subs	r3, r3, r7
10007374:	07db      	lsls	r3, r3, #31
10007376:	d502      	bpl.n	1000737e <_Z16ScanlineTypeInitPK6sVmode+0x122>
10007378:	2302      	movs	r3, #2
1000737a:	7023      	strb	r3, [r4, #0]
1000737c:	3401      	adds	r4, #1
		for (i = v->vpost2/2; i > 0; i--) *d++ = LINE_HHSYNC;
1000737e:	2344      	movs	r3, #68	; 0x44
10007380:	5aee      	ldrh	r6, [r5, r3]
10007382:	0876      	lsrs	r6, r6, #1
10007384:	d005      	beq.n	10007392 <_Z16ScanlineTypeInitPK6sVmode+0x136>
10007386:	0020      	movs	r0, r4
10007388:	0032      	movs	r2, r6
1000738a:	2103      	movs	r1, #3
1000738c:	f7f9 feaa 	bl	100010e4 <__wrap_memset>
10007390:	19a4      	adds	r4, r4, r6
		for (i = v->vback2; i > 0; i--) *d++ = LINE_DARK;
10007392:	2346      	movs	r3, #70	; 0x46
10007394:	5aee      	ldrh	r6, [r5, r3]
10007396:	2e00      	cmp	r6, #0
10007398:	d005      	beq.n	100073a6 <_Z16ScanlineTypeInitPK6sVmode+0x14a>
1000739a:	0020      	movs	r0, r4
1000739c:	0032      	movs	r2, r6
1000739e:	2105      	movs	r1, #5
100073a0:	f7f9 fea0 	bl	100010e4 <__wrap_memset>
100073a4:	19a4      	adds	r4, r4, r6
		if (v->odd)
100073a6:	2358      	movs	r3, #88	; 0x58
100073a8:	5ceb      	ldrb	r3, [r5, r3]
100073aa:	2b00      	cmp	r3, #0
100073ac:	d026      	beq.n	100073fc <_Z16ScanlineTypeInitPK6sVmode+0x1a0>
			for (i = v->vact2; i > 0; i--) *d++ = LINE_IMGEVEN2; // even lines 0, 2, 4, ... (PAL)
100073ae:	2348      	movs	r3, #72	; 0x48
100073b0:	5aee      	ldrh	r6, [r5, r3]
100073b2:	2e00      	cmp	r6, #0
100073b4:	d005      	beq.n	100073c2 <_Z16ScanlineTypeInitPK6sVmode+0x166>
100073b6:	0020      	movs	r0, r4
100073b8:	0032      	movs	r2, r6
100073ba:	2108      	movs	r1, #8
100073bc:	f7f9 fe92 	bl	100010e4 <__wrap_memset>
100073c0:	19a4      	adds	r4, r4, r6
		for (i = v->vfront2; i > 0; i--) *d++ = LINE_DARK;
100073c2:	234a      	movs	r3, #74	; 0x4a
100073c4:	5aee      	ldrh	r6, [r5, r3]
100073c6:	2e00      	cmp	r6, #0
100073c8:	d005      	beq.n	100073d6 <_Z16ScanlineTypeInitPK6sVmode+0x17a>
100073ca:	0020      	movs	r0, r4
100073cc:	0032      	movs	r2, r6
100073ce:	2105      	movs	r1, #5
100073d0:	f7f9 fe88 	bl	100010e4 <__wrap_memset>
100073d4:	19a4      	adds	r4, r4, r6
		for (i = v->vpre2/2; i > 0; i--) *d++ = LINE_HHSYNC;
100073d6:	234c      	movs	r3, #76	; 0x4c
100073d8:	5aea      	ldrh	r2, [r5, r3]
100073da:	0852      	lsrs	r2, r2, #1
100073dc:	d100      	bne.n	100073e0 <_Z16ScanlineTypeInitPK6sVmode+0x184>
100073de:	e76b      	b.n	100072b8 <_Z16ScanlineTypeInitPK6sVmode+0x5c>
100073e0:	2103      	movs	r1, #3
100073e2:	0020      	movs	r0, r4
100073e4:	f7f9 fe7e 	bl	100010e4 <__wrap_memset>
100073e8:	e766      	b.n	100072b8 <_Z16ScanlineTypeInitPK6sVmode+0x5c>
			for (i = v->vact1; i > 0; i--) *d++ = LINE_IMGODD1; // odd lines 1, 3, 5, ... (PAL)
100073ea:	2e00      	cmp	r6, #0
100073ec:	d096      	beq.n	1000731c <_Z16ScanlineTypeInitPK6sVmode+0xc0>
100073ee:	0020      	movs	r0, r4
100073f0:	0032      	movs	r2, r6
100073f2:	2109      	movs	r1, #9
100073f4:	f7f9 fe76 	bl	100010e4 <__wrap_memset>
100073f8:	19a4      	adds	r4, r4, r6
100073fa:	e78f      	b.n	1000731c <_Z16ScanlineTypeInitPK6sVmode+0xc0>
			for (i = v->vact2; i > 0; i--) *d++ = LINE_IMGODD2; // odd lines 1, 3, 5, ... (NTSC)
100073fc:	2348      	movs	r3, #72	; 0x48
100073fe:	5aee      	ldrh	r6, [r5, r3]
10007400:	2e00      	cmp	r6, #0
10007402:	d0de      	beq.n	100073c2 <_Z16ScanlineTypeInitPK6sVmode+0x166>
10007404:	0020      	movs	r0, r4
10007406:	0032      	movs	r2, r6
10007408:	210a      	movs	r1, #10
1000740a:	f7f9 fe6b 	bl	100010e4 <__wrap_memset>
1000740e:	19a4      	adds	r4, r4, r6
10007410:	e7d7      	b.n	100073c2 <_Z16ScanlineTypeInitPK6sVmode+0x166>
10007412:	46c0      	nop			; (mov r8, r8)
10007414:	200220dc 	.word	0x200220dc

10007418 <_Z7VgaInitPK6sVmode>:
}

// initialize videomode (returns False on bad configuration)
// - All layer modes must use same layer program (LAYERMODE_BASE = overlapped layers are OFF)
void VgaInit(const sVmode* vmode)
{
10007418:	b5f0      	push	{r4, r5, r6, r7, lr}
1000741a:	46de      	mov	lr, fp
1000741c:	464e      	mov	r6, r9
1000741e:	4645      	mov	r5, r8
10007420:	4657      	mov	r7, sl
10007422:	0004      	movs	r4, r0
10007424:	b5e0      	push	{r5, r6, r7, lr}
10007426:	b083      	sub	sp, #12
10007428:	9001      	str	r0, [sp, #4]
	int i;

	// stop old state
	VgaTerm();
1000742a:	f7ff feb3 	bl	10007194 <_Z7VgaTermv>

	// initialize scanline type table
	ScanlineTypeInit(vmode);
1000742e:	0020      	movs	r0, r4
10007430:	f7ff ff14 	bl	1000725c <_Z16ScanlineTypeInitPK6sVmode>
	// prepare render font pixel mask
	for (i = 0; i < 256; i++)
	{
		// higher 4 bits
		u32 m = 0;
		if ((i & B7) != 0) m |= 0xff;
10007434:	2280      	movs	r2, #128	; 0x80
10007436:	4691      	mov	r9, r2
		if ((i & B6) != 0) m |= 0xff << 8;
10007438:	3a40      	subs	r2, #64	; 0x40
1000743a:	4690      	mov	r8, r2
		if ((i & B5) != 0) m |= 0xff << 16;
		if ((i & B4) != 0) m |= 0xff << 24;
1000743c:	22ff      	movs	r2, #255	; 0xff
		if ((i & B5) != 0) m |= 0xff << 16;
1000743e:	27ff      	movs	r7, #255	; 0xff
		if ((i & B4) != 0) m |= 0xff << 24;
10007440:	0612      	lsls	r2, r2, #24
	for (i = 0; i < 256; i++)
10007442:	2300      	movs	r3, #0
		if ((i & B5) != 0) m |= 0xff << 16;
10007444:	2520      	movs	r5, #32
		if ((i & B4) != 0) m |= 0xff << 24;
10007446:	2610      	movs	r6, #16
10007448:	4694      	mov	ip, r2
1000744a:	4956      	ldr	r1, [pc, #344]	; (100075a4 <_Z7VgaInitPK6sVmode+0x18c>)
		if ((i & B5) != 0) m |= 0xff << 16;
1000744c:	043f      	lsls	r7, r7, #16
1000744e:	e024      	b.n	1000749a <_Z7VgaInitPK6sVmode+0x82>
		if ((i & B7) != 0) m |= 0xff;
10007450:	20ff      	movs	r0, #255	; 0xff
		u32 m = 0;
10007452:	2200      	movs	r2, #0
		if ((i & B7) != 0) m |= 0xff;
10007454:	0200      	lsls	r0, r0, #8
		if ((i & B6) != 0) m |= 0xff << 8;
10007456:	4644      	mov	r4, r8
10007458:	421c      	tst	r4, r3
1000745a:	d000      	beq.n	1000745e <_Z7VgaInitPK6sVmode+0x46>
1000745c:	0002      	movs	r2, r0
		if ((i & B5) != 0) m |= 0xff << 16;
1000745e:	421d      	tst	r5, r3
10007460:	d000      	beq.n	10007464 <_Z7VgaInitPK6sVmode+0x4c>
10007462:	433a      	orrs	r2, r7
		if ((i & B4) != 0) m |= 0xff << 24;
10007464:	421e      	tst	r6, r3
10007466:	d001      	beq.n	1000746c <_Z7VgaInitPK6sVmode+0x54>
10007468:	4660      	mov	r0, ip
1000746a:	4302      	orrs	r2, r0
		RenderTextMask[2*i] = m;
1000746c:	600a      	str	r2, [r1, #0]

		// lower 4 bits
		m = 0;
		if ((i & B3) != 0) m |= 0xff;
1000746e:	071a      	lsls	r2, r3, #28
10007470:	d419      	bmi.n	100074a6 <_Z7VgaInitPK6sVmode+0x8e>
10007472:	20ff      	movs	r0, #255	; 0xff
		m = 0;
10007474:	2200      	movs	r2, #0
		if ((i & B3) != 0) m |= 0xff;
10007476:	0200      	lsls	r0, r0, #8
		if ((i & B2) != 0) m |= 0xff << 8;
10007478:	075c      	lsls	r4, r3, #29
1000747a:	d500      	bpl.n	1000747e <_Z7VgaInitPK6sVmode+0x66>
1000747c:	0002      	movs	r2, r0
		if ((i & B1) != 0) m |= 0xff << 16;
1000747e:	0798      	lsls	r0, r3, #30
10007480:	d500      	bpl.n	10007484 <_Z7VgaInitPK6sVmode+0x6c>
10007482:	433a      	orrs	r2, r7
		if ((i & B0) != 0) m |= 0xff << 24;
10007484:	07d8      	lsls	r0, r3, #31
10007486:	d501      	bpl.n	1000748c <_Z7VgaInitPK6sVmode+0x74>
10007488:	4660      	mov	r0, ip
1000748a:	4302      	orrs	r2, r0
		RenderTextMask[2*i+1] = m;
1000748c:	604a      	str	r2, [r1, #4]
	for (i = 0; i < 256; i++)
1000748e:	2280      	movs	r2, #128	; 0x80
10007490:	3301      	adds	r3, #1
10007492:	3108      	adds	r1, #8
10007494:	0052      	lsls	r2, r2, #1
10007496:	4293      	cmp	r3, r2
10007498:	d008      	beq.n	100074ac <_Z7VgaInitPK6sVmode+0x94>
		if ((i & B7) != 0) m |= 0xff;
1000749a:	464a      	mov	r2, r9
1000749c:	421a      	tst	r2, r3
1000749e:	d0d7      	beq.n	10007450 <_Z7VgaInitPK6sVmode+0x38>
100074a0:	22ff      	movs	r2, #255	; 0xff
100074a2:	4841      	ldr	r0, [pc, #260]	; (100075a8 <_Z7VgaInitPK6sVmode+0x190>)
100074a4:	e7d7      	b.n	10007456 <_Z7VgaInitPK6sVmode+0x3e>
		if ((i & B3) != 0) m |= 0xff;
100074a6:	22ff      	movs	r2, #255	; 0xff
100074a8:	483f      	ldr	r0, [pc, #252]	; (100075a8 <_Z7VgaInitPK6sVmode+0x190>)
100074aa:	e7e5      	b.n	10007478 <_Z7VgaInitPK6sVmode+0x60>

	// save current videomode
	memcpy(&CurVmode, vmode, sizeof(sVmode));

	// initialize parameters
	ScanLine = 1; // currently processed scanline
100074ac:	2401      	movs	r4, #1
	memset(LineBuf0, COL_BLACK, BLACK_MAX);
100074ae:	3281      	adds	r2, #129	; 0x81
100074b0:	2100      	movs	r1, #0
100074b2:	32ff      	adds	r2, #255	; 0xff
100074b4:	483d      	ldr	r0, [pc, #244]	; (100075ac <_Z7VgaInitPK6sVmode+0x194>)
100074b6:	f7f9 fe15 	bl	100010e4 <__wrap_memset>
	memcpy(&CurVmode, vmode, sizeof(sVmode));
100074ba:	9d01      	ldr	r5, [sp, #4]
100074bc:	225c      	movs	r2, #92	; 0x5c
100074be:	0029      	movs	r1, r5
100074c0:	483b      	ldr	r0, [pc, #236]	; (100075b0 <_Z7VgaInitPK6sVmode+0x198>)
100074c2:	f7f9 fe15 	bl	100010f0 <__wrap___aeabi_memcpy>
	ScanLine = 1; // currently processed scanline
100074c6:	4b3b      	ldr	r3, [pc, #236]	; (100075b4 <_Z7VgaInitPK6sVmode+0x19c>)
//	Frame = 0;
	BufInx = 0; // at first, control buffer 1 will be sent out
	CtrlBufNext[0] = CtrlBuf2;

	// initialize base layer
	LayerModeInx[0] = LAYERMODE_BASE;
100074c8:	483b      	ldr	r0, [pc, #236]	; (100075b8 <_Z7VgaInitPK6sVmode+0x1a0>)
	ScanLine = 1; // currently processed scanline
100074ca:	601c      	str	r4, [r3, #0]
	BufInx = 0; // at first, control buffer 1 will be sent out
100074cc:	2300      	movs	r3, #0
	LayerModeInx[0] = LAYERMODE_BASE;
100074ce:	4681      	mov	r9, r0
	BufInx = 0; // at first, control buffer 1 will be sent out
100074d0:	4a3a      	ldr	r2, [pc, #232]	; (100075bc <_Z7VgaInitPK6sVmode+0x1a4>)
	CtrlBufNext[0] = CtrlBuf2;
100074d2:	493b      	ldr	r1, [pc, #236]	; (100075c0 <_Z7VgaInitPK6sVmode+0x1a8>)
	BufInx = 0; // at first, control buffer 1 will be sent out
100074d4:	6013      	str	r3, [r2, #0]
	memcpy(&CurLayerMode[0], &LayerMode[LAYERMODE_BASE], sizeof(sLayerMode));
100074d6:	4f3b      	ldr	r7, [pc, #236]	; (100075c4 <_Z7VgaInitPK6sVmode+0x1ac>)
	CtrlBufNext[0] = CtrlBuf2;
100074d8:	4a3b      	ldr	r2, [pc, #236]	; (100075c8 <_Z7VgaInitPK6sVmode+0x1b0>)
	LayerModeInx[0] = LAYERMODE_BASE;
100074da:	7003      	strb	r3, [r0, #0]
	memcpy(&CurLayerMode[0], &LayerMode[LAYERMODE_BASE], sizeof(sLayerMode));
100074dc:	4b3b      	ldr	r3, [pc, #236]	; (100075cc <_Z7VgaInitPK6sVmode+0x1b4>)
	CtrlBufNext[0] = CtrlBuf2;
100074de:	6011      	str	r1, [r2, #0]
	memcpy(&CurLayerMode[0], &LayerMode[LAYERMODE_BASE], sizeof(sLayerMode));
100074e0:	0038      	movs	r0, r7
100074e2:	0019      	movs	r1, r3
100074e4:	2203      	movs	r2, #3
100074e6:	469a      	mov	sl, r3
100074e8:	f7f9 fe02 	bl	100010f0 <__wrap___aeabi_memcpy>
	memset(&LayerScreen[0], 0, sizeof(sLayer));
100074ec:	2100      	movs	r1, #0
100074ee:	2224      	movs	r2, #36	; 0x24
100074f0:	4837      	ldr	r0, [pc, #220]	; (100075d0 <_Z7VgaInitPK6sVmode+0x1b8>)
100074f2:	f7f9 fdf7 	bl	100010e4 <__wrap_memset>

	// save layer modes
	LayerModeInx[1] = vmode->mode[1];
100074f6:	4649      	mov	r1, r9
100074f8:	7eab      	ldrb	r3, [r5, #26]
	LayerModeInx[2] = vmode->mode[2];
	LayerModeInx[3] = vmode->mode[3];

	LayerMask = B0; // mask of active layers
100074fa:	4e36      	ldr	r6, [pc, #216]	; (100075d4 <_Z7VgaInitPK6sVmode+0x1bc>)
	LayerModeInx[1] = vmode->mode[1];
100074fc:	704b      	strb	r3, [r1, #1]
	LayerModeInx[2] = vmode->mode[2];
100074fe:	7eeb      	ldrb	r3, [r5, #27]
10007500:	3703      	adds	r7, #3
10007502:	708b      	strb	r3, [r1, #2]
	LayerModeInx[3] = vmode->mode[3];
10007504:	7f2b      	ldrb	r3, [r5, #28]
	LayerMask = B0; // mask of active layers
10007506:	7034      	strb	r4, [r6, #0]
	LayerModeInx[3] = vmode->mode[3];
10007508:	70cb      	strb	r3, [r1, #3]
	for (i = 1; i < LAYERS; i++)
	{
		memcpy(&CurLayerMode[i], &LayerMode[LayerModeInx[i]], sizeof(sLayerMode));
		if (LayerModeInx[i] != LAYERMODE_BASE) LayerMask |= (1 << i);
1000750a:	2301      	movs	r3, #1
1000750c:	469b      	mov	fp, r3
		memcpy(&CurLayerMode[i], &LayerMode[LayerModeInx[i]], sizeof(sLayerMode));
1000750e:	464b      	mov	r3, r9
10007510:	5d1d      	ldrb	r5, [r3, r4]
10007512:	2203      	movs	r2, #3
10007514:	0069      	lsls	r1, r5, #1
10007516:	1949      	adds	r1, r1, r5
10007518:	0038      	movs	r0, r7
1000751a:	4451      	add	r1, sl
1000751c:	f7f9 fde8 	bl	100010f0 <__wrap___aeabi_memcpy>
		if (LayerModeInx[i] != LAYERMODE_BASE) LayerMask |= (1 << i);
10007520:	2d00      	cmp	r5, #0
10007522:	d004      	beq.n	1000752e <_Z7VgaInitPK6sVmode+0x116>
10007524:	465b      	mov	r3, fp
10007526:	40a3      	lsls	r3, r4
10007528:	7832      	ldrb	r2, [r6, #0]
1000752a:	4313      	orrs	r3, r2
1000752c:	7033      	strb	r3, [r6, #0]
	for (i = 1; i < LAYERS; i++)
1000752e:	3401      	adds	r4, #1
10007530:	3703      	adds	r7, #3
10007532:	2c04      	cmp	r4, #4
10007534:	d1eb      	bne.n	1000750e <_Z7VgaInitPK6sVmode+0xf6>
	}

	// get layer program
	LayerProgInx = vmode->prog;
10007536:	9b01      	ldr	r3, [sp, #4]
	memcpy(&CurLayerProg, &LayerProg[LayerProgInx], sizeof(sLayerProg));
10007538:	4927      	ldr	r1, [pc, #156]	; (100075d8 <_Z7VgaInitPK6sVmode+0x1c0>)
	LayerProgInx = vmode->prog;
1000753a:	7e1a      	ldrb	r2, [r3, #24]
1000753c:	4b27      	ldr	r3, [pc, #156]	; (100075dc <_Z7VgaInitPK6sVmode+0x1c4>)
1000753e:	701a      	strb	r2, [r3, #0]
	memcpy(&CurLayerProg, &LayerProg[LayerProgInx], sizeof(sLayerProg));
10007540:	0053      	lsls	r3, r2, #1
10007542:	189b      	adds	r3, r3, r2
10007544:	4a26      	ldr	r2, [pc, #152]	; (100075e0 <_Z7VgaInitPK6sVmode+0x1c8>)
10007546:	011b      	lsls	r3, r3, #4
10007548:	189b      	adds	r3, r3, r2
1000754a:	000a      	movs	r2, r1
1000754c:	cb13      	ldmia	r3!, {r0, r1, r4}
1000754e:	c213      	stmia	r2!, {r0, r1, r4}
10007550:	cb13      	ldmia	r3!, {r0, r1, r4}
10007552:	c213      	stmia	r2!, {r0, r1, r4}
10007554:	cb13      	ldmia	r3!, {r0, r1, r4}
10007556:	c213      	stmia	r2!, {r0, r1, r4}
10007558:	cb13      	ldmia	r3!, {r0, r1, r4}
1000755a:	c213      	stmia	r2!, {r0, r1, r4}

	// initialize VGA PIO
	VgaPioInit();
1000755c:	f7ff fc6e 	bl	10006e3c <_Z10VgaPioInitv>

	// initialize scanline buffers
	VgaBufInit();
10007560:	f7ff fd42 	bl	10006fe8 <_Z10VgaBufInitv>

	// initialize DMA
	VgaDmaInit();
10007564:	f7ff fbdc 	bl	10006d20 <_Z10VgaDmaInitv>

	// enable DMA IRQ
	irq_set_enabled(DMA_IRQ_0, true);
10007568:	2101      	movs	r1, #1
1000756a:	200b      	movs	r0, #11
1000756c:	f7fa f98e 	bl	1000188c <irq_set_enabled>
    dma_hw->multi_channel_trigger = chan_mask;
10007570:	22a0      	movs	r2, #160	; 0xa0
10007572:	2386      	movs	r3, #134	; 0x86
10007574:	2101      	movs	r1, #1
10007576:	05d2      	lsls	r2, r2, #23
10007578:	00db      	lsls	r3, r3, #3
1000757a:	50d1      	str	r1, [r2, r3]
                 ((mask << PIO_CTRL_SM_ENABLE_LSB) & PIO_CTRL_SM_ENABLE_BITS);
1000757c:	230f      	movs	r3, #15
    pio->ctrl |= ((mask << PIO_CTRL_CLKDIV_RESTART_LSB) & PIO_CTRL_CLKDIV_RESTART_BITS) |
1000757e:	4919      	ldr	r1, [pc, #100]	; (100075e4 <_Z7VgaInitPK6sVmode+0x1cc>)

	// start DMA with base layer 0
	dma_channel_start(VGA_DMA_CB0);

	// run state machines
	pio_enable_sm_mask_in_sync(VGA_PIO, LayerMask);
10007580:	7832      	ldrb	r2, [r6, #0]
10007582:	6808      	ldr	r0, [r1, #0]
                 ((mask << PIO_CTRL_SM_ENABLE_LSB) & PIO_CTRL_SM_ENABLE_BITS);
10007584:	4013      	ands	r3, r2
    pio->ctrl |= ((mask << PIO_CTRL_CLKDIV_RESTART_LSB) & PIO_CTRL_CLKDIV_RESTART_BITS) |
10007586:	4303      	orrs	r3, r0
10007588:	20f0      	movs	r0, #240	; 0xf0
1000758a:	0212      	lsls	r2, r2, #8
1000758c:	0100      	lsls	r0, r0, #4
1000758e:	4002      	ands	r2, r0
10007590:	4313      	orrs	r3, r2
10007592:	600b      	str	r3, [r1, #0]
}
10007594:	b003      	add	sp, #12
10007596:	bcf0      	pop	{r4, r5, r6, r7}
10007598:	46bb      	mov	fp, r7
1000759a:	46b2      	mov	sl, r6
1000759c:	46a9      	mov	r9, r5
1000759e:	46a0      	mov	r8, r4
100075a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100075a2:	46c0      	nop			; (mov r8, r8)
100075a4:	200218d8 	.word	0x200218d8
100075a8:	0000ffff 	.word	0x0000ffff
100075ac:	200201b8 	.word	0x200201b8
100075b0:	2000479c 	.word	0x2000479c
100075b4:	200220d8 	.word	0x200220d8
100075b8:	20020124 	.word	0x20020124
100075bc:	2000326c 	.word	0x2000326c
100075c0:	20003cf0 	.word	0x20003cf0
100075c4:	20004760 	.word	0x20004760
100075c8:	20004750 	.word	0x20004750
100075cc:	101aedc0 	.word	0x101aedc0
100075d0:	20020128 	.word	0x20020128
100075d4:	20023b80 	.word	0x20023b80
100075d8:	2000476c 	.word	0x2000476c
100075dc:	20023b81 	.word	0x20023b81
100075e0:	101aedfc 	.word	0x101aedfc
100075e4:	50200000 	.word	0x50200000

100075e8 <_Z7VgaCorev>:

void (* volatile Core1Fnc)() = NULL; // core 1 remote function

// VGA core
void VgaCore()
{
100075e8:	b570      	push	{r4, r5, r6, lr}
			if ((u32)v == (u32)1)
				VgaTerm(); // terminate
			else
				VgaInit(v);
			__dmb();
			VgaVmodeReq = NULL;
100075ea:	2600      	movs	r6, #0
100075ec:	4d0f      	ldr	r5, [pc, #60]	; (1000762c <_Z7VgaCorev+0x44>)
100075ee:	4c10      	ldr	r4, [pc, #64]	; (10007630 <_Z7VgaCorev+0x48>)
    __asm volatile ("dmb");
100075f0:	f3bf 8f5f 	dmb	sy
		v = VgaVmodeReq;
100075f4:	6828      	ldr	r0, [r5, #0]
		if (v != NULL)
100075f6:	2800      	cmp	r0, #0
100075f8:	d006      	beq.n	10007608 <_Z7VgaCorev+0x20>
			if ((u32)v == (u32)1)
100075fa:	2801      	cmp	r0, #1
100075fc:	d012      	beq.n	10007624 <_Z7VgaCorev+0x3c>
				VgaInit(v);
100075fe:	f7ff ff0b 	bl	10007418 <_Z7VgaInitPK6sVmode>
10007602:	f3bf 8f5f 	dmb	sy
			VgaVmodeReq = NULL;
10007606:	602e      	str	r6, [r5, #0]
		}

		// execute remote function
		fnc = Core1Fnc;
10007608:	6823      	ldr	r3, [r4, #0]
		if (fnc != NULL)
1000760a:	2b00      	cmp	r3, #0
1000760c:	d0f0      	beq.n	100075f0 <_Z7VgaCorev+0x8>
		{
			fnc();
1000760e:	4798      	blx	r3
10007610:	f3bf 8f5f 	dmb	sy
			__dmb();
			Core1Fnc = NULL;
10007614:	6026      	str	r6, [r4, #0]
10007616:	f3bf 8f5f 	dmb	sy
		v = VgaVmodeReq;
1000761a:	6828      	ldr	r0, [r5, #0]
		if (v != NULL)
1000761c:	2800      	cmp	r0, #0
1000761e:	d0f3      	beq.n	10007608 <_Z7VgaCorev+0x20>
			if ((u32)v == (u32)1)
10007620:	2801      	cmp	r0, #1
10007622:	d1ec      	bne.n	100075fe <_Z7VgaCorev+0x16>
				VgaTerm(); // terminate
10007624:	f7ff fdb6 	bl	10007194 <_Z7VgaTermv>
10007628:	e7eb      	b.n	10007602 <_Z7VgaCorev+0x1a>
1000762a:	46c0      	nop			; (mov r8, r8)
1000762c:	20022e7c 	.word	0x20022e7c
10007630:	2000328c 	.word	0x2000328c

10007634 <_Z10VgaInitReqPK6sVmode>:
}

// request to initialize VGA videomode, NULL=only stop driver (wait to initialization completes)
void VgaInitReq(const sVmode* vmode)
{
	if (vmode == NULL) vmode = (const sVmode*)1;
10007634:	2800      	cmp	r0, #0
10007636:	d00c      	beq.n	10007652 <_Z10VgaInitReqPK6sVmode+0x1e>
10007638:	f3bf 8f5f 	dmb	sy
	__dmb();
	VgaVmodeReq = vmode;
1000763c:	4a06      	ldr	r2, [pc, #24]	; (10007658 <_Z10VgaInitReqPK6sVmode+0x24>)
1000763e:	6010      	str	r0, [r2, #0]
	while (VgaVmodeReq != NULL) { __dmb(); }
10007640:	6813      	ldr	r3, [r2, #0]
10007642:	2b00      	cmp	r3, #0
10007644:	d004      	beq.n	10007650 <_Z10VgaInitReqPK6sVmode+0x1c>
10007646:	f3bf 8f5f 	dmb	sy
1000764a:	6813      	ldr	r3, [r2, #0]
1000764c:	2b00      	cmp	r3, #0
1000764e:	d1fa      	bne.n	10007646 <_Z10VgaInitReqPK6sVmode+0x12>
}
10007650:	4770      	bx	lr
	if (vmode == NULL) vmode = (const sVmode*)1;
10007652:	3001      	adds	r0, #1
10007654:	e7f0      	b.n	10007638 <_Z10VgaInitReqPK6sVmode+0x4>
10007656:	46c0      	nop			; (mov r8, r8)
10007658:	20022e7c 	.word	0x20022e7c

1000765c <_Z7LayerOnh>:
// number of pins of overlapped layer (base layer should stay VGA_GPIO_OUTNUM)
u8 LayerNumPin[LAYERS_MAX] = { VGA_GPIO_OUTNUM, VGA_GPIO_OUTNUM, VGA_GPIO_OUTNUM, VGA_GPIO_OUTNUM};

// set overlapped layer 1..3 ON
void LayerOn(u8 inx)
{
1000765c:	0003      	movs	r3, r0
1000765e:	f3bf 8f5f 	dmb	sy
	__dmb();
	LayerScreen[inx].on = True;
10007662:	00c0      	lsls	r0, r0, #3
10007664:	18c3      	adds	r3, r0, r3
10007666:	4804      	ldr	r0, [pc, #16]	; (10007678 <_Z7LayerOnh+0x1c>)
10007668:	009b      	lsls	r3, r3, #2
1000766a:	18c0      	adds	r0, r0, r3
1000766c:	2301      	movs	r3, #1
1000766e:	3022      	adds	r0, #34	; 0x22
10007670:	7003      	strb	r3, [r0, #0]
10007672:	f3bf 8f5f 	dmb	sy
	__dmb();
}
10007676:	4770      	bx	lr
10007678:	20020128 	.word	0x20020128

1000767c <_Z8LayerOffh>:

// set overlapped layer 1..3 OFF
void LayerOff(u8 inx)
{
1000767c:	0003      	movs	r3, r0
1000767e:	f3bf 8f5f 	dmb	sy
	__dmb();
	LayerScreen[inx].on = False;
10007682:	00c0      	lsls	r0, r0, #3
10007684:	18c3      	adds	r3, r0, r3
10007686:	4804      	ldr	r0, [pc, #16]	; (10007698 <_Z8LayerOffh+0x1c>)
10007688:	009b      	lsls	r3, r3, #2
1000768a:	18c0      	adds	r0, r0, r3
1000768c:	2300      	movs	r3, #0
1000768e:	3022      	adds	r0, #34	; 0x22
10007690:	7003      	strb	r3, [r0, #0]
10007692:	f3bf 8f5f 	dmb	sy
	__dmb();
}
10007696:	4770      	bx	lr
10007698:	20020128 	.word	0x20020128

1000769c <_Z10LayerSetuphPKhPK6sVmodetthPKv>:
//  h ... image height
//  col ... key color (needed for LAYERMODE_KEY and LAYERMODE_MONO layer mode)
//  par ... additional data (RLE index table, integer transformation matrix)
// Use these functions after layer setup: LayerSetX, LayerSetY, LayerOn
void LayerSetup(u8 inx, const u8* img, const sVmode* vmode, u16 w, u16 h, u8 col /* = 0 */, const void* par /* = NULL */)
{
1000769c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000769e:	46de      	mov	lr, fp
100076a0:	464e      	mov	r6, r9
100076a2:	4645      	mov	r5, r8
100076a4:	4657      	mov	r7, sl
100076a6:	b5e0      	push	{r5, r6, r7, lr}
100076a8:	b083      	sub	sp, #12
100076aa:	4688      	mov	r8, r1
100076ac:	a90c      	add	r1, sp, #48	; 0x30
100076ae:	4693      	mov	fp, r2
100076b0:	880a      	ldrh	r2, [r1, #0]
100076b2:	a90d      	add	r1, sp, #52	; 0x34
100076b4:	4691      	mov	r9, r2
100076b6:	7809      	ldrb	r1, [r1, #0]
100076b8:	f3bf 8f5f 	dmb	sy
	LayerScreen[inx].on = False;
100076bc:	00c2      	lsls	r2, r0, #3
100076be:	1814      	adds	r4, r2, r0
100076c0:	4e35      	ldr	r6, [pc, #212]	; (10007798 <_Z10LayerSetuphPKhPK6sVmodetthPKv+0xfc>)
100076c2:	9201      	str	r2, [sp, #4]
100076c4:	00a2      	lsls	r2, r4, #2
100076c6:	18b4      	adds	r4, r6, r2
100076c8:	4694      	mov	ip, r2
100076ca:	2222      	movs	r2, #34	; 0x22
100076cc:	4692      	mov	sl, r2
100076ce:	44a2      	add	sl, r4
100076d0:	2700      	movs	r7, #0
100076d2:	4652      	mov	r2, sl
100076d4:	7017      	strb	r7, [r2, #0]
100076d6:	f3bf 8f5f 	dmb	sy
	LayerOff(inx); // set layer OFF
	sLayer* lay = &LayerScreen[inx]; // get pointer to layer
	lay->img = img; // pointer to image data
100076da:	4662      	mov	r2, ip
100076dc:	4645      	mov	r5, r8
100076de:	50b5      	str	r5, [r6, r2]
	lay->par = par; // additional parameter
100076e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	lay->keycol = col | ((u16)col << 8) | ((u32)col << 16) | ((u32)col << 24); // key color
	lay->x = 0; // X coordinate
100076e2:	8267      	strh	r7, [r4, #18]
	lay->par = par; // additional parameter
100076e4:	6062      	str	r2, [r4, #4]
	lay->keycol = col | ((u16)col << 8) | ((u32)col << 16) | ((u32)col << 24); // key color
100076e6:	040a      	lsls	r2, r1, #16
100076e8:	4690      	mov	r8, r2
100076ea:	060a      	lsls	r2, r1, #24
100076ec:	4694      	mov	ip, r2
100076ee:	4642      	mov	r2, r8
100076f0:	4665      	mov	r5, ip
100076f2:	432a      	orrs	r2, r5
100076f4:	4690      	mov	r8, r2
100076f6:	020a      	lsls	r2, r1, #8
100076f8:	4311      	orrs	r1, r2
100076fa:	4642      	mov	r2, r8
100076fc:	4311      	orrs	r1, r2
	lay->y = 0; // Y coordinate
	lay->h = h; // height of image
100076fe:	464a      	mov	r2, r9
10007700:	8322      	strh	r2, [r4, #24]
	lay->spritenum = 0; // number of sprites
	lay->cpp = vmode->cpp; // save clocks per pixel
10007702:	465a      	mov	r2, fp
	lay->y = 0; // Y coordinate
10007704:	82a7      	strh	r7, [r4, #20]
	lay->spritenum = 0; // number of sprites
10007706:	8427      	strh	r7, [r4, #32]
	lay->cpp = vmode->cpp; // save clocks per pixel
10007708:	0027      	movs	r7, r4
	lay->keycol = col | ((u16)col << 8) | ((u32)col << 16) | ((u32)col << 24); // key color
1000770a:	60e1      	str	r1, [r4, #12]
	lay->cpp = vmode->cpp; // save clocks per pixel
1000770c:	8ad2      	ldrh	r2, [r2, #22]
1000770e:	3723      	adds	r7, #35	; 0x23
10007710:	703a      	strb	r2, [r7, #0]
	lay->mode = vmode->mode[inx]; // layer mode
10007712:	465a      	mov	r2, fp
10007714:	1812      	adds	r2, r2, r0
10007716:	7e52      	ldrb	r2, [r2, #25]
	lay->w = w; // image width
10007718:	82e3      	strh	r3, [r4, #22]
	lay->mode = vmode->mode[inx]; // layer mode
1000771a:	7722      	strb	r2, [r4, #28]
	lay->trans = mono ? (((w/8)+3)/4) : (w/4); // transfer count
1000771c:	2a04      	cmp	r2, #4
1000771e:	d019      	beq.n	10007754 <_Z10LayerSetuphPKhPK6sVmodetthPKv+0xb8>
10007720:	089f      	lsrs	r7, r3, #2
10007722:	8227      	strh	r7, [r4, #16]
	lay->wb = mono ? (w/8) : w; // width bytes
10007724:	8363      	strh	r3, [r4, #26]
	switch (lay->mode)
10007726:	2a12      	cmp	r2, #18
10007728:	d834      	bhi.n	10007794 <_Z10LayerSetuphPKhPK6sVmodetthPKv+0xf8>
1000772a:	4c1c      	ldr	r4, [pc, #112]	; (1000779c <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x100>)
1000772c:	0092      	lsls	r2, r2, #2
1000772e:	58a2      	ldr	r2, [r4, r2]
10007730:	4697      	mov	pc, r2
		init = VGAWHITE(cppx, w);
10007732:	1e59      	subs	r1, r3, #1
10007734:	23c0      	movs	r3, #192	; 0xc0
10007736:	029b      	lsls	r3, r3, #10
10007738:	430b      	orrs	r3, r1
	lay->init = init; // init word
1000773a:	9a01      	ldr	r2, [sp, #4]
1000773c:	4694      	mov	ip, r2
1000773e:	4460      	add	r0, ip
10007740:	0080      	lsls	r0, r0, #2
10007742:	1830      	adds	r0, r6, r0
10007744:	6083      	str	r3, [r0, #8]
	LayerSetW(inx, w); // set width of image, update parameters init, trans and wb
}
10007746:	b003      	add	sp, #12
10007748:	bcf0      	pop	{r4, r5, r6, r7}
1000774a:	46bb      	mov	fp, r7
1000774c:	46b2      	mov	sl, r6
1000774e:	46a9      	mov	r9, r5
10007750:	46a0      	mov	r8, r4
10007752:	bdf0      	pop	{r4, r5, r6, r7, pc}
	lay->trans = mono ? (((w/8)+3)/4) : (w/4); // transfer count
10007754:	08df      	lsrs	r7, r3, #3
10007756:	1cfa      	adds	r2, r7, #3
10007758:	1092      	asrs	r2, r2, #2
1000775a:	8222      	strh	r2, [r4, #16]
		init = VGAMONO(cppx, w, (lay->keycol & 0xff));
1000775c:	22ff      	movs	r2, #255	; 0xff
1000775e:	0309      	lsls	r1, r1, #12
10007760:	0312      	lsls	r2, r2, #12
10007762:	3b01      	subs	r3, #1
10007764:	4011      	ands	r1, r2
10007766:	005b      	lsls	r3, r3, #1
10007768:	430b      	orrs	r3, r1
1000776a:	2101      	movs	r1, #1
	lay->wb = mono ? (w/8) : w; // width bytes
1000776c:	8367      	strh	r7, [r4, #26]
		init = VGAMONO(cppx, w, (lay->keycol & 0xff));
1000776e:	430b      	orrs	r3, r1
		break;
10007770:	e7e3      	b.n	1000773a <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x9e>
		init = VGAKEY(cppx, w, (lay->keycol & 0xff));
10007772:	22ff      	movs	r2, #255	; 0xff
10007774:	02c9      	lsls	r1, r1, #11
10007776:	02d2      	lsls	r2, r2, #11
10007778:	3b01      	subs	r3, #1
1000777a:	4011      	ands	r1, r2
1000777c:	4319      	orrs	r1, r3
1000777e:	2380      	movs	r3, #128	; 0x80
10007780:	031b      	lsls	r3, r3, #12
10007782:	430b      	orrs	r3, r1
		break;
10007784:	e7d9      	b.n	1000773a <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x9e>
		init = VGACOLOR(cppx, w);
10007786:	4906      	ldr	r1, [pc, #24]	; (100077a0 <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x104>)
10007788:	3b01      	subs	r3, #1
1000778a:	005b      	lsls	r3, r3, #1
1000778c:	430b      	orrs	r3, r1
		break;
1000778e:	e7d4      	b.n	1000773a <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x9e>
	switch (lay->mode)
10007790:	2301      	movs	r3, #1
10007792:	e7d2      	b.n	1000773a <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x9e>
	u32 init = 0; // init word
10007794:	2300      	movs	r3, #0
10007796:	e7d0      	b.n	1000773a <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x9e>
10007798:	20020128 	.word	0x20020128
1000779c:	101aed74 	.word	0x101aed74
100077a0:	002ff000 	.word	0x002ff000

100077a4 <_Z11ScreenClearP7sScreen>:
100077a4:	f3bf 8f5f 	dmb	sy

// clear screen (set 0 strips, does not modify sprites)
void ScreenClear(sScreen* s)
{
	__dmb();
	s->num = 0;
100077a8:	2300      	movs	r3, #0
100077aa:	8003      	strh	r3, [r0, #0]
100077ac:	f3bf 8f5f 	dmb	sy
	__dmb();
}
100077b0:	4770      	bx	lr
100077b2:	46c0      	nop			; (mov r8, r8)

100077b4 <_Z14ScreenAddStripP7sScreeni>:

// add empty strip to the screen (returns pointer to the strip)
sStrip* ScreenAddStrip(sScreen* s, int height)
{
	int n = s->num;
100077b4:	23e4      	movs	r3, #228	; 0xe4
100077b6:	8802      	ldrh	r2, [r0, #0]
{
100077b8:	b510      	push	{r4, lr}
100077ba:	4353      	muls	r3, r2
	sStrip* t = &s->strip[n];
	t->height = height;
100077bc:	18c4      	adds	r4, r0, r3
100077be:	80a1      	strh	r1, [r4, #4]
	t->num = 0;
100077c0:	2100      	movs	r1, #0
100077c2:	80e1      	strh	r1, [r4, #6]
100077c4:	f3bf 8f5f 	dmb	sy
	__dmb();
	s->num = n + 1;
100077c8:	3201      	adds	r2, #1
100077ca:	8002      	strh	r2, [r0, #0]
100077cc:	f3bf 8f5f 	dmb	sy
	sStrip* t = &s->strip[n];
100077d0:	3304      	adds	r3, #4
100077d2:	18c0      	adds	r0, r0, r3
	__dmb();
	return t;
}
100077d4:	bd10      	pop	{r4, pc}
100077d6:	46c0      	nop			; (mov r8, r8)

100077d8 <_Z13ScreenAddSegmP6sStripi>:

// add empty segment to video strip (returns pointer to the segment and initialises is to defaults)
sSegm* ScreenAddSegm(sStrip* strip, int width)
{
100077d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	int n = strip->num;
	sSegm* g = &strip->seg[n];
	g->width = width;
100077da:	2500      	movs	r5, #0
	int n = strip->num;
100077dc:	8844      	ldrh	r4, [r0, #2]
	g->width = width;
100077de:	040f      	lsls	r7, r1, #16
100077e0:	00e3      	lsls	r3, r4, #3
100077e2:	1b1b      	subs	r3, r3, r4
100077e4:	009b      	lsls	r3, r3, #2
100077e6:	0c3e      	lsrs	r6, r7, #16
100077e8:	18c2      	adds	r2, r0, r3
100077ea:	433e      	orrs	r6, r7
100077ec:	6056      	str	r6, [r2, #4]
	g->wb = width;
	g->offx = 0;
100077ee:	6095      	str	r5, [r2, #8]
	g->offy = 0;
	g->wrapx = width;
100077f0:	8191      	strh	r1, [r2, #12]
	g->wrapy = strip->height;
100077f2:	8801      	ldrh	r1, [r0, #0]
	g->data = NULL;
100077f4:	6115      	str	r5, [r2, #16]
	g->wrapy = strip->height;
100077f6:	81d1      	strh	r1, [r2, #14]
	g->form = GF_COLOR;
100077f8:	8295      	strh	r5, [r2, #20]
	g->dbly = false;
	g->par = 0;
100077fa:	6195      	str	r5, [r2, #24]
	g->par2 = 0;
100077fc:	61d5      	str	r5, [r2, #28]
100077fe:	f3bf 8f5f 	dmb	sy
	__dmb();
	strip->num = n + 1;
10007802:	3401      	adds	r4, #1
10007804:	8044      	strh	r4, [r0, #2]
10007806:	f3bf 8f5f 	dmb	sy
	sSegm* g = &strip->seg[n];
1000780a:	3304      	adds	r3, #4
1000780c:	18c0      	adds	r0, r0, r3
	__dmb();
	return g;
}
1000780e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10007810 <_Z15ScreenSegmColorP5sSegmmm>:
// set video segment to simple color format GF_COLOR
//  col1 = color pattern 4-pixels even line (use macro MULTICOL)
//  col2 = color pattern 4-pixels odd line (use macro MULTICOL)
void ScreenSegmColor(sSegm* segm, u32 col1, u32 col2)
{
	segm->par = col1;
10007810:	6141      	str	r1, [r0, #20]
	segm->par2 = col2;
10007812:	6182      	str	r2, [r0, #24]
10007814:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_COLOR;
10007818:	2300      	movs	r3, #0
1000781a:	7403      	strb	r3, [r0, #16]
1000781c:	f3bf 8f5f 	dmb	sy
	__dmb();
}
10007820:	4770      	bx	lr
10007822:	46c0      	nop			; (mov r8, r8)

10007824 <_Z15ScreenSegmATextP5sSegmPKvS2_tS2_i>:
//   font = pointer to 1-bit font of 256 characters of width 8 (total width of image 2048 pixels)
//   fontheight = font height
//   pal = pointer to palette of 16 colors
//   wb = pitch - number of bytes between text lines
void ScreenSegmAText(sSegm* segm, const void* data, const void* font, u16 fontheight, const void* pal, int wb)
{
10007824:	b510      	push	{r4, lr}
	segm->form = GF_COLOR;
10007826:	2400      	movs	r4, #0
10007828:	7404      	strb	r4, [r0, #16]
1000782a:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->data = data;
	segm->par = (u32)font;
1000782e:	6142      	str	r2, [r0, #20]
	segm->par2 = (u32)pal;
	segm->par3 = fontheight;
10007830:	8243      	strh	r3, [r0, #18]
	segm->par2 = (u32)pal;
10007832:	9a02      	ldr	r2, [sp, #8]
	segm->wb = wb;
10007834:	9b03      	ldr	r3, [sp, #12]
	segm->data = data;
10007836:	60c1      	str	r1, [r0, #12]
	segm->par2 = (u32)pal;
10007838:	6182      	str	r2, [r0, #24]
	segm->wb = wb;
1000783a:	8043      	strh	r3, [r0, #2]
1000783c:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_ATEXT;
10007840:	230b      	movs	r3, #11
10007842:	7403      	strb	r3, [r0, #16]
10007844:	f3bf 8f5f 	dmb	sy
	__dmb();
}
10007848:	bd10      	pop	{r4, pc}
1000784a:	46c0      	nop			; (mov r8, r8)

1000784c <_Z9VgaCfgDefP7sVgaCfg>:
};

// initialize default VGA configuration
void VgaCfgDef(sVgaCfg* cfg)
{
	cfg->width = 640;		// width in pixels
1000784c:	4b06      	ldr	r3, [pc, #24]	; (10007868 <_Z9VgaCfgDefP7sVgaCfg+0x1c>)
	cfg->height = 480;		// height in lines
	cfg->wfull = 0;			// width of full screen, corresponding to 'hfull' time (0=use 'width' parameter)
	cfg->video = &VideoVGA;		// used video timings
1000784e:	4a07      	ldr	r2, [pc, #28]	; (1000786c <_Z9VgaCfgDefP7sVgaCfg+0x20>)
	cfg->width = 640;		// width in pixels
10007850:	6003      	str	r3, [r0, #0]
	cfg->wfull = 0;			// width of full screen, corresponding to 'hfull' time (0=use 'width' parameter)
10007852:	2300      	movs	r3, #0
	cfg->video = &VideoVGA;		// used video timings
10007854:	6082      	str	r2, [r0, #8]
	cfg->freq = 120000;		// required minimal system frequency in kHz (real frequency can be higher)
10007856:	4a06      	ldr	r2, [pc, #24]	; (10007870 <_Z9VgaCfgDefP7sVgaCfg+0x24>)
	cfg->wfull = 0;			// width of full screen, corresponding to 'hfull' time (0=use 'width' parameter)
10007858:	8083      	strh	r3, [r0, #4]
	cfg->freq = 120000;		// required minimal system frequency in kHz (real frequency can be higher)
1000785a:	60c2      	str	r2, [r0, #12]
1000785c:	4a05      	ldr	r2, [pc, #20]	; (10007874 <_Z9VgaCfgDefP7sVgaCfg+0x28>)
	cfg->fmax = 270000;		// maximal system frequency in kHz (limit resolution if needed)
	cfg->mode[0] = LAYERMODE_BASE;	// modes of overlapped layers 0..3 LAYERMODE_* (LAYERMODE_BASE = layer is off)
1000785e:	6143      	str	r3, [r0, #20]
	cfg->freq = 120000;		// required minimal system frequency in kHz (real frequency can be higher)
10007860:	6102      	str	r2, [r0, #16]
	cfg->mode[1] = LAYERMODE_BASE;	// - mode of layer 0 is ignored (always use LAYERMODE_BASE)
	cfg->mode[2] = LAYERMODE_BASE;	// - all overlapped layers must use same layer program
	cfg->mode[3] = LAYERMODE_BASE;
	cfg->dbly = False;		// double in Y direction
10007862:	8303      	strh	r3, [r0, #24]
	cfg->lockfreq = False;		// lock required frequency, do not change it
}
10007864:	4770      	bx	lr
10007866:	46c0      	nop			; (mov r8, r8)
10007868:	01e00280 	.word	0x01e00280
1000786c:	101af048 	.word	0x101af048
10007870:	0001d4c0 	.word	0x0001d4c0
10007874:	00041eb0 	.word	0x00041eb0

10007878 <_Z6VgaCfgPK7sVgaCfgP6sVmode>:

// calculate videomode setup
//   cfg ... required configuration
//   vmode ... destination videomode setup for driver
void VgaCfg(const sVgaCfg* cfg, sVmode* vmode)
{
10007878:	b5f0      	push	{r4, r5, r6, r7, lr}
1000787a:	46de      	mov	lr, fp
1000787c:	4657      	mov	r7, sl
1000787e:	464e      	mov	r6, r9
10007880:	4645      	mov	r5, r8
	int i;

	// prepare layer program, copy layer modes
	u8 prog = LAYERMODE_BASE;
	vmode->mode[0] = prog;
10007882:	2300      	movs	r3, #0
{
10007884:	b5e0      	push	{r5, r6, r7, lr}
	vmode->mode[0] = prog;
10007886:	764b      	strb	r3, [r1, #25]
	for (i = 1; i < LAYERS; i++)
	{
		if (cfg->mode[i] != LAYERMODE_BASE) prog = LayerMode[cfg->mode[i]].prog;
10007888:	7d42      	ldrb	r2, [r0, #21]
{
1000788a:	4682      	mov	sl, r0
1000788c:	468b      	mov	fp, r1
1000788e:	b091      	sub	sp, #68	; 0x44
		if (cfg->mode[i] != LAYERMODE_BASE) prog = LayerMode[cfg->mode[i]].prog;
10007890:	2a00      	cmp	r2, #0
10007892:	d100      	bne.n	10007896 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x1e>
10007894:	e290      	b.n	10007db8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x540>
10007896:	4bdb      	ldr	r3, [pc, #876]	; (10007c04 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x38c>)
10007898:	0051      	lsls	r1, r2, #1
1000789a:	1889      	adds	r1, r1, r2
1000789c:	5c59      	ldrb	r1, [r3, r1]
		vmode->mode[i] = cfg->mode[i];
1000789e:	4658      	mov	r0, fp
100078a0:	7682      	strb	r2, [r0, #26]
		if (cfg->mode[i] != LAYERMODE_BASE) prog = LayerMode[cfg->mode[i]].prog;
100078a2:	4652      	mov	r2, sl
100078a4:	7d92      	ldrb	r2, [r2, #22]
100078a6:	2a00      	cmp	r2, #0
100078a8:	d002      	beq.n	100078b0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x38>
100078aa:	0051      	lsls	r1, r2, #1
100078ac:	1889      	adds	r1, r1, r2
100078ae:	5c59      	ldrb	r1, [r3, r1]
		vmode->mode[i] = cfg->mode[i];
100078b0:	4658      	mov	r0, fp
100078b2:	76c2      	strb	r2, [r0, #27]
		if (cfg->mode[i] != LAYERMODE_BASE) prog = LayerMode[cfg->mode[i]].prog;
100078b4:	4652      	mov	r2, sl
100078b6:	7dd2      	ldrb	r2, [r2, #23]
100078b8:	2a00      	cmp	r2, #0
100078ba:	d002      	beq.n	100078c2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x4a>
100078bc:	0051      	lsls	r1, r2, #1
100078be:	1889      	adds	r1, r1, r2
100078c0:	5c59      	ldrb	r1, [r3, r1]
		vmode->mode[i] = cfg->mode[i];
100078c2:	4658      	mov	r0, fp
100078c4:	7702      	strb	r2, [r0, #28]
	}
	vmode->prog = prog;

	// prepare minimal and maximal clocks per pixel
	int mincpp = LayerMode[LAYERMODE_BASE].mincpp;
100078c6:	785a      	ldrb	r2, [r3, #1]
	vmode->prog = prog;
100078c8:	7601      	strb	r1, [r0, #24]
	int mincpp = LayerMode[LAYERMODE_BASE].mincpp;
100078ca:	4694      	mov	ip, r2
	int maxcpp = LayerMode[LAYERMODE_BASE].maxcpp;
	int cpp;
	for (i = 1; i < LAYERS; i++)
	{
		cpp = LayerMode[cfg->mode[i]].mincpp;
100078cc:	4652      	mov	r2, sl
100078ce:	7d54      	ldrb	r4, [r2, #21]
100078d0:	7d96      	ldrb	r6, [r2, #22]
100078d2:	0060      	lsls	r0, r4, #1
100078d4:	0072      	lsls	r2, r6, #1
100078d6:	1991      	adds	r1, r2, r6
100078d8:	1907      	adds	r7, r0, r4
100078da:	1859      	adds	r1, r3, r1
100078dc:	19df      	adds	r7, r3, r7
100078de:	787f      	ldrb	r7, [r7, #1]
100078e0:	7849      	ldrb	r1, [r1, #1]
	int maxcpp = LayerMode[LAYERMODE_BASE].maxcpp;
100078e2:	789d      	ldrb	r5, [r3, #2]
		if (cpp > mincpp) mincpp = cpp;
100078e4:	42b9      	cmp	r1, r7
100078e6:	da00      	bge.n	100078ea <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x72>
100078e8:	0039      	movs	r1, r7
100078ea:	4561      	cmp	r1, ip
100078ec:	da00      	bge.n	100078f0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x78>
100078ee:	4661      	mov	r1, ip
		cpp = LayerMode[cfg->mode[i]].maxcpp;
100078f0:	1992      	adds	r2, r2, r6
100078f2:	1900      	adds	r0, r0, r4
100078f4:	189a      	adds	r2, r3, r2
100078f6:	1818      	adds	r0, r3, r0
100078f8:	7880      	ldrb	r0, [r0, #2]
100078fa:	7892      	ldrb	r2, [r2, #2]
100078fc:	4282      	cmp	r2, r0
100078fe:	dd00      	ble.n	10007902 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x8a>
10007900:	0002      	movs	r2, r0
10007902:	42aa      	cmp	r2, r5
10007904:	dd00      	ble.n	10007908 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x90>
10007906:	002a      	movs	r2, r5
		cpp = LayerMode[cfg->mode[i]].mincpp;
10007908:	4650      	mov	r0, sl
1000790a:	7dc4      	ldrb	r4, [r0, #23]
1000790c:	0060      	lsls	r0, r4, #1
1000790e:	1905      	adds	r5, r0, r4
10007910:	195d      	adds	r5, r3, r5
10007912:	786e      	ldrb	r6, [r5, #1]
10007914:	428e      	cmp	r6, r1
10007916:	da00      	bge.n	1000791a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0xa2>
10007918:	000e      	movs	r6, r1
		cpp = LayerMode[cfg->mode[i]].maxcpp;
1000791a:	1900      	adds	r0, r0, r4
1000791c:	181b      	adds	r3, r3, r0
1000791e:	789c      	ldrb	r4, [r3, #2]
10007920:	4294      	cmp	r4, r2
10007922:	dd00      	ble.n	10007926 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0xae>
10007924:	0014      	movs	r4, r2
		if (cpp < maxcpp) maxcpp = cpp;
	}

	// prepare full width
	int w = cfg->width; // required width
10007926:	4653      	mov	r3, sl
	int wfull = cfg->wfull;	// full width
10007928:	4652      	mov	r2, sl
	int w = cfg->width; // required width
1000792a:	881b      	ldrh	r3, [r3, #0]
1000792c:	9306      	str	r3, [sp, #24]
	int wfull = cfg->wfull;	// full width
1000792e:	8897      	ldrh	r7, [r2, #4]
	if (wfull == 0) wfull = w; // use required width as 100% width
10007930:	2f00      	cmp	r7, #0
10007932:	d100      	bne.n	10007936 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0xbe>
10007934:	001f      	movs	r7, r3

	// prepare maximal active time and maximal pixels
	const sVideo* v = cfg->video;
10007936:	4653      	mov	r3, sl
10007938:	689b      	ldr	r3, [r3, #8]
1000793a:	4699      	mov	r9, r3
	float hmax = v->htot - v->hfront - v->hsync - v->hback;
1000793c:	6859      	ldr	r1, [r3, #4]
1000793e:	6818      	ldr	r0, [r3, #0]
10007940:	f7f9 fb37 	bl	10000fb2 <__wrap___aeabi_fsub>
10007944:	464b      	mov	r3, r9
10007946:	6899      	ldr	r1, [r3, #8]
10007948:	f7f9 fb33 	bl	10000fb2 <__wrap___aeabi_fsub>
1000794c:	464b      	mov	r3, r9
1000794e:	68d9      	ldr	r1, [r3, #12]
10007950:	f7f9 fb2f 	bl	10000fb2 <__wrap___aeabi_fsub>
	float hfull = v->hfull;
10007954:	464b      	mov	r3, r9
10007956:	691b      	ldr	r3, [r3, #16]
	float hmax = v->htot - v->hfront - v->hsync - v->hback;
10007958:	9007      	str	r0, [sp, #28]
	int wmax = (int)(wfull*hmax/hfull + 0.001f);
1000795a:	0038      	movs	r0, r7
	float hfull = v->hfull;
1000795c:	4698      	mov	r8, r3
	int wmax = (int)(wfull*hmax/hfull + 0.001f);
1000795e:	f7f9 fb3d 	bl	10000fdc <__wrap___aeabi_i2f>

	// calculate cpp from required frequency (rounded down), limit minimal cpp
	u32 freq = cfg->freq;
10007962:	4653      	mov	r3, sl
10007964:	68dd      	ldr	r5, [r3, #12]
	int wmax = (int)(wfull*hmax/hfull + 0.001f);
10007966:	9004      	str	r0, [sp, #16]
	u32 freq = cfg->freq;
10007968:	950e      	str	r5, [sp, #56]	; 0x38
	cpp = (int)(freq*hfull/1000/wfull + 0.1f);
	if (cpp < mincpp) cpp = mincpp;

	// recalculate frequency if not locked
	if (!cfg->lockfreq)
1000796a:	7e5b      	ldrb	r3, [r3, #25]
1000796c:	2b00      	cmp	r3, #0
1000796e:	d130      	bne.n	100079d2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x15a>
	cpp = (int)(freq*hfull/1000/wfull + 0.1f);
10007970:	0028      	movs	r0, r5
10007972:	f7f9 fb2d 	bl	10000fd0 <__wrap___aeabi_ui2f>
10007976:	4641      	mov	r1, r8
10007978:	f7f9 fb24 	bl	10000fc4 <__wrap___aeabi_fmul>
1000797c:	49a2      	ldr	r1, [pc, #648]	; (10007c08 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
1000797e:	f7f9 fb1e 	bl	10000fbe <__wrap___aeabi_fdiv>
10007982:	9904      	ldr	r1, [sp, #16]
10007984:	f7f9 fb1b 	bl	10000fbe <__wrap___aeabi_fdiv>
10007988:	49a0      	ldr	r1, [pc, #640]	; (10007c0c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x394>)
1000798a:	f7f9 fb15 	bl	10000fb8 <__wrap___aeabi_fadd>
1000798e:	f7f9 fb47 	bl	10001020 <__wrap___aeabi_f2iz>
	{
		int freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
10007992:	4286      	cmp	r6, r0
10007994:	da00      	bge.n	10007998 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x120>
10007996:	e240      	b.n	10007e1a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5a2>
10007998:	437e      	muls	r6, r7
1000799a:	0170      	lsls	r0, r6, #5
1000799c:	1b80      	subs	r0, r0, r6
1000799e:	0080      	lsls	r0, r0, #2
100079a0:	1980      	adds	r0, r0, r6
100079a2:	00c0      	lsls	r0, r0, #3
100079a4:	f7f9 fb1a 	bl	10000fdc <__wrap___aeabi_i2f>
100079a8:	4641      	mov	r1, r8
100079aa:	f7f9 fb08 	bl	10000fbe <__wrap___aeabi_fdiv>
100079ae:	21fc      	movs	r1, #252	; 0xfc
100079b0:	0589      	lsls	r1, r1, #22
100079b2:	f7f9 fb01 	bl	10000fb8 <__wrap___aeabi_fadd>
100079b6:	f7f9 fb33 	bl	10001020 <__wrap___aeabi_f2iz>
100079ba:	30c8      	adds	r0, #200	; 0xc8
		if (freq2 < freq)
100079bc:	4285      	cmp	r5, r0
100079be:	d900      	bls.n	100079c2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x14a>
100079c0:	e215      	b.n	10007dee <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x576>
		{
			cpp++;
			freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
		}
		if (freq2 >= freq) freq = freq2;
100079c2:	0005      	movs	r5, r0
100079c4:	900e      	str	r0, [sp, #56]	; 0x38
		if (freq > cfg->fmax) freq = cfg->fmax;
100079c6:	4653      	mov	r3, sl
100079c8:	691b      	ldr	r3, [r3, #16]
100079ca:	42ab      	cmp	r3, r5
100079cc:	d201      	bcs.n	100079d2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x15a>
100079ce:	001d      	movs	r5, r3
100079d0:	930e      	str	r3, [sp, #56]	; 0x38

	// find sysclock setup (use set_sys_clock_pll to set sysclock)
	u32 vco;
	u16 fbdiv;
	u8 pd1, pd2;
	FindSysClock(freq, &freq, &vco, &fbdiv, &pd1, &pd2);
100079d2:	ab0a      	add	r3, sp, #40	; 0x28
100079d4:	469c      	mov	ip, r3
100079d6:	260e      	movs	r6, #14
100079d8:	230d      	movs	r3, #13
100079da:	4466      	add	r6, ip
100079dc:	4463      	add	r3, ip
100079de:	af0d      	add	r7, sp, #52	; 0x34
100079e0:	a90e      	add	r1, sp, #56	; 0x38
100079e2:	0028      	movs	r0, r5
100079e4:	9301      	str	r3, [sp, #4]
100079e6:	aa0f      	add	r2, sp, #60	; 0x3c
100079e8:	0033      	movs	r3, r6
100079ea:	9700      	str	r7, [sp, #0]
100079ec:	f000 fa3c 	bl	10007e68 <_Z12FindSysClockmPmS_PtPhS1_>

	vmode->freq = freq;
100079f0:	465b      	mov	r3, fp
100079f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	vmode->fbdiv = fbdiv;
	vmode->pd1 = pd1;
	vmode->pd2 = pd2;

	// calculate divisor
	cpp = (int)(freq*hfull/1000/wfull + 0.2f);
100079f4:	980e      	ldr	r0, [sp, #56]	; 0x38
	vmode->freq = freq;
100079f6:	609a      	str	r2, [r3, #8]
	vmode->vco = vco;
100079f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
100079fa:	60da      	str	r2, [r3, #12]
	vmode->fbdiv = fbdiv;
100079fc:	465a      	mov	r2, fp
100079fe:	8833      	ldrh	r3, [r6, #0]
10007a00:	8213      	strh	r3, [r2, #16]
	vmode->pd1 = pd1;
10007a02:	783b      	ldrb	r3, [r7, #0]
10007a04:	7493      	strb	r3, [r2, #18]
	vmode->pd2 = pd2;
10007a06:	ab0a      	add	r3, sp, #40	; 0x28
10007a08:	7b5b      	ldrb	r3, [r3, #13]
10007a0a:	74d3      	strb	r3, [r2, #19]
	cpp = (int)(freq*hfull/1000/wfull + 0.2f);
10007a0c:	f7f9 fae0 	bl	10000fd0 <__wrap___aeabi_ui2f>
10007a10:	4641      	mov	r1, r8
10007a12:	9003      	str	r0, [sp, #12]
10007a14:	f7f9 fad6 	bl	10000fc4 <__wrap___aeabi_fmul>
10007a18:	497b      	ldr	r1, [pc, #492]	; (10007c08 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
10007a1a:	f7f9 fad0 	bl	10000fbe <__wrap___aeabi_fdiv>
10007a1e:	9904      	ldr	r1, [sp, #16]
10007a20:	9005      	str	r0, [sp, #20]
10007a22:	f7f9 facc 	bl	10000fbe <__wrap___aeabi_fdiv>
10007a26:	497a      	ldr	r1, [pc, #488]	; (10007c10 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x398>)
10007a28:	4680      	mov	r8, r0
10007a2a:	f7f9 fac5 	bl	10000fb8 <__wrap___aeabi_fadd>
10007a2e:	f7f9 faf7 	bl	10001020 <__wrap___aeabi_f2iz>
10007a32:	0005      	movs	r5, r0
	int div = 1;
	while (cpp > maxcpp)
10007a34:	4284      	cmp	r4, r0
10007a36:	db00      	blt.n	10007a3a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x1c2>
10007a38:	e20c      	b.n	10007e54 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5dc>
	int div = 1;
10007a3a:	2701      	movs	r7, #1
10007a3c:	4645      	mov	r5, r8
	{
		div++;
10007a3e:	3701      	adds	r7, #1
		cpp = (int)(freq*hfull/1000/wfull/div + 0.2f);
10007a40:	0038      	movs	r0, r7
10007a42:	f7f9 facb 	bl	10000fdc <__wrap___aeabi_i2f>
10007a46:	1c01      	adds	r1, r0, #0
10007a48:	1c06      	adds	r6, r0, #0
10007a4a:	1c28      	adds	r0, r5, #0
10007a4c:	f7f9 fab7 	bl	10000fbe <__wrap___aeabi_fdiv>
10007a50:	496f      	ldr	r1, [pc, #444]	; (10007c10 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x398>)
10007a52:	f7f9 fab1 	bl	10000fb8 <__wrap___aeabi_fadd>
10007a56:	f7f9 fae3 	bl	10001020 <__wrap___aeabi_f2iz>
	while (cpp > maxcpp)
10007a5a:	4284      	cmp	r4, r0
10007a5c:	dbef      	blt.n	10007a3e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x1c6>
	}

	vmode->div = div;
10007a5e:	0005      	movs	r5, r0
	vmode->vback2 = v->vback2 - dh/2; // V back porch (after VSYNC, before image) on subframe 2
	vmode->vfront2 = v->vfront2 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 2
	vmode->vpre2 = v->vpre2; // V sync pre half-pulses on subframe 2

	// frequency
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
10007a60:	0438      	lsls	r0, r7, #16
10007a62:	0c00      	lsrs	r0, r0, #16
10007a64:	f7f9 faba 	bl	10000fdc <__wrap___aeabi_i2f>
	vmode->div = div;
10007a68:	b2bc      	uxth	r4, r7
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
10007a6a:	9008      	str	r0, [sp, #32]
	vmode->div = div;
10007a6c:	465b      	mov	r3, fp
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
10007a6e:	0028      	movs	r0, r5
	vmode->div = div;
10007a70:	829c      	strh	r4, [r3, #20]
	vmode->cpp = cpp;
10007a72:	82dd      	strh	r5, [r3, #22]
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
10007a74:	f7f9 fab2 	bl	10000fdc <__wrap___aeabi_i2f>
	wmax = (int)(freq*hmax/1000/cpp/div + 0.4f);
10007a78:	9907      	ldr	r1, [sp, #28]
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
10007a7a:	1c04      	adds	r4, r0, #0
	wmax = (int)(freq*hmax/1000/cpp/div + 0.4f);
10007a7c:	9803      	ldr	r0, [sp, #12]
10007a7e:	f7f9 faa1 	bl	10000fc4 <__wrap___aeabi_fmul>
10007a82:	4961      	ldr	r1, [pc, #388]	; (10007c08 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
10007a84:	f7f9 fa9b 	bl	10000fbe <__wrap___aeabi_fdiv>
10007a88:	1c21      	adds	r1, r4, #0
10007a8a:	f7f9 fa98 	bl	10000fbe <__wrap___aeabi_fdiv>
10007a8e:	1c31      	adds	r1, r6, #0
10007a90:	f7f9 fa95 	bl	10000fbe <__wrap___aeabi_fdiv>
10007a94:	495f      	ldr	r1, [pc, #380]	; (10007c14 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x39c>)
10007a96:	f7f9 fa8f 	bl	10000fb8 <__wrap___aeabi_fadd>
10007a9a:	f7f9 fac1 	bl	10001020 <__wrap___aeabi_f2iz>
10007a9e:	0007      	movs	r7, r0
	if (w > wmax) w = wmax;
10007aa0:	9806      	ldr	r0, [sp, #24]
10007aa2:	42b8      	cmp	r0, r7
10007aa4:	dd00      	ble.n	10007aa8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x230>
10007aa6:	0038      	movs	r0, r7
	w = ALIGN4(w);
10007aa8:	2303      	movs	r3, #3
10007aaa:	4398      	bics	r0, r3
	vmode->width = w; // active width
10007aac:	465b      	mov	r3, fp
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
10007aae:	1c21      	adds	r1, r4, #0
	vmode->width = w; // active width
10007ab0:	8018      	strh	r0, [r3, #0]
	w = ALIGN4(w);
10007ab2:	4680      	mov	r8, r0
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
10007ab4:	9805      	ldr	r0, [sp, #20]
10007ab6:	f7f9 fa82 	bl	10000fbe <__wrap___aeabi_fdiv>
10007aba:	1c31      	adds	r1, r6, #0
10007abc:	f7f9 fa7f 	bl	10000fbe <__wrap___aeabi_fdiv>
10007ac0:	4954      	ldr	r1, [pc, #336]	; (10007c14 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x39c>)
10007ac2:	f7f9 fa79 	bl	10000fb8 <__wrap___aeabi_fadd>
10007ac6:	f7f9 faab 	bl	10001020 <__wrap___aeabi_f2iz>
	vmode->wfull = wfull; // width of full screen (image should be full visible)
10007aca:	465b      	mov	r3, fp
10007acc:	8098      	strh	r0, [r3, #4]
	vmode->wmax = wmax; // maximal width (can be > wfull)
10007ace:	80df      	strh	r7, [r3, #6]
	int hwidth = w*cpp; // active width in state machine clocks
10007ad0:	4643      	mov	r3, r8
10007ad2:	435d      	muls	r5, r3
	int htot = (int)(freq*v->htot/1000/div + 0.5f);  // total state machine clocks per line
10007ad4:	464b      	mov	r3, r9
10007ad6:	9f03      	ldr	r7, [sp, #12]
10007ad8:	6819      	ldr	r1, [r3, #0]
10007ada:	1c38      	adds	r0, r7, #0
10007adc:	f7f9 fa72 	bl	10000fc4 <__wrap___aeabi_fmul>
10007ae0:	4949      	ldr	r1, [pc, #292]	; (10007c08 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
10007ae2:	f7f9 fa6c 	bl	10000fbe <__wrap___aeabi_fdiv>
10007ae6:	1c31      	adds	r1, r6, #0
10007ae8:	f7f9 fa69 	bl	10000fbe <__wrap___aeabi_fdiv>
10007aec:	21fc      	movs	r1, #252	; 0xfc
10007aee:	0589      	lsls	r1, r1, #22
10007af0:	f7f9 fa62 	bl	10000fb8 <__wrap___aeabi_fadd>
10007af4:	f7f9 fa94 	bl	10001020 <__wrap___aeabi_f2iz>
	int hsync = (int)(freq*v->hsync/1000/div + 0.5f); // H sync pulse in state machine clocks (min. 4)
10007af8:	464b      	mov	r3, r9
	int htot = (int)(freq*v->htot/1000/div + 0.5f);  // total state machine clocks per line
10007afa:	0004      	movs	r4, r0
	int hsync = (int)(freq*v->hsync/1000/div + 0.5f); // H sync pulse in state machine clocks (min. 4)
10007afc:	6899      	ldr	r1, [r3, #8]
10007afe:	1c38      	adds	r0, r7, #0
10007b00:	f7f9 fa60 	bl	10000fc4 <__wrap___aeabi_fmul>
10007b04:	4940      	ldr	r1, [pc, #256]	; (10007c08 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
10007b06:	f7f9 fa5a 	bl	10000fbe <__wrap___aeabi_fdiv>
10007b0a:	1c31      	adds	r1, r6, #0
10007b0c:	f7f9 fa57 	bl	10000fbe <__wrap___aeabi_fdiv>
10007b10:	21fc      	movs	r1, #252	; 0xfc
10007b12:	0589      	lsls	r1, r1, #22
10007b14:	f7f9 fa50 	bl	10000fb8 <__wrap___aeabi_fadd>
10007b18:	f7f9 fa82 	bl	10001020 <__wrap___aeabi_f2iz>
10007b1c:	0007      	movs	r7, r0
	if (hsync < 4)
10007b1e:	2803      	cmp	r0, #3
10007b20:	dc00      	bgt.n	10007b24 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2ac>
10007b22:	e143      	b.n	10007dac <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x534>
	vmode->hsync = (u16)hsync; // H sync pulse in state machine clocks (min. 4)
10007b24:	b283      	uxth	r3, r0
10007b26:	9304      	str	r3, [sp, #16]
	int hfront = (int)(freq*v->hfront/1000/div + 0.5f); // H front porch in state machine clocks (min. 2)
10007b28:	464b      	mov	r3, r9
10007b2a:	9803      	ldr	r0, [sp, #12]
10007b2c:	6859      	ldr	r1, [r3, #4]
10007b2e:	f7f9 fa49 	bl	10000fc4 <__wrap___aeabi_fmul>
10007b32:	4935      	ldr	r1, [pc, #212]	; (10007c08 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
10007b34:	f7f9 fa43 	bl	10000fbe <__wrap___aeabi_fdiv>
10007b38:	1c31      	adds	r1, r6, #0
10007b3a:	f7f9 fa40 	bl	10000fbe <__wrap___aeabi_fdiv>
10007b3e:	21fc      	movs	r1, #252	; 0xfc
10007b40:	0589      	lsls	r1, r1, #22
10007b42:	f7f9 fa39 	bl	10000fb8 <__wrap___aeabi_fadd>
10007b46:	f7f9 fa6b 	bl	10001020 <__wrap___aeabi_f2iz>
	int hback = (int)(freq*v->hback/1000/div + 0.5f); // H back porch in state machine clocks (min. 13)
10007b4a:	464b      	mov	r3, r9
	int hfront = (int)(freq*v->hfront/1000/div + 0.5f); // H front porch in state machine clocks (min. 2)
10007b4c:	4680      	mov	r8, r0
	int hback = (int)(freq*v->hback/1000/div + 0.5f); // H back porch in state machine clocks (min. 13)
10007b4e:	68d9      	ldr	r1, [r3, #12]
10007b50:	9803      	ldr	r0, [sp, #12]
10007b52:	f7f9 fa37 	bl	10000fc4 <__wrap___aeabi_fmul>
10007b56:	492c      	ldr	r1, [pc, #176]	; (10007c08 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
10007b58:	f7f9 fa31 	bl	10000fbe <__wrap___aeabi_fdiv>
10007b5c:	1c31      	adds	r1, r6, #0
10007b5e:	f7f9 fa2e 	bl	10000fbe <__wrap___aeabi_fdiv>
10007b62:	21fc      	movs	r1, #252	; 0xfc
10007b64:	0589      	lsls	r1, r1, #22
10007b66:	f7f9 fa27 	bl	10000fb8 <__wrap___aeabi_fadd>
10007b6a:	f7f9 fa59 	bl	10001020 <__wrap___aeabi_f2iz>
	int d = htot - hfront - hsync - hback - hwidth; // difference
10007b6e:	4643      	mov	r3, r8
10007b70:	1ae2      	subs	r2, r4, r3
10007b72:	1bd2      	subs	r2, r2, r7
10007b74:	1a12      	subs	r2, r2, r0
10007b76:	1b52      	subs	r2, r2, r5
	hfront += d/2;
10007b78:	0fd3      	lsrs	r3, r2, #31
10007b7a:	189b      	adds	r3, r3, r2
10007b7c:	1059      	asrs	r1, r3, #1
10007b7e:	4441      	add	r1, r8
	hback += (d < 0) ? (d-1)/2 : (d+1)/2;
10007b80:	2a00      	cmp	r2, #0
10007b82:	da00      	bge.n	10007b86 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x30e>
10007b84:	e161      	b.n	10007e4a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5d2>
10007b86:	3201      	adds	r2, #1
10007b88:	1053      	asrs	r3, r2, #1
10007b8a:	181b      	adds	r3, r3, r0
	if (hfront < 4)
10007b8c:	2903      	cmp	r1, #3
10007b8e:	dc02      	bgt.n	10007b96 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x31e>
		hback -= 4 - hfront;
10007b90:	18cb      	adds	r3, r1, r3
		hfront = 4;
10007b92:	2104      	movs	r1, #4
		hback -= 4 - hfront;
10007b94:	3b04      	subs	r3, #4
	if (hback < 13)
10007b96:	2b0c      	cmp	r3, #12
10007b98:	dc00      	bgt.n	10007b9c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x324>
10007b9a:	e100      	b.n	10007d9e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x526>
	vmode->hback = (u16)hback; // H back porch in state machine clocks (min. 13)
10007b9c:	b29a      	uxth	r2, r3
	htot = hfront + hsync + hback + hwidth; // total state machine clocks per line
10007b9e:	187f      	adds	r7, r7, r1
10007ba0:	18fb      	adds	r3, r7, r3
	if (v->inter && ((htot & 1) != 0))
10007ba2:	4648      	mov	r0, r9
	htot = hfront + hsync + hback + hwidth; // total state machine clocks per line
10007ba4:	195d      	adds	r5, r3, r5
	if (v->inter && ((htot & 1) != 0))
10007ba6:	2334      	movs	r3, #52	; 0x34
10007ba8:	5cc0      	ldrb	r0, [r0, r3]
10007baa:	2800      	cmp	r0, #0
10007bac:	d002      	beq.n	10007bb4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x33c>
10007bae:	07eb      	lsls	r3, r5, #31
10007bb0:	d500      	bpl.n	10007bb4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x33c>
10007bb2:	e119      	b.n	10007de8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x570>
	vmode->htot = (u16)htot; // total state machine clocks per line
10007bb4:	465b      	mov	r3, fp
	vmode->hfront = (u16)hfront; // H front porch in state machine clocks (min. 2)
10007bb6:	8419      	strh	r1, [r3, #32]
	vmode->hback = (u16)hback; // H back porch in state machine clocks (min. 13)
10007bb8:	849a      	strh	r2, [r3, #36]	; 0x24
	vmode->hsync = (u16)hsync; // H sync pulse in state machine clocks (min. 4)
10007bba:	9904      	ldr	r1, [sp, #16]
	if (cfg->dbly) h *= 2; // use double lines
10007bbc:	4652      	mov	r2, sl
	vmode->htot = (u16)htot; // total state machine clocks per line
10007bbe:	83dd      	strh	r5, [r3, #30]
	vmode->hsync = (u16)hsync; // H sync pulse in state machine clocks (min. 4)
10007bc0:	8459      	strh	r1, [r3, #34]	; 0x22
	int h = cfg->height; // required height
10007bc2:	4653      	mov	r3, sl
	if (cfg->dbly) h *= 2; // use double lines
10007bc4:	7e14      	ldrb	r4, [r2, #24]
	int h = cfg->height; // required height
10007bc6:	885b      	ldrh	r3, [r3, #2]
	if (cfg->dbly) h *= 2; // use double lines
10007bc8:	2c00      	cmp	r4, #0
10007bca:	d025      	beq.n	10007c18 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3a0>
	vmode->vmax = v->vmax; // maximal height
10007bcc:	464a      	mov	r2, r9
10007bce:	8ad1      	ldrh	r1, [r2, #22]
10007bd0:	465a      	mov	r2, fp
	if (cfg->dbly) h *= 2; // use double lines
10007bd2:	005b      	lsls	r3, r3, #1
	vmode->vmax = v->vmax; // maximal height
10007bd4:	85d1      	strh	r1, [r2, #46]	; 0x2e
	if (h > v->vmax) h = v->vmax; // limit height
10007bd6:	4299      	cmp	r1, r3
10007bd8:	dd00      	ble.n	10007bdc <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x364>
10007bda:	e0fe      	b.n	10007dda <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x562>
	if (cfg->dbly) h &= ~1; // must be even number if double lines
10007bdc:	2301      	movs	r3, #1
10007bde:	4399      	bics	r1, r3
	if (v->inter) // interlaced
10007be0:	2800      	cmp	r0, #0
10007be2:	d100      	bne.n	10007be6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x36e>
10007be4:	e0f0      	b.n	10007dc8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x550>
		if (v->odd) // first frame is odd lines
10007be6:	2336      	movs	r3, #54	; 0x36
10007be8:	464a      	mov	r2, r9
10007bea:	5cd3      	ldrb	r3, [r2, r3]
10007bec:	2b00      	cmp	r3, #0
10007bee:	d100      	bne.n	10007bf2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x37a>
10007bf0:	e0ee      	b.n	10007dd0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x558>
			vact1 = h/2;
10007bf2:	104a      	asrs	r2, r1, #1
			vact2 = (h+1)/2; // if even lines, even frame will have more lines
10007bf4:	0016      	movs	r6, r2
10007bf6:	1c4b      	adds	r3, r1, #1
10007bf8:	105b      	asrs	r3, r3, #1
	vmode->vact2 = vact2; // active scanlines of 2nd subframe
10007bfa:	b298      	uxth	r0, r3
	if (cfg->dbly) h /= 2; // return double lines to single lines
10007bfc:	2c00      	cmp	r4, #0
10007bfe:	d016      	beq.n	10007c2e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3b6>
	vmode->vact2 = vact2; // active scanlines of 2nd subframe
10007c00:	0031      	movs	r1, r6
	if (cfg->dbly) h /= 2; // return double lines to single lines
10007c02:	e014      	b.n	10007c2e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3b6>
10007c04:	101aedc0 	.word	0x101aedc0
10007c08:	447a0000 	.word	0x447a0000
10007c0c:	3dcccccd 	.word	0x3dcccccd
10007c10:	3e4ccccd 	.word	0x3e4ccccd
10007c14:	3ecccccd 	.word	0x3ecccccd
	vmode->vmax = v->vmax; // maximal height
10007c18:	464a      	mov	r2, r9
10007c1a:	8ad1      	ldrh	r1, [r2, #22]
10007c1c:	465a      	mov	r2, fp
10007c1e:	85d1      	strh	r1, [r2, #46]	; 0x2e
	if (h > v->vmax) h = v->vmax; // limit height
10007c20:	4299      	cmp	r1, r3
10007c22:	dd00      	ble.n	10007c26 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3ae>
10007c24:	e0cb      	b.n	10007dbe <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x546>
	if (v->inter) // interlaced
10007c26:	2800      	cmp	r0, #0
10007c28:	d1dd      	bne.n	10007be6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x36e>
10007c2a:	000a      	movs	r2, r1
	int vact2 = 0;
10007c2c:	2300      	movs	r3, #0
	vmode->height = h;
10007c2e:	465c      	mov	r4, fp
10007c30:	8061      	strh	r1, [r4, #2]
	vmode->vtot = v->vtot; // total scanlines
10007c32:	4649      	mov	r1, r9
10007c34:	8a8e      	ldrh	r6, [r1, #20]
	vmode->vact1 = vact1; // active scanlines of 1st subframe
10007c36:	b291      	uxth	r1, r2
10007c38:	8761      	strh	r1, [r4, #58]	; 0x3a
10007c3a:	9105      	str	r1, [sp, #20]
	int dh = vact1 - v->vact1; // difference
10007c3c:	4649      	mov	r1, r9
	vmode->vtot = v->vtot; // total scanlines
10007c3e:	85a6      	strh	r6, [r4, #44]	; 0x2c
	int dh = vact1 - v->vact1; // difference
10007c40:	8bc9      	ldrh	r1, [r1, #30]
10007c42:	1a52      	subs	r2, r2, r1
	vmode->vsync1 = v->vsync1; // V sync (half-)pulses on subframe 1
10007c44:	4649      	mov	r1, r9
10007c46:	8b09      	ldrh	r1, [r1, #24]
10007c48:	86a1      	strh	r1, [r4, #52]	; 0x34
10007c4a:	9104      	str	r1, [sp, #16]
	vmode->vpost1 = v->vpost1; // V sync post (half-)pulses on subframe 1
10007c4c:	4649      	mov	r1, r9
10007c4e:	8b49      	ldrh	r1, [r1, #26]
10007c50:	86e1      	strh	r1, [r4, #54]	; 0x36
	vmode->vback1 = v->vback1 - dh/2; // V back porch (after VSYNC, before image) on subframe 1
10007c52:	464c      	mov	r4, r9
	vmode->vpost1 = v->vpost1; // V sync post (half-)pulses on subframe 1
10007c54:	9106      	str	r1, [sp, #24]
	vmode->vback1 = v->vback1 - dh/2; // V back porch (after VSYNC, before image) on subframe 1
10007c56:	0fd1      	lsrs	r1, r2, #31
10007c58:	8ba4      	ldrh	r4, [r4, #28]
10007c5a:	1889      	adds	r1, r1, r2
10007c5c:	1049      	asrs	r1, r1, #1
10007c5e:	1a61      	subs	r1, r4, r1
10007c60:	b28f      	uxth	r7, r1
10007c62:	4659      	mov	r1, fp
10007c64:	870f      	strh	r7, [r1, #56]	; 0x38
	vmode->vfront1 = v->vfront1 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 1
10007c66:	4649      	mov	r1, r9
10007c68:	8c09      	ldrh	r1, [r1, #32]
10007c6a:	2a00      	cmp	r2, #0
10007c6c:	da00      	bge.n	10007c70 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3f8>
10007c6e:	e0e6      	b.n	10007e3e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5c6>
10007c70:	3201      	adds	r2, #1
10007c72:	1052      	asrs	r2, r2, #1
10007c74:	b292      	uxth	r2, r2
10007c76:	1a8a      	subs	r2, r1, r2
10007c78:	4659      	mov	r1, fp
10007c7a:	b292      	uxth	r2, r2
10007c7c:	878a      	strh	r2, [r1, #60]	; 0x3c
10007c7e:	9207      	str	r2, [sp, #28]
	vmode->vpre1 = v->vpre1; // V sync pre (half-)pulses on subframe 1
10007c80:	464a      	mov	r2, r9
10007c82:	8c52      	ldrh	r2, [r2, #34]	; 0x22
10007c84:	87ca      	strh	r2, [r1, #62]	; 0x3e
10007c86:	9209      	str	r2, [sp, #36]	; 0x24
	vmode->vact2 = vact2; // active scanlines of 2nd subframe
10007c88:	2248      	movs	r2, #72	; 0x48
10007c8a:	5288      	strh	r0, [r1, r2]
	dh = vact2 - v->vact2; // difference
10007c8c:	464a      	mov	r2, r9
10007c8e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
	vmode->vsync2 = v->vsync2; // V sync half-pulses on subframe 2
10007c90:	4658      	mov	r0, fp
	dh = vact2 - v->vact2; // difference
10007c92:	1a9b      	subs	r3, r3, r2
	vmode->vsync2 = v->vsync2; // V sync half-pulses on subframe 2
10007c94:	464a      	mov	r2, r9
10007c96:	8c92      	ldrh	r2, [r2, #36]	; 0x24
10007c98:	920a      	str	r2, [sp, #40]	; 0x28
10007c9a:	0011      	movs	r1, r2
10007c9c:	2242      	movs	r2, #66	; 0x42
10007c9e:	5281      	strh	r1, [r0, r2]
	vmode->vpost2 = v->vpost2; // V sync post half-pulses on subframe 2
10007ca0:	464a      	mov	r2, r9
10007ca2:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
10007ca4:	0011      	movs	r1, r2
10007ca6:	920b      	str	r2, [sp, #44]	; 0x2c
10007ca8:	2244      	movs	r2, #68	; 0x44
10007caa:	5281      	strh	r1, [r0, r2]
	vmode->vback2 = v->vback2 - dh/2; // V back porch (after VSYNC, before image) on subframe 2
10007cac:	4649      	mov	r1, r9
10007cae:	0fda      	lsrs	r2, r3, #31
10007cb0:	8d0c      	ldrh	r4, [r1, #40]	; 0x28
10007cb2:	18d2      	adds	r2, r2, r3
10007cb4:	1052      	asrs	r2, r2, #1
10007cb6:	1aa4      	subs	r4, r4, r2
10007cb8:	2246      	movs	r2, #70	; 0x46
10007cba:	b2a4      	uxth	r4, r4
10007cbc:	5284      	strh	r4, [r0, r2]
	vmode->vfront2 = v->vfront2 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 2
10007cbe:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
10007cc0:	2b00      	cmp	r3, #0
10007cc2:	da00      	bge.n	10007cc6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x44e>
10007cc4:	e0b5      	b.n	10007e32 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5ba>
10007cc6:	3301      	adds	r3, #1
10007cc8:	105b      	asrs	r3, r3, #1
10007cca:	b29b      	uxth	r3, r3
10007ccc:	4659      	mov	r1, fp
10007cce:	1ad3      	subs	r3, r2, r3
10007cd0:	224a      	movs	r2, #74	; 0x4a
10007cd2:	528b      	strh	r3, [r1, r2]
	vmode->vpre2 = v->vpre2; // V sync pre half-pulses on subframe 2
10007cd4:	464b      	mov	r3, r9
10007cd6:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
10007cd8:	234c      	movs	r3, #76	; 0x4c
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
10007cda:	9803      	ldr	r0, [sp, #12]
	vmode->vpre2 = v->vpre2; // V sync pre half-pulses on subframe 2
10007cdc:	52ca      	strh	r2, [r1, r3]
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
10007cde:	4960      	ldr	r1, [pc, #384]	; (10007e60 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5e8>)
10007ce0:	f7f9 f970 	bl	10000fc4 <__wrap___aeabi_fmul>
10007ce4:	9908      	ldr	r1, [sp, #32]
10007ce6:	f7f9 f96a 	bl	10000fbe <__wrap___aeabi_fdiv>
10007cea:	042d      	lsls	r5, r5, #16
10007cec:	4680      	mov	r8, r0
10007cee:	0c28      	lsrs	r0, r5, #16
10007cf0:	f7f9 f974 	bl	10000fdc <__wrap___aeabi_i2f>
10007cf4:	1c01      	adds	r1, r0, #0
10007cf6:	4640      	mov	r0, r8
10007cf8:	f7f9 f961 	bl	10000fbe <__wrap___aeabi_fdiv>
10007cfc:	465b      	mov	r3, fp
10007cfe:	1c05      	adds	r5, r0, #0
10007d00:	6298      	str	r0, [r3, #40]	; 0x28
	vmode->vfreq = vmode->hfreq / vmode->vtot;
10007d02:	0030      	movs	r0, r6
10007d04:	f7f9 f96a 	bl	10000fdc <__wrap___aeabi_i2f>
10007d08:	1c01      	adds	r1, r0, #0
10007d0a:	1c28      	adds	r0, r5, #0
10007d0c:	f7f9 f957 	bl	10000fbe <__wrap___aeabi_fdiv>

	// name
	vmode->name = v->name;	// video timing name
10007d10:	464a      	mov	r2, r9
	vmode->vfreq = vmode->hfreq / vmode->vtot;
10007d12:	465b      	mov	r3, fp
	vmode->name = v->name;	// video timing name
10007d14:	6b12      	ldr	r2, [r2, #48]	; 0x30
	vmode->vfreq = vmode->hfreq / vmode->vtot;
10007d16:	6318      	str	r0, [r3, #48]	; 0x30
	vmode->name = v->name;	// video timing name
10007d18:	651a      	str	r2, [r3, #80]	; 0x50

	// flags
	vmode->lockfreq = cfg->lockfreq; // lock current frequency, do not change it
10007d1a:	4653      	mov	r3, sl
10007d1c:	4659      	mov	r1, fp
10007d1e:	7e5a      	ldrb	r2, [r3, #25]
10007d20:	2354      	movs	r3, #84	; 0x54
10007d22:	54ca      	strb	r2, [r1, r3]
	vmode->dbly = cfg->dbly; // double scanlines
10007d24:	4653      	mov	r3, sl
10007d26:	7e1a      	ldrb	r2, [r3, #24]
10007d28:	2355      	movs	r3, #85	; 0x55
10007d2a:	54ca      	strb	r2, [r1, r3]
	vmode->inter = v->inter; // interlaced (use sub-frames)
10007d2c:	464a      	mov	r2, r9
10007d2e:	3b21      	subs	r3, #33	; 0x21
10007d30:	5cd1      	ldrb	r1, [r2, r3]
10007d32:	4658      	mov	r0, fp
10007d34:	2256      	movs	r2, #86	; 0x56
10007d36:	5481      	strb	r1, [r0, r2]
	vmode->psync = v->psync; // positive synchronization
10007d38:	4649      	mov	r1, r9
10007d3a:	3a21      	subs	r2, #33	; 0x21
10007d3c:	5c89      	ldrb	r1, [r1, r2]
10007d3e:	3222      	adds	r2, #34	; 0x22
10007d40:	5481      	strb	r1, [r0, r2]
	vmode->odd = v->odd; // first sub-frame is odd lines 1, 3, 5,... (PAL)
10007d42:	4649      	mov	r1, r9
10007d44:	3a21      	subs	r2, #33	; 0x21
10007d46:	5c89      	ldrb	r1, [r1, r2]
10007d48:	3222      	adds	r2, #34	; 0x22
10007d4a:	5481      	strb	r1, [r0, r2]

	// first active scanline
	if (v->inter)
10007d4c:	464a      	mov	r2, r9
10007d4e:	5cd3      	ldrb	r3, [r2, r3]
10007d50:	2b00      	cmp	r3, #0
10007d52:	d068      	beq.n	10007e26 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5ae>
	{
		// interlaced
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
10007d54:	9a06      	ldr	r2, [sp, #24]
		vmode->vfirst2 = vmode->vfirst1 + vmode->vact1 + vmode->vfront1 + 
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
10007d56:	990a      	ldr	r1, [sp, #40]	; 0x28
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
10007d58:	4694      	mov	ip, r2
10007d5a:	9b04      	ldr	r3, [sp, #16]
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
10007d5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
10007d5e:	4463      	add	r3, ip
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
10007d60:	468c      	mov	ip, r1
10007d62:	990b      	ldr	r1, [sp, #44]	; 0x2c
10007d64:	4462      	add	r2, ip
10007d66:	468c      	mov	ip, r1
10007d68:	9905      	ldr	r1, [sp, #20]
10007d6a:	4462      	add	r2, ip
10007d6c:	468c      	mov	ip, r1
10007d6e:	9907      	ldr	r1, [sp, #28]
10007d70:	1052      	asrs	r2, r2, #1
10007d72:	4462      	add	r2, ip
10007d74:	468c      	mov	ip, r1
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
10007d76:	105b      	asrs	r3, r3, #1
10007d78:	3301      	adds	r3, #1
10007d7a:	18fb      	adds	r3, r7, r3
10007d7c:	b29b      	uxth	r3, r3
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
10007d7e:	18a2      	adds	r2, r4, r2
10007d80:	189a      	adds	r2, r3, r2
10007d82:	4462      	add	r2, ip
10007d84:	b292      	uxth	r2, r2
10007d86:	4658      	mov	r0, fp
10007d88:	214e      	movs	r1, #78	; 0x4e
10007d8a:	5242      	strh	r2, [r0, r1]
10007d8c:	2240      	movs	r2, #64	; 0x40
10007d8e:	5283      	strh	r3, [r0, r2]
	{
		// progressive
		vmode->vfirst1 = vmode->vsync1 + vmode->vback1 + 1;
		vmode->vfirst2 = 0;
	}
}
10007d90:	b011      	add	sp, #68	; 0x44
10007d92:	bcf0      	pop	{r4, r5, r6, r7}
10007d94:	46bb      	mov	fp, r7
10007d96:	46b2      	mov	sl, r6
10007d98:	46a9      	mov	r9, r5
10007d9a:	46a0      	mov	r8, r4
10007d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hfront -= 13 - hback;
10007d9e:	18c9      	adds	r1, r1, r3
10007da0:	390d      	subs	r1, #13
10007da2:	2902      	cmp	r1, #2
10007da4:	db3b      	blt.n	10007e1e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5a6>
10007da6:	220d      	movs	r2, #13
		hback = 13;
10007da8:	230d      	movs	r3, #13
10007daa:	e6f8      	b.n	10007b9e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x326>
		htot -= 4 - hsync;
10007dac:	2304      	movs	r3, #4
10007dae:	1824      	adds	r4, r4, r0
		hsync = 4;
10007db0:	2704      	movs	r7, #4
		htot -= 4 - hsync;
10007db2:	3c04      	subs	r4, #4
		hsync = 4;
10007db4:	9304      	str	r3, [sp, #16]
10007db6:	e6b7      	b.n	10007b28 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2b0>
	u8 prog = LAYERMODE_BASE;
10007db8:	2100      	movs	r1, #0
10007dba:	4b2a      	ldr	r3, [pc, #168]	; (10007e64 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5ec>)
10007dbc:	e56f      	b.n	1000789e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x26>
10007dbe:	0019      	movs	r1, r3
	if (v->inter) // interlaced
10007dc0:	2800      	cmp	r0, #0
10007dc2:	d000      	beq.n	10007dc6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x54e>
10007dc4:	e70f      	b.n	10007be6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x36e>
10007dc6:	e730      	b.n	10007c2a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3b2>
	if (cfg->dbly) h &= ~1; // must be even number if double lines
10007dc8:	000a      	movs	r2, r1
	int vact2 = 0;
10007dca:	2300      	movs	r3, #0
	if (cfg->dbly) h /= 2; // return double lines to single lines
10007dcc:	0849      	lsrs	r1, r1, #1
10007dce:	e72e      	b.n	10007c2e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3b6>
			vact1 = (h+1)/2; // if even lines, even frame will have more lines
10007dd0:	1c4a      	adds	r2, r1, #1
			vact2 = h/2;
10007dd2:	104b      	asrs	r3, r1, #1
10007dd4:	001e      	movs	r6, r3
			vact1 = (h+1)/2; // if even lines, even frame will have more lines
10007dd6:	1052      	asrs	r2, r2, #1
			vact2 = h/2;
10007dd8:	e70f      	b.n	10007bfa <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x382>
10007dda:	0019      	movs	r1, r3
	if (cfg->dbly) h &= ~1; // must be even number if double lines
10007ddc:	2301      	movs	r3, #1
10007dde:	4399      	bics	r1, r3
	if (v->inter) // interlaced
10007de0:	2800      	cmp	r0, #0
10007de2:	d000      	beq.n	10007de6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x56e>
10007de4:	e6ff      	b.n	10007be6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x36e>
10007de6:	e7ef      	b.n	10007dc8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x550>
		htot--;
10007de8:	3d01      	subs	r5, #1
		hfront++;
10007dea:	3101      	adds	r1, #1
10007dec:	e6e2      	b.n	10007bb4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x33c>
			freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
10007dee:	19f6      	adds	r6, r6, r7
10007df0:	0170      	lsls	r0, r6, #5
10007df2:	1b80      	subs	r0, r0, r6
10007df4:	0080      	lsls	r0, r0, #2
10007df6:	1980      	adds	r0, r0, r6
10007df8:	00c0      	lsls	r0, r0, #3
10007dfa:	f7f9 f8ef 	bl	10000fdc <__wrap___aeabi_i2f>
10007dfe:	4641      	mov	r1, r8
10007e00:	f7f9 f8dd 	bl	10000fbe <__wrap___aeabi_fdiv>
10007e04:	21fc      	movs	r1, #252	; 0xfc
10007e06:	0589      	lsls	r1, r1, #22
10007e08:	f7f9 f8d6 	bl	10000fb8 <__wrap___aeabi_fadd>
10007e0c:	f7f9 f908 	bl	10001020 <__wrap___aeabi_f2iz>
10007e10:	30c8      	adds	r0, #200	; 0xc8
		if (freq2 >= freq) freq = freq2;
10007e12:	4285      	cmp	r5, r0
10007e14:	d900      	bls.n	10007e18 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5a0>
10007e16:	e5d6      	b.n	100079c6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x14e>
10007e18:	e5d3      	b.n	100079c2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x14a>
		int freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
10007e1a:	0006      	movs	r6, r0
10007e1c:	e5bc      	b.n	10007998 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x120>
10007e1e:	2102      	movs	r1, #2
10007e20:	220d      	movs	r2, #13
		hback = 13;
10007e22:	230d      	movs	r3, #13
10007e24:	e6bb      	b.n	10007b9e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x326>
		vmode->vfirst1 = vmode->vsync1 + vmode->vback1 + 1;
10007e26:	9b04      	ldr	r3, [sp, #16]
		vmode->vfirst2 = 0;
10007e28:	2200      	movs	r2, #0
		vmode->vfirst1 = vmode->vsync1 + vmode->vback1 + 1;
10007e2a:	3301      	adds	r3, #1
10007e2c:	18fb      	adds	r3, r7, r3
10007e2e:	b29b      	uxth	r3, r3
		vmode->vfirst2 = 0;
10007e30:	e7a9      	b.n	10007d86 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x50e>
	vmode->vfront2 = v->vfront2 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 2
10007e32:	1e59      	subs	r1, r3, #1
10007e34:	0fcb      	lsrs	r3, r1, #31
10007e36:	185b      	adds	r3, r3, r1
10007e38:	105b      	asrs	r3, r3, #1
10007e3a:	b29b      	uxth	r3, r3
10007e3c:	e746      	b.n	10007ccc <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x454>
	vmode->vfront1 = v->vfront1 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 1
10007e3e:	1e54      	subs	r4, r2, #1
10007e40:	0fe2      	lsrs	r2, r4, #31
10007e42:	1912      	adds	r2, r2, r4
10007e44:	1052      	asrs	r2, r2, #1
10007e46:	b292      	uxth	r2, r2
10007e48:	e715      	b.n	10007c76 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3fe>
	hback += (d < 0) ? (d-1)/2 : (d+1)/2;
10007e4a:	3a01      	subs	r2, #1
10007e4c:	0fd3      	lsrs	r3, r2, #31
10007e4e:	189b      	adds	r3, r3, r2
10007e50:	105b      	asrs	r3, r3, #1
10007e52:	e69a      	b.n	10007b8a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x312>
	while (cpp > maxcpp)
10007e54:	23fe      	movs	r3, #254	; 0xfe
10007e56:	059b      	lsls	r3, r3, #22
10007e58:	2401      	movs	r4, #1
10007e5a:	9308      	str	r3, [sp, #32]
10007e5c:	1c1e      	adds	r6, r3, #0
10007e5e:	e605      	b.n	10007a6c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x1f4>
10007e60:	447a0000 	.word	0x447a0000
10007e64:	101aedc0 	.word	0x101aedc0

10007e68 <_Z12FindSysClockmPmS_PtPhS1_>:
//  outfbdiv ... output fbdiv (16..320)
//  outpd1 ... output postdiv1 (1..7)
//  outpd2 ... output postdiv2 (1..7)
// Returns true if precise frequency has been found, or near frequency used otherwise.
bool FindSysClock(u32 reqkhz, u32* outkhz, u32* outvco, u16* outfbdiv, u8* outpd1, u8* outpd2)
{
10007e68:	b5f0      	push	{r4, r5, r6, r7, lr}
10007e6a:	46de      	mov	lr, fp
10007e6c:	464e      	mov	r6, r9
10007e6e:	4657      	mov	r7, sl
10007e70:	4645      	mov	r5, r8
10007e72:	b5e0      	push	{r5, r6, r7, lr}
10007e74:	b087      	sub	sp, #28
10007e76:	9000      	str	r0, [sp, #0]
	// get reference frequency in kHz (should be 12 MHz)
	u32 input = clock_get_hz(clk_ref)/1000;
10007e78:	2004      	movs	r0, #4
{
10007e7a:	468a      	mov	sl, r1
10007e7c:	4691      	mov	r9, r2
10007e7e:	9304      	str	r3, [sp, #16]
	u32 input = clock_get_hz(clk_ref)/1000;
10007e80:	f7f9 fc00 	bl	10001684 <clock_get_hz>
10007e84:	21fa      	movs	r1, #250	; 0xfa
10007e86:	0089      	lsls	r1, r1, #2
10007e88:	f7f8 fa74 	bl	10000374 <__wrap___aeabi_uidiv>
	*outkhz = 0;
10007e8c:	2300      	movs	r3, #0
10007e8e:	4651      	mov	r1, sl
10007e90:	4684      	mov	ip, r0
10007e92:	4a8e      	ldr	r2, [pc, #568]	; (100080cc <_Z12FindSysClockmPmS_PtPhS1_+0x264>)
10007e94:	600b      	str	r3, [r1, #0]
10007e96:	0083      	lsls	r3, r0, #2
10007e98:	4463      	add	r3, ip
10007e9a:	4694      	mov	ip, r2
10007e9c:	019b      	lsls	r3, r3, #6
10007e9e:	4463      	add	r3, ip
10007ea0:	9302      	str	r3, [sp, #8]
						*outpd2 = pd2;
10007ea2:	464b      	mov	r3, r9
	*outkhz = 0;
10007ea4:	25a0      	movs	r5, #160	; 0xa0
						*outpd2 = pd2;
10007ea6:	46d1      	mov	r9, sl
10007ea8:	469a      	mov	sl, r3
	*outkhz = 0;
10007eaa:	4e89      	ldr	r6, [pc, #548]	; (100080d0 <_Z12FindSysClockmPmS_PtPhS1_+0x268>)
	u32 input = clock_get_hz(clk_ref)/1000;
10007eac:	9005      	str	r0, [sp, #20]
	*outkhz = 0;
10007eae:	006d      	lsls	r5, r5, #1
		vco = fbdiv * input;
10007eb0:	4a88      	ldr	r2, [pc, #544]	; (100080d4 <_Z12FindSysClockmPmS_PtPhS1_+0x26c>)
10007eb2:	9b02      	ldr	r3, [sp, #8]
10007eb4:	4694      	mov	ip, r2
10007eb6:	001c      	movs	r4, r3
		if ((vco >= vcomin) && (vco <= vcomax))
10007eb8:	4a87      	ldr	r2, [pc, #540]	; (100080d8 <_Z12FindSysClockmPmS_PtPhS1_+0x270>)
10007eba:	4464      	add	r4, ip
10007ebc:	4293      	cmp	r3, r2
10007ebe:	d900      	bls.n	10007ec2 <_Z12FindSysClockmPmS_PtPhS1_+0x5a>
10007ec0:	e0dd      	b.n	1000807e <_Z12FindSysClockmPmS_PtPhS1_+0x216>
10007ec2:	2306      	movs	r3, #6
10007ec4:	9503      	str	r5, [sp, #12]
10007ec6:	4698      	mov	r8, r3
10007ec8:	e0b4      	b.n	10008034 <_Z12FindSysClockmPmS_PtPhS1_+0x1cc>
					khz = vco / (pd1 * pd2);
10007eca:	4641      	mov	r1, r8
10007ecc:	0020      	movs	r0, r4
10007ece:	4369      	muls	r1, r5
10007ed0:	f7f8 fa50 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10007ed4:	9b00      	ldr	r3, [sp, #0]
10007ed6:	1ac3      	subs	r3, r0, r3
10007ed8:	17da      	asrs	r2, r3, #31
10007eda:	189b      	adds	r3, r3, r2
10007edc:	4053      	eors	r3, r2
					if (margin < margin_best)
10007ede:	42b3      	cmp	r3, r6
10007ee0:	d20c      	bcs.n	10007efc <_Z12FindSysClockmPmS_PtPhS1_+0x94>
						*outkhz = khz;
10007ee2:	464a      	mov	r2, r9
10007ee4:	6010      	str	r0, [r2, #0]
						*outvco = vco;
10007ee6:	4652      	mov	r2, sl
						*outpd2 = pd2;
10007ee8:	001e      	movs	r6, r3
						*outvco = vco;
10007eea:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
10007eec:	9903      	ldr	r1, [sp, #12]
10007eee:	9a04      	ldr	r2, [sp, #16]
10007ef0:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
10007ef2:	9a10      	ldr	r2, [sp, #64]	; 0x40
10007ef4:	9901      	ldr	r1, [sp, #4]
10007ef6:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
10007ef8:	9a11      	ldr	r2, [sp, #68]	; 0x44
10007efa:	7017      	strb	r7, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
10007efc:	1e7b      	subs	r3, r7, #1
10007efe:	b2db      	uxtb	r3, r3
10007f00:	469b      	mov	fp, r3
10007f02:	2b00      	cmp	r3, #0
10007f04:	d100      	bne.n	10007f08 <_Z12FindSysClockmPmS_PtPhS1_+0xa0>
10007f06:	e091      	b.n	1000802c <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
10007f08:	0019      	movs	r1, r3
10007f0a:	0020      	movs	r0, r4
10007f0c:	4369      	muls	r1, r5
10007f0e:	f7f8 fa31 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10007f12:	9b00      	ldr	r3, [sp, #0]
10007f14:	1ac3      	subs	r3, r0, r3
10007f16:	17da      	asrs	r2, r3, #31
10007f18:	189b      	adds	r3, r3, r2
10007f1a:	4053      	eors	r3, r2
					if (margin < margin_best)
10007f1c:	42b3      	cmp	r3, r6
10007f1e:	d20d      	bcs.n	10007f3c <_Z12FindSysClockmPmS_PtPhS1_+0xd4>
						*outkhz = khz;
10007f20:	464a      	mov	r2, r9
10007f22:	6010      	str	r0, [r2, #0]
						*outvco = vco;
10007f24:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
10007f26:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
10007f28:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
10007f2a:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
10007f2c:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
10007f2e:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
10007f30:	9a10      	ldr	r2, [sp, #64]	; 0x40
10007f32:	9901      	ldr	r1, [sp, #4]
10007f34:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
10007f36:	4659      	mov	r1, fp
10007f38:	9a11      	ldr	r2, [sp, #68]	; 0x44
10007f3a:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
10007f3c:	1ebb      	subs	r3, r7, #2
10007f3e:	b2db      	uxtb	r3, r3
10007f40:	469b      	mov	fp, r3
10007f42:	2b00      	cmp	r3, #0
10007f44:	d072      	beq.n	1000802c <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
10007f46:	0019      	movs	r1, r3
10007f48:	0020      	movs	r0, r4
10007f4a:	4369      	muls	r1, r5
10007f4c:	f7f8 fa12 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10007f50:	9b00      	ldr	r3, [sp, #0]
10007f52:	1ac3      	subs	r3, r0, r3
10007f54:	17da      	asrs	r2, r3, #31
10007f56:	189b      	adds	r3, r3, r2
10007f58:	4053      	eors	r3, r2
					if (margin < margin_best)
10007f5a:	429e      	cmp	r6, r3
10007f5c:	d90d      	bls.n	10007f7a <_Z12FindSysClockmPmS_PtPhS1_+0x112>
						*outkhz = khz;
10007f5e:	464a      	mov	r2, r9
10007f60:	6010      	str	r0, [r2, #0]
						*outvco = vco;
10007f62:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
10007f64:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
10007f66:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
10007f68:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
10007f6a:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
10007f6c:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
10007f6e:	9a10      	ldr	r2, [sp, #64]	; 0x40
10007f70:	9901      	ldr	r1, [sp, #4]
10007f72:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
10007f74:	4659      	mov	r1, fp
10007f76:	9a11      	ldr	r2, [sp, #68]	; 0x44
10007f78:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
10007f7a:	1efb      	subs	r3, r7, #3
10007f7c:	b2db      	uxtb	r3, r3
10007f7e:	469b      	mov	fp, r3
10007f80:	2b00      	cmp	r3, #0
10007f82:	d053      	beq.n	1000802c <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
10007f84:	0019      	movs	r1, r3
10007f86:	0020      	movs	r0, r4
10007f88:	4369      	muls	r1, r5
10007f8a:	f7f8 f9f3 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10007f8e:	9b00      	ldr	r3, [sp, #0]
10007f90:	1ac3      	subs	r3, r0, r3
10007f92:	17da      	asrs	r2, r3, #31
10007f94:	189b      	adds	r3, r3, r2
10007f96:	4053      	eors	r3, r2
					if (margin < margin_best)
10007f98:	429e      	cmp	r6, r3
10007f9a:	d90d      	bls.n	10007fb8 <_Z12FindSysClockmPmS_PtPhS1_+0x150>
						*outkhz = khz;
10007f9c:	464a      	mov	r2, r9
10007f9e:	6010      	str	r0, [r2, #0]
						*outvco = vco;
10007fa0:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
10007fa2:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
10007fa4:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
10007fa6:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
10007fa8:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
10007faa:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
10007fac:	9a10      	ldr	r2, [sp, #64]	; 0x40
10007fae:	9901      	ldr	r1, [sp, #4]
10007fb0:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
10007fb2:	4659      	mov	r1, fp
10007fb4:	9a11      	ldr	r2, [sp, #68]	; 0x44
10007fb6:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
10007fb8:	1f3b      	subs	r3, r7, #4
10007fba:	b2db      	uxtb	r3, r3
10007fbc:	469b      	mov	fp, r3
10007fbe:	2b00      	cmp	r3, #0
10007fc0:	d034      	beq.n	1000802c <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
10007fc2:	0019      	movs	r1, r3
10007fc4:	0020      	movs	r0, r4
10007fc6:	4369      	muls	r1, r5
10007fc8:	f7f8 f9d4 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10007fcc:	9b00      	ldr	r3, [sp, #0]
10007fce:	1ac3      	subs	r3, r0, r3
10007fd0:	17da      	asrs	r2, r3, #31
10007fd2:	189b      	adds	r3, r3, r2
10007fd4:	4053      	eors	r3, r2
					if (margin < margin_best)
10007fd6:	429e      	cmp	r6, r3
10007fd8:	d90d      	bls.n	10007ff6 <_Z12FindSysClockmPmS_PtPhS1_+0x18e>
						*outkhz = khz;
10007fda:	464a      	mov	r2, r9
10007fdc:	6010      	str	r0, [r2, #0]
						*outvco = vco;
10007fde:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
10007fe0:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
10007fe2:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
10007fe4:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
10007fe6:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
10007fe8:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
10007fea:	9a10      	ldr	r2, [sp, #64]	; 0x40
10007fec:	9901      	ldr	r1, [sp, #4]
10007fee:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
10007ff0:	4659      	mov	r1, fp
10007ff2:	9a11      	ldr	r2, [sp, #68]	; 0x44
10007ff4:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
10007ff6:	2f05      	cmp	r7, #5
10007ff8:	d018      	beq.n	1000802c <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
10007ffa:	0029      	movs	r1, r5
10007ffc:	0020      	movs	r0, r4
10007ffe:	f7f8 f9b9 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10008002:	9b00      	ldr	r3, [sp, #0]
10008004:	1ac3      	subs	r3, r0, r3
10008006:	17da      	asrs	r2, r3, #31
10008008:	189b      	adds	r3, r3, r2
1000800a:	4053      	eors	r3, r2
					if (margin < margin_best)
1000800c:	429e      	cmp	r6, r3
1000800e:	d90d      	bls.n	1000802c <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
						*outkhz = khz;
10008010:	464a      	mov	r2, r9
10008012:	6010      	str	r0, [r2, #0]
						*outvco = vco;
10008014:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
10008016:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
10008018:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
1000801a:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
1000801c:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
1000801e:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
10008020:	9a10      	ldr	r2, [sp, #64]	; 0x40
10008022:	9901      	ldr	r1, [sp, #4]
10008024:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
10008026:	2101      	movs	r1, #1
10008028:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000802a:	7011      	strb	r1, [r2, #0]
			for (pd1 = 7; pd1 >= 1; pd1--)
1000802c:	2301      	movs	r3, #1
1000802e:	425b      	negs	r3, r3
10008030:	469c      	mov	ip, r3
10008032:	44e0      	add	r8, ip
				for (pd2 = pd1; pd2 >= 1; pd2--)
10008034:	4643      	mov	r3, r8
10008036:	b2df      	uxtb	r7, r3
10008038:	1c7b      	adds	r3, r7, #1
1000803a:	b2da      	uxtb	r2, r3
1000803c:	4643      	mov	r3, r8
1000803e:	1c5d      	adds	r5, r3, #1
					khz = vco / (pd1 * pd2);
10008040:	0029      	movs	r1, r5
10008042:	0020      	movs	r0, r4
10008044:	4369      	muls	r1, r5
10008046:	9201      	str	r2, [sp, #4]
10008048:	f7f8 f994 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
1000804c:	9b00      	ldr	r3, [sp, #0]
1000804e:	1ac3      	subs	r3, r0, r3
10008050:	17d9      	asrs	r1, r3, #31
10008052:	185b      	adds	r3, r3, r1
10008054:	404b      	eors	r3, r1
					if (margin < margin_best)
10008056:	429e      	cmp	r6, r3
10008058:	d90c      	bls.n	10008074 <_Z12FindSysClockmPmS_PtPhS1_+0x20c>
						*outkhz = khz;
1000805a:	4649      	mov	r1, r9
1000805c:	6008      	str	r0, [r1, #0]
						*outvco = vco;
1000805e:	4651      	mov	r1, sl
						*outpd2 = pd2;
10008060:	001e      	movs	r6, r3
						*outvco = vco;
10008062:	600c      	str	r4, [r1, #0]
						*outfbdiv = fbdiv;
10008064:	9803      	ldr	r0, [sp, #12]
10008066:	9904      	ldr	r1, [sp, #16]
						*outpd1 = pd1;
10008068:	9a01      	ldr	r2, [sp, #4]
						*outfbdiv = fbdiv;
1000806a:	8008      	strh	r0, [r1, #0]
						*outpd1 = pd1;
1000806c:	9910      	ldr	r1, [sp, #64]	; 0x40
1000806e:	700a      	strb	r2, [r1, #0]
						*outpd2 = pd2;
10008070:	9911      	ldr	r1, [sp, #68]	; 0x44
10008072:	700a      	strb	r2, [r1, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
10008074:	4643      	mov	r3, r8
10008076:	2b00      	cmp	r3, #0
10008078:	d000      	beq.n	1000807c <_Z12FindSysClockmPmS_PtPhS1_+0x214>
1000807a:	e726      	b.n	10007eca <_Z12FindSysClockmPmS_PtPhS1_+0x62>
1000807c:	9d03      	ldr	r5, [sp, #12]
			if (fbdiv < 16) break;
1000807e:	9b02      	ldr	r3, [sp, #8]
10008080:	9a05      	ldr	r2, [sp, #20]
			fbdiv--;
10008082:	3d01      	subs	r5, #1
			if (fbdiv < 16) break;
10008084:	1a9b      	subs	r3, r3, r2
			fbdiv--;
10008086:	b2ad      	uxth	r5, r5
			if (fbdiv < 16) break;
10008088:	9302      	str	r3, [sp, #8]
1000808a:	2d0f      	cmp	r5, #15
1000808c:	d000      	beq.n	10008090 <_Z12FindSysClockmPmS_PtPhS1_+0x228>
1000808e:	e70f      	b.n	10007eb0 <_Z12FindSysClockmPmS_PtPhS1_+0x48>
	return (*outkhz == reqkhz) && (*outvco == *outkhz * *outpd1 * *outpd2);
10008090:	4653      	mov	r3, sl
10008092:	46ca      	mov	sl, r9
10008094:	4699      	mov	r9, r3
10008096:	4653      	mov	r3, sl
10008098:	9a00      	ldr	r2, [sp, #0]
1000809a:	681b      	ldr	r3, [r3, #0]
1000809c:	2000      	movs	r0, #0
1000809e:	429a      	cmp	r2, r3
100080a0:	d10d      	bne.n	100080be <_Z12FindSysClockmPmS_PtPhS1_+0x256>
100080a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
100080a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
100080a6:	781b      	ldrb	r3, [r3, #0]
100080a8:	7810      	ldrb	r0, [r2, #0]
100080aa:	4358      	muls	r0, r3
100080ac:	9b00      	ldr	r3, [sp, #0]
100080ae:	4343      	muls	r3, r0
100080b0:	0018      	movs	r0, r3
100080b2:	464b      	mov	r3, r9
100080b4:	681b      	ldr	r3, [r3, #0]
100080b6:	1ac0      	subs	r0, r0, r3
100080b8:	4243      	negs	r3, r0
100080ba:	4158      	adcs	r0, r3
100080bc:	b2c0      	uxtb	r0, r0

	// find PLL setup
	return vcocalc(reqkhz, input, 400000, 1600000, false,  outkhz, outvco, outfbdiv, outpd1, outpd2);
}
100080be:	b007      	add	sp, #28
100080c0:	bcf0      	pop	{r4, r5, r6, r7}
100080c2:	46bb      	mov	fp, r7
100080c4:	46b2      	mov	sl, r6
100080c6:	46a9      	mov	r9, r5
100080c8:	46a0      	mov	r8, r4
100080ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
100080cc:	fff9e580 	.word	0xfff9e580
100080d0:	000186a0 	.word	0x000186a0
100080d4:	00061a80 	.word	0x00061a80
100080d8:	00124f80 	.word	0x00124f80

100080dc <_Z10PrintSetupPhiii>:
// use mono mode
Bool PrintMonoMode;

// setup print service (if bufwb < 2*bufw, use mono text)
void PrintSetup(u8* buf, int bufw, int bufh, int bufwb)
{
100080dc:	b510      	push	{r4, lr}
	PrintBuf = buf;
100080de:	4c0c      	ldr	r4, [pc, #48]	; (10008110 <_Z10PrintSetupPhiii+0x34>)
100080e0:	6020      	str	r0, [r4, #0]
	PrintBufW = bufw;
100080e2:	480c      	ldr	r0, [pc, #48]	; (10008114 <_Z10PrintSetupPhiii+0x38>)
100080e4:	6001      	str	r1, [r0, #0]
	PrintBufH = bufh;
100080e6:	480c      	ldr	r0, [pc, #48]	; (10008118 <_Z10PrintSetupPhiii+0x3c>)
	PrintBufWB = bufwb;
	PrintX = 0;
	PrintY = 0;
	PrintMonoMode = (bufwb < 2*bufw);
100080e8:	0049      	lsls	r1, r1, #1
	PrintBufH = bufh;
100080ea:	6002      	str	r2, [r0, #0]
	PrintBufWB = bufwb;
100080ec:	4a0b      	ldr	r2, [pc, #44]	; (1000811c <_Z10PrintSetupPhiii+0x40>)
	PrintX = 0;
100080ee:	480c      	ldr	r0, [pc, #48]	; (10008120 <_Z10PrintSetupPhiii+0x44>)
	PrintBufWB = bufwb;
100080f0:	6013      	str	r3, [r2, #0]
	PrintX = 0;
100080f2:	2200      	movs	r2, #0
100080f4:	6002      	str	r2, [r0, #0]
	PrintY = 0;
100080f6:	480b      	ldr	r0, [pc, #44]	; (10008124 <_Z10PrintSetupPhiii+0x48>)
100080f8:	6002      	str	r2, [r0, #0]
	PrintMonoMode = (bufwb < 2*bufw);
100080fa:	2201      	movs	r2, #1
100080fc:	4299      	cmp	r1, r3
100080fe:	dc00      	bgt.n	10008102 <_Z10PrintSetupPhiii+0x26>
10008100:	2200      	movs	r2, #0
10008102:	4b09      	ldr	r3, [pc, #36]	; (10008128 <_Z10PrintSetupPhiii+0x4c>)
10008104:	701a      	strb	r2, [r3, #0]
	PrintCol = PC_COLOR(PC_BLACK, PC_WHITE);
10008106:	220f      	movs	r2, #15
10008108:	4b08      	ldr	r3, [pc, #32]	; (1000812c <_Z10PrintSetupPhiii+0x50>)
1000810a:	701a      	strb	r2, [r3, #0]
}
1000810c:	bd10      	pop	{r4, pc}
1000810e:	46c0      	nop			; (mov r8, r8)
10008110:	200218c0 	.word	0x200218c0
10008114:	200218c8 	.word	0x200218c8
10008118:	200218c4 	.word	0x200218c4
1000811c:	200218cc 	.word	0x200218cc
10008120:	200218d0 	.word	0x200218d0
10008124:	200218d4 	.word	0x200218d4
10008128:	20023b83 	.word	0x20023b83
1000812c:	20023b82 	.word	0x20023b82

10008130 <_Z10PrintClearv>:

// clear text screen, using current color
void PrintClear()
{
10008130:	b5f0      	push	{r4, r5, r6, r7, lr}
10008132:	464f      	mov	r7, r9
10008134:	46d6      	mov	lr, sl
10008136:	4646      	mov	r6, r8
10008138:	b5c0      	push	{r6, r7, lr}
	int i, y;
	u8* d;
	u8 col = PrintCol;
1000813a:	4b1b      	ldr	r3, [pc, #108]	; (100081a8 <_Z10PrintClearv+0x78>)
	for (y = 0; y < PrintBufH; y++)
1000813c:	4f1b      	ldr	r7, [pc, #108]	; (100081ac <_Z10PrintClearv+0x7c>)
	u8 col = PrintCol;
1000813e:	781d      	ldrb	r5, [r3, #0]
	for (y = 0; y < PrintBufH; y++)
10008140:	683b      	ldr	r3, [r7, #0]
10008142:	2b00      	cmp	r3, #0
10008144:	dd25      	ble.n	10008192 <_Z10PrintClearv+0x62>
10008146:	4b1a      	ldr	r3, [pc, #104]	; (100081b0 <_Z10PrintClearv+0x80>)
10008148:	2600      	movs	r6, #0
1000814a:	4699      	mov	r9, r3
1000814c:	4b19      	ldr	r3, [pc, #100]	; (100081b4 <_Z10PrintClearv+0x84>)
	{
		d = &PrintBuf[y*PrintBufWB];
		for (i = PrintBufW; i > 0; i--)
		{
			*d++ = ' ';
1000814e:	2020      	movs	r0, #32
10008150:	4698      	mov	r8, r3
10008152:	4b19      	ldr	r3, [pc, #100]	; (100081b8 <_Z10PrintClearv+0x88>)
10008154:	4c19      	ldr	r4, [pc, #100]	; (100081bc <_Z10PrintClearv+0x8c>)
10008156:	469c      	mov	ip, r3
		d = &PrintBuf[y*PrintBufWB];
10008158:	464a      	mov	r2, r9
1000815a:	4643      	mov	r3, r8
1000815c:	6812      	ldr	r2, [r2, #0]
1000815e:	681b      	ldr	r3, [r3, #0]
10008160:	4692      	mov	sl, r2
		for (i = PrintBufW; i > 0; i--)
10008162:	4662      	mov	r2, ip
		d = &PrintBuf[y*PrintBufWB];
10008164:	4373      	muls	r3, r6
		for (i = PrintBufW; i > 0; i--)
10008166:	6812      	ldr	r2, [r2, #0]
		d = &PrintBuf[y*PrintBufWB];
10008168:	4453      	add	r3, sl
		for (i = PrintBufW; i > 0; i--)
1000816a:	2a00      	cmp	r2, #0
1000816c:	dc04      	bgt.n	10008178 <_Z10PrintClearv+0x48>
1000816e:	e010      	b.n	10008192 <_Z10PrintClearv+0x62>
10008170:	3a01      	subs	r2, #1
			*d++ = ' ';
10008172:	3301      	adds	r3, #1
		for (i = PrintBufW; i > 0; i--)
10008174:	2a00      	cmp	r2, #0
10008176:	d008      	beq.n	1000818a <_Z10PrintClearv+0x5a>
			*d++ = ' ';
10008178:	7018      	strb	r0, [r3, #0]
			if (!PrintMonoMode) *d++ = col;
1000817a:	7821      	ldrb	r1, [r4, #0]
1000817c:	2900      	cmp	r1, #0
1000817e:	d1f7      	bne.n	10008170 <_Z10PrintClearv+0x40>
		for (i = PrintBufW; i > 0; i--)
10008180:	3a01      	subs	r2, #1
			if (!PrintMonoMode) *d++ = col;
10008182:	705d      	strb	r5, [r3, #1]
10008184:	3302      	adds	r3, #2
		for (i = PrintBufW; i > 0; i--)
10008186:	2a00      	cmp	r2, #0
10008188:	d1f6      	bne.n	10008178 <_Z10PrintClearv+0x48>
	for (y = 0; y < PrintBufH; y++)
1000818a:	683b      	ldr	r3, [r7, #0]
1000818c:	3601      	adds	r6, #1
1000818e:	42b3      	cmp	r3, r6
10008190:	dce2      	bgt.n	10008158 <_Z10PrintClearv+0x28>
		}
	}
	PrintX = 0;
10008192:	2300      	movs	r3, #0
10008194:	4a0a      	ldr	r2, [pc, #40]	; (100081c0 <_Z10PrintClearv+0x90>)
10008196:	6013      	str	r3, [r2, #0]
	PrintY = 0;
10008198:	4a0a      	ldr	r2, [pc, #40]	; (100081c4 <_Z10PrintClearv+0x94>)
1000819a:	6013      	str	r3, [r2, #0]
}
1000819c:	bce0      	pop	{r5, r6, r7}
1000819e:	46ba      	mov	sl, r7
100081a0:	46b1      	mov	r9, r6
100081a2:	46a8      	mov	r8, r5
100081a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100081a6:	46c0      	nop			; (mov r8, r8)
100081a8:	20023b82 	.word	0x20023b82
100081ac:	200218c4 	.word	0x200218c4
100081b0:	200218c0 	.word	0x200218c0
100081b4:	200218cc 	.word	0x200218cc
100081b8:	200218c8 	.word	0x200218c8
100081bc:	20023b83 	.word	0x20023b83
100081c0:	200218d0 	.word	0x200218d0
100081c4:	200218d4 	.word	0x200218d4

100081c8 <_Z11PrintSetPosii>:
}

// set absolute print position
void PrintSetPos(int x, int y)
{
	PrintX = x;
100081c8:	4b02      	ldr	r3, [pc, #8]	; (100081d4 <_Z11PrintSetPosii+0xc>)
100081ca:	6018      	str	r0, [r3, #0]
	PrintY = y;
100081cc:	4b02      	ldr	r3, [pc, #8]	; (100081d8 <_Z11PrintSetPosii+0x10>)
100081ce:	6019      	str	r1, [r3, #0]
}
100081d0:	4770      	bx	lr
100081d2:	46c0      	nop			; (mov r8, r8)
100081d4:	200218d0 	.word	0x200218d0
100081d8:	200218d4 	.word	0x200218d4

100081dc <_Z11PrintSetColh>:
}

// set print color (2x4 bits of colors, use PC_COLOR macro)
void PrintSetCol(u8 col)
{
	PrintCol = col;
100081dc:	4b01      	ldr	r3, [pc, #4]	; (100081e4 <_Z11PrintSetColh+0x8>)
100081de:	7018      	strb	r0, [r3, #0]
}
100081e0:	4770      	bx	lr
100081e2:	46c0      	nop			; (mov r8, r8)
100081e4:	20023b82 	.word	0x20023b82

100081e8 <_Z9PrintTextPKc>:
	for (; num > 0; num--) PrintSpc();
}

// print text
void PrintText(const char* text)
{
100081e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100081ea:	46de      	mov	lr, fp
100081ec:	4657      	mov	r7, sl
100081ee:	464e      	mov	r6, r9
100081f0:	4645      	mov	r5, r8
100081f2:	b5e0      	push	{r5, r6, r7, lr}
	char ch;
	while ((ch = *text++) != 0)
100081f4:	7803      	ldrb	r3, [r0, #0]
100081f6:	1c42      	adds	r2, r0, #1
100081f8:	2b00      	cmp	r3, #0
100081fa:	d020      	beq.n	1000823e <_Z9PrintTextPKc+0x56>
		if (PrintMonoMode)
100081fc:	4e2e      	ldr	r6, [pc, #184]	; (100082b8 <_Z9PrintTextPKc+0xd0>)
100081fe:	492f      	ldr	r1, [pc, #188]	; (100082bc <_Z9PrintTextPKc+0xd4>)
10008200:	46b1      	mov	r9, r6
			u8* d = &PrintBuf[PrintX*2 + PrintY*PrintBufWB];
10008202:	4e2f      	ldr	r6, [pc, #188]	; (100082c0 <_Z9PrintTextPKc+0xd8>)
	if (((u32)PrintX < (u32)PrintBufW) && ((u32)PrintY < (u32)PrintBufH))
10008204:	482f      	ldr	r0, [pc, #188]	; (100082c4 <_Z9PrintTextPKc+0xdc>)
			u8* d = &PrintBuf[PrintX*2 + PrintY*PrintBufWB];
10008206:	46b0      	mov	r8, r6
			*d = PrintCol;
10008208:	4e2f      	ldr	r6, [pc, #188]	; (100082c8 <_Z9PrintTextPKc+0xe0>)
	if (((u32)PrintX < (u32)PrintBufW) && ((u32)PrintY < (u32)PrintBufH))
1000820a:	4d30      	ldr	r5, [pc, #192]	; (100082cc <_Z9PrintTextPKc+0xe4>)
			*d = PrintCol;
1000820c:	46b4      	mov	ip, r6
1000820e:	e00d      	b.n	1000822c <_Z9PrintTextPKc+0x44>
	else if (ch == CHAR_LF)
10008210:	2b0a      	cmp	r3, #10
10008212:	d01a      	beq.n	1000824a <_Z9PrintTextPKc+0x62>
	else if (ch == CHAR_TAB)
10008214:	2b09      	cmp	r3, #9
10008216:	d11f      	bne.n	10008258 <_Z9PrintTextPKc+0x70>
		PrintX = (PrintX + 7) & ~7;
10008218:	2607      	movs	r6, #7
1000821a:	680b      	ldr	r3, [r1, #0]
1000821c:	3307      	adds	r3, #7
1000821e:	43b3      	bics	r3, r6
10008220:	600b      	str	r3, [r1, #0]
	while ((ch = *text++) != 0)
10008222:	3201      	adds	r2, #1
10008224:	1e53      	subs	r3, r2, #1
10008226:	781b      	ldrb	r3, [r3, #0]
10008228:	2b00      	cmp	r3, #0
1000822a:	d008      	beq.n	1000823e <_Z9PrintTextPKc+0x56>
	if (ch == CHAR_CR)
1000822c:	2b0d      	cmp	r3, #13
1000822e:	d1ef      	bne.n	10008210 <_Z9PrintTextPKc+0x28>
		PrintX = 0;
10008230:	2300      	movs	r3, #0
	while ((ch = *text++) != 0)
10008232:	3201      	adds	r2, #1
		PrintX = 0;
10008234:	600b      	str	r3, [r1, #0]
	while ((ch = *text++) != 0)
10008236:	1e53      	subs	r3, r2, #1
10008238:	781b      	ldrb	r3, [r3, #0]
1000823a:	2b00      	cmp	r3, #0
1000823c:	d1f6      	bne.n	1000822c <_Z9PrintTextPKc+0x44>
	{
		PrintChar(ch);
	}
}
1000823e:	bcf0      	pop	{r4, r5, r6, r7}
10008240:	46bb      	mov	fp, r7
10008242:	46b2      	mov	sl, r6
10008244:	46a9      	mov	r9, r5
10008246:	46a0      	mov	r8, r4
10008248:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PrintX = 0;
1000824a:	2300      	movs	r3, #0
		PrintY++;
1000824c:	4e1f      	ldr	r6, [pc, #124]	; (100082cc <_Z9PrintTextPKc+0xe4>)
		PrintX = 0;
1000824e:	600b      	str	r3, [r1, #0]
		PrintY++;
10008250:	6833      	ldr	r3, [r6, #0]
10008252:	3301      	adds	r3, #1
10008254:	6033      	str	r3, [r6, #0]
10008256:	e7e4      	b.n	10008222 <_Z9PrintTextPKc+0x3a>
	if (((u32)PrintX < (u32)PrintBufW) && ((u32)PrintY < (u32)PrintBufH))
10008258:	680e      	ldr	r6, [r1, #0]
1000825a:	6807      	ldr	r7, [r0, #0]
1000825c:	42be      	cmp	r6, r7
1000825e:	d215      	bcs.n	1000828c <_Z9PrintTextPKc+0xa4>
10008260:	682f      	ldr	r7, [r5, #0]
10008262:	4c1b      	ldr	r4, [pc, #108]	; (100082d0 <_Z9PrintTextPKc+0xe8>)
10008264:	46ba      	mov	sl, r7
10008266:	6827      	ldr	r7, [r4, #0]
10008268:	45ba      	cmp	sl, r7
1000826a:	d20f      	bcs.n	1000828c <_Z9PrintTextPKc+0xa4>
		if (PrintMonoMode)
1000826c:	464f      	mov	r7, r9
1000826e:	783f      	ldrb	r7, [r7, #0]
10008270:	2f00      	cmp	r7, #0
10008272:	d00e      	beq.n	10008292 <_Z9PrintTextPKc+0xaa>
			u8* d = &PrintBuf[PrintX + PrintY*PrintBufWB];
10008274:	4f12      	ldr	r7, [pc, #72]	; (100082c0 <_Z9PrintTextPKc+0xd8>)
10008276:	683f      	ldr	r7, [r7, #0]
10008278:	46bb      	mov	fp, r7
1000827a:	4657      	mov	r7, sl
1000827c:	465c      	mov	r4, fp
1000827e:	4367      	muls	r7, r4
			*d = ch;
10008280:	4c14      	ldr	r4, [pc, #80]	; (100082d4 <_Z9PrintTextPKc+0xec>)
10008282:	6824      	ldr	r4, [r4, #0]
10008284:	46a3      	mov	fp, r4
10008286:	445e      	add	r6, fp
10008288:	55f3      	strb	r3, [r6, r7]
	PrintX++;
1000828a:	680e      	ldr	r6, [r1, #0]
1000828c:	1c73      	adds	r3, r6, #1
1000828e:	600b      	str	r3, [r1, #0]
}
10008290:	e7c7      	b.n	10008222 <_Z9PrintTextPKc+0x3a>
			u8* d = &PrintBuf[PrintX*2 + PrintY*PrintBufWB];
10008292:	4644      	mov	r4, r8
10008294:	4657      	mov	r7, sl
10008296:	6824      	ldr	r4, [r4, #0]
10008298:	0076      	lsls	r6, r6, #1
1000829a:	4367      	muls	r7, r4
1000829c:	46ba      	mov	sl, r7
1000829e:	4c0d      	ldr	r4, [pc, #52]	; (100082d4 <_Z9PrintTextPKc+0xec>)
100082a0:	4456      	add	r6, sl
100082a2:	6824      	ldr	r4, [r4, #0]
100082a4:	46a2      	mov	sl, r4
100082a6:	4456      	add	r6, sl
			*d++ = ch;
100082a8:	7033      	strb	r3, [r6, #0]
			*d = PrintCol;
100082aa:	4663      	mov	r3, ip
100082ac:	781b      	ldrb	r3, [r3, #0]
100082ae:	7073      	strb	r3, [r6, #1]
	PrintX++;
100082b0:	680e      	ldr	r6, [r1, #0]
100082b2:	1c73      	adds	r3, r6, #1
100082b4:	600b      	str	r3, [r1, #0]
100082b6:	e7b4      	b.n	10008222 <_Z9PrintTextPKc+0x3a>
100082b8:	20023b83 	.word	0x20023b83
100082bc:	200218d0 	.word	0x200218d0
100082c0:	200218cc 	.word	0x200218cc
100082c4:	200218c8 	.word	0x200218c8
100082c8:	20023b82 	.word	0x20023b82
100082cc:	200218d4 	.word	0x200218d4
100082d0:	200218c4 	.word	0x200218c4
100082d4:	200218c0 	.word	0x200218c0

100082d8 <calloc>:
100082d8:	0003      	movs	r3, r0
100082da:	b510      	push	{r4, lr}
100082dc:	000a      	movs	r2, r1
100082de:	4903      	ldr	r1, [pc, #12]	; (100082ec <calloc+0x14>)
100082e0:	6808      	ldr	r0, [r1, #0]
100082e2:	0019      	movs	r1, r3
100082e4:	f000 f804 	bl	100082f0 <_calloc_r>
100082e8:	bd10      	pop	{r4, pc}
100082ea:	46c0      	nop			; (mov r8, r8)
100082ec:	200027e8 	.word	0x200027e8

100082f0 <_calloc_r>:
100082f0:	b570      	push	{r4, r5, r6, lr}
100082f2:	0c0b      	lsrs	r3, r1, #16
100082f4:	2400      	movs	r4, #0
100082f6:	0c15      	lsrs	r5, r2, #16
100082f8:	2b00      	cmp	r3, #0
100082fa:	d128      	bne.n	1000834e <_calloc_r+0x5e>
100082fc:	2d00      	cmp	r5, #0
100082fe:	d137      	bne.n	10008370 <_calloc_r+0x80>
10008300:	b28b      	uxth	r3, r1
10008302:	b291      	uxth	r1, r2
10008304:	4359      	muls	r1, r3
10008306:	f000 f851 	bl	100083ac <_malloc_r>
1000830a:	1e05      	subs	r5, r0, #0
1000830c:	d019      	beq.n	10008342 <_calloc_r+0x52>
1000830e:	0003      	movs	r3, r0
10008310:	3b08      	subs	r3, #8
10008312:	685a      	ldr	r2, [r3, #4]
10008314:	2303      	movs	r3, #3
10008316:	439a      	bics	r2, r3
10008318:	3a04      	subs	r2, #4
1000831a:	2a24      	cmp	r2, #36	; 0x24
1000831c:	d813      	bhi.n	10008346 <_calloc_r+0x56>
1000831e:	0003      	movs	r3, r0
10008320:	2a13      	cmp	r2, #19
10008322:	d90a      	bls.n	1000833a <_calloc_r+0x4a>
10008324:	6004      	str	r4, [r0, #0]
10008326:	6044      	str	r4, [r0, #4]
10008328:	3308      	adds	r3, #8
1000832a:	2a1b      	cmp	r2, #27
1000832c:	d905      	bls.n	1000833a <_calloc_r+0x4a>
1000832e:	6084      	str	r4, [r0, #8]
10008330:	60c4      	str	r4, [r0, #12]
10008332:	2a24      	cmp	r2, #36	; 0x24
10008334:	d025      	beq.n	10008382 <_calloc_r+0x92>
10008336:	0003      	movs	r3, r0
10008338:	3310      	adds	r3, #16
1000833a:	2200      	movs	r2, #0
1000833c:	601a      	str	r2, [r3, #0]
1000833e:	605a      	str	r2, [r3, #4]
10008340:	609a      	str	r2, [r3, #8]
10008342:	0028      	movs	r0, r5
10008344:	bd70      	pop	{r4, r5, r6, pc}
10008346:	2100      	movs	r1, #0
10008348:	f7f8 fecc 	bl	100010e4 <__wrap_memset>
1000834c:	e7f9      	b.n	10008342 <_calloc_r+0x52>
1000834e:	2d00      	cmp	r5, #0
10008350:	d111      	bne.n	10008376 <_calloc_r+0x86>
10008352:	1c15      	adds	r5, r2, #0
10008354:	b289      	uxth	r1, r1
10008356:	b292      	uxth	r2, r2
10008358:	434a      	muls	r2, r1
1000835a:	b2ad      	uxth	r5, r5
1000835c:	b29b      	uxth	r3, r3
1000835e:	436b      	muls	r3, r5
10008360:	0c11      	lsrs	r1, r2, #16
10008362:	185b      	adds	r3, r3, r1
10008364:	0c19      	lsrs	r1, r3, #16
10008366:	d106      	bne.n	10008376 <_calloc_r+0x86>
10008368:	0419      	lsls	r1, r3, #16
1000836a:	b292      	uxth	r2, r2
1000836c:	4311      	orrs	r1, r2
1000836e:	e7ca      	b.n	10008306 <_calloc_r+0x16>
10008370:	1c2b      	adds	r3, r5, #0
10008372:	1c0d      	adds	r5, r1, #0
10008374:	e7ee      	b.n	10008354 <_calloc_r+0x64>
10008376:	f000 f809 	bl	1000838c <__errno>
1000837a:	230c      	movs	r3, #12
1000837c:	2500      	movs	r5, #0
1000837e:	6003      	str	r3, [r0, #0]
10008380:	e7df      	b.n	10008342 <_calloc_r+0x52>
10008382:	0003      	movs	r3, r0
10008384:	6104      	str	r4, [r0, #16]
10008386:	3318      	adds	r3, #24
10008388:	6144      	str	r4, [r0, #20]
1000838a:	e7d6      	b.n	1000833a <_calloc_r+0x4a>

1000838c <__errno>:
1000838c:	4b01      	ldr	r3, [pc, #4]	; (10008394 <__errno+0x8>)
1000838e:	6818      	ldr	r0, [r3, #0]
10008390:	4770      	bx	lr
10008392:	46c0      	nop			; (mov r8, r8)
10008394:	200027e8 	.word	0x200027e8

10008398 <malloc>:
10008398:	b510      	push	{r4, lr}
1000839a:	4b03      	ldr	r3, [pc, #12]	; (100083a8 <malloc+0x10>)
1000839c:	0001      	movs	r1, r0
1000839e:	6818      	ldr	r0, [r3, #0]
100083a0:	f000 f804 	bl	100083ac <_malloc_r>
100083a4:	bd10      	pop	{r4, pc}
100083a6:	46c0      	nop			; (mov r8, r8)
100083a8:	200027e8 	.word	0x200027e8

100083ac <_malloc_r>:
100083ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100083ae:	464e      	mov	r6, r9
100083b0:	4645      	mov	r5, r8
100083b2:	46de      	mov	lr, fp
100083b4:	4657      	mov	r7, sl
100083b6:	b5e0      	push	{r5, r6, r7, lr}
100083b8:	000d      	movs	r5, r1
100083ba:	350b      	adds	r5, #11
100083bc:	0006      	movs	r6, r0
100083be:	b083      	sub	sp, #12
100083c0:	2d16      	cmp	r5, #22
100083c2:	d822      	bhi.n	1000840a <_malloc_r+0x5e>
100083c4:	2910      	cmp	r1, #16
100083c6:	d900      	bls.n	100083ca <_malloc_r+0x1e>
100083c8:	e0b2      	b.n	10008530 <_malloc_r+0x184>
100083ca:	f000 fab1 	bl	10008930 <__malloc_lock>
100083ce:	2510      	movs	r5, #16
100083d0:	2318      	movs	r3, #24
100083d2:	2002      	movs	r0, #2
100083d4:	4fcc      	ldr	r7, [pc, #816]	; (10008708 <_malloc_r+0x35c>)
100083d6:	18fb      	adds	r3, r7, r3
100083d8:	001a      	movs	r2, r3
100083da:	685c      	ldr	r4, [r3, #4]
100083dc:	3a08      	subs	r2, #8
100083de:	4294      	cmp	r4, r2
100083e0:	d100      	bne.n	100083e4 <_malloc_r+0x38>
100083e2:	e0b5      	b.n	10008550 <_malloc_r+0x1a4>
100083e4:	2303      	movs	r3, #3
100083e6:	6862      	ldr	r2, [r4, #4]
100083e8:	439a      	bics	r2, r3
100083ea:	0013      	movs	r3, r2
100083ec:	68e2      	ldr	r2, [r4, #12]
100083ee:	68a1      	ldr	r1, [r4, #8]
100083f0:	60ca      	str	r2, [r1, #12]
100083f2:	6091      	str	r1, [r2, #8]
100083f4:	2201      	movs	r2, #1
100083f6:	18e3      	adds	r3, r4, r3
100083f8:	6859      	ldr	r1, [r3, #4]
100083fa:	0030      	movs	r0, r6
100083fc:	430a      	orrs	r2, r1
100083fe:	605a      	str	r2, [r3, #4]
10008400:	f000 fa9e 	bl	10008940 <__malloc_unlock>
10008404:	0020      	movs	r0, r4
10008406:	3008      	adds	r0, #8
10008408:	e095      	b.n	10008536 <_malloc_r+0x18a>
1000840a:	2307      	movs	r3, #7
1000840c:	439d      	bics	r5, r3
1000840e:	d500      	bpl.n	10008412 <_malloc_r+0x66>
10008410:	e08e      	b.n	10008530 <_malloc_r+0x184>
10008412:	42a9      	cmp	r1, r5
10008414:	d900      	bls.n	10008418 <_malloc_r+0x6c>
10008416:	e08b      	b.n	10008530 <_malloc_r+0x184>
10008418:	f000 fa8a 	bl	10008930 <__malloc_lock>
1000841c:	23fc      	movs	r3, #252	; 0xfc
1000841e:	005b      	lsls	r3, r3, #1
10008420:	429d      	cmp	r5, r3
10008422:	d200      	bcs.n	10008426 <_malloc_r+0x7a>
10008424:	e1a7      	b.n	10008776 <_malloc_r+0x3ca>
10008426:	0a68      	lsrs	r0, r5, #9
10008428:	d100      	bne.n	1000842c <_malloc_r+0x80>
1000842a:	e08b      	b.n	10008544 <_malloc_r+0x198>
1000842c:	2804      	cmp	r0, #4
1000842e:	d900      	bls.n	10008432 <_malloc_r+0x86>
10008430:	e17a      	b.n	10008728 <_malloc_r+0x37c>
10008432:	2338      	movs	r3, #56	; 0x38
10008434:	4698      	mov	r8, r3
10008436:	09a8      	lsrs	r0, r5, #6
10008438:	4480      	add	r8, r0
1000843a:	3039      	adds	r0, #57	; 0x39
1000843c:	00c1      	lsls	r1, r0, #3
1000843e:	4fb2      	ldr	r7, [pc, #712]	; (10008708 <_malloc_r+0x35c>)
10008440:	1879      	adds	r1, r7, r1
10008442:	684c      	ldr	r4, [r1, #4]
10008444:	3908      	subs	r1, #8
10008446:	42a1      	cmp	r1, r4
10008448:	d00e      	beq.n	10008468 <_malloc_r+0xbc>
1000844a:	2303      	movs	r3, #3
1000844c:	469c      	mov	ip, r3
1000844e:	e004      	b.n	1000845a <_malloc_r+0xae>
10008450:	2a00      	cmp	r2, #0
10008452:	dacb      	bge.n	100083ec <_malloc_r+0x40>
10008454:	68e4      	ldr	r4, [r4, #12]
10008456:	42a1      	cmp	r1, r4
10008458:	d006      	beq.n	10008468 <_malloc_r+0xbc>
1000845a:	4662      	mov	r2, ip
1000845c:	6863      	ldr	r3, [r4, #4]
1000845e:	4393      	bics	r3, r2
10008460:	1b5a      	subs	r2, r3, r5
10008462:	2a0f      	cmp	r2, #15
10008464:	ddf4      	ble.n	10008450 <_malloc_r+0xa4>
10008466:	4640      	mov	r0, r8
10008468:	003a      	movs	r2, r7
1000846a:	693c      	ldr	r4, [r7, #16]
1000846c:	3208      	adds	r2, #8
1000846e:	4294      	cmp	r4, r2
10008470:	d100      	bne.n	10008474 <_malloc_r+0xc8>
10008472:	e078      	b.n	10008566 <_malloc_r+0x1ba>
10008474:	2303      	movs	r3, #3
10008476:	6861      	ldr	r1, [r4, #4]
10008478:	4399      	bics	r1, r3
1000847a:	4689      	mov	r9, r1
1000847c:	000b      	movs	r3, r1
1000847e:	1b49      	subs	r1, r1, r5
10008480:	290f      	cmp	r1, #15
10008482:	dd00      	ble.n	10008486 <_malloc_r+0xda>
10008484:	e17b      	b.n	1000877e <_malloc_r+0x3d2>
10008486:	617a      	str	r2, [r7, #20]
10008488:	613a      	str	r2, [r7, #16]
1000848a:	2900      	cmp	r1, #0
1000848c:	dab2      	bge.n	100083f4 <_malloc_r+0x48>
1000848e:	2280      	movs	r2, #128	; 0x80
10008490:	0092      	lsls	r2, r2, #2
10008492:	4591      	cmp	r9, r2
10008494:	d300      	bcc.n	10008498 <_malloc_r+0xec>
10008496:	e10f      	b.n	100086b8 <_malloc_r+0x30c>
10008498:	0959      	lsrs	r1, r3, #5
1000849a:	08da      	lsrs	r2, r3, #3
1000849c:	2301      	movs	r3, #1
1000849e:	408b      	lsls	r3, r1
100084a0:	00d2      	lsls	r2, r2, #3
100084a2:	6879      	ldr	r1, [r7, #4]
100084a4:	19d2      	adds	r2, r2, r7
100084a6:	430b      	orrs	r3, r1
100084a8:	6891      	ldr	r1, [r2, #8]
100084aa:	607b      	str	r3, [r7, #4]
100084ac:	60e2      	str	r2, [r4, #12]
100084ae:	60a1      	str	r1, [r4, #8]
100084b0:	6094      	str	r4, [r2, #8]
100084b2:	60cc      	str	r4, [r1, #12]
100084b4:	2101      	movs	r1, #1
100084b6:	1082      	asrs	r2, r0, #2
100084b8:	4091      	lsls	r1, r2
100084ba:	4299      	cmp	r1, r3
100084bc:	d859      	bhi.n	10008572 <_malloc_r+0x1c6>
100084be:	420b      	tst	r3, r1
100084c0:	d105      	bne.n	100084ce <_malloc_r+0x122>
100084c2:	2203      	movs	r2, #3
100084c4:	4390      	bics	r0, r2
100084c6:	0049      	lsls	r1, r1, #1
100084c8:	3004      	adds	r0, #4
100084ca:	420b      	tst	r3, r1
100084cc:	d0fb      	beq.n	100084c6 <_malloc_r+0x11a>
100084ce:	2303      	movs	r3, #3
100084d0:	4698      	mov	r8, r3
100084d2:	00c3      	lsls	r3, r0, #3
100084d4:	4699      	mov	r9, r3
100084d6:	44b9      	add	r9, r7
100084d8:	46cc      	mov	ip, r9
100084da:	4682      	mov	sl, r0
100084dc:	4663      	mov	r3, ip
100084de:	68dc      	ldr	r4, [r3, #12]
100084e0:	45a4      	cmp	ip, r4
100084e2:	d107      	bne.n	100084f4 <_malloc_r+0x148>
100084e4:	e12c      	b.n	10008740 <_malloc_r+0x394>
100084e6:	2a00      	cmp	r2, #0
100084e8:	db00      	blt.n	100084ec <_malloc_r+0x140>
100084ea:	e135      	b.n	10008758 <_malloc_r+0x3ac>
100084ec:	68e4      	ldr	r4, [r4, #12]
100084ee:	45a4      	cmp	ip, r4
100084f0:	d100      	bne.n	100084f4 <_malloc_r+0x148>
100084f2:	e125      	b.n	10008740 <_malloc_r+0x394>
100084f4:	4642      	mov	r2, r8
100084f6:	6863      	ldr	r3, [r4, #4]
100084f8:	4393      	bics	r3, r2
100084fa:	1b5a      	subs	r2, r3, r5
100084fc:	2a0f      	cmp	r2, #15
100084fe:	ddf2      	ble.n	100084e6 <_malloc_r+0x13a>
10008500:	2001      	movs	r0, #1
10008502:	4680      	mov	r8, r0
10008504:	1961      	adds	r1, r4, r5
10008506:	4305      	orrs	r5, r0
10008508:	6065      	str	r5, [r4, #4]
1000850a:	68a0      	ldr	r0, [r4, #8]
1000850c:	68e5      	ldr	r5, [r4, #12]
1000850e:	3708      	adds	r7, #8
10008510:	60c5      	str	r5, [r0, #12]
10008512:	60a8      	str	r0, [r5, #8]
10008514:	4640      	mov	r0, r8
10008516:	4310      	orrs	r0, r2
10008518:	60f9      	str	r1, [r7, #12]
1000851a:	60b9      	str	r1, [r7, #8]
1000851c:	6048      	str	r0, [r1, #4]
1000851e:	60cf      	str	r7, [r1, #12]
10008520:	0030      	movs	r0, r6
10008522:	608f      	str	r7, [r1, #8]
10008524:	50e2      	str	r2, [r4, r3]
10008526:	f000 fa0b 	bl	10008940 <__malloc_unlock>
1000852a:	0020      	movs	r0, r4
1000852c:	3008      	adds	r0, #8
1000852e:	e002      	b.n	10008536 <_malloc_r+0x18a>
10008530:	230c      	movs	r3, #12
10008532:	2000      	movs	r0, #0
10008534:	6033      	str	r3, [r6, #0]
10008536:	b003      	add	sp, #12
10008538:	bcf0      	pop	{r4, r5, r6, r7}
1000853a:	46bb      	mov	fp, r7
1000853c:	46b2      	mov	sl, r6
1000853e:	46a9      	mov	r9, r5
10008540:	46a0      	mov	r8, r4
10008542:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008544:	2180      	movs	r1, #128	; 0x80
10008546:	233f      	movs	r3, #63	; 0x3f
10008548:	2040      	movs	r0, #64	; 0x40
1000854a:	4698      	mov	r8, r3
1000854c:	0089      	lsls	r1, r1, #2
1000854e:	e776      	b.n	1000843e <_malloc_r+0x92>
10008550:	68dc      	ldr	r4, [r3, #12]
10008552:	3002      	adds	r0, #2
10008554:	42a3      	cmp	r3, r4
10008556:	d000      	beq.n	1000855a <_malloc_r+0x1ae>
10008558:	e744      	b.n	100083e4 <_malloc_r+0x38>
1000855a:	003a      	movs	r2, r7
1000855c:	693c      	ldr	r4, [r7, #16]
1000855e:	3208      	adds	r2, #8
10008560:	4294      	cmp	r4, r2
10008562:	d000      	beq.n	10008566 <_malloc_r+0x1ba>
10008564:	e786      	b.n	10008474 <_malloc_r+0xc8>
10008566:	2101      	movs	r1, #1
10008568:	687b      	ldr	r3, [r7, #4]
1000856a:	1082      	asrs	r2, r0, #2
1000856c:	4091      	lsls	r1, r2
1000856e:	4299      	cmp	r1, r3
10008570:	d9a5      	bls.n	100084be <_malloc_r+0x112>
10008572:	2303      	movs	r3, #3
10008574:	68bc      	ldr	r4, [r7, #8]
10008576:	6862      	ldr	r2, [r4, #4]
10008578:	439a      	bics	r2, r3
1000857a:	4691      	mov	r9, r2
1000857c:	4295      	cmp	r5, r2
1000857e:	d803      	bhi.n	10008588 <_malloc_r+0x1dc>
10008580:	1b53      	subs	r3, r2, r5
10008582:	2b0f      	cmp	r3, #15
10008584:	dd00      	ble.n	10008588 <_malloc_r+0x1dc>
10008586:	e089      	b.n	1000869c <_malloc_r+0x2f0>
10008588:	0023      	movs	r3, r4
1000858a:	444b      	add	r3, r9
1000858c:	4a5f      	ldr	r2, [pc, #380]	; (1000870c <_malloc_r+0x360>)
1000858e:	9301      	str	r3, [sp, #4]
10008590:	4b5f      	ldr	r3, [pc, #380]	; (10008710 <_malloc_r+0x364>)
10008592:	4693      	mov	fp, r2
10008594:	681b      	ldr	r3, [r3, #0]
10008596:	6812      	ldr	r2, [r2, #0]
10008598:	18eb      	adds	r3, r5, r3
1000859a:	3201      	adds	r2, #1
1000859c:	d100      	bne.n	100085a0 <_malloc_r+0x1f4>
1000859e:	e13d      	b.n	1000881c <_malloc_r+0x470>
100085a0:	4a5c      	ldr	r2, [pc, #368]	; (10008714 <_malloc_r+0x368>)
100085a2:	4694      	mov	ip, r2
100085a4:	4463      	add	r3, ip
100085a6:	0b1b      	lsrs	r3, r3, #12
100085a8:	031b      	lsls	r3, r3, #12
100085aa:	9300      	str	r3, [sp, #0]
100085ac:	0030      	movs	r0, r6
100085ae:	9900      	ldr	r1, [sp, #0]
100085b0:	f000 f9ce 	bl	10008950 <_sbrk_r>
100085b4:	0003      	movs	r3, r0
100085b6:	4680      	mov	r8, r0
100085b8:	3301      	adds	r3, #1
100085ba:	d100      	bne.n	100085be <_malloc_r+0x212>
100085bc:	e0fa      	b.n	100087b4 <_malloc_r+0x408>
100085be:	9b01      	ldr	r3, [sp, #4]
100085c0:	4283      	cmp	r3, r0
100085c2:	d900      	bls.n	100085c6 <_malloc_r+0x21a>
100085c4:	e0f4      	b.n	100087b0 <_malloc_r+0x404>
100085c6:	4b54      	ldr	r3, [pc, #336]	; (10008718 <_malloc_r+0x36c>)
100085c8:	9800      	ldr	r0, [sp, #0]
100085ca:	001a      	movs	r2, r3
100085cc:	469a      	mov	sl, r3
100085ce:	6812      	ldr	r2, [r2, #0]
100085d0:	0003      	movs	r3, r0
100085d2:	4694      	mov	ip, r2
100085d4:	4651      	mov	r1, sl
100085d6:	4463      	add	r3, ip
100085d8:	600b      	str	r3, [r1, #0]
100085da:	9901      	ldr	r1, [sp, #4]
100085dc:	001a      	movs	r2, r3
100085de:	4541      	cmp	r1, r8
100085e0:	d100      	bne.n	100085e4 <_malloc_r+0x238>
100085e2:	e151      	b.n	10008888 <_malloc_r+0x4dc>
100085e4:	465b      	mov	r3, fp
100085e6:	681b      	ldr	r3, [r3, #0]
100085e8:	3301      	adds	r3, #1
100085ea:	d100      	bne.n	100085ee <_malloc_r+0x242>
100085ec:	e156      	b.n	1000889c <_malloc_r+0x4f0>
100085ee:	4643      	mov	r3, r8
100085f0:	9901      	ldr	r1, [sp, #4]
100085f2:	1a5b      	subs	r3, r3, r1
100085f4:	189a      	adds	r2, r3, r2
100085f6:	4653      	mov	r3, sl
100085f8:	601a      	str	r2, [r3, #0]
100085fa:	2307      	movs	r3, #7
100085fc:	4642      	mov	r2, r8
100085fe:	4641      	mov	r1, r8
10008600:	401a      	ands	r2, r3
10008602:	9201      	str	r2, [sp, #4]
10008604:	4219      	tst	r1, r3
10008606:	d100      	bne.n	1000860a <_malloc_r+0x25e>
10008608:	e112      	b.n	10008830 <_malloc_r+0x484>
1000860a:	2308      	movs	r3, #8
1000860c:	4698      	mov	r8, r3
1000860e:	1a88      	subs	r0, r1, r2
10008610:	4b42      	ldr	r3, [pc, #264]	; (1000871c <_malloc_r+0x370>)
10008612:	9900      	ldr	r1, [sp, #0]
10008614:	4480      	add	r8, r0
10008616:	4441      	add	r1, r8
10008618:	1a9b      	subs	r3, r3, r2
1000861a:	1a5b      	subs	r3, r3, r1
1000861c:	051b      	lsls	r3, r3, #20
1000861e:	0d1b      	lsrs	r3, r3, #20
10008620:	9100      	str	r1, [sp, #0]
10008622:	0030      	movs	r0, r6
10008624:	0019      	movs	r1, r3
10008626:	469b      	mov	fp, r3
10008628:	f000 f992 	bl	10008950 <_sbrk_r>
1000862c:	1c43      	adds	r3, r0, #1
1000862e:	d100      	bne.n	10008632 <_malloc_r+0x286>
10008630:	e150      	b.n	100088d4 <_malloc_r+0x528>
10008632:	4643      	mov	r3, r8
10008634:	1ac0      	subs	r0, r0, r3
10008636:	0003      	movs	r3, r0
10008638:	445b      	add	r3, fp
1000863a:	9300      	str	r3, [sp, #0]
1000863c:	4653      	mov	r3, sl
1000863e:	4652      	mov	r2, sl
10008640:	681b      	ldr	r3, [r3, #0]
10008642:	2101      	movs	r1, #1
10008644:	445b      	add	r3, fp
10008646:	6013      	str	r3, [r2, #0]
10008648:	4642      	mov	r2, r8
1000864a:	4640      	mov	r0, r8
1000864c:	60ba      	str	r2, [r7, #8]
1000864e:	9a00      	ldr	r2, [sp, #0]
10008650:	430a      	orrs	r2, r1
10008652:	6042      	str	r2, [r0, #4]
10008654:	42bc      	cmp	r4, r7
10008656:	d100      	bne.n	1000865a <_malloc_r+0x2ae>
10008658:	e124      	b.n	100088a4 <_malloc_r+0x4f8>
1000865a:	464a      	mov	r2, r9
1000865c:	2a0f      	cmp	r2, #15
1000865e:	d800      	bhi.n	10008662 <_malloc_r+0x2b6>
10008660:	e122      	b.n	100088a8 <_malloc_r+0x4fc>
10008662:	2007      	movs	r0, #7
10008664:	3a0c      	subs	r2, #12
10008666:	4382      	bics	r2, r0
10008668:	6860      	ldr	r0, [r4, #4]
1000866a:	4001      	ands	r1, r0
1000866c:	2005      	movs	r0, #5
1000866e:	4311      	orrs	r1, r2
10008670:	6061      	str	r1, [r4, #4]
10008672:	18a1      	adds	r1, r4, r2
10008674:	6048      	str	r0, [r1, #4]
10008676:	6088      	str	r0, [r1, #8]
10008678:	2a0f      	cmp	r2, #15
1000867a:	d900      	bls.n	1000867e <_malloc_r+0x2d2>
1000867c:	e135      	b.n	100088ea <_malloc_r+0x53e>
1000867e:	4642      	mov	r2, r8
10008680:	4644      	mov	r4, r8
10008682:	6852      	ldr	r2, [r2, #4]
10008684:	4926      	ldr	r1, [pc, #152]	; (10008720 <_malloc_r+0x374>)
10008686:	6808      	ldr	r0, [r1, #0]
10008688:	4298      	cmp	r0, r3
1000868a:	d200      	bcs.n	1000868e <_malloc_r+0x2e2>
1000868c:	600b      	str	r3, [r1, #0]
1000868e:	4925      	ldr	r1, [pc, #148]	; (10008724 <_malloc_r+0x378>)
10008690:	6808      	ldr	r0, [r1, #0]
10008692:	4298      	cmp	r0, r3
10008694:	d300      	bcc.n	10008698 <_malloc_r+0x2ec>
10008696:	e08f      	b.n	100087b8 <_malloc_r+0x40c>
10008698:	600b      	str	r3, [r1, #0]
1000869a:	e08d      	b.n	100087b8 <_malloc_r+0x40c>
1000869c:	2201      	movs	r2, #1
1000869e:	0029      	movs	r1, r5
100086a0:	4313      	orrs	r3, r2
100086a2:	4311      	orrs	r1, r2
100086a4:	1965      	adds	r5, r4, r5
100086a6:	6061      	str	r1, [r4, #4]
100086a8:	0030      	movs	r0, r6
100086aa:	60bd      	str	r5, [r7, #8]
100086ac:	606b      	str	r3, [r5, #4]
100086ae:	f000 f947 	bl	10008940 <__malloc_unlock>
100086b2:	0020      	movs	r0, r4
100086b4:	3008      	adds	r0, #8
100086b6:	e73e      	b.n	10008536 <_malloc_r+0x18a>
100086b8:	0a5a      	lsrs	r2, r3, #9
100086ba:	2a04      	cmp	r2, #4
100086bc:	d972      	bls.n	100087a4 <_malloc_r+0x3f8>
100086be:	2a14      	cmp	r2, #20
100086c0:	d900      	bls.n	100086c4 <_malloc_r+0x318>
100086c2:	e0c5      	b.n	10008850 <_malloc_r+0x4a4>
100086c4:	0011      	movs	r1, r2
100086c6:	325c      	adds	r2, #92	; 0x5c
100086c8:	315b      	adds	r1, #91	; 0x5b
100086ca:	00d2      	lsls	r2, r2, #3
100086cc:	2308      	movs	r3, #8
100086ce:	425b      	negs	r3, r3
100086d0:	469c      	mov	ip, r3
100086d2:	18ba      	adds	r2, r7, r2
100086d4:	4494      	add	ip, r2
100086d6:	4663      	mov	r3, ip
100086d8:	689a      	ldr	r2, [r3, #8]
100086da:	2303      	movs	r3, #3
100086dc:	4698      	mov	r8, r3
100086de:	4594      	cmp	ip, r2
100086e0:	d100      	bne.n	100086e4 <_malloc_r+0x338>
100086e2:	e09e      	b.n	10008822 <_malloc_r+0x476>
100086e4:	4643      	mov	r3, r8
100086e6:	6851      	ldr	r1, [r2, #4]
100086e8:	4399      	bics	r1, r3
100086ea:	4549      	cmp	r1, r9
100086ec:	d902      	bls.n	100086f4 <_malloc_r+0x348>
100086ee:	6892      	ldr	r2, [r2, #8]
100086f0:	4594      	cmp	ip, r2
100086f2:	d1f7      	bne.n	100086e4 <_malloc_r+0x338>
100086f4:	68d3      	ldr	r3, [r2, #12]
100086f6:	469c      	mov	ip, r3
100086f8:	687b      	ldr	r3, [r7, #4]
100086fa:	4661      	mov	r1, ip
100086fc:	60a2      	str	r2, [r4, #8]
100086fe:	60e1      	str	r1, [r4, #12]
10008700:	608c      	str	r4, [r1, #8]
10008702:	60d4      	str	r4, [r2, #12]
10008704:	e6d6      	b.n	100084b4 <_malloc_r+0x108>
10008706:	46c0      	nop			; (mov r8, r8)
10008708:	20002c18 	.word	0x20002c18
1000870c:	20003020 	.word	0x20003020
10008710:	20022f10 	.word	0x20022f10
10008714:	0000100f 	.word	0x0000100f
10008718:	20022ee0 	.word	0x20022ee0
1000871c:	00001008 	.word	0x00001008
10008720:	20022f08 	.word	0x20022f08
10008724:	20022f0c 	.word	0x20022f0c
10008728:	2814      	cmp	r0, #20
1000872a:	d952      	bls.n	100087d2 <_malloc_r+0x426>
1000872c:	2854      	cmp	r0, #84	; 0x54
1000872e:	d900      	bls.n	10008732 <_malloc_r+0x386>
10008730:	e096      	b.n	10008860 <_malloc_r+0x4b4>
10008732:	236e      	movs	r3, #110	; 0x6e
10008734:	4698      	mov	r8, r3
10008736:	0b28      	lsrs	r0, r5, #12
10008738:	4480      	add	r8, r0
1000873a:	306f      	adds	r0, #111	; 0x6f
1000873c:	00c1      	lsls	r1, r0, #3
1000873e:	e67e      	b.n	1000843e <_malloc_r+0x92>
10008740:	2308      	movs	r3, #8
10008742:	469b      	mov	fp, r3
10008744:	3b07      	subs	r3, #7
10008746:	44dc      	add	ip, fp
10008748:	469b      	mov	fp, r3
1000874a:	44da      	add	sl, fp
1000874c:	4643      	mov	r3, r8
1000874e:	4652      	mov	r2, sl
10008750:	4213      	tst	r3, r2
10008752:	d000      	beq.n	10008756 <_malloc_r+0x3aa>
10008754:	e6c2      	b.n	100084dc <_malloc_r+0x130>
10008756:	e04c      	b.n	100087f2 <_malloc_r+0x446>
10008758:	2201      	movs	r2, #1
1000875a:	18e3      	adds	r3, r4, r3
1000875c:	6859      	ldr	r1, [r3, #4]
1000875e:	0030      	movs	r0, r6
10008760:	430a      	orrs	r2, r1
10008762:	605a      	str	r2, [r3, #4]
10008764:	68e3      	ldr	r3, [r4, #12]
10008766:	68a2      	ldr	r2, [r4, #8]
10008768:	60d3      	str	r3, [r2, #12]
1000876a:	609a      	str	r2, [r3, #8]
1000876c:	f000 f8e8 	bl	10008940 <__malloc_unlock>
10008770:	0020      	movs	r0, r4
10008772:	3008      	adds	r0, #8
10008774:	e6df      	b.n	10008536 <_malloc_r+0x18a>
10008776:	002b      	movs	r3, r5
10008778:	08e8      	lsrs	r0, r5, #3
1000877a:	3308      	adds	r3, #8
1000877c:	e62a      	b.n	100083d4 <_malloc_r+0x28>
1000877e:	2301      	movs	r3, #1
10008780:	1960      	adds	r0, r4, r5
10008782:	431d      	orrs	r5, r3
10008784:	6065      	str	r5, [r4, #4]
10008786:	6178      	str	r0, [r7, #20]
10008788:	6138      	str	r0, [r7, #16]
1000878a:	60c2      	str	r2, [r0, #12]
1000878c:	6082      	str	r2, [r0, #8]
1000878e:	001a      	movs	r2, r3
10008790:	464b      	mov	r3, r9
10008792:	430a      	orrs	r2, r1
10008794:	6042      	str	r2, [r0, #4]
10008796:	0030      	movs	r0, r6
10008798:	50e1      	str	r1, [r4, r3]
1000879a:	f000 f8d1 	bl	10008940 <__malloc_unlock>
1000879e:	0020      	movs	r0, r4
100087a0:	3008      	adds	r0, #8
100087a2:	e6c8      	b.n	10008536 <_malloc_r+0x18a>
100087a4:	099a      	lsrs	r2, r3, #6
100087a6:	0011      	movs	r1, r2
100087a8:	3239      	adds	r2, #57	; 0x39
100087aa:	3138      	adds	r1, #56	; 0x38
100087ac:	00d2      	lsls	r2, r2, #3
100087ae:	e78d      	b.n	100086cc <_malloc_r+0x320>
100087b0:	42bc      	cmp	r4, r7
100087b2:	d060      	beq.n	10008876 <_malloc_r+0x4ca>
100087b4:	68bc      	ldr	r4, [r7, #8]
100087b6:	6862      	ldr	r2, [r4, #4]
100087b8:	2303      	movs	r3, #3
100087ba:	439a      	bics	r2, r3
100087bc:	1b53      	subs	r3, r2, r5
100087be:	4295      	cmp	r5, r2
100087c0:	d802      	bhi.n	100087c8 <_malloc_r+0x41c>
100087c2:	2b0f      	cmp	r3, #15
100087c4:	dd00      	ble.n	100087c8 <_malloc_r+0x41c>
100087c6:	e769      	b.n	1000869c <_malloc_r+0x2f0>
100087c8:	0030      	movs	r0, r6
100087ca:	f000 f8b9 	bl	10008940 <__malloc_unlock>
100087ce:	2000      	movs	r0, #0
100087d0:	e6b1      	b.n	10008536 <_malloc_r+0x18a>
100087d2:	235b      	movs	r3, #91	; 0x5b
100087d4:	4698      	mov	r8, r3
100087d6:	4480      	add	r8, r0
100087d8:	305c      	adds	r0, #92	; 0x5c
100087da:	00c1      	lsls	r1, r0, #3
100087dc:	e62f      	b.n	1000843e <_malloc_r+0x92>
100087de:	2308      	movs	r3, #8
100087e0:	425b      	negs	r3, r3
100087e2:	469c      	mov	ip, r3
100087e4:	44e1      	add	r9, ip
100087e6:	464b      	mov	r3, r9
100087e8:	689b      	ldr	r3, [r3, #8]
100087ea:	3801      	subs	r0, #1
100087ec:	454b      	cmp	r3, r9
100087ee:	d000      	beq.n	100087f2 <_malloc_r+0x446>
100087f0:	e098      	b.n	10008924 <_malloc_r+0x578>
100087f2:	4643      	mov	r3, r8
100087f4:	4203      	tst	r3, r0
100087f6:	d1f2      	bne.n	100087de <_malloc_r+0x432>
100087f8:	687b      	ldr	r3, [r7, #4]
100087fa:	438b      	bics	r3, r1
100087fc:	607b      	str	r3, [r7, #4]
100087fe:	0049      	lsls	r1, r1, #1
10008800:	4299      	cmp	r1, r3
10008802:	d900      	bls.n	10008806 <_malloc_r+0x45a>
10008804:	e6b5      	b.n	10008572 <_malloc_r+0x1c6>
10008806:	2900      	cmp	r1, #0
10008808:	d104      	bne.n	10008814 <_malloc_r+0x468>
1000880a:	e6b2      	b.n	10008572 <_malloc_r+0x1c6>
1000880c:	2204      	movs	r2, #4
1000880e:	4694      	mov	ip, r2
10008810:	0049      	lsls	r1, r1, #1
10008812:	44e2      	add	sl, ip
10008814:	420b      	tst	r3, r1
10008816:	d0f9      	beq.n	1000880c <_malloc_r+0x460>
10008818:	4650      	mov	r0, sl
1000881a:	e65a      	b.n	100084d2 <_malloc_r+0x126>
1000881c:	3310      	adds	r3, #16
1000881e:	9300      	str	r3, [sp, #0]
10008820:	e6c4      	b.n	100085ac <_malloc_r+0x200>
10008822:	1089      	asrs	r1, r1, #2
10008824:	3b02      	subs	r3, #2
10008826:	408b      	lsls	r3, r1
10008828:	6879      	ldr	r1, [r7, #4]
1000882a:	430b      	orrs	r3, r1
1000882c:	607b      	str	r3, [r7, #4]
1000882e:	e764      	b.n	100086fa <_malloc_r+0x34e>
10008830:	9b00      	ldr	r3, [sp, #0]
10008832:	0030      	movs	r0, r6
10008834:	4443      	add	r3, r8
10008836:	425b      	negs	r3, r3
10008838:	051b      	lsls	r3, r3, #20
1000883a:	0d1b      	lsrs	r3, r3, #20
1000883c:	0019      	movs	r1, r3
1000883e:	469b      	mov	fp, r3
10008840:	f000 f886 	bl	10008950 <_sbrk_r>
10008844:	1c43      	adds	r3, r0, #1
10008846:	d000      	beq.n	1000884a <_malloc_r+0x49e>
10008848:	e6f3      	b.n	10008632 <_malloc_r+0x286>
1000884a:	2300      	movs	r3, #0
1000884c:	469b      	mov	fp, r3
1000884e:	e6f5      	b.n	1000863c <_malloc_r+0x290>
10008850:	2a54      	cmp	r2, #84	; 0x54
10008852:	d82b      	bhi.n	100088ac <_malloc_r+0x500>
10008854:	0b1a      	lsrs	r2, r3, #12
10008856:	0011      	movs	r1, r2
10008858:	326f      	adds	r2, #111	; 0x6f
1000885a:	316e      	adds	r1, #110	; 0x6e
1000885c:	00d2      	lsls	r2, r2, #3
1000885e:	e735      	b.n	100086cc <_malloc_r+0x320>
10008860:	23aa      	movs	r3, #170	; 0xaa
10008862:	005b      	lsls	r3, r3, #1
10008864:	4298      	cmp	r0, r3
10008866:	d82b      	bhi.n	100088c0 <_malloc_r+0x514>
10008868:	3bdd      	subs	r3, #221	; 0xdd
1000886a:	4698      	mov	r8, r3
1000886c:	0be8      	lsrs	r0, r5, #15
1000886e:	4480      	add	r8, r0
10008870:	3078      	adds	r0, #120	; 0x78
10008872:	00c1      	lsls	r1, r0, #3
10008874:	e5e3      	b.n	1000843e <_malloc_r+0x92>
10008876:	4b2c      	ldr	r3, [pc, #176]	; (10008928 <_malloc_r+0x57c>)
10008878:	9a00      	ldr	r2, [sp, #0]
1000887a:	469a      	mov	sl, r3
1000887c:	681b      	ldr	r3, [r3, #0]
1000887e:	469c      	mov	ip, r3
10008880:	4653      	mov	r3, sl
10008882:	4462      	add	r2, ip
10008884:	601a      	str	r2, [r3, #0]
10008886:	e6ad      	b.n	100085e4 <_malloc_r+0x238>
10008888:	0509      	lsls	r1, r1, #20
1000888a:	d000      	beq.n	1000888e <_malloc_r+0x4e2>
1000888c:	e6aa      	b.n	100085e4 <_malloc_r+0x238>
1000888e:	0002      	movs	r2, r0
10008890:	68bc      	ldr	r4, [r7, #8]
10008892:	444a      	add	r2, r9
10008894:	3101      	adds	r1, #1
10008896:	430a      	orrs	r2, r1
10008898:	6062      	str	r2, [r4, #4]
1000889a:	e6f3      	b.n	10008684 <_malloc_r+0x2d8>
1000889c:	465b      	mov	r3, fp
1000889e:	4642      	mov	r2, r8
100088a0:	601a      	str	r2, [r3, #0]
100088a2:	e6aa      	b.n	100085fa <_malloc_r+0x24e>
100088a4:	4644      	mov	r4, r8
100088a6:	e6ed      	b.n	10008684 <_malloc_r+0x2d8>
100088a8:	6041      	str	r1, [r0, #4]
100088aa:	e78d      	b.n	100087c8 <_malloc_r+0x41c>
100088ac:	21aa      	movs	r1, #170	; 0xaa
100088ae:	0049      	lsls	r1, r1, #1
100088b0:	428a      	cmp	r2, r1
100088b2:	d824      	bhi.n	100088fe <_malloc_r+0x552>
100088b4:	0bda      	lsrs	r2, r3, #15
100088b6:	0011      	movs	r1, r2
100088b8:	3278      	adds	r2, #120	; 0x78
100088ba:	3177      	adds	r1, #119	; 0x77
100088bc:	00d2      	lsls	r2, r2, #3
100088be:	e705      	b.n	100086cc <_malloc_r+0x320>
100088c0:	4b1a      	ldr	r3, [pc, #104]	; (1000892c <_malloc_r+0x580>)
100088c2:	4298      	cmp	r0, r3
100088c4:	d824      	bhi.n	10008910 <_malloc_r+0x564>
100088c6:	237c      	movs	r3, #124	; 0x7c
100088c8:	4698      	mov	r8, r3
100088ca:	0ca8      	lsrs	r0, r5, #18
100088cc:	4480      	add	r8, r0
100088ce:	307d      	adds	r0, #125	; 0x7d
100088d0:	00c1      	lsls	r1, r0, #3
100088d2:	e5b4      	b.n	1000843e <_malloc_r+0x92>
100088d4:	9a00      	ldr	r2, [sp, #0]
100088d6:	9b01      	ldr	r3, [sp, #4]
100088d8:	4694      	mov	ip, r2
100088da:	4642      	mov	r2, r8
100088dc:	3b08      	subs	r3, #8
100088de:	4463      	add	r3, ip
100088e0:	1a9b      	subs	r3, r3, r2
100088e2:	9300      	str	r3, [sp, #0]
100088e4:	2300      	movs	r3, #0
100088e6:	469b      	mov	fp, r3
100088e8:	e6a8      	b.n	1000863c <_malloc_r+0x290>
100088ea:	0021      	movs	r1, r4
100088ec:	0030      	movs	r0, r6
100088ee:	3108      	adds	r1, #8
100088f0:	f000 f8bc 	bl	10008a6c <_free_r>
100088f4:	4653      	mov	r3, sl
100088f6:	68bc      	ldr	r4, [r7, #8]
100088f8:	681b      	ldr	r3, [r3, #0]
100088fa:	6862      	ldr	r2, [r4, #4]
100088fc:	e6c2      	b.n	10008684 <_malloc_r+0x2d8>
100088fe:	490b      	ldr	r1, [pc, #44]	; (1000892c <_malloc_r+0x580>)
10008900:	428a      	cmp	r2, r1
10008902:	d80b      	bhi.n	1000891c <_malloc_r+0x570>
10008904:	0c9a      	lsrs	r2, r3, #18
10008906:	0011      	movs	r1, r2
10008908:	327d      	adds	r2, #125	; 0x7d
1000890a:	317c      	adds	r1, #124	; 0x7c
1000890c:	00d2      	lsls	r2, r2, #3
1000890e:	e6dd      	b.n	100086cc <_malloc_r+0x320>
10008910:	21fe      	movs	r1, #254	; 0xfe
10008912:	237e      	movs	r3, #126	; 0x7e
10008914:	207f      	movs	r0, #127	; 0x7f
10008916:	4698      	mov	r8, r3
10008918:	0089      	lsls	r1, r1, #2
1000891a:	e590      	b.n	1000843e <_malloc_r+0x92>
1000891c:	22fe      	movs	r2, #254	; 0xfe
1000891e:	217e      	movs	r1, #126	; 0x7e
10008920:	0092      	lsls	r2, r2, #2
10008922:	e6d3      	b.n	100086cc <_malloc_r+0x320>
10008924:	687b      	ldr	r3, [r7, #4]
10008926:	e76a      	b.n	100087fe <_malloc_r+0x452>
10008928:	20022ee0 	.word	0x20022ee0
1000892c:	00000554 	.word	0x00000554

10008930 <__malloc_lock>:
10008930:	b510      	push	{r4, lr}
10008932:	4802      	ldr	r0, [pc, #8]	; (1000893c <__malloc_lock+0xc>)
10008934:	f000 f97c 	bl	10008c30 <__retarget_lock_acquire_recursive>
10008938:	bd10      	pop	{r4, pc}
1000893a:	46c0      	nop			; (mov r8, r8)
1000893c:	20022edc 	.word	0x20022edc

10008940 <__malloc_unlock>:
10008940:	b510      	push	{r4, lr}
10008942:	4802      	ldr	r0, [pc, #8]	; (1000894c <__malloc_unlock+0xc>)
10008944:	f000 f976 	bl	10008c34 <__retarget_lock_release_recursive>
10008948:	bd10      	pop	{r4, pc}
1000894a:	46c0      	nop			; (mov r8, r8)
1000894c:	20022edc 	.word	0x20022edc

10008950 <_sbrk_r>:
10008950:	2300      	movs	r3, #0
10008952:	b570      	push	{r4, r5, r6, lr}
10008954:	4d06      	ldr	r5, [pc, #24]	; (10008970 <_sbrk_r+0x20>)
10008956:	0004      	movs	r4, r0
10008958:	0008      	movs	r0, r1
1000895a:	602b      	str	r3, [r5, #0]
1000895c:	f7fb f832 	bl	100039c4 <_sbrk>
10008960:	1c43      	adds	r3, r0, #1
10008962:	d000      	beq.n	10008966 <_sbrk_r+0x16>
10008964:	bd70      	pop	{r4, r5, r6, pc}
10008966:	682b      	ldr	r3, [r5, #0]
10008968:	2b00      	cmp	r3, #0
1000896a:	d0fb      	beq.n	10008964 <_sbrk_r+0x14>
1000896c:	6023      	str	r3, [r4, #0]
1000896e:	e7f9      	b.n	10008964 <_sbrk_r+0x14>
10008970:	200234b8 	.word	0x200234b8

10008974 <strlen>:
10008974:	b510      	push	{r4, lr}
10008976:	0783      	lsls	r3, r0, #30
10008978:	d00a      	beq.n	10008990 <strlen+0x1c>
1000897a:	0003      	movs	r3, r0
1000897c:	2103      	movs	r1, #3
1000897e:	e002      	b.n	10008986 <strlen+0x12>
10008980:	3301      	adds	r3, #1
10008982:	420b      	tst	r3, r1
10008984:	d005      	beq.n	10008992 <strlen+0x1e>
10008986:	781a      	ldrb	r2, [r3, #0]
10008988:	2a00      	cmp	r2, #0
1000898a:	d1f9      	bne.n	10008980 <strlen+0xc>
1000898c:	1a18      	subs	r0, r3, r0
1000898e:	bd10      	pop	{r4, pc}
10008990:	0003      	movs	r3, r0
10008992:	6819      	ldr	r1, [r3, #0]
10008994:	4a0c      	ldr	r2, [pc, #48]	; (100089c8 <strlen+0x54>)
10008996:	4c0d      	ldr	r4, [pc, #52]	; (100089cc <strlen+0x58>)
10008998:	188a      	adds	r2, r1, r2
1000899a:	438a      	bics	r2, r1
1000899c:	4222      	tst	r2, r4
1000899e:	d10f      	bne.n	100089c0 <strlen+0x4c>
100089a0:	6859      	ldr	r1, [r3, #4]
100089a2:	4a09      	ldr	r2, [pc, #36]	; (100089c8 <strlen+0x54>)
100089a4:	3304      	adds	r3, #4
100089a6:	188a      	adds	r2, r1, r2
100089a8:	438a      	bics	r2, r1
100089aa:	4222      	tst	r2, r4
100089ac:	d108      	bne.n	100089c0 <strlen+0x4c>
100089ae:	6859      	ldr	r1, [r3, #4]
100089b0:	4a05      	ldr	r2, [pc, #20]	; (100089c8 <strlen+0x54>)
100089b2:	3304      	adds	r3, #4
100089b4:	188a      	adds	r2, r1, r2
100089b6:	438a      	bics	r2, r1
100089b8:	4222      	tst	r2, r4
100089ba:	d0f1      	beq.n	100089a0 <strlen+0x2c>
100089bc:	e000      	b.n	100089c0 <strlen+0x4c>
100089be:	3301      	adds	r3, #1
100089c0:	781a      	ldrb	r2, [r3, #0]
100089c2:	2a00      	cmp	r2, #0
100089c4:	d1fb      	bne.n	100089be <strlen+0x4a>
100089c6:	e7e1      	b.n	1000898c <strlen+0x18>
100089c8:	fefefeff 	.word	0xfefefeff
100089cc:	80808080 	.word	0x80808080

100089d0 <_malloc_trim_r>:
100089d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100089d2:	000c      	movs	r4, r1
100089d4:	0005      	movs	r5, r0
100089d6:	f7ff ffab 	bl	10008930 <__malloc_lock>
100089da:	4f20      	ldr	r7, [pc, #128]	; (10008a5c <_malloc_trim_r+0x8c>)
100089dc:	68bb      	ldr	r3, [r7, #8]
100089de:	685e      	ldr	r6, [r3, #4]
100089e0:	2303      	movs	r3, #3
100089e2:	439e      	bics	r6, r3
100089e4:	4b1e      	ldr	r3, [pc, #120]	; (10008a60 <_malloc_trim_r+0x90>)
100089e6:	1b34      	subs	r4, r6, r4
100089e8:	469c      	mov	ip, r3
100089ea:	4464      	add	r4, ip
100089ec:	0b24      	lsrs	r4, r4, #12
100089ee:	3c01      	subs	r4, #1
100089f0:	3311      	adds	r3, #17
100089f2:	0324      	lsls	r4, r4, #12
100089f4:	429c      	cmp	r4, r3
100089f6:	db07      	blt.n	10008a08 <_malloc_trim_r+0x38>
100089f8:	2100      	movs	r1, #0
100089fa:	0028      	movs	r0, r5
100089fc:	f7ff ffa8 	bl	10008950 <_sbrk_r>
10008a00:	68bb      	ldr	r3, [r7, #8]
10008a02:	199b      	adds	r3, r3, r6
10008a04:	4298      	cmp	r0, r3
10008a06:	d004      	beq.n	10008a12 <_malloc_trim_r+0x42>
10008a08:	0028      	movs	r0, r5
10008a0a:	f7ff ff99 	bl	10008940 <__malloc_unlock>
10008a0e:	2000      	movs	r0, #0
10008a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008a12:	0028      	movs	r0, r5
10008a14:	4261      	negs	r1, r4
10008a16:	f7ff ff9b 	bl	10008950 <_sbrk_r>
10008a1a:	1c43      	adds	r3, r0, #1
10008a1c:	d00d      	beq.n	10008a3a <_malloc_trim_r+0x6a>
10008a1e:	2201      	movs	r2, #1
10008a20:	68bb      	ldr	r3, [r7, #8]
10008a22:	1b36      	subs	r6, r6, r4
10008a24:	4316      	orrs	r6, r2
10008a26:	605e      	str	r6, [r3, #4]
10008a28:	4b0e      	ldr	r3, [pc, #56]	; (10008a64 <_malloc_trim_r+0x94>)
10008a2a:	0028      	movs	r0, r5
10008a2c:	681a      	ldr	r2, [r3, #0]
10008a2e:	1b14      	subs	r4, r2, r4
10008a30:	601c      	str	r4, [r3, #0]
10008a32:	f7ff ff85 	bl	10008940 <__malloc_unlock>
10008a36:	2001      	movs	r0, #1
10008a38:	e7ea      	b.n	10008a10 <_malloc_trim_r+0x40>
10008a3a:	2100      	movs	r1, #0
10008a3c:	0028      	movs	r0, r5
10008a3e:	f7ff ff87 	bl	10008950 <_sbrk_r>
10008a42:	68ba      	ldr	r2, [r7, #8]
10008a44:	1a83      	subs	r3, r0, r2
10008a46:	2b0f      	cmp	r3, #15
10008a48:	ddde      	ble.n	10008a08 <_malloc_trim_r+0x38>
10008a4a:	4907      	ldr	r1, [pc, #28]	; (10008a68 <_malloc_trim_r+0x98>)
10008a4c:	6809      	ldr	r1, [r1, #0]
10008a4e:	1a40      	subs	r0, r0, r1
10008a50:	4904      	ldr	r1, [pc, #16]	; (10008a64 <_malloc_trim_r+0x94>)
10008a52:	6008      	str	r0, [r1, #0]
10008a54:	2101      	movs	r1, #1
10008a56:	430b      	orrs	r3, r1
10008a58:	6053      	str	r3, [r2, #4]
10008a5a:	e7d5      	b.n	10008a08 <_malloc_trim_r+0x38>
10008a5c:	20002c18 	.word	0x20002c18
10008a60:	00000fef 	.word	0x00000fef
10008a64:	20022ee0 	.word	0x20022ee0
10008a68:	20003020 	.word	0x20003020

10008a6c <_free_r>:
10008a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
10008a6e:	46c6      	mov	lr, r8
10008a70:	0005      	movs	r5, r0
10008a72:	000c      	movs	r4, r1
10008a74:	b500      	push	{lr}
10008a76:	2900      	cmp	r1, #0
10008a78:	d04f      	beq.n	10008b1a <_free_r+0xae>
10008a7a:	f7ff ff59 	bl	10008930 <__malloc_lock>
10008a7e:	0021      	movs	r1, r4
10008a80:	3908      	subs	r1, #8
10008a82:	684c      	ldr	r4, [r1, #4]
10008a84:	2601      	movs	r6, #1
10008a86:	0022      	movs	r2, r4
10008a88:	2003      	movs	r0, #3
10008a8a:	43b2      	bics	r2, r6
10008a8c:	188f      	adds	r7, r1, r2
10008a8e:	687b      	ldr	r3, [r7, #4]
10008a90:	4383      	bics	r3, r0
10008a92:	4862      	ldr	r0, [pc, #392]	; (10008c1c <_free_r+0x1b0>)
10008a94:	4698      	mov	r8, r3
10008a96:	6883      	ldr	r3, [r0, #8]
10008a98:	42bb      	cmp	r3, r7
10008a9a:	d06a      	beq.n	10008b72 <_free_r+0x106>
10008a9c:	4643      	mov	r3, r8
10008a9e:	607b      	str	r3, [r7, #4]
10008aa0:	4226      	tst	r6, r4
10008aa2:	d11e      	bne.n	10008ae2 <_free_r+0x76>
10008aa4:	2308      	movs	r3, #8
10008aa6:	469c      	mov	ip, r3
10008aa8:	680c      	ldr	r4, [r1, #0]
10008aaa:	4484      	add	ip, r0
10008aac:	1b09      	subs	r1, r1, r4
10008aae:	1912      	adds	r2, r2, r4
10008ab0:	688c      	ldr	r4, [r1, #8]
10008ab2:	4564      	cmp	r4, ip
10008ab4:	d04f      	beq.n	10008b56 <_free_r+0xea>
10008ab6:	68cb      	ldr	r3, [r1, #12]
10008ab8:	60e3      	str	r3, [r4, #12]
10008aba:	609c      	str	r4, [r3, #8]
10008abc:	4643      	mov	r3, r8
10008abe:	18fc      	adds	r4, r7, r3
10008ac0:	6864      	ldr	r4, [r4, #4]
10008ac2:	4234      	tst	r4, r6
10008ac4:	d111      	bne.n	10008aea <_free_r+0x7e>
10008ac6:	68bb      	ldr	r3, [r7, #8]
10008ac8:	4c55      	ldr	r4, [pc, #340]	; (10008c20 <_free_r+0x1b4>)
10008aca:	4442      	add	r2, r8
10008acc:	42a3      	cmp	r3, r4
10008ace:	d100      	bne.n	10008ad2 <_free_r+0x66>
10008ad0:	e07e      	b.n	10008bd0 <_free_r+0x164>
10008ad2:	68fc      	ldr	r4, [r7, #12]
10008ad4:	60dc      	str	r4, [r3, #12]
10008ad6:	60a3      	str	r3, [r4, #8]
10008ad8:	2301      	movs	r3, #1
10008ada:	4313      	orrs	r3, r2
10008adc:	604b      	str	r3, [r1, #4]
10008ade:	508a      	str	r2, [r1, r2]
10008ae0:	e006      	b.n	10008af0 <_free_r+0x84>
10008ae2:	18fc      	adds	r4, r7, r3
10008ae4:	6864      	ldr	r4, [r4, #4]
10008ae6:	4234      	tst	r4, r6
10008ae8:	d0ed      	beq.n	10008ac6 <_free_r+0x5a>
10008aea:	4316      	orrs	r6, r2
10008aec:	604e      	str	r6, [r1, #4]
10008aee:	603a      	str	r2, [r7, #0]
10008af0:	2380      	movs	r3, #128	; 0x80
10008af2:	009b      	lsls	r3, r3, #2
10008af4:	429a      	cmp	r2, r3
10008af6:	d213      	bcs.n	10008b20 <_free_r+0xb4>
10008af8:	0954      	lsrs	r4, r2, #5
10008afa:	08d3      	lsrs	r3, r2, #3
10008afc:	2201      	movs	r2, #1
10008afe:	40a2      	lsls	r2, r4
10008b00:	6844      	ldr	r4, [r0, #4]
10008b02:	00db      	lsls	r3, r3, #3
10008b04:	4322      	orrs	r2, r4
10008b06:	6042      	str	r2, [r0, #4]
10008b08:	1818      	adds	r0, r3, r0
10008b0a:	6883      	ldr	r3, [r0, #8]
10008b0c:	60c8      	str	r0, [r1, #12]
10008b0e:	608b      	str	r3, [r1, #8]
10008b10:	6081      	str	r1, [r0, #8]
10008b12:	60d9      	str	r1, [r3, #12]
10008b14:	0028      	movs	r0, r5
10008b16:	f7ff ff13 	bl	10008940 <__malloc_unlock>
10008b1a:	bc80      	pop	{r7}
10008b1c:	46b8      	mov	r8, r7
10008b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008b20:	0a53      	lsrs	r3, r2, #9
10008b22:	2b04      	cmp	r3, #4
10008b24:	d83e      	bhi.n	10008ba4 <_free_r+0x138>
10008b26:	0994      	lsrs	r4, r2, #6
10008b28:	0026      	movs	r6, r4
10008b2a:	3439      	adds	r4, #57	; 0x39
10008b2c:	3638      	adds	r6, #56	; 0x38
10008b2e:	00e4      	lsls	r4, r4, #3
10008b30:	1904      	adds	r4, r0, r4
10008b32:	6823      	ldr	r3, [r4, #0]
10008b34:	3c08      	subs	r4, #8
10008b36:	2703      	movs	r7, #3
10008b38:	429c      	cmp	r4, r3
10008b3a:	d042      	beq.n	10008bc2 <_free_r+0x156>
10008b3c:	6858      	ldr	r0, [r3, #4]
10008b3e:	43b8      	bics	r0, r7
10008b40:	4290      	cmp	r0, r2
10008b42:	d902      	bls.n	10008b4a <_free_r+0xde>
10008b44:	689b      	ldr	r3, [r3, #8]
10008b46:	429c      	cmp	r4, r3
10008b48:	d1f8      	bne.n	10008b3c <_free_r+0xd0>
10008b4a:	68dc      	ldr	r4, [r3, #12]
10008b4c:	60cc      	str	r4, [r1, #12]
10008b4e:	608b      	str	r3, [r1, #8]
10008b50:	60a1      	str	r1, [r4, #8]
10008b52:	60d9      	str	r1, [r3, #12]
10008b54:	e7de      	b.n	10008b14 <_free_r+0xa8>
10008b56:	4643      	mov	r3, r8
10008b58:	18f8      	adds	r0, r7, r3
10008b5a:	6840      	ldr	r0, [r0, #4]
10008b5c:	4230      	tst	r0, r6
10008b5e:	d157      	bne.n	10008c10 <_free_r+0x1a4>
10008b60:	68fb      	ldr	r3, [r7, #12]
10008b62:	68b8      	ldr	r0, [r7, #8]
10008b64:	4442      	add	r2, r8
10008b66:	4316      	orrs	r6, r2
10008b68:	60c3      	str	r3, [r0, #12]
10008b6a:	6098      	str	r0, [r3, #8]
10008b6c:	604e      	str	r6, [r1, #4]
10008b6e:	508a      	str	r2, [r1, r2]
10008b70:	e7d0      	b.n	10008b14 <_free_r+0xa8>
10008b72:	0013      	movs	r3, r2
10008b74:	4443      	add	r3, r8
10008b76:	4226      	tst	r6, r4
10008b78:	d106      	bne.n	10008b88 <_free_r+0x11c>
10008b7a:	680a      	ldr	r2, [r1, #0]
10008b7c:	1a89      	subs	r1, r1, r2
10008b7e:	688c      	ldr	r4, [r1, #8]
10008b80:	189b      	adds	r3, r3, r2
10008b82:	68ca      	ldr	r2, [r1, #12]
10008b84:	60e2      	str	r2, [r4, #12]
10008b86:	6094      	str	r4, [r2, #8]
10008b88:	2201      	movs	r2, #1
10008b8a:	431a      	orrs	r2, r3
10008b8c:	604a      	str	r2, [r1, #4]
10008b8e:	4a25      	ldr	r2, [pc, #148]	; (10008c24 <_free_r+0x1b8>)
10008b90:	6081      	str	r1, [r0, #8]
10008b92:	6812      	ldr	r2, [r2, #0]
10008b94:	429a      	cmp	r2, r3
10008b96:	d8bd      	bhi.n	10008b14 <_free_r+0xa8>
10008b98:	4b23      	ldr	r3, [pc, #140]	; (10008c28 <_free_r+0x1bc>)
10008b9a:	0028      	movs	r0, r5
10008b9c:	6819      	ldr	r1, [r3, #0]
10008b9e:	f7ff ff17 	bl	100089d0 <_malloc_trim_r>
10008ba2:	e7b7      	b.n	10008b14 <_free_r+0xa8>
10008ba4:	2b14      	cmp	r3, #20
10008ba6:	d907      	bls.n	10008bb8 <_free_r+0x14c>
10008ba8:	2b54      	cmp	r3, #84	; 0x54
10008baa:	d81a      	bhi.n	10008be2 <_free_r+0x176>
10008bac:	0b14      	lsrs	r4, r2, #12
10008bae:	0026      	movs	r6, r4
10008bb0:	346f      	adds	r4, #111	; 0x6f
10008bb2:	366e      	adds	r6, #110	; 0x6e
10008bb4:	00e4      	lsls	r4, r4, #3
10008bb6:	e7bb      	b.n	10008b30 <_free_r+0xc4>
10008bb8:	001e      	movs	r6, r3
10008bba:	335c      	adds	r3, #92	; 0x5c
10008bbc:	365b      	adds	r6, #91	; 0x5b
10008bbe:	00dc      	lsls	r4, r3, #3
10008bc0:	e7b6      	b.n	10008b30 <_free_r+0xc4>
10008bc2:	2201      	movs	r2, #1
10008bc4:	10b6      	asrs	r6, r6, #2
10008bc6:	40b2      	lsls	r2, r6
10008bc8:	6846      	ldr	r6, [r0, #4]
10008bca:	4332      	orrs	r2, r6
10008bcc:	6042      	str	r2, [r0, #4]
10008bce:	e7bd      	b.n	10008b4c <_free_r+0xe0>
10008bd0:	60d9      	str	r1, [r3, #12]
10008bd2:	6099      	str	r1, [r3, #8]
10008bd4:	60cb      	str	r3, [r1, #12]
10008bd6:	608b      	str	r3, [r1, #8]
10008bd8:	2301      	movs	r3, #1
10008bda:	4313      	orrs	r3, r2
10008bdc:	604b      	str	r3, [r1, #4]
10008bde:	508a      	str	r2, [r1, r2]
10008be0:	e798      	b.n	10008b14 <_free_r+0xa8>
10008be2:	24aa      	movs	r4, #170	; 0xaa
10008be4:	0064      	lsls	r4, r4, #1
10008be6:	42a3      	cmp	r3, r4
10008be8:	d805      	bhi.n	10008bf6 <_free_r+0x18a>
10008bea:	0bd4      	lsrs	r4, r2, #15
10008bec:	0026      	movs	r6, r4
10008bee:	3478      	adds	r4, #120	; 0x78
10008bf0:	3677      	adds	r6, #119	; 0x77
10008bf2:	00e4      	lsls	r4, r4, #3
10008bf4:	e79c      	b.n	10008b30 <_free_r+0xc4>
10008bf6:	4c0d      	ldr	r4, [pc, #52]	; (10008c2c <_free_r+0x1c0>)
10008bf8:	42a3      	cmp	r3, r4
10008bfa:	d805      	bhi.n	10008c08 <_free_r+0x19c>
10008bfc:	0c94      	lsrs	r4, r2, #18
10008bfe:	0026      	movs	r6, r4
10008c00:	347d      	adds	r4, #125	; 0x7d
10008c02:	367c      	adds	r6, #124	; 0x7c
10008c04:	00e4      	lsls	r4, r4, #3
10008c06:	e793      	b.n	10008b30 <_free_r+0xc4>
10008c08:	24fe      	movs	r4, #254	; 0xfe
10008c0a:	267e      	movs	r6, #126	; 0x7e
10008c0c:	00a4      	lsls	r4, r4, #2
10008c0e:	e78f      	b.n	10008b30 <_free_r+0xc4>
10008c10:	0033      	movs	r3, r6
10008c12:	4313      	orrs	r3, r2
10008c14:	604b      	str	r3, [r1, #4]
10008c16:	603a      	str	r2, [r7, #0]
10008c18:	e77c      	b.n	10008b14 <_free_r+0xa8>
10008c1a:	46c0      	nop			; (mov r8, r8)
10008c1c:	20002c18 	.word	0x20002c18
10008c20:	20002c20 	.word	0x20002c20
10008c24:	20003024 	.word	0x20003024
10008c28:	20022f10 	.word	0x20022f10
10008c2c:	00000554 	.word	0x00000554

10008c30 <__retarget_lock_acquire_recursive>:
10008c30:	4770      	bx	lr
10008c32:	46c0      	nop			; (mov r8, r8)

10008c34 <__retarget_lock_release_recursive>:
10008c34:	4770      	bx	lr
10008c36:	46c0      	nop			; (mov r8, r8)

10008c38 <_fini>:
10008c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10008c3a:	46c0      	nop			; (mov r8, r8)
10008c3c:	0000      	movs	r0, r0
	...

10008c40 <__mutex_exit_veneer>:
10008c40:	b401      	push	{r0}
10008c42:	4802      	ldr	r0, [pc, #8]	; (10008c4c <__mutex_exit_veneer+0xc>)
10008c44:	4684      	mov	ip, r0
10008c46:	bc01      	pop	{r0}
10008c48:	4760      	bx	ip
10008c4a:	bf00      	nop
10008c4c:	2000204d 	.word	0x2000204d

10008c50 <____aeabi_ldiv0_veneer>:
10008c50:	b401      	push	{r0}
10008c52:	4802      	ldr	r0, [pc, #8]	; (10008c5c <____aeabi_ldiv0_veneer+0xc>)
10008c54:	4684      	mov	ip, r0
10008c56:	bc01      	pop	{r0}
10008c58:	4760      	bx	ip
10008c5a:	bf00      	nop
10008c5c:	2000264d 	.word	0x2000264d

10008c60 <____aeabi_idiv0_veneer>:
10008c60:	b401      	push	{r0}
10008c62:	4802      	ldr	r0, [pc, #8]	; (10008c6c <____aeabi_idiv0_veneer+0xc>)
10008c64:	4684      	mov	ip, r0
10008c66:	bc01      	pop	{r0}
10008c68:	4760      	bx	ip
10008c6a:	bf00      	nop
10008c6c:	2000264d 	.word	0x2000264d

10008c70 <__mutex_try_enter_veneer>:
10008c70:	b401      	push	{r0}
10008c72:	4802      	ldr	r0, [pc, #8]	; (10008c7c <__mutex_try_enter_veneer+0xc>)
10008c74:	4684      	mov	ip, r0
10008c76:	bc01      	pop	{r0}
10008c78:	4760      	bx	ip
10008c7a:	bf00      	nop
10008c7c:	20001f71 	.word	0x20001f71

10008c80 <__mutex_enter_timeout_ms_veneer>:
10008c80:	b401      	push	{r0}
10008c82:	4802      	ldr	r0, [pc, #8]	; (10008c8c <__mutex_enter_timeout_ms_veneer+0xc>)
10008c84:	4684      	mov	ip, r0
10008c86:	bc01      	pop	{r0}
10008c88:	4760      	bx	ip
10008c8a:	bf00      	nop
10008c8c:	20001fb5 	.word	0x20001fb5

10008c90 <__flash_do_cmd.constprop.0_veneer>:
10008c90:	b401      	push	{r0}
10008c92:	4802      	ldr	r0, [pc, #8]	; (10008c9c <__flash_do_cmd.constprop.0_veneer+0xc>)
10008c94:	4684      	mov	ip, r0
10008c96:	bc01      	pop	{r0}
10008c98:	4760      	bx	ip
10008c9a:	bf00      	nop
10008c9c:	20001e81 	.word	0x20001e81

10008ca0 <__mutex_enter_blocking_veneer>:
10008ca0:	b401      	push	{r0}
10008ca2:	4802      	ldr	r0, [pc, #8]	; (10008cac <__mutex_enter_blocking_veneer+0xc>)
10008ca4:	4684      	mov	ip, r0
10008ca6:	bc01      	pop	{r0}
10008ca8:	4760      	bx	ip
10008caa:	bf00      	nop
10008cac:	20001f25 	.word	0x20001f25

Disassembly of section .data:

200000c0 <RenderAText>:
200000c0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
200000c2:	4644      	mov	r4, r8
200000c4:	b410      	push	{r4}
200000c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
200000c8:	4e49      	ldr	r6, [pc, #292]	; (200001f0 <RenderAText_pSioBase>)
200000ca:	6632      	str	r2, [r6, #96]	; 0x60
200000cc:	8a62      	ldrh	r2, [r4, #18]
200000ce:	6672      	str	r2, [r6, #100]	; 0x64
200000d0:	8925      	ldrh	r5, [r4, #8]
200000d2:	2703      	movs	r7, #3
200000d4:	43bd      	bics	r5, r7
200000d6:	9509      	str	r5, [sp, #36]	; 0x24
200000d8:	43b9      	bics	r1, r7
200000da:	43bb      	bics	r3, r7
200000dc:	9303      	str	r3, [sp, #12]
200000de:	6f75      	ldr	r5, [r6, #116]	; 0x74
200000e0:	6f32      	ldr	r2, [r6, #112]	; 0x70
200000e2:	022d      	lsls	r5, r5, #8
200000e4:	6963      	ldr	r3, [r4, #20]
200000e6:	442b      	add	r3, r5
200000e8:	8865      	ldrh	r5, [r4, #2]
200000ea:	436a      	muls	r2, r5
200000ec:	68e5      	ldr	r5, [r4, #12]
200000ee:	442a      	add	r2, r5
200000f0:	9202      	str	r2, [sp, #8]
200000f2:	08ce      	lsrs	r6, r1, #3
200000f4:	4432      	add	r2, r6
200000f6:	4432      	add	r2, r6
200000f8:	69a5      	ldr	r5, [r4, #24]
200000fa:	46a8      	mov	r8, r5
200000fc:	4d3b      	ldr	r5, [pc, #236]	; (200001ec <RenderAText_Addr>)
200000fe:	46ae      	mov	lr, r5
20000100:	074e      	lsls	r6, r1, #29
20000102:	d521      	bpl.n	20000148 <RenderAText+0x88>
20000104:	7856      	ldrb	r6, [r2, #1]
20000106:	4645      	mov	r5, r8
20000108:	0934      	lsrs	r4, r6, #4
2000010a:	5d2c      	ldrb	r4, [r5, r4]
2000010c:	0736      	lsls	r6, r6, #28
2000010e:	0f36      	lsrs	r6, r6, #28
20000110:	5dae      	ldrb	r6, [r5, r6]
20000112:	0225      	lsls	r5, r4, #8
20000114:	4325      	orrs	r5, r4
20000116:	042c      	lsls	r4, r5, #16
20000118:	432c      	orrs	r4, r5
2000011a:	0235      	lsls	r5, r6, #8
2000011c:	4335      	orrs	r5, r6
2000011e:	042e      	lsls	r6, r5, #16
20000120:	432e      	orrs	r6, r5
20000122:	4066      	eors	r6, r4
20000124:	7815      	ldrb	r5, [r2, #0]
20000126:	5d5d      	ldrb	r5, [r3, r5]
20000128:	3202      	adds	r2, #2
2000012a:	00ed      	lsls	r5, r5, #3
2000012c:	4475      	add	r5, lr
2000012e:	686f      	ldr	r7, [r5, #4]
20000130:	4037      	ands	r7, r6
20000132:	4067      	eors	r7, r4
20000134:	c080      	stmia	r0!, {r7}
20000136:	3104      	adds	r1, #4
20000138:	9f09      	ldr	r7, [sp, #36]	; 0x24
2000013a:	42b9      	cmp	r1, r7
2000013c:	d301      	bcc.n	20000142 <RenderAText+0x82>
2000013e:	2100      	movs	r1, #0
20000140:	9a02      	ldr	r2, [sp, #8]
20000142:	9f03      	ldr	r7, [sp, #12]
20000144:	3f04      	subs	r7, #4
20000146:	9703      	str	r7, [sp, #12]
20000148:	9f09      	ldr	r7, [sp, #36]	; 0x24
2000014a:	1a7f      	subs	r7, r7, r1

2000014c <RenderAText_OutLoop>:
2000014c:	9e03      	ldr	r6, [sp, #12]
2000014e:	42b7      	cmp	r7, r6
20000150:	d900      	bls.n	20000154 <RenderAText_OutLoop+0x8>
20000152:	4637      	mov	r7, r6
20000154:	2f08      	cmp	r7, #8
20000156:	d220      	bcs.n	2000019a <RenderAText_Last+0x3e>
20000158:	2f04      	cmp	r7, #4
2000015a:	d31b      	bcc.n	20000194 <RenderAText_Last+0x38>

2000015c <RenderAText_Last>:
2000015c:	7856      	ldrb	r6, [r2, #1]
2000015e:	4645      	mov	r5, r8
20000160:	0934      	lsrs	r4, r6, #4
20000162:	5d2c      	ldrb	r4, [r5, r4]
20000164:	0736      	lsls	r6, r6, #28
20000166:	0f36      	lsrs	r6, r6, #28
20000168:	5dae      	ldrb	r6, [r5, r6]
2000016a:	0225      	lsls	r5, r4, #8
2000016c:	4325      	orrs	r5, r4
2000016e:	042c      	lsls	r4, r5, #16
20000170:	432c      	orrs	r4, r5
20000172:	0235      	lsls	r5, r6, #8
20000174:	4335      	orrs	r5, r6
20000176:	042e      	lsls	r6, r5, #16
20000178:	432e      	orrs	r6, r5
2000017a:	4066      	eors	r6, r4
2000017c:	7815      	ldrb	r5, [r2, #0]
2000017e:	5d5d      	ldrb	r5, [r3, r5]
20000180:	3202      	adds	r2, #2
20000182:	00ed      	lsls	r5, r5, #3
20000184:	4475      	add	r5, lr
20000186:	6829      	ldr	r1, [r5, #0]
20000188:	4031      	ands	r1, r6
2000018a:	4061      	eors	r1, r4
2000018c:	c002      	stmia	r0!, {r1}
2000018e:	9a02      	ldr	r2, [sp, #8]
20000190:	2f04      	cmp	r7, #4
20000192:	d8db      	bhi.n	2000014c <RenderAText_OutLoop>
20000194:	bc10      	pop	{r4}
20000196:	46a0      	mov	r8, r4
20000198:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
2000019a:	08b9      	lsrs	r1, r7, #2
2000019c:	008d      	lsls	r5, r1, #2
2000019e:	1b76      	subs	r6, r6, r5
200001a0:	9603      	str	r6, [sp, #12]
200001a2:	3901      	subs	r1, #1

200001a4 <RenderAText_InLoop>:
200001a4:	7856      	ldrb	r6, [r2, #1]
200001a6:	4645      	mov	r5, r8
200001a8:	0934      	lsrs	r4, r6, #4
200001aa:	5d2c      	ldrb	r4, [r5, r4]
200001ac:	0736      	lsls	r6, r6, #28
200001ae:	0f36      	lsrs	r6, r6, #28
200001b0:	5dae      	ldrb	r6, [r5, r6]
200001b2:	0225      	lsls	r5, r4, #8
200001b4:	4325      	orrs	r5, r4
200001b6:	042c      	lsls	r4, r5, #16
200001b8:	432c      	orrs	r4, r5
200001ba:	0235      	lsls	r5, r6, #8
200001bc:	4335      	orrs	r5, r6
200001be:	042e      	lsls	r6, r5, #16
200001c0:	432e      	orrs	r6, r5
200001c2:	4066      	eors	r6, r4
200001c4:	7815      	ldrb	r5, [r2, #0]
200001c6:	5d5d      	ldrb	r5, [r3, r5]
200001c8:	3202      	adds	r2, #2
200001ca:	00ed      	lsls	r5, r5, #3
200001cc:	4475      	add	r5, lr
200001ce:	682f      	ldr	r7, [r5, #0]
200001d0:	4037      	ands	r7, r6
200001d2:	4067      	eors	r7, r4
200001d4:	c080      	stmia	r0!, {r7}
200001d6:	686f      	ldr	r7, [r5, #4]
200001d8:	4037      	ands	r7, r6
200001da:	4067      	eors	r7, r4
200001dc:	c080      	stmia	r0!, {r7}
200001de:	3902      	subs	r1, #2
200001e0:	d8e0      	bhi.n	200001a4 <RenderAText_InLoop>
200001e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
200001e4:	d0ba      	beq.n	2000015c <RenderAText_Last>
200001e6:	9a02      	ldr	r2, [sp, #8]
200001e8:	e7b0      	b.n	2000014c <RenderAText_OutLoop>
200001ea:	46c0      	nop			; (mov r8, r8)

200001ec <RenderAText_Addr>:
200001ec:	200218d8 	.word	0x200218d8

200001f0 <RenderAText_pSioBase>:
200001f0:	d0000000 	.word	0xd0000000

200001f4 <RenderAttrib8>:
200001f4:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
200001f6:	4644      	mov	r4, r8
200001f8:	b410      	push	{r4}
200001fa:	9c08      	ldr	r4, [sp, #32]
200001fc:	8925      	ldrh	r5, [r4, #8]
200001fe:	2703      	movs	r7, #3
20000200:	43bd      	bics	r5, r7
20000202:	9508      	str	r5, [sp, #32]
20000204:	43b9      	bics	r1, r7
20000206:	43bb      	bics	r3, r7
20000208:	9302      	str	r3, [sp, #8]
2000020a:	08d3      	lsrs	r3, r2, #3
2000020c:	8865      	ldrh	r5, [r4, #2]
2000020e:	436b      	muls	r3, r5
20000210:	6967      	ldr	r7, [r4, #20]
20000212:	443b      	add	r3, r7
20000214:	436a      	muls	r2, r5
20000216:	68e5      	ldr	r5, [r4, #12]
20000218:	442a      	add	r2, r5
2000021a:	9201      	str	r2, [sp, #4]
2000021c:	1a9b      	subs	r3, r3, r2
2000021e:	08ce      	lsrs	r6, r1, #3
20000220:	4432      	add	r2, r6
20000222:	69a5      	ldr	r5, [r4, #24]
20000224:	46a8      	mov	r8, r5
20000226:	4d39      	ldr	r5, [pc, #228]	; (2000030c <RenderAttrib8_Addr>)
20000228:	46ae      	mov	lr, r5
2000022a:	074e      	lsls	r6, r1, #29
2000022c:	d520      	bpl.n	20000270 <RenderAttrib8+0x7c>
2000022e:	5cd6      	ldrb	r6, [r2, r3]
20000230:	4645      	mov	r5, r8
20000232:	0934      	lsrs	r4, r6, #4
20000234:	5d2c      	ldrb	r4, [r5, r4]
20000236:	0736      	lsls	r6, r6, #28
20000238:	0f36      	lsrs	r6, r6, #28
2000023a:	5dae      	ldrb	r6, [r5, r6]
2000023c:	0225      	lsls	r5, r4, #8
2000023e:	4325      	orrs	r5, r4
20000240:	042c      	lsls	r4, r5, #16
20000242:	432c      	orrs	r4, r5
20000244:	0235      	lsls	r5, r6, #8
20000246:	4335      	orrs	r5, r6
20000248:	042e      	lsls	r6, r5, #16
2000024a:	432e      	orrs	r6, r5
2000024c:	4066      	eors	r6, r4
2000024e:	7815      	ldrb	r5, [r2, #0]
20000250:	3201      	adds	r2, #1
20000252:	00ed      	lsls	r5, r5, #3
20000254:	4475      	add	r5, lr
20000256:	686f      	ldr	r7, [r5, #4]
20000258:	4037      	ands	r7, r6
2000025a:	4067      	eors	r7, r4
2000025c:	c080      	stmia	r0!, {r7}
2000025e:	3104      	adds	r1, #4
20000260:	9f08      	ldr	r7, [sp, #32]
20000262:	42b9      	cmp	r1, r7
20000264:	d301      	bcc.n	2000026a <RenderAttrib8+0x76>
20000266:	2100      	movs	r1, #0
20000268:	9a01      	ldr	r2, [sp, #4]
2000026a:	9f02      	ldr	r7, [sp, #8]
2000026c:	3f04      	subs	r7, #4
2000026e:	9702      	str	r7, [sp, #8]
20000270:	9f08      	ldr	r7, [sp, #32]
20000272:	1a7f      	subs	r7, r7, r1

20000274 <RenderAttrib8_OutLoop>:
20000274:	9e02      	ldr	r6, [sp, #8]
20000276:	42b7      	cmp	r7, r6
20000278:	d900      	bls.n	2000027c <RenderAttrib8_OutLoop+0x8>
2000027a:	4637      	mov	r7, r6
2000027c:	2f08      	cmp	r7, #8
2000027e:	d21f      	bcs.n	200002c0 <RenderAttrib8_Last+0x3c>
20000280:	2f04      	cmp	r7, #4
20000282:	d31a      	bcc.n	200002ba <RenderAttrib8_Last+0x36>

20000284 <RenderAttrib8_Last>:
20000284:	5cd6      	ldrb	r6, [r2, r3]
20000286:	4645      	mov	r5, r8
20000288:	0934      	lsrs	r4, r6, #4
2000028a:	5d2c      	ldrb	r4, [r5, r4]
2000028c:	0736      	lsls	r6, r6, #28
2000028e:	0f36      	lsrs	r6, r6, #28
20000290:	5dae      	ldrb	r6, [r5, r6]
20000292:	0225      	lsls	r5, r4, #8
20000294:	4325      	orrs	r5, r4
20000296:	042c      	lsls	r4, r5, #16
20000298:	432c      	orrs	r4, r5
2000029a:	0235      	lsls	r5, r6, #8
2000029c:	4335      	orrs	r5, r6
2000029e:	042e      	lsls	r6, r5, #16
200002a0:	432e      	orrs	r6, r5
200002a2:	4066      	eors	r6, r4
200002a4:	7815      	ldrb	r5, [r2, #0]
200002a6:	3201      	adds	r2, #1
200002a8:	00ed      	lsls	r5, r5, #3
200002aa:	4475      	add	r5, lr
200002ac:	6829      	ldr	r1, [r5, #0]
200002ae:	4031      	ands	r1, r6
200002b0:	4061      	eors	r1, r4
200002b2:	c002      	stmia	r0!, {r1}
200002b4:	9a01      	ldr	r2, [sp, #4]
200002b6:	2f04      	cmp	r7, #4
200002b8:	d8dc      	bhi.n	20000274 <RenderAttrib8_OutLoop>
200002ba:	bc10      	pop	{r4}
200002bc:	46a0      	mov	r8, r4
200002be:	bdfc      	pop	{r2, r3, r4, r5, r6, r7, pc}
200002c0:	08b9      	lsrs	r1, r7, #2
200002c2:	008d      	lsls	r5, r1, #2
200002c4:	1b76      	subs	r6, r6, r5
200002c6:	9602      	str	r6, [sp, #8]
200002c8:	3901      	subs	r1, #1

200002ca <RenderAttrib8_InLoop>:
200002ca:	5cd6      	ldrb	r6, [r2, r3]
200002cc:	4645      	mov	r5, r8
200002ce:	0934      	lsrs	r4, r6, #4
200002d0:	5d2c      	ldrb	r4, [r5, r4]
200002d2:	0736      	lsls	r6, r6, #28
200002d4:	0f36      	lsrs	r6, r6, #28
200002d6:	5dae      	ldrb	r6, [r5, r6]
200002d8:	0225      	lsls	r5, r4, #8
200002da:	4325      	orrs	r5, r4
200002dc:	042c      	lsls	r4, r5, #16
200002de:	432c      	orrs	r4, r5
200002e0:	0235      	lsls	r5, r6, #8
200002e2:	4335      	orrs	r5, r6
200002e4:	042e      	lsls	r6, r5, #16
200002e6:	432e      	orrs	r6, r5
200002e8:	4066      	eors	r6, r4
200002ea:	7817      	ldrb	r7, [r2, #0]
200002ec:	3201      	adds	r2, #1
200002ee:	00ff      	lsls	r7, r7, #3
200002f0:	4477      	add	r7, lr
200002f2:	683d      	ldr	r5, [r7, #0]
200002f4:	4035      	ands	r5, r6
200002f6:	4065      	eors	r5, r4
200002f8:	687f      	ldr	r7, [r7, #4]
200002fa:	4037      	ands	r7, r6
200002fc:	4067      	eors	r7, r4
200002fe:	c0a0      	stmia	r0!, {r5, r7}
20000300:	3902      	subs	r1, #2
20000302:	d8e2      	bhi.n	200002ca <RenderAttrib8_InLoop>
20000304:	9f08      	ldr	r7, [sp, #32]
20000306:	d0bd      	beq.n	20000284 <RenderAttrib8_Last>
20000308:	9a01      	ldr	r2, [sp, #4]
2000030a:	e7b3      	b.n	20000274 <RenderAttrib8_OutLoop>

2000030c <RenderAttrib8_Addr>:
2000030c:	200218d8 	.word	0x200218d8

20000310 <MemSet4>:
20000310:	b5f0      	push	{r4, r5, r6, r7, lr}
20000312:	460b      	mov	r3, r1
20000314:	460c      	mov	r4, r1
20000316:	460d      	mov	r5, r1
20000318:	460e      	mov	r6, r1
2000031a:	460f      	mov	r7, r1
2000031c:	e004      	b.n	20000328 <MemSet4+0x18>
2000031e:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000320:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000322:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000324:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000326:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000328:	3a1e      	subs	r2, #30
2000032a:	daf8      	bge.n	2000031e <MemSet4+0xe>
2000032c:	321e      	adds	r2, #30
2000032e:	e000      	b.n	20000332 <MemSet4+0x22>
20000330:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000332:	3a06      	subs	r2, #6
20000334:	dafc      	bge.n	20000330 <MemSet4+0x20>
20000336:	3206      	adds	r2, #6
20000338:	e000      	b.n	2000033c <MemSet4+0x2c>
2000033a:	c002      	stmia	r0!, {r1}
2000033c:	3a01      	subs	r2, #1
2000033e:	dafc      	bge.n	2000033a <MemSet4+0x2a>
20000340:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

20000344 <RenderCText>:
20000344:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000346:	9c08      	ldr	r4, [sp, #32]
20000348:	4e40      	ldr	r6, [pc, #256]	; (2000044c <RenderCText_pSioBase>)
2000034a:	6632      	str	r2, [r6, #96]	; 0x60
2000034c:	8a62      	ldrh	r2, [r4, #18]
2000034e:	6672      	str	r2, [r6, #100]	; 0x64
20000350:	8925      	ldrh	r5, [r4, #8]
20000352:	2703      	movs	r7, #3
20000354:	43bd      	bics	r5, r7
20000356:	9508      	str	r5, [sp, #32]
20000358:	43b9      	bics	r1, r7
2000035a:	43bb      	bics	r3, r7
2000035c:	9302      	str	r3, [sp, #8]
2000035e:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000360:	6f32      	ldr	r2, [r6, #112]	; 0x70
20000362:	022d      	lsls	r5, r5, #8
20000364:	6963      	ldr	r3, [r4, #20]
20000366:	442b      	add	r3, r5
20000368:	8865      	ldrh	r5, [r4, #2]
2000036a:	436a      	muls	r2, r5
2000036c:	68e5      	ldr	r5, [r4, #12]
2000036e:	442a      	add	r2, r5
20000370:	9201      	str	r2, [sp, #4]
20000372:	08ce      	lsrs	r6, r1, #3
20000374:	4432      	add	r2, r6
20000376:	4432      	add	r2, r6
20000378:	4432      	add	r2, r6
2000037a:	4d33      	ldr	r5, [pc, #204]	; (20000448 <RenderCText_Addr>)
2000037c:	46ae      	mov	lr, r5
2000037e:	074e      	lsls	r6, r1, #29
20000380:	d51c      	bpl.n	200003bc <RenderCText+0x78>
20000382:	7815      	ldrb	r5, [r2, #0]
20000384:	5d5d      	ldrb	r5, [r3, r5]
20000386:	7854      	ldrb	r4, [r2, #1]
20000388:	0227      	lsls	r7, r4, #8
2000038a:	4327      	orrs	r7, r4
2000038c:	043c      	lsls	r4, r7, #16
2000038e:	433c      	orrs	r4, r7
20000390:	7896      	ldrb	r6, [r2, #2]
20000392:	3203      	adds	r2, #3
20000394:	0237      	lsls	r7, r6, #8
20000396:	4337      	orrs	r7, r6
20000398:	043e      	lsls	r6, r7, #16
2000039a:	433e      	orrs	r6, r7
2000039c:	4066      	eors	r6, r4
2000039e:	00ed      	lsls	r5, r5, #3
200003a0:	4475      	add	r5, lr
200003a2:	686f      	ldr	r7, [r5, #4]
200003a4:	4037      	ands	r7, r6
200003a6:	4067      	eors	r7, r4
200003a8:	c080      	stmia	r0!, {r7}
200003aa:	3104      	adds	r1, #4
200003ac:	9f08      	ldr	r7, [sp, #32]
200003ae:	42b9      	cmp	r1, r7
200003b0:	d301      	bcc.n	200003b6 <RenderCText+0x72>
200003b2:	2100      	movs	r1, #0
200003b4:	9a01      	ldr	r2, [sp, #4]
200003b6:	9f02      	ldr	r7, [sp, #8]
200003b8:	3f04      	subs	r7, #4
200003ba:	9702      	str	r7, [sp, #8]
200003bc:	9f08      	ldr	r7, [sp, #32]
200003be:	1a7f      	subs	r7, r7, r1

200003c0 <RenderCText_OutLoop>:
200003c0:	9e02      	ldr	r6, [sp, #8]
200003c2:	42b7      	cmp	r7, r6
200003c4:	d900      	bls.n	200003c8 <RenderCText_OutLoop+0x8>
200003c6:	4637      	mov	r7, r6
200003c8:	2f08      	cmp	r7, #8
200003ca:	d219      	bcs.n	20000400 <RenderCText_Last+0x30>
200003cc:	2f04      	cmp	r7, #4
200003ce:	d316      	bcc.n	200003fe <RenderCText_Last+0x2e>

200003d0 <RenderCText_Last>:
200003d0:	7815      	ldrb	r5, [r2, #0]
200003d2:	5d5d      	ldrb	r5, [r3, r5]
200003d4:	7854      	ldrb	r4, [r2, #1]
200003d6:	0221      	lsls	r1, r4, #8
200003d8:	4321      	orrs	r1, r4
200003da:	040c      	lsls	r4, r1, #16
200003dc:	430c      	orrs	r4, r1
200003de:	7896      	ldrb	r6, [r2, #2]
200003e0:	3203      	adds	r2, #3
200003e2:	0231      	lsls	r1, r6, #8
200003e4:	4331      	orrs	r1, r6
200003e6:	040e      	lsls	r6, r1, #16
200003e8:	430e      	orrs	r6, r1
200003ea:	4066      	eors	r6, r4
200003ec:	00ed      	lsls	r5, r5, #3
200003ee:	4475      	add	r5, lr
200003f0:	6829      	ldr	r1, [r5, #0]
200003f2:	4031      	ands	r1, r6
200003f4:	4061      	eors	r1, r4
200003f6:	c002      	stmia	r0!, {r1}
200003f8:	9a01      	ldr	r2, [sp, #4]
200003fa:	2f04      	cmp	r7, #4
200003fc:	d8e0      	bhi.n	200003c0 <RenderCText_OutLoop>
200003fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000400:	08b9      	lsrs	r1, r7, #2
20000402:	008d      	lsls	r5, r1, #2
20000404:	1b76      	subs	r6, r6, r5
20000406:	9602      	str	r6, [sp, #8]
20000408:	3901      	subs	r1, #1

2000040a <RenderCText_InLoop>:
2000040a:	7815      	ldrb	r5, [r2, #0]
2000040c:	5d5d      	ldrb	r5, [r3, r5]
2000040e:	7854      	ldrb	r4, [r2, #1]
20000410:	0227      	lsls	r7, r4, #8
20000412:	4327      	orrs	r7, r4
20000414:	043c      	lsls	r4, r7, #16
20000416:	433c      	orrs	r4, r7
20000418:	7896      	ldrb	r6, [r2, #2]
2000041a:	3203      	adds	r2, #3
2000041c:	0237      	lsls	r7, r6, #8
2000041e:	4337      	orrs	r7, r6
20000420:	043e      	lsls	r6, r7, #16
20000422:	433e      	orrs	r6, r7
20000424:	4066      	eors	r6, r4
20000426:	00ed      	lsls	r5, r5, #3
20000428:	4475      	add	r5, lr
2000042a:	682f      	ldr	r7, [r5, #0]
2000042c:	4037      	ands	r7, r6
2000042e:	4067      	eors	r7, r4
20000430:	c080      	stmia	r0!, {r7}
20000432:	686f      	ldr	r7, [r5, #4]
20000434:	4037      	ands	r7, r6
20000436:	4067      	eors	r7, r4
20000438:	c080      	stmia	r0!, {r7}
2000043a:	3902      	subs	r1, #2
2000043c:	d8e5      	bhi.n	2000040a <RenderCText_InLoop>
2000043e:	9f08      	ldr	r7, [sp, #32]
20000440:	d0c6      	beq.n	200003d0 <RenderCText_Last>
20000442:	9a01      	ldr	r2, [sp, #4]
20000444:	e7bc      	b.n	200003c0 <RenderCText_OutLoop>
20000446:	46c0      	nop			; (mov r8, r8)

20000448 <RenderCText_Addr>:
20000448:	200218d8 	.word	0x200218d8

2000044c <RenderCText_pSioBase>:
2000044c:	d0000000 	.word	0xd0000000

20000450 <RenderDText>:
20000450:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000452:	4644      	mov	r4, r8
20000454:	b410      	push	{r4}
20000456:	9c09      	ldr	r4, [sp, #36]	; 0x24
20000458:	4e68      	ldr	r6, [pc, #416]	; (200005fc <RenderDText_pSioBase>)
2000045a:	6632      	str	r2, [r6, #96]	; 0x60
2000045c:	7ce2      	ldrb	r2, [r4, #19]
2000045e:	6672      	str	r2, [r6, #100]	; 0x64
20000460:	8925      	ldrh	r5, [r4, #8]
20000462:	2703      	movs	r7, #3
20000464:	43bd      	bics	r5, r7
20000466:	9509      	str	r5, [sp, #36]	; 0x24
20000468:	43b9      	bics	r1, r7
2000046a:	43bb      	bics	r3, r7
2000046c:	9303      	str	r3, [sp, #12]
2000046e:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000470:	6f32      	ldr	r2, [r6, #112]	; 0x70
20000472:	022d      	lsls	r5, r5, #8
20000474:	6963      	ldr	r3, [r4, #20]
20000476:	442b      	add	r3, r5
20000478:	4698      	mov	r8, r3
2000047a:	8865      	ldrh	r5, [r4, #2]
2000047c:	436a      	muls	r2, r5
2000047e:	68e5      	ldr	r5, [r4, #12]
20000480:	442a      	add	r2, r5
20000482:	9202      	str	r2, [sp, #8]
20000484:	69a3      	ldr	r3, [r4, #24]
20000486:	9301      	str	r3, [sp, #4]
20000488:	08ce      	lsrs	r6, r1, #3
2000048a:	00b6      	lsls	r6, r6, #2
2000048c:	4433      	add	r3, r6
2000048e:	090e      	lsrs	r6, r1, #4
20000490:	4432      	add	r2, r6
20000492:	7ca4      	ldrb	r4, [r4, #18]
20000494:	0225      	lsls	r5, r4, #8
20000496:	4325      	orrs	r5, r4
20000498:	042c      	lsls	r4, r5, #16
2000049a:	432c      	orrs	r4, r5
2000049c:	4d56      	ldr	r5, [pc, #344]	; (200005f8 <RenderDText_Addr>)
2000049e:	46ae      	mov	lr, r5
200004a0:	070e      	lsls	r6, r1, #28
200004a2:	d037      	beq.n	20000514 <RenderDText+0xc4>
200004a4:	0f35      	lsrs	r5, r6, #28
200004a6:	2610      	movs	r6, #16
200004a8:	1b76      	subs	r6, r6, r5
200004aa:	1989      	adds	r1, r1, r6
200004ac:	9f03      	ldr	r7, [sp, #12]
200004ae:	1bbf      	subs	r7, r7, r6
200004b0:	9703      	str	r7, [sp, #12]
200004b2:	b402      	push	{r1}
200004b4:	7817      	ldrb	r7, [r2, #0]
200004b6:	3201      	adds	r2, #1
200004b8:	4447      	add	r7, r8
200004ba:	783f      	ldrb	r7, [r7, #0]
200004bc:	cb40      	ldmia	r3!, {r6}
200004be:	4066      	eors	r6, r4
200004c0:	00ff      	lsls	r7, r7, #3
200004c2:	4477      	add	r7, lr
200004c4:	6839      	ldr	r1, [r7, #0]
200004c6:	4031      	ands	r1, r6
200004c8:	4061      	eors	r1, r4
200004ca:	2d04      	cmp	r5, #4
200004cc:	d806      	bhi.n	200004dc <RenderDText+0x8c>
200004ce:	0c09      	lsrs	r1, r1, #16
200004d0:	7001      	strb	r1, [r0, #0]
200004d2:	7041      	strb	r1, [r0, #1]
200004d4:	0a09      	lsrs	r1, r1, #8
200004d6:	7081      	strb	r1, [r0, #2]
200004d8:	70c1      	strb	r1, [r0, #3]
200004da:	3004      	adds	r0, #4
200004dc:	cb40      	ldmia	r3!, {r6}
200004de:	4066      	eors	r6, r4
200004e0:	6879      	ldr	r1, [r7, #4]
200004e2:	4031      	ands	r1, r6
200004e4:	4061      	eors	r1, r4
200004e6:	2d08      	cmp	r5, #8
200004e8:	d806      	bhi.n	200004f8 <RenderDText+0xa8>
200004ea:	7001      	strb	r1, [r0, #0]
200004ec:	7041      	strb	r1, [r0, #1]
200004ee:	0a09      	lsrs	r1, r1, #8
200004f0:	7081      	strb	r1, [r0, #2]
200004f2:	70c1      	strb	r1, [r0, #3]
200004f4:	0209      	lsls	r1, r1, #8
200004f6:	3004      	adds	r0, #4
200004f8:	0c09      	lsrs	r1, r1, #16
200004fa:	7001      	strb	r1, [r0, #0]
200004fc:	7041      	strb	r1, [r0, #1]
200004fe:	0a09      	lsrs	r1, r1, #8
20000500:	7081      	strb	r1, [r0, #2]
20000502:	70c1      	strb	r1, [r0, #3]
20000504:	3004      	adds	r0, #4
20000506:	bc02      	pop	{r1}
20000508:	9f09      	ldr	r7, [sp, #36]	; 0x24
2000050a:	42b9      	cmp	r1, r7
2000050c:	d302      	bcc.n	20000514 <RenderDText+0xc4>
2000050e:	2100      	movs	r1, #0
20000510:	9a02      	ldr	r2, [sp, #8]
20000512:	9b01      	ldr	r3, [sp, #4]
20000514:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000516:	1a7f      	subs	r7, r7, r1

20000518 <RenderDText_OutLoop>:
20000518:	9e03      	ldr	r6, [sp, #12]
2000051a:	42b7      	cmp	r7, r6
2000051c:	d900      	bls.n	20000520 <RenderDText_OutLoop+0x8>
2000051e:	4637      	mov	r7, r6
20000520:	2f10      	cmp	r7, #16
20000522:	d232      	bcs.n	2000058a <RenderDText_Last+0x60>
20000524:	2f04      	cmp	r7, #4
20000526:	d32d      	bcc.n	20000584 <RenderDText_Last+0x5a>
20000528:	4639      	mov	r1, r7

2000052a <RenderDText_Last>:
2000052a:	b480      	push	{r7}
2000052c:	7817      	ldrb	r7, [r2, #0]
2000052e:	3201      	adds	r2, #1
20000530:	4447      	add	r7, r8
20000532:	783f      	ldrb	r7, [r7, #0]
20000534:	cb40      	ldmia	r3!, {r6}
20000536:	4066      	eors	r6, r4
20000538:	00ff      	lsls	r7, r7, #3
2000053a:	4477      	add	r7, lr
2000053c:	683d      	ldr	r5, [r7, #0]
2000053e:	4035      	ands	r5, r6
20000540:	4065      	eors	r5, r4
20000542:	7005      	strb	r5, [r0, #0]
20000544:	7045      	strb	r5, [r0, #1]
20000546:	0a2d      	lsrs	r5, r5, #8
20000548:	7085      	strb	r5, [r0, #2]
2000054a:	70c5      	strb	r5, [r0, #3]
2000054c:	3004      	adds	r0, #4
2000054e:	2904      	cmp	r1, #4
20000550:	d913      	bls.n	2000057a <RenderDText_Last+0x50>
20000552:	0a2d      	lsrs	r5, r5, #8
20000554:	7005      	strb	r5, [r0, #0]
20000556:	7045      	strb	r5, [r0, #1]
20000558:	0a2d      	lsrs	r5, r5, #8
2000055a:	7085      	strb	r5, [r0, #2]
2000055c:	70c5      	strb	r5, [r0, #3]
2000055e:	3004      	adds	r0, #4
20000560:	2908      	cmp	r1, #8
20000562:	d90a      	bls.n	2000057a <RenderDText_Last+0x50>
20000564:	cb40      	ldmia	r3!, {r6}
20000566:	4066      	eors	r6, r4
20000568:	687f      	ldr	r7, [r7, #4]
2000056a:	4037      	ands	r7, r6
2000056c:	4067      	eors	r7, r4
2000056e:	7007      	strb	r7, [r0, #0]
20000570:	7047      	strb	r7, [r0, #1]
20000572:	0a3f      	lsrs	r7, r7, #8
20000574:	7087      	strb	r7, [r0, #2]
20000576:	70c7      	strb	r7, [r0, #3]
20000578:	3004      	adds	r0, #4
2000057a:	bc80      	pop	{r7}
2000057c:	9a02      	ldr	r2, [sp, #8]
2000057e:	9b01      	ldr	r3, [sp, #4]
20000580:	2f10      	cmp	r7, #16
20000582:	d2c9      	bcs.n	20000518 <RenderDText_OutLoop>
20000584:	bc10      	pop	{r4}
20000586:	46a0      	mov	r8, r4
20000588:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
2000058a:	08b9      	lsrs	r1, r7, #2
2000058c:	008d      	lsls	r5, r1, #2
2000058e:	1b76      	subs	r6, r6, r5
20000590:	9603      	str	r6, [sp, #12]
20000592:	3903      	subs	r1, #3

20000594 <RenderDText_InLoop>:
20000594:	7817      	ldrb	r7, [r2, #0]
20000596:	3201      	adds	r2, #1
20000598:	4447      	add	r7, r8
2000059a:	783f      	ldrb	r7, [r7, #0]
2000059c:	cb40      	ldmia	r3!, {r6}
2000059e:	4066      	eors	r6, r4
200005a0:	00ff      	lsls	r7, r7, #3
200005a2:	4477      	add	r7, lr
200005a4:	683d      	ldr	r5, [r7, #0]
200005a6:	4035      	ands	r5, r6
200005a8:	4065      	eors	r5, r4
200005aa:	7005      	strb	r5, [r0, #0]
200005ac:	7045      	strb	r5, [r0, #1]
200005ae:	0a2d      	lsrs	r5, r5, #8
200005b0:	7085      	strb	r5, [r0, #2]
200005b2:	70c5      	strb	r5, [r0, #3]
200005b4:	0a2d      	lsrs	r5, r5, #8
200005b6:	7105      	strb	r5, [r0, #4]
200005b8:	7145      	strb	r5, [r0, #5]
200005ba:	0a2d      	lsrs	r5, r5, #8
200005bc:	7185      	strb	r5, [r0, #6]
200005be:	71c5      	strb	r5, [r0, #7]
200005c0:	3008      	adds	r0, #8
200005c2:	cb40      	ldmia	r3!, {r6}
200005c4:	4066      	eors	r6, r4
200005c6:	687f      	ldr	r7, [r7, #4]
200005c8:	4037      	ands	r7, r6
200005ca:	4067      	eors	r7, r4
200005cc:	7007      	strb	r7, [r0, #0]
200005ce:	7047      	strb	r7, [r0, #1]
200005d0:	0a3f      	lsrs	r7, r7, #8
200005d2:	7087      	strb	r7, [r0, #2]
200005d4:	70c7      	strb	r7, [r0, #3]
200005d6:	0a3f      	lsrs	r7, r7, #8
200005d8:	7107      	strb	r7, [r0, #4]
200005da:	7147      	strb	r7, [r0, #5]
200005dc:	0a3f      	lsrs	r7, r7, #8
200005de:	7187      	strb	r7, [r0, #6]
200005e0:	71c7      	strb	r7, [r0, #7]
200005e2:	3008      	adds	r0, #8
200005e4:	3904      	subs	r1, #4
200005e6:	d8d5      	bhi.n	20000594 <RenderDText_InLoop>
200005e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
200005ea:	3103      	adds	r1, #3
200005ec:	0089      	lsls	r1, r1, #2
200005ee:	d19c      	bne.n	2000052a <RenderDText_Last>
200005f0:	9a02      	ldr	r2, [sp, #8]
200005f2:	9b01      	ldr	r3, [sp, #4]
200005f4:	e790      	b.n	20000518 <RenderDText_OutLoop>
200005f6:	46c0      	nop			; (mov r8, r8)

200005f8 <RenderDText_Addr>:
200005f8:	200218d8 	.word	0x200218d8

200005fc <RenderDText_pSioBase>:
200005fc:	d0000000 	.word	0xd0000000

20000600 <RenderFastSprite>:
20000600:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000602:	6817      	ldr	r7, [r2, #0]
20000604:	46be      	mov	lr, r7
20000606:	8c17      	ldrh	r7, [r2, #32]
20000608:	9701      	str	r7, [sp, #4]
2000060a:	8ad2      	ldrh	r2, [r2, #22]
2000060c:	2100      	movs	r1, #0
2000060e:	9f01      	ldr	r7, [sp, #4]
20000610:	3f01      	subs	r7, #1
20000612:	d332      	bcc.n	2000067a <RenderFastSprite+0x7a>
20000614:	9701      	str	r7, [sp, #4]
20000616:	4677      	mov	r7, lr
20000618:	cf08      	ldmia	r7!, {r3}
2000061a:	46be      	mov	lr, r7
2000061c:	8a5f      	ldrh	r7, [r3, #18]
2000061e:	b23f      	sxth	r7, r7
20000620:	9c00      	ldr	r4, [sp, #0]
20000622:	1be4      	subs	r4, r4, r7
20000624:	d4f3      	bmi.n	2000060e <RenderFastSprite+0xe>
20000626:	8adf      	ldrh	r7, [r3, #22]
20000628:	42bc      	cmp	r4, r7
2000062a:	daf0      	bge.n	2000060e <RenderFastSprite+0xe>
2000062c:	685f      	ldr	r7, [r3, #4]
2000062e:	5d3d      	ldrb	r5, [r7, r4]
20000630:	00ad      	lsls	r5, r5, #2
20000632:	689f      	ldr	r7, [r3, #8]
20000634:	5d3e      	ldrb	r6, [r7, r4]
20000636:	00b6      	lsls	r6, r6, #2
20000638:	8b1f      	ldrh	r7, [r3, #24]
2000063a:	437c      	muls	r4, r7
2000063c:	681f      	ldr	r7, [r3, #0]
2000063e:	443c      	add	r4, r7
20000640:	8a1b      	ldrh	r3, [r3, #16]
20000642:	b21b      	sxth	r3, r3
20000644:	195b      	adds	r3, r3, r5
20000646:	1acf      	subs	r7, r1, r3
20000648:	dd02      	ble.n	20000650 <RenderFastSprite+0x50>
2000064a:	19ed      	adds	r5, r5, r7
2000064c:	1bf6      	subs	r6, r6, r7
2000064e:	460b      	mov	r3, r1
20000650:	1ad7      	subs	r7, r2, r3
20000652:	42be      	cmp	r6, r7
20000654:	dd00      	ble.n	20000658 <RenderFastSprite+0x58>
20000656:	463e      	mov	r6, r7
20000658:	2703      	movs	r7, #3
2000065a:	43bb      	bics	r3, r7
2000065c:	43bd      	bics	r5, r7
2000065e:	43be      	bics	r6, r7
20000660:	ddd5      	ble.n	2000060e <RenderFastSprite+0xe>
20000662:	1a5f      	subs	r7, r3, r1
20000664:	dd04      	ble.n	20000670 <RenderFastSprite+0x70>
20000666:	08bf      	lsrs	r7, r7, #2
20000668:	c080      	stmia	r0!, {r7}
2000066a:	9f02      	ldr	r7, [sp, #8]
2000066c:	c080      	stmia	r0!, {r7}
2000066e:	4619      	mov	r1, r3
20000670:	1967      	adds	r7, r4, r5
20000672:	08b4      	lsrs	r4, r6, #2
20000674:	c090      	stmia	r0!, {r4, r7}
20000676:	1989      	adds	r1, r1, r6
20000678:	e7c9      	b.n	2000060e <RenderFastSprite+0xe>
2000067a:	1a52      	subs	r2, r2, r1
2000067c:	d902      	bls.n	20000684 <RenderFastSprite+0x84>
2000067e:	0892      	lsrs	r2, r2, #2
20000680:	9b02      	ldr	r3, [sp, #8]
20000682:	c00c      	stmia	r0!, {r2, r3}
20000684:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

20000688 <RenderFText>:
20000688:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
2000068a:	9c08      	ldr	r4, [sp, #32]
2000068c:	4e3a      	ldr	r6, [pc, #232]	; (20000778 <RenderFText_pSioBase>)
2000068e:	6632      	str	r2, [r6, #96]	; 0x60
20000690:	8a62      	ldrh	r2, [r4, #18]
20000692:	6672      	str	r2, [r6, #100]	; 0x64
20000694:	8925      	ldrh	r5, [r4, #8]
20000696:	2703      	movs	r7, #3
20000698:	43bd      	bics	r5, r7
2000069a:	9508      	str	r5, [sp, #32]
2000069c:	43b9      	bics	r1, r7
2000069e:	43bb      	bics	r3, r7
200006a0:	9302      	str	r3, [sp, #8]
200006a2:	6f75      	ldr	r5, [r6, #116]	; 0x74
200006a4:	6f32      	ldr	r2, [r6, #112]	; 0x70
200006a6:	022d      	lsls	r5, r5, #8
200006a8:	6963      	ldr	r3, [r4, #20]
200006aa:	442b      	add	r3, r5
200006ac:	8865      	ldrh	r5, [r4, #2]
200006ae:	436a      	muls	r2, r5
200006b0:	68e5      	ldr	r5, [r4, #12]
200006b2:	442a      	add	r2, r5
200006b4:	9201      	str	r2, [sp, #4]
200006b6:	08ce      	lsrs	r6, r1, #3
200006b8:	0076      	lsls	r6, r6, #1
200006ba:	4432      	add	r2, r6
200006bc:	7e24      	ldrb	r4, [r4, #24]
200006be:	0225      	lsls	r5, r4, #8
200006c0:	4325      	orrs	r5, r4
200006c2:	042c      	lsls	r4, r5, #16
200006c4:	432c      	orrs	r4, r5
200006c6:	4d2b      	ldr	r5, [pc, #172]	; (20000774 <RenderFText_Addr>)
200006c8:	46ae      	mov	lr, r5
200006ca:	074e      	lsls	r6, r1, #29
200006cc:	d517      	bpl.n	200006fe <RenderFText+0x76>
200006ce:	7815      	ldrb	r5, [r2, #0]
200006d0:	5d5d      	ldrb	r5, [r3, r5]
200006d2:	7856      	ldrb	r6, [r2, #1]
200006d4:	3202      	adds	r2, #2
200006d6:	0237      	lsls	r7, r6, #8
200006d8:	4337      	orrs	r7, r6
200006da:	043e      	lsls	r6, r7, #16
200006dc:	433e      	orrs	r6, r7
200006de:	4066      	eors	r6, r4
200006e0:	00ed      	lsls	r5, r5, #3
200006e2:	4475      	add	r5, lr
200006e4:	686f      	ldr	r7, [r5, #4]
200006e6:	4037      	ands	r7, r6
200006e8:	4067      	eors	r7, r4
200006ea:	c080      	stmia	r0!, {r7}
200006ec:	3104      	adds	r1, #4
200006ee:	9f08      	ldr	r7, [sp, #32]
200006f0:	42b9      	cmp	r1, r7
200006f2:	d301      	bcc.n	200006f8 <RenderFText+0x70>
200006f4:	2100      	movs	r1, #0
200006f6:	9a01      	ldr	r2, [sp, #4]
200006f8:	9f02      	ldr	r7, [sp, #8]
200006fa:	3f04      	subs	r7, #4
200006fc:	9702      	str	r7, [sp, #8]
200006fe:	9f08      	ldr	r7, [sp, #32]
20000700:	1a7f      	subs	r7, r7, r1

20000702 <RenderFText_OutLoop>:
20000702:	9e02      	ldr	r6, [sp, #8]
20000704:	42b7      	cmp	r7, r6
20000706:	d900      	bls.n	2000070a <RenderFText_OutLoop+0x8>
20000708:	4637      	mov	r7, r6
2000070a:	2f08      	cmp	r7, #8
2000070c:	d214      	bcs.n	20000738 <RenderFText_Last+0x26>
2000070e:	2f04      	cmp	r7, #4
20000710:	d311      	bcc.n	20000736 <RenderFText_Last+0x24>

20000712 <RenderFText_Last>:
20000712:	7815      	ldrb	r5, [r2, #0]
20000714:	5d5d      	ldrb	r5, [r3, r5]
20000716:	7856      	ldrb	r6, [r2, #1]
20000718:	3202      	adds	r2, #2
2000071a:	0231      	lsls	r1, r6, #8
2000071c:	4331      	orrs	r1, r6
2000071e:	040e      	lsls	r6, r1, #16
20000720:	430e      	orrs	r6, r1
20000722:	4066      	eors	r6, r4
20000724:	00ed      	lsls	r5, r5, #3
20000726:	4475      	add	r5, lr
20000728:	6829      	ldr	r1, [r5, #0]
2000072a:	4031      	ands	r1, r6
2000072c:	4061      	eors	r1, r4
2000072e:	c002      	stmia	r0!, {r1}
20000730:	9a01      	ldr	r2, [sp, #4]
20000732:	2f04      	cmp	r7, #4
20000734:	d8e5      	bhi.n	20000702 <RenderFText_OutLoop>
20000736:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000738:	08b9      	lsrs	r1, r7, #2
2000073a:	008d      	lsls	r5, r1, #2
2000073c:	1b76      	subs	r6, r6, r5
2000073e:	9602      	str	r6, [sp, #8]
20000740:	3901      	subs	r1, #1

20000742 <RenderFText_InLoop>:
20000742:	7815      	ldrb	r5, [r2, #0]
20000744:	5d5d      	ldrb	r5, [r3, r5]
20000746:	7856      	ldrb	r6, [r2, #1]
20000748:	3202      	adds	r2, #2
2000074a:	0237      	lsls	r7, r6, #8
2000074c:	4337      	orrs	r7, r6
2000074e:	043e      	lsls	r6, r7, #16
20000750:	433e      	orrs	r6, r7
20000752:	4066      	eors	r6, r4
20000754:	00ed      	lsls	r5, r5, #3
20000756:	4475      	add	r5, lr
20000758:	682f      	ldr	r7, [r5, #0]
2000075a:	4037      	ands	r7, r6
2000075c:	4067      	eors	r7, r4
2000075e:	c080      	stmia	r0!, {r7}
20000760:	686f      	ldr	r7, [r5, #4]
20000762:	4037      	ands	r7, r6
20000764:	4067      	eors	r7, r4
20000766:	c080      	stmia	r0!, {r7}
20000768:	3902      	subs	r1, #2
2000076a:	d8ea      	bhi.n	20000742 <RenderFText_InLoop>
2000076c:	9f08      	ldr	r7, [sp, #32]
2000076e:	d0d0      	beq.n	20000712 <RenderFText_Last>
20000770:	9a01      	ldr	r2, [sp, #4]
20000772:	e7c6      	b.n	20000702 <RenderFText_OutLoop>

20000774 <RenderFText_Addr>:
20000774:	200218d8 	.word	0x200218d8

20000778 <RenderFText_pSioBase>:
20000778:	d0000000 	.word	0xd0000000

2000077c <RenderGraph1>:
2000077c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000077e:	9c06      	ldr	r4, [sp, #24]
20000780:	8925      	ldrh	r5, [r4, #8]
20000782:	2703      	movs	r7, #3
20000784:	43bd      	bics	r5, r7
20000786:	9506      	str	r5, [sp, #24]
20000788:	43b9      	bics	r1, r7
2000078a:	43bb      	bics	r3, r7
2000078c:	9300      	str	r3, [sp, #0]
2000078e:	8865      	ldrh	r5, [r4, #2]
20000790:	436a      	muls	r2, r5
20000792:	68e5      	ldr	r5, [r4, #12]
20000794:	442a      	add	r2, r5
20000796:	4696      	mov	lr, r2
20000798:	08ca      	lsrs	r2, r1, #3
2000079a:	4472      	add	r2, lr
2000079c:	7d66      	ldrb	r6, [r4, #21]
2000079e:	0237      	lsls	r7, r6, #8
200007a0:	4337      	orrs	r7, r6
200007a2:	043e      	lsls	r6, r7, #16
200007a4:	433e      	orrs	r6, r7
200007a6:	7d24      	ldrb	r4, [r4, #20]
200007a8:	0225      	lsls	r5, r4, #8
200007aa:	4325      	orrs	r5, r4
200007ac:	042c      	lsls	r4, r5, #16
200007ae:	432c      	orrs	r4, r5
200007b0:	4066      	eors	r6, r4
200007b2:	4b20      	ldr	r3, [pc, #128]	; (20000834 <RenderGraph1_Addr>)
200007b4:	074d      	lsls	r5, r1, #29
200007b6:	d510      	bpl.n	200007da <RenderGraph1+0x5e>
200007b8:	7815      	ldrb	r5, [r2, #0]
200007ba:	3201      	adds	r2, #1
200007bc:	00ed      	lsls	r5, r5, #3
200007be:	441d      	add	r5, r3
200007c0:	686f      	ldr	r7, [r5, #4]
200007c2:	4037      	ands	r7, r6
200007c4:	4067      	eors	r7, r4
200007c6:	c080      	stmia	r0!, {r7}
200007c8:	3104      	adds	r1, #4
200007ca:	9f06      	ldr	r7, [sp, #24]
200007cc:	42b9      	cmp	r1, r7
200007ce:	d301      	bcc.n	200007d4 <RenderGraph1+0x58>
200007d0:	2100      	movs	r1, #0
200007d2:	4672      	mov	r2, lr
200007d4:	9f00      	ldr	r7, [sp, #0]
200007d6:	3f04      	subs	r7, #4
200007d8:	9700      	str	r7, [sp, #0]
200007da:	9f06      	ldr	r7, [sp, #24]
200007dc:	1a7f      	subs	r7, r7, r1

200007de <RenderGraph1_OutLoop>:
200007de:	9d00      	ldr	r5, [sp, #0]
200007e0:	42af      	cmp	r7, r5
200007e2:	d900      	bls.n	200007e6 <RenderGraph1_OutLoop+0x8>
200007e4:	462f      	mov	r7, r5
200007e6:	2f08      	cmp	r7, #8
200007e8:	d20d      	bcs.n	20000806 <RenderGraph1_Last+0x18>
200007ea:	2f04      	cmp	r7, #4
200007ec:	d30a      	bcc.n	20000804 <RenderGraph1_Last+0x16>

200007ee <RenderGraph1_Last>:
200007ee:	7815      	ldrb	r5, [r2, #0]
200007f0:	3201      	adds	r2, #1
200007f2:	00ed      	lsls	r5, r5, #3
200007f4:	441d      	add	r5, r3
200007f6:	6829      	ldr	r1, [r5, #0]
200007f8:	4031      	ands	r1, r6
200007fa:	4061      	eors	r1, r4
200007fc:	c002      	stmia	r0!, {r1}
200007fe:	4672      	mov	r2, lr
20000800:	2f04      	cmp	r7, #4
20000802:	d8ec      	bhi.n	200007de <RenderGraph1_OutLoop>
20000804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20000806:	08b9      	lsrs	r1, r7, #2
20000808:	008f      	lsls	r7, r1, #2
2000080a:	1bed      	subs	r5, r5, r7
2000080c:	9500      	str	r5, [sp, #0]
2000080e:	3901      	subs	r1, #1

20000810 <RenderGraph1_InLoop>:
20000810:	7815      	ldrb	r5, [r2, #0]
20000812:	3201      	adds	r2, #1
20000814:	00ed      	lsls	r5, r5, #3
20000816:	441d      	add	r5, r3
20000818:	682f      	ldr	r7, [r5, #0]
2000081a:	4037      	ands	r7, r6
2000081c:	4067      	eors	r7, r4
2000081e:	c080      	stmia	r0!, {r7}
20000820:	686f      	ldr	r7, [r5, #4]
20000822:	4037      	ands	r7, r6
20000824:	4067      	eors	r7, r4
20000826:	c080      	stmia	r0!, {r7}
20000828:	3902      	subs	r1, #2
2000082a:	d8f1      	bhi.n	20000810 <RenderGraph1_InLoop>
2000082c:	9f06      	ldr	r7, [sp, #24]
2000082e:	d0de      	beq.n	200007ee <RenderGraph1_Last>
20000830:	4672      	mov	r2, lr
20000832:	e7d4      	b.n	200007de <RenderGraph1_OutLoop>

20000834 <RenderGraph1_Addr>:
20000834:	200218d8 	.word	0x200218d8

20000838 <RenderGraph2>:
20000838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000083a:	9c06      	ldr	r4, [sp, #24]
2000083c:	8927      	ldrh	r7, [r4, #8]
2000083e:	2603      	movs	r6, #3
20000840:	43b7      	bics	r7, r6
20000842:	43b1      	bics	r1, r6
20000844:	43b3      	bics	r3, r6
20000846:	9300      	str	r3, [sp, #0]
20000848:	8865      	ldrh	r5, [r4, #2]
2000084a:	436a      	muls	r2, r5
2000084c:	68e5      	ldr	r5, [r4, #12]
2000084e:	442a      	add	r2, r5
20000850:	4696      	mov	lr, r2
20000852:	088e      	lsrs	r6, r1, #2
20000854:	4432      	add	r2, r6
20000856:	6963      	ldr	r3, [r4, #20]
20000858:	1a7e      	subs	r6, r7, r1

2000085a <RenderGraph2_OutLoop>:
2000085a:	9c00      	ldr	r4, [sp, #0]
2000085c:	42a6      	cmp	r6, r4
2000085e:	d900      	bls.n	20000862 <RenderGraph2_OutLoop+0x8>
20000860:	4626      	mov	r6, r4
20000862:	2e04      	cmp	r6, #4
20000864:	d200      	bcs.n	20000868 <RenderGraph2_OutLoop+0xe>
20000866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20000868:	08b1      	lsrs	r1, r6, #2
2000086a:	008e      	lsls	r6, r1, #2
2000086c:	1ba4      	subs	r4, r4, r6
2000086e:	9400      	str	r4, [sp, #0]
20000870:	0849      	lsrs	r1, r1, #1
20000872:	d306      	bcc.n	20000882 <RenderGraph2_InLoop>
20000874:	7814      	ldrb	r4, [r2, #0]
20000876:	3201      	adds	r2, #1
20000878:	00a4      	lsls	r4, r4, #2
2000087a:	591d      	ldr	r5, [r3, r4]
2000087c:	c020      	stmia	r0!, {r5}
2000087e:	4209      	tst	r1, r1
20000880:	d009      	beq.n	20000896 <RenderGraph2_EndLoop>

20000882 <RenderGraph2_InLoop>:
20000882:	7814      	ldrb	r4, [r2, #0]
20000884:	00a4      	lsls	r4, r4, #2
20000886:	591d      	ldr	r5, [r3, r4]
20000888:	7854      	ldrb	r4, [r2, #1]
2000088a:	3202      	adds	r2, #2
2000088c:	00a4      	lsls	r4, r4, #2
2000088e:	591e      	ldr	r6, [r3, r4]
20000890:	c060      	stmia	r0!, {r5, r6}
20000892:	3901      	subs	r1, #1
20000894:	d1f5      	bne.n	20000882 <RenderGraph2_InLoop>

20000896 <RenderGraph2_EndLoop>:
20000896:	463e      	mov	r6, r7
20000898:	4672      	mov	r2, lr
2000089a:	e7de      	b.n	2000085a <RenderGraph2_OutLoop>

2000089c <RenderGraph4>:
2000089c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000089e:	9c06      	ldr	r4, [sp, #24]
200008a0:	8927      	ldrh	r7, [r4, #8]
200008a2:	2603      	movs	r6, #3
200008a4:	43b7      	bics	r7, r6
200008a6:	9706      	str	r7, [sp, #24]
200008a8:	43b1      	bics	r1, r6
200008aa:	43b3      	bics	r3, r6
200008ac:	9300      	str	r3, [sp, #0]
200008ae:	8865      	ldrh	r5, [r4, #2]
200008b0:	436a      	muls	r2, r5
200008b2:	68e5      	ldr	r5, [r4, #12]
200008b4:	442a      	add	r2, r5
200008b6:	4696      	mov	lr, r2
200008b8:	084e      	lsrs	r6, r1, #1
200008ba:	4432      	add	r2, r6
200008bc:	6963      	ldr	r3, [r4, #20]
200008be:	9e06      	ldr	r6, [sp, #24]
200008c0:	1a76      	subs	r6, r6, r1

200008c2 <RenderGraph4_OutLoop>:
200008c2:	9c00      	ldr	r4, [sp, #0]
200008c4:	42a6      	cmp	r6, r4
200008c6:	d900      	bls.n	200008ca <RenderGraph4_OutLoop+0x8>
200008c8:	4626      	mov	r6, r4
200008ca:	2e04      	cmp	r6, #4
200008cc:	d200      	bcs.n	200008d0 <RenderGraph4_OutLoop+0xe>
200008ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
200008d0:	08b1      	lsrs	r1, r6, #2
200008d2:	008e      	lsls	r6, r1, #2
200008d4:	1ba4      	subs	r4, r4, r6
200008d6:	9400      	str	r4, [sp, #0]
200008d8:	0849      	lsrs	r1, r1, #1
200008da:	d30b      	bcc.n	200008f4 <RenderGraph4_InLoop>
200008dc:	7814      	ldrb	r4, [r2, #0]
200008de:	0064      	lsls	r4, r4, #1
200008e0:	5b1d      	ldrh	r5, [r3, r4]
200008e2:	7854      	ldrb	r4, [r2, #1]
200008e4:	3202      	adds	r2, #2
200008e6:	0064      	lsls	r4, r4, #1
200008e8:	5b1e      	ldrh	r6, [r3, r4]
200008ea:	0436      	lsls	r6, r6, #16
200008ec:	4335      	orrs	r5, r6
200008ee:	c020      	stmia	r0!, {r5}
200008f0:	4209      	tst	r1, r1
200008f2:	d013      	beq.n	2000091c <RenderGraph4_EndLoop>

200008f4 <RenderGraph4_InLoop>:
200008f4:	7814      	ldrb	r4, [r2, #0]
200008f6:	0064      	lsls	r4, r4, #1
200008f8:	5b1d      	ldrh	r5, [r3, r4]
200008fa:	7854      	ldrb	r4, [r2, #1]
200008fc:	0064      	lsls	r4, r4, #1
200008fe:	5b1e      	ldrh	r6, [r3, r4]
20000900:	0436      	lsls	r6, r6, #16
20000902:	4335      	orrs	r5, r6
20000904:	7894      	ldrb	r4, [r2, #2]
20000906:	0064      	lsls	r4, r4, #1
20000908:	5b1e      	ldrh	r6, [r3, r4]
2000090a:	78d4      	ldrb	r4, [r2, #3]
2000090c:	3204      	adds	r2, #4
2000090e:	0064      	lsls	r4, r4, #1
20000910:	5b1f      	ldrh	r7, [r3, r4]
20000912:	043f      	lsls	r7, r7, #16
20000914:	433e      	orrs	r6, r7
20000916:	c060      	stmia	r0!, {r5, r6}
20000918:	3901      	subs	r1, #1
2000091a:	d1eb      	bne.n	200008f4 <RenderGraph4_InLoop>

2000091c <RenderGraph4_EndLoop>:
2000091c:	9e06      	ldr	r6, [sp, #24]
2000091e:	4672      	mov	r2, lr
20000920:	e7cf      	b.n	200008c2 <RenderGraph4_OutLoop>

20000922 <RenderGrad1>:
20000922:	2200      	movs	r2, #0

20000924 <RenderGrad2>:
20000924:	07d2      	lsls	r2, r2, #31
20000926:	0fd2      	lsrs	r2, r2, #31

20000928 <RenderGraph8>:
20000928:	b5f0      	push	{r4, r5, r6, r7, lr}
2000092a:	9c05      	ldr	r4, [sp, #20]
2000092c:	8927      	ldrh	r7, [r4, #8]
2000092e:	2603      	movs	r6, #3
20000930:	43b7      	bics	r7, r6
20000932:	43b1      	bics	r1, r6
20000934:	43b3      	bics	r3, r6
20000936:	8865      	ldrh	r5, [r4, #2]
20000938:	436a      	muls	r2, r5
2000093a:	68e5      	ldr	r5, [r4, #12]
2000093c:	1954      	adds	r4, r2, r5
2000093e:	1862      	adds	r2, r4, r1
20000940:	1a79      	subs	r1, r7, r1
20000942:	421b      	tst	r3, r3
20000944:	d008      	beq.n	20000958 <RenderGraph8+0x30>
20000946:	4299      	cmp	r1, r3
20000948:	d900      	bls.n	2000094c <RenderGraph8+0x24>
2000094a:	4619      	mov	r1, r3
2000094c:	1a5b      	subs	r3, r3, r1
2000094e:	0889      	lsrs	r1, r1, #2
20000950:	c006      	stmia	r0!, {r1, r2}
20000952:	4639      	mov	r1, r7
20000954:	4622      	mov	r2, r4
20000956:	e7f4      	b.n	20000942 <RenderGraph8+0x1a>
20000958:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

2000095c <RenderGraph8Mat>:
2000095c:	b5f0      	push	{r4, r5, r6, r7, lr}
2000095e:	0859      	lsrs	r1, r3, #1
20000960:	4249      	negs	r1, r1
20000962:	468e      	mov	lr, r1
20000964:	089f      	lsrs	r7, r3, #2
20000966:	9c05      	ldr	r4, [sp, #20]
20000968:	8961      	ldrh	r1, [r4, #10]
2000096a:	0849      	lsrs	r1, r1, #1
2000096c:	4249      	negs	r1, r1
2000096e:	1889      	adds	r1, r1, r2
20000970:	468c      	mov	ip, r1
20000972:	8b21      	ldrh	r1, [r4, #24]
20000974:	8b62      	ldrh	r2, [r4, #26]
20000976:	4b2c      	ldr	r3, [pc, #176]	; (20000a28 <RenderGraph8Mat_Interp>)
20000978:	68e6      	ldr	r6, [r4, #12]
2000097a:	611e      	str	r6, [r3, #16]
2000097c:	4e2b      	ldr	r6, [pc, #172]	; (20000a2c <RenderGraph8Mat_Ctrl>)
2000097e:	1a76      	subs	r6, r6, r1
20000980:	014d      	lsls	r5, r1, #5
20000982:	432e      	orrs	r6, r5
20000984:	3901      	subs	r1, #1
20000986:	188d      	adds	r5, r1, r2
20000988:	02ad      	lsls	r5, r5, #10
2000098a:	432e      	orrs	r6, r5
2000098c:	631e      	str	r6, [r3, #48]	; 0x30
2000098e:	4e27      	ldr	r6, [pc, #156]	; (20000a2c <RenderGraph8Mat_Ctrl>)
20000990:	0289      	lsls	r1, r1, #10
20000992:	430e      	orrs	r6, r1
20000994:	62de      	str	r6, [r3, #44]	; 0x2c
20000996:	6964      	ldr	r4, [r4, #20]
20000998:	6825      	ldr	r5, [r4, #0]
2000099a:	609d      	str	r5, [r3, #8]
2000099c:	68e6      	ldr	r6, [r4, #12]
2000099e:	60de      	str	r6, [r3, #12]
200009a0:	4672      	mov	r2, lr
200009a2:	4355      	muls	r5, r2
200009a4:	4372      	muls	r2, r6
200009a6:	6861      	ldr	r1, [r4, #4]
200009a8:	4666      	mov	r6, ip
200009aa:	4371      	muls	r1, r6
200009ac:	186d      	adds	r5, r5, r1
200009ae:	68a1      	ldr	r1, [r4, #8]
200009b0:	186d      	adds	r5, r5, r1
200009b2:	601d      	str	r5, [r3, #0]
200009b4:	6921      	ldr	r1, [r4, #16]
200009b6:	4371      	muls	r1, r6
200009b8:	1852      	adds	r2, r2, r1
200009ba:	6961      	ldr	r1, [r4, #20]
200009bc:	1852      	adds	r2, r2, r1
200009be:	605a      	str	r2, [r3, #4]
200009c0:	087f      	lsrs	r7, r7, #1
200009c2:	d30e      	bcc.n	200009e2 <RenderGraph8Mat+0x86>
200009c4:	69dc      	ldr	r4, [r3, #28]
200009c6:	7826      	ldrb	r6, [r4, #0]
200009c8:	69dc      	ldr	r4, [r3, #28]
200009ca:	7825      	ldrb	r5, [r4, #0]
200009cc:	022d      	lsls	r5, r5, #8
200009ce:	432e      	orrs	r6, r5
200009d0:	69dc      	ldr	r4, [r3, #28]
200009d2:	7825      	ldrb	r5, [r4, #0]
200009d4:	042d      	lsls	r5, r5, #16
200009d6:	432e      	orrs	r6, r5
200009d8:	69dc      	ldr	r4, [r3, #28]
200009da:	7825      	ldrb	r5, [r4, #0]
200009dc:	062d      	lsls	r5, r5, #24
200009de:	432e      	orrs	r6, r5
200009e0:	c040      	stmia	r0!, {r6}
200009e2:	423f      	tst	r7, r7
200009e4:	d01e      	beq.n	20000a24 <RenderGraph8Mat+0xc8>
200009e6:	69dc      	ldr	r4, [r3, #28]
200009e8:	7821      	ldrb	r1, [r4, #0]
200009ea:	69dc      	ldr	r4, [r3, #28]
200009ec:	7824      	ldrb	r4, [r4, #0]
200009ee:	0224      	lsls	r4, r4, #8
200009f0:	4321      	orrs	r1, r4
200009f2:	69dc      	ldr	r4, [r3, #28]
200009f4:	7824      	ldrb	r4, [r4, #0]
200009f6:	0424      	lsls	r4, r4, #16
200009f8:	4321      	orrs	r1, r4
200009fa:	69dc      	ldr	r4, [r3, #28]
200009fc:	7824      	ldrb	r4, [r4, #0]
200009fe:	0624      	lsls	r4, r4, #24
20000a00:	4321      	orrs	r1, r4
20000a02:	69dc      	ldr	r4, [r3, #28]
20000a04:	7822      	ldrb	r2, [r4, #0]
20000a06:	69dc      	ldr	r4, [r3, #28]
20000a08:	7824      	ldrb	r4, [r4, #0]
20000a0a:	0224      	lsls	r4, r4, #8
20000a0c:	4322      	orrs	r2, r4
20000a0e:	69dc      	ldr	r4, [r3, #28]
20000a10:	7824      	ldrb	r4, [r4, #0]
20000a12:	0424      	lsls	r4, r4, #16
20000a14:	4322      	orrs	r2, r4
20000a16:	69dc      	ldr	r4, [r3, #28]
20000a18:	7824      	ldrb	r4, [r4, #0]
20000a1a:	0624      	lsls	r4, r4, #24
20000a1c:	4322      	orrs	r2, r4
20000a1e:	c006      	stmia	r0!, {r1, r2}
20000a20:	3f01      	subs	r7, #1
20000a22:	d1e0      	bne.n	200009e6 <RenderGraph8Mat+0x8a>
20000a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000a26:	46c0      	nop			; (mov r8, r8)

20000a28 <RenderGraph8Mat_Interp>:
20000a28:	d00000c0 	.word	0xd00000c0

20000a2c <RenderGraph8Mat_Ctrl>:
20000a2c:	0004000c 	.word	0x0004000c

20000a30 <RenderGraph8Persp>:
20000a30:	b5f0      	push	{r4, r5, r6, r7, lr}
20000a32:	9c05      	ldr	r4, [sp, #20]
20000a34:	8961      	ldrh	r1, [r4, #10]
20000a36:	1a52      	subs	r2, r2, r1
20000a38:	4694      	mov	ip, r2
20000a3a:	030e      	lsls	r6, r1, #12
20000a3c:	4d38      	ldr	r5, [pc, #224]	; (20000b20 <RenderGraph8Persp_pSioBase>)
20000a3e:	662e      	str	r6, [r5, #96]	; 0x60
20000a40:	8a66      	ldrh	r6, [r4, #18]
20000a42:	1852      	adds	r2, r2, r1
20000a44:	18b6      	adds	r6, r6, r2
20000a46:	3601      	adds	r6, #1
20000a48:	666e      	str	r6, [r5, #100]	; 0x64
20000a4a:	085d      	lsrs	r5, r3, #1
20000a4c:	426d      	negs	r5, r5
20000a4e:	46ae      	mov	lr, r5
20000a50:	089f      	lsrs	r7, r3, #2
20000a52:	8b21      	ldrh	r1, [r4, #24]
20000a54:	8b62      	ldrh	r2, [r4, #26]
20000a56:	4b33      	ldr	r3, [pc, #204]	; (20000b24 <RenderGraph8Persp_Interp>)
20000a58:	68e6      	ldr	r6, [r4, #12]
20000a5a:	611e      	str	r6, [r3, #16]
20000a5c:	4e32      	ldr	r6, [pc, #200]	; (20000b28 <RenderGraph8Persp_Ctrl>)
20000a5e:	1a76      	subs	r6, r6, r1
20000a60:	014d      	lsls	r5, r1, #5
20000a62:	432e      	orrs	r6, r5
20000a64:	3901      	subs	r1, #1
20000a66:	188d      	adds	r5, r1, r2
20000a68:	02ad      	lsls	r5, r5, #10
20000a6a:	432e      	orrs	r6, r5
20000a6c:	631e      	str	r6, [r3, #48]	; 0x30
20000a6e:	4e2e      	ldr	r6, [pc, #184]	; (20000b28 <RenderGraph8Persp_Ctrl>)
20000a70:	0289      	lsls	r1, r1, #10
20000a72:	430e      	orrs	r6, r1
20000a74:	62de      	str	r6, [r3, #44]	; 0x2c
20000a76:	6964      	ldr	r4, [r4, #20]
20000a78:	4929      	ldr	r1, [pc, #164]	; (20000b20 <RenderGraph8Persp_pSioBase>)
20000a7a:	6f09      	ldr	r1, [r1, #112]	; 0x70
20000a7c:	6825      	ldr	r5, [r4, #0]
20000a7e:	434d      	muls	r5, r1
20000a80:	132d      	asrs	r5, r5, #12
20000a82:	609d      	str	r5, [r3, #8]
20000a84:	68e6      	ldr	r6, [r4, #12]
20000a86:	434e      	muls	r6, r1
20000a88:	1336      	asrs	r6, r6, #12
20000a8a:	60de      	str	r6, [r3, #12]
20000a8c:	4672      	mov	r2, lr
20000a8e:	4355      	muls	r5, r2
20000a90:	4372      	muls	r2, r6
20000a92:	468e      	mov	lr, r1
20000a94:	6866      	ldr	r6, [r4, #4]
20000a96:	4371      	muls	r1, r6
20000a98:	1309      	asrs	r1, r1, #12
20000a9a:	4666      	mov	r6, ip
20000a9c:	4371      	muls	r1, r6
20000a9e:	186d      	adds	r5, r5, r1
20000aa0:	68a1      	ldr	r1, [r4, #8]
20000aa2:	186d      	adds	r5, r5, r1
20000aa4:	601d      	str	r5, [r3, #0]
20000aa6:	6921      	ldr	r1, [r4, #16]
20000aa8:	4675      	mov	r5, lr
20000aaa:	4369      	muls	r1, r5
20000aac:	1309      	asrs	r1, r1, #12
20000aae:	4371      	muls	r1, r6
20000ab0:	1852      	adds	r2, r2, r1
20000ab2:	6961      	ldr	r1, [r4, #20]
20000ab4:	1852      	adds	r2, r2, r1
20000ab6:	605a      	str	r2, [r3, #4]
20000ab8:	087f      	lsrs	r7, r7, #1
20000aba:	d30e      	bcc.n	20000ada <RenderGraph8Persp+0xaa>
20000abc:	69dc      	ldr	r4, [r3, #28]
20000abe:	7826      	ldrb	r6, [r4, #0]
20000ac0:	69dc      	ldr	r4, [r3, #28]
20000ac2:	7825      	ldrb	r5, [r4, #0]
20000ac4:	022d      	lsls	r5, r5, #8
20000ac6:	432e      	orrs	r6, r5
20000ac8:	69dc      	ldr	r4, [r3, #28]
20000aca:	7825      	ldrb	r5, [r4, #0]
20000acc:	042d      	lsls	r5, r5, #16
20000ace:	432e      	orrs	r6, r5
20000ad0:	69dc      	ldr	r4, [r3, #28]
20000ad2:	7825      	ldrb	r5, [r4, #0]
20000ad4:	062d      	lsls	r5, r5, #24
20000ad6:	432e      	orrs	r6, r5
20000ad8:	c040      	stmia	r0!, {r6}
20000ada:	423f      	tst	r7, r7
20000adc:	d01e      	beq.n	20000b1c <RenderGraph8Persp+0xec>
20000ade:	69dc      	ldr	r4, [r3, #28]
20000ae0:	7821      	ldrb	r1, [r4, #0]
20000ae2:	69dc      	ldr	r4, [r3, #28]
20000ae4:	7824      	ldrb	r4, [r4, #0]
20000ae6:	0224      	lsls	r4, r4, #8
20000ae8:	4321      	orrs	r1, r4
20000aea:	69dc      	ldr	r4, [r3, #28]
20000aec:	7824      	ldrb	r4, [r4, #0]
20000aee:	0424      	lsls	r4, r4, #16
20000af0:	4321      	orrs	r1, r4
20000af2:	69dc      	ldr	r4, [r3, #28]
20000af4:	7824      	ldrb	r4, [r4, #0]
20000af6:	0624      	lsls	r4, r4, #24
20000af8:	4321      	orrs	r1, r4
20000afa:	69dc      	ldr	r4, [r3, #28]
20000afc:	7822      	ldrb	r2, [r4, #0]
20000afe:	69dc      	ldr	r4, [r3, #28]
20000b00:	7824      	ldrb	r4, [r4, #0]
20000b02:	0224      	lsls	r4, r4, #8
20000b04:	4322      	orrs	r2, r4
20000b06:	69dc      	ldr	r4, [r3, #28]
20000b08:	7824      	ldrb	r4, [r4, #0]
20000b0a:	0424      	lsls	r4, r4, #16
20000b0c:	4322      	orrs	r2, r4
20000b0e:	69dc      	ldr	r4, [r3, #28]
20000b10:	7824      	ldrb	r4, [r4, #0]
20000b12:	0624      	lsls	r4, r4, #24
20000b14:	4322      	orrs	r2, r4
20000b16:	c006      	stmia	r0!, {r1, r2}
20000b18:	3f01      	subs	r7, #1
20000b1a:	d1e0      	bne.n	20000ade <RenderGraph8Persp+0xae>
20000b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000b1e:	46c0      	nop			; (mov r8, r8)

20000b20 <RenderGraph8Persp_pSioBase>:
20000b20:	d0000000 	.word	0xd0000000

20000b24 <RenderGraph8Persp_Interp>:
20000b24:	d00000c0 	.word	0xd00000c0

20000b28 <RenderGraph8Persp_Ctrl>:
20000b28:	0004000c 	.word	0x0004000c

20000b2c <RenderGText>:
20000b2c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000b2e:	4644      	mov	r4, r8
20000b30:	b410      	push	{r4}
20000b32:	9c09      	ldr	r4, [sp, #36]	; 0x24
20000b34:	4e3a      	ldr	r6, [pc, #232]	; (20000c20 <RenderGText_pSioBase>)
20000b36:	6632      	str	r2, [r6, #96]	; 0x60
20000b38:	8a62      	ldrh	r2, [r4, #18]
20000b3a:	6672      	str	r2, [r6, #100]	; 0x64
20000b3c:	8925      	ldrh	r5, [r4, #8]
20000b3e:	2703      	movs	r7, #3
20000b40:	43bd      	bics	r5, r7
20000b42:	9509      	str	r5, [sp, #36]	; 0x24
20000b44:	43b9      	bics	r1, r7
20000b46:	43bb      	bics	r3, r7
20000b48:	9303      	str	r3, [sp, #12]
20000b4a:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000b4c:	6f32      	ldr	r2, [r6, #112]	; 0x70
20000b4e:	022d      	lsls	r5, r5, #8
20000b50:	6963      	ldr	r3, [r4, #20]
20000b52:	442b      	add	r3, r5
20000b54:	4698      	mov	r8, r3
20000b56:	8865      	ldrh	r5, [r4, #2]
20000b58:	436a      	muls	r2, r5
20000b5a:	68e5      	ldr	r5, [r4, #12]
20000b5c:	442a      	add	r2, r5
20000b5e:	9202      	str	r2, [sp, #8]
20000b60:	69a3      	ldr	r3, [r4, #24]
20000b62:	9301      	str	r3, [sp, #4]
20000b64:	440b      	add	r3, r1
20000b66:	08ce      	lsrs	r6, r1, #3
20000b68:	4432      	add	r2, r6
20000b6a:	7ca4      	ldrb	r4, [r4, #18]
20000b6c:	0225      	lsls	r5, r4, #8
20000b6e:	4325      	orrs	r5, r4
20000b70:	042c      	lsls	r4, r5, #16
20000b72:	432c      	orrs	r4, r5
20000b74:	4d29      	ldr	r5, [pc, #164]	; (20000c1c <RenderGText_Addr>)
20000b76:	46ae      	mov	lr, r5
20000b78:	074e      	lsls	r6, r1, #29
20000b7a:	d515      	bpl.n	20000ba8 <RenderGText+0x7c>
20000b7c:	7815      	ldrb	r5, [r2, #0]
20000b7e:	3201      	adds	r2, #1
20000b80:	4445      	add	r5, r8
20000b82:	782d      	ldrb	r5, [r5, #0]
20000b84:	cb40      	ldmia	r3!, {r6}
20000b86:	4066      	eors	r6, r4
20000b88:	00ed      	lsls	r5, r5, #3
20000b8a:	4475      	add	r5, lr
20000b8c:	686f      	ldr	r7, [r5, #4]
20000b8e:	4037      	ands	r7, r6
20000b90:	4067      	eors	r7, r4
20000b92:	c080      	stmia	r0!, {r7}
20000b94:	3104      	adds	r1, #4
20000b96:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000b98:	42b9      	cmp	r1, r7
20000b9a:	d302      	bcc.n	20000ba2 <RenderGText+0x76>
20000b9c:	2100      	movs	r1, #0
20000b9e:	9a02      	ldr	r2, [sp, #8]
20000ba0:	9b01      	ldr	r3, [sp, #4]
20000ba2:	9f03      	ldr	r7, [sp, #12]
20000ba4:	3f04      	subs	r7, #4
20000ba6:	9703      	str	r7, [sp, #12]
20000ba8:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000baa:	1a7f      	subs	r7, r7, r1

20000bac <RenderGText_OutLoop>:
20000bac:	9e03      	ldr	r6, [sp, #12]
20000bae:	42b7      	cmp	r7, r6
20000bb0:	d900      	bls.n	20000bb4 <RenderGText_OutLoop+0x8>
20000bb2:	4637      	mov	r7, r6
20000bb4:	2f08      	cmp	r7, #8
20000bb6:	d214      	bcs.n	20000be2 <RenderGText_Last+0x26>
20000bb8:	2f04      	cmp	r7, #4
20000bba:	d30f      	bcc.n	20000bdc <RenderGText_Last+0x20>

20000bbc <RenderGText_Last>:
20000bbc:	7815      	ldrb	r5, [r2, #0]
20000bbe:	3201      	adds	r2, #1
20000bc0:	4445      	add	r5, r8
20000bc2:	782d      	ldrb	r5, [r5, #0]
20000bc4:	cb40      	ldmia	r3!, {r6}
20000bc6:	4066      	eors	r6, r4
20000bc8:	00ed      	lsls	r5, r5, #3
20000bca:	4475      	add	r5, lr
20000bcc:	6829      	ldr	r1, [r5, #0]
20000bce:	4031      	ands	r1, r6
20000bd0:	4061      	eors	r1, r4
20000bd2:	c002      	stmia	r0!, {r1}
20000bd4:	9a02      	ldr	r2, [sp, #8]
20000bd6:	9b01      	ldr	r3, [sp, #4]
20000bd8:	2f04      	cmp	r7, #4
20000bda:	d8e7      	bhi.n	20000bac <RenderGText_OutLoop>
20000bdc:	bc10      	pop	{r4}
20000bde:	46a0      	mov	r8, r4
20000be0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000be2:	08b9      	lsrs	r1, r7, #2
20000be4:	008d      	lsls	r5, r1, #2
20000be6:	1b76      	subs	r6, r6, r5
20000be8:	9603      	str	r6, [sp, #12]
20000bea:	3901      	subs	r1, #1

20000bec <RenderGText_InLoop>:
20000bec:	7817      	ldrb	r7, [r2, #0]
20000bee:	3201      	adds	r2, #1
20000bf0:	4447      	add	r7, r8
20000bf2:	783f      	ldrb	r7, [r7, #0]
20000bf4:	cb40      	ldmia	r3!, {r6}
20000bf6:	4066      	eors	r6, r4
20000bf8:	00ff      	lsls	r7, r7, #3
20000bfa:	4477      	add	r7, lr
20000bfc:	683d      	ldr	r5, [r7, #0]
20000bfe:	4035      	ands	r5, r6
20000c00:	4065      	eors	r5, r4
20000c02:	cb40      	ldmia	r3!, {r6}
20000c04:	4066      	eors	r6, r4
20000c06:	687f      	ldr	r7, [r7, #4]
20000c08:	4037      	ands	r7, r6
20000c0a:	4067      	eors	r7, r4
20000c0c:	c0a0      	stmia	r0!, {r5, r7}
20000c0e:	3902      	subs	r1, #2
20000c10:	d8ec      	bhi.n	20000bec <RenderGText_InLoop>
20000c12:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000c14:	d0d2      	beq.n	20000bbc <RenderGText_Last>
20000c16:	9a02      	ldr	r2, [sp, #8]
20000c18:	9b01      	ldr	r3, [sp, #4]
20000c1a:	e7c7      	b.n	20000bac <RenderGText_OutLoop>

20000c1c <RenderGText_Addr>:
20000c1c:	200218d8 	.word	0x200218d8

20000c20 <RenderGText_pSioBase>:
20000c20:	d0000000 	.word	0xd0000000

20000c24 <RenderLevel>:
20000c24:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000c26:	9c08      	ldr	r4, [sp, #32]
20000c28:	8925      	ldrh	r5, [r4, #8]
20000c2a:	2703      	movs	r7, #3
20000c2c:	43bd      	bics	r5, r7
20000c2e:	9508      	str	r5, [sp, #32]
20000c30:	43b9      	bics	r1, r7
20000c32:	43bb      	bics	r3, r7
20000c34:	9302      	str	r3, [sp, #8]
20000c36:	8965      	ldrh	r5, [r4, #10]
20000c38:	3d01      	subs	r5, #1
20000c3a:	1aad      	subs	r5, r5, r2
20000c3c:	7e23      	ldrb	r3, [r4, #24]
20000c3e:	9300      	str	r3, [sp, #0]
20000c40:	68e2      	ldr	r2, [r4, #12]
20000c42:	9201      	str	r2, [sp, #4]
20000c44:	440a      	add	r2, r1
20000c46:	7d66      	ldrb	r6, [r4, #21]
20000c48:	0233      	lsls	r3, r6, #8
20000c4a:	4333      	orrs	r3, r6
20000c4c:	041e      	lsls	r6, r3, #16
20000c4e:	431e      	orrs	r6, r3
20000c50:	7d24      	ldrb	r4, [r4, #20]
20000c52:	0223      	lsls	r3, r4, #8
20000c54:	4323      	orrs	r3, r4
20000c56:	041c      	lsls	r4, r3, #16
20000c58:	431c      	orrs	r4, r3
20000c5a:	4066      	eors	r6, r4
20000c5c:	4b4c      	ldr	r3, [pc, #304]	; (20000d90 <RenderLevel_Addr>)
20000c5e:	469e      	mov	lr, r3
20000c60:	9f08      	ldr	r7, [sp, #32]
20000c62:	1a7f      	subs	r7, r7, r1
20000c64:	2f04      	cmp	r7, #4
20000c66:	d801      	bhi.n	20000c6c <RenderLevel_OutLoop>
20000c68:	9f08      	ldr	r7, [sp, #32]
20000c6a:	e007      	b.n	20000c7c <RenderLevel_Last>

20000c6c <RenderLevel_OutLoop>:
20000c6c:	9b02      	ldr	r3, [sp, #8]
20000c6e:	429f      	cmp	r7, r3
20000c70:	d900      	bls.n	20000c74 <RenderLevel_OutLoop+0x8>
20000c72:	461f      	mov	r7, r3
20000c74:	2f08      	cmp	r7, #8
20000c76:	d231      	bcs.n	20000cdc <RenderLevel_Last2+0x30>
20000c78:	2f04      	cmp	r7, #4
20000c7a:	d32e      	bcc.n	20000cda <RenderLevel_Last2+0x2e>

20000c7c <RenderLevel_Last>:
20000c7c:	9b00      	ldr	r3, [sp, #0]
20000c7e:	429d      	cmp	r5, r3
20000c80:	d314      	bcc.n	20000cac <RenderLevel_Last2>
20000c82:	2100      	movs	r1, #0
20000c84:	7813      	ldrb	r3, [r2, #0]
20000c86:	42ab      	cmp	r3, r5
20000c88:	4149      	adcs	r1, r1
20000c8a:	7853      	ldrb	r3, [r2, #1]
20000c8c:	42ab      	cmp	r3, r5
20000c8e:	4149      	adcs	r1, r1
20000c90:	7893      	ldrb	r3, [r2, #2]
20000c92:	42ab      	cmp	r3, r5
20000c94:	4149      	adcs	r1, r1
20000c96:	78d3      	ldrb	r3, [r2, #3]
20000c98:	42ab      	cmp	r3, r5
20000c9a:	4149      	adcs	r1, r1
20000c9c:	3204      	adds	r2, #4
20000c9e:	00c9      	lsls	r1, r1, #3
20000ca0:	4471      	add	r1, lr
20000ca2:	6849      	ldr	r1, [r1, #4]
20000ca4:	4031      	ands	r1, r6
20000ca6:	4061      	eors	r1, r4
20000ca8:	c002      	stmia	r0!, {r1}
20000caa:	e013      	b.n	20000cd4 <RenderLevel_Last2+0x28>

20000cac <RenderLevel_Last2>:
20000cac:	2100      	movs	r1, #0
20000cae:	7813      	ldrb	r3, [r2, #0]
20000cb0:	429d      	cmp	r5, r3
20000cb2:	4149      	adcs	r1, r1
20000cb4:	7853      	ldrb	r3, [r2, #1]
20000cb6:	429d      	cmp	r5, r3
20000cb8:	4149      	adcs	r1, r1
20000cba:	7893      	ldrb	r3, [r2, #2]
20000cbc:	429d      	cmp	r5, r3
20000cbe:	4149      	adcs	r1, r1
20000cc0:	78d3      	ldrb	r3, [r2, #3]
20000cc2:	429d      	cmp	r5, r3
20000cc4:	4149      	adcs	r1, r1
20000cc6:	3204      	adds	r2, #4
20000cc8:	00c9      	lsls	r1, r1, #3
20000cca:	4471      	add	r1, lr
20000ccc:	6849      	ldr	r1, [r1, #4]
20000cce:	4031      	ands	r1, r6
20000cd0:	4061      	eors	r1, r4
20000cd2:	c002      	stmia	r0!, {r1}
20000cd4:	9a01      	ldr	r2, [sp, #4]
20000cd6:	2f04      	cmp	r7, #4
20000cd8:	d8c8      	bhi.n	20000c6c <RenderLevel_OutLoop>
20000cda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000cdc:	08b9      	lsrs	r1, r7, #2
20000cde:	008f      	lsls	r7, r1, #2
20000ce0:	1bdb      	subs	r3, r3, r7
20000ce2:	9302      	str	r3, [sp, #8]
20000ce4:	3901      	subs	r1, #1
20000ce6:	9b00      	ldr	r3, [sp, #0]
20000ce8:	429d      	cmp	r5, r3
20000cea:	d328      	bcc.n	20000d3e <RenderLevel_InLoopBot>

20000cec <RenderLevel_InLoopTop>:
20000cec:	2700      	movs	r7, #0
20000cee:	7813      	ldrb	r3, [r2, #0]
20000cf0:	42ab      	cmp	r3, r5
20000cf2:	417f      	adcs	r7, r7
20000cf4:	7853      	ldrb	r3, [r2, #1]
20000cf6:	42ab      	cmp	r3, r5
20000cf8:	417f      	adcs	r7, r7
20000cfa:	7893      	ldrb	r3, [r2, #2]
20000cfc:	42ab      	cmp	r3, r5
20000cfe:	417f      	adcs	r7, r7
20000d00:	78d3      	ldrb	r3, [r2, #3]
20000d02:	42ab      	cmp	r3, r5
20000d04:	417f      	adcs	r7, r7
20000d06:	7913      	ldrb	r3, [r2, #4]
20000d08:	42ab      	cmp	r3, r5
20000d0a:	417f      	adcs	r7, r7
20000d0c:	7953      	ldrb	r3, [r2, #5]
20000d0e:	42ab      	cmp	r3, r5
20000d10:	417f      	adcs	r7, r7
20000d12:	7993      	ldrb	r3, [r2, #6]
20000d14:	42ab      	cmp	r3, r5
20000d16:	417f      	adcs	r7, r7
20000d18:	79d3      	ldrb	r3, [r2, #7]
20000d1a:	42ab      	cmp	r3, r5
20000d1c:	417f      	adcs	r7, r7
20000d1e:	3208      	adds	r2, #8
20000d20:	00ff      	lsls	r7, r7, #3
20000d22:	4477      	add	r7, lr
20000d24:	683b      	ldr	r3, [r7, #0]
20000d26:	4033      	ands	r3, r6
20000d28:	4063      	eors	r3, r4
20000d2a:	687f      	ldr	r7, [r7, #4]
20000d2c:	4037      	ands	r7, r6
20000d2e:	4067      	eors	r7, r4
20000d30:	c088      	stmia	r0!, {r3, r7}
20000d32:	3902      	subs	r1, #2
20000d34:	d8da      	bhi.n	20000cec <RenderLevel_InLoopTop>
20000d36:	9f08      	ldr	r7, [sp, #32]
20000d38:	d0a0      	beq.n	20000c7c <RenderLevel_Last>
20000d3a:	9a01      	ldr	r2, [sp, #4]
20000d3c:	e796      	b.n	20000c6c <RenderLevel_OutLoop>

20000d3e <RenderLevel_InLoopBot>:
20000d3e:	2700      	movs	r7, #0
20000d40:	7813      	ldrb	r3, [r2, #0]
20000d42:	429d      	cmp	r5, r3
20000d44:	417f      	adcs	r7, r7
20000d46:	7853      	ldrb	r3, [r2, #1]
20000d48:	429d      	cmp	r5, r3
20000d4a:	417f      	adcs	r7, r7
20000d4c:	7893      	ldrb	r3, [r2, #2]
20000d4e:	429d      	cmp	r5, r3
20000d50:	417f      	adcs	r7, r7
20000d52:	78d3      	ldrb	r3, [r2, #3]
20000d54:	429d      	cmp	r5, r3
20000d56:	417f      	adcs	r7, r7
20000d58:	7913      	ldrb	r3, [r2, #4]
20000d5a:	429d      	cmp	r5, r3
20000d5c:	417f      	adcs	r7, r7
20000d5e:	7953      	ldrb	r3, [r2, #5]
20000d60:	429d      	cmp	r5, r3
20000d62:	417f      	adcs	r7, r7
20000d64:	7993      	ldrb	r3, [r2, #6]
20000d66:	429d      	cmp	r5, r3
20000d68:	417f      	adcs	r7, r7
20000d6a:	79d3      	ldrb	r3, [r2, #7]
20000d6c:	429d      	cmp	r5, r3
20000d6e:	417f      	adcs	r7, r7
20000d70:	3208      	adds	r2, #8
20000d72:	00ff      	lsls	r7, r7, #3
20000d74:	4477      	add	r7, lr
20000d76:	683b      	ldr	r3, [r7, #0]
20000d78:	4033      	ands	r3, r6
20000d7a:	4063      	eors	r3, r4
20000d7c:	687f      	ldr	r7, [r7, #4]
20000d7e:	4037      	ands	r7, r6
20000d80:	4067      	eors	r7, r4
20000d82:	c088      	stmia	r0!, {r3, r7}
20000d84:	3902      	subs	r1, #2
20000d86:	d8da      	bhi.n	20000d3e <RenderLevel_InLoopBot>
20000d88:	9f08      	ldr	r7, [sp, #32]
20000d8a:	d0d5      	beq.n	20000d38 <RenderLevel_InLoopTop+0x4c>
20000d8c:	9a01      	ldr	r2, [sp, #4]
20000d8e:	e76d      	b.n	20000c6c <RenderLevel_OutLoop>

20000d90 <RenderLevel_Addr>:
20000d90:	200218d8 	.word	0x200218d8

20000d94 <RenderLevelGrad>:
20000d94:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000d96:	9c08      	ldr	r4, [sp, #32]
20000d98:	8925      	ldrh	r5, [r4, #8]
20000d9a:	2703      	movs	r7, #3
20000d9c:	43bd      	bics	r5, r7
20000d9e:	9508      	str	r5, [sp, #32]
20000da0:	43b9      	bics	r1, r7
20000da2:	43bb      	bics	r3, r7
20000da4:	9302      	str	r3, [sp, #8]
20000da6:	8965      	ldrh	r5, [r4, #10]
20000da8:	3d01      	subs	r5, #1
20000daa:	1aad      	subs	r5, r5, r2
20000dac:	68e2      	ldr	r2, [r4, #12]
20000dae:	9201      	str	r2, [sp, #4]
20000db0:	440a      	add	r2, r1
20000db2:	6966      	ldr	r6, [r4, #20]
20000db4:	5d76      	ldrb	r6, [r6, r5]
20000db6:	0233      	lsls	r3, r6, #8
20000db8:	4333      	orrs	r3, r6
20000dba:	041e      	lsls	r6, r3, #16
20000dbc:	431e      	orrs	r6, r3
20000dbe:	69a4      	ldr	r4, [r4, #24]
20000dc0:	5d64      	ldrb	r4, [r4, r5]
20000dc2:	0223      	lsls	r3, r4, #8
20000dc4:	4323      	orrs	r3, r4
20000dc6:	041c      	lsls	r4, r3, #16
20000dc8:	431c      	orrs	r4, r3
20000dca:	4066      	eors	r6, r4
20000dcc:	4b2a      	ldr	r3, [pc, #168]	; (20000e78 <RenderLevelGrad_Addr>)
20000dce:	469e      	mov	lr, r3
20000dd0:	9f08      	ldr	r7, [sp, #32]
20000dd2:	1a7f      	subs	r7, r7, r1
20000dd4:	2f04      	cmp	r7, #4
20000dd6:	d801      	bhi.n	20000ddc <RenderLevelGrad_OutLoop>
20000dd8:	9f08      	ldr	r7, [sp, #32]
20000dda:	e007      	b.n	20000dec <RenderLevelGrad_Last>

20000ddc <RenderLevelGrad_OutLoop>:
20000ddc:	9b02      	ldr	r3, [sp, #8]
20000dde:	429f      	cmp	r7, r3
20000de0:	d900      	bls.n	20000de4 <RenderLevelGrad_OutLoop+0x8>
20000de2:	461f      	mov	r7, r3
20000de4:	2f08      	cmp	r7, #8
20000de6:	d219      	bcs.n	20000e1c <RenderLevelGrad_Last+0x30>
20000de8:	2f04      	cmp	r7, #4
20000dea:	d316      	bcc.n	20000e1a <RenderLevelGrad_Last+0x2e>

20000dec <RenderLevelGrad_Last>:
20000dec:	2100      	movs	r1, #0
20000dee:	7813      	ldrb	r3, [r2, #0]
20000df0:	42ab      	cmp	r3, r5
20000df2:	4149      	adcs	r1, r1
20000df4:	7853      	ldrb	r3, [r2, #1]
20000df6:	42ab      	cmp	r3, r5
20000df8:	4149      	adcs	r1, r1
20000dfa:	7893      	ldrb	r3, [r2, #2]
20000dfc:	42ab      	cmp	r3, r5
20000dfe:	4149      	adcs	r1, r1
20000e00:	78d3      	ldrb	r3, [r2, #3]
20000e02:	42ab      	cmp	r3, r5
20000e04:	4149      	adcs	r1, r1
20000e06:	3204      	adds	r2, #4
20000e08:	00c9      	lsls	r1, r1, #3
20000e0a:	4471      	add	r1, lr
20000e0c:	6849      	ldr	r1, [r1, #4]
20000e0e:	4031      	ands	r1, r6
20000e10:	4061      	eors	r1, r4
20000e12:	c002      	stmia	r0!, {r1}
20000e14:	9a01      	ldr	r2, [sp, #4]
20000e16:	2f04      	cmp	r7, #4
20000e18:	d8e0      	bhi.n	20000ddc <RenderLevelGrad_OutLoop>
20000e1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000e1c:	08b9      	lsrs	r1, r7, #2
20000e1e:	008f      	lsls	r7, r1, #2
20000e20:	1bdb      	subs	r3, r3, r7
20000e22:	9302      	str	r3, [sp, #8]
20000e24:	3901      	subs	r1, #1

20000e26 <RenderLevelGrad_InLoopTop>:
20000e26:	2700      	movs	r7, #0
20000e28:	7813      	ldrb	r3, [r2, #0]
20000e2a:	42ab      	cmp	r3, r5
20000e2c:	417f      	adcs	r7, r7
20000e2e:	7853      	ldrb	r3, [r2, #1]
20000e30:	42ab      	cmp	r3, r5
20000e32:	417f      	adcs	r7, r7
20000e34:	7893      	ldrb	r3, [r2, #2]
20000e36:	42ab      	cmp	r3, r5
20000e38:	417f      	adcs	r7, r7
20000e3a:	78d3      	ldrb	r3, [r2, #3]
20000e3c:	42ab      	cmp	r3, r5
20000e3e:	417f      	adcs	r7, r7
20000e40:	7913      	ldrb	r3, [r2, #4]
20000e42:	42ab      	cmp	r3, r5
20000e44:	417f      	adcs	r7, r7
20000e46:	7953      	ldrb	r3, [r2, #5]
20000e48:	42ab      	cmp	r3, r5
20000e4a:	417f      	adcs	r7, r7
20000e4c:	7993      	ldrb	r3, [r2, #6]
20000e4e:	42ab      	cmp	r3, r5
20000e50:	417f      	adcs	r7, r7
20000e52:	79d3      	ldrb	r3, [r2, #7]
20000e54:	42ab      	cmp	r3, r5
20000e56:	417f      	adcs	r7, r7
20000e58:	3208      	adds	r2, #8
20000e5a:	00ff      	lsls	r7, r7, #3
20000e5c:	4477      	add	r7, lr
20000e5e:	683b      	ldr	r3, [r7, #0]
20000e60:	4033      	ands	r3, r6
20000e62:	4063      	eors	r3, r4
20000e64:	687f      	ldr	r7, [r7, #4]
20000e66:	4037      	ands	r7, r6
20000e68:	4067      	eors	r7, r4
20000e6a:	c088      	stmia	r0!, {r3, r7}
20000e6c:	3902      	subs	r1, #2
20000e6e:	d8da      	bhi.n	20000e26 <RenderLevelGrad_InLoopTop>
20000e70:	9f08      	ldr	r7, [sp, #32]
20000e72:	d0bb      	beq.n	20000dec <RenderLevelGrad_Last>
20000e74:	9a01      	ldr	r2, [sp, #4]
20000e76:	e7b1      	b.n	20000ddc <RenderLevelGrad_OutLoop>

20000e78 <RenderLevelGrad_Addr>:
20000e78:	200218d8 	.word	0x200218d8

20000e7c <RenderMText>:
20000e7c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000e7e:	9c08      	ldr	r4, [sp, #32]
20000e80:	4e34      	ldr	r6, [pc, #208]	; (20000f54 <RenderMText_pSioBase>)
20000e82:	6632      	str	r2, [r6, #96]	; 0x60
20000e84:	8a62      	ldrh	r2, [r4, #18]
20000e86:	6672      	str	r2, [r6, #100]	; 0x64
20000e88:	8925      	ldrh	r5, [r4, #8]
20000e8a:	2703      	movs	r7, #3
20000e8c:	43bd      	bics	r5, r7
20000e8e:	9508      	str	r5, [sp, #32]
20000e90:	43b9      	bics	r1, r7
20000e92:	43bb      	bics	r3, r7
20000e94:	9302      	str	r3, [sp, #8]
20000e96:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000e98:	6f32      	ldr	r2, [r6, #112]	; 0x70
20000e9a:	022d      	lsls	r5, r5, #8
20000e9c:	6963      	ldr	r3, [r4, #20]
20000e9e:	442b      	add	r3, r5
20000ea0:	8865      	ldrh	r5, [r4, #2]
20000ea2:	436a      	muls	r2, r5
20000ea4:	68e5      	ldr	r5, [r4, #12]
20000ea6:	442a      	add	r2, r5
20000ea8:	9201      	str	r2, [sp, #4]
20000eaa:	08ce      	lsrs	r6, r1, #3
20000eac:	4432      	add	r2, r6
20000eae:	7e66      	ldrb	r6, [r4, #25]
20000eb0:	0237      	lsls	r7, r6, #8
20000eb2:	4337      	orrs	r7, r6
20000eb4:	043e      	lsls	r6, r7, #16
20000eb6:	433e      	orrs	r6, r7
20000eb8:	7e24      	ldrb	r4, [r4, #24]
20000eba:	0225      	lsls	r5, r4, #8
20000ebc:	4325      	orrs	r5, r4
20000ebe:	042c      	lsls	r4, r5, #16
20000ec0:	432c      	orrs	r4, r5
20000ec2:	4066      	eors	r6, r4
20000ec4:	4d22      	ldr	r5, [pc, #136]	; (20000f50 <RenderMText_Addr>)
20000ec6:	46ae      	mov	lr, r5
20000ec8:	074d      	lsls	r5, r1, #29
20000eca:	d511      	bpl.n	20000ef0 <RenderMText+0x74>
20000ecc:	7815      	ldrb	r5, [r2, #0]
20000ece:	5d5d      	ldrb	r5, [r3, r5]
20000ed0:	3201      	adds	r2, #1
20000ed2:	00ed      	lsls	r5, r5, #3
20000ed4:	4475      	add	r5, lr
20000ed6:	686f      	ldr	r7, [r5, #4]
20000ed8:	4037      	ands	r7, r6
20000eda:	4067      	eors	r7, r4
20000edc:	c080      	stmia	r0!, {r7}
20000ede:	3104      	adds	r1, #4
20000ee0:	9f08      	ldr	r7, [sp, #32]
20000ee2:	42b9      	cmp	r1, r7
20000ee4:	d301      	bcc.n	20000eea <RenderMText+0x6e>
20000ee6:	2100      	movs	r1, #0
20000ee8:	9a01      	ldr	r2, [sp, #4]
20000eea:	9f02      	ldr	r7, [sp, #8]
20000eec:	3f04      	subs	r7, #4
20000eee:	9702      	str	r7, [sp, #8]
20000ef0:	9f08      	ldr	r7, [sp, #32]
20000ef2:	1a7f      	subs	r7, r7, r1

20000ef4 <RenderMText_OutLoop>:
20000ef4:	9d02      	ldr	r5, [sp, #8]
20000ef6:	42af      	cmp	r7, r5
20000ef8:	d900      	bls.n	20000efc <RenderMText_OutLoop+0x8>
20000efa:	462f      	mov	r7, r5
20000efc:	2f08      	cmp	r7, #8
20000efe:	d20e      	bcs.n	20000f1e <RenderMText_Last+0x1a>
20000f00:	2f04      	cmp	r7, #4
20000f02:	d30b      	bcc.n	20000f1c <RenderMText_Last+0x18>

20000f04 <RenderMText_Last>:
20000f04:	7815      	ldrb	r5, [r2, #0]
20000f06:	5d5d      	ldrb	r5, [r3, r5]
20000f08:	3201      	adds	r2, #1
20000f0a:	00ed      	lsls	r5, r5, #3
20000f0c:	4475      	add	r5, lr
20000f0e:	6829      	ldr	r1, [r5, #0]
20000f10:	4031      	ands	r1, r6
20000f12:	4061      	eors	r1, r4
20000f14:	c002      	stmia	r0!, {r1}
20000f16:	9a01      	ldr	r2, [sp, #4]
20000f18:	2f04      	cmp	r7, #4
20000f1a:	d8eb      	bhi.n	20000ef4 <RenderMText_OutLoop>
20000f1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000f1e:	08b9      	lsrs	r1, r7, #2
20000f20:	008f      	lsls	r7, r1, #2
20000f22:	1bed      	subs	r5, r5, r7
20000f24:	9502      	str	r5, [sp, #8]
20000f26:	3901      	subs	r1, #1

20000f28 <RenderMText_InLoop>:
20000f28:	7815      	ldrb	r5, [r2, #0]
20000f2a:	5d5d      	ldrb	r5, [r3, r5]
20000f2c:	3201      	adds	r2, #1
20000f2e:	00ed      	lsls	r5, r5, #3
20000f30:	4475      	add	r5, lr
20000f32:	682f      	ldr	r7, [r5, #0]
20000f34:	4037      	ands	r7, r6
20000f36:	4067      	eors	r7, r4
20000f38:	c080      	stmia	r0!, {r7}
20000f3a:	686f      	ldr	r7, [r5, #4]
20000f3c:	4037      	ands	r7, r6
20000f3e:	4067      	eors	r7, r4
20000f40:	c080      	stmia	r0!, {r7}
20000f42:	3902      	subs	r1, #2
20000f44:	d8f0      	bhi.n	20000f28 <RenderMText_InLoop>
20000f46:	9f08      	ldr	r7, [sp, #32]
20000f48:	d0dc      	beq.n	20000f04 <RenderMText_Last>
20000f4a:	9a01      	ldr	r2, [sp, #4]
20000f4c:	e7d2      	b.n	20000ef4 <RenderMText_OutLoop>
20000f4e:	46c0      	nop			; (mov r8, r8)

20000f50 <RenderMText_Addr>:
20000f50:	200218d8 	.word	0x200218d8

20000f54 <RenderMText_pSioBase>:
20000f54:	d0000000 	.word	0xd0000000

20000f58 <RenderOscil>:
20000f58:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000f5a:	9c08      	ldr	r4, [sp, #32]
20000f5c:	8925      	ldrh	r5, [r4, #8]
20000f5e:	2703      	movs	r7, #3
20000f60:	43bd      	bics	r5, r7
20000f62:	9508      	str	r5, [sp, #32]
20000f64:	43b9      	bics	r1, r7
20000f66:	43bb      	bics	r3, r7
20000f68:	9302      	str	r3, [sp, #8]
20000f6a:	8965      	ldrh	r5, [r4, #10]
20000f6c:	3d01      	subs	r5, #1
20000f6e:	1aad      	subs	r5, r5, r2
20000f70:	7e23      	ldrb	r3, [r4, #24]
20000f72:	469e      	mov	lr, r3
20000f74:	68e2      	ldr	r2, [r4, #12]
20000f76:	9201      	str	r2, [sp, #4]
20000f78:	440a      	add	r2, r1
20000f7a:	7d66      	ldrb	r6, [r4, #21]
20000f7c:	0233      	lsls	r3, r6, #8
20000f7e:	4333      	orrs	r3, r6
20000f80:	041e      	lsls	r6, r3, #16
20000f82:	431e      	orrs	r6, r3
20000f84:	7d24      	ldrb	r4, [r4, #20]
20000f86:	0223      	lsls	r3, r4, #8
20000f88:	4323      	orrs	r3, r4
20000f8a:	041c      	lsls	r4, r3, #16
20000f8c:	431c      	orrs	r4, r3
20000f8e:	4066      	eors	r6, r4
20000f90:	9f08      	ldr	r7, [sp, #32]
20000f92:	1a7f      	subs	r7, r7, r1
20000f94:	2f04      	cmp	r7, #4
20000f96:	d801      	bhi.n	20000f9c <RenderOscil_OutLoop>
20000f98:	9f08      	ldr	r7, [sp, #32]
20000f9a:	e007      	b.n	20000fac <RenderOscil_Last>

20000f9c <RenderOscil_OutLoop>:
20000f9c:	9b02      	ldr	r3, [sp, #8]
20000f9e:	429f      	cmp	r7, r3
20000fa0:	d900      	bls.n	20000fa4 <RenderOscil_OutLoop+0x8>
20000fa2:	461f      	mov	r7, r3
20000fa4:	2f08      	cmp	r7, #8
20000fa6:	d21e      	bcs.n	20000fe6 <RenderOscil_Last+0x3a>
20000fa8:	2f04      	cmp	r7, #4
20000faa:	d31b      	bcc.n	20000fe4 <RenderOscil_Last+0x38>

20000fac <RenderOscil_Last>:
20000fac:	2100      	movs	r1, #0
20000fae:	7813      	ldrb	r3, [r2, #0]
20000fb0:	1b5b      	subs	r3, r3, r5
20000fb2:	459e      	cmp	lr, r3
20000fb4:	4149      	adcs	r1, r1
20000fb6:	7853      	ldrb	r3, [r2, #1]
20000fb8:	1b5b      	subs	r3, r3, r5
20000fba:	459e      	cmp	lr, r3
20000fbc:	4149      	adcs	r1, r1
20000fbe:	7893      	ldrb	r3, [r2, #2]
20000fc0:	1b5b      	subs	r3, r3, r5
20000fc2:	459e      	cmp	lr, r3
20000fc4:	4149      	adcs	r1, r1
20000fc6:	78d3      	ldrb	r3, [r2, #3]
20000fc8:	1b5b      	subs	r3, r3, r5
20000fca:	459e      	cmp	lr, r3
20000fcc:	4149      	adcs	r1, r1
20000fce:	3204      	adds	r2, #4
20000fd0:	00c9      	lsls	r1, r1, #3
20000fd2:	4b20      	ldr	r3, [pc, #128]	; (20001054 <RenderOscil_Addr>)
20000fd4:	4419      	add	r1, r3
20000fd6:	6849      	ldr	r1, [r1, #4]
20000fd8:	4031      	ands	r1, r6
20000fda:	4061      	eors	r1, r4
20000fdc:	c002      	stmia	r0!, {r1}
20000fde:	9a01      	ldr	r2, [sp, #4]
20000fe0:	2f04      	cmp	r7, #4
20000fe2:	d8db      	bhi.n	20000f9c <RenderOscil_OutLoop>
20000fe4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000fe6:	08b9      	lsrs	r1, r7, #2
20000fe8:	008f      	lsls	r7, r1, #2
20000fea:	1bdb      	subs	r3, r3, r7
20000fec:	9302      	str	r3, [sp, #8]
20000fee:	3901      	subs	r1, #1

20000ff0 <RenderOscil_InLoop>:
20000ff0:	2700      	movs	r7, #0
20000ff2:	7813      	ldrb	r3, [r2, #0]
20000ff4:	1b5b      	subs	r3, r3, r5
20000ff6:	459e      	cmp	lr, r3
20000ff8:	417f      	adcs	r7, r7
20000ffa:	7853      	ldrb	r3, [r2, #1]
20000ffc:	1b5b      	subs	r3, r3, r5
20000ffe:	459e      	cmp	lr, r3
20001000:	417f      	adcs	r7, r7
20001002:	7893      	ldrb	r3, [r2, #2]
20001004:	1b5b      	subs	r3, r3, r5
20001006:	459e      	cmp	lr, r3
20001008:	417f      	adcs	r7, r7
2000100a:	78d3      	ldrb	r3, [r2, #3]
2000100c:	1b5b      	subs	r3, r3, r5
2000100e:	459e      	cmp	lr, r3
20001010:	417f      	adcs	r7, r7
20001012:	7913      	ldrb	r3, [r2, #4]
20001014:	1b5b      	subs	r3, r3, r5
20001016:	459e      	cmp	lr, r3
20001018:	417f      	adcs	r7, r7
2000101a:	7953      	ldrb	r3, [r2, #5]
2000101c:	1b5b      	subs	r3, r3, r5
2000101e:	459e      	cmp	lr, r3
20001020:	417f      	adcs	r7, r7
20001022:	7993      	ldrb	r3, [r2, #6]
20001024:	1b5b      	subs	r3, r3, r5
20001026:	459e      	cmp	lr, r3
20001028:	417f      	adcs	r7, r7
2000102a:	79d3      	ldrb	r3, [r2, #7]
2000102c:	1b5b      	subs	r3, r3, r5
2000102e:	459e      	cmp	lr, r3
20001030:	417f      	adcs	r7, r7
20001032:	3208      	adds	r2, #8
20001034:	00ff      	lsls	r7, r7, #3
20001036:	4b07      	ldr	r3, [pc, #28]	; (20001054 <RenderOscil_Addr>)
20001038:	441f      	add	r7, r3
2000103a:	683b      	ldr	r3, [r7, #0]
2000103c:	4033      	ands	r3, r6
2000103e:	4063      	eors	r3, r4
20001040:	687f      	ldr	r7, [r7, #4]
20001042:	4037      	ands	r7, r6
20001044:	4067      	eors	r7, r4
20001046:	c088      	stmia	r0!, {r3, r7}
20001048:	3902      	subs	r1, #2
2000104a:	d8d1      	bhi.n	20000ff0 <RenderOscil_InLoop>
2000104c:	9f08      	ldr	r7, [sp, #32]
2000104e:	d0ad      	beq.n	20000fac <RenderOscil_Last>
20001050:	9a01      	ldr	r2, [sp, #4]
20001052:	e7a3      	b.n	20000f9c <RenderOscil_OutLoop>

20001054 <RenderOscil_Addr>:
20001054:	200218d8 	.word	0x200218d8

20001058 <RenderOscLine>:
20001058:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
2000105a:	9c07      	ldr	r4, [sp, #28]
2000105c:	8925      	ldrh	r5, [r4, #8]
2000105e:	086d      	lsrs	r5, r5, #1
20001060:	9507      	str	r5, [sp, #28]
20001062:	0849      	lsrs	r1, r1, #1
20001064:	085b      	lsrs	r3, r3, #1
20001066:	9301      	str	r3, [sp, #4]
20001068:	8965      	ldrh	r5, [r4, #10]
2000106a:	3d01      	subs	r5, #1
2000106c:	1aad      	subs	r5, r5, r2
2000106e:	46ae      	mov	lr, r5
20001070:	68e2      	ldr	r2, [r4, #12]
20001072:	9200      	str	r2, [sp, #0]
20001074:	440a      	add	r2, r1
20001076:	7d66      	ldrb	r6, [r4, #21]
20001078:	0237      	lsls	r7, r6, #8
2000107a:	433e      	orrs	r6, r7
2000107c:	7d24      	ldrb	r4, [r4, #20]
2000107e:	0227      	lsls	r7, r4, #8
20001080:	433c      	orrs	r4, r7
20001082:	9f07      	ldr	r7, [sp, #28]
20001084:	1a79      	subs	r1, r7, r1

20001086 <RenderOscLine_OutLoop>:
20001086:	9b01      	ldr	r3, [sp, #4]
20001088:	4299      	cmp	r1, r3
2000108a:	d900      	bls.n	2000108e <RenderOscLine_OutLoop+0x8>
2000108c:	4619      	mov	r1, r3
2000108e:	2900      	cmp	r1, #0
20001090:	d01b      	beq.n	200010ca <RenderOscLine_Stop>
20001092:	1a5b      	subs	r3, r3, r1
20001094:	9301      	str	r3, [sp, #4]
20001096:	7815      	ldrb	r5, [r2, #0]

20001098 <RenderOscLine_InLoop>:
20001098:	7813      	ldrb	r3, [r2, #0]
2000109a:	3201      	adds	r2, #1
2000109c:	4627      	mov	r7, r4
2000109e:	4573      	cmp	r3, lr
200010a0:	d00a      	beq.n	200010b8 <RenderOscLine_InLoop+0x20>
200010a2:	d303      	bcc.n	200010ac <RenderOscLine_InLoop+0x14>
200010a4:	42ab      	cmp	r3, r5
200010a6:	d901      	bls.n	200010ac <RenderOscLine_InLoop+0x14>
200010a8:	45ae      	cmp	lr, r5
200010aa:	d805      	bhi.n	200010b8 <RenderOscLine_InLoop+0x20>
200010ac:	42ab      	cmp	r3, r5
200010ae:	d204      	bcs.n	200010ba <RenderOscLine_InLoop+0x22>
200010b0:	4573      	cmp	r3, lr
200010b2:	d202      	bcs.n	200010ba <RenderOscLine_InLoop+0x22>
200010b4:	45ae      	cmp	lr, r5
200010b6:	d200      	bcs.n	200010ba <RenderOscLine_InLoop+0x22>
200010b8:	4637      	mov	r7, r6
200010ba:	8007      	strh	r7, [r0, #0]
200010bc:	3002      	adds	r0, #2
200010be:	461d      	mov	r5, r3
200010c0:	3901      	subs	r1, #1
200010c2:	d1e9      	bne.n	20001098 <RenderOscLine_InLoop>
200010c4:	9907      	ldr	r1, [sp, #28]
200010c6:	9a00      	ldr	r2, [sp, #0]
200010c8:	e7dd      	b.n	20001086 <RenderOscLine_OutLoop>

200010ca <RenderOscLine_Stop>:
200010ca:	bdfc      	pop	{r2, r3, r4, r5, r6, r7, pc}

200010cc <RenderOscLine_Addr>:
200010cc:	200218d8 	.word	0x200218d8

200010d0 <RenderPersp>:
200010d0:	b5f0      	push	{r4, r5, r6, r7, lr}
200010d2:	4e41      	ldr	r6, [pc, #260]	; (200011d8 <RenderPersp_pSioBase>)
200010d4:	8b15      	ldrh	r5, [r2, #24]
200010d6:	7f54      	ldrb	r4, [r2, #29]
200010d8:	b264      	sxtb	r4, r4
200010da:	00a4      	lsls	r4, r4, #2
200010dc:	d107      	bne.n	200010ee <RenderPersp+0x1e>
200010de:	086d      	lsrs	r5, r5, #1
200010e0:	1b49      	subs	r1, r1, r5
200010e2:	468c      	mov	ip, r1
200010e4:	2501      	movs	r5, #1
200010e6:	6675      	str	r5, [r6, #100]	; 0x64
200010e8:	032d      	lsls	r5, r5, #12
200010ea:	6635      	str	r5, [r6, #96]	; 0x60
200010ec:	e009      	b.n	20001102 <RenderPersp+0x32>
200010ee:	d502      	bpl.n	200010f6 <RenderPersp+0x26>
200010f0:	1a69      	subs	r1, r5, r1
200010f2:	3901      	subs	r1, #1
200010f4:	4264      	negs	r4, r4
200010f6:	1b4f      	subs	r7, r1, r5
200010f8:	46bc      	mov	ip, r7
200010fa:	032d      	lsls	r5, r5, #12
200010fc:	6635      	str	r5, [r6, #96]	; 0x60
200010fe:	1909      	adds	r1, r1, r4
20001100:	6671      	str	r1, [r6, #100]	; 0x64
20001102:	8ad3      	ldrh	r3, [r2, #22]
20001104:	085d      	lsrs	r5, r3, #1
20001106:	426d      	negs	r5, r5
20001108:	46ae      	mov	lr, r5
2000110a:	089f      	lsrs	r7, r3, #2
2000110c:	7f91      	ldrb	r1, [r2, #30]
2000110e:	7fd4      	ldrb	r4, [r2, #31]
20001110:	4b32      	ldr	r3, [pc, #200]	; (200011dc <RenderPersp_Interp>)
20001112:	6816      	ldr	r6, [r2, #0]
20001114:	611e      	str	r6, [r3, #16]
20001116:	4e32      	ldr	r6, [pc, #200]	; (200011e0 <RenderPersp_Ctrl>)
20001118:	1a76      	subs	r6, r6, r1
2000111a:	014d      	lsls	r5, r1, #5
2000111c:	432e      	orrs	r6, r5
2000111e:	3901      	subs	r1, #1
20001120:	190d      	adds	r5, r1, r4
20001122:	02ad      	lsls	r5, r5, #10
20001124:	432e      	orrs	r6, r5
20001126:	631e      	str	r6, [r3, #48]	; 0x30
20001128:	4e2d      	ldr	r6, [pc, #180]	; (200011e0 <RenderPersp_Ctrl>)
2000112a:	0289      	lsls	r1, r1, #10
2000112c:	430e      	orrs	r6, r1
2000112e:	62de      	str	r6, [r3, #44]	; 0x2c
20001130:	6854      	ldr	r4, [r2, #4]
20001132:	4929      	ldr	r1, [pc, #164]	; (200011d8 <RenderPersp_pSioBase>)
20001134:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001136:	6825      	ldr	r5, [r4, #0]
20001138:	434d      	muls	r5, r1
2000113a:	132d      	asrs	r5, r5, #12
2000113c:	609d      	str	r5, [r3, #8]
2000113e:	68e6      	ldr	r6, [r4, #12]
20001140:	434e      	muls	r6, r1
20001142:	1336      	asrs	r6, r6, #12
20001144:	60de      	str	r6, [r3, #12]
20001146:	4672      	mov	r2, lr
20001148:	4355      	muls	r5, r2
2000114a:	4372      	muls	r2, r6
2000114c:	468e      	mov	lr, r1
2000114e:	6866      	ldr	r6, [r4, #4]
20001150:	4371      	muls	r1, r6
20001152:	1309      	asrs	r1, r1, #12
20001154:	4666      	mov	r6, ip
20001156:	4371      	muls	r1, r6
20001158:	186d      	adds	r5, r5, r1
2000115a:	68a1      	ldr	r1, [r4, #8]
2000115c:	186d      	adds	r5, r5, r1
2000115e:	601d      	str	r5, [r3, #0]
20001160:	6921      	ldr	r1, [r4, #16]
20001162:	4675      	mov	r5, lr
20001164:	4369      	muls	r1, r5
20001166:	1309      	asrs	r1, r1, #12
20001168:	4371      	muls	r1, r6
2000116a:	1852      	adds	r2, r2, r1
2000116c:	6961      	ldr	r1, [r4, #20]
2000116e:	1852      	adds	r2, r2, r1
20001170:	605a      	str	r2, [r3, #4]
20001172:	087f      	lsrs	r7, r7, #1
20001174:	d30e      	bcc.n	20001194 <RenderPersp+0xc4>
20001176:	69dc      	ldr	r4, [r3, #28]
20001178:	7826      	ldrb	r6, [r4, #0]
2000117a:	69dc      	ldr	r4, [r3, #28]
2000117c:	7825      	ldrb	r5, [r4, #0]
2000117e:	022d      	lsls	r5, r5, #8
20001180:	432e      	orrs	r6, r5
20001182:	69dc      	ldr	r4, [r3, #28]
20001184:	7825      	ldrb	r5, [r4, #0]
20001186:	042d      	lsls	r5, r5, #16
20001188:	432e      	orrs	r6, r5
2000118a:	69dc      	ldr	r4, [r3, #28]
2000118c:	7825      	ldrb	r5, [r4, #0]
2000118e:	062d      	lsls	r5, r5, #24
20001190:	432e      	orrs	r6, r5
20001192:	c040      	stmia	r0!, {r6}
20001194:	423f      	tst	r7, r7
20001196:	d01e      	beq.n	200011d6 <RenderPersp+0x106>
20001198:	69dc      	ldr	r4, [r3, #28]
2000119a:	7821      	ldrb	r1, [r4, #0]
2000119c:	69dc      	ldr	r4, [r3, #28]
2000119e:	7824      	ldrb	r4, [r4, #0]
200011a0:	0224      	lsls	r4, r4, #8
200011a2:	4321      	orrs	r1, r4
200011a4:	69dc      	ldr	r4, [r3, #28]
200011a6:	7824      	ldrb	r4, [r4, #0]
200011a8:	0424      	lsls	r4, r4, #16
200011aa:	4321      	orrs	r1, r4
200011ac:	69dc      	ldr	r4, [r3, #28]
200011ae:	7824      	ldrb	r4, [r4, #0]
200011b0:	0624      	lsls	r4, r4, #24
200011b2:	4321      	orrs	r1, r4
200011b4:	69dc      	ldr	r4, [r3, #28]
200011b6:	7822      	ldrb	r2, [r4, #0]
200011b8:	69dc      	ldr	r4, [r3, #28]
200011ba:	7824      	ldrb	r4, [r4, #0]
200011bc:	0224      	lsls	r4, r4, #8
200011be:	4322      	orrs	r2, r4
200011c0:	69dc      	ldr	r4, [r3, #28]
200011c2:	7824      	ldrb	r4, [r4, #0]
200011c4:	0424      	lsls	r4, r4, #16
200011c6:	4322      	orrs	r2, r4
200011c8:	69dc      	ldr	r4, [r3, #28]
200011ca:	7824      	ldrb	r4, [r4, #0]
200011cc:	0624      	lsls	r4, r4, #24
200011ce:	4322      	orrs	r2, r4
200011d0:	c006      	stmia	r0!, {r1, r2}
200011d2:	3f01      	subs	r7, #1
200011d4:	d1e0      	bne.n	20001198 <RenderPersp+0xc8>
200011d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

200011d8 <RenderPersp_pSioBase>:
200011d8:	d0000000 	.word	0xd0000000

200011dc <RenderPersp_Interp>:
200011dc:	d00000c0 	.word	0xd00000c0

200011e0 <RenderPersp_Ctrl>:
200011e0:	0004000c 	.word	0x0004000c

200011e4 <RenderPersp2>:
200011e4:	b5f0      	push	{r4, r5, r6, r7, lr}
200011e6:	4e3c      	ldr	r6, [pc, #240]	; (200012d8 <RenderPersp_pSioBase>)
200011e8:	8b15      	ldrh	r5, [r2, #24]
200011ea:	7f54      	ldrb	r4, [r2, #29]
200011ec:	b264      	sxtb	r4, r4
200011ee:	00a4      	lsls	r4, r4, #2
200011f0:	d107      	bne.n	20001202 <RenderPersp2+0x1e>
200011f2:	086d      	lsrs	r5, r5, #1
200011f4:	1b49      	subs	r1, r1, r5
200011f6:	468c      	mov	ip, r1
200011f8:	2501      	movs	r5, #1
200011fa:	6675      	str	r5, [r6, #100]	; 0x64
200011fc:	032d      	lsls	r5, r5, #12
200011fe:	6635      	str	r5, [r6, #96]	; 0x60
20001200:	e009      	b.n	20001216 <RenderPersp2+0x32>
20001202:	d502      	bpl.n	2000120a <RenderPersp2+0x26>
20001204:	1a69      	subs	r1, r5, r1
20001206:	3901      	subs	r1, #1
20001208:	4264      	negs	r4, r4
2000120a:	1b4f      	subs	r7, r1, r5
2000120c:	46bc      	mov	ip, r7
2000120e:	032d      	lsls	r5, r5, #12
20001210:	6635      	str	r5, [r6, #96]	; 0x60
20001212:	1909      	adds	r1, r1, r4
20001214:	6671      	str	r1, [r6, #100]	; 0x64
20001216:	8ad3      	ldrh	r3, [r2, #22]
20001218:	085d      	lsrs	r5, r3, #1
2000121a:	426d      	negs	r5, r5
2000121c:	46ae      	mov	lr, r5
2000121e:	089f      	lsrs	r7, r3, #2
20001220:	7f91      	ldrb	r1, [r2, #30]
20001222:	7fd4      	ldrb	r4, [r2, #31]
20001224:	4b2d      	ldr	r3, [pc, #180]	; (200012dc <RenderPersp_Interp>)
20001226:	6816      	ldr	r6, [r2, #0]
20001228:	611e      	str	r6, [r3, #16]
2000122a:	4e2d      	ldr	r6, [pc, #180]	; (200012e0 <RenderPersp_Ctrl>)
2000122c:	1a76      	subs	r6, r6, r1
2000122e:	014d      	lsls	r5, r1, #5
20001230:	432e      	orrs	r6, r5
20001232:	3901      	subs	r1, #1
20001234:	190d      	adds	r5, r1, r4
20001236:	02ad      	lsls	r5, r5, #10
20001238:	432e      	orrs	r6, r5
2000123a:	631e      	str	r6, [r3, #48]	; 0x30
2000123c:	4e28      	ldr	r6, [pc, #160]	; (200012e0 <RenderPersp_Ctrl>)
2000123e:	0289      	lsls	r1, r1, #10
20001240:	430e      	orrs	r6, r1
20001242:	62de      	str	r6, [r3, #44]	; 0x2c
20001244:	6854      	ldr	r4, [r2, #4]
20001246:	4924      	ldr	r1, [pc, #144]	; (200012d8 <RenderPersp_pSioBase>)
20001248:	6f09      	ldr	r1, [r1, #112]	; 0x70
2000124a:	6825      	ldr	r5, [r4, #0]
2000124c:	434d      	muls	r5, r1
2000124e:	12ed      	asrs	r5, r5, #11
20001250:	609d      	str	r5, [r3, #8]
20001252:	106d      	asrs	r5, r5, #1
20001254:	68e6      	ldr	r6, [r4, #12]
20001256:	434e      	muls	r6, r1
20001258:	12f6      	asrs	r6, r6, #11
2000125a:	60de      	str	r6, [r3, #12]
2000125c:	1076      	asrs	r6, r6, #1
2000125e:	4672      	mov	r2, lr
20001260:	4355      	muls	r5, r2
20001262:	4372      	muls	r2, r6
20001264:	468e      	mov	lr, r1
20001266:	6866      	ldr	r6, [r4, #4]
20001268:	4371      	muls	r1, r6
2000126a:	1309      	asrs	r1, r1, #12
2000126c:	4666      	mov	r6, ip
2000126e:	4371      	muls	r1, r6
20001270:	186d      	adds	r5, r5, r1
20001272:	68a1      	ldr	r1, [r4, #8]
20001274:	186d      	adds	r5, r5, r1
20001276:	601d      	str	r5, [r3, #0]
20001278:	6921      	ldr	r1, [r4, #16]
2000127a:	4675      	mov	r5, lr
2000127c:	4369      	muls	r1, r5
2000127e:	1309      	asrs	r1, r1, #12
20001280:	4371      	muls	r1, r6
20001282:	1852      	adds	r2, r2, r1
20001284:	6961      	ldr	r1, [r4, #20]
20001286:	1852      	adds	r2, r2, r1
20001288:	605a      	str	r2, [r3, #4]
2000128a:	087f      	lsrs	r7, r7, #1
2000128c:	d30a      	bcc.n	200012a4 <RenderPersp2+0xc0>
2000128e:	69dc      	ldr	r4, [r3, #28]
20001290:	7821      	ldrb	r1, [r4, #0]
20001292:	020c      	lsls	r4, r1, #8
20001294:	4321      	orrs	r1, r4
20001296:	69dc      	ldr	r4, [r3, #28]
20001298:	7824      	ldrb	r4, [r4, #0]
2000129a:	0424      	lsls	r4, r4, #16
2000129c:	4321      	orrs	r1, r4
2000129e:	0224      	lsls	r4, r4, #8
200012a0:	4321      	orrs	r1, r4
200012a2:	c002      	stmia	r0!, {r1}
200012a4:	423f      	tst	r7, r7
200012a6:	d016      	beq.n	200012d6 <RenderPersp2+0xf2>
200012a8:	69dc      	ldr	r4, [r3, #28]
200012aa:	7821      	ldrb	r1, [r4, #0]
200012ac:	020c      	lsls	r4, r1, #8
200012ae:	4321      	orrs	r1, r4
200012b0:	69dc      	ldr	r4, [r3, #28]
200012b2:	7824      	ldrb	r4, [r4, #0]
200012b4:	0424      	lsls	r4, r4, #16
200012b6:	4321      	orrs	r1, r4
200012b8:	0224      	lsls	r4, r4, #8
200012ba:	4321      	orrs	r1, r4
200012bc:	69dc      	ldr	r4, [r3, #28]
200012be:	7822      	ldrb	r2, [r4, #0]
200012c0:	0214      	lsls	r4, r2, #8
200012c2:	4322      	orrs	r2, r4
200012c4:	69dc      	ldr	r4, [r3, #28]
200012c6:	7824      	ldrb	r4, [r4, #0]
200012c8:	0424      	lsls	r4, r4, #16
200012ca:	4322      	orrs	r2, r4
200012cc:	0224      	lsls	r4, r4, #8
200012ce:	4322      	orrs	r2, r4
200012d0:	c006      	stmia	r0!, {r1, r2}
200012d2:	3f01      	subs	r7, #1
200012d4:	d1e8      	bne.n	200012a8 <RenderPersp2+0xc4>
200012d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

200012d8 <RenderPersp_pSioBase>:
200012d8:	d0000000 	.word	0xd0000000

200012dc <RenderPersp_Interp>:
200012dc:	d00000c0 	.word	0xd00000c0

200012e0 <RenderPersp_Ctrl>:
200012e0:	0004000c 	.word	0x0004000c

200012e4 <RenderPlane2>:
200012e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200012e6:	9c06      	ldr	r4, [sp, #24]
200012e8:	8927      	ldrh	r7, [r4, #8]
200012ea:	2603      	movs	r6, #3
200012ec:	43b7      	bics	r7, r6
200012ee:	9706      	str	r7, [sp, #24]
200012f0:	43b1      	bics	r1, r6
200012f2:	43b3      	bics	r3, r6
200012f4:	9300      	str	r3, [sp, #0]
200012f6:	8865      	ldrh	r5, [r4, #2]
200012f8:	436a      	muls	r2, r5
200012fa:	68e5      	ldr	r5, [r4, #12]
200012fc:	442a      	add	r2, r5
200012fe:	4696      	mov	lr, r2
20001300:	08ce      	lsrs	r6, r1, #3
20001302:	4432      	add	r2, r6
20001304:	6963      	ldr	r3, [r4, #20]
20001306:	69a7      	ldr	r7, [r4, #24]
20001308:	074d      	lsls	r5, r1, #29
2000130a:	d512      	bpl.n	20001332 <RenderPlane2+0x4e>
2000130c:	7815      	ldrb	r5, [r2, #0]
2000130e:	5cd6      	ldrb	r6, [r2, r3]
20001310:	3201      	adds	r2, #1
20001312:	0736      	lsls	r6, r6, #28
20001314:	0db6      	lsrs	r6, r6, #22
20001316:	072d      	lsls	r5, r5, #28
20001318:	0ead      	lsrs	r5, r5, #26
2000131a:	4335      	orrs	r5, r6
2000131c:	597d      	ldr	r5, [r7, r5]
2000131e:	c020      	stmia	r0!, {r5}
20001320:	3104      	adds	r1, #4
20001322:	9e06      	ldr	r6, [sp, #24]
20001324:	42b1      	cmp	r1, r6
20001326:	d301      	bcc.n	2000132c <RenderPlane2+0x48>
20001328:	2100      	movs	r1, #0
2000132a:	4672      	mov	r2, lr
2000132c:	9e00      	ldr	r6, [sp, #0]
2000132e:	3e04      	subs	r6, #4
20001330:	9600      	str	r6, [sp, #0]
20001332:	9e06      	ldr	r6, [sp, #24]
20001334:	1a76      	subs	r6, r6, r1

20001336 <RenderPlane2_OutLoop>:
20001336:	9c00      	ldr	r4, [sp, #0]
20001338:	42a6      	cmp	r6, r4
2000133a:	d900      	bls.n	2000133e <RenderPlane2_OutLoop+0x8>
2000133c:	4626      	mov	r6, r4
2000133e:	2e08      	cmp	r6, #8
20001340:	d20f      	bcs.n	20001362 <RenderPlane2_Last+0x1c>
20001342:	2e04      	cmp	r6, #4
20001344:	d30c      	bcc.n	20001360 <RenderPlane2_Last+0x1a>

20001346 <RenderPlane2_Last>:
20001346:	7815      	ldrb	r5, [r2, #0]
20001348:	5cd4      	ldrb	r4, [r2, r3]
2000134a:	3201      	adds	r2, #1
2000134c:	0924      	lsrs	r4, r4, #4
2000134e:	0224      	lsls	r4, r4, #8
20001350:	432c      	orrs	r4, r5
20001352:	0924      	lsrs	r4, r4, #4
20001354:	00a4      	lsls	r4, r4, #2
20001356:	593c      	ldr	r4, [r7, r4]
20001358:	c010      	stmia	r0!, {r4}
2000135a:	4672      	mov	r2, lr
2000135c:	2e04      	cmp	r6, #4
2000135e:	d8ea      	bhi.n	20001336 <RenderPlane2_OutLoop>
20001360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20001362:	08b1      	lsrs	r1, r6, #2
20001364:	008e      	lsls	r6, r1, #2
20001366:	1ba4      	subs	r4, r4, r6
20001368:	9400      	str	r4, [sp, #0]
2000136a:	3901      	subs	r1, #1

2000136c <RenderPlane2_InLoop>:
2000136c:	7815      	ldrb	r5, [r2, #0]
2000136e:	5cd6      	ldrb	r6, [r2, r3]
20001370:	3201      	adds	r2, #1
20001372:	0934      	lsrs	r4, r6, #4
20001374:	0224      	lsls	r4, r4, #8
20001376:	432c      	orrs	r4, r5
20001378:	0924      	lsrs	r4, r4, #4
2000137a:	00a4      	lsls	r4, r4, #2
2000137c:	593c      	ldr	r4, [r7, r4]
2000137e:	0736      	lsls	r6, r6, #28
20001380:	0db6      	lsrs	r6, r6, #22
20001382:	072d      	lsls	r5, r5, #28
20001384:	0ead      	lsrs	r5, r5, #26
20001386:	4335      	orrs	r5, r6
20001388:	597d      	ldr	r5, [r7, r5]
2000138a:	c030      	stmia	r0!, {r4, r5}
2000138c:	3902      	subs	r1, #2
2000138e:	d8ed      	bhi.n	2000136c <RenderPlane2_InLoop>

20001390 <RenderPlane2_EndLoop>:
20001390:	9e06      	ldr	r6, [sp, #24]
20001392:	d0d8      	beq.n	20001346 <RenderPlane2_Last>
20001394:	4672      	mov	r2, lr
20001396:	e7ce      	b.n	20001336 <RenderPlane2_OutLoop>

20001398 <RenderProgress>:
20001398:	b5f0      	push	{r4, r5, r6, r7, lr}
2000139a:	9c05      	ldr	r4, [sp, #20]
2000139c:	0889      	lsrs	r1, r1, #2
2000139e:	68e5      	ldr	r5, [r4, #12]
200013a0:	5caa      	ldrb	r2, [r5, r2]
200013a2:	089b      	lsrs	r3, r3, #2
200013a4:	8927      	ldrh	r7, [r4, #8]
200013a6:	08bf      	lsrs	r7, r7, #2
200013a8:	46be      	mov	lr, r7
200013aa:	69a5      	ldr	r5, [r4, #24]
200013ac:	6964      	ldr	r4, [r4, #20]
200013ae:	421b      	tst	r3, r3
200013b0:	d017      	beq.n	200013e2 <RenderProgress+0x4a>
200013b2:	4677      	mov	r7, lr
200013b4:	1a7f      	subs	r7, r7, r1
200013b6:	429f      	cmp	r7, r3
200013b8:	d900      	bls.n	200013bc <RenderProgress+0x24>
200013ba:	461f      	mov	r7, r3
200013bc:	1bdb      	subs	r3, r3, r7
200013be:	4291      	cmp	r1, r2
200013c0:	d208      	bcs.n	200013d4 <RenderProgress+0x3c>
200013c2:	1a56      	subs	r6, r2, r1
200013c4:	42be      	cmp	r6, r7
200013c6:	d900      	bls.n	200013ca <RenderProgress+0x32>
200013c8:	463e      	mov	r6, r7
200013ca:	1bbf      	subs	r7, r7, r6
200013cc:	c040      	stmia	r0!, {r6}
200013ce:	1866      	adds	r6, r4, r1
200013d0:	c040      	stmia	r0!, {r6}
200013d2:	4611      	mov	r1, r2
200013d4:	423f      	tst	r7, r7
200013d6:	d002      	beq.n	200013de <RenderProgress+0x46>
200013d8:	c080      	stmia	r0!, {r7}
200013da:	186e      	adds	r6, r5, r1
200013dc:	c040      	stmia	r0!, {r6}
200013de:	2100      	movs	r1, #0
200013e0:	e7e5      	b.n	200013ae <RenderProgress+0x16>
200013e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

200013e4 <RenderSprite>:
200013e4:	b5f0      	push	{r4, r5, r6, r7, lr}
200013e6:	6817      	ldr	r7, [r2, #0]
200013e8:	8ad6      	ldrh	r6, [r2, #22]
200013ea:	8c12      	ldrh	r2, [r2, #32]
200013ec:	3a01      	subs	r2, #1
200013ee:	d324      	bcc.n	2000143a <RenderSprite+0x56>
200013f0:	b407      	push	{r0, r1, r2}
200013f2:	cf08      	ldmia	r7!, {r3}
200013f4:	8a5c      	ldrh	r4, [r3, #18]
200013f6:	b224      	sxth	r4, r4
200013f8:	1b09      	subs	r1, r1, r4
200013fa:	d41c      	bmi.n	20001436 <RenderSprite+0x52>
200013fc:	8adc      	ldrh	r4, [r3, #22]
200013fe:	42a1      	cmp	r1, r4
20001400:	da19      	bge.n	20001436 <RenderSprite+0x52>
20001402:	685c      	ldr	r4, [r3, #4]
20001404:	5c65      	ldrb	r5, [r4, r1]
20001406:	689c      	ldr	r4, [r3, #8]
20001408:	5c62      	ldrb	r2, [r4, r1]
2000140a:	8b1c      	ldrh	r4, [r3, #24]
2000140c:	4361      	muls	r1, r4
2000140e:	681c      	ldr	r4, [r3, #0]
20001410:	4421      	add	r1, r4
20001412:	8a1c      	ldrh	r4, [r3, #16]
20001414:	b224      	sxth	r4, r4
20001416:	7b1b      	ldrb	r3, [r3, #12]
20001418:	1964      	adds	r4, r4, r5
2000141a:	d502      	bpl.n	20001422 <RenderSprite+0x3e>
2000141c:	1b2d      	subs	r5, r5, r4
2000141e:	1912      	adds	r2, r2, r4
20001420:	2400      	movs	r4, #0
20001422:	1949      	adds	r1, r1, r5
20001424:	1b35      	subs	r5, r6, r4
20001426:	42aa      	cmp	r2, r5
20001428:	dd00      	ble.n	2000142c <RenderSprite+0x48>
2000142a:	462a      	mov	r2, r5
2000142c:	4212      	tst	r2, r2
2000142e:	dd02      	ble.n	20001436 <RenderSprite+0x52>
20001430:	1900      	adds	r0, r0, r4
20001432:	f000 fc11 	bl	20001c58 <BlitKey>
20001436:	bc07      	pop	{r0, r1, r2}
20001438:	e7d8      	b.n	200013ec <RenderSprite+0x8>
2000143a:	bdf0      	pop	{r4, r5, r6, r7, pc}

2000143c <RenderTile>:
2000143c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
2000143e:	9c08      	ldr	r4, [sp, #32]
20001440:	4d2f      	ldr	r5, [pc, #188]	; (20001500 <RenderTile_pSioBase>)
20001442:	662a      	str	r2, [r5, #96]	; 0x60
20001444:	69a2      	ldr	r2, [r4, #24]
20001446:	666a      	str	r2, [r5, #100]	; 0x64
20001448:	8927      	ldrh	r7, [r4, #8]
2000144a:	2603      	movs	r6, #3
2000144c:	43b7      	bics	r7, r6
2000144e:	9700      	str	r7, [sp, #0]
20001450:	43b1      	bics	r1, r6
20001452:	43b3      	bics	r3, r6
20001454:	9301      	str	r3, [sp, #4]
20001456:	8a63      	ldrh	r3, [r4, #18]
20001458:	9302      	str	r3, [sp, #8]
2000145a:	6f6e      	ldr	r6, [r5, #116]	; 0x74
2000145c:	6f2f      	ldr	r7, [r5, #112]	; 0x70
2000145e:	6629      	str	r1, [r5, #96]	; 0x60
20001460:	666b      	str	r3, [r5, #100]	; 0x64
20001462:	435a      	muls	r2, r3
20001464:	8863      	ldrh	r3, [r4, #2]
20001466:	435f      	muls	r7, r3
20001468:	68e3      	ldr	r3, [r4, #12]
2000146a:	18ff      	adds	r7, r7, r3
2000146c:	46be      	mov	lr, r7
2000146e:	9b02      	ldr	r3, [sp, #8]
20001470:	435e      	muls	r6, r3
20001472:	6964      	ldr	r4, [r4, #20]
20001474:	19a4      	adds	r4, r4, r6
20001476:	6f6e      	ldr	r6, [r5, #116]	; 0x74
20001478:	6f2d      	ldr	r5, [r5, #112]	; 0x70
2000147a:	197f      	adds	r7, r7, r5
2000147c:	4236      	tst	r6, r6
2000147e:	d011      	beq.n	200014a4 <RenderTile+0x68>
20001480:	1b9d      	subs	r5, r3, r6
20001482:	1949      	adds	r1, r1, r5
20001484:	9b01      	ldr	r3, [sp, #4]
20001486:	1b5b      	subs	r3, r3, r5
20001488:	9301      	str	r3, [sp, #4]
2000148a:	08ad      	lsrs	r5, r5, #2
2000148c:	c020      	stmia	r0!, {r5}
2000148e:	783b      	ldrb	r3, [r7, #0]
20001490:	3701      	adds	r7, #1
20001492:	4353      	muls	r3, r2
20001494:	4423      	add	r3, r4
20001496:	4433      	add	r3, r6
20001498:	c008      	stmia	r0!, {r3}
2000149a:	9b00      	ldr	r3, [sp, #0]
2000149c:	4299      	cmp	r1, r3
2000149e:	d301      	bcc.n	200014a4 <RenderTile+0x68>
200014a0:	2100      	movs	r1, #0
200014a2:	4677      	mov	r7, lr
200014a4:	9b00      	ldr	r3, [sp, #0]
200014a6:	1a5d      	subs	r5, r3, r1
200014a8:	9b01      	ldr	r3, [sp, #4]

200014aa <RenderTile_OutLoop>:
200014aa:	429d      	cmp	r5, r3
200014ac:	d900      	bls.n	200014b0 <RenderTile_OutLoop+0x6>
200014ae:	461d      	mov	r5, r3
200014b0:	9902      	ldr	r1, [sp, #8]
200014b2:	428d      	cmp	r5, r1
200014b4:	d20e      	bcs.n	200014d4 <RenderTile_Last+0x18>
200014b6:	2d04      	cmp	r5, #4
200014b8:	d30b      	bcc.n	200014d2 <RenderTile_Last+0x16>
200014ba:	4629      	mov	r1, r5

200014bc <RenderTile_Last>:
200014bc:	088e      	lsrs	r6, r1, #2
200014be:	c040      	stmia	r0!, {r6}
200014c0:	783e      	ldrb	r6, [r7, #0]
200014c2:	3701      	adds	r7, #1
200014c4:	4356      	muls	r6, r2
200014c6:	4426      	add	r6, r4
200014c8:	c040      	stmia	r0!, {r6}
200014ca:	4677      	mov	r7, lr
200014cc:	9e02      	ldr	r6, [sp, #8]
200014ce:	42b5      	cmp	r5, r6
200014d0:	d2eb      	bcs.n	200014aa <RenderTile_OutLoop>
200014d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
200014d4:	08a9      	lsrs	r1, r5, #2
200014d6:	008d      	lsls	r5, r1, #2
200014d8:	1b5b      	subs	r3, r3, r5
200014da:	9d02      	ldr	r5, [sp, #8]
200014dc:	08ad      	lsrs	r5, r5, #2
200014de:	1b49      	subs	r1, r1, r5
200014e0:	3101      	adds	r1, #1

200014e2 <RenderTile_InLoop>:
200014e2:	783e      	ldrb	r6, [r7, #0]
200014e4:	3701      	adds	r7, #1
200014e6:	4356      	muls	r6, r2
200014e8:	4426      	add	r6, r4
200014ea:	c060      	stmia	r0!, {r5, r6}
200014ec:	1b49      	subs	r1, r1, r5
200014ee:	d8f8      	bhi.n	200014e2 <RenderTile_InLoop>
200014f0:	1949      	adds	r1, r1, r5
200014f2:	3901      	subs	r1, #1
200014f4:	9d00      	ldr	r5, [sp, #0]
200014f6:	0089      	lsls	r1, r1, #2
200014f8:	d1e0      	bne.n	200014bc <RenderTile_Last>
200014fa:	4677      	mov	r7, lr
200014fc:	e7d5      	b.n	200014aa <RenderTile_OutLoop>
200014fe:	46c0      	nop			; (mov r8, r8)

20001500 <RenderTile_pSioBase>:
20001500:	d0000000 	.word	0xd0000000

20001504 <RenderTile2>:
20001504:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
20001506:	9c07      	ldr	r4, [sp, #28]
20001508:	4d2c      	ldr	r5, [pc, #176]	; (200015bc <RenderTile_pSioBase>)
2000150a:	662a      	str	r2, [r5, #96]	; 0x60
2000150c:	8b22      	ldrh	r2, [r4, #24]
2000150e:	666a      	str	r2, [r5, #100]	; 0x64
20001510:	8927      	ldrh	r7, [r4, #8]
20001512:	2603      	movs	r6, #3
20001514:	43b7      	bics	r7, r6
20001516:	9700      	str	r7, [sp, #0]
20001518:	43b1      	bics	r1, r6
2000151a:	43b3      	bics	r3, r6
2000151c:	9301      	str	r3, [sp, #4]
2000151e:	8a63      	ldrh	r3, [r4, #18]
20001520:	6f6e      	ldr	r6, [r5, #116]	; 0x74
20001522:	6f2f      	ldr	r7, [r5, #112]	; 0x70
20001524:	6629      	str	r1, [r5, #96]	; 0x60
20001526:	666b      	str	r3, [r5, #100]	; 0x64
20001528:	8862      	ldrh	r2, [r4, #2]
2000152a:	4357      	muls	r7, r2
2000152c:	68e2      	ldr	r2, [r4, #12]
2000152e:	18bf      	adds	r7, r7, r2
20001530:	46be      	mov	lr, r7
20001532:	8b62      	ldrh	r2, [r4, #26]
20001534:	4356      	muls	r6, r2
20001536:	6964      	ldr	r4, [r4, #20]
20001538:	19a4      	adds	r4, r4, r6
2000153a:	6f6e      	ldr	r6, [r5, #116]	; 0x74
2000153c:	6f2d      	ldr	r5, [r5, #112]	; 0x70
2000153e:	197f      	adds	r7, r7, r5
20001540:	4236      	tst	r6, r6
20001542:	d011      	beq.n	20001568 <RenderTile2+0x64>
20001544:	1b9d      	subs	r5, r3, r6
20001546:	1949      	adds	r1, r1, r5
20001548:	9a01      	ldr	r2, [sp, #4]
2000154a:	1b52      	subs	r2, r2, r5
2000154c:	9201      	str	r2, [sp, #4]
2000154e:	08ad      	lsrs	r5, r5, #2
20001550:	c020      	stmia	r0!, {r5}
20001552:	783a      	ldrb	r2, [r7, #0]
20001554:	3701      	adds	r7, #1
20001556:	435a      	muls	r2, r3
20001558:	4422      	add	r2, r4
2000155a:	4432      	add	r2, r6
2000155c:	c004      	stmia	r0!, {r2}
2000155e:	9a00      	ldr	r2, [sp, #0]
20001560:	4291      	cmp	r1, r2
20001562:	d301      	bcc.n	20001568 <RenderTile2+0x64>
20001564:	2100      	movs	r1, #0
20001566:	4677      	mov	r7, lr
20001568:	9a00      	ldr	r2, [sp, #0]
2000156a:	1a55      	subs	r5, r2, r1
2000156c:	9a01      	ldr	r2, [sp, #4]

2000156e <RenderTile_OutLoop>:
2000156e:	4295      	cmp	r5, r2
20001570:	d900      	bls.n	20001574 <RenderTile_OutLoop+0x6>
20001572:	4615      	mov	r5, r2
20001574:	429d      	cmp	r5, r3
20001576:	d20d      	bcs.n	20001594 <RenderTile_Last+0x16>
20001578:	2d04      	cmp	r5, #4
2000157a:	d30a      	bcc.n	20001592 <RenderTile_Last+0x14>
2000157c:	4629      	mov	r1, r5

2000157e <RenderTile_Last>:
2000157e:	088e      	lsrs	r6, r1, #2
20001580:	c040      	stmia	r0!, {r6}
20001582:	783e      	ldrb	r6, [r7, #0]
20001584:	3701      	adds	r7, #1
20001586:	435e      	muls	r6, r3
20001588:	4426      	add	r6, r4
2000158a:	c040      	stmia	r0!, {r6}
2000158c:	4677      	mov	r7, lr
2000158e:	429d      	cmp	r5, r3
20001590:	d2ed      	bcs.n	2000156e <RenderTile_OutLoop>
20001592:	bdfc      	pop	{r2, r3, r4, r5, r6, r7, pc}
20001594:	08a9      	lsrs	r1, r5, #2
20001596:	008d      	lsls	r5, r1, #2
20001598:	1b52      	subs	r2, r2, r5
2000159a:	089d      	lsrs	r5, r3, #2
2000159c:	1b49      	subs	r1, r1, r5
2000159e:	3101      	adds	r1, #1

200015a0 <RenderTile_InLoop>:
200015a0:	783e      	ldrb	r6, [r7, #0]
200015a2:	3701      	adds	r7, #1
200015a4:	435e      	muls	r6, r3
200015a6:	4426      	add	r6, r4
200015a8:	c060      	stmia	r0!, {r5, r6}
200015aa:	1b49      	subs	r1, r1, r5
200015ac:	d8f8      	bhi.n	200015a0 <RenderTile_InLoop>
200015ae:	1949      	adds	r1, r1, r5
200015b0:	3901      	subs	r1, #1
200015b2:	9d00      	ldr	r5, [sp, #0]
200015b4:	0089      	lsls	r1, r1, #2
200015b6:	d1e2      	bne.n	2000157e <RenderTile_Last>
200015b8:	4677      	mov	r7, lr
200015ba:	e7d8      	b.n	2000156e <RenderTile_OutLoop>

200015bc <RenderTile_pSioBase>:
200015bc:	d0000000 	.word	0xd0000000

200015c0 <RenderTilePersp>:
200015c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200015c2:	9c06      	ldr	r4, [sp, #24]
200015c4:	4e5c      	ldr	r6, [pc, #368]	; (20001738 <RenderTilePersp_pSioBase>)
200015c6:	8965      	ldrh	r5, [r4, #10]
200015c8:	7ce1      	ldrb	r1, [r4, #19]
200015ca:	b249      	sxtb	r1, r1
200015cc:	0089      	lsls	r1, r1, #2
200015ce:	d107      	bne.n	200015e0 <RenderTilePersp+0x20>
200015d0:	086d      	lsrs	r5, r5, #1
200015d2:	1b52      	subs	r2, r2, r5
200015d4:	4694      	mov	ip, r2
200015d6:	2501      	movs	r5, #1
200015d8:	6675      	str	r5, [r6, #100]	; 0x64
200015da:	032d      	lsls	r5, r5, #12
200015dc:	6635      	str	r5, [r6, #96]	; 0x60
200015de:	e009      	b.n	200015f4 <RenderTilePersp+0x34>
200015e0:	d502      	bpl.n	200015e8 <RenderTilePersp+0x28>
200015e2:	1aaa      	subs	r2, r5, r2
200015e4:	3a01      	subs	r2, #1
200015e6:	4249      	negs	r1, r1
200015e8:	1b57      	subs	r7, r2, r5
200015ea:	46bc      	mov	ip, r7
200015ec:	032d      	lsls	r5, r5, #12
200015ee:	6635      	str	r5, [r6, #96]	; 0x60
200015f0:	1852      	adds	r2, r2, r1
200015f2:	6672      	str	r2, [r6, #100]	; 0x64
200015f4:	085d      	lsrs	r5, r3, #1
200015f6:	426d      	negs	r5, r5
200015f8:	46ae      	mov	lr, r5
200015fa:	089f      	lsrs	r7, r3, #2
200015fc:	4b4f      	ldr	r3, [pc, #316]	; (2000173c <RenderTilePersp_Interp>)
200015fe:	68e6      	ldr	r6, [r4, #12]
20001600:	611e      	str	r6, [r3, #16]
20001602:	4e4f      	ldr	r6, [pc, #316]	; (20001740 <RenderTilePersp_Ctrl>)
20001604:	7ca1      	ldrb	r1, [r4, #18]
20001606:	9100      	str	r1, [sp, #0]
20001608:	1876      	adds	r6, r6, r1
2000160a:	78a2      	ldrb	r2, [r4, #2]
2000160c:	1e55      	subs	r5, r2, #1
2000160e:	02ad      	lsls	r5, r5, #10
20001610:	432e      	orrs	r6, r5
20001612:	62de      	str	r6, [r3, #44]	; 0x2c
20001614:	1ab6      	subs	r6, r6, r2
20001616:	0152      	lsls	r2, r2, #5
20001618:	4316      	orrs	r6, r2
2000161a:	78e2      	ldrb	r2, [r4, #3]
2000161c:	0292      	lsls	r2, r2, #10
2000161e:	18b6      	adds	r6, r6, r2
20001620:	631e      	str	r6, [r3, #48]	; 0x30
20001622:	6966      	ldr	r6, [r4, #20]
20001624:	651e      	str	r6, [r3, #80]	; 0x50
20001626:	4e46      	ldr	r6, [pc, #280]	; (20001740 <RenderTilePersp_Ctrl>)
20001628:	1e4d      	subs	r5, r1, #1
2000162a:	02ad      	lsls	r5, r5, #10
2000162c:	432e      	orrs	r6, r5
2000162e:	66de      	str	r6, [r3, #108]	; 0x6c
20001630:	1a76      	subs	r6, r6, r1
20001632:	014d      	lsls	r5, r1, #5
20001634:	432e      	orrs	r6, r5
20001636:	0289      	lsls	r1, r1, #10
20001638:	1876      	adds	r6, r6, r1
2000163a:	671e      	str	r6, [r3, #112]	; 0x70
2000163c:	69a4      	ldr	r4, [r4, #24]
2000163e:	493e      	ldr	r1, [pc, #248]	; (20001738 <RenderTilePersp_pSioBase>)
20001640:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001642:	6825      	ldr	r5, [r4, #0]
20001644:	434d      	muls	r5, r1
20001646:	132d      	asrs	r5, r5, #12
20001648:	609d      	str	r5, [r3, #8]
2000164a:	649d      	str	r5, [r3, #72]	; 0x48
2000164c:	68e6      	ldr	r6, [r4, #12]
2000164e:	434e      	muls	r6, r1
20001650:	1336      	asrs	r6, r6, #12
20001652:	60de      	str	r6, [r3, #12]
20001654:	64de      	str	r6, [r3, #76]	; 0x4c
20001656:	4672      	mov	r2, lr
20001658:	4355      	muls	r5, r2
2000165a:	4372      	muls	r2, r6
2000165c:	468e      	mov	lr, r1
2000165e:	6866      	ldr	r6, [r4, #4]
20001660:	4371      	muls	r1, r6
20001662:	1309      	asrs	r1, r1, #12
20001664:	4666      	mov	r6, ip
20001666:	4371      	muls	r1, r6
20001668:	186d      	adds	r5, r5, r1
2000166a:	68a1      	ldr	r1, [r4, #8]
2000166c:	186d      	adds	r5, r5, r1
2000166e:	601d      	str	r5, [r3, #0]
20001670:	641d      	str	r5, [r3, #64]	; 0x40
20001672:	6921      	ldr	r1, [r4, #16]
20001674:	4675      	mov	r5, lr
20001676:	4369      	muls	r1, r5
20001678:	1309      	asrs	r1, r1, #12
2000167a:	4371      	muls	r1, r6
2000167c:	1852      	adds	r2, r2, r1
2000167e:	6961      	ldr	r1, [r4, #20]
20001680:	1852      	adds	r2, r2, r1
20001682:	605a      	str	r2, [r3, #4]
20001684:	645a      	str	r2, [r3, #68]	; 0x44
20001686:	9e00      	ldr	r6, [sp, #0]
20001688:	0076      	lsls	r6, r6, #1
2000168a:	087f      	lsrs	r7, r7, #1
2000168c:	d31a      	bcc.n	200016c4 <RenderTilePersp+0x104>
2000168e:	69dc      	ldr	r4, [r3, #28]
20001690:	7824      	ldrb	r4, [r4, #0]
20001692:	40b4      	lsls	r4, r6
20001694:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001696:	5d29      	ldrb	r1, [r5, r4]
20001698:	69dc      	ldr	r4, [r3, #28]
2000169a:	7824      	ldrb	r4, [r4, #0]
2000169c:	40b4      	lsls	r4, r6
2000169e:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016a0:	5d2c      	ldrb	r4, [r5, r4]
200016a2:	0224      	lsls	r4, r4, #8
200016a4:	4321      	orrs	r1, r4
200016a6:	69dc      	ldr	r4, [r3, #28]
200016a8:	7824      	ldrb	r4, [r4, #0]
200016aa:	40b4      	lsls	r4, r6
200016ac:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016ae:	5d2c      	ldrb	r4, [r5, r4]
200016b0:	0424      	lsls	r4, r4, #16
200016b2:	4321      	orrs	r1, r4
200016b4:	69dc      	ldr	r4, [r3, #28]
200016b6:	7824      	ldrb	r4, [r4, #0]
200016b8:	40b4      	lsls	r4, r6
200016ba:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016bc:	5d2c      	ldrb	r4, [r5, r4]
200016be:	0624      	lsls	r4, r4, #24
200016c0:	4321      	orrs	r1, r4
200016c2:	c002      	stmia	r0!, {r1}
200016c4:	423f      	tst	r7, r7
200016c6:	d036      	beq.n	20001736 <RenderTilePersp+0x176>
200016c8:	69dc      	ldr	r4, [r3, #28]
200016ca:	7824      	ldrb	r4, [r4, #0]
200016cc:	40b4      	lsls	r4, r6
200016ce:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016d0:	5d29      	ldrb	r1, [r5, r4]
200016d2:	69dc      	ldr	r4, [r3, #28]
200016d4:	7824      	ldrb	r4, [r4, #0]
200016d6:	40b4      	lsls	r4, r6
200016d8:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016da:	5d2c      	ldrb	r4, [r5, r4]
200016dc:	0224      	lsls	r4, r4, #8
200016de:	4321      	orrs	r1, r4
200016e0:	69dc      	ldr	r4, [r3, #28]
200016e2:	7824      	ldrb	r4, [r4, #0]
200016e4:	40b4      	lsls	r4, r6
200016e6:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016e8:	5d2c      	ldrb	r4, [r5, r4]
200016ea:	0424      	lsls	r4, r4, #16
200016ec:	4321      	orrs	r1, r4
200016ee:	69dc      	ldr	r4, [r3, #28]
200016f0:	7824      	ldrb	r4, [r4, #0]
200016f2:	40b4      	lsls	r4, r6
200016f4:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016f6:	5d2c      	ldrb	r4, [r5, r4]
200016f8:	0624      	lsls	r4, r4, #24
200016fa:	4321      	orrs	r1, r4
200016fc:	69dc      	ldr	r4, [r3, #28]
200016fe:	7824      	ldrb	r4, [r4, #0]
20001700:	40b4      	lsls	r4, r6
20001702:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001704:	5d2a      	ldrb	r2, [r5, r4]
20001706:	69dc      	ldr	r4, [r3, #28]
20001708:	7824      	ldrb	r4, [r4, #0]
2000170a:	40b4      	lsls	r4, r6
2000170c:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000170e:	5d2c      	ldrb	r4, [r5, r4]
20001710:	0224      	lsls	r4, r4, #8
20001712:	4322      	orrs	r2, r4
20001714:	69dc      	ldr	r4, [r3, #28]
20001716:	7824      	ldrb	r4, [r4, #0]
20001718:	40b4      	lsls	r4, r6
2000171a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000171c:	5d2c      	ldrb	r4, [r5, r4]
2000171e:	0424      	lsls	r4, r4, #16
20001720:	4322      	orrs	r2, r4
20001722:	69dc      	ldr	r4, [r3, #28]
20001724:	7824      	ldrb	r4, [r4, #0]
20001726:	40b4      	lsls	r4, r6
20001728:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000172a:	5d2c      	ldrb	r4, [r5, r4]
2000172c:	0624      	lsls	r4, r4, #24
2000172e:	4322      	orrs	r2, r4
20001730:	c006      	stmia	r0!, {r1, r2}
20001732:	3f01      	subs	r7, #1
20001734:	d1c8      	bne.n	200016c8 <RenderTilePersp+0x108>
20001736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

20001738 <RenderTilePersp_pSioBase>:
20001738:	d0000000 	.word	0xd0000000

2000173c <RenderTilePersp_Interp>:
2000173c:	d0000080 	.word	0xd0000080

20001740 <RenderTilePersp_Ctrl>:
20001740:	0004000c 	.word	0x0004000c

20001744 <RenderTilePersp15>:
20001744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001746:	9c06      	ldr	r4, [sp, #24]
20001748:	4e57      	ldr	r6, [pc, #348]	; (200018a8 <RenderTilePersp_pSioBase>)
2000174a:	8965      	ldrh	r5, [r4, #10]
2000174c:	7ce1      	ldrb	r1, [r4, #19]
2000174e:	b249      	sxtb	r1, r1
20001750:	0089      	lsls	r1, r1, #2
20001752:	d107      	bne.n	20001764 <RenderTilePersp15+0x20>
20001754:	086d      	lsrs	r5, r5, #1
20001756:	1b52      	subs	r2, r2, r5
20001758:	4694      	mov	ip, r2
2000175a:	2501      	movs	r5, #1
2000175c:	6675      	str	r5, [r6, #100]	; 0x64
2000175e:	032d      	lsls	r5, r5, #12
20001760:	6635      	str	r5, [r6, #96]	; 0x60
20001762:	e009      	b.n	20001778 <RenderTilePersp15+0x34>
20001764:	d502      	bpl.n	2000176c <RenderTilePersp15+0x28>
20001766:	1aaa      	subs	r2, r5, r2
20001768:	3a01      	subs	r2, #1
2000176a:	4249      	negs	r1, r1
2000176c:	1b57      	subs	r7, r2, r5
2000176e:	46bc      	mov	ip, r7
20001770:	032d      	lsls	r5, r5, #12
20001772:	6635      	str	r5, [r6, #96]	; 0x60
20001774:	1852      	adds	r2, r2, r1
20001776:	6672      	str	r2, [r6, #100]	; 0x64
20001778:	085d      	lsrs	r5, r3, #1
2000177a:	426d      	negs	r5, r5
2000177c:	46ae      	mov	lr, r5
2000177e:	089f      	lsrs	r7, r3, #2
20001780:	4b4a      	ldr	r3, [pc, #296]	; (200018ac <RenderTilePersp_Interp>)
20001782:	68e6      	ldr	r6, [r4, #12]
20001784:	611e      	str	r6, [r3, #16]
20001786:	4e4a      	ldr	r6, [pc, #296]	; (200018b0 <RenderTilePersp_Ctrl>)
20001788:	7ca1      	ldrb	r1, [r4, #18]
2000178a:	9100      	str	r1, [sp, #0]
2000178c:	1876      	adds	r6, r6, r1
2000178e:	78a2      	ldrb	r2, [r4, #2]
20001790:	1e55      	subs	r5, r2, #1
20001792:	02ad      	lsls	r5, r5, #10
20001794:	432e      	orrs	r6, r5
20001796:	62de      	str	r6, [r3, #44]	; 0x2c
20001798:	1ab6      	subs	r6, r6, r2
2000179a:	0152      	lsls	r2, r2, #5
2000179c:	4316      	orrs	r6, r2
2000179e:	78e2      	ldrb	r2, [r4, #3]
200017a0:	0292      	lsls	r2, r2, #10
200017a2:	18b6      	adds	r6, r6, r2
200017a4:	631e      	str	r6, [r3, #48]	; 0x30
200017a6:	6966      	ldr	r6, [r4, #20]
200017a8:	651e      	str	r6, [r3, #80]	; 0x50
200017aa:	4e41      	ldr	r6, [pc, #260]	; (200018b0 <RenderTilePersp_Ctrl>)
200017ac:	1e4d      	subs	r5, r1, #1
200017ae:	02ad      	lsls	r5, r5, #10
200017b0:	432e      	orrs	r6, r5
200017b2:	66de      	str	r6, [r3, #108]	; 0x6c
200017b4:	1a76      	subs	r6, r6, r1
200017b6:	014d      	lsls	r5, r1, #5
200017b8:	432e      	orrs	r6, r5
200017ba:	0289      	lsls	r1, r1, #10
200017bc:	1876      	adds	r6, r6, r1
200017be:	671e      	str	r6, [r3, #112]	; 0x70
200017c0:	69a4      	ldr	r4, [r4, #24]
200017c2:	4939      	ldr	r1, [pc, #228]	; (200018a8 <RenderTilePersp_pSioBase>)
200017c4:	6f09      	ldr	r1, [r1, #112]	; 0x70
200017c6:	6825      	ldr	r5, [r4, #0]
200017c8:	434d      	muls	r5, r1
200017ca:	132d      	asrs	r5, r5, #12
200017cc:	106a      	asrs	r2, r5, #1
200017ce:	1952      	adds	r2, r2, r5
200017d0:	609a      	str	r2, [r3, #8]
200017d2:	649a      	str	r2, [r3, #72]	; 0x48
200017d4:	68e6      	ldr	r6, [r4, #12]
200017d6:	434e      	muls	r6, r1
200017d8:	1336      	asrs	r6, r6, #12
200017da:	1072      	asrs	r2, r6, #1
200017dc:	1992      	adds	r2, r2, r6
200017de:	60da      	str	r2, [r3, #12]
200017e0:	64da      	str	r2, [r3, #76]	; 0x4c
200017e2:	4672      	mov	r2, lr
200017e4:	4355      	muls	r5, r2
200017e6:	4372      	muls	r2, r6
200017e8:	468e      	mov	lr, r1
200017ea:	6866      	ldr	r6, [r4, #4]
200017ec:	4371      	muls	r1, r6
200017ee:	1309      	asrs	r1, r1, #12
200017f0:	4666      	mov	r6, ip
200017f2:	4371      	muls	r1, r6
200017f4:	186d      	adds	r5, r5, r1
200017f6:	68a1      	ldr	r1, [r4, #8]
200017f8:	186d      	adds	r5, r5, r1
200017fa:	601d      	str	r5, [r3, #0]
200017fc:	641d      	str	r5, [r3, #64]	; 0x40
200017fe:	6921      	ldr	r1, [r4, #16]
20001800:	4675      	mov	r5, lr
20001802:	4369      	muls	r1, r5
20001804:	1309      	asrs	r1, r1, #12
20001806:	4371      	muls	r1, r6
20001808:	1852      	adds	r2, r2, r1
2000180a:	6961      	ldr	r1, [r4, #20]
2000180c:	1852      	adds	r2, r2, r1
2000180e:	605a      	str	r2, [r3, #4]
20001810:	645a      	str	r2, [r3, #68]	; 0x44
20001812:	9e00      	ldr	r6, [sp, #0]
20001814:	0076      	lsls	r6, r6, #1
20001816:	087f      	lsrs	r7, r7, #1
20001818:	d315      	bcc.n	20001846 <RenderTilePersp15+0x102>
2000181a:	69dc      	ldr	r4, [r3, #28]
2000181c:	7824      	ldrb	r4, [r4, #0]
2000181e:	40b4      	lsls	r4, r6
20001820:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001822:	5d29      	ldrb	r1, [r5, r4]
20001824:	69dc      	ldr	r4, [r3, #28]
20001826:	7824      	ldrb	r4, [r4, #0]
20001828:	40b4      	lsls	r4, r6
2000182a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000182c:	5d2c      	ldrb	r4, [r5, r4]
2000182e:	0224      	lsls	r4, r4, #8
20001830:	4321      	orrs	r1, r4
20001832:	69dc      	ldr	r4, [r3, #28]
20001834:	7824      	ldrb	r4, [r4, #0]
20001836:	40b4      	lsls	r4, r6
20001838:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000183a:	5d2c      	ldrb	r4, [r5, r4]
2000183c:	0424      	lsls	r4, r4, #16
2000183e:	4321      	orrs	r1, r4
20001840:	0224      	lsls	r4, r4, #8
20001842:	4321      	orrs	r1, r4
20001844:	c002      	stmia	r0!, {r1}
20001846:	423f      	tst	r7, r7
20001848:	d02c      	beq.n	200018a4 <RenderTilePersp15+0x160>
2000184a:	69dc      	ldr	r4, [r3, #28]
2000184c:	7824      	ldrb	r4, [r4, #0]
2000184e:	40b4      	lsls	r4, r6
20001850:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001852:	5d29      	ldrb	r1, [r5, r4]
20001854:	69dc      	ldr	r4, [r3, #28]
20001856:	7824      	ldrb	r4, [r4, #0]
20001858:	40b4      	lsls	r4, r6
2000185a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000185c:	5d2c      	ldrb	r4, [r5, r4]
2000185e:	0224      	lsls	r4, r4, #8
20001860:	4321      	orrs	r1, r4
20001862:	69dc      	ldr	r4, [r3, #28]
20001864:	7824      	ldrb	r4, [r4, #0]
20001866:	40b4      	lsls	r4, r6
20001868:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000186a:	5d2c      	ldrb	r4, [r5, r4]
2000186c:	0424      	lsls	r4, r4, #16
2000186e:	4321      	orrs	r1, r4
20001870:	0224      	lsls	r4, r4, #8
20001872:	4321      	orrs	r1, r4
20001874:	69dc      	ldr	r4, [r3, #28]
20001876:	7824      	ldrb	r4, [r4, #0]
20001878:	40b4      	lsls	r4, r6
2000187a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000187c:	5d2a      	ldrb	r2, [r5, r4]
2000187e:	69dc      	ldr	r4, [r3, #28]
20001880:	7824      	ldrb	r4, [r4, #0]
20001882:	40b4      	lsls	r4, r6
20001884:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001886:	5d2c      	ldrb	r4, [r5, r4]
20001888:	0224      	lsls	r4, r4, #8
2000188a:	4322      	orrs	r2, r4
2000188c:	69dc      	ldr	r4, [r3, #28]
2000188e:	7824      	ldrb	r4, [r4, #0]
20001890:	40b4      	lsls	r4, r6
20001892:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001894:	5d2c      	ldrb	r4, [r5, r4]
20001896:	0424      	lsls	r4, r4, #16
20001898:	4322      	orrs	r2, r4
2000189a:	0224      	lsls	r4, r4, #8
2000189c:	4322      	orrs	r2, r4
2000189e:	c006      	stmia	r0!, {r1, r2}
200018a0:	3f01      	subs	r7, #1
200018a2:	d1d2      	bne.n	2000184a <RenderTilePersp15+0x106>
200018a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
200018a6:	46c0      	nop			; (mov r8, r8)

200018a8 <RenderTilePersp_pSioBase>:
200018a8:	d0000000 	.word	0xd0000000

200018ac <RenderTilePersp_Interp>:
200018ac:	d0000080 	.word	0xd0000080

200018b0 <RenderTilePersp_Ctrl>:
200018b0:	0004000c 	.word	0x0004000c

200018b4 <RenderTilePersp2>:
200018b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200018b6:	9c06      	ldr	r4, [sp, #24]
200018b8:	4e4e      	ldr	r6, [pc, #312]	; (200019f4 <RenderTilePersp_pSioBase>)
200018ba:	8965      	ldrh	r5, [r4, #10]
200018bc:	7ce1      	ldrb	r1, [r4, #19]
200018be:	b249      	sxtb	r1, r1
200018c0:	0089      	lsls	r1, r1, #2
200018c2:	d107      	bne.n	200018d4 <RenderTilePersp2+0x20>
200018c4:	086d      	lsrs	r5, r5, #1
200018c6:	1b52      	subs	r2, r2, r5
200018c8:	4694      	mov	ip, r2
200018ca:	2501      	movs	r5, #1
200018cc:	6675      	str	r5, [r6, #100]	; 0x64
200018ce:	032d      	lsls	r5, r5, #12
200018d0:	6635      	str	r5, [r6, #96]	; 0x60
200018d2:	e009      	b.n	200018e8 <RenderTilePersp2+0x34>
200018d4:	d502      	bpl.n	200018dc <RenderTilePersp2+0x28>
200018d6:	1aaa      	subs	r2, r5, r2
200018d8:	3a01      	subs	r2, #1
200018da:	4249      	negs	r1, r1
200018dc:	1b57      	subs	r7, r2, r5
200018de:	46bc      	mov	ip, r7
200018e0:	032d      	lsls	r5, r5, #12
200018e2:	6635      	str	r5, [r6, #96]	; 0x60
200018e4:	1852      	adds	r2, r2, r1
200018e6:	6672      	str	r2, [r6, #100]	; 0x64
200018e8:	085d      	lsrs	r5, r3, #1
200018ea:	426d      	negs	r5, r5
200018ec:	46ae      	mov	lr, r5
200018ee:	089f      	lsrs	r7, r3, #2
200018f0:	4b41      	ldr	r3, [pc, #260]	; (200019f8 <RenderTilePersp_Interp>)
200018f2:	68e6      	ldr	r6, [r4, #12]
200018f4:	611e      	str	r6, [r3, #16]
200018f6:	4e41      	ldr	r6, [pc, #260]	; (200019fc <RenderTilePersp_Ctrl>)
200018f8:	7ca1      	ldrb	r1, [r4, #18]
200018fa:	9100      	str	r1, [sp, #0]
200018fc:	1876      	adds	r6, r6, r1
200018fe:	78a2      	ldrb	r2, [r4, #2]
20001900:	1e55      	subs	r5, r2, #1
20001902:	02ad      	lsls	r5, r5, #10
20001904:	432e      	orrs	r6, r5
20001906:	62de      	str	r6, [r3, #44]	; 0x2c
20001908:	1ab6      	subs	r6, r6, r2
2000190a:	0152      	lsls	r2, r2, #5
2000190c:	4316      	orrs	r6, r2
2000190e:	78e2      	ldrb	r2, [r4, #3]
20001910:	0292      	lsls	r2, r2, #10
20001912:	18b6      	adds	r6, r6, r2
20001914:	631e      	str	r6, [r3, #48]	; 0x30
20001916:	6966      	ldr	r6, [r4, #20]
20001918:	651e      	str	r6, [r3, #80]	; 0x50
2000191a:	4e38      	ldr	r6, [pc, #224]	; (200019fc <RenderTilePersp_Ctrl>)
2000191c:	1e4d      	subs	r5, r1, #1
2000191e:	02ad      	lsls	r5, r5, #10
20001920:	432e      	orrs	r6, r5
20001922:	66de      	str	r6, [r3, #108]	; 0x6c
20001924:	1a76      	subs	r6, r6, r1
20001926:	014d      	lsls	r5, r1, #5
20001928:	432e      	orrs	r6, r5
2000192a:	0289      	lsls	r1, r1, #10
2000192c:	1876      	adds	r6, r6, r1
2000192e:	671e      	str	r6, [r3, #112]	; 0x70
20001930:	69a4      	ldr	r4, [r4, #24]
20001932:	4930      	ldr	r1, [pc, #192]	; (200019f4 <RenderTilePersp_pSioBase>)
20001934:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001936:	6825      	ldr	r5, [r4, #0]
20001938:	434d      	muls	r5, r1
2000193a:	12ed      	asrs	r5, r5, #11
2000193c:	609d      	str	r5, [r3, #8]
2000193e:	649d      	str	r5, [r3, #72]	; 0x48
20001940:	106d      	asrs	r5, r5, #1
20001942:	68e6      	ldr	r6, [r4, #12]
20001944:	434e      	muls	r6, r1
20001946:	12f6      	asrs	r6, r6, #11
20001948:	60de      	str	r6, [r3, #12]
2000194a:	64de      	str	r6, [r3, #76]	; 0x4c
2000194c:	1076      	asrs	r6, r6, #1
2000194e:	4672      	mov	r2, lr
20001950:	4355      	muls	r5, r2
20001952:	4372      	muls	r2, r6
20001954:	468e      	mov	lr, r1
20001956:	6866      	ldr	r6, [r4, #4]
20001958:	4371      	muls	r1, r6
2000195a:	1309      	asrs	r1, r1, #12
2000195c:	4666      	mov	r6, ip
2000195e:	4371      	muls	r1, r6
20001960:	186d      	adds	r5, r5, r1
20001962:	68a1      	ldr	r1, [r4, #8]
20001964:	186d      	adds	r5, r5, r1
20001966:	601d      	str	r5, [r3, #0]
20001968:	641d      	str	r5, [r3, #64]	; 0x40
2000196a:	6921      	ldr	r1, [r4, #16]
2000196c:	4675      	mov	r5, lr
2000196e:	4369      	muls	r1, r5
20001970:	1309      	asrs	r1, r1, #12
20001972:	4371      	muls	r1, r6
20001974:	1852      	adds	r2, r2, r1
20001976:	6961      	ldr	r1, [r4, #20]
20001978:	1852      	adds	r2, r2, r1
2000197a:	605a      	str	r2, [r3, #4]
2000197c:	645a      	str	r2, [r3, #68]	; 0x44
2000197e:	9e00      	ldr	r6, [sp, #0]
20001980:	0076      	lsls	r6, r6, #1
20001982:	087f      	lsrs	r7, r7, #1
20001984:	d310      	bcc.n	200019a8 <RenderTilePersp2+0xf4>
20001986:	69dc      	ldr	r4, [r3, #28]
20001988:	7824      	ldrb	r4, [r4, #0]
2000198a:	40b4      	lsls	r4, r6
2000198c:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000198e:	5d29      	ldrb	r1, [r5, r4]
20001990:	020c      	lsls	r4, r1, #8
20001992:	4321      	orrs	r1, r4
20001994:	69dc      	ldr	r4, [r3, #28]
20001996:	7824      	ldrb	r4, [r4, #0]
20001998:	40b4      	lsls	r4, r6
2000199a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000199c:	5d2c      	ldrb	r4, [r5, r4]
2000199e:	0424      	lsls	r4, r4, #16
200019a0:	4321      	orrs	r1, r4
200019a2:	0224      	lsls	r4, r4, #8
200019a4:	4321      	orrs	r1, r4
200019a6:	c002      	stmia	r0!, {r1}
200019a8:	423f      	tst	r7, r7
200019aa:	d022      	beq.n	200019f2 <RenderTilePersp2+0x13e>
200019ac:	69dc      	ldr	r4, [r3, #28]
200019ae:	7824      	ldrb	r4, [r4, #0]
200019b0:	40b4      	lsls	r4, r6
200019b2:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019b4:	5d29      	ldrb	r1, [r5, r4]
200019b6:	020c      	lsls	r4, r1, #8
200019b8:	4321      	orrs	r1, r4
200019ba:	69dc      	ldr	r4, [r3, #28]
200019bc:	7824      	ldrb	r4, [r4, #0]
200019be:	40b4      	lsls	r4, r6
200019c0:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019c2:	5d2c      	ldrb	r4, [r5, r4]
200019c4:	0424      	lsls	r4, r4, #16
200019c6:	4321      	orrs	r1, r4
200019c8:	0224      	lsls	r4, r4, #8
200019ca:	4321      	orrs	r1, r4
200019cc:	69dc      	ldr	r4, [r3, #28]
200019ce:	7824      	ldrb	r4, [r4, #0]
200019d0:	40b4      	lsls	r4, r6
200019d2:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019d4:	5d2a      	ldrb	r2, [r5, r4]
200019d6:	0214      	lsls	r4, r2, #8
200019d8:	4322      	orrs	r2, r4
200019da:	69dc      	ldr	r4, [r3, #28]
200019dc:	7824      	ldrb	r4, [r4, #0]
200019de:	40b4      	lsls	r4, r6
200019e0:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019e2:	5d2c      	ldrb	r4, [r5, r4]
200019e4:	0424      	lsls	r4, r4, #16
200019e6:	4322      	orrs	r2, r4
200019e8:	0224      	lsls	r4, r4, #8
200019ea:	4322      	orrs	r2, r4
200019ec:	c006      	stmia	r0!, {r1, r2}
200019ee:	3f01      	subs	r7, #1
200019f0:	d1dc      	bne.n	200019ac <RenderTilePersp2+0xf8>
200019f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

200019f4 <RenderTilePersp_pSioBase>:
200019f4:	d0000000 	.word	0xd0000000

200019f8 <RenderTilePersp_Interp>:
200019f8:	d0000080 	.word	0xd0000080

200019fc <RenderTilePersp_Ctrl>:
200019fc:	0004000c 	.word	0x0004000c

20001a00 <RenderTilePersp3>:
20001a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001a02:	9c06      	ldr	r4, [sp, #24]
20001a04:	4e48      	ldr	r6, [pc, #288]	; (20001b28 <RenderTilePersp_pSioBase>)
20001a06:	8965      	ldrh	r5, [r4, #10]
20001a08:	7ce1      	ldrb	r1, [r4, #19]
20001a0a:	b249      	sxtb	r1, r1
20001a0c:	0089      	lsls	r1, r1, #2
20001a0e:	d107      	bne.n	20001a20 <RenderTilePersp3+0x20>
20001a10:	086d      	lsrs	r5, r5, #1
20001a12:	1b52      	subs	r2, r2, r5
20001a14:	4694      	mov	ip, r2
20001a16:	2501      	movs	r5, #1
20001a18:	6675      	str	r5, [r6, #100]	; 0x64
20001a1a:	032d      	lsls	r5, r5, #12
20001a1c:	6635      	str	r5, [r6, #96]	; 0x60
20001a1e:	e009      	b.n	20001a34 <RenderTilePersp3+0x34>
20001a20:	d502      	bpl.n	20001a28 <RenderTilePersp3+0x28>
20001a22:	1aaa      	subs	r2, r5, r2
20001a24:	3a01      	subs	r2, #1
20001a26:	4249      	negs	r1, r1
20001a28:	1b57      	subs	r7, r2, r5
20001a2a:	46bc      	mov	ip, r7
20001a2c:	032d      	lsls	r5, r5, #12
20001a2e:	6635      	str	r5, [r6, #96]	; 0x60
20001a30:	1852      	adds	r2, r2, r1
20001a32:	6672      	str	r2, [r6, #100]	; 0x64
20001a34:	085d      	lsrs	r5, r3, #1
20001a36:	426d      	negs	r5, r5
20001a38:	46ae      	mov	lr, r5
20001a3a:	089f      	lsrs	r7, r3, #2
20001a3c:	4b3b      	ldr	r3, [pc, #236]	; (20001b2c <RenderTilePersp_Interp>)
20001a3e:	68e6      	ldr	r6, [r4, #12]
20001a40:	611e      	str	r6, [r3, #16]
20001a42:	4e3b      	ldr	r6, [pc, #236]	; (20001b30 <RenderTilePersp_Ctrl>)
20001a44:	7ca1      	ldrb	r1, [r4, #18]
20001a46:	9100      	str	r1, [sp, #0]
20001a48:	1876      	adds	r6, r6, r1
20001a4a:	78a2      	ldrb	r2, [r4, #2]
20001a4c:	1e55      	subs	r5, r2, #1
20001a4e:	02ad      	lsls	r5, r5, #10
20001a50:	432e      	orrs	r6, r5
20001a52:	62de      	str	r6, [r3, #44]	; 0x2c
20001a54:	1ab6      	subs	r6, r6, r2
20001a56:	0152      	lsls	r2, r2, #5
20001a58:	4316      	orrs	r6, r2
20001a5a:	78e2      	ldrb	r2, [r4, #3]
20001a5c:	0292      	lsls	r2, r2, #10
20001a5e:	18b6      	adds	r6, r6, r2
20001a60:	631e      	str	r6, [r3, #48]	; 0x30
20001a62:	6966      	ldr	r6, [r4, #20]
20001a64:	651e      	str	r6, [r3, #80]	; 0x50
20001a66:	4e32      	ldr	r6, [pc, #200]	; (20001b30 <RenderTilePersp_Ctrl>)
20001a68:	1e4d      	subs	r5, r1, #1
20001a6a:	02ad      	lsls	r5, r5, #10
20001a6c:	432e      	orrs	r6, r5
20001a6e:	66de      	str	r6, [r3, #108]	; 0x6c
20001a70:	1a76      	subs	r6, r6, r1
20001a72:	014d      	lsls	r5, r1, #5
20001a74:	432e      	orrs	r6, r5
20001a76:	0289      	lsls	r1, r1, #10
20001a78:	1876      	adds	r6, r6, r1
20001a7a:	671e      	str	r6, [r3, #112]	; 0x70
20001a7c:	69a4      	ldr	r4, [r4, #24]
20001a7e:	492a      	ldr	r1, [pc, #168]	; (20001b28 <RenderTilePersp_pSioBase>)
20001a80:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001a82:	6825      	ldr	r5, [r4, #0]
20001a84:	434d      	muls	r5, r1
20001a86:	132d      	asrs	r5, r5, #12
20001a88:	006a      	lsls	r2, r5, #1
20001a8a:	1952      	adds	r2, r2, r5
20001a8c:	609a      	str	r2, [r3, #8]
20001a8e:	649a      	str	r2, [r3, #72]	; 0x48
20001a90:	68e6      	ldr	r6, [r4, #12]
20001a92:	434e      	muls	r6, r1
20001a94:	1336      	asrs	r6, r6, #12
20001a96:	0072      	lsls	r2, r6, #1
20001a98:	1992      	adds	r2, r2, r6
20001a9a:	60da      	str	r2, [r3, #12]
20001a9c:	64da      	str	r2, [r3, #76]	; 0x4c
20001a9e:	4672      	mov	r2, lr
20001aa0:	4355      	muls	r5, r2
20001aa2:	4372      	muls	r2, r6
20001aa4:	468e      	mov	lr, r1
20001aa6:	6866      	ldr	r6, [r4, #4]
20001aa8:	4371      	muls	r1, r6
20001aaa:	1309      	asrs	r1, r1, #12
20001aac:	4666      	mov	r6, ip
20001aae:	4371      	muls	r1, r6
20001ab0:	186d      	adds	r5, r5, r1
20001ab2:	68a1      	ldr	r1, [r4, #8]
20001ab4:	186d      	adds	r5, r5, r1
20001ab6:	601d      	str	r5, [r3, #0]
20001ab8:	641d      	str	r5, [r3, #64]	; 0x40
20001aba:	6921      	ldr	r1, [r4, #16]
20001abc:	4675      	mov	r5, lr
20001abe:	4369      	muls	r1, r5
20001ac0:	1309      	asrs	r1, r1, #12
20001ac2:	4371      	muls	r1, r6
20001ac4:	1852      	adds	r2, r2, r1
20001ac6:	6961      	ldr	r1, [r4, #20]
20001ac8:	1852      	adds	r2, r2, r1
20001aca:	605a      	str	r2, [r3, #4]
20001acc:	645a      	str	r2, [r3, #68]	; 0x44
20001ace:	9e00      	ldr	r6, [sp, #0]
20001ad0:	0076      	lsls	r6, r6, #1
20001ad2:	087f      	lsrs	r7, r7, #1
20001ad4:	d309      	bcc.n	20001aea <RenderTilePersp3+0xea>
20001ad6:	69dc      	ldr	r4, [r3, #28]
20001ad8:	7824      	ldrb	r4, [r4, #0]
20001ada:	40b4      	lsls	r4, r6
20001adc:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001ade:	5d29      	ldrb	r1, [r5, r4]
20001ae0:	020c      	lsls	r4, r1, #8
20001ae2:	4321      	orrs	r1, r4
20001ae4:	040c      	lsls	r4, r1, #16
20001ae6:	4321      	orrs	r1, r4
20001ae8:	c002      	stmia	r0!, {r1}
20001aea:	423f      	tst	r7, r7
20001aec:	d01b      	beq.n	20001b26 <RenderTilePersp3+0x126>
20001aee:	69dc      	ldr	r4, [r3, #28]
20001af0:	7824      	ldrb	r4, [r4, #0]
20001af2:	40b4      	lsls	r4, r6
20001af4:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001af6:	5d29      	ldrb	r1, [r5, r4]
20001af8:	020c      	lsls	r4, r1, #8
20001afa:	4321      	orrs	r1, r4
20001afc:	69dc      	ldr	r4, [r3, #28]
20001afe:	7824      	ldrb	r4, [r4, #0]
20001b00:	40b4      	lsls	r4, r6
20001b02:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001b04:	5d2c      	ldrb	r4, [r5, r4]
20001b06:	0424      	lsls	r4, r4, #16
20001b08:	4321      	orrs	r1, r4
20001b0a:	0224      	lsls	r4, r4, #8
20001b0c:	4321      	orrs	r1, r4
20001b0e:	69dc      	ldr	r4, [r3, #28]
20001b10:	7824      	ldrb	r4, [r4, #0]
20001b12:	40b4      	lsls	r4, r6
20001b14:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001b16:	5d2a      	ldrb	r2, [r5, r4]
20001b18:	0214      	lsls	r4, r2, #8
20001b1a:	4322      	orrs	r2, r4
20001b1c:	0414      	lsls	r4, r2, #16
20001b1e:	4322      	orrs	r2, r4
20001b20:	c006      	stmia	r0!, {r1, r2}
20001b22:	3f01      	subs	r7, #1
20001b24:	d1e3      	bne.n	20001aee <RenderTilePersp3+0xee>
20001b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

20001b28 <RenderTilePersp_pSioBase>:
20001b28:	d0000000 	.word	0xd0000000

20001b2c <RenderTilePersp_Interp>:
20001b2c:	d0000080 	.word	0xd0000080

20001b30 <RenderTilePersp_Ctrl>:
20001b30:	0004000c 	.word	0x0004000c

20001b34 <RenderTilePersp4>:
20001b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001b36:	9c06      	ldr	r4, [sp, #24]
20001b38:	4e44      	ldr	r6, [pc, #272]	; (20001c4c <RenderTilePersp_pSioBase>)
20001b3a:	8965      	ldrh	r5, [r4, #10]
20001b3c:	7ce1      	ldrb	r1, [r4, #19]
20001b3e:	b249      	sxtb	r1, r1
20001b40:	0089      	lsls	r1, r1, #2
20001b42:	d107      	bne.n	20001b54 <RenderTilePersp4+0x20>
20001b44:	086d      	lsrs	r5, r5, #1
20001b46:	1b52      	subs	r2, r2, r5
20001b48:	4694      	mov	ip, r2
20001b4a:	2501      	movs	r5, #1
20001b4c:	6675      	str	r5, [r6, #100]	; 0x64
20001b4e:	032d      	lsls	r5, r5, #12
20001b50:	6635      	str	r5, [r6, #96]	; 0x60
20001b52:	e009      	b.n	20001b68 <RenderTilePersp4+0x34>
20001b54:	d502      	bpl.n	20001b5c <RenderTilePersp4+0x28>
20001b56:	1aaa      	subs	r2, r5, r2
20001b58:	3a01      	subs	r2, #1
20001b5a:	4249      	negs	r1, r1
20001b5c:	1b57      	subs	r7, r2, r5
20001b5e:	46bc      	mov	ip, r7
20001b60:	032d      	lsls	r5, r5, #12
20001b62:	6635      	str	r5, [r6, #96]	; 0x60
20001b64:	1852      	adds	r2, r2, r1
20001b66:	6672      	str	r2, [r6, #100]	; 0x64
20001b68:	085d      	lsrs	r5, r3, #1
20001b6a:	426d      	negs	r5, r5
20001b6c:	46ae      	mov	lr, r5
20001b6e:	089f      	lsrs	r7, r3, #2
20001b70:	4b37      	ldr	r3, [pc, #220]	; (20001c50 <RenderTilePersp_Interp>)
20001b72:	68e6      	ldr	r6, [r4, #12]
20001b74:	611e      	str	r6, [r3, #16]
20001b76:	4e37      	ldr	r6, [pc, #220]	; (20001c54 <RenderTilePersp_Ctrl>)
20001b78:	7ca1      	ldrb	r1, [r4, #18]
20001b7a:	9100      	str	r1, [sp, #0]
20001b7c:	1876      	adds	r6, r6, r1
20001b7e:	78a2      	ldrb	r2, [r4, #2]
20001b80:	1e55      	subs	r5, r2, #1
20001b82:	02ad      	lsls	r5, r5, #10
20001b84:	432e      	orrs	r6, r5
20001b86:	62de      	str	r6, [r3, #44]	; 0x2c
20001b88:	1ab6      	subs	r6, r6, r2
20001b8a:	0152      	lsls	r2, r2, #5
20001b8c:	4316      	orrs	r6, r2
20001b8e:	78e2      	ldrb	r2, [r4, #3]
20001b90:	0292      	lsls	r2, r2, #10
20001b92:	18b6      	adds	r6, r6, r2
20001b94:	631e      	str	r6, [r3, #48]	; 0x30
20001b96:	6966      	ldr	r6, [r4, #20]
20001b98:	651e      	str	r6, [r3, #80]	; 0x50
20001b9a:	4e2e      	ldr	r6, [pc, #184]	; (20001c54 <RenderTilePersp_Ctrl>)
20001b9c:	1e4d      	subs	r5, r1, #1
20001b9e:	02ad      	lsls	r5, r5, #10
20001ba0:	432e      	orrs	r6, r5
20001ba2:	66de      	str	r6, [r3, #108]	; 0x6c
20001ba4:	1a76      	subs	r6, r6, r1
20001ba6:	014d      	lsls	r5, r1, #5
20001ba8:	432e      	orrs	r6, r5
20001baa:	0289      	lsls	r1, r1, #10
20001bac:	1876      	adds	r6, r6, r1
20001bae:	671e      	str	r6, [r3, #112]	; 0x70
20001bb0:	69a4      	ldr	r4, [r4, #24]
20001bb2:	4926      	ldr	r1, [pc, #152]	; (20001c4c <RenderTilePersp_pSioBase>)
20001bb4:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001bb6:	6825      	ldr	r5, [r4, #0]
20001bb8:	434d      	muls	r5, r1
20001bba:	12ad      	asrs	r5, r5, #10
20001bbc:	609d      	str	r5, [r3, #8]
20001bbe:	649d      	str	r5, [r3, #72]	; 0x48
20001bc0:	10ad      	asrs	r5, r5, #2
20001bc2:	68e6      	ldr	r6, [r4, #12]
20001bc4:	434e      	muls	r6, r1
20001bc6:	12b6      	asrs	r6, r6, #10
20001bc8:	60de      	str	r6, [r3, #12]
20001bca:	64de      	str	r6, [r3, #76]	; 0x4c
20001bcc:	10b6      	asrs	r6, r6, #2
20001bce:	4672      	mov	r2, lr
20001bd0:	4355      	muls	r5, r2
20001bd2:	4372      	muls	r2, r6
20001bd4:	468e      	mov	lr, r1
20001bd6:	6866      	ldr	r6, [r4, #4]
20001bd8:	4371      	muls	r1, r6
20001bda:	1309      	asrs	r1, r1, #12
20001bdc:	4666      	mov	r6, ip
20001bde:	4371      	muls	r1, r6
20001be0:	186d      	adds	r5, r5, r1
20001be2:	68a1      	ldr	r1, [r4, #8]
20001be4:	186d      	adds	r5, r5, r1
20001be6:	601d      	str	r5, [r3, #0]
20001be8:	641d      	str	r5, [r3, #64]	; 0x40
20001bea:	6921      	ldr	r1, [r4, #16]
20001bec:	4675      	mov	r5, lr
20001bee:	4369      	muls	r1, r5
20001bf0:	1309      	asrs	r1, r1, #12
20001bf2:	4371      	muls	r1, r6
20001bf4:	1852      	adds	r2, r2, r1
20001bf6:	6961      	ldr	r1, [r4, #20]
20001bf8:	1852      	adds	r2, r2, r1
20001bfa:	605a      	str	r2, [r3, #4]
20001bfc:	645a      	str	r2, [r3, #68]	; 0x44
20001bfe:	9e00      	ldr	r6, [sp, #0]
20001c00:	0076      	lsls	r6, r6, #1
20001c02:	087f      	lsrs	r7, r7, #1
20001c04:	d309      	bcc.n	20001c1a <RenderTilePersp4+0xe6>
20001c06:	69dc      	ldr	r4, [r3, #28]
20001c08:	7824      	ldrb	r4, [r4, #0]
20001c0a:	40b4      	lsls	r4, r6
20001c0c:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001c0e:	5d29      	ldrb	r1, [r5, r4]
20001c10:	020c      	lsls	r4, r1, #8
20001c12:	4321      	orrs	r1, r4
20001c14:	040c      	lsls	r4, r1, #16
20001c16:	4321      	orrs	r1, r4
20001c18:	c002      	stmia	r0!, {r1}
20001c1a:	423f      	tst	r7, r7
20001c1c:	d014      	beq.n	20001c48 <RenderTilePersp4+0x114>
20001c1e:	69dc      	ldr	r4, [r3, #28]
20001c20:	7824      	ldrb	r4, [r4, #0]
20001c22:	40b4      	lsls	r4, r6
20001c24:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001c26:	5d29      	ldrb	r1, [r5, r4]
20001c28:	020c      	lsls	r4, r1, #8
20001c2a:	4321      	orrs	r1, r4
20001c2c:	040c      	lsls	r4, r1, #16
20001c2e:	4321      	orrs	r1, r4
20001c30:	69dc      	ldr	r4, [r3, #28]
20001c32:	7824      	ldrb	r4, [r4, #0]
20001c34:	40b4      	lsls	r4, r6
20001c36:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001c38:	5d2a      	ldrb	r2, [r5, r4]
20001c3a:	0214      	lsls	r4, r2, #8
20001c3c:	4322      	orrs	r2, r4
20001c3e:	0414      	lsls	r4, r2, #16
20001c40:	4322      	orrs	r2, r4
20001c42:	c006      	stmia	r0!, {r1, r2}
20001c44:	3f01      	subs	r7, #1
20001c46:	d1ea      	bne.n	20001c1e <RenderTilePersp4+0xea>
20001c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20001c4a:	46c0      	nop			; (mov r8, r8)

20001c4c <RenderTilePersp_pSioBase>:
20001c4c:	d0000000 	.word	0xd0000000

20001c50 <RenderTilePersp_Interp>:
20001c50:	d0000080 	.word	0xd0000080

20001c54 <RenderTilePersp_Ctrl>:
20001c54:	0004000c 	.word	0x0004000c

20001c58 <BlitKey>:
20001c58:	b510      	push	{r4, lr}
20001c5a:	4686      	mov	lr, r0
20001c5c:	08d4      	lsrs	r4, r2, #3
20001c5e:	00e4      	lsls	r4, r4, #3
20001c60:	4062      	eors	r2, r4
20001c62:	4420      	add	r0, r4
20001c64:	4421      	add	r1, r4
20001c66:	a413      	add	r4, pc, #76	; (adr r4, 20001cb4 <BlitKey+0x5c>)
20001c68:	00d2      	lsls	r2, r2, #3
20001c6a:	1aa4      	subs	r4, r4, r2
20001c6c:	3401      	adds	r4, #1
20001c6e:	4720      	bx	r4
20001c70:	3808      	subs	r0, #8
20001c72:	3908      	subs	r1, #8
20001c74:	79cc      	ldrb	r4, [r1, #7]
20001c76:	429c      	cmp	r4, r3
20001c78:	d000      	beq.n	20001c7c <BlitKey+0x24>
20001c7a:	71c4      	strb	r4, [r0, #7]
20001c7c:	798c      	ldrb	r4, [r1, #6]
20001c7e:	429c      	cmp	r4, r3
20001c80:	d000      	beq.n	20001c84 <BlitKey+0x2c>
20001c82:	7184      	strb	r4, [r0, #6]
20001c84:	794c      	ldrb	r4, [r1, #5]
20001c86:	429c      	cmp	r4, r3
20001c88:	d000      	beq.n	20001c8c <BlitKey+0x34>
20001c8a:	7144      	strb	r4, [r0, #5]
20001c8c:	790c      	ldrb	r4, [r1, #4]
20001c8e:	429c      	cmp	r4, r3
20001c90:	d000      	beq.n	20001c94 <BlitKey+0x3c>
20001c92:	7104      	strb	r4, [r0, #4]
20001c94:	78cc      	ldrb	r4, [r1, #3]
20001c96:	429c      	cmp	r4, r3
20001c98:	d000      	beq.n	20001c9c <BlitKey+0x44>
20001c9a:	70c4      	strb	r4, [r0, #3]
20001c9c:	788c      	ldrb	r4, [r1, #2]
20001c9e:	429c      	cmp	r4, r3
20001ca0:	d000      	beq.n	20001ca4 <BlitKey+0x4c>
20001ca2:	7084      	strb	r4, [r0, #2]
20001ca4:	784c      	ldrb	r4, [r1, #1]
20001ca6:	429c      	cmp	r4, r3
20001ca8:	d000      	beq.n	20001cac <BlitKey+0x54>
20001caa:	7044      	strb	r4, [r0, #1]
20001cac:	780c      	ldrb	r4, [r1, #0]
20001cae:	429c      	cmp	r4, r3
20001cb0:	d000      	beq.n	20001cb4 <BlitKey+0x5c>
20001cb2:	7004      	strb	r4, [r0, #0]
20001cb4:	4570      	cmp	r0, lr
20001cb6:	d8db      	bhi.n	20001c70 <BlitKey+0x18>
20001cb8:	bd10      	pop	{r4, pc}
20001cba:	46c0      	nop			; (mov r8, r8)

20001cbc <Render>:
20001cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
20001cbe:	b085      	sub	sp, #20
20001cc0:	9001      	str	r0, [sp, #4]
20001cc2:	9102      	str	r1, [sp, #8]
20001cc4:	9304      	str	r3, [sp, #16]
20001cc6:	4c31      	ldr	r4, [pc, #196]	; (20001d8c <Render_pScreenAddr>)
20001cc8:	6824      	ldr	r4, [r4, #0]
20001cca:	2c00      	cmp	r4, #0
20001ccc:	d055      	beq.n	20001d7a <Render_Clear>
20001cce:	8825      	ldrh	r5, [r4, #0]
20001cd0:	422d      	tst	r5, r5
20001cd2:	d052      	beq.n	20001d7a <Render_Clear>
20001cd4:	3404      	adds	r4, #4

20001cd6 <Render_StripLoop>:
20001cd6:	8823      	ldrh	r3, [r4, #0]
20001cd8:	429a      	cmp	r2, r3
20001cda:	d304      	bcc.n	20001ce6 <Render_StripOK>
20001cdc:	1ad2      	subs	r2, r2, r3
20001cde:	34e4      	adds	r4, #228	; 0xe4
20001ce0:	3d01      	subs	r5, #1
20001ce2:	d1f8      	bne.n	20001cd6 <Render_StripLoop>
20001ce4:	e049      	b.n	20001d7a <Render_Clear>

20001ce6 <Render_StripOK>:
20001ce6:	9203      	str	r2, [sp, #12]
20001ce8:	8865      	ldrh	r5, [r4, #2]
20001cea:	422d      	tst	r5, r5
20001cec:	d045      	beq.n	20001d7a <Render_Clear>
20001cee:	3404      	adds	r4, #4

20001cf0 <Render_SegmLoop>:
20001cf0:	9a04      	ldr	r2, [sp, #16]
20001cf2:	4212      	tst	r2, r2
20001cf4:	d041      	beq.n	20001d7a <Render_Clear>
20001cf6:	8823      	ldrh	r3, [r4, #0]
20001cf8:	4293      	cmp	r3, r2
20001cfa:	d300      	bcc.n	20001cfe <Render_SegmLoop+0xe>
20001cfc:	4613      	mov	r3, r2
20001cfe:	421b      	tst	r3, r3
20001d00:	d038      	beq.n	20001d74 <Render_SegmNext>
20001d02:	1ad2      	subs	r2, r2, r3
20001d04:	9204      	str	r2, [sp, #16]
20001d06:	88e2      	ldrh	r2, [r4, #6]
20001d08:	b212      	sxth	r2, r2
20001d0a:	9903      	ldr	r1, [sp, #12]
20001d0c:	440a      	add	r2, r1
20001d0e:	7c61      	ldrb	r1, [r4, #17]
20001d10:	4209      	tst	r1, r1
20001d12:	d000      	beq.n	20001d16 <Render_SegmLoop+0x26>
20001d14:	1052      	asrs	r2, r2, #1
20001d16:	8961      	ldrh	r1, [r4, #10]
20001d18:	1a52      	subs	r2, r2, r1
20001d1a:	d5fd      	bpl.n	20001d18 <Render_SegmLoop+0x28>
20001d1c:	1852      	adds	r2, r2, r1
20001d1e:	d4fd      	bmi.n	20001d1c <Render_SegmLoop+0x2c>
20001d20:	88a1      	ldrh	r1, [r4, #4]
20001d22:	b209      	sxth	r1, r1
20001d24:	8920      	ldrh	r0, [r4, #8]
20001d26:	1a09      	subs	r1, r1, r0
20001d28:	d5fd      	bpl.n	20001d26 <Render_SegmLoop+0x36>
20001d2a:	1809      	adds	r1, r1, r0
20001d2c:	d4fd      	bmi.n	20001d2a <Render_SegmLoop+0x3a>
20001d2e:	7c20      	ldrb	r0, [r4, #16]
20001d30:	4200      	tst	r0, r0
20001d32:	d10d      	bne.n	20001d50 <Render_SegmLoop+0x60>
20001d34:	0852      	lsrs	r2, r2, #1
20001d36:	6961      	ldr	r1, [r4, #20]
20001d38:	d300      	bcc.n	20001d3c <Render_SegmLoop+0x4c>
20001d3a:	69a1      	ldr	r1, [r4, #24]
20001d3c:	089a      	lsrs	r2, r3, #2
20001d3e:	9e01      	ldr	r6, [sp, #4]
20001d40:	c604      	stmia	r6!, {r2}
20001d42:	9802      	ldr	r0, [sp, #8]
20001d44:	c601      	stmia	r6!, {r0}
20001d46:	9601      	str	r6, [sp, #4]
20001d48:	f7fe fae2 	bl	20000310 <MemSet4>
20001d4c:	9002      	str	r0, [sp, #8]
20001d4e:	e011      	b.n	20001d74 <Render_SegmNext>
20001d50:	9400      	str	r4, [sp, #0]
20001d52:	a710      	add	r7, pc, #64	; (adr r7, 20001d94 <Render_FncAddr>)
20001d54:	0086      	lsls	r6, r0, #2
20001d56:	59bf      	ldr	r7, [r7, r6]
20001d58:	2806      	cmp	r0, #6
20001d5a:	d803      	bhi.n	20001d64 <Render_SegmLoop+0x74>
20001d5c:	9801      	ldr	r0, [sp, #4]
20001d5e:	47b8      	blx	r7
20001d60:	9001      	str	r0, [sp, #4]
20001d62:	e007      	b.n	20001d74 <Render_SegmNext>
20001d64:	0898      	lsrs	r0, r3, #2
20001d66:	9e01      	ldr	r6, [sp, #4]
20001d68:	c601      	stmia	r6!, {r0}
20001d6a:	9802      	ldr	r0, [sp, #8]
20001d6c:	c601      	stmia	r6!, {r0}
20001d6e:	9601      	str	r6, [sp, #4]
20001d70:	47b8      	blx	r7
20001d72:	9002      	str	r0, [sp, #8]

20001d74 <Render_SegmNext>:
20001d74:	341c      	adds	r4, #28
20001d76:	3d01      	subs	r5, #1
20001d78:	d1ba      	bne.n	20001cf0 <Render_SegmLoop>

20001d7a <Render_Clear>:
20001d7a:	9801      	ldr	r0, [sp, #4]
20001d7c:	9904      	ldr	r1, [sp, #16]
20001d7e:	0889      	lsrs	r1, r1, #2
20001d80:	d001      	beq.n	20001d86 <Render_Clear+0xc>
20001d82:	4a03      	ldr	r2, [pc, #12]	; (20001d90 <Render_LineBuf0Addr>)
20001d84:	c006      	stmia	r0!, {r1, r2}
20001d86:	b005      	add	sp, #20
20001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
20001d8a:	46c0      	nop			; (mov r8, r8)

20001d8c <Render_pScreenAddr>:
20001d8c:	200027e4 	.word	0x200027e4

20001d90 <Render_LineBuf0Addr>:
20001d90:	200201b8 	.word	0x200201b8

20001d94 <Render_FncAddr>:
20001d94:	20000311 	.word	0x20000311
20001d98:	20000929 	.word	0x20000929
20001d9c:	2000143d 	.word	0x2000143d
20001da0:	20001505 	.word	0x20001505
20001da4:	20001399 	.word	0x20001399
20001da8:	20000923 	.word	0x20000923
20001dac:	20000925 	.word	0x20000925
20001db0:	2000089d 	.word	0x2000089d
20001db4:	20000839 	.word	0x20000839
20001db8:	2000077d 	.word	0x2000077d
20001dbc:	20000e7d 	.word	0x20000e7d
20001dc0:	200000c1 	.word	0x200000c1
20001dc4:	20000689 	.word	0x20000689
20001dc8:	20000345 	.word	0x20000345
20001dcc:	20000b2d 	.word	0x20000b2d
20001dd0:	20000451 	.word	0x20000451
20001dd4:	20000c25 	.word	0x20000c25
20001dd8:	20000d95 	.word	0x20000d95
20001ddc:	20000f59 	.word	0x20000f59
20001de0:	20001059 	.word	0x20001059
20001de4:	200012e5 	.word	0x200012e5
20001de8:	200001f5 	.word	0x200001f5
20001dec:	2000095d 	.word	0x2000095d
20001df0:	20000a31 	.word	0x20000a31
20001df4:	200015c1 	.word	0x200015c1
20001df8:	20001745 	.word	0x20001745
20001dfc:	200018b5 	.word	0x200018b5
20001e00:	20001a01 	.word	0x20001a01
20001e04:	20001b35 	.word	0x20001b35

20001e08 <flash_init_boot2_copyout>:
    if (boot2_copyout_valid)
20001e08:	4808      	ldr	r0, [pc, #32]	; (20001e2c <flash_init_boot2_copyout+0x24>)
static void __no_inline_not_in_flash_func(flash_init_boot2_copyout)() {
20001e0a:	b510      	push	{r4, lr}
    if (boot2_copyout_valid)
20001e0c:	7803      	ldrb	r3, [r0, #0]
20001e0e:	2b00      	cmp	r3, #0
20001e10:	d10a      	bne.n	20001e28 <flash_init_boot2_copyout+0x20>
20001e12:	2380      	movs	r3, #128	; 0x80
20001e14:	4906      	ldr	r1, [pc, #24]	; (20001e30 <flash_init_boot2_copyout+0x28>)
    for (int i = 0; i < BOOT2_SIZE_WORDS; ++i)
20001e16:	4a07      	ldr	r2, [pc, #28]	; (20001e34 <flash_init_boot2_copyout+0x2c>)
20001e18:	055b      	lsls	r3, r3, #21
        boot2_copyout[i] = ((uint32_t *)XIP_BASE)[i];
20001e1a:	681c      	ldr	r4, [r3, #0]
20001e1c:	50cc      	str	r4, [r1, r3]
    for (int i = 0; i < BOOT2_SIZE_WORDS; ++i)
20001e1e:	3304      	adds	r3, #4
20001e20:	4293      	cmp	r3, r2
20001e22:	d1fa      	bne.n	20001e1a <flash_init_boot2_copyout+0x12>
    boot2_copyout_valid = true;
20001e24:	2301      	movs	r3, #1
20001e26:	7003      	strb	r3, [r0, #0]
}
20001e28:	bd10      	pop	{r4, pc}
20001e2a:	46c0      	nop			; (mov r8, r8)
20001e2c:	20023b88 	.word	0x20023b88
20001e30:	1002335c 	.word	0x1002335c
20001e34:	10000100 	.word	0x10000100

20001e38 <flash_enable_xip_via_boot2>:
static void __no_inline_not_in_flash_func(flash_enable_xip_via_boot2)() {
20001e38:	b510      	push	{r4, lr}
    ((void (*)(void))boot2_copyout+1)();
20001e3a:	4b02      	ldr	r3, [pc, #8]	; (20001e44 <flash_enable_xip_via_boot2+0xc>)
20001e3c:	3301      	adds	r3, #1
20001e3e:	4798      	blx	r3
}
20001e40:	bd10      	pop	{r4, pc}
20001e42:	46c0      	nop			; (mov r8, r8)
20001e44:	2002335c 	.word	0x2002335c

20001e48 <flash_cs_force.constprop.0>:
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
20001e48:	4b03      	ldr	r3, [pc, #12]	; (20001e58 <flash_cs_force.constprop.0+0x10>)
20001e4a:	681a      	ldr	r2, [r3, #0]
20001e4c:	23c0      	movs	r3, #192	; 0xc0
20001e4e:	009b      	lsls	r3, r3, #2
20001e50:	4393      	bics	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
20001e52:	4a02      	ldr	r2, [pc, #8]	; (20001e5c <flash_cs_force.constprop.0+0x14>)
20001e54:	6013      	str	r3, [r2, #0]
}
20001e56:	4770      	bx	lr
20001e58:	4001800c 	.word	0x4001800c
20001e5c:	4001900c 	.word	0x4001900c

20001e60 <flash_cs_force.constprop.1>:
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
20001e60:	4b05      	ldr	r3, [pc, #20]	; (20001e78 <flash_cs_force.constprop.1+0x18>)
20001e62:	681a      	ldr	r2, [r3, #0]
20001e64:	2380      	movs	r3, #128	; 0x80
20001e66:	009b      	lsls	r3, r3, #2
20001e68:	4053      	eors	r3, r2
20001e6a:	22c0      	movs	r2, #192	; 0xc0
20001e6c:	0092      	lsls	r2, r2, #2
20001e6e:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
20001e70:	4a02      	ldr	r2, [pc, #8]	; (20001e7c <flash_cs_force.constprop.1+0x1c>)
20001e72:	6013      	str	r3, [r2, #0]
20001e74:	4770      	bx	lr
20001e76:	46c0      	nop			; (mov r8, r8)
20001e78:	4001800c 	.word	0x4001800c
20001e7c:	4001900c 	.word	0x4001900c

20001e80 <flash_do_cmd.constprop.0>:
static void __no_inline_not_in_flash_func(flash_do_cmd)(const uint8_t *txbuf, uint8_t *rxbuf, size_t count) {
20001e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001e82:	46ce      	mov	lr, r9
20001e84:	4647      	mov	r7, r8
20001e86:	4681      	mov	r9, r0
20001e88:	b580      	push	{r7, lr}
    void (*connect_internal_flash)(void) = (void(*)(void))rom_func_lookup(rom_table_code('I', 'F'));
20001e8a:	4823      	ldr	r0, [pc, #140]	; (20001f18 <flash_do_cmd.constprop.0+0x98>)
static void __no_inline_not_in_flash_func(flash_do_cmd)(const uint8_t *txbuf, uint8_t *rxbuf, size_t count) {
20001e8c:	000e      	movs	r6, r1
    void (*connect_internal_flash)(void) = (void(*)(void))rom_func_lookup(rom_table_code('I', 'F'));
20001e8e:	f000 fbef 	bl	20002670 <__rom_func_lookup_veneer>
20001e92:	0005      	movs	r5, r0
    void (*flash_exit_xip)(void) = (void(*)(void))rom_func_lookup(rom_table_code('E', 'X'));
20001e94:	4821      	ldr	r0, [pc, #132]	; (20001f1c <flash_do_cmd.constprop.0+0x9c>)
20001e96:	f000 fbeb 	bl	20002670 <__rom_func_lookup_veneer>
20001e9a:	0004      	movs	r4, r0
    void (*flash_flush_cache)(void) = (void(*)(void))rom_func_lookup(rom_table_code('F', 'C'));
20001e9c:	4820      	ldr	r0, [pc, #128]	; (20001f20 <flash_do_cmd.constprop.0+0xa0>)
20001e9e:	f000 fbe7 	bl	20002670 <__rom_func_lookup_veneer>
20001ea2:	4680      	mov	r8, r0
    flash_init_boot2_copyout();
20001ea4:	f7ff ffb0 	bl	20001e08 <flash_init_boot2_copyout>
    connect_internal_flash();
20001ea8:	47a8      	blx	r5
    flash_exit_xip();
20001eaa:	47a0      	blx	r4
    flash_cs_force(0);
20001eac:	f7ff ffd8 	bl	20001e60 <flash_cs_force.constprop.1>
        uint32_t flags = ssi_hw->sr;
20001eb0:	21c0      	movs	r1, #192	; 0xc0
    size_t rx_remaining = count;
20001eb2:	240d      	movs	r4, #13
    size_t tx_remaining = count;
20001eb4:	220d      	movs	r2, #13
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
20001eb6:	2708      	movs	r7, #8
        bool can_put = !!(flags & SSI_SR_TFNF_BITS);
20001eb8:	2002      	movs	r0, #2
        uint32_t flags = ssi_hw->sr;
20001eba:	0549      	lsls	r1, r1, #21
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
20001ebc:	003d      	movs	r5, r7
        uint32_t flags = ssi_hw->sr;
20001ebe:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
20001ec0:	401d      	ands	r5, r3
        if (can_put && tx_remaining && rx_remaining - tx_remaining < max_in_flight) {
20001ec2:	4218      	tst	r0, r3
20001ec4:	d00b      	beq.n	20001ede <flash_do_cmd.constprop.0+0x5e>
20001ec6:	2a00      	cmp	r2, #0
20001ec8:	d009      	beq.n	20001ede <flash_do_cmd.constprop.0+0x5e>
20001eca:	1aa3      	subs	r3, r4, r2
20001ecc:	2b0d      	cmp	r3, #13
20001ece:	d81e      	bhi.n	20001f0e <flash_do_cmd.constprop.0+0x8e>
            ssi_hw->dr0 = *txbuf++;
20001ed0:	464b      	mov	r3, r9
20001ed2:	781b      	ldrb	r3, [r3, #0]
            --tx_remaining;
20001ed4:	3a01      	subs	r2, #1
            ssi_hw->dr0 = *txbuf++;
20001ed6:	660b      	str	r3, [r1, #96]	; 0x60
20001ed8:	2301      	movs	r3, #1
20001eda:	469c      	mov	ip, r3
20001edc:	44e1      	add	r9, ip
        if (can_get && rx_remaining) {
20001ede:	0013      	movs	r3, r2
20001ee0:	2d00      	cmp	r5, #0
20001ee2:	d10b      	bne.n	20001efc <flash_do_cmd.constprop.0+0x7c>
    while (tx_remaining || rx_remaining) {
20001ee4:	4323      	orrs	r3, r4
20001ee6:	2b00      	cmp	r3, #0
20001ee8:	d1e8      	bne.n	20001ebc <flash_do_cmd.constprop.0+0x3c>
    flash_cs_force(1);
20001eea:	f7ff ffad 	bl	20001e48 <flash_cs_force.constprop.0>
    flash_flush_cache();
20001eee:	47c0      	blx	r8
    flash_enable_xip_via_boot2();
20001ef0:	f7ff ffa2 	bl	20001e38 <flash_enable_xip_via_boot2>
}
20001ef4:	bcc0      	pop	{r6, r7}
20001ef6:	46b9      	mov	r9, r7
20001ef8:	46b0      	mov	r8, r6
20001efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (can_get && rx_remaining) {
20001efc:	2c00      	cmp	r4, #0
20001efe:	d0f2      	beq.n	20001ee6 <flash_do_cmd.constprop.0+0x66>
            *rxbuf++ = ssi_hw->dr0;
20001f00:	6e0b      	ldr	r3, [r1, #96]	; 0x60
            --rx_remaining;
20001f02:	3c01      	subs	r4, #1
            *rxbuf++ = ssi_hw->dr0;
20001f04:	7033      	strb	r3, [r6, #0]
    while (tx_remaining || rx_remaining) {
20001f06:	0023      	movs	r3, r4
            *rxbuf++ = ssi_hw->dr0;
20001f08:	3601      	adds	r6, #1
    while (tx_remaining || rx_remaining) {
20001f0a:	4313      	orrs	r3, r2
20001f0c:	e7eb      	b.n	20001ee6 <flash_do_cmd.constprop.0+0x66>
        if (can_get && rx_remaining) {
20001f0e:	2d00      	cmp	r5, #0
20001f10:	d0d4      	beq.n	20001ebc <flash_do_cmd.constprop.0+0x3c>
20001f12:	2c00      	cmp	r4, #0
20001f14:	d0d2      	beq.n	20001ebc <flash_do_cmd.constprop.0+0x3c>
20001f16:	e7f3      	b.n	20001f00 <flash_do_cmd.constprop.0+0x80>
20001f18:	00004649 	.word	0x00004649
20001f1c:	00005845 	.word	0x00005845
20001f20:	00004346 	.word	0x00004346

20001f24 <mutex_enter_blocking>:

void __time_critical_func(mutex_enter_blocking)(mutex_t *mtx) {
20001f24:	b510      	push	{r4, lr}
    assert(mtx->core.spin_lock);
    bool block = true;
    do {
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001f26:	6802      	ldr	r2, [r0, #0]
    *lock = 0;
20001f28:	2400      	movs	r4, #0
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001f2a:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20001f2e:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20001f30:	6813      	ldr	r3, [r2, #0]
20001f32:	2b00      	cmp	r3, #0
20001f34:	d0fc      	beq.n	20001f30 <mutex_enter_blocking+0xc>
    __asm volatile ("dmb");
20001f36:	f3bf 8f5f 	dmb	sy
        if (mtx->owner < 0) {
20001f3a:	7903      	ldrb	r3, [r0, #4]
20001f3c:	2b7f      	cmp	r3, #127	; 0x7f
20001f3e:	d80b      	bhi.n	20001f58 <mutex_enter_blocking+0x34>
            mtx->owner = get_core_num();
            block = false;
        }
        spin_unlock(mtx->core.spin_lock, save);
20001f40:	6803      	ldr	r3, [r0, #0]
20001f42:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20001f46:	601c      	str	r4, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20001f48:	f381 8810 	msr	PRIMASK, r1
    __asm volatile ("wfe");
20001f4c:	bf20      	wfe
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001f4e:	6802      	ldr	r2, [r0, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001f50:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20001f54:	b672      	cpsid	i
inline static void spin_lock_unsafe_blocking(spin_lock_t *lock) {
20001f56:	e7eb      	b.n	20001f30 <mutex_enter_blocking+0xc>
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
20001f58:	23d0      	movs	r3, #208	; 0xd0
20001f5a:	061b      	lsls	r3, r3, #24
            mtx->owner = get_core_num();
20001f5c:	681b      	ldr	r3, [r3, #0]
20001f5e:	7103      	strb	r3, [r0, #4]
        spin_unlock(mtx->core.spin_lock, save);
20001f60:	6803      	ldr	r3, [r0, #0]
    __asm volatile ("dmb");
20001f62:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20001f66:	2200      	movs	r2, #0
20001f68:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20001f6a:	f381 8810 	msr	PRIMASK, r1
        if (block) {
            __wfe();
        }
    } while (block);
}
20001f6e:	bd10      	pop	{r4, pc}

20001f70 <mutex_try_enter>:

bool __time_critical_func(mutex_try_enter)(mutex_t *mtx, uint32_t *owner_out) {
20001f70:	0003      	movs	r3, r0
    bool entered;
    uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001f72:	6800      	ldr	r0, [r0, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001f74:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
20001f78:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20001f7a:	6802      	ldr	r2, [r0, #0]
20001f7c:	2a00      	cmp	r2, #0
20001f7e:	d0fc      	beq.n	20001f7a <mutex_try_enter+0xa>
    __asm volatile ("dmb");
20001f80:	f3bf 8f5f 	dmb	sy
    if (mtx->owner < 0) {
20001f84:	2204      	movs	r2, #4
20001f86:	569a      	ldrsb	r2, [r3, r2]
20001f88:	2a00      	cmp	r2, #0
20001f8a:	db0b      	blt.n	20001fa4 <mutex_try_enter+0x34>
        mtx->owner = get_core_num();
        entered = true;
    } else {
        if (owner_out) *owner_out = mtx->owner;
20001f8c:	2900      	cmp	r1, #0
20001f8e:	d00f      	beq.n	20001fb0 <mutex_try_enter+0x40>
        entered = false;
20001f90:	2000      	movs	r0, #0
        if (owner_out) *owner_out = mtx->owner;
20001f92:	600a      	str	r2, [r1, #0]
    }
    spin_unlock(mtx->core.spin_lock, save);
20001f94:	681b      	ldr	r3, [r3, #0]
20001f96:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20001f9a:	2200      	movs	r2, #0
20001f9c:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20001f9e:	f38c 8810 	msr	PRIMASK, ip
    return entered;
}
20001fa2:	4770      	bx	lr
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
20001fa4:	22d0      	movs	r2, #208	; 0xd0
20001fa6:	0612      	lsls	r2, r2, #24
        mtx->owner = get_core_num();
20001fa8:	6812      	ldr	r2, [r2, #0]
        entered = true;
20001faa:	2001      	movs	r0, #1
        mtx->owner = get_core_num();
20001fac:	711a      	strb	r2, [r3, #4]
        entered = true;
20001fae:	e7f1      	b.n	20001f94 <mutex_try_enter+0x24>
        entered = false;
20001fb0:	2000      	movs	r0, #0
20001fb2:	e7ef      	b.n	20001f94 <mutex_try_enter+0x24>

20001fb4 <mutex_enter_timeout_ms>:

bool __time_critical_func(mutex_enter_timeout_ms)(mutex_t *mtx, uint32_t timeout_ms) {
20001fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
20001fb6:	46c6      	mov	lr, r8
20001fb8:	b500      	push	{lr}
20001fba:	000c      	movs	r4, r1
20001fbc:	4680      	mov	r8, r0
    update_us_since_boot(&t, time_us_64());
20001fbe:	f000 fb67 	bl	20002690 <__time_us_64_veneer>
    uint64_t delayed = base + ms * 1000ull;
20001fc2:	22fa      	movs	r2, #250	; 0xfa
    update_us_since_boot(&t, time_us_64());
20001fc4:	0006      	movs	r6, r0
20001fc6:	000f      	movs	r7, r1
    uint64_t delayed = base + ms * 1000ull;
20001fc8:	0020      	movs	r0, r4
20001fca:	2300      	movs	r3, #0
20001fcc:	2100      	movs	r1, #0
20001fce:	0092      	lsls	r2, r2, #2
20001fd0:	f000 fb3e 	bl	20002650 <____wrap___aeabi_lmul_veneer>
20001fd4:	1980      	adds	r0, r0, r6
20001fd6:	4179      	adcs	r1, r7
20001fd8:	0004      	movs	r4, r0
20001fda:	000d      	movs	r5, r1
    if (delayed < base) {
20001fdc:	428f      	cmp	r7, r1
20001fde:	d830      	bhi.n	20002042 <mutex_enter_timeout_ms+0x8e>
20001fe0:	d02d      	beq.n	2000203e <mutex_enter_timeout_ms+0x8a>
    *lock = 0;
20001fe2:	2600      	movs	r6, #0

bool __time_critical_func(mutex_enter_block_until)(mutex_t *mtx, absolute_time_t until) {
    assert(mtx->core.spin_lock);
    bool block = true;
    do {
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001fe4:	4643      	mov	r3, r8
20001fe6:	681a      	ldr	r2, [r3, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001fe8:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20001fec:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20001fee:	6813      	ldr	r3, [r2, #0]
20001ff0:	2b00      	cmp	r3, #0
20001ff2:	d0fc      	beq.n	20001fee <mutex_enter_timeout_ms+0x3a>
    __asm volatile ("dmb");
20001ff4:	f3bf 8f5f 	dmb	sy
        if (mtx->owner < 0) {
20001ff8:	4643      	mov	r3, r8
20001ffa:	791b      	ldrb	r3, [r3, #4]
20001ffc:	2b7f      	cmp	r3, #127	; 0x7f
20001ffe:	d80e      	bhi.n	2000201e <mutex_enter_timeout_ms+0x6a>
            mtx->owner = get_core_num();
            block = false;
        }
        spin_unlock(mtx->core.spin_lock, save);
20002000:	4643      	mov	r3, r8
20002002:	681b      	ldr	r3, [r3, #0]
20002004:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20002008:	601e      	str	r6, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
2000200a:	f381 8810 	msr	PRIMASK, r1
        if (block) {
            if (best_effort_wfe_or_timeout(until)) {
2000200e:	0020      	movs	r0, r4
20002010:	0029      	movs	r1, r5
20002012:	f000 fb25 	bl	20002660 <__best_effort_wfe_or_timeout_veneer>
20002016:	2800      	cmp	r0, #0
20002018:	d0e4      	beq.n	20001fe4 <mutex_enter_timeout_ms+0x30>
                return false;
2000201a:	2000      	movs	r0, #0
2000201c:	e00c      	b.n	20002038 <mutex_enter_timeout_ms+0x84>
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
2000201e:	23d0      	movs	r3, #208	; 0xd0
            mtx->owner = get_core_num();
20002020:	4642      	mov	r2, r8
20002022:	061b      	lsls	r3, r3, #24
20002024:	681b      	ldr	r3, [r3, #0]
20002026:	7113      	strb	r3, [r2, #4]
        spin_unlock(mtx->core.spin_lock, save);
20002028:	6813      	ldr	r3, [r2, #0]
    __asm volatile ("dmb");
2000202a:	f3bf 8f5f 	dmb	sy
    *lock = 0;
2000202e:	2200      	movs	r2, #0
20002030:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20002032:	f381 8810 	msr	PRIMASK, r1
            }
        }
    } while (block);
    return true;
20002036:	2001      	movs	r0, #1
}
20002038:	bc80      	pop	{r7}
2000203a:	46b8      	mov	r8, r7
2000203c:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000203e:	4286      	cmp	r6, r0
20002040:	d9cf      	bls.n	20001fe2 <mutex_enter_timeout_ms+0x2e>
        delayed = (uint64_t)-1;
20002042:	2401      	movs	r4, #1
20002044:	4264      	negs	r4, r4
20002046:	17e5      	asrs	r5, r4, #31
20002048:	e7cb      	b.n	20001fe2 <mutex_enter_timeout_ms+0x2e>
2000204a:	46c0      	nop			; (mov r8, r8)

2000204c <mutex_exit>:
}

void __time_critical_func(mutex_exit)(mutex_t *mtx) {
    uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
2000204c:	6802      	ldr	r2, [r0, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
2000204e:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20002052:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20002054:	6813      	ldr	r3, [r2, #0]
20002056:	2b00      	cmp	r3, #0
20002058:	d0fc      	beq.n	20002054 <mutex_exit+0x8>
    __asm volatile ("dmb");
2000205a:	f3bf 8f5f 	dmb	sy
    assert(mtx->owner >= 0);
    mtx->owner = -1;
2000205e:	23ff      	movs	r3, #255	; 0xff
20002060:	7103      	strb	r3, [r0, #4]
    __asm volatile ("sev");
20002062:	bf40      	sev
    __sev();
    spin_unlock(mtx->core.spin_lock, save);
20002064:	6803      	ldr	r3, [r0, #0]
    __asm volatile ("dmb");
20002066:	f3bf 8f5f 	dmb	sy
    *lock = 0;
2000206a:	2200      	movs	r2, #0
2000206c:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
2000206e:	f381 8810 	msr	PRIMASK, r1
}
20002072:	4770      	bx	lr

20002074 <_Z13VgaBufProcessv>:
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
20002074:	22a0      	movs	r2, #160	; 0xa0
{
20002076:	b5f0      	push	{r4, r5, r6, r7, lr}
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
20002078:	2102      	movs	r1, #2
{
2000207a:	46de      	mov	lr, fp
2000207c:	4657      	mov	r7, sl
2000207e:	464e      	mov	r6, r9
20002080:	4645      	mov	r5, r8
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
20002082:	4b7d      	ldr	r3, [pc, #500]	; (20002278 <_Z13VgaBufProcessv+0x204>)
20002084:	05d2      	lsls	r2, r2, #23
{
20002086:	b5e0      	push	{r5, r6, r7, lr}
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
20002088:	50d1      	str	r1, [r2, r3]
	BufInx = bufinx ^ 1;
2000208a:	2301      	movs	r3, #1
	int bufinx = BufInx;
2000208c:	497b      	ldr	r1, [pc, #492]	; (2000227c <_Z13VgaBufProcessv+0x208>)
	hw_divider_save_state(&DividerState);
2000208e:	487c      	ldr	r0, [pc, #496]	; (20002280 <_Z13VgaBufProcessv+0x20c>)
	int bufinx = BufInx;
20002090:	680f      	ldr	r7, [r1, #0]
{
20002092:	b083      	sub	sp, #12
	BufInx = bufinx ^ 1;
20002094:	407b      	eors	r3, r7
20002096:	600b      	str	r3, [r1, #0]
        dma_channel_hw_addr(channel)->al3_read_addr_trig = (uintptr_t) read_addr;
20002098:	4b7a      	ldr	r3, [pc, #488]	; (20002284 <_Z13VgaBufProcessv+0x210>)
2000209a:	681b      	ldr	r3, [r3, #0]
2000209c:	63d3      	str	r3, [r2, #60]	; 0x3c
	hw_divider_save_state(&DividerState);
2000209e:	f000 faef 	bl	20002680 <__hw_divider_save_state_veneer>
	int line = ScanLine;	// current scanline
200020a2:	4b79      	ldr	r3, [pc, #484]	; (20002288 <_Z13VgaBufProcessv+0x214>)
	if (line > CurVmode.vtot) // last scanline?
200020a4:	4979      	ldr	r1, [pc, #484]	; (2000228c <_Z13VgaBufProcessv+0x218>)
	int line = ScanLine;	// current scanline
200020a6:	681a      	ldr	r2, [r3, #0]
	if (line > CurVmode.vtot) // last scanline?
200020a8:	8d88      	ldrh	r0, [r1, #44]	; 0x2c
	line++; 		// new current scanline
200020aa:	3201      	adds	r2, #1
	if (line > CurVmode.vtot) // last scanline?
200020ac:	4290      	cmp	r0, r2
200020ae:	da04      	bge.n	200020ba <_Z13VgaBufProcessv+0x46>
		Frame++;	// increment frame counter
200020b0:	4877      	ldr	r0, [pc, #476]	; (20002290 <_Z13VgaBufProcessv+0x21c>)
200020b2:	6802      	ldr	r2, [r0, #0]
200020b4:	3201      	adds	r2, #1
200020b6:	6002      	str	r2, [r0, #0]
		line = 1; 	// restart scanline
200020b8:	2201      	movs	r2, #1
	ScanLine = line;	// store new scanline
200020ba:	601a      	str	r2, [r3, #0]
	u8 linetype = ScanlineType[line];
200020bc:	4b75      	ldr	r3, [pc, #468]	; (20002294 <_Z13VgaBufProcessv+0x220>)
	switch (linetype)
200020be:	5c9b      	ldrb	r3, [r3, r2]
200020c0:	3b06      	subs	r3, #6
200020c2:	b2db      	uxtb	r3, r3
200020c4:	2b04      	cmp	r3, #4
200020c6:	d862      	bhi.n	2000218e <_Z13VgaBufProcessv+0x11a>
200020c8:	4873      	ldr	r0, [pc, #460]	; (20002298 <_Z13VgaBufProcessv+0x224>)
200020ca:	009b      	lsls	r3, r3, #2
200020cc:	58c3      	ldr	r3, [r0, r3]
200020ce:	469f      	mov	pc, r3
		y0 = line - CurVmode.vfirst1;
200020d0:	2340      	movs	r3, #64	; 0x40
		y0 = line - CurVmode.vfirst2;
200020d2:	5acb      	ldrh	r3, [r1, r3]
200020d4:	1ad2      	subs	r2, r2, r3
		if (CurVmode.dbly) y0 >>= 1;
200020d6:	2355      	movs	r3, #85	; 0x55
200020d8:	5ccb      	ldrb	r3, [r1, r3]
200020da:	2b00      	cmp	r3, #0
200020dc:	d000      	beq.n	200020e0 <_Z13VgaBufProcessv+0x6c>
200020de:	1052      	asrs	r2, r2, #1
		y0 = (y0 << 1) + 1;
200020e0:	0052      	lsls	r2, r2, #1
200020e2:	1c53      	adds	r3, r2, #1
		VSync = False;	// not vsync
200020e4:	2200      	movs	r2, #0
		y0 = (y0 << 1) + 1;
200020e6:	9300      	str	r3, [sp, #0]
		VSync = False;	// not vsync
200020e8:	4b6c      	ldr	r3, [pc, #432]	; (2000229c <_Z13VgaBufProcessv+0x228>)
200020ea:	701a      	strb	r2, [r3, #0]
	if (y0 >= 0)
200020ec:	9b00      	ldr	r3, [sp, #0]
200020ee:	2b00      	cmp	r3, #0
200020f0:	db25      	blt.n	2000213e <_Z13VgaBufProcessv+0xca>
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
200020f2:	4c6b      	ldr	r4, [pc, #428]	; (200022a0 <_Z13VgaBufProcessv+0x22c>)
    dma_hw->abort = 1u << channel;
200020f4:	21a0      	movs	r1, #160	; 0xa0
		for (layer = 1; layer < LAYERS; layer++)
200020f6:	2301      	movs	r3, #1
200020f8:	46a4      	mov	ip, r4
200020fa:	46bb      	mov	fp, r7
    return timer_hw->timerawl;
200020fc:	4a69      	ldr	r2, [pc, #420]	; (200022a4 <_Z13VgaBufProcessv+0x230>)
200020fe:	486a      	ldr	r0, [pc, #424]	; (200022a8 <_Z13VgaBufProcessv+0x234>)
20002100:	4690      	mov	r8, r2
	if (y0 >= 0)
20002102:	4d6a      	ldr	r5, [pc, #424]	; (200022ac <_Z13VgaBufProcessv+0x238>)
20002104:	4a6a      	ldr	r2, [pc, #424]	; (200022b0 <_Z13VgaBufProcessv+0x23c>)
20002106:	05c9      	lsls	r1, r1, #23
			if (CtrlBufNext[layer] == NULL) continue;
20002108:	4e5e      	ldr	r6, [pc, #376]	; (20002284 <_Z13VgaBufProcessv+0x210>)
2000210a:	009c      	lsls	r4, r3, #2
2000210c:	5934      	ldr	r4, [r6, r4]
2000210e:	9401      	str	r4, [sp, #4]
20002110:	2c00      	cmp	r4, #0
20002112:	d00e      	beq.n	20002132 <_Z13VgaBufProcessv+0xbe>
			if (!s->on || (s->w <= 0) || (y0 < s->y) || (y0 >= s->y + s->h)) continue;
20002114:	7b84      	ldrb	r4, [r0, #14]
20002116:	2c00      	cmp	r4, #0
20002118:	d00b      	beq.n	20002132 <_Z13VgaBufProcessv+0xbe>
2000211a:	8844      	ldrh	r4, [r0, #2]
2000211c:	2c00      	cmp	r4, #0
2000211e:	d008      	beq.n	20002132 <_Z13VgaBufProcessv+0xbe>
20002120:	2400      	movs	r4, #0
20002122:	5f07      	ldrsh	r7, [r0, r4]
20002124:	9e00      	ldr	r6, [sp, #0]
20002126:	42b7      	cmp	r7, r6
20002128:	dc03      	bgt.n	20002132 <_Z13VgaBufProcessv+0xbe>
2000212a:	8884      	ldrh	r4, [r0, #4]
2000212c:	19e4      	adds	r4, r4, r7
2000212e:	42b4      	cmp	r4, r6
20002130:	dc31      	bgt.n	20002196 <_Z13VgaBufProcessv+0x122>
		for (layer = 1; layer < LAYERS; layer++)
20002132:	3301      	adds	r3, #1
20002134:	3518      	adds	r5, #24
20002136:	3024      	adds	r0, #36	; 0x24
20002138:	2b04      	cmp	r3, #4
2000213a:	d1e5      	bne.n	20002108 <_Z13VgaBufProcessv+0x94>
2000213c:	465f      	mov	r7, fp
}
2000213e:	0038      	movs	r0, r7
20002140:	b003      	add	sp, #12
20002142:	bcf0      	pop	{r4, r5, r6, r7}
20002144:	46bb      	mov	fp, r7
20002146:	46b2      	mov	sl, r6
20002148:	46a9      	mov	r9, r5
2000214a:	46a0      	mov	r8, r4
2000214c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		y0 = line - CurVmode.vfirst2;
2000214e:	234e      	movs	r3, #78	; 0x4e
20002150:	e7bf      	b.n	200020d2 <_Z13VgaBufProcessv+0x5e>
		y0 = line - CurVmode.vfirst1;
20002152:	2340      	movs	r3, #64	; 0x40
20002154:	5acb      	ldrh	r3, [r1, r3]
20002156:	1ad2      	subs	r2, r2, r3
		if (CurVmode.dbly) y0 >>= 1;
20002158:	2355      	movs	r3, #85	; 0x55
		y0 = line - CurVmode.vfirst1;
2000215a:	9200      	str	r2, [sp, #0]
		if (CurVmode.dbly) y0 >>= 1;
2000215c:	5ccb      	ldrb	r3, [r1, r3]
2000215e:	2b00      	cmp	r3, #0
20002160:	d001      	beq.n	20002166 <_Z13VgaBufProcessv+0xf2>
20002162:	1053      	asrs	r3, r2, #1
20002164:	9300      	str	r3, [sp, #0]
		VSync = False;	// not vsync
20002166:	2200      	movs	r2, #0
20002168:	4b4c      	ldr	r3, [pc, #304]	; (2000229c <_Z13VgaBufProcessv+0x228>)
2000216a:	701a      	strb	r2, [r3, #0]
		break;
2000216c:	e7be      	b.n	200020ec <_Z13VgaBufProcessv+0x78>
		y0 = line - CurVmode.vfirst1;
2000216e:	2340      	movs	r3, #64	; 0x40
		y0 = line - CurVmode.vfirst2;
20002170:	5acb      	ldrh	r3, [r1, r3]
20002172:	1ad2      	subs	r2, r2, r3
		if (CurVmode.dbly) y0 >>= 1;
20002174:	2355      	movs	r3, #85	; 0x55
20002176:	5ccb      	ldrb	r3, [r1, r3]
20002178:	2b00      	cmp	r3, #0
2000217a:	d000      	beq.n	2000217e <_Z13VgaBufProcessv+0x10a>
2000217c:	1052      	asrs	r2, r2, #1
		y0 <<= 1;
2000217e:	0053      	lsls	r3, r2, #1
		VSync = False;	// not vsync
20002180:	2200      	movs	r2, #0
		y0 <<= 1;
20002182:	9300      	str	r3, [sp, #0]
		VSync = False;	// not vsync
20002184:	4b45      	ldr	r3, [pc, #276]	; (2000229c <_Z13VgaBufProcessv+0x228>)
20002186:	701a      	strb	r2, [r3, #0]
		break;
20002188:	e7b0      	b.n	200020ec <_Z13VgaBufProcessv+0x78>
		y0 = line - CurVmode.vfirst2;
2000218a:	234e      	movs	r3, #78	; 0x4e
2000218c:	e7f0      	b.n	20002170 <_Z13VgaBufProcessv+0xfc>
		VSync = True;	// vsync
2000218e:	2201      	movs	r2, #1
20002190:	4b42      	ldr	r3, [pc, #264]	; (2000229c <_Z13VgaBufProcessv+0x228>)
20002192:	701a      	strb	r2, [r3, #0]
	if (y0 >= 0)
20002194:	e7d3      	b.n	2000213e <_Z13VgaBufProcessv+0xca>
20002196:	4644      	mov	r4, r8
20002198:	6aa4      	ldr	r4, [r4, #40]	; 0x28
2000219a:	46a2      	mov	sl, r4
2000219c:	1d2c      	adds	r4, r5, #4
2000219e:	46a1      	mov	r9, r4
				if (a <= CurLayerProg.maxidle+LAYER_OFFSET) break;
200021a0:	4c44      	ldr	r4, [pc, #272]	; (200022b4 <_Z13VgaBufProcessv+0x240>)
200021a2:	7b67      	ldrb	r7, [r4, #13]
200021a4:	464c      	mov	r4, r9
200021a6:	4699      	mov	r9, r3
200021a8:	0003      	movs	r3, r0
200021aa:	4650      	mov	r0, sl
200021ac:	469a      	mov	sl, r3
200021ae:	0023      	movs	r3, r4
200021b0:	e004      	b.n	200021bc <_Z13VgaBufProcessv+0x148>
200021b2:	4644      	mov	r4, r8
200021b4:	6aa4      	ldr	r4, [r4, #40]	; 0x28
			} while ((u32)(time_us_32() - t1) < (u32)10); // wait max. 10 us, low resolution can take long time
200021b6:	1a24      	subs	r4, r4, r0
200021b8:	2c09      	cmp	r4, #9
200021ba:	d804      	bhi.n	200021c6 <_Z13VgaBufProcessv+0x152>
				if (a <= CurLayerProg.maxidle+LAYER_OFFSET) break;
200021bc:	261f      	movs	r6, #31
				u8 a = *(volatile u8*)&VGA_PIO->sm[sm].addr & 0x1f;
200021be:	781c      	ldrb	r4, [r3, #0]
				if (a <= CurLayerProg.maxidle+LAYER_OFFSET) break;
200021c0:	4034      	ands	r4, r6
200021c2:	42a7      	cmp	r7, r4
200021c4:	d3f5      	bcc.n	200021b2 <_Z13VgaBufProcessv+0x13e>
200021c6:	464b      	mov	r3, r9
200021c8:	2701      	movs	r7, #1
200021ca:	005c      	lsls	r4, r3, #1
200021cc:	4650      	mov	r0, sl
			dma_channel_abort(VGA_DMA_PIO(layer));
200021ce:	46a2      	mov	sl, r4
200021d0:	3401      	adds	r4, #1
200021d2:	40a7      	lsls	r7, r4
200021d4:	508f      	str	r7, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
200021d6:	588c      	ldr	r4, [r1, r2]
200021d8:	423c      	tst	r4, r7
200021da:	d1fc      	bne.n	200021d6 <_Z13VgaBufProcessv+0x162>
    dma_hw->abort = 1u << channel;
200021dc:	2401      	movs	r4, #1
200021de:	4656      	mov	r6, sl
200021e0:	40b4      	lsls	r4, r6
200021e2:	4699      	mov	r9, r3
200021e4:	508c      	str	r4, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
200021e6:	588b      	ldr	r3, [r1, r2]
200021e8:	4223      	tst	r3, r4
200021ea:	d1fc      	bne.n	200021e6 <_Z13VgaBufProcessv+0x172>
    dma_hw->abort = 1u << channel;
200021ec:	003b      	movs	r3, r7
200021ee:	508f      	str	r7, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
200021f0:	588f      	ldr	r7, [r1, r2]
200021f2:	423b      	tst	r3, r7
200021f4:	d1fc      	bne.n	200021f0 <_Z13VgaBufProcessv+0x17c>
    dma_hw->abort = 1u << channel;
200021f6:	464b      	mov	r3, r9
200021f8:	508c      	str	r4, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
200021fa:	588f      	ldr	r7, [r1, r2]
200021fc:	423c      	tst	r4, r7
200021fe:	d1fc      	bne.n	200021fa <_Z13VgaBufProcessv+0x186>
20002200:	2701      	movs	r7, #1
20002202:	4664      	mov	r4, ip
20002204:	409f      	lsls	r7, r3
20002206:	4666      	mov	r6, ip
20002208:	6824      	ldr	r4, [r4, #0]
    pio->sm[sm].instr = instr;
2000220a:	449a      	add	sl, r3
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
2000220c:	43bc      	bics	r4, r7
2000220e:	6034      	str	r4, [r6, #0]
20002210:	2480      	movs	r4, #128	; 0x80
20002212:	2680      	movs	r6, #128	; 0x80
20002214:	0164      	lsls	r4, r4, #5
20002216:	432c      	orrs	r4, r5
20002218:	0636      	lsls	r6, r6, #24
2000221a:	6026      	str	r6, [r4, #0]
2000221c:	6026      	str	r6, [r4, #0]
    pio->ctrl |= 1u << (PIO_CTRL_SM_RESTART_LSB + sm);
2000221e:	4664      	mov	r4, ip
20002220:	2601      	movs	r6, #1
20002222:	6824      	ldr	r4, [r4, #0]
20002224:	46a1      	mov	r9, r4
20002226:	1d1c      	adds	r4, r3, #4
20002228:	40a6      	lsls	r6, r4
2000222a:	0034      	movs	r4, r6
2000222c:	464e      	mov	r6, r9
2000222e:	4334      	orrs	r4, r6
20002230:	4666      	mov	r6, ip
20002232:	6034      	str	r4, [r6, #0]
20002234:	261f      	movs	r6, #31
20002236:	4c1f      	ldr	r4, [pc, #124]	; (200022b4 <_Z13VgaBufProcessv+0x240>)
20002238:	7ae4      	ldrb	r4, [r4, #11]
2000223a:	4034      	ands	r4, r6
2000223c:	0026      	movs	r6, r4
    pio->sm[sm].instr = instr;
2000223e:	4654      	mov	r4, sl
20002240:	00e4      	lsls	r4, r4, #3
20002242:	46a2      	mov	sl, r4
20002244:	4c1c      	ldr	r4, [pc, #112]	; (200022b8 <_Z13VgaBufProcessv+0x244>)
20002246:	46a1      	mov	r9, r4
20002248:	44ca      	add	sl, r9
2000224a:	4654      	mov	r4, sl
2000224c:	6026      	str	r6, [r4, #0]
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
2000224e:	4664      	mov	r4, ip
20002250:	6824      	ldr	r4, [r4, #0]
20002252:	261f      	movs	r6, #31
20002254:	43bc      	bics	r4, r7
20002256:	4327      	orrs	r7, r4
20002258:	4664      	mov	r4, ip
2000225a:	6027      	str	r7, [r4, #0]
2000225c:	4c15      	ldr	r4, [pc, #84]	; (200022b4 <_Z13VgaBufProcessv+0x240>)
2000225e:	7b24      	ldrb	r4, [r4, #12]
20002260:	4034      	ands	r4, r6
    pio->sm[sm].instr = instr;
20002262:	4656      	mov	r6, sl
20002264:	6034      	str	r4, [r6, #0]
    return &dma_hw->ch[channel];
20002266:	26a0      	movs	r6, #160	; 0xa0
20002268:	05f6      	lsls	r6, r6, #23
2000226a:	46b1      	mov	r9, r6
2000226c:	01dc      	lsls	r4, r3, #7
        dma_channel_hw_addr(channel)->al3_read_addr_trig = (uintptr_t) read_addr;
2000226e:	9e01      	ldr	r6, [sp, #4]
20002270:	444c      	add	r4, r9
20002272:	63e6      	str	r6, [r4, #60]	; 0x3c
20002274:	e75d      	b.n	20002132 <_Z13VgaBufProcessv+0xbe>
20002276:	46c0      	nop			; (mov r8, r8)
20002278:	0000040c 	.word	0x0000040c
2000227c:	2000326c 	.word	0x2000326c
20002280:	200047f8 	.word	0x200047f8
20002284:	20004750 	.word	0x20004750
20002288:	200220d8 	.word	0x200220d8
2000228c:	2000479c 	.word	0x2000479c
20002290:	20005008 	.word	0x20005008
20002294:	200220dc 	.word	0x200220dc
20002298:	101aece0 	.word	0x101aece0
2000229c:	20023b84 	.word	0x20023b84
200022a0:	50200000 	.word	0x50200000
200022a4:	40054000 	.word	0x40054000
200022a8:	20020160 	.word	0x20020160
200022ac:	502000e8 	.word	0x502000e8
200022b0:	00000444 	.word	0x00000444
200022b4:	2000476c 	.word	0x2000476c
200022b8:	502000d8 	.word	0x502000d8

200022bc <_Z12VgaBufRenderPmS_Phi>:
{
200022bc:	b5f0      	push	{r4, r5, r6, r7, lr}
200022be:	46de      	mov	lr, fp
200022c0:	4657      	mov	r7, sl
200022c2:	464e      	mov	r6, r9
200022c4:	4645      	mov	r5, r8
200022c6:	4699      	mov	r9, r3
	*cbuf++ = 4; // send 4x u32
200022c8:	2304      	movs	r3, #4
{
200022ca:	0004      	movs	r4, r0
200022cc:	4693      	mov	fp, r2
200022ce:	b5e0      	push	{r5, r6, r7, lr}
	*cbuf++ = 4; // send 4x u32
200022d0:	6003      	str	r3, [r0, #0]
	*cbuf++ = (u32)LineBufHsBp; // HSYNC + back porch
200022d2:	4b8b      	ldr	r3, [pc, #556]	; (20002500 <_Z12VgaBufRenderPmS_Phi+0x244>)
{
200022d4:	000e      	movs	r6, r1
	*cbuf++ = (u32)LineBufHsBp; // HSYNC + back porch
200022d6:	6063      	str	r3, [r4, #4]
	cbuf = Render(cbuf, dbuf, y0, CurVmode.width);
200022d8:	4b8a      	ldr	r3, [pc, #552]	; (20002504 <_Z12VgaBufRenderPmS_Phi+0x248>)
200022da:	464a      	mov	r2, r9
200022dc:	881b      	ldrh	r3, [r3, #0]
{
200022de:	b085      	sub	sp, #20
	cbuf = Render(cbuf, dbuf, y0, CurVmode.width);
200022e0:	4659      	mov	r1, fp
	*cbuf++ = (u32)LineBufHsBp; // HSYNC + back porch
200022e2:	3008      	adds	r0, #8
	cbuf = Render(cbuf, dbuf, y0, CurVmode.width);
200022e4:	f7ff fcea 	bl	20001cbc <Render>
	*cbuf++ = 1; // send 1x u32
200022e8:	2301      	movs	r3, #1
200022ea:	6003      	str	r3, [r0, #0]
	*cbuf++ = (u32)&LineBufFp; // front porch
200022ec:	3307      	adds	r3, #7
200022ee:	469c      	mov	ip, r3
200022f0:	4484      	add	ip, r0
200022f2:	4663      	mov	r3, ip
200022f4:	9300      	str	r3, [sp, #0]
200022f6:	4b84      	ldr	r3, [pc, #528]	; (20002508 <_Z12VgaBufRenderPmS_Phi+0x24c>)
200022f8:	4c84      	ldr	r4, [pc, #528]	; (2000250c <_Z12VgaBufRenderPmS_Phi+0x250>)
200022fa:	6043      	str	r3, [r0, #4]
	for (layer = 1; layer < LAYERS; layer++)
200022fc:	4b84      	ldr	r3, [pc, #528]	; (20002510 <_Z12VgaBufRenderPmS_Phi+0x254>)
200022fe:	4f85      	ldr	r7, [pc, #532]	; (20002514 <_Z12VgaBufRenderPmS_Phi+0x258>)
20002300:	4698      	mov	r8, r3
20002302:	4b85      	ldr	r3, [pc, #532]	; (20002518 <_Z12VgaBufRenderPmS_Phi+0x25c>)
20002304:	4d85      	ldr	r5, [pc, #532]	; (2000251c <_Z12VgaBufRenderPmS_Phi+0x260>)
20002306:	469a      	mov	sl, r3
		switch(mode)
20002308:	464b      	mov	r3, r9
2000230a:	46b1      	mov	r9, r6
2000230c:	4656      	mov	r6, sl
2000230e:	469a      	mov	sl, r3
		cbuf0 += CtrlBufSize[layer-1];
20002310:	6823      	ldr	r3, [r4, #0]
20002312:	009b      	lsls	r3, r3, #2
20002314:	4499      	add	r9, r3
		dbuf += LineBufSize[layer-1];
20002316:	4643      	mov	r3, r8
20002318:	681b      	ldr	r3, [r3, #0]
2000231a:	469c      	mov	ip, r3
		CtrlBufNext[layer] = NULL;
2000231c:	2300      	movs	r3, #0
2000231e:	607b      	str	r3, [r7, #4]
		int mode = LayerModeInx[layer];
20002320:	7873      	ldrb	r3, [r6, #1]
		dbuf += LineBufSize[layer-1];
20002322:	44e3      	add	fp, ip
		if (mode == LAYERMODE_BASE) continue;
20002324:	2b00      	cmp	r3, #0
20002326:	d038      	beq.n	2000239a <_Z12VgaBufRenderPmS_Phi+0xde>
		if (!s->on || (s->w <= 0) || (y0 < s->y) || (y0 >= s->y + s->h)) continue;
20002328:	2222      	movs	r2, #34	; 0x22
2000232a:	5caa      	ldrb	r2, [r5, r2]
2000232c:	2a00      	cmp	r2, #0
2000232e:	d034      	beq.n	2000239a <_Z12VgaBufRenderPmS_Phi+0xde>
20002330:	8aea      	ldrh	r2, [r5, #22]
20002332:	2a00      	cmp	r2, #0
20002334:	d031      	beq.n	2000239a <_Z12VgaBufRenderPmS_Phi+0xde>
20002336:	2114      	movs	r1, #20
20002338:	5e6a      	ldrsh	r2, [r5, r1]
2000233a:	4552      	cmp	r2, sl
2000233c:	dc2d      	bgt.n	2000239a <_Z12VgaBufRenderPmS_Phi+0xde>
2000233e:	8b29      	ldrh	r1, [r5, #24]
20002340:	1889      	adds	r1, r1, r2
20002342:	4551      	cmp	r1, sl
20002344:	dd29      	ble.n	2000239a <_Z12VgaBufRenderPmS_Phi+0xde>
		int y = y0 - s->y;
20002346:	4651      	mov	r1, sl
20002348:	1a8a      	subs	r2, r1, r2
2000234a:	9203      	str	r2, [sp, #12]
		CtrlBufNext[layer] = cbuf2;
2000234c:	464a      	mov	r2, r9
		*cbuf2++ = 1;
2000234e:	4649      	mov	r1, r9
		CtrlBufNext[layer] = cbuf2;
20002350:	607a      	str	r2, [r7, #4]
		*cbuf2++ = 1;
20002352:	2201      	movs	r2, #1
20002354:	600a      	str	r2, [r1, #0]
		*cbuf2++ = (u32)dbuf2;
20002356:	4659      	mov	r1, fp
20002358:	464a      	mov	r2, r9
2000235a:	6051      	str	r1, [r2, #4]
		*(u32*)dbuf2 = BYTESWAP(s->init);
2000235c:	68aa      	ldr	r2, [r5, #8]
		switch(mode)
2000235e:	3b06      	subs	r3, #6
20002360:	ba12      	rev	r2, r2
		*(u32*)dbuf2 = BYTESWAP(s->init);
20002362:	c104      	stmia	r1!, {r2}
		switch(mode)
20002364:	b2db      	uxtb	r3, r3
		*(u32*)dbuf2 = BYTESWAP(s->init);
20002366:	9101      	str	r1, [sp, #4]
		switch(mode)
20002368:	2b0c      	cmp	r3, #12
2000236a:	d900      	bls.n	2000236e <_Z12VgaBufRenderPmS_Phi+0xb2>
2000236c:	e094      	b.n	20002498 <_Z12VgaBufRenderPmS_Phi+0x1dc>
2000236e:	4a6c      	ldr	r2, [pc, #432]	; (20002520 <_Z12VgaBufRenderPmS_Phi+0x264>)
20002370:	009b      	lsls	r3, r3, #2
20002372:	58d3      	ldr	r3, [r2, r3]
20002374:	469f      	mov	pc, r3
				MemSet4((u32*)dbuf2, s->keycol, s->w/4);
20002376:	8aea      	ldrh	r2, [r5, #22]
20002378:	68e9      	ldr	r1, [r5, #12]
2000237a:	0892      	lsrs	r2, r2, #2
2000237c:	9801      	ldr	r0, [sp, #4]
2000237e:	f7fd ffc7 	bl	20000310 <MemSet4>
				cbuf2 = RenderFastSprite(cbuf2, y, s, dbuf2);
20002382:	4648      	mov	r0, r9
20002384:	002a      	movs	r2, r5
20002386:	9b01      	ldr	r3, [sp, #4]
20002388:	9903      	ldr	r1, [sp, #12]
2000238a:	3008      	adds	r0, #8
2000238c:	f7fe f938 	bl	20000600 <RenderFastSprite>
20002390:	9002      	str	r0, [sp, #8]
		*cbuf2++ = 0; // end mark
20002392:	2200      	movs	r2, #0
20002394:	9b02      	ldr	r3, [sp, #8]
20002396:	601a      	str	r2, [r3, #0]
		*cbuf2++ = 0; // end mark
20002398:	605a      	str	r2, [r3, #4]
	for (layer = 1; layer < LAYERS; layer++)
2000239a:	2304      	movs	r3, #4
2000239c:	469c      	mov	ip, r3
2000239e:	4b61      	ldr	r3, [pc, #388]	; (20002524 <_Z12VgaBufRenderPmS_Phi+0x268>)
200023a0:	3404      	adds	r4, #4
200023a2:	44e0      	add	r8, ip
200023a4:	3704      	adds	r7, #4
200023a6:	3601      	adds	r6, #1
200023a8:	3524      	adds	r5, #36	; 0x24
200023aa:	42a3      	cmp	r3, r4
200023ac:	d1b0      	bne.n	20002310 <_Z12VgaBufRenderPmS_Phi+0x54>
}
200023ae:	9800      	ldr	r0, [sp, #0]
200023b0:	b005      	add	sp, #20
200023b2:	bcf0      	pop	{r4, r5, r6, r7}
200023b4:	46bb      	mov	fp, r7
200023b6:	46b2      	mov	sl, r6
200023b8:	46a9      	mov	r9, r5
200023ba:	46a0      	mov	r8, r4
200023bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				int x = s->x; // destination coordinate X
200023be:	2112      	movs	r1, #18
200023c0:	5e6b      	ldrsh	r3, [r5, r1]
				int w = s->w; // destination width
200023c2:	8aea      	ldrh	r2, [r5, #22]
				if (x < 0)
200023c4:	2b00      	cmp	r3, #0
200023c6:	da00      	bge.n	200023ca <_Z12VgaBufRenderPmS_Phi+0x10e>
200023c8:	e07d      	b.n	200024c6 <_Z12VgaBufRenderPmS_Phi+0x20a>
					if (x + w > CurVmode.width)
200023ca:	494e      	ldr	r1, [pc, #312]	; (20002504 <_Z12VgaBufRenderPmS_Phi+0x248>)
200023cc:	18d0      	adds	r0, r2, r3
200023ce:	8809      	ldrh	r1, [r1, #0]
200023d0:	468c      	mov	ip, r1
					x = 0;
200023d2:	2100      	movs	r1, #0
					if (x + w > CurVmode.width)
200023d4:	4560      	cmp	r0, ip
200023d6:	dd01      	ble.n	200023dc <_Z12VgaBufRenderPmS_Phi+0x120>
						w = CurVmode.width - x; // limit W
200023d8:	4662      	mov	r2, ip
200023da:	1ad2      	subs	r2, r2, r3
				w = ALIGN4(w);
200023dc:	2303      	movs	r3, #3
200023de:	0010      	movs	r0, r2
200023e0:	4398      	bics	r0, r3
				if (w <= 0)
200023e2:	2800      	cmp	r0, #0
200023e4:	dd36      	ble.n	20002454 <_Z12VgaBufRenderPmS_Phi+0x198>
					*cbuf2++ = w/4;
200023e6:	464b      	mov	r3, r9
200023e8:	1092      	asrs	r2, r2, #2
200023ea:	609a      	str	r2, [r3, #8]
					*cbuf2++ = (u32)&dbuf2[x];
200023ec:	2310      	movs	r3, #16
200023ee:	9801      	ldr	r0, [sp, #4]
200023f0:	444b      	add	r3, r9
200023f2:	4684      	mov	ip, r0
200023f4:	9302      	str	r3, [sp, #8]
200023f6:	464b      	mov	r3, r9
200023f8:	4461      	add	r1, ip
200023fa:	60d9      	str	r1, [r3, #12]
					RenderPersp(dbuf2, y, s);
200023fc:	002a      	movs	r2, r5
200023fe:	9903      	ldr	r1, [sp, #12]
20002400:	f7fe fe66 	bl	200010d0 <RenderPersp>
20002404:	e7c5      	b.n	20002392 <_Z12VgaBufRenderPmS_Phi+0xd6>
				*cbuf2++ = s->trans;
20002406:	464a      	mov	r2, r9
20002408:	8a2b      	ldrh	r3, [r5, #16]
2000240a:	6093      	str	r3, [r2, #8]
				*cbuf2++ = (u32)dbuf2;
2000240c:	2310      	movs	r3, #16
2000240e:	444b      	add	r3, r9
20002410:	9302      	str	r3, [sp, #8]
20002412:	9b01      	ldr	r3, [sp, #4]
20002414:	60d3      	str	r3, [r2, #12]
				MemSet4((u32*)dbuf2, s->keycol, s->w/4);
20002416:	8aea      	ldrh	r2, [r5, #22]
20002418:	68e9      	ldr	r1, [r5, #12]
2000241a:	0018      	movs	r0, r3
2000241c:	0892      	lsrs	r2, r2, #2
2000241e:	f7fd ff77 	bl	20000310 <MemSet4>
				RenderSprite(dbuf2, y, s);
20002422:	002a      	movs	r2, r5
20002424:	9903      	ldr	r1, [sp, #12]
20002426:	9801      	ldr	r0, [sp, #4]
20002428:	f7fe ffdc 	bl	200013e4 <RenderSprite>
			break;
2000242c:	e7b1      	b.n	20002392 <_Z12VgaBufRenderPmS_Phi+0xd6>
				int x = s->x; // destination coordinate X
2000242e:	2112      	movs	r1, #18
20002430:	5e6b      	ldrsh	r3, [r5, r1]
				int w = s->w; // destination width
20002432:	8aea      	ldrh	r2, [r5, #22]
				if (x < 0)
20002434:	2b00      	cmp	r3, #0
20002436:	db3a      	blt.n	200024ae <_Z12VgaBufRenderPmS_Phi+0x1f2>
					if (x + w > CurVmode.width)
20002438:	4932      	ldr	r1, [pc, #200]	; (20002504 <_Z12VgaBufRenderPmS_Phi+0x248>)
2000243a:	18d0      	adds	r0, r2, r3
2000243c:	8809      	ldrh	r1, [r1, #0]
2000243e:	468c      	mov	ip, r1
					x = 0;
20002440:	2100      	movs	r1, #0
					if (x + w > CurVmode.width)
20002442:	4560      	cmp	r0, ip
20002444:	dd01      	ble.n	2000244a <_Z12VgaBufRenderPmS_Phi+0x18e>
						w = CurVmode.width - x; // limit W
20002446:	4662      	mov	r2, ip
20002448:	1ad2      	subs	r2, r2, r3
				w = ALIGN4(w);
2000244a:	2303      	movs	r3, #3
2000244c:	0010      	movs	r0, r2
2000244e:	4398      	bics	r0, r3
				if (w <= 0)
20002450:	2800      	cmp	r0, #0
20002452:	dc44      	bgt.n	200024de <_Z12VgaBufRenderPmS_Phi+0x222>
					*cbuf2++ = 1;
20002454:	2301      	movs	r3, #1
20002456:	464a      	mov	r2, r9
20002458:	6093      	str	r3, [r2, #8]
					*cbuf2++ = (u32)dbuf2;
2000245a:	330f      	adds	r3, #15
2000245c:	444b      	add	r3, r9
2000245e:	9302      	str	r3, [sp, #8]
20002460:	464b      	mov	r3, r9
20002462:	9a01      	ldr	r2, [sp, #4]
20002464:	60da      	str	r2, [r3, #12]
					*(u32*)dbuf2 = s->keycol;
20002466:	465b      	mov	r3, fp
20002468:	68ea      	ldr	r2, [r5, #12]
2000246a:	605a      	str	r2, [r3, #4]
2000246c:	e791      	b.n	20002392 <_Z12VgaBufRenderPmS_Phi+0xd6>
				int n = row[y+1] - row[y];
2000246e:	9a03      	ldr	r2, [sp, #12]
				u16* row = (u16*)s->par;
20002470:	6869      	ldr	r1, [r5, #4]
				int n = row[y+1] - row[y];
20002472:	3201      	adds	r2, #1
20002474:	0052      	lsls	r2, r2, #1
20002476:	188b      	adds	r3, r1, r2
20002478:	5a8a      	ldrh	r2, [r1, r2]
				*cbuf2++ = n;
2000247a:	4649      	mov	r1, r9
				int n = row[y+1] - row[y];
2000247c:	3b02      	subs	r3, #2
2000247e:	881b      	ldrh	r3, [r3, #0]
20002480:	1ad2      	subs	r2, r2, r3
				*cbuf2++ = n;
20002482:	608a      	str	r2, [r1, #8]
				*cbuf2++ = (u32)&s->img[row[y]*4];
20002484:	2210      	movs	r2, #16
20002486:	444a      	add	r2, r9
20002488:	9202      	str	r2, [sp, #8]
2000248a:	009b      	lsls	r3, r3, #2
				*cbuf2++ = (u32)&s->img[y*s->wb];
2000248c:	682a      	ldr	r2, [r5, #0]
2000248e:	4694      	mov	ip, r2
20002490:	464a      	mov	r2, r9
20002492:	4463      	add	r3, ip
20002494:	60d3      	str	r3, [r2, #12]
			break;
20002496:	e77c      	b.n	20002392 <_Z12VgaBufRenderPmS_Phi+0xd6>
				*cbuf2++ = s->trans;
20002498:	464a      	mov	r2, r9
2000249a:	8a2b      	ldrh	r3, [r5, #16]
2000249c:	6093      	str	r3, [r2, #8]
				*cbuf2++ = (u32)&s->img[y*s->wb];
2000249e:	2310      	movs	r3, #16
200024a0:	444b      	add	r3, r9
200024a2:	9a03      	ldr	r2, [sp, #12]
200024a4:	9302      	str	r3, [sp, #8]
200024a6:	8b6b      	ldrh	r3, [r5, #26]
200024a8:	435a      	muls	r2, r3
200024aa:	0013      	movs	r3, r2
200024ac:	e7ee      	b.n	2000248c <_Z12VgaBufRenderPmS_Phi+0x1d0>
					x = ALIGN4(x+4098) - 4096; // round X to 4-pixels
200024ae:	491e      	ldr	r1, [pc, #120]	; (20002528 <_Z12VgaBufRenderPmS_Phi+0x26c>)
200024b0:	468c      	mov	ip, r1
200024b2:	2103      	movs	r1, #3
200024b4:	4463      	add	r3, ip
200024b6:	438b      	bics	r3, r1
200024b8:	491c      	ldr	r1, [pc, #112]	; (2000252c <_Z12VgaBufRenderPmS_Phi+0x270>)
200024ba:	1859      	adds	r1, r3, r1
					w += x;	// decrease W
200024bc:	1852      	adds	r2, r2, r1
					x = -x; // start offset of X
200024be:	2180      	movs	r1, #128	; 0x80
200024c0:	0149      	lsls	r1, r1, #5
200024c2:	1ac9      	subs	r1, r1, r3
200024c4:	e7c1      	b.n	2000244a <_Z12VgaBufRenderPmS_Phi+0x18e>
					x = ALIGN4(x+4098) - 4096; // round X to 4-pixels
200024c6:	4918      	ldr	r1, [pc, #96]	; (20002528 <_Z12VgaBufRenderPmS_Phi+0x26c>)
200024c8:	468c      	mov	ip, r1
200024ca:	2103      	movs	r1, #3
200024cc:	4463      	add	r3, ip
200024ce:	438b      	bics	r3, r1
200024d0:	4916      	ldr	r1, [pc, #88]	; (2000252c <_Z12VgaBufRenderPmS_Phi+0x270>)
200024d2:	1859      	adds	r1, r3, r1
					w += x;	// decrease W
200024d4:	1852      	adds	r2, r2, r1
					x = -x; // start offset of X
200024d6:	2180      	movs	r1, #128	; 0x80
200024d8:	0149      	lsls	r1, r1, #5
200024da:	1ac9      	subs	r1, r1, r3
200024dc:	e77e      	b.n	200023dc <_Z12VgaBufRenderPmS_Phi+0x120>
					*cbuf2++ = w/4;
200024de:	464b      	mov	r3, r9
200024e0:	1092      	asrs	r2, r2, #2
200024e2:	609a      	str	r2, [r3, #8]
					*cbuf2++ = (u32)&dbuf2[x];
200024e4:	2310      	movs	r3, #16
200024e6:	9801      	ldr	r0, [sp, #4]
200024e8:	444b      	add	r3, r9
200024ea:	4684      	mov	ip, r0
200024ec:	9302      	str	r3, [sp, #8]
200024ee:	464b      	mov	r3, r9
200024f0:	4461      	add	r1, ip
200024f2:	60d9      	str	r1, [r3, #12]
					RenderPersp2(dbuf2, y, s);
200024f4:	002a      	movs	r2, r5
200024f6:	9903      	ldr	r1, [sp, #12]
200024f8:	f7fe fe74 	bl	200011e4 <RenderPersp2>
200024fc:	e749      	b.n	20002392 <_Z12VgaBufRenderPmS_Phi+0xd6>
200024fe:	46c0      	nop			; (mov r8, r8)
20002500:	20021884 	.word	0x20021884
20002504:	2000479c 	.word	0x2000479c
20002508:	20021880 	.word	0x20021880
2000250c:	200027b0 	.word	0x200027b0
20002510:	200027c0 	.word	0x200027c0
20002514:	20004750 	.word	0x20004750
20002518:	20020124 	.word	0x20020124
2000251c:	2002014c 	.word	0x2002014c
20002520:	101aecf4 	.word	0x101aecf4
20002524:	200027bc 	.word	0x200027bc
20002528:	00001002 	.word	0x00001002
2000252c:	fffff000 	.word	0xfffff000

20002530 <VgaLine>:
{
20002530:	b570      	push	{r4, r5, r6, lr}
	int bufinx = VgaBufProcess();
20002532:	f7ff fd9f 	bl	20002074 <_Z13VgaBufProcessv>
	if (bufinx == 0)
20002536:	2800      	cmp	r0, #0
20002538:	d013      	beq.n	20002562 <VgaLine+0x32>
		cbuf = CtrlBuf2;
2000253a:	4838      	ldr	r0, [pc, #224]	; (2000261c <VgaLine+0xec>)
		dbuf = LineBuf2;
2000253c:	4a38      	ldr	r2, [pc, #224]	; (20002620 <VgaLine+0xf0>)
	CtrlBufNext[0] = cbuf;
2000253e:	4b39      	ldr	r3, [pc, #228]	; (20002624 <VgaLine+0xf4>)
	if (line > CurVmode.vtot) line = 1;
20002540:	4d39      	ldr	r5, [pc, #228]	; (20002628 <VgaLine+0xf8>)
	CtrlBufNext[0] = cbuf;
20002542:	6018      	str	r0, [r3, #0]
	int line = ScanLine;	// current scanline
20002544:	4b39      	ldr	r3, [pc, #228]	; (2000262c <VgaLine+0xfc>)
	if (line > CurVmode.vtot) line = 1;
20002546:	8da9      	ldrh	r1, [r5, #44]	; 0x2c
	int line = ScanLine;	// current scanline
20002548:	681b      	ldr	r3, [r3, #0]
	line++; // next line to render
2000254a:	3301      	adds	r3, #1
	if (line > CurVmode.vtot) line = 1;
2000254c:	4299      	cmp	r1, r3
2000254e:	da00      	bge.n	20002552 <VgaLine+0x22>
20002550:	2301      	movs	r3, #1
	u8 linetype = ScanlineType[line];
20002552:	4937      	ldr	r1, [pc, #220]	; (20002630 <VgaLine+0x100>)
	switch (linetype)
20002554:	5ccc      	ldrb	r4, [r1, r3]
20002556:	2c0a      	cmp	r4, #10
20002558:	d85e      	bhi.n	20002618 <VgaLine+0xe8>
2000255a:	4936      	ldr	r1, [pc, #216]	; (20002634 <VgaLine+0x104>)
2000255c:	00a4      	lsls	r4, r4, #2
2000255e:	5909      	ldr	r1, [r1, r4]
20002560:	468f      	mov	pc, r1
		cbuf = CtrlBuf1;
20002562:	4835      	ldr	r0, [pc, #212]	; (20002638 <VgaLine+0x108>)
		dbuf = LineBuf1;
20002564:	4a35      	ldr	r2, [pc, #212]	; (2000263c <VgaLine+0x10c>)
20002566:	e7ea      	b.n	2000253e <VgaLine+0xe>
		y0 = line - CurVmode.vfirst1;
20002568:	2140      	movs	r1, #64	; 0x40
		y0 = line - CurVmode.vfirst2;
2000256a:	5a69      	ldrh	r1, [r5, r1]
2000256c:	1a5b      	subs	r3, r3, r1
		if (CurVmode.dbly) y0 >>= 1;
2000256e:	2155      	movs	r1, #85	; 0x55
20002570:	5c69      	ldrb	r1, [r5, r1]
20002572:	2900      	cmp	r1, #0
20002574:	d000      	beq.n	20002578 <VgaLine+0x48>
20002576:	105b      	asrs	r3, r3, #1
		y0 = (y0 << 1) + 1;
20002578:	005b      	lsls	r3, r3, #1
2000257a:	3301      	adds	r3, #1
		cbuf = VgaBufRender(cbuf, cbuf0, dbuf, y0);
2000257c:	0001      	movs	r1, r0
2000257e:	f7ff fe9d 	bl	200022bc <_Z12VgaBufRenderPmS_Phi>
20002582:	0003      	movs	r3, r0
	*cbuf++ = 0; // end mark
20002584:	2200      	movs	r2, #0
	hw_divider_restore_state(&DividerState);
20002586:	482e      	ldr	r0, [pc, #184]	; (20002640 <VgaLine+0x110>)
	*cbuf++ = 0; // end mark
20002588:	601a      	str	r2, [r3, #0]
	*cbuf++ = 0; // end mark
2000258a:	605a      	str	r2, [r3, #4]
	hw_divider_restore_state(&DividerState);
2000258c:	f000 f888 	bl	200026a0 <__hw_divider_restore_state_veneer>
}
20002590:	bd70      	pop	{r4, r5, r6, pc}
		y0 = line - CurVmode.vfirst2;
20002592:	214e      	movs	r1, #78	; 0x4e
20002594:	e7e9      	b.n	2000256a <VgaLine+0x3a>
		*cbuf++ = 2; // send 2x u32
20002596:	2302      	movs	r3, #2
		*cbuf++ = 4;	// send 4x u32
20002598:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)&LineBufSync[0]; // half + half
2000259a:	0003      	movs	r3, r0
2000259c:	4a29      	ldr	r2, [pc, #164]	; (20002644 <VgaLine+0x114>)
2000259e:	3308      	adds	r3, #8
200025a0:	6042      	str	r2, [r0, #4]
		break;
200025a2:	e7ef      	b.n	20002584 <VgaLine+0x54>
		*cbuf++ = 4;	// send 4x u32
200025a4:	2304      	movs	r3, #4
200025a6:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)&LineBufSync[4]; // VSYNC
200025a8:	0003      	movs	r3, r0
200025aa:	4a26      	ldr	r2, [pc, #152]	; (20002644 <VgaLine+0x114>)
200025ac:	3308      	adds	r3, #8
200025ae:	3210      	adds	r2, #16
200025b0:	6042      	str	r2, [r0, #4]
		break;
200025b2:	e7e7      	b.n	20002584 <VgaLine+0x54>
		*cbuf++ = 4;	// send 4x u32
200025b4:	2304      	movs	r3, #4
200025b6:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)&LineBufSync[6]; // VSYNC + half
200025b8:	0003      	movs	r3, r0
200025ba:	4a22      	ldr	r2, [pc, #136]	; (20002644 <VgaLine+0x114>)
200025bc:	3308      	adds	r3, #8
200025be:	3218      	adds	r2, #24
200025c0:	6042      	str	r2, [r0, #4]
		break;
200025c2:	e7df      	b.n	20002584 <VgaLine+0x54>
		*cbuf++ = 4;	// send 4x u32
200025c4:	2304      	movs	r3, #4
200025c6:	e7e7      	b.n	20002598 <VgaLine+0x68>
		*cbuf++ = 4;	// send 4x u32
200025c8:	2304      	movs	r3, #4
200025ca:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)&LineBufSync[2]; // half + VSYNC
200025cc:	0003      	movs	r3, r0
200025ce:	4a1d      	ldr	r2, [pc, #116]	; (20002644 <VgaLine+0x114>)
200025d0:	3308      	adds	r3, #8
200025d2:	3208      	adds	r2, #8
200025d4:	6042      	str	r2, [r0, #4]
		break;
200025d6:	e7d5      	b.n	20002584 <VgaLine+0x54>
		*cbuf++ = 2; // send 2x u32
200025d8:	2302      	movs	r3, #2
200025da:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)LineBufDark; // dark
200025dc:	0003      	movs	r3, r0
200025de:	4a1a      	ldr	r2, [pc, #104]	; (20002648 <VgaLine+0x118>)
200025e0:	3308      	adds	r3, #8
200025e2:	6042      	str	r2, [r0, #4]
		break;
200025e4:	e7ce      	b.n	20002584 <VgaLine+0x54>
		y0 = line - CurVmode.vfirst1;
200025e6:	2140      	movs	r1, #64	; 0x40
200025e8:	5a69      	ldrh	r1, [r5, r1]
200025ea:	1a5b      	subs	r3, r3, r1
		if (CurVmode.dbly) y0 >>= 1;
200025ec:	2155      	movs	r1, #85	; 0x55
200025ee:	5c69      	ldrb	r1, [r5, r1]
200025f0:	2900      	cmp	r1, #0
200025f2:	d0c3      	beq.n	2000257c <VgaLine+0x4c>
200025f4:	105b      	asrs	r3, r3, #1
		cbuf = VgaBufRender(cbuf, cbuf0, dbuf, y0);
200025f6:	e7c1      	b.n	2000257c <VgaLine+0x4c>
		y0 = line - CurVmode.vfirst1;
200025f8:	2140      	movs	r1, #64	; 0x40
		y0 = line - CurVmode.vfirst2;
200025fa:	5a69      	ldrh	r1, [r5, r1]
200025fc:	1a5b      	subs	r3, r3, r1
		if (CurVmode.dbly) y0 >>= 1;
200025fe:	2155      	movs	r1, #85	; 0x55
20002600:	5c69      	ldrb	r1, [r5, r1]
20002602:	2900      	cmp	r1, #0
20002604:	d000      	beq.n	20002608 <VgaLine+0xd8>
20002606:	105b      	asrs	r3, r3, #1
		y0 <<= 1;
20002608:	005b      	lsls	r3, r3, #1
		cbuf = VgaBufRender(cbuf, cbuf0, dbuf, y0);
2000260a:	0001      	movs	r1, r0
2000260c:	f7ff fe56 	bl	200022bc <_Z12VgaBufRenderPmS_Phi>
20002610:	0003      	movs	r3, r0
		break;
20002612:	e7b7      	b.n	20002584 <VgaLine+0x54>
		y0 = line - CurVmode.vfirst2;
20002614:	214e      	movs	r1, #78	; 0x4e
20002616:	e7f0      	b.n	200025fa <VgaLine+0xca>
	switch (linetype)
20002618:	0003      	movs	r3, r0
2000261a:	e7b3      	b.n	20002584 <VgaLine+0x54>
2000261c:	20003cf0 	.word	0x20003cf0
20002620:	20020e58 	.word	0x20020e58
20002624:	20004750 	.word	0x20004750
20002628:	2000479c 	.word	0x2000479c
2000262c:	200220d8 	.word	0x200220d8
20002630:	200220dc 	.word	0x200220dc
20002634:	101aed28 	.word	0x101aed28
20002638:	20003290 	.word	0x20003290
2000263c:	20020438 	.word	0x20020438
20002640:	200047f8 	.word	0x200047f8
20002644:	20021894 	.word	0x20021894
20002648:	20021878 	.word	0x20021878

2000264c <__aeabi_idiv0>:
2000264c:	4770      	bx	lr
2000264e:	46c0      	nop			; (mov r8, r8)

20002650 <____wrap___aeabi_lmul_veneer>:
20002650:	b401      	push	{r0}
20002652:	4802      	ldr	r0, [pc, #8]	; (2000265c <____wrap___aeabi_lmul_veneer+0xc>)
20002654:	4684      	mov	ip, r0
20002656:	bc01      	pop	{r0}
20002658:	4760      	bx	ip
2000265a:	bf00      	nop
2000265c:	100010fd 	.word	0x100010fd

20002660 <__best_effort_wfe_or_timeout_veneer>:
20002660:	b401      	push	{r0}
20002662:	4802      	ldr	r0, [pc, #8]	; (2000266c <__best_effort_wfe_or_timeout_veneer+0xc>)
20002664:	4684      	mov	ip, r0
20002666:	bc01      	pop	{r0}
20002668:	4760      	bx	ip
2000266a:	bf00      	nop
2000266c:	100048cd 	.word	0x100048cd

20002670 <__rom_func_lookup_veneer>:
20002670:	b401      	push	{r0}
20002672:	4802      	ldr	r0, [pc, #8]	; (2000267c <__rom_func_lookup_veneer+0xc>)
20002674:	4684      	mov	ip, r0
20002676:	bc01      	pop	{r0}
20002678:	4760      	bx	ip
2000267a:	bf00      	nop
2000267c:	10001131 	.word	0x10001131

20002680 <__hw_divider_save_state_veneer>:
20002680:	b401      	push	{r0}
20002682:	4802      	ldr	r0, [pc, #8]	; (2000268c <__hw_divider_save_state_veneer+0xc>)
20002684:	4684      	mov	ip, r0
20002686:	bc01      	pop	{r0}
20002688:	4760      	bx	ip
2000268a:	bf00      	nop
2000268c:	100007f9 	.word	0x100007f9

20002690 <__time_us_64_veneer>:
20002690:	b401      	push	{r0}
20002692:	4802      	ldr	r0, [pc, #8]	; (2000269c <__time_us_64_veneer+0xc>)
20002694:	4684      	mov	ip, r0
20002696:	bc01      	pop	{r0}
20002698:	4760      	bx	ip
2000269a:	bf00      	nop
2000269c:	100049e1 	.word	0x100049e1

200026a0 <__hw_divider_restore_state_veneer>:
200026a0:	b401      	push	{r0}
200026a2:	4802      	ldr	r0, [pc, #8]	; (200026ac <__hw_divider_restore_state_veneer+0xc>)
200026a4:	4684      	mov	ip, r0
200026a6:	bc01      	pop	{r0}
200026a8:	4760      	bx	ip
200026aa:	bf00      	nop
200026ac:	10000815 	.word	0x10000815

200026b0 <aeabi_bits_funcs>:
200026b0:	00003350 	.word	0x00003350
200026b4:	0000334c 	.word	0x0000334c
200026b8:	00003354 	.word	0x00003354
200026bc:	00003352 	.word	0x00003352

200026c0 <aeabi_bits_funcs_end>:
200026c0:	00000000 	.word	0x00000000
200026c4:	00010000 	.word	0x00010000
	...
200026d0:	00020000 	.word	0x00020000
	...
200026dc:	00030000 	.word	0x00030000
	...
200026e8:	00ff0000 	.word	0x00ff0000
200026ec:	00000000 	.word	0x00000000

200026f0 <irq_handler_chain_first_slot>:
200026f0:	b500      	push	{lr}
200026f2:	6848      	ldr	r0, [r1, #4]
200026f4:	3101      	adds	r1, #1
200026f6:	468e      	mov	lr, r1
200026f8:	4700      	bx	r0

200026fa <irq_handler_chain_remove_tail>:
200026fa:	4670      	mov	r0, lr
200026fc:	3809      	subs	r0, #9
200026fe:	4901      	ldr	r1, [pc, #4]	; (20002704 <irq_handler_chain_remove_tail+0xa>)
20002700:	4788      	blx	r1
20002702:	bd00      	pop	{pc}
20002704:	10001b0d 	.word	0x10001b0d

20002708 <aeabi_mem_funcs>:
20002708:	0000534d 	.word	0x0000534d
2000270c:	0000434d 	.word	0x0000434d
20002710:	00003453 	.word	0x00003453
20002714:	00003443 	.word	0x00003443

20002718 <stdio_usb>:
20002718:	10003e4d 00000000 10003de5 00000000     M>.......=......
20002728:	00000100                                ....

2000272c <striped_spin_lock_num>:
2000272c:	00000010                                ....

20002730 <_usbd_qdef>:
20002730:	20023284 000c0010 00000000 00000000     .2. ............
	...

20002750 <ep_dir_string>:
20002750:	10009208 1000920c                       ........

20002758 <PageText>:
20002758:	101ad5d4 101ad65c 101ad7ac 101ad894     ....\...........
20002768:	101ad95c 101ada0c 101adb10 101adca4     \...............
20002778:	101ade30 101adf44 101ae070 101ae1e4     0...D...p.......
20002788:	101ae284 101ae380 101ae52c 101ae69c     ........,.......
20002798:	101ae7e8 101ae888 101ae974 101aea24     ........t...$...
200027a8:	101aeb08 101aeb8c                       ........

200027b0 <CtrlBufSize>:
200027b0:	000000a6 000000a6 000000a6 000000a6     ................

200027c0 <LineBufSize>:
200027c0:	00000288 00000288 00000288 00000288     ................

200027d0 <LayerNumPin>:
200027d0:	08080808                                ....

200027d4 <DefPal16>:
200027d4:	16140200 b6a8a2a0 5f5d4b49 fffdebe9     ........IK]_....

200027e4 <pScreen>:
200027e4:	20022398                                .#. 

200027e8 <_impure_ptr>:
200027e8:	200027f0 00000000                       .'. ....

200027f0 <impure_data>:
200027f0:	00000000 20002adc 20002b44 20002bac     .....*. D+. .+. 
	...
20002898:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200028a8:	0005deec 0000000b 00000000 00000000     ................
	...

20002c18 <__malloc_av_>:
	...
20002c20:	20002c18 20002c18 20002c20 20002c20     .,. .,.  ,.  ,. 
20002c30:	20002c28 20002c28 20002c30 20002c30     (,. (,. 0,. 0,. 
20002c40:	20002c38 20002c38 20002c40 20002c40     8,. 8,. @,. @,. 
20002c50:	20002c48 20002c48 20002c50 20002c50     H,. H,. P,. P,. 
20002c60:	20002c58 20002c58 20002c60 20002c60     X,. X,. `,. `,. 
20002c70:	20002c68 20002c68 20002c70 20002c70     h,. h,. p,. p,. 
20002c80:	20002c78 20002c78 20002c80 20002c80     x,. x,. .,. .,. 
20002c90:	20002c88 20002c88 20002c90 20002c90     .,. .,. .,. .,. 
20002ca0:	20002c98 20002c98 20002ca0 20002ca0     .,. .,. .,. .,. 
20002cb0:	20002ca8 20002ca8 20002cb0 20002cb0     .,. .,. .,. .,. 
20002cc0:	20002cb8 20002cb8 20002cc0 20002cc0     .,. .,. .,. .,. 
20002cd0:	20002cc8 20002cc8 20002cd0 20002cd0     .,. .,. .,. .,. 
20002ce0:	20002cd8 20002cd8 20002ce0 20002ce0     .,. .,. .,. .,. 
20002cf0:	20002ce8 20002ce8 20002cf0 20002cf0     .,. .,. .,. .,. 
20002d00:	20002cf8 20002cf8 20002d00 20002d00     .,. .,. .-. .-. 
20002d10:	20002d08 20002d08 20002d10 20002d10     .-. .-. .-. .-. 
20002d20:	20002d18 20002d18 20002d20 20002d20     .-. .-.  -.  -. 
20002d30:	20002d28 20002d28 20002d30 20002d30     (-. (-. 0-. 0-. 
20002d40:	20002d38 20002d38 20002d40 20002d40     8-. 8-. @-. @-. 
20002d50:	20002d48 20002d48 20002d50 20002d50     H-. H-. P-. P-. 
20002d60:	20002d58 20002d58 20002d60 20002d60     X-. X-. `-. `-. 
20002d70:	20002d68 20002d68 20002d70 20002d70     h-. h-. p-. p-. 
20002d80:	20002d78 20002d78 20002d80 20002d80     x-. x-. .-. .-. 
20002d90:	20002d88 20002d88 20002d90 20002d90     .-. .-. .-. .-. 
20002da0:	20002d98 20002d98 20002da0 20002da0     .-. .-. .-. .-. 
20002db0:	20002da8 20002da8 20002db0 20002db0     .-. .-. .-. .-. 
20002dc0:	20002db8 20002db8 20002dc0 20002dc0     .-. .-. .-. .-. 
20002dd0:	20002dc8 20002dc8 20002dd0 20002dd0     .-. .-. .-. .-. 
20002de0:	20002dd8 20002dd8 20002de0 20002de0     .-. .-. .-. .-. 
20002df0:	20002de8 20002de8 20002df0 20002df0     .-. .-. .-. .-. 
20002e00:	20002df8 20002df8 20002e00 20002e00     .-. .-. ... ... 
20002e10:	20002e08 20002e08 20002e10 20002e10     ... ... ... ... 
20002e20:	20002e18 20002e18 20002e20 20002e20     ... ...  ..  .. 
20002e30:	20002e28 20002e28 20002e30 20002e30     (.. (.. 0.. 0.. 
20002e40:	20002e38 20002e38 20002e40 20002e40     8.. 8.. @.. @.. 
20002e50:	20002e48 20002e48 20002e50 20002e50     H.. H.. P.. P.. 
20002e60:	20002e58 20002e58 20002e60 20002e60     X.. X.. `.. `.. 
20002e70:	20002e68 20002e68 20002e70 20002e70     h.. h.. p.. p.. 
20002e80:	20002e78 20002e78 20002e80 20002e80     x.. x.. ... ... 
20002e90:	20002e88 20002e88 20002e90 20002e90     ... ... ... ... 
20002ea0:	20002e98 20002e98 20002ea0 20002ea0     ... ... ... ... 
20002eb0:	20002ea8 20002ea8 20002eb0 20002eb0     ... ... ... ... 
20002ec0:	20002eb8 20002eb8 20002ec0 20002ec0     ... ... ... ... 
20002ed0:	20002ec8 20002ec8 20002ed0 20002ed0     ... ... ... ... 
20002ee0:	20002ed8 20002ed8 20002ee0 20002ee0     ... ... ... ... 
20002ef0:	20002ee8 20002ee8 20002ef0 20002ef0     ... ... ... ... 
20002f00:	20002ef8 20002ef8 20002f00 20002f00     ... ... ./. ./. 
20002f10:	20002f08 20002f08 20002f10 20002f10     ./. ./. ./. ./. 
20002f20:	20002f18 20002f18 20002f20 20002f20     ./. ./.  /.  /. 
20002f30:	20002f28 20002f28 20002f30 20002f30     (/. (/. 0/. 0/. 
20002f40:	20002f38 20002f38 20002f40 20002f40     8/. 8/. @/. @/. 
20002f50:	20002f48 20002f48 20002f50 20002f50     H/. H/. P/. P/. 
20002f60:	20002f58 20002f58 20002f60 20002f60     X/. X/. `/. `/. 
20002f70:	20002f68 20002f68 20002f70 20002f70     h/. h/. p/. p/. 
20002f80:	20002f78 20002f78 20002f80 20002f80     x/. x/. ./. ./. 
20002f90:	20002f88 20002f88 20002f90 20002f90     ./. ./. ./. ./. 
20002fa0:	20002f98 20002f98 20002fa0 20002fa0     ./. ./. ./. ./. 
20002fb0:	20002fa8 20002fa8 20002fb0 20002fb0     ./. ./. ./. ./. 
20002fc0:	20002fb8 20002fb8 20002fc0 20002fc0     ./. ./. ./. ./. 
20002fd0:	20002fc8 20002fc8 20002fd0 20002fd0     ./. ./. ./. ./. 
20002fe0:	20002fd8 20002fd8 20002fe0 20002fe0     ./. ./. ./. ./. 
20002ff0:	20002fe8 20002fe8 20002ff0 20002ff0     ./. ./. ./. ./. 
20003000:	20002ff8 20002ff8 20003000 20003000     ./. ./. .0. .0. 
20003010:	20003008 20003008 20003010 20003010     .0. .0. .0. .0. 

20003020 <__malloc_sbrk_base>:
20003020:	ffffffff                                ....

20003024 <__malloc_trim_threshold>:
20003024:	00020000                                ....

20003028 <print_mutex>:
	...

20003030 <__mutex_array_end>:
20003030:	100010d5 	.word	0x100010d5
20003034:	1000030d 	.word	0x1000030d
20003038:	100016a9 	.word	0x100016a9
2000303c:	10001769 	.word	0x10001769

20003040 <__frame_dummy_init_array_entry>:
20003040:	100002ed 10004ba1                       .....K..
