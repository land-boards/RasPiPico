
build/program.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <__boot2_start__>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592102 	.word	0x61592102
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	7a4eb274 	.word	0x7a4eb274

Disassembly of section .text:

10000100 <__logical_binary_start>:
10000100:	20042000 	.word	0x20042000
10000104:	100001f7 	.word	0x100001f7
10000108:	100001c3 	.word	0x100001c3
1000010c:	100001c5 	.word	0x100001c5
10000110:	100001c1 	.word	0x100001c1
10000114:	100001c1 	.word	0x100001c1
10000118:	100001c1 	.word	0x100001c1
1000011c:	100001c1 	.word	0x100001c1
10000120:	100001c1 	.word	0x100001c1
10000124:	100001c1 	.word	0x100001c1
10000128:	100001c1 	.word	0x100001c1
1000012c:	100001c7 	.word	0x100001c7
10000130:	100001c1 	.word	0x100001c1
10000134:	100001c1 	.word	0x100001c1
10000138:	100001c9 	.word	0x100001c9
1000013c:	100001cb 	.word	0x100001cb
10000140:	100001cd 	.word	0x100001cd
10000144:	100001cd 	.word	0x100001cd
10000148:	100001cd 	.word	0x100001cd
1000014c:	100001cd 	.word	0x100001cd
10000150:	100001cd 	.word	0x100001cd
10000154:	100001cd 	.word	0x100001cd
10000158:	100001cd 	.word	0x100001cd
1000015c:	100001cd 	.word	0x100001cd
10000160:	100001cd 	.word	0x100001cd
10000164:	100001cd 	.word	0x100001cd
10000168:	100001cd 	.word	0x100001cd
1000016c:	100001cd 	.word	0x100001cd
10000170:	100001cd 	.word	0x100001cd
10000174:	100001cd 	.word	0x100001cd
10000178:	100001cd 	.word	0x100001cd
1000017c:	100001cd 	.word	0x100001cd
10000180:	100001cd 	.word	0x100001cd
10000184:	100001cd 	.word	0x100001cd
10000188:	100001cd 	.word	0x100001cd
1000018c:	100001cd 	.word	0x100001cd
10000190:	100001cd 	.word	0x100001cd
10000194:	100001cd 	.word	0x100001cd
10000198:	100001cd 	.word	0x100001cd
1000019c:	100001cd 	.word	0x100001cd
100001a0:	100001cd 	.word	0x100001cd
100001a4:	100001cd 	.word	0x100001cd
100001a8:	100001cd 	.word	0x100001cd
100001ac:	100001cd 	.word	0x100001cd
100001b0:	100001cd 	.word	0x100001cd
100001b4:	100001cd 	.word	0x100001cd
100001b8:	100001cd 	.word	0x100001cd
100001bc:	100001cd 	.word	0x100001cd

100001c0 <isr_invalid>:
100001c0:	be00      	bkpt	0x0000

100001c2 <isr_nmi>:
100001c2:	be00      	bkpt	0x0000

100001c4 <isr_hardfault>:
100001c4:	be00      	bkpt	0x0000

100001c6 <isr_svcall>:
100001c6:	be00      	bkpt	0x0000

100001c8 <isr_pendsv>:
100001c8:	be00      	bkpt	0x0000

100001ca <isr_systick>:
100001ca:	be00      	bkpt	0x0000

100001cc <__unhandled_user_irq>:
100001cc:	f000 f84b 	bl	10000266 <__get_current_exception>
100001d0:	3810      	subs	r0, #16

100001d2 <unhandled_user_irq_num_in_r0>:
100001d2:	be00      	bkpt	0x0000

100001d4 <binary_info_header>:
100001d4:	7188ebf2 	.word	0x7188ebf2
100001d8:	101ad730 	.word	0x101ad730
100001dc:	101ad750 	.word	0x101ad750
100001e0:	10000234 	.word	0x10000234
100001e4:	e71aa390 	.word	0xe71aa390

100001e8 <_entry_point>:
100001e8:	2000      	movs	r0, #0
100001ea:	4921      	ldr	r1, [pc, #132]	; (10000270 <__get_current_exception+0xa>)
100001ec:	6008      	str	r0, [r1, #0]
100001ee:	c806      	ldmia	r0!, {r1, r2}
100001f0:	f381 8808 	msr	MSP, r1
100001f4:	4710      	bx	r2

100001f6 <_reset_handler>:
100001f6:	481f      	ldr	r0, [pc, #124]	; (10000274 <__get_current_exception+0xe>)
100001f8:	6800      	ldr	r0, [r0, #0]
100001fa:	2800      	cmp	r0, #0
100001fc:	d12f      	bne.n	1000025e <hold_non_core0_in_bootrom>
100001fe:	a40d      	add	r4, pc, #52	; (adr r4, 10000234 <data_cpy_table>)
10000200:	cc0e      	ldmia	r4!, {r1, r2, r3}
10000202:	2900      	cmp	r1, #0
10000204:	d002      	beq.n	1000020c <_reset_handler+0x16>
10000206:	f000 f812 	bl	1000022e <data_cpy>
1000020a:	e7f9      	b.n	10000200 <_reset_handler+0xa>
1000020c:	491a      	ldr	r1, [pc, #104]	; (10000278 <__get_current_exception+0x12>)
1000020e:	4a1b      	ldr	r2, [pc, #108]	; (1000027c <__get_current_exception+0x16>)
10000210:	2000      	movs	r0, #0
10000212:	e000      	b.n	10000216 <bss_fill_test>

10000214 <bss_fill_loop>:
10000214:	c101      	stmia	r1!, {r0}

10000216 <bss_fill_test>:
10000216:	4291      	cmp	r1, r2
10000218:	d1fc      	bne.n	10000214 <bss_fill_loop>

1000021a <platform_entry>:
1000021a:	4919      	ldr	r1, [pc, #100]	; (10000280 <__get_current_exception+0x1a>)
1000021c:	4788      	blx	r1
1000021e:	4919      	ldr	r1, [pc, #100]	; (10000284 <__get_current_exception+0x1e>)
10000220:	4788      	blx	r1
10000222:	4919      	ldr	r1, [pc, #100]	; (10000288 <__get_current_exception+0x22>)
10000224:	4788      	blx	r1
10000226:	be00      	bkpt	0x0000
10000228:	e7fd      	b.n	10000226 <platform_entry+0xc>

1000022a <data_cpy_loop>:
1000022a:	c901      	ldmia	r1!, {r0}
1000022c:	c201      	stmia	r2!, {r0}

1000022e <data_cpy>:
1000022e:	429a      	cmp	r2, r3
10000230:	d3fb      	bcc.n	1000022a <data_cpy_loop>
10000232:	4770      	bx	lr

10000234 <data_cpy_table>:
10000234:	101ad750 	.word	0x101ad750
10000238:	200000c0 	.word	0x200000c0
1000023c:	20003048 	.word	0x20003048
10000240:	101b06d8 	.word	0x101b06d8
10000244:	20040000 	.word	0x20040000
10000248:	20040000 	.word	0x20040000
1000024c:	101b06d8 	.word	0x101b06d8
10000250:	20041000 	.word	0x20041000
10000254:	20041000 	.word	0x20041000
10000258:	00000000 	.word	0x00000000
1000025c:	4770      	bx	lr

1000025e <hold_non_core0_in_bootrom>:
1000025e:	480b      	ldr	r0, [pc, #44]	; (1000028c <__get_current_exception+0x26>)
10000260:	f000 fb8e 	bl	10000980 <rom_func_lookup>
10000264:	4700      	bx	r0

10000266 <__get_current_exception>:
10000266:	f3ef 8005 	mrs	r0, IPSR
1000026a:	b2c0      	uxtb	r0, r0
1000026c:	4770      	bx	lr
1000026e:	0000      	.short	0x0000
10000270:	e000ed08 	.word	0xe000ed08
10000274:	d0000000 	.word	0xd0000000
10000278:	20003048 	.word	0x20003048
1000027c:	20023b8c 	.word	0x20023b8c
10000280:	10001bd1 	.word	0x10001bd1
10000284:	10004dbd 	.word	0x10004dbd
10000288:	10001cf1 	.word	0x10001cf1
1000028c:	00005657 	.word	0x00005657

10000290 <__bi_46>:
10000290:	50520006 5360b3ab 10006e28              ..RP..`S(n..

1000029c <__bi_34>:
1000029c:	50520006 02031c86 10006e30              ..RP....0n..

100002a8 <__bi_26>:
100002a8:	50520006 9da22254 10006e38              ..RPT"..8n..

100002b4 <__bi_18>:
100002b4:	50520005 68f465de 101b06d8              ..RP.e.h....

100002c0 <_init>:
100002c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100002c2:	46c0      	nop			; (mov r8, r8)

100002c4 <__do_global_dtors_aux>:
100002c4:	b510      	push	{r4, lr}
100002c6:	4c06      	ldr	r4, [pc, #24]	; (100002e0 <__do_global_dtors_aux+0x1c>)
100002c8:	7823      	ldrb	r3, [r4, #0]
100002ca:	2b00      	cmp	r3, #0
100002cc:	d107      	bne.n	100002de <__do_global_dtors_aux+0x1a>
100002ce:	4b05      	ldr	r3, [pc, #20]	; (100002e4 <__do_global_dtors_aux+0x20>)
100002d0:	2b00      	cmp	r3, #0
100002d2:	d002      	beq.n	100002da <__do_global_dtors_aux+0x16>
100002d4:	4804      	ldr	r0, [pc, #16]	; (100002e8 <__do_global_dtors_aux+0x24>)
100002d6:	e000      	b.n	100002da <__do_global_dtors_aux+0x16>
100002d8:	bf00      	nop
100002da:	2301      	movs	r3, #1
100002dc:	7023      	strb	r3, [r4, #0]
100002de:	bd10      	pop	{r4, pc}
100002e0:	20003250 	.word	0x20003250
100002e4:	00000000 	.word	0x00000000
100002e8:	10006df0 	.word	0x10006df0

100002ec <frame_dummy>:
100002ec:	4b04      	ldr	r3, [pc, #16]	; (10000300 <frame_dummy+0x14>)
100002ee:	b510      	push	{r4, lr}
100002f0:	2b00      	cmp	r3, #0
100002f2:	d003      	beq.n	100002fc <frame_dummy+0x10>
100002f4:	4903      	ldr	r1, [pc, #12]	; (10000304 <frame_dummy+0x18>)
100002f6:	4804      	ldr	r0, [pc, #16]	; (10000308 <frame_dummy+0x1c>)
100002f8:	e000      	b.n	100002fc <frame_dummy+0x10>
100002fa:	bf00      	nop
100002fc:	bd10      	pop	{r4, pc}
100002fe:	46c0      	nop			; (mov r8, r8)
10000300:	00000000 	.word	0x00000000
10000304:	20003254 	.word	0x20003254
10000308:	10006df0 	.word	0x10006df0

1000030c <__aeabi_bits_init>:
1000030c:	4801      	ldr	r0, [pc, #4]	; (10000314 <__aeabi_bits_init+0x8>)
1000030e:	2104      	movs	r1, #4
10000310:	4b01      	ldr	r3, [pc, #4]	; (10000318 <__aeabi_bits_init+0xc>)
10000312:	4718      	bx	r3
10000314:	200026b0 	.word	0x200026b0
10000318:	100009a1 	.word	0x100009a1

1000031c <__wrap___aeabi_uidiv>:
1000031c:	4a13      	ldr	r2, [pc, #76]	; (1000036c <divmod_u32u32_savestate+0x20>)
1000031e:	6f93      	ldr	r3, [r2, #120]	; 0x78
10000320:	089b      	lsrs	r3, r3, #2
10000322:	d213      	bcs.n	1000034c <divmod_u32u32_savestate>

10000324 <divmod_u32u32_unsafe>:
10000324:	6610      	str	r0, [r2, #96]	; 0x60
10000326:	6651      	str	r1, [r2, #100]	; 0x64
10000328:	2900      	cmp	r1, #0
1000032a:	d005      	beq.n	10000338 <divmod_u32u32_unsafe+0x14>
1000032c:	e7ff      	b.n	1000032e <divmod_u32u32_unsafe+0xa>
1000032e:	e7ff      	b.n	10000330 <divmod_u32u32_unsafe+0xc>
10000330:	e7ff      	b.n	10000332 <divmod_u32u32_unsafe+0xe>
10000332:	6f51      	ldr	r1, [r2, #116]	; 0x74
10000334:	6f10      	ldr	r0, [r2, #112]	; 0x70
10000336:	4770      	bx	lr
10000338:	b504      	push	{r2, lr}
1000033a:	2800      	cmp	r0, #0
1000033c:	d001      	beq.n	10000342 <divmod_u32u32_unsafe+0x1e>
1000033e:	2000      	movs	r0, #0
10000340:	43c0      	mvns	r0, r0
10000342:	f006 fd2d 	bl	10006da0 <____aeabi_idiv0_veneer>
10000346:	2100      	movs	r1, #0
10000348:	bd04      	pop	{r2, pc}
1000034a:	46c0      	nop			; (mov r8, r8)

1000034c <divmod_u32u32_savestate>:
1000034c:	6f93      	ldr	r3, [r2, #120]	; 0x78
1000034e:	085b      	lsrs	r3, r3, #1
10000350:	d3fd      	bcc.n	1000034e <divmod_u32u32_savestate+0x2>
10000352:	b5f0      	push	{r4, r5, r6, r7, lr}
10000354:	6e94      	ldr	r4, [r2, #104]	; 0x68
10000356:	6ed5      	ldr	r5, [r2, #108]	; 0x6c
10000358:	6f57      	ldr	r7, [r2, #116]	; 0x74
1000035a:	6f16      	ldr	r6, [r2, #112]	; 0x70
1000035c:	f7ff ffe2 	bl	10000324 <divmod_u32u32_unsafe>
10000360:	6694      	str	r4, [r2, #104]	; 0x68
10000362:	66d5      	str	r5, [r2, #108]	; 0x6c
10000364:	6757      	str	r7, [r2, #116]	; 0x74
10000366:	6716      	str	r6, [r2, #112]	; 0x70
10000368:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000036a:	0000      	.short	0x0000
1000036c:	d0000000 	.word	0xd0000000

10000370 <__wrap___aeabi_ldivmod>:
10000370:	4694      	mov	ip, r2
10000372:	4a4e      	ldr	r2, [pc, #312]	; (100004ac <udiv0+0x1a>)
10000374:	6f92      	ldr	r2, [r2, #120]	; 0x78
10000376:	0892      	lsrs	r2, r2, #2
10000378:	4662      	mov	r2, ip
1000037a:	d201      	bcs.n	10000380 <divmod_s64s64_savestate>
1000037c:	e030      	b.n	100003e0 <divmod_s64s64_unsafe>
1000037e:	46c0      	nop			; (mov r8, r8)

10000380 <divmod_s64s64_savestate>:
10000380:	b5f0      	push	{r4, r5, r6, r7, lr}
10000382:	4e4a      	ldr	r6, [pc, #296]	; (100004ac <udiv0+0x1a>)
10000384:	6fb5      	ldr	r5, [r6, #120]	; 0x78
10000386:	086d      	lsrs	r5, r5, #1
10000388:	d3fc      	bcc.n	10000384 <divmod_s64s64_savestate+0x4>
1000038a:	6e34      	ldr	r4, [r6, #96]	; 0x60
1000038c:	6e75      	ldr	r5, [r6, #100]	; 0x64
1000038e:	6f77      	ldr	r7, [r6, #116]	; 0x74
10000390:	6f36      	ldr	r6, [r6, #112]	; 0x70
10000392:	f000 f825 	bl	100003e0 <divmod_s64s64_unsafe>
10000396:	4694      	mov	ip, r2
10000398:	4a44      	ldr	r2, [pc, #272]	; (100004ac <udiv0+0x1a>)
1000039a:	6614      	str	r4, [r2, #96]	; 0x60
1000039c:	6655      	str	r5, [r2, #100]	; 0x64
1000039e:	6757      	str	r7, [r2, #116]	; 0x74
100003a0:	6716      	str	r6, [r2, #112]	; 0x70
100003a2:	4662      	mov	r2, ip
100003a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100003a6:	46c0      	nop			; (mov r8, r8)

100003a8 <__wrap___aeabi_uldivmod>:
100003a8:	4694      	mov	ip, r2
100003aa:	4a40      	ldr	r2, [pc, #256]	; (100004ac <udiv0+0x1a>)
100003ac:	6f92      	ldr	r2, [r2, #120]	; 0x78
100003ae:	0892      	lsrs	r2, r2, #2
100003b0:	4662      	mov	r2, ip
100003b2:	d201      	bcs.n	100003b8 <divmod_u64u64_savestate>
100003b4:	e058      	b.n	10000468 <divmod_u64u64_unsafe>
100003b6:	46c0      	nop			; (mov r8, r8)

100003b8 <divmod_u64u64_savestate>:
100003b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100003ba:	4e3c      	ldr	r6, [pc, #240]	; (100004ac <udiv0+0x1a>)
100003bc:	6fb5      	ldr	r5, [r6, #120]	; 0x78
100003be:	086d      	lsrs	r5, r5, #1
100003c0:	d3fc      	bcc.n	100003bc <divmod_u64u64_savestate+0x4>
100003c2:	6e34      	ldr	r4, [r6, #96]	; 0x60
100003c4:	6e75      	ldr	r5, [r6, #100]	; 0x64
100003c6:	6f77      	ldr	r7, [r6, #116]	; 0x74
100003c8:	6f36      	ldr	r6, [r6, #112]	; 0x70
100003ca:	f000 f84d 	bl	10000468 <divmod_u64u64_unsafe>
100003ce:	4694      	mov	ip, r2
100003d0:	4a36      	ldr	r2, [pc, #216]	; (100004ac <udiv0+0x1a>)
100003d2:	6614      	str	r4, [r2, #96]	; 0x60
100003d4:	6655      	str	r5, [r2, #100]	; 0x64
100003d6:	6757      	str	r7, [r2, #116]	; 0x74
100003d8:	6716      	str	r6, [r2, #112]	; 0x70
100003da:	4662      	mov	r2, ip
100003dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100003de:	46c0      	nop			; (mov r8, r8)

100003e0 <divmod_s64s64_unsafe>:
100003e0:	2b00      	cmp	r3, #0
100003e2:	db24      	blt.n	1000042e <l41_1+0x26>
100003e4:	d011      	beq.n	1000040a <l41_1+0x2>
100003e6:	2900      	cmp	r1, #0
100003e8:	da3e      	bge.n	10000468 <divmod_u64u64_unsafe>
100003ea:	b500      	push	{lr}
100003ec:	43c9      	mvns	r1, r1
100003ee:	4240      	negs	r0, r0
100003f0:	d100      	bne.n	100003f4 <l39_1>
100003f2:	3101      	adds	r1, #1

100003f4 <l39_1>:
100003f4:	f000 f838 	bl	10000468 <divmod_u64u64_unsafe>
100003f8:	43c9      	mvns	r1, r1
100003fa:	4240      	negs	r0, r0
100003fc:	d100      	bne.n	10000400 <l40_1>
100003fe:	3101      	adds	r1, #1

10000400 <l40_1>:
10000400:	43db      	mvns	r3, r3
10000402:	4252      	negs	r2, r2
10000404:	d100      	bne.n	10000408 <l41_1>
10000406:	3301      	adds	r3, #1

10000408 <l41_1>:
10000408:	bd00      	pop	{pc}
1000040a:	2a00      	cmp	r2, #0
1000040c:	d1eb      	bne.n	100003e6 <divmod_s64s64_unsafe+0x6>
1000040e:	2800      	cmp	r0, #0
10000410:	d101      	bne.n	10000416 <l41_1+0xe>
10000412:	2900      	cmp	r1, #0
10000414:	d005      	beq.n	10000422 <l41_1+0x1a>
10000416:	2000      	movs	r0, #0
10000418:	0fc9      	lsrs	r1, r1, #31
1000041a:	07c9      	lsls	r1, r1, #31
1000041c:	d101      	bne.n	10000422 <l41_1+0x1a>
1000041e:	43c0      	mvns	r0, r0
10000420:	0841      	lsrs	r1, r0, #1
10000422:	b500      	push	{lr}
10000424:	f006 fcb4 	bl	10006d90 <____aeabi_ldiv0_veneer>
10000428:	2200      	movs	r2, #0
1000042a:	2300      	movs	r3, #0
1000042c:	bd00      	pop	{pc}
1000042e:	b500      	push	{lr}
10000430:	2900      	cmp	r1, #0
10000432:	db0a      	blt.n	1000044a <l43_1+0x2>
10000434:	43db      	mvns	r3, r3
10000436:	4252      	negs	r2, r2
10000438:	d100      	bne.n	1000043c <l42_1>
1000043a:	3301      	adds	r3, #1

1000043c <l42_1>:
1000043c:	f000 f814 	bl	10000468 <divmod_u64u64_unsafe>
10000440:	43c9      	mvns	r1, r1
10000442:	4240      	negs	r0, r0
10000444:	d100      	bne.n	10000448 <l43_1>
10000446:	3101      	adds	r1, #1

10000448 <l43_1>:
10000448:	bd00      	pop	{pc}
1000044a:	43c9      	mvns	r1, r1
1000044c:	4240      	negs	r0, r0
1000044e:	d100      	bne.n	10000452 <l44_1>
10000450:	3101      	adds	r1, #1

10000452 <l44_1>:
10000452:	43db      	mvns	r3, r3
10000454:	4252      	negs	r2, r2
10000456:	d100      	bne.n	1000045a <l45_1>
10000458:	3301      	adds	r3, #1

1000045a <l45_1>:
1000045a:	f000 f805 	bl	10000468 <divmod_u64u64_unsafe>
1000045e:	43db      	mvns	r3, r3
10000460:	4252      	negs	r2, r2
10000462:	d100      	bne.n	10000466 <l46_1>
10000464:	3301      	adds	r3, #1

10000466 <l46_1>:
10000466:	bd00      	pop	{pc}

10000468 <divmod_u64u64_unsafe>:
10000468:	2900      	cmp	r1, #0
1000046a:	d123      	bne.n	100004b4 <y64>
1000046c:	2b00      	cmp	r3, #0
1000046e:	d118      	bne.n	100004a2 <udiv0+0x10>
10000470:	2a00      	cmp	r2, #0
10000472:	d00c      	beq.n	1000048e <divmod_u64u64_unsafe+0x26>
10000474:	46bc      	mov	ip, r7
10000476:	4f0d      	ldr	r7, [pc, #52]	; (100004ac <udiv0+0x1a>)
10000478:	6638      	str	r0, [r7, #96]	; 0x60
1000047a:	667a      	str	r2, [r7, #100]	; 0x64
1000047c:	2100      	movs	r1, #0
1000047e:	2300      	movs	r3, #0
10000480:	e7ff      	b.n	10000482 <divmod_u64u64_unsafe+0x1a>
10000482:	e7ff      	b.n	10000484 <divmod_u64u64_unsafe+0x1c>
10000484:	e7ff      	b.n	10000486 <divmod_u64u64_unsafe+0x1e>
10000486:	6f7a      	ldr	r2, [r7, #116]	; 0x74
10000488:	6f38      	ldr	r0, [r7, #112]	; 0x70
1000048a:	4667      	mov	r7, ip
1000048c:	4770      	bx	lr
1000048e:	2800      	cmp	r0, #0
10000490:	d001      	beq.n	10000496 <udiv0+0x4>

10000492 <udiv0>:
10000492:	4807      	ldr	r0, [pc, #28]	; (100004b0 <udiv0+0x1e>)
10000494:	0001      	movs	r1, r0
10000496:	b500      	push	{lr}
10000498:	f006 fc7a 	bl	10006d90 <____aeabi_ldiv0_veneer>
1000049c:	2200      	movs	r2, #0
1000049e:	2300      	movs	r3, #0
100004a0:	bd00      	pop	{pc}
100004a2:	0002      	movs	r2, r0
100004a4:	000b      	movs	r3, r1
100004a6:	2000      	movs	r0, #0
100004a8:	2100      	movs	r1, #0
100004aa:	4770      	bx	lr
100004ac:	d0000000 	.word	0xd0000000
100004b0:	ffffffff 	.word	0xffffffff

100004b4 <y64>:
100004b4:	2b00      	cmp	r3, #0
100004b6:	d000      	beq.n	100004ba <y64+0x6>
100004b8:	e0bd      	b.n	10000636 <y64_x48>
100004ba:	0c13      	lsrs	r3, r2, #16
100004bc:	d126      	bne.n	1000050c <y64_x32>
100004be:	2a00      	cmp	r2, #0
100004c0:	d0e7      	beq.n	10000492 <udiv0>
100004c2:	b480      	push	{r7}
100004c4:	4f10      	ldr	r7, [pc, #64]	; (10000508 <y64+0x54>)
100004c6:	6639      	str	r1, [r7, #96]	; 0x60
100004c8:	667a      	str	r2, [r7, #100]	; 0x64
100004ca:	e7ff      	b.n	100004cc <y64+0x18>
100004cc:	e7ff      	b.n	100004ce <y64+0x1a>
100004ce:	b430      	push	{r4, r5}
100004d0:	0c04      	lsrs	r4, r0, #16
100004d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
100004d4:	6f39      	ldr	r1, [r7, #112]	; 0x70
100004d6:	041b      	lsls	r3, r3, #16
100004d8:	4323      	orrs	r3, r4
100004da:	663b      	str	r3, [r7, #96]	; 0x60
100004dc:	e7ff      	b.n	100004de <y64+0x2a>
100004de:	e7ff      	b.n	100004e0 <y64+0x2c>
100004e0:	e7ff      	b.n	100004e2 <y64+0x2e>
100004e2:	46c0      	nop			; (mov r8, r8)
100004e4:	b284      	uxth	r4, r0
100004e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
100004e8:	6f3d      	ldr	r5, [r7, #112]	; 0x70
100004ea:	041b      	lsls	r3, r3, #16
100004ec:	4323      	orrs	r3, r4
100004ee:	663b      	str	r3, [r7, #96]	; 0x60
100004f0:	e7ff      	b.n	100004f2 <y64+0x3e>
100004f2:	e7ff      	b.n	100004f4 <y64+0x40>
100004f4:	46c0      	nop			; (mov r8, r8)
100004f6:	2300      	movs	r3, #0
100004f8:	042c      	lsls	r4, r5, #16
100004fa:	0c2d      	lsrs	r5, r5, #16
100004fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
100004fe:	6f38      	ldr	r0, [r7, #112]	; 0x70
10000500:	1900      	adds	r0, r0, r4
10000502:	4169      	adcs	r1, r5
10000504:	bcb0      	pop	{r4, r5, r7}
10000506:	4770      	bx	lr
10000508:	d0000000 	.word	0xd0000000

1000050c <y64_x32>:
1000050c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000050e:	4694      	mov	ip, r2
10000510:	2500      	movs	r5, #0
10000512:	0e14      	lsrs	r4, r2, #24
10000514:	d101      	bne.n	1000051a <y64_x32+0xe>
10000516:	0212      	lsls	r2, r2, #8
10000518:	3508      	adds	r5, #8
1000051a:	0f14      	lsrs	r4, r2, #28
1000051c:	d101      	bne.n	10000522 <y64_x32+0x16>
1000051e:	0112      	lsls	r2, r2, #4
10000520:	3504      	adds	r5, #4
10000522:	0f94      	lsrs	r4, r2, #30
10000524:	d101      	bne.n	1000052a <y64_x32+0x1e>
10000526:	0092      	lsls	r2, r2, #2
10000528:	3502      	adds	r5, #2
1000052a:	0fd4      	lsrs	r4, r2, #31
1000052c:	d101      	bne.n	10000532 <y64_x32+0x26>
1000052e:	0052      	lsls	r2, r2, #1
10000530:	3501      	adds	r5, #1
10000532:	0bd4      	lsrs	r4, r2, #15
10000534:	3401      	adds	r4, #1
10000536:	4f25      	ldr	r7, [pc, #148]	; (100005cc <y64_x32+0xc0>)
10000538:	667c      	str	r4, [r7, #100]	; 0x64
1000053a:	4c25      	ldr	r4, [pc, #148]	; (100005d0 <y64_x32+0xc4>)
1000053c:	663c      	str	r4, [r7, #96]	; 0x60
1000053e:	0c0e      	lsrs	r6, r1, #16
10000540:	b293      	uxth	r3, r2
10000542:	e7ff      	b.n	10000544 <y64_x32+0x38>
10000544:	e7ff      	b.n	10000546 <y64_x32+0x3a>
10000546:	e7ff      	b.n	10000548 <y64_x32+0x3c>
10000548:	6f3c      	ldr	r4, [r7, #112]	; 0x70
1000054a:	4366      	muls	r6, r4
1000054c:	0c36      	lsrs	r6, r6, #16
1000054e:	0377      	lsls	r7, r6, #13
10000550:	46be      	mov	lr, r7
10000552:	4373      	muls	r3, r6
10000554:	0bdf      	lsrs	r7, r3, #15
10000556:	045b      	lsls	r3, r3, #17
10000558:	1ac0      	subs	r0, r0, r3
1000055a:	41b9      	sbcs	r1, r7
1000055c:	0c13      	lsrs	r3, r2, #16
1000055e:	4373      	muls	r3, r6
10000560:	18db      	adds	r3, r3, r3
10000562:	1ac9      	subs	r1, r1, r3
10000564:	08ce      	lsrs	r6, r1, #3
10000566:	4366      	muls	r6, r4
10000568:	0c36      	lsrs	r6, r6, #16
1000056a:	44b6      	add	lr, r6
1000056c:	b293      	uxth	r3, r2
1000056e:	4373      	muls	r3, r6
10000570:	0f1f      	lsrs	r7, r3, #28
10000572:	011b      	lsls	r3, r3, #4
10000574:	1ac0      	subs	r0, r0, r3
10000576:	41b9      	sbcs	r1, r7
10000578:	0c13      	lsrs	r3, r2, #16
1000057a:	4373      	muls	r3, r6
1000057c:	0b1f      	lsrs	r7, r3, #12
1000057e:	051b      	lsls	r3, r3, #20
10000580:	1ac0      	subs	r0, r0, r3
10000582:	41b9      	sbcs	r1, r7
10000584:	0d86      	lsrs	r6, r0, #22
10000586:	028f      	lsls	r7, r1, #10
10000588:	433e      	orrs	r6, r7
1000058a:	4366      	muls	r6, r4
1000058c:	0c36      	lsrs	r6, r6, #16
1000058e:	2d09      	cmp	r5, #9
10000590:	db24      	blt.n	100005dc <last0>
10000592:	0a52      	lsrs	r2, r2, #9
10000594:	4372      	muls	r2, r6
10000596:	1a80      	subs	r0, r0, r2
10000598:	0377      	lsls	r7, r6, #13
1000059a:	0a46      	lsrs	r6, r0, #9
1000059c:	4366      	muls	r6, r4
1000059e:	0c36      	lsrs	r6, r6, #16
100005a0:	2316      	movs	r3, #22
100005a2:	1b5b      	subs	r3, r3, r5
100005a4:	40de      	lsrs	r6, r3
100005a6:	40df      	lsrs	r7, r3
100005a8:	19bf      	adds	r7, r7, r6
100005aa:	4664      	mov	r4, ip
100005ac:	4366      	muls	r6, r4
100005ae:	1b82      	subs	r2, r0, r6
100005b0:	4670      	mov	r0, lr
100005b2:	3504      	adds	r5, #4
100005b4:	3306      	adds	r3, #6
100005b6:	0001      	movs	r1, r0
100005b8:	40d9      	lsrs	r1, r3
100005ba:	40a8      	lsls	r0, r5
100005bc:	19c0      	adds	r0, r0, r7
100005be:	d300      	bcc.n	100005c2 <y64_x32+0xb6>
100005c0:	3101      	adds	r1, #1
100005c2:	42a2      	cmp	r2, r4
100005c4:	d206      	bcs.n	100005d4 <y64_x32+0xc8>
100005c6:	2300      	movs	r3, #0
100005c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100005ca:	0000      	.short	0x0000
100005cc:	d0000000 	.word	0xd0000000
100005d0:	ffffffff 	.word	0xffffffff
100005d4:	1b12      	subs	r2, r2, r4
100005d6:	3001      	adds	r0, #1
100005d8:	d3f3      	bcc.n	100005c2 <y64_x32+0xb6>
100005da:	e7f1      	b.n	100005c0 <y64_x32+0xb4>

100005dc <last0>:
100005dc:	2709      	movs	r7, #9
100005de:	1b7f      	subs	r7, r7, r5
100005e0:	40fe      	lsrs	r6, r7
100005e2:	4664      	mov	r4, ip
100005e4:	b2a2      	uxth	r2, r4
100005e6:	4372      	muls	r2, r6
100005e8:	1a80      	subs	r0, r0, r2
100005ea:	d200      	bcs.n	100005ee <last0+0x12>
100005ec:	3901      	subs	r1, #1
100005ee:	0c22      	lsrs	r2, r4, #16
100005f0:	4372      	muls	r2, r6
100005f2:	0c13      	lsrs	r3, r2, #16
100005f4:	0412      	lsls	r2, r2, #16
100005f6:	1a82      	subs	r2, r0, r2
100005f8:	4199      	sbcs	r1, r3
100005fa:	000b      	movs	r3, r1
100005fc:	4670      	mov	r0, lr
100005fe:	3504      	adds	r5, #4
10000600:	3713      	adds	r7, #19
10000602:	0001      	movs	r1, r0
10000604:	40f9      	lsrs	r1, r7
10000606:	40a8      	lsls	r0, r5
10000608:	1980      	adds	r0, r0, r6
1000060a:	d300      	bcc.n	1000060e <last0+0x32>
1000060c:	3101      	adds	r1, #1
1000060e:	2b00      	cmp	r3, #0
10000610:	d102      	bne.n	10000618 <last0+0x3c>
10000612:	42a2      	cmp	r2, r4
10000614:	d20a      	bcs.n	1000062c <last0+0x50>
10000616:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000618:	3001      	adds	r0, #1
1000061a:	d300      	bcc.n	1000061e <last0+0x42>
1000061c:	3101      	adds	r1, #1
1000061e:	1b12      	subs	r2, r2, r4
10000620:	d2fa      	bcs.n	10000618 <last0+0x3c>
10000622:	3b01      	subs	r3, #1
10000624:	d1f8      	bne.n	10000618 <last0+0x3c>
10000626:	42a2      	cmp	r2, r4
10000628:	d200      	bcs.n	1000062c <last0+0x50>
1000062a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000062c:	3001      	adds	r0, #1
1000062e:	d300      	bcc.n	10000632 <last0+0x56>
10000630:	3101      	adds	r1, #1
10000632:	1b12      	subs	r2, r2, r4
10000634:	e7f7      	b.n	10000626 <last0+0x4a>

10000636 <y64_x48>:
10000636:	b5f0      	push	{r4, r5, r6, r7, lr}
10000638:	0c1c      	lsrs	r4, r3, #16
1000063a:	d000      	beq.n	1000063e <y64_x48+0x8>
1000063c:	e080      	b.n	10000740 <y64_x64>
1000063e:	b40c      	push	{r2, r3}
10000640:	2500      	movs	r5, #0
10000642:	0a1c      	lsrs	r4, r3, #8
10000644:	d104      	bne.n	10000650 <y64_x48+0x1a>
10000646:	021b      	lsls	r3, r3, #8
10000648:	0e16      	lsrs	r6, r2, #24
1000064a:	4333      	orrs	r3, r6
1000064c:	0212      	lsls	r2, r2, #8
1000064e:	3508      	adds	r5, #8
10000650:	0b1c      	lsrs	r4, r3, #12
10000652:	d104      	bne.n	1000065e <y64_x48+0x28>
10000654:	011b      	lsls	r3, r3, #4
10000656:	0f16      	lsrs	r6, r2, #28
10000658:	4333      	orrs	r3, r6
1000065a:	0112      	lsls	r2, r2, #4
1000065c:	3504      	adds	r5, #4
1000065e:	0b9c      	lsrs	r4, r3, #14
10000660:	d104      	bne.n	1000066c <y64_x48+0x36>
10000662:	009b      	lsls	r3, r3, #2
10000664:	0f96      	lsrs	r6, r2, #30
10000666:	4333      	orrs	r3, r6
10000668:	0092      	lsls	r2, r2, #2
1000066a:	3502      	adds	r5, #2
1000066c:	0bdc      	lsrs	r4, r3, #15
1000066e:	d102      	bne.n	10000676 <y64_x48+0x40>
10000670:	1892      	adds	r2, r2, r2
10000672:	415b      	adcs	r3, r3
10000674:	3501      	adds	r5, #1
10000676:	001c      	movs	r4, r3
10000678:	1897      	adds	r7, r2, r2
1000067a:	4164      	adcs	r4, r4
1000067c:	3401      	adds	r4, #1
1000067e:	4f46      	ldr	r7, [pc, #280]	; (10000798 <y64_x64+0x58>)
10000680:	667c      	str	r4, [r7, #100]	; 0x64
10000682:	4c46      	ldr	r4, [pc, #280]	; (1000079c <y64_x64+0x5c>)
10000684:	663c      	str	r4, [r7, #96]	; 0x60
10000686:	0c0e      	lsrs	r6, r1, #16
10000688:	e7ff      	b.n	1000068a <y64_x48+0x54>
1000068a:	e7ff      	b.n	1000068c <y64_x48+0x56>
1000068c:	e7ff      	b.n	1000068e <y64_x48+0x58>
1000068e:	46c0      	nop			; (mov r8, r8)
10000690:	6f3c      	ldr	r4, [r7, #112]	; 0x70
10000692:	4366      	muls	r6, r4
10000694:	0c36      	lsrs	r6, r6, #16
10000696:	0377      	lsls	r7, r6, #13
10000698:	46be      	mov	lr, r7
1000069a:	b297      	uxth	r7, r2
1000069c:	4377      	muls	r7, r6
1000069e:	1bc0      	subs	r0, r0, r7
100006a0:	d200      	bcs.n	100006a4 <y64_x48+0x6e>
100006a2:	3901      	subs	r1, #1
100006a4:	1bc0      	subs	r0, r0, r7
100006a6:	d200      	bcs.n	100006aa <y64_x48+0x74>
100006a8:	3901      	subs	r1, #1
100006aa:	b29f      	uxth	r7, r3
100006ac:	4377      	muls	r7, r6
100006ae:	1bc9      	subs	r1, r1, r7
100006b0:	1bc9      	subs	r1, r1, r7
100006b2:	0c17      	lsrs	r7, r2, #16
100006b4:	4377      	muls	r7, r6
100006b6:	047e      	lsls	r6, r7, #17
100006b8:	0bff      	lsrs	r7, r7, #15
100006ba:	1b80      	subs	r0, r0, r6
100006bc:	41b9      	sbcs	r1, r7
100006be:	08ce      	lsrs	r6, r1, #3
100006c0:	4366      	muls	r6, r4
100006c2:	0c36      	lsrs	r6, r6, #16
100006c4:	2d0c      	cmp	r5, #12
100006c6:	db33      	blt.n	10000730 <last1>
100006c8:	44b6      	add	lr, r6
100006ca:	0b12      	lsrs	r2, r2, #12
100006cc:	051f      	lsls	r7, r3, #20
100006ce:	433a      	orrs	r2, r7
100006d0:	0b1b      	lsrs	r3, r3, #12
100006d2:	b297      	uxth	r7, r2
100006d4:	4377      	muls	r7, r6
100006d6:	1bc0      	subs	r0, r0, r7
100006d8:	d200      	bcs.n	100006dc <y64_x48+0xa6>
100006da:	3901      	subs	r1, #1
100006dc:	b29f      	uxth	r7, r3
100006de:	4377      	muls	r7, r6
100006e0:	1bc9      	subs	r1, r1, r7
100006e2:	0c17      	lsrs	r7, r2, #16
100006e4:	4377      	muls	r7, r6
100006e6:	043e      	lsls	r6, r7, #16
100006e8:	0c3f      	lsrs	r7, r7, #16
100006ea:	1b80      	subs	r0, r0, r6
100006ec:	41b9      	sbcs	r1, r7
100006ee:	0d86      	lsrs	r6, r0, #22
100006f0:	028f      	lsls	r7, r1, #10
100006f2:	433e      	orrs	r6, r7
100006f4:	4366      	muls	r6, r4
100006f6:	2729      	movs	r7, #41	; 0x29
100006f8:	1b7f      	subs	r7, r7, r5
100006fa:	40fe      	lsrs	r6, r7
100006fc:	3d0c      	subs	r5, #12
100006fe:	4677      	mov	r7, lr
10000700:	40af      	lsls	r7, r5
10000702:	19bf      	adds	r7, r7, r6
10000704:	bc30      	pop	{r4, r5}
10000706:	b2a2      	uxth	r2, r4
10000708:	b2ab      	uxth	r3, r5
1000070a:	4372      	muls	r2, r6
1000070c:	4373      	muls	r3, r6
1000070e:	1a80      	subs	r0, r0, r2
10000710:	4199      	sbcs	r1, r3
10000712:	0c22      	lsrs	r2, r4, #16
10000714:	4372      	muls	r2, r6
10000716:	0c13      	lsrs	r3, r2, #16
10000718:	0412      	lsls	r2, r2, #16
1000071a:	1a80      	subs	r0, r0, r2
1000071c:	4199      	sbcs	r1, r3
1000071e:	0002      	movs	r2, r0
10000720:	000b      	movs	r3, r1
10000722:	3701      	adds	r7, #1
10000724:	1b00      	subs	r0, r0, r4
10000726:	41a9      	sbcs	r1, r5
10000728:	d2f9      	bcs.n	1000071e <y64_x48+0xe8>
1000072a:	1e78      	subs	r0, r7, #1
1000072c:	2100      	movs	r1, #0
1000072e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000730 <last1>:
10000730:	270c      	movs	r7, #12
10000732:	1b7f      	subs	r7, r7, r5
10000734:	40fe      	lsrs	r6, r7
10000736:	4677      	mov	r7, lr
10000738:	0b7f      	lsrs	r7, r7, #13
1000073a:	40af      	lsls	r7, r5
1000073c:	19ff      	adds	r7, r7, r7
1000073e:	e7e0      	b.n	10000702 <y64_x48+0xcc>

10000740 <y64_x64>:
10000740:	2400      	movs	r4, #0
10000742:	1c5d      	adds	r5, r3, #1
10000744:	d007      	beq.n	10000756 <y64_x64+0x16>
10000746:	4f14      	ldr	r7, [pc, #80]	; (10000798 <y64_x64+0x58>)
10000748:	667d      	str	r5, [r7, #100]	; 0x64
1000074a:	6639      	str	r1, [r7, #96]	; 0x60
1000074c:	e7ff      	b.n	1000074e <y64_x64+0xe>
1000074e:	e7ff      	b.n	10000750 <y64_x64+0x10>
10000750:	e7ff      	b.n	10000752 <y64_x64+0x12>
10000752:	e7ff      	b.n	10000754 <y64_x64+0x14>
10000754:	6f3c      	ldr	r4, [r7, #112]	; 0x70
10000756:	b295      	uxth	r5, r2
10000758:	b29e      	uxth	r6, r3
1000075a:	4365      	muls	r5, r4
1000075c:	4366      	muls	r6, r4
1000075e:	1b40      	subs	r0, r0, r5
10000760:	41b1      	sbcs	r1, r6
10000762:	0c15      	lsrs	r5, r2, #16
10000764:	0c1e      	lsrs	r6, r3, #16
10000766:	4365      	muls	r5, r4
10000768:	4366      	muls	r6, r4
1000076a:	0436      	lsls	r6, r6, #16
1000076c:	0c2f      	lsrs	r7, r5, #16
1000076e:	433e      	orrs	r6, r7
10000770:	042d      	lsls	r5, r5, #16
10000772:	1b40      	subs	r0, r0, r5
10000774:	41b1      	sbcs	r1, r6
10000776:	4299      	cmp	r1, r3
10000778:	d204      	bcs.n	10000784 <y64_x64+0x44>
1000077a:	0002      	movs	r2, r0
1000077c:	000b      	movs	r3, r1
1000077e:	0020      	movs	r0, r4
10000780:	2100      	movs	r1, #0
10000782:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000784:	d101      	bne.n	1000078a <y64_x64+0x4a>
10000786:	4290      	cmp	r0, r2
10000788:	d3f7      	bcc.n	1000077a <y64_x64+0x3a>
1000078a:	1a80      	subs	r0, r0, r2
1000078c:	4199      	sbcs	r1, r3
1000078e:	3401      	adds	r4, #1
10000790:	4299      	cmp	r1, r3
10000792:	d3f2      	bcc.n	1000077a <y64_x64+0x3a>
10000794:	e7f6      	b.n	10000784 <y64_x64+0x44>
10000796:	0000      	.short	0x0000
10000798:	d0000000 	.word	0xd0000000
1000079c:	ffffffff 	.word	0xffffffff

100007a0 <hw_divider_save_state>:
100007a0:	b530      	push	{r4, r5, lr}
100007a2:	4d05      	ldr	r5, [pc, #20]	; (100007b8 <hw_divider_save_state+0x18>)
100007a4:	6fac      	ldr	r4, [r5, #120]	; 0x78
100007a6:	0864      	lsrs	r4, r4, #1
100007a8:	d3fd      	bcc.n	100007a6 <hw_divider_save_state+0x6>
100007aa:	6e29      	ldr	r1, [r5, #96]	; 0x60
100007ac:	6e6a      	ldr	r2, [r5, #100]	; 0x64
100007ae:	6f6b      	ldr	r3, [r5, #116]	; 0x74
100007b0:	6f2c      	ldr	r4, [r5, #112]	; 0x70
100007b2:	c01e      	stmia	r0!, {r1, r2, r3, r4}
100007b4:	bd30      	pop	{r4, r5, pc}
100007b6:	0000      	.short	0x0000
100007b8:	d0000000 	.word	0xd0000000

100007bc <hw_divider_restore_state>:
100007bc:	b530      	push	{r4, r5, lr}
100007be:	4d03      	ldr	r5, [pc, #12]	; (100007cc <hw_divider_restore_state+0x10>)
100007c0:	c81e      	ldmia	r0!, {r1, r2, r3, r4}
100007c2:	6629      	str	r1, [r5, #96]	; 0x60
100007c4:	666a      	str	r2, [r5, #100]	; 0x64
100007c6:	676b      	str	r3, [r5, #116]	; 0x74
100007c8:	672c      	str	r4, [r5, #112]	; 0x70
100007ca:	bd30      	pop	{r4, r5, pc}
100007cc:	d0000000 	.word	0xd0000000

100007d0 <double_table_shim_on_use_helper>:
100007d0:	b507      	push	{r0, r1, r2, lr}
100007d2:	4660      	mov	r0, ip
100007d4:	8801      	ldrh	r1, [r0, #0]
100007d6:	0a0a      	lsrs	r2, r1, #8
100007d8:	3002      	adds	r0, #2
100007da:	2adf      	cmp	r2, #223	; 0xdf
100007dc:	d1fa      	bne.n	100007d4 <double_table_shim_on_use_helper+0x4>
100007de:	b2c9      	uxtb	r1, r1
100007e0:	0882      	lsrs	r2, r0, #2
100007e2:	d304      	bcc.n	100007ee <double_table_shim_on_use_helper+0x1e>
100007e4:	8802      	ldrh	r2, [r0, #0]
100007e6:	8840      	ldrh	r0, [r0, #2]
100007e8:	0400      	lsls	r0, r0, #16
100007ea:	4310      	orrs	r0, r2
100007ec:	e000      	b.n	100007f0 <double_table_shim_on_use_helper+0x20>
100007ee:	6800      	ldr	r0, [r0, #0]
100007f0:	4a01      	ldr	r2, [pc, #4]	; (100007f8 <double_table_shim_on_use_helper+0x28>)
100007f2:	5050      	str	r0, [r2, r1]
100007f4:	9003      	str	r0, [sp, #12]
100007f6:	bd07      	pop	{r0, r1, r2, pc}
100007f8:	20003050 	.word	0x20003050

100007fc <__wrap___aeabi_frsub>:
100007fc:	4048      	eors	r0, r1
100007fe:	4041      	eors	r1, r0
10000800:	4048      	eors	r0, r1

10000802 <__wrap___aeabi_fsub>:
10000802:	4b06      	ldr	r3, [pc, #24]	; (1000081c <__wrap___aeabi_fmul+0x8>)
10000804:	685b      	ldr	r3, [r3, #4]
10000806:	4718      	bx	r3

10000808 <__wrap___aeabi_fadd>:
10000808:	4b04      	ldr	r3, [pc, #16]	; (1000081c <__wrap___aeabi_fmul+0x8>)
1000080a:	681b      	ldr	r3, [r3, #0]
1000080c:	4718      	bx	r3

1000080e <__wrap___aeabi_fdiv>:
1000080e:	4b03      	ldr	r3, [pc, #12]	; (1000081c <__wrap___aeabi_fmul+0x8>)
10000810:	68db      	ldr	r3, [r3, #12]
10000812:	4718      	bx	r3

10000814 <__wrap___aeabi_fmul>:
10000814:	4b01      	ldr	r3, [pc, #4]	; (1000081c <__wrap___aeabi_fmul+0x8>)
10000816:	689b      	ldr	r3, [r3, #8]
10000818:	4718      	bx	r3
1000081a:	0000      	.short	0x0000
1000081c:	20003150 	.word	0x20003150

10000820 <__wrap___aeabi_ui2f>:
10000820:	1a49      	subs	r1, r1, r1
10000822:	2800      	cmp	r0, #0
10000824:	d108      	bne.n	10000838 <__aeabi_i2f_main>
10000826:	4608      	mov	r0, r1
10000828:	4770      	bx	lr
	...

1000082c <__wrap___aeabi_i2f>:
1000082c:	0fc1      	lsrs	r1, r0, #31
1000082e:	07c9      	lsls	r1, r1, #31
10000830:	d500      	bpl.n	10000834 <__wrap___aeabi_i2f+0x8>
10000832:	4240      	negs	r0, r0
10000834:	2800      	cmp	r0, #0
10000836:	d017      	beq.n	10000868 <__aeabi_i2f_main+0x30>

10000838 <__aeabi_i2f_main>:
10000838:	46f4      	mov	ip, lr
1000083a:	b403      	push	{r0, r1}
1000083c:	4b0b      	ldr	r3, [pc, #44]	; (1000086c <__aeabi_i2f_main+0x34>)
1000083e:	681b      	ldr	r3, [r3, #0]
10000840:	4798      	blx	r3
10000842:	bc06      	pop	{r1, r2}
10000844:	4081      	lsls	r1, r0
10000846:	389e      	subs	r0, #158	; 0x9e
10000848:	4240      	negs	r0, r0
1000084a:	3180      	adds	r1, #128	; 0x80
1000084c:	d207      	bcs.n	1000085e <__aeabi_i2f_main+0x26>
1000084e:	060b      	lsls	r3, r1, #24
10000850:	d007      	beq.n	10000862 <__aeabi_i2f_main+0x2a>
10000852:	0049      	lsls	r1, r1, #1
10000854:	0a49      	lsrs	r1, r1, #9
10000856:	05c0      	lsls	r0, r0, #23
10000858:	4310      	orrs	r0, r2
1000085a:	4308      	orrs	r0, r1
1000085c:	4760      	bx	ip
1000085e:	3001      	adds	r0, #1
10000860:	e7f8      	b.n	10000854 <__aeabi_i2f_main+0x1c>
10000862:	0a49      	lsrs	r1, r1, #9
10000864:	0289      	lsls	r1, r1, #10
10000866:	e7f5      	b.n	10000854 <__aeabi_i2f_main+0x1c>
10000868:	4770      	bx	lr
1000086a:	0000      	.short	0x0000
1000086c:	20023b64 	.word	0x20023b64

10000870 <__wrap___aeabi_f2iz>:
10000870:	0041      	lsls	r1, r0, #1
10000872:	0e0a      	lsrs	r2, r1, #24
10000874:	2380      	movs	r3, #128	; 0x80
10000876:	061b      	lsls	r3, r3, #24
10000878:	2a7e      	cmp	r2, #126	; 0x7e
1000087a:	dd0b      	ble.n	10000894 <__wrap___aeabi_f2iz+0x24>
1000087c:	3a9e      	subs	r2, #158	; 0x9e
1000087e:	da0b      	bge.n	10000898 <__wrap___aeabi_f2iz+0x28>
10000880:	17c1      	asrs	r1, r0, #31
10000882:	0240      	lsls	r0, r0, #9
10000884:	0840      	lsrs	r0, r0, #1
10000886:	4318      	orrs	r0, r3
10000888:	4252      	negs	r2, r2
1000088a:	40d0      	lsrs	r0, r2
1000088c:	0049      	lsls	r1, r1, #1
1000088e:	3101      	adds	r1, #1
10000890:	4348      	muls	r0, r1
10000892:	4770      	bx	lr
10000894:	2000      	movs	r0, #0
10000896:	4770      	bx	lr
10000898:	0fc0      	lsrs	r0, r0, #31
1000089a:	18c0      	adds	r0, r0, r3
1000089c:	3801      	subs	r0, #1
1000089e:	4770      	bx	lr
100008a0:	42c0      	cmn	r0, r0
100008a2:	d30d      	bcc.n	100008c0 <float2int>
100008a4:	b500      	push	{lr}
100008a6:	0040      	lsls	r0, r0, #1
100008a8:	0840      	lsrs	r0, r0, #1
100008aa:	2100      	movs	r1, #0
100008ac:	f000 f812 	bl	100008d4 <__wrap___aeabi_f2uiz>
100008b0:	2800      	cmp	r0, #0
100008b2:	d401      	bmi.n	100008b8 <__wrap___aeabi_f2iz+0x48>
100008b4:	4240      	negs	r0, r0
100008b6:	bd00      	pop	{pc}
100008b8:	2080      	movs	r0, #128	; 0x80
100008ba:	0600      	lsls	r0, r0, #24
100008bc:	bd00      	pop	{pc}
	...

100008c0 <float2int>:
100008c0:	4b03      	ldr	r3, [pc, #12]	; (100008d0 <float2int+0x10>)
100008c2:	69db      	ldr	r3, [r3, #28]
100008c4:	46fc      	mov	ip, pc
100008c6:	4718      	bx	r3
100008c8:	090ddf1c 	.word	0x090ddf1c
100008cc:	00001000 	.word	0x00001000
100008d0:	20003150 	.word	0x20003150

100008d4 <__wrap___aeabi_f2uiz>:
100008d4:	4b01      	ldr	r3, [pc, #4]	; (100008dc <__wrap___aeabi_f2uiz+0x8>)
100008d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100008d8:	4718      	bx	r3
100008da:	0000      	.short	0x0000
100008dc:	20003150 	.word	0x20003150

100008e0 <float_table_shim_on_use_helper>:
100008e0:	b507      	push	{r0, r1, r2, lr}
100008e2:	4660      	mov	r0, ip
100008e4:	8801      	ldrh	r1, [r0, #0]
100008e6:	0a0a      	lsrs	r2, r1, #8
100008e8:	3002      	adds	r0, #2
100008ea:	2adf      	cmp	r2, #223	; 0xdf
100008ec:	d1fa      	bne.n	100008e4 <float_table_shim_on_use_helper+0x4>
100008ee:	b2c9      	uxtb	r1, r1
100008f0:	0882      	lsrs	r2, r0, #2
100008f2:	d304      	bcc.n	100008fe <float_table_shim_on_use_helper+0x1e>
100008f4:	8802      	ldrh	r2, [r0, #0]
100008f6:	8840      	ldrh	r0, [r0, #2]
100008f8:	0400      	lsls	r0, r0, #16
100008fa:	4310      	orrs	r0, r2
100008fc:	e000      	b.n	10000900 <float_table_shim_on_use_helper+0x20>
100008fe:	6800      	ldr	r0, [r0, #0]
10000900:	4a01      	ldr	r2, [pc, #4]	; (10000908 <float_table_shim_on_use_helper+0x28>)
10000902:	5050      	str	r0, [r2, r1]
10000904:	9003      	str	r0, [sp, #12]
10000906:	bd07      	pop	{r0, r1, r2, pc}
10000908:	20003150 	.word	0x20003150

1000090c <float2int_shim>:
1000090c:	2100      	movs	r1, #0

1000090e <float2fix_shim>:
1000090e:	15c2      	asrs	r2, r0, #23
10000910:	3280      	adds	r2, #128	; 0x80
10000912:	3280      	adds	r2, #128	; 0x80
10000914:	d001      	beq.n	1000091a <float2fix_shim+0xc>
10000916:	4a02      	ldr	r2, [pc, #8]	; (10000920 <float2fix_shim+0x12>)
10000918:	4710      	bx	r2
1000091a:	2000      	movs	r0, #0
1000091c:	4770      	bx	lr
1000091e:	0000      	.short	0x0000
10000920:	00002acd 	.word	0x00002acd

10000924 <__aeabi_mem_init>:
10000924:	4801      	ldr	r0, [pc, #4]	; (1000092c <__aeabi_mem_init+0x8>)
10000926:	2104      	movs	r1, #4
10000928:	4b01      	ldr	r3, [pc, #4]	; (10000930 <__aeabi_mem_init+0xc>)
1000092a:	4718      	bx	r3
1000092c:	20002708 	.word	0x20002708
10000930:	100009a1 	.word	0x100009a1

10000934 <__wrap_memset>:
10000934:	4b01      	ldr	r3, [pc, #4]	; (1000093c <__wrap_memset+0x8>)
10000936:	681b      	ldr	r3, [r3, #0]
10000938:	4718      	bx	r3
1000093a:	0000      	.short	0x0000
1000093c:	20002708 	.word	0x20002708

10000940 <__wrap___aeabi_memcpy>:
10000940:	4b01      	ldr	r3, [pc, #4]	; (10000948 <__wrap___aeabi_memcpy+0x8>)
10000942:	685b      	ldr	r3, [r3, #4]
10000944:	4718      	bx	r3
10000946:	0000      	.short	0x0000
10000948:	20002708 	.word	0x20002708

1000094c <__wrap___aeabi_lmul>:
1000094c:	4351      	muls	r1, r2
1000094e:	4343      	muls	r3, r0
10000950:	18c9      	adds	r1, r1, r3
10000952:	468c      	mov	ip, r1
10000954:	0c11      	lsrs	r1, r2, #16
10000956:	b283      	uxth	r3, r0
10000958:	434b      	muls	r3, r1
1000095a:	b410      	push	{r4}
1000095c:	0c04      	lsrs	r4, r0, #16
1000095e:	4361      	muls	r1, r4
10000960:	b292      	uxth	r2, r2
10000962:	b280      	uxth	r0, r0
10000964:	4350      	muls	r0, r2
10000966:	4362      	muls	r2, r4
10000968:	041c      	lsls	r4, r3, #16
1000096a:	0c1b      	lsrs	r3, r3, #16
1000096c:	1900      	adds	r0, r0, r4
1000096e:	bc10      	pop	{r4}
10000970:	4159      	adcs	r1, r3
10000972:	0413      	lsls	r3, r2, #16
10000974:	0c12      	lsrs	r2, r2, #16
10000976:	18c0      	adds	r0, r0, r3
10000978:	4151      	adcs	r1, r2
1000097a:	4461      	add	r1, ip
1000097c:	4770      	bx	lr
	...

10000980 <rom_func_lookup>:
// Convert a 16 bit pointer stored at the given rom address into a 32 bit pointer
#define rom_hword_as_ptr(rom_address) (void *)(uintptr_t)(*(uint16_t *)rom_address)

void *rom_func_lookup(uint32_t code) {
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
10000980:	2314      	movs	r3, #20
void *rom_func_lookup(uint32_t code) {
10000982:	b510      	push	{r4, lr}
10000984:	0001      	movs	r1, r0
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
10000986:	8818      	ldrh	r0, [r3, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10000988:	3304      	adds	r3, #4
1000098a:	881b      	ldrh	r3, [r3, #0]
    return rom_table_lookup(func_table, code);
1000098c:	4798      	blx	r3
}
1000098e:	bd10      	pop	{r4, pc}

10000990 <rom_data_lookup>:

void *rom_data_lookup(uint32_t code) {
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
    uint16_t *data_table = (uint16_t *) rom_hword_as_ptr(0x16);
10000990:	2316      	movs	r3, #22
void *rom_data_lookup(uint32_t code) {
10000992:	b510      	push	{r4, lr}
10000994:	0001      	movs	r1, r0
    uint16_t *data_table = (uint16_t *) rom_hword_as_ptr(0x16);
10000996:	8818      	ldrh	r0, [r3, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10000998:	3302      	adds	r3, #2
1000099a:	881b      	ldrh	r3, [r3, #0]
    return rom_table_lookup(data_table, code);
1000099c:	4798      	blx	r3
}
1000099e:	bd10      	pop	{r4, pc}

100009a0 <rom_funcs_lookup>:
/// \end::table_lookup[]

bool rom_funcs_lookup(uint32_t *table, unsigned int count) {
100009a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100009a2:	4647      	mov	r7, r8
100009a4:	46ce      	mov	lr, r9
100009a6:	b580      	push	{r7, lr}
100009a8:	1e0f      	subs	r7, r1, #0
    bool ok = true;
    for (unsigned int i = 0; i < count; i++) {
100009aa:	d019      	beq.n	100009e0 <rom_funcs_lookup+0x40>
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
100009ac:	2314      	movs	r3, #20
100009ae:	4699      	mov	r9, r3
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
100009b0:	3304      	adds	r3, #4
100009b2:	0004      	movs	r4, r0
    for (unsigned int i = 0; i < count; i++) {
100009b4:	2500      	movs	r5, #0
    bool ok = true;
100009b6:	2601      	movs	r6, #1
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
100009b8:	4698      	mov	r8, r3
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
100009ba:	464b      	mov	r3, r9
100009bc:	8818      	ldrh	r0, [r3, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
100009be:	4643      	mov	r3, r8
    return rom_table_lookup(func_table, code);
100009c0:	6821      	ldr	r1, [r4, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
100009c2:	881b      	ldrh	r3, [r3, #0]
    return rom_table_lookup(func_table, code);
100009c4:	4798      	blx	r3
        table[i] = (uintptr_t) rom_func_lookup(table[i]);
100009c6:	c401      	stmia	r4!, {r0}
        if (!table[i]) ok = false;
100009c8:	1e43      	subs	r3, r0, #1
100009ca:	4198      	sbcs	r0, r3
    for (unsigned int i = 0; i < count; i++) {
100009cc:	3501      	adds	r5, #1
        if (!table[i]) ok = false;
100009ce:	4240      	negs	r0, r0
100009d0:	4006      	ands	r6, r0
    for (unsigned int i = 0; i < count; i++) {
100009d2:	42af      	cmp	r7, r5
100009d4:	d1f1      	bne.n	100009ba <rom_funcs_lookup+0x1a>
    }
    return ok;
}
100009d6:	0030      	movs	r0, r6
100009d8:	bcc0      	pop	{r6, r7}
100009da:	46b9      	mov	r9, r7
100009dc:	46b0      	mov	r8, r6
100009de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool ok = true;
100009e0:	2601      	movs	r6, #1
100009e2:	e7f8      	b.n	100009d6 <rom_funcs_lookup+0x36>

100009e4 <hw_claim_lock>:
 *
 * \return The prior interrupt enable status for restoration later via restore_interrupts()
 */
inline static uint32_t save_and_disable_interrupts() {
    uint32_t status;
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100009e4:	f3ef 8010 	mrs	r0, PRIMASK
    __asm volatile ("cpsid i");
100009e8:	b672      	cpsid	i
 */
inline static void spin_lock_unsafe_blocking(spin_lock_t *lock) {
    // Note we don't do a wfe or anything, because by convention these spin_locks are VERY SHORT LIVED and NEVER BLOCK and run
    // with INTERRUPTS disabled (to ensure that)... therefore nothing on our core could be blocking us, so we just need to wait on another core
    // anyway which should be finished soon
    while (__builtin_expect(!*lock, 0));
100009ea:	4a03      	ldr	r2, [pc, #12]	; (100009f8 <hw_claim_lock+0x14>)
100009ec:	6813      	ldr	r3, [r2, #0]
100009ee:	2b00      	cmp	r3, #0
100009f0:	d0fc      	beq.n	100009ec <hw_claim_lock+0x8>
    __asm volatile ("dmb");
100009f2:	f3bf 8f5f 	dmb	sy

#include "hardware/claim.h"

uint32_t hw_claim_lock() {
    return spin_lock_blocking(spin_lock_instance(PICO_SPINLOCK_ID_HARDWARE_CLAIM));
}
100009f6:	4770      	bx	lr
100009f8:	d000012c 	.word	0xd000012c

100009fc <hw_claim_unlock>:
100009fc:	f3bf 8f5f 	dmb	sy
 *
 * \param lock Spinlock instance
 */
inline static void spin_unlock_unsafe(spin_lock_t *lock) {
    __mem_fence_release();
    *lock = 0;
10000a00:	2200      	movs	r2, #0
10000a02:	4b02      	ldr	r3, [pc, #8]	; (10000a0c <hw_claim_unlock+0x10>)
10000a04:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10000a06:	f380 8810 	msr	PRIMASK, r0

void hw_claim_unlock(uint32_t save) {
    spin_unlock(spin_lock_instance(PICO_SPINLOCK_ID_HARDWARE_CLAIM), save);
}
10000a0a:	4770      	bx	lr
10000a0c:	d000012c 	.word	0xd000012c

10000a10 <hw_claim_or_assert>:
    }
    hw_claim_unlock(save);
    return rc;
}

void hw_claim_or_assert(uint8_t *bits, uint bit_index, const char *message) {
10000a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10000a12:	46ce      	mov	lr, r9
10000a14:	4647      	mov	r7, r8
10000a16:	4691      	mov	r9, r2
10000a18:	b580      	push	{r7, lr}
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10000a1a:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10000a1e:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10000a20:	4d10      	ldr	r5, [pc, #64]	; (10000a64 <hw_claim_or_assert+0x54>)
10000a22:	682b      	ldr	r3, [r5, #0]
10000a24:	2b00      	cmp	r3, #0
10000a26:	d0fc      	beq.n	10000a22 <hw_claim_or_assert+0x12>
    __asm volatile ("dmb");
10000a28:	f3bf 8f5f 	dmb	sy
    uint32_t save = hw_claim_lock();
    if (bits[bit_index >> 3u] & (1u << (bit_index & 7u))) {
10000a2c:	08cb      	lsrs	r3, r1, #3
10000a2e:	5cc4      	ldrb	r4, [r0, r3]
10000a30:	18c7      	adds	r7, r0, r3
10000a32:	2007      	movs	r0, #7
10000a34:	0026      	movs	r6, r4
10000a36:	2301      	movs	r3, #1
10000a38:	4008      	ands	r0, r1
10000a3a:	40c6      	lsrs	r6, r0
10000a3c:	001a      	movs	r2, r3
10000a3e:	4032      	ands	r2, r6
10000a40:	4233      	tst	r3, r6
10000a42:	d10b      	bne.n	10000a5c <hw_claim_or_assert+0x4c>
        panic(message, bit_index);
    } else {
        bits[bit_index >> 3u] |= (1u << (bit_index & 7u));
10000a44:	4083      	lsls	r3, r0
10000a46:	4323      	orrs	r3, r4
10000a48:	703b      	strb	r3, [r7, #0]
10000a4a:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10000a4e:	602a      	str	r2, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10000a50:	f38c 8810 	msr	PRIMASK, ip
    }
    hw_claim_unlock(save);
}
10000a54:	bcc0      	pop	{r6, r7}
10000a56:	46b9      	mov	r9, r7
10000a58:	46b0      	mov	r8, r6
10000a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        panic(message, bit_index);
10000a5c:	4648      	mov	r0, r9
10000a5e:	f001 f949 	bl	10001cf4 <panic>
10000a62:	46c0      	nop			; (mov r8, r8)
10000a64:	d000012c 	.word	0xd000012c

10000a68 <hw_claim_unused_from_range>:

int hw_claim_unused_from_range(uint8_t *bits, bool required, uint bit_lsb, uint bit_msb, const char *message) {
10000a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10000a6a:	4647      	mov	r7, r8
10000a6c:	46ce      	mov	lr, r9
10000a6e:	4688      	mov	r8, r1
10000a70:	b580      	push	{r7, lr}
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10000a72:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10000a76:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10000a78:	4d21      	ldr	r5, [pc, #132]	; (10000b00 <hw_claim_unused_from_range+0x98>)
10000a7a:	682c      	ldr	r4, [r5, #0]
10000a7c:	2c00      	cmp	r4, #0
10000a7e:	d0fc      	beq.n	10000a7a <hw_claim_unused_from_range+0x12>
    __asm volatile ("dmb");
10000a80:	f3bf 8f5f 	dmb	sy
    // don't bother check lsb / msb order as if wrong, then it'll fail anyway
    uint32_t save = hw_claim_lock();
    int found_bit = -1;
    for(uint bit=bit_lsb; bit <= bit_msb; bit++) {
10000a84:	429a      	cmp	r2, r3
10000a86:	d82d      	bhi.n	10000ae4 <hw_claim_unused_from_range+0x7c>
        if (!(bits[bit >> 3u] & (1u << (bit & 7u)))) {
10000a88:	08d4      	lsrs	r4, r2, #3
10000a8a:	5d05      	ldrb	r5, [r0, r4]
10000a8c:	1907      	adds	r7, r0, r4
10000a8e:	2407      	movs	r4, #7
10000a90:	002e      	movs	r6, r5
10000a92:	4014      	ands	r4, r2
10000a94:	40e6      	lsrs	r6, r4
10000a96:	07f1      	lsls	r1, r6, #31
10000a98:	d51e      	bpl.n	10000ad8 <hw_claim_unused_from_range+0x70>
10000a9a:	2107      	movs	r1, #7
10000a9c:	4689      	mov	r9, r1
10000a9e:	3906      	subs	r1, #6
10000aa0:	e008      	b.n	10000ab4 <hw_claim_unused_from_range+0x4c>
10000aa2:	08d4      	lsrs	r4, r2, #3
10000aa4:	5d05      	ldrb	r5, [r0, r4]
10000aa6:	1907      	adds	r7, r0, r4
10000aa8:	464c      	mov	r4, r9
10000aaa:	002e      	movs	r6, r5
10000aac:	4014      	ands	r4, r2
10000aae:	40e6      	lsrs	r6, r4
10000ab0:	4231      	tst	r1, r6
10000ab2:	d011      	beq.n	10000ad8 <hw_claim_unused_from_range+0x70>
    for(uint bit=bit_lsb; bit <= bit_msb; bit++) {
10000ab4:	3201      	adds	r2, #1
10000ab6:	4293      	cmp	r3, r2
10000ab8:	d2f3      	bcs.n	10000aa2 <hw_claim_unused_from_range+0x3a>
    int found_bit = -1;
10000aba:	2001      	movs	r0, #1
10000abc:	4240      	negs	r0, r0
10000abe:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10000ac2:	2200      	movs	r2, #0
10000ac4:	4b0e      	ldr	r3, [pc, #56]	; (10000b00 <hw_claim_unused_from_range+0x98>)
10000ac6:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10000ac8:	f38c 8810 	msr	PRIMASK, ip
            found_bit = bit;
            break;
        }
    }
    hw_claim_unlock(save);
    if (found_bit < 0 && required) {
10000acc:	2800      	cmp	r0, #0
10000ace:	db11      	blt.n	10000af4 <hw_claim_unused_from_range+0x8c>
        panic(message);
    }
    return found_bit;
}
10000ad0:	bcc0      	pop	{r6, r7}
10000ad2:	46b9      	mov	r9, r7
10000ad4:	46b0      	mov	r8, r6
10000ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            bits[bit >> 3u] |= (1u << (bit & 7u));
10000ad8:	2301      	movs	r3, #1
10000ada:	40a3      	lsls	r3, r4
10000adc:	431d      	orrs	r5, r3
            found_bit = bit;
10000ade:	0010      	movs	r0, r2
            bits[bit >> 3u] |= (1u << (bit & 7u));
10000ae0:	703d      	strb	r5, [r7, #0]
            break;
10000ae2:	e7ec      	b.n	10000abe <hw_claim_unused_from_range+0x56>
    __asm volatile ("dmb");
10000ae4:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10000ae8:	2300      	movs	r3, #0
10000aea:	602b      	str	r3, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10000aec:	f38c 8810 	msr	PRIMASK, ip
    int found_bit = -1;
10000af0:	2001      	movs	r0, #1
10000af2:	4240      	negs	r0, r0
    if (found_bit < 0 && required) {
10000af4:	4643      	mov	r3, r8
10000af6:	2b00      	cmp	r3, #0
10000af8:	d0ea      	beq.n	10000ad0 <hw_claim_unused_from_range+0x68>
        panic(message);
10000afa:	9808      	ldr	r0, [sp, #32]
10000afc:	f001 f8fa 	bl	10001cf4 <panic>
10000b00:	d000012c 	.word	0xd000012c

10000b04 <clock_configure>:
    hw_clear_bits(&clock->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clk_index] = 0;
}

/// \tag::clock_configure[]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10000b04:	b5f0      	push	{r4, r5, r6, r7, lr}
10000b06:	464f      	mov	r7, r9
10000b08:	4646      	mov	r6, r8
10000b0a:	46d6      	mov	lr, sl
10000b0c:	b5c0      	push	{r6, r7, lr}
10000b0e:	0017      	movs	r7, r2
    uint32_t div;

    assert(src_freq >= freq);

    if (freq > src_freq)
10000b10:	9a08      	ldr	r2, [sp, #32]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10000b12:	0005      	movs	r5, r0
10000b14:	4688      	mov	r8, r1
    if (freq > src_freq)
10000b16:	429a      	cmp	r2, r3
10000b18:	d865      	bhi.n	10000be6 <clock_configure+0xe2>
        return false;

    // Div register is 24.8 int.frac divider so multiply by 2^8 (left shift by 8)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10000b1a:	0e19      	lsrs	r1, r3, #24
10000b1c:	0218      	lsls	r0, r3, #8
10000b1e:	2300      	movs	r3, #0
10000b20:	f7ff fc42 	bl	100003a8 <__wrap___aeabi_uldivmod>

    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10000b24:	4b31      	ldr	r3, [pc, #196]	; (10000bec <clock_configure+0xe8>)
10000b26:	006c      	lsls	r4, r5, #1
10000b28:	469c      	mov	ip, r3
10000b2a:	1964      	adds	r4, r4, r5
10000b2c:	00a4      	lsls	r4, r4, #2
10000b2e:	4464      	add	r4, ip

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock->div)
10000b30:	6863      	ldr	r3, [r4, #4]
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10000b32:	4681      	mov	r9, r0
    if (div > clock->div)
10000b34:	4298      	cmp	r0, r3
10000b36:	d900      	bls.n	10000b3a <clock_configure+0x36>
        clock->div = div;
10000b38:	6060      	str	r0, [r4, #4]
    return clk_index == clk_sys || clk_index == clk_ref;
10000b3a:	1f2b      	subs	r3, r5, #4
10000b3c:	b2db      	uxtb	r3, r3
10000b3e:	469a      	mov	sl, r3

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10000b40:	2b01      	cmp	r3, #1
10000b42:	d92c      	bls.n	10000b9e <clock_configure+0x9a>
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000b44:	23c0      	movs	r3, #192	; 0xc0
10000b46:	2280      	movs	r2, #128	; 0x80
    // If no glitchless mux, cleanly stop the clock to avoid glitches
    // propagating when changing aux mux. Note it would be a really bad idea
    // to do this on one of the glitchless clocks (clk_sys, clk_ref).
    else {
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_GPOUT0_CTRL_ENABLE_BITS);
        if (configured_freq[clk_index] > 0) {
10000b48:	4e29      	ldr	r6, [pc, #164]	; (10000bf0 <clock_configure+0xec>)
10000b4a:	00ad      	lsls	r5, r5, #2
10000b4c:	019b      	lsls	r3, r3, #6
10000b4e:	5971      	ldr	r1, [r6, r5]
10000b50:	4323      	orrs	r3, r4
10000b52:	0112      	lsls	r2, r2, #4
10000b54:	601a      	str	r2, [r3, #0]
10000b56:	2900      	cmp	r1, #0
10000b58:	d005      	beq.n	10000b66 <clock_configure+0x62>
            // Delay for 3 cycles of the target clock, for ENABLE propagation.
            // Note XOSC_COUNT is not helpful here because XOSC is not
            // necessarily running, nor is timer... so, 3 cycles per loop:
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10000b5a:	6970      	ldr	r0, [r6, #20]
10000b5c:	f7ff fbde 	bl	1000031c <__wrap___aeabi_uidiv>
10000b60:	3001      	adds	r0, #1
            asm volatile (
10000b62:	3801      	subs	r0, #1
10000b64:	d1fd      	bne.n	10000b62 <clock_configure+0x5e>
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000b66:	6822      	ldr	r2, [r4, #0]
            );
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock->ctrl,
10000b68:	017f      	lsls	r7, r7, #5
10000b6a:	407a      	eors	r2, r7
10000b6c:	27e0      	movs	r7, #224	; 0xe0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000b6e:	2380      	movs	r3, #128	; 0x80
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000b70:	4017      	ands	r7, r2
        (auxsrc << CLOCKS_CLK_SYS_CTRL_AUXSRC_LSB),
        CLOCKS_CLK_SYS_CTRL_AUXSRC_BITS
    );

    if (has_glitchless_mux(clk_index)) {
10000b72:	4652      	mov	r2, sl
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000b74:	015b      	lsls	r3, r3, #5
10000b76:	4323      	orrs	r3, r4
10000b78:	601f      	str	r7, [r3, #0]
10000b7a:	2a01      	cmp	r2, #1
10000b7c:	d926      	bls.n	10000bcc <clock_configure+0xc8>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000b7e:	2380      	movs	r3, #128	; 0x80
10000b80:	2280      	movs	r2, #128	; 0x80
10000b82:	019b      	lsls	r3, r3, #6
10000b84:	4323      	orrs	r3, r4
10000b86:	0112      	lsls	r2, r2, #4
10000b88:	601a      	str	r2, [r3, #0]

    hw_set_bits(&clock->ctrl, CLOCKS_CLK_GPOUT0_CTRL_ENABLE_BITS);

    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock->div = div;
10000b8a:	464b      	mov	r3, r9

    // Store the configured frequency
    configured_freq[clk_index] = freq;
10000b8c:	2001      	movs	r0, #1
    clock->div = div;
10000b8e:	6063      	str	r3, [r4, #4]
    configured_freq[clk_index] = freq;
10000b90:	9b08      	ldr	r3, [sp, #32]
10000b92:	5173      	str	r3, [r6, r5]

    return true;
}
10000b94:	bce0      	pop	{r5, r6, r7}
10000b96:	46ba      	mov	sl, r7
10000b98:	46b1      	mov	r9, r6
10000b9a:	46a8      	mov	r8, r5
10000b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10000b9e:	4643      	mov	r3, r8
10000ba0:	2b01      	cmp	r3, #1
10000ba2:	d1cf      	bne.n	10000b44 <clock_configure+0x40>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000ba4:	23c0      	movs	r3, #192	; 0xc0
10000ba6:	2203      	movs	r2, #3
10000ba8:	019b      	lsls	r3, r3, #6
10000baa:	4323      	orrs	r3, r4
10000bac:	601a      	str	r2, [r3, #0]
        while (!(clock->selected & 1u))
10000bae:	3a02      	subs	r2, #2
10000bb0:	68a3      	ldr	r3, [r4, #8]
10000bb2:	421a      	tst	r2, r3
10000bb4:	d0fc      	beq.n	10000bb0 <clock_configure+0xac>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000bb6:	23e0      	movs	r3, #224	; 0xe0
10000bb8:	6822      	ldr	r2, [r4, #0]
    hw_write_masked(&clock->ctrl,
10000bba:	017f      	lsls	r7, r7, #5
10000bbc:	4057      	eors	r7, r2
10000bbe:	401f      	ands	r7, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000bc0:	2380      	movs	r3, #128	; 0x80
10000bc2:	015b      	lsls	r3, r3, #5
10000bc4:	4323      	orrs	r3, r4
10000bc6:	4e0a      	ldr	r6, [pc, #40]	; (10000bf0 <clock_configure+0xec>)
10000bc8:	601f      	str	r7, [r3, #0]
    return clk_index == clk_sys || clk_index == clk_ref;
10000bca:	00ad      	lsls	r5, r5, #2
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000bcc:	4642      	mov	r2, r8
10000bce:	6821      	ldr	r1, [r4, #0]
10000bd0:	4051      	eors	r1, r2
10000bd2:	2203      	movs	r2, #3
10000bd4:	400a      	ands	r2, r1
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000bd6:	601a      	str	r2, [r3, #0]
        while (!(clock->selected & (1u << src)))
10000bd8:	2201      	movs	r2, #1
10000bda:	4643      	mov	r3, r8
10000bdc:	409a      	lsls	r2, r3
10000bde:	68a3      	ldr	r3, [r4, #8]
10000be0:	421a      	tst	r2, r3
10000be2:	d0fc      	beq.n	10000bde <clock_configure+0xda>
10000be4:	e7cb      	b.n	10000b7e <clock_configure+0x7a>
        return false;
10000be6:	2000      	movs	r0, #0
10000be8:	e7d4      	b.n	10000b94 <clock_configure+0x90>
10000bea:	46c0      	nop			; (mov r8, r8)
10000bec:	40008000 	.word	0x40008000
10000bf0:	20023460 	.word	0x20023460

10000bf4 <clocks_init>:
/// \end::clock_configure[]

void clocks_init(void) {
10000bf4:	b530      	push	{r4, r5, lr}
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
10000bf6:	200c      	movs	r0, #12
void clocks_init(void) {
10000bf8:	b083      	sub	sp, #12
    watchdog_start_tick(XOSC_MHZ);
10000bfa:	f002 f899 	bl	10002d30 <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
10000bfe:	f000 ff91 	bl	10001b24 <running_on_fpga>
10000c02:	2800      	cmp	r0, #0
10000c04:	d00e      	beq.n	10000c24 <clocks_init+0x30>
        for (uint i = 0; i < CLK_COUNT; i++) {
            configured_freq[i] = 48 * MHZ;
10000c06:	4b9a      	ldr	r3, [pc, #616]	; (10000e70 <clocks_init+0x27c>)
10000c08:	4a9a      	ldr	r2, [pc, #616]	; (10000e74 <clocks_init+0x280>)
10000c0a:	601a      	str	r2, [r3, #0]
10000c0c:	605a      	str	r2, [r3, #4]
10000c0e:	609a      	str	r2, [r3, #8]
10000c10:	60da      	str	r2, [r3, #12]
10000c12:	611a      	str	r2, [r3, #16]
10000c14:	615a      	str	r2, [r3, #20]
10000c16:	619a      	str	r2, [r3, #24]
10000c18:	61da      	str	r2, [r3, #28]
10000c1a:	621a      	str	r2, [r3, #32]
        }
        configured_freq[clk_rtc] = 46875;
10000c1c:	4a96      	ldr	r2, [pc, #600]	; (10000e78 <clocks_init+0x284>)
10000c1e:	625a      	str	r2, [r3, #36]	; 0x24
    clock_configure(clk_peri,
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * MHZ,
                    125 * MHZ);
}
10000c20:	b003      	add	sp, #12
10000c22:	bd30      	pop	{r4, r5, pc}
    clocks_hw->resus.ctrl = 0;
10000c24:	4c95      	ldr	r4, [pc, #596]	; (10000e7c <clocks_init+0x288>)
10000c26:	67a0      	str	r0, [r4, #120]	; 0x78
    xosc_init();
10000c28:	f002 f88a 	bl	10002d40 <xosc_init>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000c2c:	2201      	movs	r2, #1
10000c2e:	4b94      	ldr	r3, [pc, #592]	; (10000e80 <clocks_init+0x28c>)
10000c30:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_sys].selected != 0x1)
10000c32:	6c63      	ldr	r3, [r4, #68]	; 0x44
10000c34:	2b01      	cmp	r3, #1
10000c36:	d1fc      	bne.n	10000c32 <clocks_init+0x3e>
10000c38:	2203      	movs	r2, #3
10000c3a:	4b92      	ldr	r3, [pc, #584]	; (10000e84 <clocks_init+0x290>)
10000c3c:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_ref].selected != 0x1)
10000c3e:	4a8f      	ldr	r2, [pc, #572]	; (10000e7c <clocks_init+0x288>)
10000c40:	6b93      	ldr	r3, [r2, #56]	; 0x38
10000c42:	2b01      	cmp	r3, #1
10000c44:	d1fc      	bne.n	10000c40 <clocks_init+0x4c>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000c46:	22c0      	movs	r2, #192	; 0xc0
10000c48:	4b8f      	ldr	r3, [pc, #572]	; (10000e88 <clocks_init+0x294>)
10000c4a:	0192      	lsls	r2, r2, #6
10000c4c:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000c4e:	4b8f      	ldr	r3, [pc, #572]	; (10000e8c <clocks_init+0x298>)
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
10000c50:	498f      	ldr	r1, [pc, #572]	; (10000e90 <clocks_init+0x29c>)
10000c52:	601a      	str	r2, [r3, #0]
10000c54:	0010      	movs	r0, r2
10000c56:	688b      	ldr	r3, [r1, #8]
10000c58:	4398      	bics	r0, r3
10000c5a:	1e03      	subs	r3, r0, #0
10000c5c:	d1fa      	bne.n	10000c54 <clocks_init+0x60>
    pll_init(pll_sys, 1, 1500 * MHZ, 6, 2);
10000c5e:	2402      	movs	r4, #2
10000c60:	2101      	movs	r1, #1
10000c62:	4a8c      	ldr	r2, [pc, #560]	; (10000e94 <clocks_init+0x2a0>)
10000c64:	488c      	ldr	r0, [pc, #560]	; (10000e98 <clocks_init+0x2a4>)
10000c66:	3306      	adds	r3, #6
10000c68:	9400      	str	r4, [sp, #0]
10000c6a:	f000 ff63 	bl	10001b34 <pll_init>
    pll_init(pll_usb, 1, 480 * MHZ, 5, 2);
10000c6e:	2305      	movs	r3, #5
10000c70:	4a8a      	ldr	r2, [pc, #552]	; (10000e9c <clocks_init+0x2a8>)
10000c72:	2101      	movs	r1, #1
10000c74:	488a      	ldr	r0, [pc, #552]	; (10000ea0 <clocks_init+0x2ac>)
10000c76:	9400      	str	r4, [sp, #0]
10000c78:	f000 ff5c 	bl	10001b34 <pll_init>
    if (div > clock->div)
10000c7c:	4b89      	ldr	r3, [pc, #548]	; (10000ea4 <clocks_init+0x2b0>)
10000c7e:	685a      	ldr	r2, [r3, #4]
10000c80:	2aff      	cmp	r2, #255	; 0xff
10000c82:	d802      	bhi.n	10000c8a <clocks_init+0x96>
        clock->div = div;
10000c84:	2280      	movs	r2, #128	; 0x80
10000c86:	0052      	lsls	r2, r2, #1
10000c88:	605a      	str	r2, [r3, #4]
10000c8a:	2280      	movs	r2, #128	; 0x80
        if (configured_freq[clk_index] > 0) {
10000c8c:	4c78      	ldr	r4, [pc, #480]	; (10000e70 <clocks_init+0x27c>)
10000c8e:	4b7d      	ldr	r3, [pc, #500]	; (10000e84 <clocks_init+0x290>)
10000c90:	6921      	ldr	r1, [r4, #16]
10000c92:	0112      	lsls	r2, r2, #4
10000c94:	4d83      	ldr	r5, [pc, #524]	; (10000ea4 <clocks_init+0x2b0>)
10000c96:	601a      	str	r2, [r3, #0]
10000c98:	2900      	cmp	r1, #0
10000c9a:	d005      	beq.n	10000ca8 <clocks_init+0xb4>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10000c9c:	6960      	ldr	r0, [r4, #20]
10000c9e:	f7ff fb3d 	bl	1000031c <__wrap___aeabi_uidiv>
10000ca2:	3001      	adds	r0, #1
            asm volatile (
10000ca4:	3801      	subs	r0, #1
10000ca6:	d1fd      	bne.n	10000ca4 <clocks_init+0xb0>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000ca8:	21e0      	movs	r1, #224	; 0xe0
10000caa:	4b7e      	ldr	r3, [pc, #504]	; (10000ea4 <clocks_init+0x2b0>)
10000cac:	2002      	movs	r0, #2
10000cae:	681a      	ldr	r2, [r3, #0]
10000cb0:	4011      	ands	r1, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000cb2:	2280      	movs	r2, #128	; 0x80
10000cb4:	0152      	lsls	r2, r2, #5
10000cb6:	432a      	orrs	r2, r5
10000cb8:	6011      	str	r1, [r2, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000cba:	6819      	ldr	r1, [r3, #0]
10000cbc:	4048      	eors	r0, r1
10000cbe:	2103      	movs	r1, #3
10000cc0:	4001      	ands	r1, r0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000cc2:	6011      	str	r1, [r2, #0]
        while (!(clock->selected & (1u << src)))
10000cc4:	2104      	movs	r1, #4
10000cc6:	689a      	ldr	r2, [r3, #8]
10000cc8:	4211      	tst	r1, r2
10000cca:	d0fc      	beq.n	10000cc6 <clocks_init+0xd2>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000ccc:	2280      	movs	r2, #128	; 0x80
10000cce:	2180      	movs	r1, #128	; 0x80
10000cd0:	0192      	lsls	r2, r2, #6
10000cd2:	432a      	orrs	r2, r5
10000cd4:	0109      	lsls	r1, r1, #4
10000cd6:	6011      	str	r1, [r2, #0]
    clock->div = div;
10000cd8:	2280      	movs	r2, #128	; 0x80
10000cda:	0052      	lsls	r2, r2, #1
10000cdc:	605a      	str	r2, [r3, #4]
    configured_freq[clk_index] = freq;
10000cde:	4b72      	ldr	r3, [pc, #456]	; (10000ea8 <clocks_init+0x2b4>)
10000ce0:	6123      	str	r3, [r4, #16]
    if (div > clock->div)
10000ce2:	4b72      	ldr	r3, [pc, #456]	; (10000eac <clocks_init+0x2b8>)
10000ce4:	6859      	ldr	r1, [r3, #4]
10000ce6:	29ff      	cmp	r1, #255	; 0xff
10000ce8:	d800      	bhi.n	10000cec <clocks_init+0xf8>
        clock->div = div;
10000cea:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000cec:	2103      	movs	r1, #3
10000cee:	4a64      	ldr	r2, [pc, #400]	; (10000e80 <clocks_init+0x28c>)
10000cf0:	4b6e      	ldr	r3, [pc, #440]	; (10000eac <clocks_init+0x2b8>)
10000cf2:	6011      	str	r1, [r2, #0]
        while (!(clock->selected & 1u))
10000cf4:	3902      	subs	r1, #2
10000cf6:	689a      	ldr	r2, [r3, #8]
10000cf8:	4211      	tst	r1, r2
10000cfa:	d0fc      	beq.n	10000cf6 <clocks_init+0x102>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000cfc:	20e0      	movs	r0, #224	; 0xe0
10000cfe:	681a      	ldr	r2, [r3, #0]
10000d00:	4010      	ands	r0, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000d02:	2280      	movs	r2, #128	; 0x80
10000d04:	0152      	lsls	r2, r2, #5
10000d06:	431a      	orrs	r2, r3
10000d08:	6010      	str	r0, [r2, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000d0a:	6818      	ldr	r0, [r3, #0]
10000d0c:	4048      	eors	r0, r1
10000d0e:	2103      	movs	r1, #3
10000d10:	4001      	ands	r1, r0
        while (!(clock->selected & (1u << src)))
10000d12:	2002      	movs	r0, #2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000d14:	6011      	str	r1, [r2, #0]
10000d16:	4965      	ldr	r1, [pc, #404]	; (10000eac <clocks_init+0x2b8>)
10000d18:	688a      	ldr	r2, [r1, #8]
10000d1a:	4210      	tst	r0, r2
10000d1c:	d0fc      	beq.n	10000d18 <clocks_init+0x124>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000d1e:	2280      	movs	r2, #128	; 0x80
10000d20:	0192      	lsls	r2, r2, #6
10000d22:	4313      	orrs	r3, r2
10000d24:	2280      	movs	r2, #128	; 0x80
10000d26:	0112      	lsls	r2, r2, #4
10000d28:	601a      	str	r2, [r3, #0]
    clock->div = div;
10000d2a:	2280      	movs	r2, #128	; 0x80
    configured_freq[clk_index] = freq;
10000d2c:	4b60      	ldr	r3, [pc, #384]	; (10000eb0 <clocks_init+0x2bc>)
    clock->div = div;
10000d2e:	0052      	lsls	r2, r2, #1
10000d30:	604a      	str	r2, [r1, #4]
    configured_freq[clk_index] = freq;
10000d32:	6163      	str	r3, [r4, #20]
    if (div > clock->div)
10000d34:	4b5f      	ldr	r3, [pc, #380]	; (10000eb4 <clocks_init+0x2c0>)
10000d36:	6859      	ldr	r1, [r3, #4]
10000d38:	29ff      	cmp	r1, #255	; 0xff
10000d3a:	d800      	bhi.n	10000d3e <clocks_init+0x14a>
        clock->div = div;
10000d3c:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000d3e:	2280      	movs	r2, #128	; 0x80
10000d40:	4b5d      	ldr	r3, [pc, #372]	; (10000eb8 <clocks_init+0x2c4>)
        if (configured_freq[clk_index] > 0) {
10000d42:	69e1      	ldr	r1, [r4, #28]
10000d44:	0112      	lsls	r2, r2, #4
10000d46:	4d5b      	ldr	r5, [pc, #364]	; (10000eb4 <clocks_init+0x2c0>)
10000d48:	601a      	str	r2, [r3, #0]
10000d4a:	2900      	cmp	r1, #0
10000d4c:	d005      	beq.n	10000d5a <clocks_init+0x166>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10000d4e:	6960      	ldr	r0, [r4, #20]
10000d50:	f7ff fae4 	bl	1000031c <__wrap___aeabi_uidiv>
10000d54:	3001      	adds	r0, #1
            asm volatile (
10000d56:	3801      	subs	r0, #1
10000d58:	d1fd      	bne.n	10000d56 <clocks_init+0x162>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000d5a:	22e0      	movs	r2, #224	; 0xe0
10000d5c:	4955      	ldr	r1, [pc, #340]	; (10000eb4 <clocks_init+0x2c0>)
10000d5e:	680b      	ldr	r3, [r1, #0]
10000d60:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000d62:	2380      	movs	r3, #128	; 0x80
10000d64:	015b      	lsls	r3, r3, #5
10000d66:	432b      	orrs	r3, r5
10000d68:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000d6a:	2380      	movs	r3, #128	; 0x80
10000d6c:	2280      	movs	r2, #128	; 0x80
10000d6e:	019b      	lsls	r3, r3, #6
10000d70:	432b      	orrs	r3, r5
10000d72:	0112      	lsls	r2, r2, #4
10000d74:	601a      	str	r2, [r3, #0]
    clock->div = div;
10000d76:	2280      	movs	r2, #128	; 0x80
    configured_freq[clk_index] = freq;
10000d78:	4b3e      	ldr	r3, [pc, #248]	; (10000e74 <clocks_init+0x280>)
    clock->div = div;
10000d7a:	0052      	lsls	r2, r2, #1
10000d7c:	604a      	str	r2, [r1, #4]
    configured_freq[clk_index] = freq;
10000d7e:	61e3      	str	r3, [r4, #28]
    if (div > clock->div)
10000d80:	4b4e      	ldr	r3, [pc, #312]	; (10000ebc <clocks_init+0x2c8>)
10000d82:	6859      	ldr	r1, [r3, #4]
10000d84:	29ff      	cmp	r1, #255	; 0xff
10000d86:	d800      	bhi.n	10000d8a <clocks_init+0x196>
        clock->div = div;
10000d88:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000d8a:	2280      	movs	r2, #128	; 0x80
10000d8c:	4b4c      	ldr	r3, [pc, #304]	; (10000ec0 <clocks_init+0x2cc>)
        if (configured_freq[clk_index] > 0) {
10000d8e:	6a21      	ldr	r1, [r4, #32]
10000d90:	0112      	lsls	r2, r2, #4
10000d92:	4d4a      	ldr	r5, [pc, #296]	; (10000ebc <clocks_init+0x2c8>)
10000d94:	601a      	str	r2, [r3, #0]
10000d96:	2900      	cmp	r1, #0
10000d98:	d005      	beq.n	10000da6 <clocks_init+0x1b2>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10000d9a:	6960      	ldr	r0, [r4, #20]
10000d9c:	f7ff fabe 	bl	1000031c <__wrap___aeabi_uidiv>
10000da0:	3001      	adds	r0, #1
            asm volatile (
10000da2:	3801      	subs	r0, #1
10000da4:	d1fd      	bne.n	10000da2 <clocks_init+0x1ae>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000da6:	22e0      	movs	r2, #224	; 0xe0
10000da8:	4944      	ldr	r1, [pc, #272]	; (10000ebc <clocks_init+0x2c8>)
10000daa:	680b      	ldr	r3, [r1, #0]
10000dac:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000dae:	2380      	movs	r3, #128	; 0x80
10000db0:	015b      	lsls	r3, r3, #5
10000db2:	432b      	orrs	r3, r5
10000db4:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000db6:	2380      	movs	r3, #128	; 0x80
10000db8:	2280      	movs	r2, #128	; 0x80
10000dba:	019b      	lsls	r3, r3, #6
10000dbc:	432b      	orrs	r3, r5
10000dbe:	0112      	lsls	r2, r2, #4
10000dc0:	601a      	str	r2, [r3, #0]
    clock->div = div;
10000dc2:	2380      	movs	r3, #128	; 0x80
    if (div > clock->div)
10000dc4:	2280      	movs	r2, #128	; 0x80
    clock->div = div;
10000dc6:	005b      	lsls	r3, r3, #1
10000dc8:	604b      	str	r3, [r1, #4]
    configured_freq[clk_index] = freq;
10000dca:	4b2a      	ldr	r3, [pc, #168]	; (10000e74 <clocks_init+0x280>)
    if (div > clock->div)
10000dcc:	02d2      	lsls	r2, r2, #11
    configured_freq[clk_index] = freq;
10000dce:	6223      	str	r3, [r4, #32]
    if (div > clock->div)
10000dd0:	4b3c      	ldr	r3, [pc, #240]	; (10000ec4 <clocks_init+0x2d0>)
10000dd2:	6859      	ldr	r1, [r3, #4]
10000dd4:	4291      	cmp	r1, r2
10000dd6:	d200      	bcs.n	10000dda <clocks_init+0x1e6>
        clock->div = div;
10000dd8:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000dda:	2280      	movs	r2, #128	; 0x80
10000ddc:	4b3a      	ldr	r3, [pc, #232]	; (10000ec8 <clocks_init+0x2d4>)
        if (configured_freq[clk_index] > 0) {
10000dde:	6a61      	ldr	r1, [r4, #36]	; 0x24
10000de0:	0112      	lsls	r2, r2, #4
10000de2:	4d38      	ldr	r5, [pc, #224]	; (10000ec4 <clocks_init+0x2d0>)
10000de4:	601a      	str	r2, [r3, #0]
10000de6:	2900      	cmp	r1, #0
10000de8:	d005      	beq.n	10000df6 <clocks_init+0x202>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10000dea:	6960      	ldr	r0, [r4, #20]
10000dec:	f7ff fa96 	bl	1000031c <__wrap___aeabi_uidiv>
10000df0:	3001      	adds	r0, #1
            asm volatile (
10000df2:	3801      	subs	r0, #1
10000df4:	d1fd      	bne.n	10000df2 <clocks_init+0x1fe>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000df6:	22e0      	movs	r2, #224	; 0xe0
10000df8:	4932      	ldr	r1, [pc, #200]	; (10000ec4 <clocks_init+0x2d0>)
10000dfa:	680b      	ldr	r3, [r1, #0]
10000dfc:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000dfe:	2380      	movs	r3, #128	; 0x80
10000e00:	015b      	lsls	r3, r3, #5
10000e02:	432b      	orrs	r3, r5
10000e04:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000e06:	2380      	movs	r3, #128	; 0x80
10000e08:	2280      	movs	r2, #128	; 0x80
10000e0a:	019b      	lsls	r3, r3, #6
10000e0c:	432b      	orrs	r3, r5
10000e0e:	0112      	lsls	r2, r2, #4
10000e10:	601a      	str	r2, [r3, #0]
    clock->div = div;
10000e12:	2380      	movs	r3, #128	; 0x80
10000e14:	02db      	lsls	r3, r3, #11
10000e16:	604b      	str	r3, [r1, #4]
    configured_freq[clk_index] = freq;
10000e18:	4b17      	ldr	r3, [pc, #92]	; (10000e78 <clocks_init+0x284>)
10000e1a:	6263      	str	r3, [r4, #36]	; 0x24
    if (div > clock->div)
10000e1c:	4b2b      	ldr	r3, [pc, #172]	; (10000ecc <clocks_init+0x2d8>)
10000e1e:	685a      	ldr	r2, [r3, #4]
10000e20:	2aff      	cmp	r2, #255	; 0xff
10000e22:	d802      	bhi.n	10000e2a <clocks_init+0x236>
        clock->div = div;
10000e24:	2280      	movs	r2, #128	; 0x80
10000e26:	0052      	lsls	r2, r2, #1
10000e28:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000e2a:	2280      	movs	r2, #128	; 0x80
10000e2c:	4b28      	ldr	r3, [pc, #160]	; (10000ed0 <clocks_init+0x2dc>)
        if (configured_freq[clk_index] > 0) {
10000e2e:	69a1      	ldr	r1, [r4, #24]
10000e30:	0112      	lsls	r2, r2, #4
10000e32:	4d26      	ldr	r5, [pc, #152]	; (10000ecc <clocks_init+0x2d8>)
10000e34:	601a      	str	r2, [r3, #0]
10000e36:	2900      	cmp	r1, #0
10000e38:	d005      	beq.n	10000e46 <clocks_init+0x252>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10000e3a:	6960      	ldr	r0, [r4, #20]
10000e3c:	f7ff fa6e 	bl	1000031c <__wrap___aeabi_uidiv>
10000e40:	3001      	adds	r0, #1
            asm volatile (
10000e42:	3801      	subs	r0, #1
10000e44:	d1fd      	bne.n	10000e42 <clocks_init+0x24e>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000e46:	22e0      	movs	r2, #224	; 0xe0
10000e48:	4920      	ldr	r1, [pc, #128]	; (10000ecc <clocks_init+0x2d8>)
10000e4a:	680b      	ldr	r3, [r1, #0]
10000e4c:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000e4e:	2380      	movs	r3, #128	; 0x80
10000e50:	015b      	lsls	r3, r3, #5
10000e52:	432b      	orrs	r3, r5
10000e54:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000e56:	2380      	movs	r3, #128	; 0x80
10000e58:	2280      	movs	r2, #128	; 0x80
10000e5a:	019b      	lsls	r3, r3, #6
10000e5c:	432b      	orrs	r3, r5
10000e5e:	0112      	lsls	r2, r2, #4
10000e60:	601a      	str	r2, [r3, #0]
    clock->div = div;
10000e62:	2380      	movs	r3, #128	; 0x80
10000e64:	005b      	lsls	r3, r3, #1
10000e66:	604b      	str	r3, [r1, #4]
    configured_freq[clk_index] = freq;
10000e68:	4b11      	ldr	r3, [pc, #68]	; (10000eb0 <clocks_init+0x2bc>)
10000e6a:	61a3      	str	r3, [r4, #24]
    return true;
10000e6c:	e6d8      	b.n	10000c20 <clocks_init+0x2c>
10000e6e:	46c0      	nop			; (mov r8, r8)
10000e70:	20023460 	.word	0x20023460
10000e74:	02dc6c00 	.word	0x02dc6c00
10000e78:	0000b71b 	.word	0x0000b71b
10000e7c:	40008000 	.word	0x40008000
10000e80:	4000b03c 	.word	0x4000b03c
10000e84:	4000b030 	.word	0x4000b030
10000e88:	4000e000 	.word	0x4000e000
10000e8c:	4000f000 	.word	0x4000f000
10000e90:	4000c000 	.word	0x4000c000
10000e94:	59682f00 	.word	0x59682f00
10000e98:	40028000 	.word	0x40028000
10000e9c:	1c9c3800 	.word	0x1c9c3800
10000ea0:	4002c000 	.word	0x4002c000
10000ea4:	40008030 	.word	0x40008030
10000ea8:	00b71b00 	.word	0x00b71b00
10000eac:	4000803c 	.word	0x4000803c
10000eb0:	07735940 	.word	0x07735940
10000eb4:	40008054 	.word	0x40008054
10000eb8:	4000b054 	.word	0x4000b054
10000ebc:	40008060 	.word	0x40008060
10000ec0:	4000b060 	.word	0x4000b060
10000ec4:	4000806c 	.word	0x4000806c
10000ec8:	4000b06c 	.word	0x4000b06c
10000ecc:	40008048 	.word	0x40008048
10000ed0:	4000b048 	.word	0x4000b048

10000ed4 <clock_get_hz>:

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(enum clock_index clk_index) {
    return configured_freq[clk_index];
10000ed4:	4b01      	ldr	r3, [pc, #4]	; (10000edc <clock_get_hz+0x8>)
10000ed6:	0080      	lsls	r0, r0, #2
10000ed8:	58c0      	ldr	r0, [r0, r3]
}
10000eda:	4770      	bx	lr
10000edc:	20023460 	.word	0x20023460

10000ee0 <critical_section_init>:

#if !PICO_NO_HARDWARE
static_assert(sizeof(critical_section_t) == 8, "");
#endif

void critical_section_init(critical_section_t *critsec) {
10000ee0:	b510      	push	{r4, lr}
10000ee2:	0004      	movs	r4, r0
    critical_section_init_with_lock_num(critsec, spin_lock_claim_unused(true));
10000ee4:	2001      	movs	r0, #1
10000ee6:	f001 f9d3 	bl	10002290 <spin_lock_claim_unused>
10000eea:	0001      	movs	r1, r0
}

void critical_section_init_with_lock_num(critical_section_t *critsec, uint lock_num) {
    lock_init(&critsec->core, lock_num);
10000eec:	0020      	movs	r0, r4
10000eee:	f000 faaf 	bl	10001450 <lock_init>
    __asm volatile ("dmb");
10000ef2:	f3bf 8f5f 	dmb	sy
}
10000ef6:	bd10      	pop	{r4, pc}

10000ef8 <__aeabi_double_init>:

bool running_on_fpga();
uint8_t rp2040_chip_version();

static inline uint8_t rp2040_rom_version() {
    return *(uint8_t*)0x13;
10000ef8:	2313      	movs	r3, #19
    panic("missing double function");
}
#endif
extern void double_table_shim_on_use_helper();

void __aeabi_double_init() {
10000efa:	b570      	push	{r4, r5, r6, lr}
    int rom_version = rp2040_rom_version();
10000efc:	781d      	ldrb	r5, [r3, #0]
#if PICO_DOUBLE_SUPPORT_ROM_V1
    if (rom_version == 1) {
10000efe:	2d01      	cmp	r5, #1
10000f00:	d010      	beq.n	10000f24 <__aeabi_double_init+0x2c>
        for(uint i=0;i<SF_TABLE_V2_SIZE/4;i++) {
            sd_table[i] = (uintptr_t)missing_double_func_shim;
        }
    }
#endif
    if (rom_version >= 2) {
10000f02:	dd0b      	ble.n	10000f1c <__aeabi_double_init+0x24>
        void *rom_table = rom_data_lookup(rom_table_code('S', 'D'));
10000f04:	4819      	ldr	r0, [pc, #100]	; (10000f6c <__aeabi_double_init+0x74>)
10000f06:	f7ff fd43 	bl	10000990 <rom_data_lookup>
        assert(*((uint8_t *)(((void *)rom_data_lookup(rom_table_code('S', 'F')))-2)) * 4 >= SF_TABLE_V2_SIZE);
        memcpy(&sd_table, rom_table, SF_TABLE_V2_SIZE);
10000f0a:	4c19      	ldr	r4, [pc, #100]	; (10000f70 <__aeabi_double_init+0x78>)
        void *rom_table = rom_data_lookup(rom_table_code('S', 'D'));
10000f0c:	0001      	movs	r1, r0
        memcpy(&sd_table, rom_table, SF_TABLE_V2_SIZE);
10000f0e:	2280      	movs	r2, #128	; 0x80
10000f10:	0020      	movs	r0, r4
10000f12:	f7ff fd15 	bl	10000940 <__wrap___aeabi_memcpy>
                panic(NULL);
            }
#endif
        }
    }
    if (rom_version < 3) {
10000f16:	2d02      	cmp	r5, #2
10000f18:	d001      	beq.n	10000f1e <__aeabi_double_init+0x26>
        // we use the unused entry for SINCOS
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
    }
}
10000f1a:	bd70      	pop	{r4, r5, r6, pc}
10000f1c:	4c14      	ldr	r4, [pc, #80]	; (10000f70 <__aeabi_double_init+0x78>)
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
10000f1e:	4b15      	ldr	r3, [pc, #84]	; (10000f74 <__aeabi_double_init+0x7c>)
10000f20:	64a3      	str	r3, [r4, #72]	; 0x48
}
10000f22:	e7fa      	b.n	10000f1a <__aeabi_double_init+0x22>
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
10000f24:	4b13      	ldr	r3, [pc, #76]	; (10000f74 <__aeabi_double_init+0x7c>)
            sd_table[i] = (uintptr_t)double_table_shim_on_use_helper;
10000f26:	4c12      	ldr	r4, [pc, #72]	; (10000f70 <__aeabi_double_init+0x78>)
10000f28:	6023      	str	r3, [r4, #0]
10000f2a:	6063      	str	r3, [r4, #4]
10000f2c:	60a3      	str	r3, [r4, #8]
10000f2e:	60e3      	str	r3, [r4, #12]
10000f30:	6123      	str	r3, [r4, #16]
10000f32:	6163      	str	r3, [r4, #20]
10000f34:	61a3      	str	r3, [r4, #24]
10000f36:	61e3      	str	r3, [r4, #28]
10000f38:	6223      	str	r3, [r4, #32]
10000f3a:	6263      	str	r3, [r4, #36]	; 0x24
10000f3c:	62a3      	str	r3, [r4, #40]	; 0x28
10000f3e:	62e3      	str	r3, [r4, #44]	; 0x2c
10000f40:	6323      	str	r3, [r4, #48]	; 0x30
10000f42:	6363      	str	r3, [r4, #52]	; 0x34
10000f44:	63a3      	str	r3, [r4, #56]	; 0x38
10000f46:	63e3      	str	r3, [r4, #60]	; 0x3c
10000f48:	6423      	str	r3, [r4, #64]	; 0x40
10000f4a:	6463      	str	r3, [r4, #68]	; 0x44
10000f4c:	64a3      	str	r3, [r4, #72]	; 0x48
10000f4e:	64e3      	str	r3, [r4, #76]	; 0x4c
10000f50:	6523      	str	r3, [r4, #80]	; 0x50
10000f52:	6563      	str	r3, [r4, #84]	; 0x54
10000f54:	65a3      	str	r3, [r4, #88]	; 0x58
10000f56:	65e3      	str	r3, [r4, #92]	; 0x5c
10000f58:	6623      	str	r3, [r4, #96]	; 0x60
10000f5a:	6663      	str	r3, [r4, #100]	; 0x64
10000f5c:	66a3      	str	r3, [r4, #104]	; 0x68
10000f5e:	66e3      	str	r3, [r4, #108]	; 0x6c
10000f60:	6723      	str	r3, [r4, #112]	; 0x70
10000f62:	6763      	str	r3, [r4, #116]	; 0x74
10000f64:	67a3      	str	r3, [r4, #120]	; 0x78
10000f66:	67e3      	str	r3, [r4, #124]	; 0x7c
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
10000f68:	64a3      	str	r3, [r4, #72]	; 0x48
10000f6a:	e7d6      	b.n	10000f1a <__aeabi_double_init+0x22>
10000f6c:	00004453 	.word	0x00004453
10000f70:	20003050 	.word	0x20003050
10000f74:	100007d1 	.word	0x100007d1

10000f78 <flash_get_unique_id>:
// Use standard RUID command to get a unique identifier for the flash (and
// hence the board)

static_assert(FLASH_UNIQUE_ID_SIZE_BYTES == FLASH_RUID_DATA_BYTES, "");

void flash_get_unique_id(uint8_t *id_out) {
10000f78:	b530      	push	{r4, r5, lr}
#if PICO_NO_FLASH
    panic_unsupported();
#else
    uint8_t txbuf[FLASH_RUID_TOTAL_BYTES] = {0};
10000f7a:	2500      	movs	r5, #0
void flash_get_unique_id(uint8_t *id_out) {
10000f7c:	b089      	sub	sp, #36	; 0x24
10000f7e:	0004      	movs	r4, r0
    uint8_t txbuf[FLASH_RUID_TOTAL_BYTES] = {0};
10000f80:	2209      	movs	r2, #9
10000f82:	2100      	movs	r1, #0
10000f84:	a801      	add	r0, sp, #4
10000f86:	9500      	str	r5, [sp, #0]
10000f88:	f7ff fcd4 	bl	10000934 <__wrap_memset>
    uint8_t rxbuf[FLASH_RUID_TOTAL_BYTES] = {0};
10000f8c:	2209      	movs	r2, #9
10000f8e:	2100      	movs	r1, #0
10000f90:	a805      	add	r0, sp, #20
10000f92:	9504      	str	r5, [sp, #16]
10000f94:	f7ff fcce 	bl	10000934 <__wrap_memset>
    txbuf[0] = FLASH_RUID_CMD;
10000f98:	234b      	movs	r3, #75	; 0x4b
10000f9a:	466a      	mov	r2, sp
    flash_do_cmd(txbuf, rxbuf, FLASH_RUID_TOTAL_BYTES);
10000f9c:	4668      	mov	r0, sp
    txbuf[0] = FLASH_RUID_CMD;
10000f9e:	7013      	strb	r3, [r2, #0]
    flash_do_cmd(txbuf, rxbuf, FLASH_RUID_TOTAL_BYTES);
10000fa0:	a904      	add	r1, sp, #16
10000fa2:	f005 ff15 	bl	10006dd0 <__flash_do_cmd.constprop.0_veneer>
    for (int i = 0; i < FLASH_RUID_DATA_BYTES; i++)
        id_out[i] = rxbuf[i + 1 + FLASH_RUID_DUMMY_BYTES];
10000fa6:	2115      	movs	r1, #21
10000fa8:	2208      	movs	r2, #8
10000faa:	0020      	movs	r0, r4
10000fac:	4469      	add	r1, sp
10000fae:	f7ff fcc7 	bl	10000940 <__wrap___aeabi_memcpy>
#endif
}
10000fb2:	b009      	add	sp, #36	; 0x24
10000fb4:	bd30      	pop	{r4, r5, pc}
10000fb6:	46c0      	nop			; (mov r8, r8)

10000fb8 <__aeabi_float_init>:
10000fb8:	2313      	movs	r3, #19
static __attribute__((noreturn)) void missing_float_func_shim() {
    panic("");
}
#endif

void __aeabi_float_init() {
10000fba:	b510      	push	{r4, lr}
    int rom_version = rp2040_rom_version();
    void *rom_table = rom_data_lookup(rom_table_code('S', 'F'));
10000fbc:	4812      	ldr	r0, [pc, #72]	; (10001008 <__aeabi_float_init+0x50>)
    int rom_version = rp2040_rom_version();
10000fbe:	781c      	ldrb	r4, [r3, #0]
    void *rom_table = rom_data_lookup(rom_table_code('S', 'F'));
10000fc0:	f7ff fce6 	bl	10000990 <rom_data_lookup>
10000fc4:	0001      	movs	r1, r0
#if PICO_FLOAT_SUPPORT_ROM_V1
    if (rom_version == 1) {
10000fc6:	2c01      	cmp	r4, #1
10000fc8:	d00a      	beq.n	10000fe0 <__aeabi_float_init+0x28>
        for(uint i=0;i<SF_TABLE_V2_SIZE/4;i++) {
            if (!sf_table[i]) sf_table[i] = (uintptr_t)missing_float_func_shim;
        }
    }
#endif
    if (rom_version >= 2) {
10000fca:	dd03      	ble.n	10000fd4 <__aeabi_float_init+0x1c>
        assert(*((uint8_t *)(rom_table-2)) * 4 >= SF_TABLE_V2_SIZE);
        memcpy(&sf_table, rom_table, SF_TABLE_V2_SIZE);
10000fcc:	2280      	movs	r2, #128	; 0x80
10000fce:	480f      	ldr	r0, [pc, #60]	; (1000100c <__aeabi_float_init+0x54>)
10000fd0:	f7ff fcb6 	bl	10000940 <__wrap___aeabi_memcpy>
    }
    sf_clz_func = rom_func_lookup(rom_table_code('L', '3'));
10000fd4:	480e      	ldr	r0, [pc, #56]	; (10001010 <__aeabi_float_init+0x58>)
10000fd6:	f7ff fcd3 	bl	10000980 <rom_func_lookup>
10000fda:	4b0e      	ldr	r3, [pc, #56]	; (10001014 <__aeabi_float_init+0x5c>)
10000fdc:	6018      	str	r0, [r3, #0]
}
10000fde:	bd10      	pop	{r4, pc}
        memcpy(&sf_table, rom_table, SF_TABLE_V1_SIZE);
10000fe0:	4c0a      	ldr	r4, [pc, #40]	; (1000100c <__aeabi_float_init+0x54>)
10000fe2:	2254      	movs	r2, #84	; 0x54
10000fe4:	0020      	movs	r0, r4
10000fe6:	f7ff fcab 	bl	10000940 <__wrap___aeabi_memcpy>
            sf_table[i] = (uintptr_t)float_table_shim_on_use_helper;
10000fea:	4b0b      	ldr	r3, [pc, #44]	; (10001018 <__aeabi_float_init+0x60>)
10000fec:	6563      	str	r3, [r4, #84]	; 0x54
10000fee:	65a3      	str	r3, [r4, #88]	; 0x58
10000ff0:	65e3      	str	r3, [r4, #92]	; 0x5c
10000ff2:	6623      	str	r3, [r4, #96]	; 0x60
10000ff4:	6663      	str	r3, [r4, #100]	; 0x64
10000ff6:	66a3      	str	r3, [r4, #104]	; 0x68
10000ff8:	66e3      	str	r3, [r4, #108]	; 0x6c
10000ffa:	6723      	str	r3, [r4, #112]	; 0x70
10000ffc:	6763      	str	r3, [r4, #116]	; 0x74
10000ffe:	67a3      	str	r3, [r4, #120]	; 0x78
10001000:	67e3      	str	r3, [r4, #124]	; 0x7c
        sf_table[SF_TABLE_FLOAT2INT/4] = sf_table[SF_TABLE_FLOAT2FIX/4] = (uintptr_t)float_table_shim_on_use_helper;
10001002:	6223      	str	r3, [r4, #32]
10001004:	61e3      	str	r3, [r4, #28]
    if (rom_version >= 2) {
10001006:	e7e5      	b.n	10000fd4 <__aeabi_float_init+0x1c>
10001008:	00004653 	.word	0x00004653
1000100c:	20003150 	.word	0x20003150
10001010:	0000334c 	.word	0x0000334c
10001014:	20023b64 	.word	0x20023b64
10001018:	100008e1 	.word	0x100008e1

1000101c <gpio_set_function>:
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, enum gpio_function fn) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    invalid_params_if(GPIO, fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&padsbank0_hw->io[gpio],
1000101c:	4a09      	ldr	r2, [pc, #36]	; (10001044 <gpio_set_function+0x28>)
1000101e:	0083      	lsls	r3, r0, #2
10001020:	4694      	mov	ip, r2
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001022:	2240      	movs	r2, #64	; 0x40
10001024:	4463      	add	r3, ip
void gpio_set_function(uint gpio, enum gpio_function fn) {
10001026:	b510      	push	{r4, lr}
10001028:	681c      	ldr	r4, [r3, #0]
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
1000102a:	00c0      	lsls	r0, r0, #3
1000102c:	4062      	eors	r2, r4
1000102e:	24c0      	movs	r4, #192	; 0xc0
10001030:	4014      	ands	r4, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001032:	2280      	movs	r2, #128	; 0x80
10001034:	0152      	lsls	r2, r2, #5
10001036:	4313      	orrs	r3, r2
10001038:	601c      	str	r4, [r3, #0]
1000103a:	4b03      	ldr	r3, [pc, #12]	; (10001048 <gpio_set_function+0x2c>)
1000103c:	469c      	mov	ip, r3
1000103e:	4460      	add	r0, ip
10001040:	6041      	str	r1, [r0, #4]
}
10001042:	bd10      	pop	{r4, pc}
10001044:	4001c004 	.word	0x4001c004
10001048:	40014000 	.word	0x40014000

1000104c <gpio_set_pulls>:

// Note that, on RP2040, setting both pulls enables a "bus keep" function,
// i.e. weak pull to whatever is current high/low state of GPIO.
void gpio_set_pulls(uint gpio, bool up, bool down) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(
1000104c:	4b0a      	ldr	r3, [pc, #40]	; (10001078 <gpio_set_pulls+0x2c>)
1000104e:	0080      	lsls	r0, r0, #2
10001050:	469c      	mov	ip, r3
            &padsbank0_hw->io[gpio],
            (!!up << PADS_BANK0_GPIO0_PUE_LSB) | (!!down << PADS_BANK0_GPIO0_PDE_LSB),
10001052:	2304      	movs	r3, #4
    hw_write_masked(
10001054:	4460      	add	r0, ip
            (!!up << PADS_BANK0_GPIO0_PUE_LSB) | (!!down << PADS_BANK0_GPIO0_PDE_LSB),
10001056:	2900      	cmp	r1, #0
10001058:	d001      	beq.n	1000105e <gpio_set_pulls+0x12>
1000105a:	2108      	movs	r1, #8
1000105c:	230c      	movs	r3, #12
1000105e:	2a00      	cmp	r2, #0
10001060:	d100      	bne.n	10001064 <gpio_set_pulls+0x18>
10001062:	000b      	movs	r3, r1
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001064:	6802      	ldr	r2, [r0, #0]
10001066:	4053      	eors	r3, r2
10001068:	220c      	movs	r2, #12
1000106a:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000106c:	2380      	movs	r3, #128	; 0x80
1000106e:	015b      	lsls	r3, r3, #5
10001070:	4318      	orrs	r0, r3
10001072:	6002      	str	r2, [r0, #0]
            PADS_BANK0_GPIO0_PUE_BITS | PADS_BANK0_GPIO0_PDE_BITS
    );
}
10001074:	4770      	bx	lr
10001076:	46c0      	nop			; (mov r8, r8)
10001078:	4001c004 	.word	0x4001c004

1000107c <gpio_set_outover>:
    );
}

void gpio_set_outover(uint gpio, uint value) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(&iobank0_hw->io[gpio].ctrl,
1000107c:	4b07      	ldr	r3, [pc, #28]	; (1000109c <gpio_set_outover+0x20>)
1000107e:	00c0      	lsls	r0, r0, #3
10001080:	469c      	mov	ip, r3
10001082:	4460      	add	r0, ip
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001084:	6803      	ldr	r3, [r0, #0]
                   value << IO_BANK0_GPIO0_CTRL_OUTOVER_LSB,
10001086:	0209      	lsls	r1, r1, #8
10001088:	4059      	eors	r1, r3
1000108a:	23c0      	movs	r3, #192	; 0xc0
1000108c:	009b      	lsls	r3, r3, #2
1000108e:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001090:	2380      	movs	r3, #128	; 0x80
10001092:	015b      	lsls	r3, r3, #5
10001094:	4318      	orrs	r0, r3
10001096:	6001      	str	r1, [r0, #0]
                   IO_BANK0_GPIO0_CTRL_OUTOVER_BITS
    );
}
10001098:	4770      	bx	lr
1000109a:	46c0      	nop			; (mov r8, r8)
1000109c:	40014004 	.word	0x40014004

100010a0 <gpio_init>:
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
}

void gpio_init(uint gpio) {
    sio_hw->gpio_oe_clr = 1ul << gpio;
100010a0:	2301      	movs	r3, #1
100010a2:	22d0      	movs	r2, #208	; 0xd0
100010a4:	4083      	lsls	r3, r0
100010a6:	0612      	lsls	r2, r2, #24
100010a8:	6293      	str	r3, [r2, #40]	; 0x28
    sio_hw->gpio_clr = 1ul << gpio;
100010aa:	6193      	str	r3, [r2, #24]
    hw_write_masked(&padsbank0_hw->io[gpio],
100010ac:	4a09      	ldr	r2, [pc, #36]	; (100010d4 <gpio_init+0x34>)
100010ae:	0083      	lsls	r3, r0, #2
100010b0:	4694      	mov	ip, r2
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100010b2:	2240      	movs	r2, #64	; 0x40
100010b4:	4463      	add	r3, ip
100010b6:	6819      	ldr	r1, [r3, #0]
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
100010b8:	00c0      	lsls	r0, r0, #3
100010ba:	404a      	eors	r2, r1
100010bc:	21c0      	movs	r1, #192	; 0xc0
100010be:	4011      	ands	r1, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100010c0:	2280      	movs	r2, #128	; 0x80
100010c2:	0152      	lsls	r2, r2, #5
100010c4:	4313      	orrs	r3, r2
100010c6:	6019      	str	r1, [r3, #0]
100010c8:	4b03      	ldr	r3, [pc, #12]	; (100010d8 <gpio_init+0x38>)
100010ca:	469c      	mov	ip, r3
100010cc:	2305      	movs	r3, #5
100010ce:	4460      	add	r0, ip
100010d0:	6043      	str	r3, [r0, #4]
    gpio_set_function(gpio, GPIO_FUNC_SIO);
}
100010d2:	4770      	bx	lr
100010d4:	4001c004 	.word	0x4001c004
100010d8:	40014000 	.word	0x40014000

100010dc <irq_set_enabled>:
    invalid_params_if(IRQ, num >= NUM_IRQS);
}

void irq_set_enabled(uint num, bool enabled) {
    check_irq_param(num);
    irq_set_mask_enabled(1u << num, enabled);
100010dc:	2301      	movs	r3, #1
100010de:	4083      	lsls	r3, r0
    check_irq_param(num);
    return 0 != ((1u << num) & *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)));
}

void irq_set_mask_enabled(uint32_t mask, bool enabled) {
    if (enabled) {
100010e0:	2900      	cmp	r1, #0
100010e2:	d004      	beq.n	100010ee <irq_set_enabled+0x12>
        // Clear pending before enable
        // (if IRQ is actually asserted, it will immediately re-pend)
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICPR_OFFSET)) = mask;
100010e4:	4a03      	ldr	r2, [pc, #12]	; (100010f4 <irq_set_enabled+0x18>)
100010e6:	6013      	str	r3, [r2, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)) = mask;
100010e8:	4a03      	ldr	r2, [pc, #12]	; (100010f8 <irq_set_enabled+0x1c>)
100010ea:	6013      	str	r3, [r2, #0]
}
100010ec:	4770      	bx	lr
    } else {
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
100010ee:	4a03      	ldr	r2, [pc, #12]	; (100010fc <irq_set_enabled+0x20>)
100010f0:	6013      	str	r3, [r2, #0]
}
100010f2:	e7fb      	b.n	100010ec <irq_set_enabled+0x10>
100010f4:	e000e280 	.word	0xe000e280
100010f8:	e000e100 	.word	0xe000e100
100010fc:	e000e180 	.word	0xe000e180

10001100 <irq_set_pending>:
    }
}

void irq_set_pending(uint num) {
    check_irq_param(num);
    *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISPR_OFFSET)) = 1u << num;
10001100:	2301      	movs	r3, #1
10001102:	4083      	lsls	r3, r0
10001104:	4a01      	ldr	r2, [pc, #4]	; (1000110c <irq_set_pending+0xc>)
10001106:	6013      	str	r3, [r2, #0]
}
10001108:	4770      	bx	lr
1000110a:	46c0      	nop			; (mov r8, r8)
1000110c:	e000e200 	.word	0xe000e200

10001110 <irq_get_vtable_handler>:
    return (irq_handler_t *) scb_hw->vtor;
10001110:	4b02      	ldr	r3, [pc, #8]	; (1000111c <irq_get_vtable_handler+0xc>)
    return (uintptr_t)raw_handler - (uintptr_t)irq_handler_chain_slots < sizeof(irq_handler_chain_slots);
}

irq_handler_t irq_get_vtable_handler(uint num) {
    check_irq_param(num);
    return get_vtable()[16 + num];
10001112:	3010      	adds	r0, #16
    return (irq_handler_t *) scb_hw->vtor;
10001114:	689b      	ldr	r3, [r3, #8]
    return get_vtable()[16 + num];
10001116:	0080      	lsls	r0, r0, #2
10001118:	58c0      	ldr	r0, [r0, r3]
}
1000111a:	4770      	bx	lr
1000111c:	e000ed00 	.word	0xe000ed00

10001120 <irq_set_exclusive_handler>:

void irq_set_exclusive_handler(uint num, irq_handler_t handler) {
10001120:	b570      	push	{r4, r5, r6, lr}
10001122:	000d      	movs	r5, r1
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001124:	f3ef 8610 	mrs	r6, PRIMASK
    __asm volatile ("cpsid i");
10001128:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000112a:	4a0f      	ldr	r2, [pc, #60]	; (10001168 <irq_set_exclusive_handler+0x48>)
1000112c:	6813      	ldr	r3, [r2, #0]
1000112e:	2b00      	cmp	r3, #0
10001130:	d0fc      	beq.n	1000112c <irq_set_exclusive_handler+0xc>
    __asm volatile ("dmb");
10001132:	f3bf 8f5f 	dmb	sy
    return (irq_handler_t *) scb_hw->vtor;
10001136:	4b0d      	ldr	r3, [pc, #52]	; (1000116c <irq_set_exclusive_handler+0x4c>)
    return get_vtable()[16 + num];
10001138:	3010      	adds	r0, #16
    return (irq_handler_t *) scb_hw->vtor;
1000113a:	689b      	ldr	r3, [r3, #8]
    return get_vtable()[16 + num];
1000113c:	0084      	lsls	r4, r0, #2
1000113e:	591b      	ldr	r3, [r3, r4]
    check_irq_param(num);
#if !PICO_NO_RAM_VECTOR_TABLE
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
    uint32_t save = spin_lock_blocking(lock);
    __unused irq_handler_t current = irq_get_vtable_handler(num);
    hard_assert(current == __unhandled_user_irq || current == handler);
10001140:	4a0b      	ldr	r2, [pc, #44]	; (10001170 <irq_set_exclusive_handler+0x50>)
10001142:	4293      	cmp	r3, r2
10001144:	d003      	beq.n	1000114e <irq_set_exclusive_handler+0x2e>
10001146:	429d      	cmp	r5, r3
10001148:	d001      	beq.n	1000114e <irq_set_exclusive_handler+0x2e>

#ifdef NDEBUG
extern void hard_assertion_failure();
static inline void hard_assert(bool condition, ...) {
    if (!condition)
        hard_assertion_failure();
1000114a:	f000 fdeb 	bl	10001d24 <hard_assertion_failure>
    return (irq_handler_t *) scb_hw->vtor;
1000114e:	4b07      	ldr	r3, [pc, #28]	; (1000116c <irq_set_exclusive_handler+0x4c>)
10001150:	689b      	ldr	r3, [r3, #8]
    get_vtable()[16 + num] = handler;
10001152:	511d      	str	r5, [r3, r4]
10001154:	f3bf 8f5f 	dmb	sy
10001158:	f3bf 8f5f 	dmb	sy
    *lock = 0;
1000115c:	2200      	movs	r2, #0
1000115e:	4b02      	ldr	r3, [pc, #8]	; (10001168 <irq_set_exclusive_handler+0x48>)
10001160:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001162:	f386 8810 	msr	PRIMASK, r6
    set_raw_irq_handler_and_unlock(num, handler, save);
#else
    panic_unsupported();
#endif
}
10001166:	bd70      	pop	{r4, r5, r6, pc}
10001168:	d0000124 	.word	0xd0000124
1000116c:	e000ed00 	.word	0xe000ed00
10001170:	100001cd 	.word	0x100001cd

10001174 <irq_remove_handler>:
    }
    set_raw_irq_handler_and_unlock(num, vtable_handler, save);
#endif
}

void irq_remove_handler(uint num, irq_handler_t handler) {
10001174:	b5f0      	push	{r4, r5, r6, r7, lr}
10001176:	46de      	mov	lr, fp
10001178:	4657      	mov	r7, sl
1000117a:	464e      	mov	r6, r9
1000117c:	4645      	mov	r5, r8
1000117e:	b5e0      	push	{r5, r6, r7, lr}
10001180:	000c      	movs	r4, r1
10001182:	b083      	sub	sp, #12
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001184:	f3ef 8a10 	mrs	sl, PRIMASK
    __asm volatile ("cpsid i");
10001188:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000118a:	4a5e      	ldr	r2, [pc, #376]	; (10001304 <irq_remove_handler+0x190>)
1000118c:	6813      	ldr	r3, [r2, #0]
1000118e:	2b00      	cmp	r3, #0
10001190:	d0fc      	beq.n	1000118c <irq_remove_handler+0x18>
    __asm volatile ("dmb");
10001192:	f3bf 8f5f 	dmb	sy
#if !PICO_NO_RAM_VECTOR_TABLE
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
    uint32_t save = spin_lock_blocking(lock);
    irq_handler_t vtable_handler = get_vtable()[16 + num];
10001196:	2210      	movs	r2, #16
10001198:	4691      	mov	r9, r2
1000119a:	4481      	add	r9, r0
1000119c:	464a      	mov	r2, r9
    return (irq_handler_t *) scb_hw->vtor;
1000119e:	4b5a      	ldr	r3, [pc, #360]	; (10001308 <irq_remove_handler+0x194>)
    irq_handler_t vtable_handler = get_vtable()[16 + num];
100011a0:	0096      	lsls	r6, r2, #2
    return (irq_handler_t *) scb_hw->vtor;
100011a2:	689b      	ldr	r3, [r3, #8]
    irq_handler_t vtable_handler = get_vtable()[16 + num];
100011a4:	599d      	ldr	r5, [r3, r6]
    if (vtable_handler != __unhandled_user_irq && vtable_handler != handler) {
100011a6:	4b59      	ldr	r3, [pc, #356]	; (1000130c <irq_remove_handler+0x198>)
100011a8:	4698      	mov	r8, r3
100011aa:	429d      	cmp	r5, r3
100011ac:	d005      	beq.n	100011ba <irq_remove_handler+0x46>
100011ae:	42a5      	cmp	r5, r4
100011b0:	d016      	beq.n	100011e0 <irq_remove_handler+0x6c>
    return (uintptr_t)raw_handler - (uintptr_t)irq_handler_chain_slots < sizeof(irq_handler_chain_slots);
100011b2:	4f57      	ldr	r7, [pc, #348]	; (10001310 <irq_remove_handler+0x19c>)
100011b4:	1beb      	subs	r3, r5, r7
#if !PICO_DISABLE_SHARED_IRQ_HANDLERS && PICO_MAX_SHARED_IRQ_HANDLERS
        if (is_shared_irq_raw_handler(vtable_handler)) {
100011b6:	2b2f      	cmp	r3, #47	; 0x2f
100011b8:	d914      	bls.n	100011e4 <irq_remove_handler+0x70>
    return (irq_handler_t *) scb_hw->vtor;
100011ba:	4b53      	ldr	r3, [pc, #332]	; (10001308 <irq_remove_handler+0x194>)
100011bc:	689b      	ldr	r3, [r3, #8]
    get_vtable()[16 + num] = handler;
100011be:	519d      	str	r5, [r3, r6]
100011c0:	f3bf 8f5f 	dmb	sy
100011c4:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100011c8:	2200      	movs	r2, #0
100011ca:	4b4e      	ldr	r3, [pc, #312]	; (10001304 <irq_remove_handler+0x190>)
100011cc:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100011ce:	f38a 8810 	msr	PRIMASK, sl
    }
    set_raw_irq_handler_and_unlock(num, vtable_handler, save);
#else
    panic_unsupported();
#endif
}
100011d2:	b003      	add	sp, #12
100011d4:	bcf0      	pop	{r4, r5, r6, r7}
100011d6:	46bb      	mov	fp, r7
100011d8:	46b2      	mov	sl, r6
100011da:	46a9      	mov	r9, r5
100011dc:	46a0      	mov	r8, r4
100011de:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vtable_handler = __unhandled_user_irq;
100011e0:	001d      	movs	r5, r3
100011e2:	e7ea      	b.n	100011ba <irq_remove_handler+0x46>
    return 0 != ((1u << num) & *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)));
100011e4:	2301      	movs	r3, #1
100011e6:	4083      	lsls	r3, r0
100011e8:	469b      	mov	fp, r3
100011ea:	465a      	mov	r2, fp
100011ec:	4b49      	ldr	r3, [pc, #292]	; (10001314 <irq_remove_handler+0x1a0>)
100011ee:	681b      	ldr	r3, [r3, #0]
100011f0:	401a      	ands	r2, r3
100011f2:	9200      	str	r2, [sp, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
100011f4:	465a      	mov	r2, fp
100011f6:	4b48      	ldr	r3, [pc, #288]	; (10001318 <irq_remove_handler+0x1a4>)
100011f8:	601a      	str	r2, [r3, #0]
    __asm volatile ("dmb");
100011fa:	f3bf 8f5f 	dmb	sy
            uint exception = __get_current_exception();
100011fe:	f7ff f832 	bl	10000266 <__get_current_exception>
10001202:	9001      	str	r0, [sp, #4]
            hard_assert(!exception || exception == num + 16);
10001204:	2800      	cmp	r0, #0
10001206:	d003      	beq.n	10001210 <irq_remove_handler+0x9c>
10001208:	4581      	cmp	r9, r0
1000120a:	d001      	beq.n	10001210 <irq_remove_handler+0x9c>
1000120c:	f000 fd8a 	bl	10001d24 <hard_assertion_failure>
    return (void *) (((uintptr_t) addr) & ~0x1);
10001210:	2301      	movs	r3, #1
10001212:	0029      	movs	r1, r5
10001214:	4399      	bics	r1, r3
            while (to_free_slot->handler != handler) {
10001216:	688b      	ldr	r3, [r1, #8]
10001218:	42a3      	cmp	r3, r4
1000121a:	d068      	beq.n	100012ee <irq_remove_handler+0x17a>
1000121c:	000a      	movs	r2, r1
1000121e:	e007      	b.n	10001230 <irq_remove_handler+0xbc>
                to_free_slot = &irq_handler_chain_slots[to_free_slot->link];
10001220:	0043      	lsls	r3, r0, #1
10001222:	181b      	adds	r3, r3, r0
10001224:	009b      	lsls	r3, r3, #2
10001226:	18fb      	adds	r3, r7, r3
            while (to_free_slot->handler != handler) {
10001228:	6898      	ldr	r0, [r3, #8]
1000122a:	42a0      	cmp	r0, r4
1000122c:	d011      	beq.n	10001252 <irq_remove_handler+0xde>
                to_free_slot = &irq_handler_chain_slots[to_free_slot->link];
1000122e:	001a      	movs	r2, r3
                if (to_free_slot->link < 0) break;
10001230:	2006      	movs	r0, #6
10001232:	5610      	ldrsb	r0, [r2, r0]
10001234:	2800      	cmp	r0, #0
10001236:	daf3      	bge.n	10001220 <irq_remove_handler+0xac>
    if (enabled) {
10001238:	9b00      	ldr	r3, [sp, #0]
1000123a:	2b00      	cmp	r3, #0
1000123c:	d005      	beq.n	1000124a <irq_remove_handler+0xd6>
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICPR_OFFSET)) = mask;
1000123e:	465a      	mov	r2, fp
10001240:	4b36      	ldr	r3, [pc, #216]	; (1000131c <irq_remove_handler+0x1a8>)
10001242:	601a      	str	r2, [r3, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)) = mask;
10001244:	4b33      	ldr	r3, [pc, #204]	; (10001314 <irq_remove_handler+0x1a0>)
10001246:	601a      	str	r2, [r3, #0]
10001248:	e7b7      	b.n	100011ba <irq_remove_handler+0x46>
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
1000124a:	465a      	mov	r2, fp
1000124c:	4b32      	ldr	r3, [pc, #200]	; (10001318 <irq_remove_handler+0x1a4>)
1000124e:	601a      	str	r2, [r3, #0]
10001250:	e7b3      	b.n	100011ba <irq_remove_handler+0x46>
                int next_slot_index = to_free_slot->link;
10001252:	2006      	movs	r0, #6
10001254:	5618      	ldrsb	r0, [r3, r0]
                if (next_slot_index >= 0) {
10001256:	2800      	cmp	r0, #0
10001258:	db21      	blt.n	1000129e <irq_remove_handler+0x12a>
                    to_free_slot->handler = next_slot->handler;
1000125a:	0042      	lsls	r2, r0, #1
1000125c:	1811      	adds	r1, r2, r0
1000125e:	0089      	lsls	r1, r1, #2
10001260:	187c      	adds	r4, r7, r1
10001262:	4688      	mov	r8, r1
10001264:	68a1      	ldr	r1, [r4, #8]
10001266:	6099      	str	r1, [r3, #8]
                    to_free_slot->priority = next_slot->priority;
10001268:	79e1      	ldrb	r1, [r4, #7]
1000126a:	71d9      	strb	r1, [r3, #7]
                    to_free_slot->link = next_slot->link;
1000126c:	2106      	movs	r1, #6
1000126e:	5661      	ldrsb	r1, [r4, r1]
10001270:	7199      	strb	r1, [r3, #6]
                    to_free_slot->inst3 = next_slot->link >= 0 ?
10001272:	2900      	cmp	r1, #0
10001274:	db2b      	blt.n	100012ce <irq_remove_handler+0x15a>
    int32_t i_addr = (*inst) << 21u;
10001276:	88a4      	ldrh	r4, [r4, #4]
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10001278:	1af9      	subs	r1, r7, r3
    int32_t i_addr = (*inst) << 21u;
1000127a:	0564      	lsls	r4, r4, #21
    return inst + 2 + i_addr;
1000127c:	1524      	asrs	r4, r4, #20
1000127e:	4444      	add	r4, r8
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10001280:	1909      	adds	r1, r1, r4
    return 0xe000 | (delta & 0x7ff);
10001282:	24e0      	movs	r4, #224	; 0xe0
10001284:	0509      	lsls	r1, r1, #20
10001286:	0d49      	lsrs	r1, r1, #21
10001288:	0224      	lsls	r4, r4, #8
1000128a:	4321      	orrs	r1, r4
                    to_free_slot->inst3 = next_slot->link >= 0 ?
1000128c:	8099      	strh	r1, [r3, #4]
                    next_slot->link = irq_hander_chain_free_slot_head;
1000128e:	1812      	adds	r2, r2, r0
10001290:	4b23      	ldr	r3, [pc, #140]	; (10001320 <irq_remove_handler+0x1ac>)
10001292:	0092      	lsls	r2, r2, #2
10001294:	18bf      	adds	r7, r7, r2
10001296:	781a      	ldrb	r2, [r3, #0]
                    irq_hander_chain_free_slot_head = next_slot_index;
10001298:	7018      	strb	r0, [r3, #0]
                    next_slot->link = irq_hander_chain_free_slot_head;
1000129a:	71ba      	strb	r2, [r7, #6]
                    irq_hander_chain_free_slot_head = next_slot_index;
1000129c:	e7cc      	b.n	10001238 <irq_remove_handler+0xc4>
                    if (!exception) {
1000129e:	9801      	ldr	r0, [sp, #4]
100012a0:	2800      	cmp	r0, #0
100012a2:	d117      	bne.n	100012d4 <irq_remove_handler+0x160>
                            prev_slot->link = -1;
100012a4:	30ff      	adds	r0, #255	; 0xff
100012a6:	7190      	strb	r0, [r2, #6]
                            prev_slot->inst3 = 0xbd00; // pop {pc}
100012a8:	481e      	ldr	r0, [pc, #120]	; (10001324 <irq_remove_handler+0x1b0>)
100012aa:	8090      	strh	r0, [r2, #4]
                        to_free_slot->link = irq_hander_chain_free_slot_head;
100012ac:	4a1c      	ldr	r2, [pc, #112]	; (10001320 <irq_remove_handler+0x1ac>)
            int to_free_slot_index = to_free_slot - irq_handler_chain_slots;
100012ae:	1bc9      	subs	r1, r1, r7
                        to_free_slot->link = irq_hander_chain_free_slot_head;
100012b0:	7810      	ldrb	r0, [r2, #0]
            int to_free_slot_index = to_free_slot - irq_handler_chain_slots;
100012b2:	1089      	asrs	r1, r1, #2
                        to_free_slot->link = irq_hander_chain_free_slot_head;
100012b4:	7198      	strb	r0, [r3, #6]
            int to_free_slot_index = to_free_slot - irq_handler_chain_slots;
100012b6:	008b      	lsls	r3, r1, #2
100012b8:	185b      	adds	r3, r3, r1
100012ba:	0118      	lsls	r0, r3, #4
100012bc:	181b      	adds	r3, r3, r0
100012be:	0218      	lsls	r0, r3, #8
100012c0:	181b      	adds	r3, r3, r0
100012c2:	0418      	lsls	r0, r3, #16
100012c4:	181b      	adds	r3, r3, r0
100012c6:	005b      	lsls	r3, r3, #1
100012c8:	185b      	adds	r3, r3, r1
                        irq_hander_chain_free_slot_head = to_free_slot_index;
100012ca:	7013      	strb	r3, [r2, #0]
100012cc:	e7b4      	b.n	10001238 <irq_remove_handler+0xc4>
                    to_free_slot->inst3 = next_slot->link >= 0 ?
100012ce:	21bd      	movs	r1, #189	; 0xbd
100012d0:	0209      	lsls	r1, r1, #8
100012d2:	e7db      	b.n	1000128c <irq_remove_handler+0x118>
                        insert_branch_and_link(&to_free_slot->inst3, irq_handler_chain_remove_tail);
100012d4:	4a14      	ldr	r2, [pc, #80]	; (10001328 <irq_remove_handler+0x1b4>)
    from[0] = 0xf000 | ((delta >> 11u) & 0x7ffu);
100012d6:	4915      	ldr	r1, [pc, #84]	; (1000132c <irq_remove_handler+0x1b8>)
                        insert_branch_and_link(&to_free_slot->inst3, irq_handler_chain_remove_tail);
100012d8:	1ad2      	subs	r2, r2, r3
    uint32_t delta = (ui_to - ui_from - 4) / 2;
100012da:	3a08      	subs	r2, #8
    from[0] = 0xf000 | ((delta >> 11u) & 0x7ffu);
100012dc:	0250      	lsls	r0, r2, #9
100012de:	0d40      	lsrs	r0, r0, #21
100012e0:	4301      	orrs	r1, r0
100012e2:	8099      	strh	r1, [r3, #4]
    from[1] = 0xf800 | (delta & 0x7ffu);
100012e4:	4912      	ldr	r1, [pc, #72]	; (10001330 <irq_remove_handler+0x1bc>)
    uint32_t delta = (ui_to - ui_from - 4) / 2;
100012e6:	0852      	lsrs	r2, r2, #1
    from[1] = 0xf800 | (delta & 0x7ffu);
100012e8:	430a      	orrs	r2, r1
100012ea:	80da      	strh	r2, [r3, #6]
}
100012ec:	e7a4      	b.n	10001238 <irq_remove_handler+0xc4>
                int next_slot_index = to_free_slot->link;
100012ee:	2006      	movs	r0, #6
100012f0:	5608      	ldrsb	r0, [r1, r0]
                if (next_slot_index >= 0) {
100012f2:	000b      	movs	r3, r1
100012f4:	2800      	cmp	r0, #0
100012f6:	dab0      	bge.n	1000125a <irq_remove_handler+0xe6>
                    if (!exception) {
100012f8:	9a01      	ldr	r2, [sp, #4]
100012fa:	2a00      	cmp	r2, #0
100012fc:	d1ea      	bne.n	100012d4 <irq_remove_handler+0x160>
                            vtable_handler = __unhandled_user_irq;
100012fe:	4645      	mov	r5, r8
10001300:	e7d4      	b.n	100012ac <irq_remove_handler+0x138>
10001302:	46c0      	nop			; (mov r8, r8)
10001304:	d0000124 	.word	0xd0000124
10001308:	e000ed00 	.word	0xe000ed00
1000130c:	100001cd 	.word	0x100001cd
10001310:	200026c0 	.word	0x200026c0
10001314:	e000e100 	.word	0xe000e100
10001318:	e000e180 	.word	0xe000e180
1000131c:	e000e280 	.word	0xe000e280
10001320:	20023b8a 	.word	0x20023b8a
10001324:	ffffbd00 	.word	0xffffbd00
10001328:	200026fa 	.word	0x200026fa
1000132c:	fffff000 	.word	0xfffff000
10001330:	fffff800 	.word	0xfffff800

10001334 <irq_set_priority>:

void irq_set_priority(uint num, uint8_t hardware_priority) {
    check_irq_param(num);

    // note that only 32 bit writes are supported
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001334:	2303      	movs	r3, #3
void irq_set_priority(uint num, uint8_t hardware_priority) {
10001336:	b510      	push	{r4, lr}
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001338:	0004      	movs	r4, r0
1000133a:	4a07      	ldr	r2, [pc, #28]	; (10001358 <irq_set_priority+0x24>)
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
1000133c:	4018      	ands	r0, r3
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
1000133e:	4694      	mov	ip, r2
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001340:	00c0      	lsls	r0, r0, #3
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001342:	439c      	bics	r4, r3
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001344:	33fc      	adds	r3, #252	; 0xfc
10001346:	4083      	lsls	r3, r0
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001348:	4464      	add	r4, ip
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
1000134a:	6822      	ldr	r2, [r4, #0]
1000134c:	4081      	lsls	r1, r0
1000134e:	439a      	bics	r2, r3
10001350:	0013      	movs	r3, r2
10001352:	430b      	orrs	r3, r1
10001354:	6023      	str	r3, [r4, #0]
}
10001356:	bd10      	pop	{r4, pc}
10001358:	e000e400 	.word	0xe000e400

1000135c <irq_add_tail_to_free_list>:

#if !PICO_DISABLE_SHARED_IRQ_HANDLERS && PICO_MAX_SHARED_IRQ_HANDLERS
// used by irq_handler_chain.S to remove the last link in a handler chain after it executes
// note this must be called only with the last slot in a chain (and during the exception)
void irq_add_tail_to_free_list(struct irq_handler_chain_slot *slot) {
1000135c:	b570      	push	{r4, r5, r6, lr}
    return (void *) (((uintptr_t) addr) | 0x1);
1000135e:	2501      	movs	r5, #1
void irq_add_tail_to_free_list(struct irq_handler_chain_slot *slot) {
10001360:	0004      	movs	r4, r0
    return (void *) (((uintptr_t) addr) | 0x1);
10001362:	4305      	orrs	r5, r0
    irq_handler_t slot_handler = (irq_handler_t) add_thumb_bit(slot);
    assert(is_shared_irq_raw_handler(slot_handler));

    int exception = __get_current_exception();
10001364:	f7fe ff7f 	bl	10000266 <__get_current_exception>
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001368:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
1000136c:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000136e:	4a24      	ldr	r2, [pc, #144]	; (10001400 <irq_add_tail_to_free_list+0xa4>)
10001370:	6813      	ldr	r3, [r2, #0]
10001372:	2b00      	cmp	r3, #0
10001374:	d0fc      	beq.n	10001370 <irq_add_tail_to_free_list+0x14>
    __asm volatile ("dmb");
10001376:	f3bf 8f5f 	dmb	sy
    assert(exception);
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
    uint32_t save = spin_lock_blocking(lock);
    int slot_index = slot - irq_handler_chain_slots;
1000137a:	4e22      	ldr	r6, [pc, #136]	; (10001404 <irq_add_tail_to_free_list+0xa8>)
    if (slot_handler == get_vtable()[exception]) {
1000137c:	0080      	lsls	r0, r0, #2
    int slot_index = slot - irq_handler_chain_slots;
1000137e:	1ba1      	subs	r1, r4, r6
10001380:	1089      	asrs	r1, r1, #2
10001382:	008a      	lsls	r2, r1, #2
10001384:	1852      	adds	r2, r2, r1
10001386:	0113      	lsls	r3, r2, #4
10001388:	18d2      	adds	r2, r2, r3
1000138a:	0213      	lsls	r3, r2, #8
1000138c:	18d2      	adds	r2, r2, r3
1000138e:	0413      	lsls	r3, r2, #16
10001390:	18d3      	adds	r3, r2, r3
    return (irq_handler_t *) scb_hw->vtor;
10001392:	4a1d      	ldr	r2, [pc, #116]	; (10001408 <irq_add_tail_to_free_list+0xac>)
    int slot_index = slot - irq_handler_chain_slots;
10001394:	005b      	lsls	r3, r3, #1
10001396:	185b      	adds	r3, r3, r1
    return (irq_handler_t *) scb_hw->vtor;
10001398:	6891      	ldr	r1, [r2, #8]
    if (slot_handler == get_vtable()[exception]) {
1000139a:	5809      	ldr	r1, [r1, r0]
1000139c:	42a9      	cmp	r1, r5
1000139e:	d01c      	beq.n	100013da <irq_add_tail_to_free_list+0x7e>
        get_vtable()[exception] = __unhandled_user_irq;
    } else {
        bool __unused found = false;
        // need to find who points at the slot and update it
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
            if (irq_handler_chain_slots[i].link == slot_index) {
100013a0:	2206      	movs	r2, #6
100013a2:	56b2      	ldrsb	r2, [r6, r2]
100013a4:	429a      	cmp	r2, r3
100013a6:	d01c      	beq.n	100013e2 <irq_add_tail_to_free_list+0x86>
100013a8:	2212      	movs	r2, #18
100013aa:	56b2      	ldrsb	r2, [r6, r2]
100013ac:	4293      	cmp	r3, r2
100013ae:	d022      	beq.n	100013f6 <irq_add_tail_to_free_list+0x9a>
100013b0:	221e      	movs	r2, #30
100013b2:	56b2      	ldrsb	r2, [r6, r2]
100013b4:	4293      	cmp	r3, r2
100013b6:	d020      	beq.n	100013fa <irq_add_tail_to_free_list+0x9e>
100013b8:	222a      	movs	r2, #42	; 0x2a
100013ba:	56b2      	ldrsb	r2, [r6, r2]
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
100013bc:	2103      	movs	r1, #3
            if (irq_handler_chain_slots[i].link == slot_index) {
100013be:	429a      	cmp	r2, r3
100013c0:	d010      	beq.n	100013e4 <irq_add_tail_to_free_list+0x88>
            }
        }
        assert(found);
    }
    // add slot to free list
    slot->link = irq_hander_chain_free_slot_head;
100013c2:	4a12      	ldr	r2, [pc, #72]	; (1000140c <irq_add_tail_to_free_list+0xb0>)
100013c4:	7811      	ldrb	r1, [r2, #0]
    irq_hander_chain_free_slot_head = slot_index;
100013c6:	7013      	strb	r3, [r2, #0]
    slot->link = irq_hander_chain_free_slot_head;
100013c8:	71a1      	strb	r1, [r4, #6]
100013ca:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100013ce:	2200      	movs	r2, #0
100013d0:	4b0b      	ldr	r3, [pc, #44]	; (10001400 <irq_add_tail_to_free_list+0xa4>)
100013d2:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100013d4:	f38c 8810 	msr	PRIMASK, ip
    spin_unlock(lock, save);
}
100013d8:	bd70      	pop	{r4, r5, r6, pc}
    return (irq_handler_t *) scb_hw->vtor;
100013da:	6892      	ldr	r2, [r2, #8]
        get_vtable()[exception] = __unhandled_user_irq;
100013dc:	490c      	ldr	r1, [pc, #48]	; (10001410 <irq_add_tail_to_free_list+0xb4>)
100013de:	5011      	str	r1, [r2, r0]
100013e0:	e7ef      	b.n	100013c2 <irq_add_tail_to_free_list+0x66>
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
100013e2:	2100      	movs	r1, #0
                irq_handler_chain_slots[i].link = -1;
100013e4:	004a      	lsls	r2, r1, #1
100013e6:	1852      	adds	r2, r2, r1
100013e8:	21ff      	movs	r1, #255	; 0xff
100013ea:	0092      	lsls	r2, r2, #2
100013ec:	18b2      	adds	r2, r6, r2
100013ee:	7191      	strb	r1, [r2, #6]
                irq_handler_chain_slots[i].inst3 = 0xbd00; // pop {pc}
100013f0:	4908      	ldr	r1, [pc, #32]	; (10001414 <irq_add_tail_to_free_list+0xb8>)
100013f2:	8091      	strh	r1, [r2, #4]
                break;
100013f4:	e7e5      	b.n	100013c2 <irq_add_tail_to_free_list+0x66>
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
100013f6:	2101      	movs	r1, #1
100013f8:	e7f4      	b.n	100013e4 <irq_add_tail_to_free_list+0x88>
100013fa:	2102      	movs	r1, #2
100013fc:	e7f2      	b.n	100013e4 <irq_add_tail_to_free_list+0x88>
100013fe:	46c0      	nop			; (mov r8, r8)
10001400:	d0000124 	.word	0xd0000124
10001404:	200026c0 	.word	0x200026c0
10001408:	e000ed00 	.word	0xe000ed00
1000140c:	20023b8a 	.word	0x20023b8a
10001410:	100001cd 	.word	0x100001cd
10001414:	ffffbd00 	.word	0xffffbd00

10001418 <irq_init_priorities>:
#endif

void irq_init_priorities() {
10001418:	b5f0      	push	{r4, r5, r6, r7, lr}
#if PICO_DEFAULT_IRQ_PRIORITY != 0
    for (uint irq = 0; irq < NUM_IRQS; irq++) {
1000141a:	2200      	movs	r2, #0
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
1000141c:	2403      	movs	r4, #3
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
1000141e:	27ff      	movs	r7, #255	; 0xff
10001420:	2680      	movs	r6, #128	; 0x80
10001422:	0020      	movs	r0, r4
10001424:	003d      	movs	r5, r7
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001426:	4b09      	ldr	r3, [pc, #36]	; (1000144c <irq_init_priorities+0x34>)
10001428:	0011      	movs	r1, r2
1000142a:	469c      	mov	ip, r3
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
1000142c:	4010      	ands	r0, r2
1000142e:	00c0      	lsls	r0, r0, #3
10001430:	4085      	lsls	r5, r0
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001432:	43a1      	bics	r1, r4
10001434:	4461      	add	r1, ip
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001436:	680b      	ldr	r3, [r1, #0]
    for (uint irq = 0; irq < NUM_IRQS; irq++) {
10001438:	3201      	adds	r2, #1
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
1000143a:	43ab      	bics	r3, r5
1000143c:	0035      	movs	r5, r6
1000143e:	4085      	lsls	r5, r0
10001440:	432b      	orrs	r3, r5
10001442:	600b      	str	r3, [r1, #0]
    for (uint irq = 0; irq < NUM_IRQS; irq++) {
10001444:	2a20      	cmp	r2, #32
10001446:	d1ec      	bne.n	10001422 <irq_init_priorities+0xa>
        irq_set_priority(irq, PICO_DEFAULT_IRQ_PRIORITY);
    }
#endif
}
10001448:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000144a:	46c0      	nop			; (mov r8, r8)
1000144c:	e000e400 	.word	0xe000e400

10001450 <lock_init>:
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
10001450:	4b02      	ldr	r3, [pc, #8]	; (1000145c <lock_init+0xc>)
10001452:	469c      	mov	ip, r3
10001454:	4461      	add	r1, ip
10001456:	0089      	lsls	r1, r1, #2

#include "pico/lock_core.h"

void lock_init(lock_core_t *core, uint lock_num) {
    assert(lock_num >= 0 && lock_num < NUM_SPIN_LOCKS);
    core->spin_lock = spin_lock_instance(lock_num);
10001458:	6001      	str	r1, [r0, #0]
}
1000145a:	4770      	bx	lr
1000145c:	34000040 	.word	0x34000040

10001460 <core1_trampoline>:

// Default stack for core1 ... if multicore_launch_core1 is not included then .stack1 section will be garbage collected
static uint32_t __attribute__((section(".stack1"))) core1_stack[PICO_CORE1_STACK_SIZE / sizeof(uint32_t)];

static void __attribute__ ((naked)) core1_trampoline() {
    __asm("pop {r0, r1, pc}");
10001460:	bd03      	pop	{r0, r1, pc}
10001462:	46c0      	nop			; (mov r8, r8)

10001464 <core1_wrapper>:
}

int core1_wrapper(int (*entry)(void), void *stack_base) {
10001464:	b510      	push	{r4, lr}
10001466:	0004      	movs	r4, r0
#if PICO_USE_STACK_GUARDS
    // install core1 stack guard
    runtime_install_stack_guard(stack_base);
#endif
    irq_init_priorities();
10001468:	f7ff ffd6 	bl	10001418 <irq_init_priorities>
    return (*entry)();
1000146c:	47a0      	blx	r4
}
1000146e:	bd10      	pop	{r4, pc}

10001470 <multicore_launch_core1>:
    stack_ptr[1] = (uintptr_t) stack_bottom;
    stack_ptr[2] = (uintptr_t) core1_wrapper;
    multicore_launch_core1_raw(core1_trampoline, stack_ptr, scb_hw->vtor);
}

void multicore_launch_core1(void (*entry)(void)) {
10001470:	b530      	push	{r4, r5, lr}
    extern char __StackOneBottom;
    uint32_t *stack_limit = (uint32_t *) &__StackOneBottom;
    // hack to reference core1_stack although that pointer is wrong.... core1_stack should always be <= stack_limit, if not boom!
    uint32_t *stack = core1_stack <= stack_limit ? stack_limit : (uint32_t *) -1;
10001472:	4a22      	ldr	r2, [pc, #136]	; (100014fc <multicore_launch_core1+0x8c>)
10001474:	4b22      	ldr	r3, [pc, #136]	; (10001500 <multicore_launch_core1+0x90>)
void multicore_launch_core1(void (*entry)(void)) {
10001476:	b087      	sub	sp, #28
    uint32_t *stack = core1_stack <= stack_limit ? stack_limit : (uint32_t *) -1;
10001478:	429a      	cmp	r2, r3
1000147a:	d201      	bcs.n	10001480 <multicore_launch_core1+0x10>
1000147c:	2201      	movs	r2, #1
1000147e:	4252      	negs	r2, r2
10001480:	0013      	movs	r3, r2
    stack_ptr[0] = (uintptr_t) entry;
10001482:	4920      	ldr	r1, [pc, #128]	; (10001504 <multicore_launch_core1+0x94>)
    multicore_launch_core1_with_stack(entry, stack, sizeof(core1_stack));
}

void multicore_launch_core1_raw(void (*entry)(void), uint32_t *sp, uint32_t vector_table) {
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001484:	2400      	movs	r4, #0
    stack_ptr[0] = (uintptr_t) entry;
10001486:	5050      	str	r0, [r2, r1]
    stack_ptr[1] = (uintptr_t) stack_bottom;
10001488:	3104      	adds	r1, #4
1000148a:	5052      	str	r2, [r2, r1]
    stack_ptr[2] = (uintptr_t) core1_wrapper;
1000148c:	4a1e      	ldr	r2, [pc, #120]	; (10001508 <multicore_launch_core1+0x98>)
1000148e:	491f      	ldr	r1, [pc, #124]	; (1000150c <multicore_launch_core1+0x9c>)
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001490:	2000      	movs	r0, #0
    stack_ptr[2] = (uintptr_t) core1_wrapper;
10001492:	5099      	str	r1, [r3, r2]
    multicore_launch_core1_raw(core1_trampoline, stack_ptr, scb_hw->vtor);
10001494:	4a1e      	ldr	r2, [pc, #120]	; (10001510 <multicore_launch_core1+0xa0>)
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001496:	2100      	movs	r1, #0
    multicore_launch_core1_raw(core1_trampoline, stack_ptr, scb_hw->vtor);
10001498:	6892      	ldr	r2, [r2, #8]
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
1000149a:	9000      	str	r0, [sp, #0]
1000149c:	9101      	str	r1, [sp, #4]
1000149e:	9203      	str	r2, [sp, #12]
    stack_ptr -= 3;
100014a0:	4a18      	ldr	r2, [pc, #96]	; (10001504 <multicore_launch_core1+0x94>)
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
100014a2:	2101      	movs	r1, #1
    stack_ptr -= 3;
100014a4:	4694      	mov	ip, r2
100014a6:	4463      	add	r3, ip
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
100014a8:	9304      	str	r3, [sp, #16]
100014aa:	4b1a      	ldr	r3, [pc, #104]	; (10001514 <multicore_launch_core1+0xa4>)

    uint seq = 0;
100014ac:	2500      	movs	r5, #0
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
100014ae:	9305      	str	r3, [sp, #20]
 *  \ingroup multicore_fifo
 *
 * \return true if the FIFO has data in it, false otherwise
 */
static inline bool multicore_fifo_rvalid() {
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_VLD_BITS);
100014b0:	23d0      	movs	r3, #208	; 0xd0
100014b2:	9102      	str	r1, [sp, #8]
100014b4:	061b      	lsls	r3, r3, #24
 *  \ingroup multicore_fifo
 *
 *  @return true if the FIFO is full, false otherwise
 */
static inline bool multicore_fifo_wready() {
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_RDY_BITS);
100014b6:	3002      	adds	r0, #2
    do {
        uint cmd = cmd_sequence[seq];
        // we drain before sending a 0
        if (!cmd) {
100014b8:	2c00      	cmp	r4, #0
100014ba:	d014      	beq.n	100014e6 <multicore_launch_core1+0x76>
100014bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    while (!multicore_fifo_wready())
100014be:	4210      	tst	r0, r2
100014c0:	d0fc      	beq.n	100014bc <multicore_launch_core1+0x4c>
    sio_hw->fifo_wr = data;
100014c2:	655c      	str	r4, [r3, #84]	; 0x54
    __asm volatile ("sev");
100014c4:	bf40      	sev
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_VLD_BITS);
100014c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    while (!multicore_fifo_rvalid())
100014c8:	4211      	tst	r1, r2
100014ca:	d103      	bne.n	100014d4 <multicore_launch_core1+0x64>
    __asm volatile ("wfe");
100014cc:	bf20      	wfe
100014ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
100014d0:	4211      	tst	r1, r2
100014d2:	d0fb      	beq.n	100014cc <multicore_launch_core1+0x5c>
    return sio_hw->fifo_rd;
100014d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
            __sev(); // core 1 may be waiting for fifo space
        }
        multicore_fifo_push_blocking(cmd);
        uint32_t response = multicore_fifo_pop_blocking();
        // move to next state on correct response otherwise start over
        seq = cmd == response ? seq + 1 : 0;
100014d6:	42a2      	cmp	r2, r4
100014d8:	d00a      	beq.n	100014f0 <multicore_launch_core1+0x80>
100014da:	2500      	movs	r5, #0
        uint cmd = cmd_sequence[seq];
100014dc:	466c      	mov	r4, sp
100014de:	00aa      	lsls	r2, r5, #2
100014e0:	58a4      	ldr	r4, [r4, r2]
100014e2:	e7e9      	b.n	100014b8 <multicore_launch_core1+0x48>
 *  \ingroup multicore_fifo
 *
 */
static inline void multicore_fifo_drain() {
    while (multicore_fifo_rvalid())
        (void) sio_hw->fifo_rd;
100014e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_VLD_BITS);
100014e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    while (multicore_fifo_rvalid())
100014e8:	4211      	tst	r1, r2
100014ea:	d1fb      	bne.n	100014e4 <multicore_launch_core1+0x74>
    __asm volatile ("sev");
100014ec:	bf40      	sev
    while (!multicore_fifo_wready())
100014ee:	e7e5      	b.n	100014bc <multicore_launch_core1+0x4c>
        seq = cmd == response ? seq + 1 : 0;
100014f0:	3501      	adds	r5, #1
    } while (seq < count_of(cmd_sequence));
100014f2:	2d05      	cmp	r5, #5
100014f4:	d9f2      	bls.n	100014dc <multicore_launch_core1+0x6c>
}
100014f6:	b007      	add	sp, #28
100014f8:	bd30      	pop	{r4, r5, pc}
100014fa:	46c0      	nop			; (mov r8, r8)
100014fc:	20040800 	.word	0x20040800
10001500:	20040000 	.word	0x20040000
10001504:	000007f4 	.word	0x000007f4
10001508:	000007fc 	.word	0x000007fc
1000150c:	10001465 	.word	0x10001465
10001510:	e000ed00 	.word	0xe000ed00
10001514:	10001461 	.word	0x10001461

10001518 <mutex_init>:

#if !PICO_NO_HARDWARE
static_assert(sizeof(mutex_t) == 8, "");
#endif

void mutex_init(mutex_t *mtx) {
10001518:	b510      	push	{r4, lr}
1000151a:	0004      	movs	r4, r0
    lock_init(&mtx->core, next_striped_spin_lock_num());
1000151c:	f000 feac 	bl	10002278 <next_striped_spin_lock_num>
10001520:	0001      	movs	r1, r0
10001522:	0020      	movs	r0, r4
10001524:	f7ff ff94 	bl	10001450 <lock_init>
    mtx->owner = -1;
10001528:	23ff      	movs	r3, #255	; 0xff
1000152a:	7123      	strb	r3, [r4, #4]
    __asm volatile ("dmb");
1000152c:	f3bf 8f5f 	dmb	sy
    __mem_fence_release();
}
10001530:	bd10      	pop	{r4, pc}
10001532:	46c0      	nop			; (mov r8, r8)

10001534 <ph_merge_nodes>:
        c->sibling = n->child;
        n->child = child_id;
    }
}

static pheap_node_id_t ph_merge_nodes(pheap_t *heap, pheap_node_id_t a, pheap_node_id_t b) {
10001534:	b570      	push	{r4, r5, r6, lr}
10001536:	0005      	movs	r5, r0
10001538:	0014      	movs	r4, r2
1000153a:	0016      	movs	r6, r2
    if (!a) return b;
1000153c:	2900      	cmp	r1, #0
1000153e:	d015      	beq.n	1000156c <ph_merge_nodes+0x38>
    if (!b) return a;
10001540:	000c      	movs	r4, r1
10001542:	2a00      	cmp	r2, #0
10001544:	d012      	beq.n	1000156c <ph_merge_nodes+0x38>
    if (heap->comparator(heap->user_data, a, b)) {
10001546:	6880      	ldr	r0, [r0, #8]
10001548:	686b      	ldr	r3, [r5, #4]
1000154a:	4798      	blx	r3
1000154c:	6829      	ldr	r1, [r5, #0]
1000154e:	2800      	cmp	r0, #0
10001550:	d00e      	beq.n	10001570 <ph_merge_nodes+0x3c>
    return heap->nodes + id - 1;
10001552:	0073      	lsls	r3, r6, #1
10001554:	199b      	adds	r3, r3, r6
10001556:	0062      	lsls	r2, r4, #1
10001558:	3b03      	subs	r3, #3
1000155a:	1912      	adds	r2, r2, r4
1000155c:	18cb      	adds	r3, r1, r3
1000155e:	3a03      	subs	r2, #3
    c->parent = parent_id;
10001560:	709c      	strb	r4, [r3, #2]
    return heap->nodes + id - 1;
10001562:	1888      	adds	r0, r1, r2
    if (!n->child) {
10001564:	5c8a      	ldrb	r2, [r1, r2]
10001566:	2a00      	cmp	r2, #0
10001568:	d115      	bne.n	10001596 <ph_merge_nodes+0x62>
        n->child = child_id;
1000156a:	7006      	strb	r6, [r0, #0]
        return a;
    } else {
        ph_add_child_node(heap, b, a);
        return b;
    }
}
1000156c:	0020      	movs	r0, r4
1000156e:	bd70      	pop	{r4, r5, r6, pc}
    return heap->nodes + id - 1;
10001570:	0063      	lsls	r3, r4, #1
10001572:	191b      	adds	r3, r3, r4
10001574:	0072      	lsls	r2, r6, #1
10001576:	3b03      	subs	r3, #3
10001578:	1992      	adds	r2, r2, r6
1000157a:	18cb      	adds	r3, r1, r3
1000157c:	3a03      	subs	r2, #3
    c->parent = parent_id;
1000157e:	709e      	strb	r6, [r3, #2]
    return heap->nodes + id - 1;
10001580:	1888      	adds	r0, r1, r2
    if (!n->child) {
10001582:	5c8a      	ldrb	r2, [r1, r2]
10001584:	2a00      	cmp	r2, #0
10001586:	d102      	bne.n	1000158e <ph_merge_nodes+0x5a>
        n->child = child_id;
10001588:	7004      	strb	r4, [r0, #0]
1000158a:	0034      	movs	r4, r6
1000158c:	e7ee      	b.n	1000156c <ph_merge_nodes+0x38>
        c->sibling = n->child;
1000158e:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
10001590:	7004      	strb	r4, [r0, #0]
10001592:	0034      	movs	r4, r6
10001594:	e7ea      	b.n	1000156c <ph_merge_nodes+0x38>
        c->sibling = n->child;
10001596:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
10001598:	7006      	strb	r6, [r0, #0]
1000159a:	e7e7      	b.n	1000156c <ph_merge_nodes+0x38>

1000159c <ph_create>:

#include <stdio.h>
#include <stdlib.h>
#include "pico/util/pheap.h"

pheap_t *ph_create(uint max_nodes, pheap_comparator comparator, void *user_data) {
1000159c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000159e:	46c6      	mov	lr, r8
100015a0:	0005      	movs	r5, r0
100015a2:	000f      	movs	r7, r1
100015a4:	b500      	push	{lr}
    invalid_params_if(PHEAP, !max_nodes || max_nodes >= (1u << sizeof(pheap_node_id_t)));
    pheap_t *heap = calloc(1, sizeof(pheap_t));
100015a6:	2110      	movs	r1, #16
100015a8:	2001      	movs	r0, #1
pheap_t *ph_create(uint max_nodes, pheap_comparator comparator, void *user_data) {
100015aa:	0016      	movs	r6, r2
    pheap_t *heap = calloc(1, sizeof(pheap_t));
100015ac:	f000 f9ac 	bl	10001908 <__wrap_calloc>
    heap->max_nodes = max_nodes;
100015b0:	b2eb      	uxtb	r3, r5
    pheap_t *heap = calloc(1, sizeof(pheap_t));
100015b2:	0004      	movs	r4, r0
    heap->max_nodes = max_nodes;
100015b4:	7303      	strb	r3, [r0, #12]
    heap->comparator = comparator;
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
100015b6:	2103      	movs	r1, #3
    heap->comparator = comparator;
100015b8:	6047      	str	r7, [r0, #4]
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
100015ba:	0028      	movs	r0, r5
    heap->max_nodes = max_nodes;
100015bc:	4698      	mov	r8, r3
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
100015be:	f000 f9a3 	bl	10001908 <__wrap_calloc>
    ph_clear(heap);
    return heap;
}

void ph_clear(pheap_t *heap) {
    heap->root_id = 0;
100015c2:	2300      	movs	r3, #0
100015c4:	7363      	strb	r3, [r4, #13]
    heap->free_head_id = 1;
100015c6:	3301      	adds	r3, #1
100015c8:	73a3      	strb	r3, [r4, #14]
    heap->free_tail_id = heap->max_nodes;
100015ca:	4643      	mov	r3, r8
100015cc:	21ff      	movs	r1, #255	; 0xff
100015ce:	73e3      	strb	r3, [r4, #15]
    for(uint i = 1; i < heap->max_nodes; i++) {
100015d0:	23fe      	movs	r3, #254	; 0xfe
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
100015d2:	6020      	str	r0, [r4, #0]
    heap->user_data = user_data;
100015d4:	60a6      	str	r6, [r4, #8]
    for(uint i = 1; i < heap->max_nodes; i++) {
100015d6:	4029      	ands	r1, r5
100015d8:	422b      	tst	r3, r5
100015da:	d006      	beq.n	100015ea <ph_create+0x4e>
100015dc:	1c42      	adds	r2, r0, #1
100015de:	3bfd      	subs	r3, #253	; 0xfd
        ph_get_node(heap, i)->sibling = i + 1;
100015e0:	3301      	adds	r3, #1
100015e2:	7013      	strb	r3, [r2, #0]
    for(uint i = 1; i < heap->max_nodes; i++) {
100015e4:	3203      	adds	r2, #3
100015e6:	428b      	cmp	r3, r1
100015e8:	d3fa      	bcc.n	100015e0 <ph_create+0x44>
    }
    ph_get_node(heap, heap->max_nodes)->sibling = 0;
100015ea:	004b      	lsls	r3, r1, #1
100015ec:	1859      	adds	r1, r3, r1
100015ee:	2300      	movs	r3, #0
100015f0:	1840      	adds	r0, r0, r1
100015f2:	3803      	subs	r0, #3
100015f4:	7043      	strb	r3, [r0, #1]
}
100015f6:	0020      	movs	r0, r4
100015f8:	bc80      	pop	{r7}
100015fa:	46b8      	mov	r8, r7
100015fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100015fe:	46c0      	nop			; (mov r8, r8)

10001600 <ph_merge_two_pass>:
void ph_destroy(pheap_t *heap) {
    free(heap->nodes);
    free(heap);
}

pheap_node_id_t ph_merge_two_pass(pheap_t *heap, pheap_node_id_t id) {
10001600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10001602:	46ce      	mov	lr, r9
10001604:	4647      	mov	r7, r8
10001606:	0006      	movs	r6, r0
10001608:	000c      	movs	r4, r1
1000160a:	b580      	push	{r7, lr}
    if (!id || !ph_get_node(heap, id)->sibling) {
1000160c:	2900      	cmp	r1, #0
1000160e:	d007      	beq.n	10001620 <ph_merge_two_pass+0x20>
    return heap->nodes + id - 1;
10001610:	004d      	lsls	r5, r1, #1
10001612:	6803      	ldr	r3, [r0, #0]
10001614:	186d      	adds	r5, r5, r1
10001616:	3d03      	subs	r5, #3
10001618:	195a      	adds	r2, r3, r5
1000161a:	7857      	ldrb	r7, [r2, #1]
1000161c:	2f00      	cmp	r7, #0
1000161e:	d104      	bne.n	1000162a <ph_merge_two_pass+0x2a>
        b = ph_get_node(heap, id)->sibling;
        new_node = ph_get_node(heap, b)->sibling;
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
    }
}
10001620:	0020      	movs	r0, r4
10001622:	bcc0      	pop	{r6, r7}
10001624:	46b9      	mov	r9, r7
10001626:	46b0      	mov	r8, r6
10001628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000162a:	0079      	lsls	r1, r7, #1
1000162c:	19c9      	adds	r1, r1, r7
1000162e:	3903      	subs	r1, #3
10001630:	4688      	mov	r8, r1
10001632:	4443      	add	r3, r8
        new_node = ph_get_node(heap, b)->sibling;
10001634:	7859      	ldrb	r1, [r3, #1]
10001636:	4689      	mov	r9, r1
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10001638:	2100      	movs	r1, #0
1000163a:	7059      	strb	r1, [r3, #1]
1000163c:	7051      	strb	r1, [r2, #1]
    if (heap->comparator(heap->user_data, a, b)) {
1000163e:	6873      	ldr	r3, [r6, #4]
10001640:	003a      	movs	r2, r7
10001642:	0021      	movs	r1, r4
10001644:	6880      	ldr	r0, [r0, #8]
10001646:	4798      	blx	r3
10001648:	6833      	ldr	r3, [r6, #0]
1000164a:	2800      	cmp	r0, #0
1000164c:	d014      	beq.n	10001678 <ph_merge_two_pass+0x78>
    return heap->nodes + id - 1;
1000164e:	4642      	mov	r2, r8
10001650:	189a      	adds	r2, r3, r2
    c->parent = parent_id;
10001652:	7094      	strb	r4, [r2, #2]
    return heap->nodes + id - 1;
10001654:	1959      	adds	r1, r3, r5
    if (!n->child) {
10001656:	5d5b      	ldrb	r3, [r3, r5]
10001658:	2b00      	cmp	r3, #0
1000165a:	d000      	beq.n	1000165e <ph_merge_two_pass+0x5e>
        c->sibling = n->child;
1000165c:	7053      	strb	r3, [r2, #1]
        n->child = child_id;
1000165e:	700f      	strb	r7, [r1, #0]
10001660:	0027      	movs	r7, r4
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001662:	4649      	mov	r1, r9
10001664:	0030      	movs	r0, r6
10001666:	f7ff ffcb 	bl	10001600 <ph_merge_two_pass>
1000166a:	0039      	movs	r1, r7
1000166c:	0002      	movs	r2, r0
1000166e:	0030      	movs	r0, r6
10001670:	f7ff ff60 	bl	10001534 <ph_merge_nodes>
10001674:	0004      	movs	r4, r0
10001676:	e7d3      	b.n	10001620 <ph_merge_two_pass+0x20>
    return heap->nodes + id - 1;
10001678:	4642      	mov	r2, r8
    if (!n->child) {
1000167a:	4641      	mov	r1, r8
    return heap->nodes + id - 1;
1000167c:	195d      	adds	r5, r3, r5
    c->parent = parent_id;
1000167e:	70af      	strb	r7, [r5, #2]
    return heap->nodes + id - 1;
10001680:	189a      	adds	r2, r3, r2
    if (!n->child) {
10001682:	5c5b      	ldrb	r3, [r3, r1]
10001684:	2b00      	cmp	r3, #0
10001686:	d000      	beq.n	1000168a <ph_merge_two_pass+0x8a>
        c->sibling = n->child;
10001688:	706b      	strb	r3, [r5, #1]
        n->child = child_id;
1000168a:	7014      	strb	r4, [r2, #0]
1000168c:	e7e9      	b.n	10001662 <ph_merge_two_pass+0x62>
1000168e:	46c0      	nop			; (mov r8, r8)

10001690 <ph_remove_any_head>:

static pheap_node_id_t ph_remove_any_head(pheap_t *heap, pheap_node_id_t root_id, bool reserve) {
10001690:	b5f0      	push	{r4, r5, r6, r7, lr}
10001692:	4657      	mov	r7, sl
10001694:	4645      	mov	r5, r8
10001696:	46de      	mov	lr, fp
10001698:	464e      	mov	r6, r9
1000169a:	b5e0      	push	{r5, r6, r7, lr}
1000169c:	000d      	movs	r5, r1
    return heap->nodes + id - 1;
1000169e:	006b      	lsls	r3, r5, #1
100016a0:	6801      	ldr	r1, [r0, #0]
100016a2:	195b      	adds	r3, r3, r5
100016a4:	1edf      	subs	r7, r3, #3
100016a6:	0004      	movs	r4, r0
    assert(root_id);
//    printf("Removing head %d (parent %d sibling %d)\n", root_id, ph_get_node(heap, root_id)->parent, ph_get_node(heap, root_id)->sibling);
    assert(!ph_get_node(heap, root_id)->sibling);
    assert(!ph_get_node(heap, root_id)->parent);
    pheap_node_id_t new_root_id = ph_merge_two_pass(heap, ph_get_node(heap, root_id)->child);
100016a8:	5dc8      	ldrb	r0, [r1, r7]
static pheap_node_id_t ph_remove_any_head(pheap_t *heap, pheap_node_id_t root_id, bool reserve) {
100016aa:	b083      	sub	sp, #12
100016ac:	9201      	str	r2, [sp, #4]
100016ae:	19ca      	adds	r2, r1, r7
    if (!id || !ph_get_node(heap, id)->sibling) {
100016b0:	2800      	cmp	r0, #0
100016b2:	d04c      	beq.n	1000174e <ph_remove_any_head+0xbe>
100016b4:	0043      	lsls	r3, r0, #1
100016b6:	181b      	adds	r3, r3, r0
100016b8:	3b03      	subs	r3, #3
100016ba:	18cb      	adds	r3, r1, r3
100016bc:	785e      	ldrb	r6, [r3, #1]
100016be:	46b4      	mov	ip, r6
100016c0:	2e00      	cmp	r6, #0
100016c2:	d116      	bne.n	100016f2 <ph_remove_any_head+0x62>
    if (!reserve) {
100016c4:	9e01      	ldr	r6, [sp, #4]
100016c6:	2e00      	cmp	r6, #0
100016c8:	d13e      	bne.n	10001748 <ph_remove_any_head+0xb8>
        if (heap->free_tail_id) {
100016ca:	7be6      	ldrb	r6, [r4, #15]
100016cc:	2e00      	cmp	r6, #0
100016ce:	d004      	beq.n	100016da <ph_remove_any_head+0x4a>
            ph_get_node(heap, heap->free_tail_id)->sibling = root_id;
100016d0:	0073      	lsls	r3, r6, #1
100016d2:	199b      	adds	r3, r3, r6
100016d4:	18cb      	adds	r3, r1, r3
100016d6:	3b03      	subs	r3, #3
100016d8:	705d      	strb	r5, [r3, #1]
        }
        heap->free_tail_id = root_id;
100016da:	73e5      	strb	r5, [r4, #15]
    }
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
100016dc:	2800      	cmp	r0, #0
100016de:	d12f      	bne.n	10001740 <ph_remove_any_head+0xb0>
    ph_get_node(heap, root_id)->sibling = 0;
100016e0:	2300      	movs	r3, #0
100016e2:	7053      	strb	r3, [r2, #1]
    return new_root_id;
}
100016e4:	b003      	add	sp, #12
100016e6:	bcf0      	pop	{r4, r5, r6, r7}
100016e8:	46bb      	mov	fp, r7
100016ea:	46b2      	mov	sl, r6
100016ec:	46a9      	mov	r9, r5
100016ee:	46a0      	mov	r8, r4
100016f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100016f2:	0072      	lsls	r2, r6, #1
100016f4:	4462      	add	r2, ip
100016f6:	3a03      	subs	r2, #3
100016f8:	1889      	adds	r1, r1, r2
        new_node = ph_get_node(heap, b)->sibling;
100016fa:	784a      	ldrb	r2, [r1, #1]
100016fc:	4690      	mov	r8, r2
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
100016fe:	2200      	movs	r2, #0
10001700:	704a      	strb	r2, [r1, #1]
10001702:	4691      	mov	r9, r2
10001704:	705a      	strb	r2, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001706:	0001      	movs	r1, r0
10001708:	0032      	movs	r2, r6
1000170a:	0020      	movs	r0, r4
1000170c:	f7ff ff12 	bl	10001534 <ph_merge_nodes>
    if (!id || !ph_get_node(heap, id)->sibling) {
10001710:	4643      	mov	r3, r8
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001712:	4682      	mov	sl, r0
    if (!id || !ph_get_node(heap, id)->sibling) {
10001714:	2b00      	cmp	r3, #0
10001716:	d007      	beq.n	10001728 <ph_remove_any_head+0x98>
10001718:	005b      	lsls	r3, r3, #1
1000171a:	6821      	ldr	r1, [r4, #0]
1000171c:	4443      	add	r3, r8
1000171e:	3b03      	subs	r3, #3
10001720:	18cb      	adds	r3, r1, r3
10001722:	785a      	ldrb	r2, [r3, #1]
10001724:	2a00      	cmp	r2, #0
10001726:	d116      	bne.n	10001756 <ph_remove_any_head+0xc6>
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001728:	4642      	mov	r2, r8
1000172a:	4651      	mov	r1, sl
1000172c:	0020      	movs	r0, r4
1000172e:	f7ff ff01 	bl	10001534 <ph_merge_nodes>
10001732:	6821      	ldr	r1, [r4, #0]
    if (!reserve) {
10001734:	9b01      	ldr	r3, [sp, #4]
10001736:	19ca      	adds	r2, r1, r7
10001738:	2b00      	cmp	r3, #0
1000173a:	d0c6      	beq.n	100016ca <ph_remove_any_head+0x3a>
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
1000173c:	2800      	cmp	r0, #0
1000173e:	d0cf      	beq.n	100016e0 <ph_remove_any_head+0x50>
10001740:	0043      	lsls	r3, r0, #1
10001742:	181b      	adds	r3, r3, r0
10001744:	3b03      	subs	r3, #3
10001746:	18cb      	adds	r3, r1, r3
10001748:	2100      	movs	r1, #0
1000174a:	7099      	strb	r1, [r3, #2]
1000174c:	e7c8      	b.n	100016e0 <ph_remove_any_head+0x50>
    if (!reserve) {
1000174e:	9b01      	ldr	r3, [sp, #4]
10001750:	2b00      	cmp	r3, #0
10001752:	d1c5      	bne.n	100016e0 <ph_remove_any_head+0x50>
10001754:	e7b9      	b.n	100016ca <ph_remove_any_head+0x3a>
10001756:	0050      	lsls	r0, r2, #1
10001758:	1880      	adds	r0, r0, r2
1000175a:	3803      	subs	r0, #3
1000175c:	1809      	adds	r1, r1, r0
        new_node = ph_get_node(heap, b)->sibling;
1000175e:	7848      	ldrb	r0, [r1, #1]
10001760:	4683      	mov	fp, r0
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10001762:	4648      	mov	r0, r9
10001764:	7048      	strb	r0, [r1, #1]
10001766:	7058      	strb	r0, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001768:	4641      	mov	r1, r8
1000176a:	0020      	movs	r0, r4
1000176c:	f7ff fee2 	bl	10001534 <ph_merge_nodes>
10001770:	4659      	mov	r1, fp
10001772:	4680      	mov	r8, r0
10001774:	0020      	movs	r0, r4
10001776:	f7ff ff43 	bl	10001600 <ph_merge_two_pass>
1000177a:	4641      	mov	r1, r8
1000177c:	0002      	movs	r2, r0
1000177e:	0020      	movs	r0, r4
10001780:	f7ff fed8 	bl	10001534 <ph_merge_nodes>
10001784:	4680      	mov	r8, r0
10001786:	e7cf      	b.n	10001728 <ph_remove_any_head+0x98>

10001788 <ph_remove_head_reserve>:

pheap_node_id_t ph_remove_head_reserve(pheap_t *heap, bool reserve) {
10001788:	b5f0      	push	{r4, r5, r6, r7, lr}
1000178a:	4657      	mov	r7, sl
1000178c:	4645      	mov	r5, r8
1000178e:	46de      	mov	lr, fp
10001790:	464e      	mov	r6, r9
10001792:	b5e0      	push	{r5, r6, r7, lr}
10001794:	b083      	sub	sp, #12
10001796:	9101      	str	r1, [sp, #4]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
    return heap->root_id;
}

static inline pheap_node_id_t ph_peek_head(pheap_t *heap) {
    return heap->root_id;
10001798:	7b45      	ldrb	r5, [r0, #13]
1000179a:	0004      	movs	r4, r0
    return heap->nodes + id - 1;
1000179c:	006b      	lsls	r3, r5, #1
1000179e:	6800      	ldr	r0, [r0, #0]
100017a0:	195b      	adds	r3, r3, r5
100017a2:	1edf      	subs	r7, r3, #3
    pheap_node_id_t new_root_id = ph_merge_two_pass(heap, ph_get_node(heap, root_id)->child);
100017a4:	5dc1      	ldrb	r1, [r0, r7]
100017a6:	19c2      	adds	r2, r0, r7
    if (!id || !ph_get_node(heap, id)->sibling) {
100017a8:	2900      	cmp	r1, #0
100017aa:	d04e      	beq.n	1000184a <ph_remove_head_reserve+0xc2>
100017ac:	004b      	lsls	r3, r1, #1
100017ae:	185b      	adds	r3, r3, r1
100017b0:	3b03      	subs	r3, #3
100017b2:	18c3      	adds	r3, r0, r3
100017b4:	785e      	ldrb	r6, [r3, #1]
100017b6:	46b4      	mov	ip, r6
100017b8:	2e00      	cmp	r6, #0
100017ba:	d118      	bne.n	100017ee <ph_remove_head_reserve+0x66>
    if (!reserve) {
100017bc:	9e01      	ldr	r6, [sp, #4]
100017be:	2e00      	cmp	r6, #0
100017c0:	d140      	bne.n	10001844 <ph_remove_head_reserve+0xbc>
        if (heap->free_tail_id) {
100017c2:	7be6      	ldrb	r6, [r4, #15]
100017c4:	2e00      	cmp	r6, #0
100017c6:	d004      	beq.n	100017d2 <ph_remove_head_reserve+0x4a>
            ph_get_node(heap, heap->free_tail_id)->sibling = root_id;
100017c8:	0073      	lsls	r3, r6, #1
100017ca:	199b      	adds	r3, r3, r6
100017cc:	18c3      	adds	r3, r0, r3
100017ce:	3b03      	subs	r3, #3
100017d0:	705d      	strb	r5, [r3, #1]
        heap->free_tail_id = root_id;
100017d2:	73e5      	strb	r5, [r4, #15]
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
100017d4:	2900      	cmp	r1, #0
100017d6:	d131      	bne.n	1000183c <ph_remove_head_reserve+0xb4>
    ph_get_node(heap, root_id)->sibling = 0;
100017d8:	2300      	movs	r3, #0
    pheap_node_id_t old_root_id = ph_peek_head(heap);
    heap->root_id = ph_remove_any_head(heap, old_root_id, reserve);
    return old_root_id;
}
100017da:	0028      	movs	r0, r5
    ph_get_node(heap, root_id)->sibling = 0;
100017dc:	7053      	strb	r3, [r2, #1]
    heap->root_id = ph_remove_any_head(heap, old_root_id, reserve);
100017de:	7361      	strb	r1, [r4, #13]
}
100017e0:	b003      	add	sp, #12
100017e2:	bcf0      	pop	{r4, r5, r6, r7}
100017e4:	46bb      	mov	fp, r7
100017e6:	46b2      	mov	sl, r6
100017e8:	46a9      	mov	r9, r5
100017ea:	46a0      	mov	r8, r4
100017ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
100017ee:	0072      	lsls	r2, r6, #1
100017f0:	4462      	add	r2, ip
100017f2:	3a03      	subs	r2, #3
100017f4:	1880      	adds	r0, r0, r2
        new_node = ph_get_node(heap, b)->sibling;
100017f6:	7842      	ldrb	r2, [r0, #1]
100017f8:	4690      	mov	r8, r2
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
100017fa:	2200      	movs	r2, #0
100017fc:	7042      	strb	r2, [r0, #1]
100017fe:	4691      	mov	r9, r2
10001800:	705a      	strb	r2, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001802:	0020      	movs	r0, r4
10001804:	0032      	movs	r2, r6
10001806:	f7ff fe95 	bl	10001534 <ph_merge_nodes>
    if (!id || !ph_get_node(heap, id)->sibling) {
1000180a:	4643      	mov	r3, r8
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
1000180c:	4682      	mov	sl, r0
    if (!id || !ph_get_node(heap, id)->sibling) {
1000180e:	2b00      	cmp	r3, #0
10001810:	d007      	beq.n	10001822 <ph_remove_head_reserve+0x9a>
10001812:	005b      	lsls	r3, r3, #1
10001814:	6821      	ldr	r1, [r4, #0]
10001816:	4443      	add	r3, r8
10001818:	3b03      	subs	r3, #3
1000181a:	18cb      	adds	r3, r1, r3
1000181c:	785a      	ldrb	r2, [r3, #1]
1000181e:	2a00      	cmp	r2, #0
10001820:	d117      	bne.n	10001852 <ph_remove_head_reserve+0xca>
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001822:	4642      	mov	r2, r8
10001824:	4651      	mov	r1, sl
10001826:	0020      	movs	r0, r4
10001828:	f7ff fe84 	bl	10001534 <ph_merge_nodes>
    if (!reserve) {
1000182c:	9b01      	ldr	r3, [sp, #4]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
1000182e:	0001      	movs	r1, r0
10001830:	6820      	ldr	r0, [r4, #0]
10001832:	19c2      	adds	r2, r0, r7
    if (!reserve) {
10001834:	2b00      	cmp	r3, #0
10001836:	d0c4      	beq.n	100017c2 <ph_remove_head_reserve+0x3a>
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
10001838:	2900      	cmp	r1, #0
1000183a:	d0cd      	beq.n	100017d8 <ph_remove_head_reserve+0x50>
1000183c:	004b      	lsls	r3, r1, #1
1000183e:	185b      	adds	r3, r3, r1
10001840:	3b03      	subs	r3, #3
10001842:	18c3      	adds	r3, r0, r3
10001844:	2000      	movs	r0, #0
10001846:	7098      	strb	r0, [r3, #2]
10001848:	e7c6      	b.n	100017d8 <ph_remove_head_reserve+0x50>
    if (!reserve) {
1000184a:	9b01      	ldr	r3, [sp, #4]
1000184c:	2b00      	cmp	r3, #0
1000184e:	d1c3      	bne.n	100017d8 <ph_remove_head_reserve+0x50>
10001850:	e7b7      	b.n	100017c2 <ph_remove_head_reserve+0x3a>
10001852:	0050      	lsls	r0, r2, #1
10001854:	1880      	adds	r0, r0, r2
10001856:	3803      	subs	r0, #3
10001858:	1809      	adds	r1, r1, r0
        new_node = ph_get_node(heap, b)->sibling;
1000185a:	7848      	ldrb	r0, [r1, #1]
1000185c:	4683      	mov	fp, r0
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
1000185e:	4648      	mov	r0, r9
10001860:	7048      	strb	r0, [r1, #1]
10001862:	7058      	strb	r0, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001864:	4641      	mov	r1, r8
10001866:	0020      	movs	r0, r4
10001868:	f7ff fe64 	bl	10001534 <ph_merge_nodes>
1000186c:	4659      	mov	r1, fp
1000186e:	4680      	mov	r8, r0
10001870:	0020      	movs	r0, r4
10001872:	f7ff fec5 	bl	10001600 <ph_merge_two_pass>
10001876:	4641      	mov	r1, r8
10001878:	0002      	movs	r2, r0
1000187a:	0020      	movs	r0, r4
1000187c:	f7ff fe5a 	bl	10001534 <ph_merge_nodes>
10001880:	4680      	mov	r8, r0
10001882:	e7ce      	b.n	10001822 <ph_remove_head_reserve+0x9a>

10001884 <ph_delete>:

#include <stdio.h>
bool ph_delete(pheap_t *heap, pheap_node_id_t id) {
10001884:	b570      	push	{r4, r5, r6, lr}
10001886:	0004      	movs	r4, r0
    // 1) trivial cases
    if (!id) return false;
10001888:	2900      	cmp	r1, #0
1000188a:	d02c      	beq.n	100018e6 <ph_delete+0x62>
    if (id == heap->root_id) {
1000188c:	7b43      	ldrb	r3, [r0, #13]
1000188e:	428b      	cmp	r3, r1
10001890:	d02e      	beq.n	100018f0 <ph_delete+0x6c>
10001892:	6805      	ldr	r5, [r0, #0]
10001894:	0048      	lsls	r0, r1, #1
10001896:	1840      	adds	r0, r0, r1
10001898:	3803      	subs	r0, #3
1000189a:	1828      	adds	r0, r5, r0
        ph_remove_head(heap);
        return true;
    }
    // 2) unlink the node from the tree
    pheap_node_t *node = ph_get_node(heap, id);
    if (!node->parent) return false; // not in tree
1000189c:	7882      	ldrb	r2, [r0, #2]
1000189e:	2a00      	cmp	r2, #0
100018a0:	d021      	beq.n	100018e6 <ph_delete+0x62>
100018a2:	0053      	lsls	r3, r2, #1
100018a4:	189b      	adds	r3, r3, r2
100018a6:	3b03      	subs	r3, #3
    pheap_node_t *parent = ph_get_node(heap, node->parent);
    if (parent->child == id) {
100018a8:	5cea      	ldrb	r2, [r5, r3]
100018aa:	18ee      	adds	r6, r5, r3
100018ac:	428a      	cmp	r2, r1
100018ae:	d102      	bne.n	100018b6 <ph_delete+0x32>
100018b0:	e01b      	b.n	100018ea <ph_delete+0x66>
                prev_sibling->sibling = node->sibling;
                found = true;
                break;
            }
            prev_sibling_id = prev_sibling->sibling;
        } while (prev_sibling_id);
100018b2:	2a00      	cmp	r2, #0
100018b4:	d008      	beq.n	100018c8 <ph_delete+0x44>
100018b6:	0053      	lsls	r3, r2, #1
100018b8:	189b      	adds	r3, r3, r2
100018ba:	3b03      	subs	r3, #3
100018bc:	18eb      	adds	r3, r5, r3
            if (prev_sibling->sibling == id) {
100018be:	785a      	ldrb	r2, [r3, #1]
100018c0:	428a      	cmp	r2, r1
100018c2:	d1f6      	bne.n	100018b2 <ph_delete+0x2e>
                prev_sibling->sibling = node->sibling;
100018c4:	7842      	ldrb	r2, [r0, #1]
100018c6:	705a      	strb	r2, [r3, #1]
        assert(found);
    }
    node->sibling = node->parent = 0;
100018c8:	2300      	movs	r3, #0
//    ph_dump(heap, NULL, NULL);
    // 3) remove it from the head of its own subtree
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, false);
100018ca:	2200      	movs	r2, #0
    node->sibling = node->parent = 0;
100018cc:	7083      	strb	r3, [r0, #2]
100018ce:	7043      	strb	r3, [r0, #1]
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, false);
100018d0:	0020      	movs	r0, r4
100018d2:	f7ff fedd 	bl	10001690 <ph_remove_any_head>
    assert(new_sub_tree != heap->root_id);
    heap->root_id = ph_merge_nodes(heap, heap->root_id, new_sub_tree);
100018d6:	7b61      	ldrb	r1, [r4, #13]
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, false);
100018d8:	0002      	movs	r2, r0
    heap->root_id = ph_merge_nodes(heap, heap->root_id, new_sub_tree);
100018da:	0020      	movs	r0, r4
100018dc:	f7ff fe2a 	bl	10001534 <ph_merge_nodes>
100018e0:	7360      	strb	r0, [r4, #13]
    return true;
100018e2:	2001      	movs	r0, #1
100018e4:	e000      	b.n	100018e8 <ph_delete+0x64>
    if (!id) return false;
100018e6:	2000      	movs	r0, #0
}
100018e8:	bd70      	pop	{r4, r5, r6, pc}
        parent->child = node->sibling;
100018ea:	7843      	ldrb	r3, [r0, #1]
100018ec:	7033      	strb	r3, [r6, #0]
100018ee:	e7eb      	b.n	100018c8 <ph_delete+0x44>
    heap->root_id = ph_remove_any_head(heap, old_root_id, reserve);
100018f0:	2200      	movs	r2, #0
100018f2:	0019      	movs	r1, r3
100018f4:	f7ff fecc 	bl	10001690 <ph_remove_any_head>
100018f8:	7360      	strb	r0, [r4, #13]
        return true;
100018fa:	2001      	movs	r0, #1
100018fc:	e7f4      	b.n	100018e8 <ph_delete+0x64>
100018fe:	46c0      	nop			; (mov r8, r8)

10001900 <__wrap_malloc>:
        panic("Out of memory");
    }
#endif
}

void *__wrap_malloc(size_t size) {
10001900:	b510      	push	{r4, lr}
#if PICO_USE_MALLOC_MUTEX
    mutex_enter_blocking(&malloc_mutex);
#endif
    void *rc = __real_malloc(size);
10001902:	f004 fde9 	bl	100064d8 <malloc>
        printf("malloc %d %p->%p\n", (uint) size, rc, ((uint8_t *) rc) + size);
    }
#endif
    check_alloc(rc, size);
    return rc;
}
10001906:	bd10      	pop	{r4, pc}

10001908 <__wrap_calloc>:

void *__wrap_calloc(size_t count, size_t size) {
10001908:	b510      	push	{r4, lr}
#if PICO_USE_MALLOC_MUTEX
    mutex_enter_blocking(&malloc_mutex);
#endif
    void *rc = __real_calloc(count, size);
1000190a:	f004 fd85 	bl	10006418 <calloc>
        printf("calloc %d %p->%p\n", (uint) (count * size), rc, ((uint8_t *) rc) + size);
    }
#endif
    check_alloc(rc, size);
    return rc;
}
1000190e:	bd10      	pop	{r4, pc}

10001910 <pio_add_program>:
    uint32_t program_mask = (1u << program->length) - 1;
    _used_instruction_space[pio_get_index(pio)] |= program_mask << offset;
}

// these assert if unable
uint pio_add_program(PIO pio, const pio_program_t *program) {
10001910:	b5f0      	push	{r4, r5, r6, r7, lr}
10001912:	46d6      	mov	lr, sl
10001914:	464f      	mov	r7, r9
10001916:	4646      	mov	r6, r8
10001918:	4688      	mov	r8, r1
1000191a:	b5c0      	push	{r6, r7, lr}
1000191c:	2405      	movs	r4, #5
1000191e:	0006      	movs	r6, r0
    uint32_t save = hw_claim_lock();
10001920:	f7ff f860 	bl	100009e4 <hw_claim_lock>
10001924:	4643      	mov	r3, r8
10001926:	791f      	ldrb	r7, [r3, #4]
10001928:	571c      	ldrsb	r4, [r3, r4]
 * \param pio The PIO instance; either \ref pio0 or \ref pio1
 * \return the PIO instance number (either 0 or 1)
 */
static inline uint pio_get_index(PIO pio) {
    assert(pio == pio0 || pio == pio1);
    return pio == pio1 ? 1 : 0;
1000192a:	4b28      	ldr	r3, [pc, #160]	; (100019cc <pio_add_program+0xbc>)
1000192c:	4681      	mov	r9, r0
1000192e:	18f0      	adds	r0, r6, r3
10001930:	4243      	negs	r3, r0
10001932:	4158      	adcs	r0, r3
    uint32_t used_mask = _used_instruction_space[pio_get_index(pio)];
10001934:	4b26      	ldr	r3, [pc, #152]	; (100019d0 <pio_add_program+0xc0>)
10001936:	469a      	mov	sl, r3
10001938:	0083      	lsls	r3, r0, #2
1000193a:	469c      	mov	ip, r3
1000193c:	4653      	mov	r3, sl
1000193e:	4662      	mov	r2, ip
10001940:	5898      	ldr	r0, [r3, r2]
    uint32_t program_mask = (1u << program->length) - 1;
10001942:	2201      	movs	r2, #1
        if (program->origin > 32 - program->length) return -1;
10001944:	2320      	movs	r3, #32
    uint32_t program_mask = (1u << program->length) - 1;
10001946:	40ba      	lsls	r2, r7
        if (program->origin > 32 - program->length) return -1;
10001948:	1bdb      	subs	r3, r3, r7
    uint32_t program_mask = (1u << program->length) - 1;
1000194a:	3a01      	subs	r2, #1
    if (program->origin >= 0) {
1000194c:	2c00      	cmp	r4, #0
1000194e:	db32      	blt.n	100019b6 <pio_add_program+0xa6>
        if (program->origin > 32 - program->length) return -1;
10001950:	429c      	cmp	r4, r3
10001952:	dc2d      	bgt.n	100019b0 <pio_add_program+0xa0>
        return used_mask & (program_mask << program->origin) ? -1 : program->origin;
10001954:	40a2      	lsls	r2, r4
10001956:	0015      	movs	r5, r2
10001958:	4210      	tst	r0, r2
1000195a:	d129      	bne.n	100019b0 <pio_add_program+0xa0>
    for (uint i = 0; i < program->length; ++i) {
1000195c:	2f00      	cmp	r7, #0
1000195e:	d01a      	beq.n	10001996 <pio_add_program+0x86>
        uint16_t instr = program->instructions[i];
10001960:	4643      	mov	r3, r8
10001962:	785a      	ldrb	r2, [r3, #1]
10001964:	7819      	ldrb	r1, [r3, #0]
10001966:	0212      	lsls	r2, r2, #8
10001968:	4311      	orrs	r1, r2
1000196a:	4642      	mov	r2, r8
1000196c:	789b      	ldrb	r3, [r3, #2]
1000196e:	78d2      	ldrb	r2, [r2, #3]
10001970:	041b      	lsls	r3, r3, #16
10001972:	430b      	orrs	r3, r1
10001974:	0612      	lsls	r2, r2, #24
10001976:	431a      	orrs	r2, r3
10001978:	4690      	mov	r8, r2
    for (uint i = 0; i < program->length; ++i) {
1000197a:	2200      	movs	r2, #0
        uint16_t instr = program->instructions[i];
1000197c:	4641      	mov	r1, r8
1000197e:	0053      	lsls	r3, r2, #1
10001980:	5ac9      	ldrh	r1, [r1, r3]
        pio->instr_mem[offset + i] = pio_instr_bits_jmp != _pio_major_instr_bits(instr) ? instr : instr + offset;
10001982:	0b4b      	lsrs	r3, r1, #13
10001984:	d100      	bne.n	10001988 <pio_add_program+0x78>
10001986:	1909      	adds	r1, r1, r4
10001988:	1913      	adds	r3, r2, r4
1000198a:	3312      	adds	r3, #18
1000198c:	009b      	lsls	r3, r3, #2
    for (uint i = 0; i < program->length; ++i) {
1000198e:	3201      	adds	r2, #1
        pio->instr_mem[offset + i] = pio_instr_bits_jmp != _pio_major_instr_bits(instr) ? instr : instr + offset;
10001990:	5199      	str	r1, [r3, r6]
    for (uint i = 0; i < program->length; ++i) {
10001992:	4297      	cmp	r7, r2
10001994:	d8f2      	bhi.n	1000197c <pio_add_program+0x6c>
    _used_instruction_space[pio_get_index(pio)] |= program_mask << offset;
10001996:	4653      	mov	r3, sl
10001998:	4662      	mov	r2, ip
1000199a:	4305      	orrs	r5, r0
1000199c:	509d      	str	r5, [r3, r2]
    int offset = _pio_find_offset_for_program(pio, program);
    if (offset < 0) {
        panic("No program space");
    }
    _pio_add_program_at_offset(pio, program, offset);
    hw_claim_unlock(save);
1000199e:	4648      	mov	r0, r9
100019a0:	f7ff f82c 	bl	100009fc <hw_claim_unlock>
    return offset;
}
100019a4:	0020      	movs	r0, r4
100019a6:	bce0      	pop	{r5, r6, r7}
100019a8:	46ba      	mov	sl, r7
100019aa:	46b1      	mov	r9, r6
100019ac:	46a8      	mov	r8, r5
100019ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        panic("No program space");
100019b0:	4808      	ldr	r0, [pc, #32]	; (100019d4 <pio_add_program+0xc4>)
100019b2:	f000 f99f 	bl	10001cf4 <panic>
        for (int i = 32 - program->length; i >= 0; i--) {
100019b6:	2b00      	cmp	r3, #0
100019b8:	da02      	bge.n	100019c0 <pio_add_program+0xb0>
100019ba:	e7f9      	b.n	100019b0 <pio_add_program+0xa0>
100019bc:	3b01      	subs	r3, #1
100019be:	d3f7      	bcc.n	100019b0 <pio_add_program+0xa0>
            if (!(used_mask & (program_mask << (uint) i))) {
100019c0:	0015      	movs	r5, r2
100019c2:	409d      	lsls	r5, r3
100019c4:	001c      	movs	r4, r3
100019c6:	4205      	tst	r5, r0
100019c8:	d1f8      	bne.n	100019bc <pio_add_program+0xac>
100019ca:	e7c7      	b.n	1000195c <pio_add_program+0x4c>
100019cc:	afd00000 	.word	0xafd00000
100019d0:	20023344 	.word	0x20023344
100019d4:	10006e68 	.word	0x10006e68

100019d8 <pio_clear_instruction_memory>:
    assert(program_mask == (_used_instruction_space[pio_get_index(pio)] & program_mask));
    _used_instruction_space[pio_get_index(pio)] &= ~program_mask;
    hw_claim_unlock(save);
}

void pio_clear_instruction_memory(PIO pio) {
100019d8:	b510      	push	{r4, lr}
100019da:	0004      	movs	r4, r0
    uint32_t save = hw_claim_lock();
100019dc:	f7ff f802 	bl	100009e4 <hw_claim_lock>
100019e0:	4b09      	ldr	r3, [pc, #36]	; (10001a08 <pio_clear_instruction_memory+0x30>)
    _used_instruction_space[pio_get_index(pio)] = 0;
100019e2:	2100      	movs	r1, #0
100019e4:	18e3      	adds	r3, r4, r3
100019e6:	425a      	negs	r2, r3
100019e8:	4153      	adcs	r3, r2
100019ea:	4a08      	ldr	r2, [pc, #32]	; (10001a0c <pio_clear_instruction_memory+0x34>)
100019ec:	009b      	lsls	r3, r3, #2
100019ee:	5099      	str	r1, [r3, r2]
    for(uint i=0;i<PIO_INSTRUCTION_COUNT;i++) {
100019f0:	2300      	movs	r3, #0
        pio->instr_mem[i] = pio_encode_jmp(i);
100019f2:	001a      	movs	r2, r3
100019f4:	3212      	adds	r2, #18
100019f6:	0092      	lsls	r2, r2, #2
100019f8:	5113      	str	r3, [r2, r4]
    for(uint i=0;i<PIO_INSTRUCTION_COUNT;i++) {
100019fa:	3301      	adds	r3, #1
100019fc:	2b20      	cmp	r3, #32
100019fe:	d1f8      	bne.n	100019f2 <pio_clear_instruction_memory+0x1a>
    }
    hw_claim_unlock(save);
10001a00:	f7fe fffc 	bl	100009fc <hw_claim_unlock>
}
10001a04:	bd10      	pop	{r4, pc}
10001a06:	46c0      	nop			; (mov r8, r8)
10001a08:	afd00000 	.word	0xafd00000
10001a0c:	20023344 	.word	0x20023344

10001a10 <pio_sm_set_consecutive_pindirs>:
        pin_mask &= pin_mask - 1;
    }
    pio->sm[sm].pinctrl = pinctrl_saved;
}

void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
10001a10:	b5f0      	push	{r4, r5, r6, r7, lr}
10001a12:	464e      	mov	r6, r9
10001a14:	4645      	mov	r5, r8
10001a16:	46de      	mov	lr, fp
10001a18:	4657      	mov	r7, sl
10001a1a:	468a      	mov	sl, r1
    assert(pin < 32u);
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
10001a1c:	0049      	lsls	r1, r1, #1
void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
10001a1e:	b5e0      	push	{r5, r6, r7, lr}
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
10001a20:	000d      	movs	r5, r1
void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
10001a22:	4680      	mov	r8, r0
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
10001a24:	4455      	add	r5, sl
10001a26:	00ed      	lsls	r5, r5, #3
10001a28:	4445      	add	r5, r8
10001a2a:	4689      	mov	r9, r1
10001a2c:	0029      	movs	r1, r5
void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
10001a2e:	ac09      	add	r4, sp, #36	; 0x24
10001a30:	7826      	ldrb	r6, [r4, #0]
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
10001a32:	31dc      	adds	r1, #220	; 0xdc
    uint pindir_val = is_out ? 0x1f : 0;
10001a34:	1e74      	subs	r4, r6, #1
10001a36:	41a6      	sbcs	r6, r4
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
10001a38:	6808      	ldr	r0, [r1, #0]
    uint pindir_val = is_out ? 0x1f : 0;
10001a3a:	4274      	negs	r4, r6
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
10001a3c:	4684      	mov	ip, r0
    uint pindir_val = is_out ? 0x1f : 0;
10001a3e:	4814      	ldr	r0, [pc, #80]	; (10001a90 <pio_sm_set_consecutive_pindirs+0x80>)
10001a40:	261f      	movs	r6, #31
10001a42:	4683      	mov	fp, r0
10001a44:	4026      	ands	r6, r4
10001a46:	445e      	add	r6, fp
    while (count > 5) {
10001a48:	2b05      	cmp	r3, #5
10001a4a:	d90c      	bls.n	10001a66 <pio_sm_set_consecutive_pindirs+0x56>
        pio->sm[sm].pinctrl = (5u << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
10001a4c:	20a0      	movs	r0, #160	; 0xa0
        pio_sm_exec(pio, sm, pio_encode_set(pio_pindirs, pindir_val));
        count -= 5;
        pin = (pin + 5) & 0x1f;
10001a4e:	271f      	movs	r7, #31
        pio->sm[sm].pinctrl = (5u << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
10001a50:	0540      	lsls	r0, r0, #21
 * \param sm State machine index (0..3)
 * \param instr the encoded PIO instruction
 */
inline static void pio_sm_exec(PIO pio, uint sm, uint instr) {
    check_sm_param(sm);
    pio->sm[sm].instr = instr;
10001a52:	35d8      	adds	r5, #216	; 0xd8
10001a54:	0154      	lsls	r4, r2, #5
10001a56:	4304      	orrs	r4, r0
        pin = (pin + 5) & 0x1f;
10001a58:	3205      	adds	r2, #5
        count -= 5;
10001a5a:	3b05      	subs	r3, #5
        pio->sm[sm].pinctrl = (5u << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
10001a5c:	600c      	str	r4, [r1, #0]
        pin = (pin + 5) & 0x1f;
10001a5e:	403a      	ands	r2, r7
10001a60:	602e      	str	r6, [r5, #0]
    while (count > 5) {
10001a62:	2b05      	cmp	r3, #5
10001a64:	d8f6      	bhi.n	10001a54 <pio_sm_set_consecutive_pindirs+0x44>
    }
    pio->sm[sm].pinctrl = (count << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
10001a66:	4649      	mov	r1, r9
10001a68:	4451      	add	r1, sl
10001a6a:	00c9      	lsls	r1, r1, #3
10001a6c:	4441      	add	r1, r8
10001a6e:	0152      	lsls	r2, r2, #5
10001a70:	069b      	lsls	r3, r3, #26
10001a72:	4313      	orrs	r3, r2
10001a74:	000a      	movs	r2, r1
10001a76:	0008      	movs	r0, r1
10001a78:	32dc      	adds	r2, #220	; 0xdc
10001a7a:	6013      	str	r3, [r2, #0]
    pio_sm_exec(pio, sm, pio_encode_set(pio_pindirs, pindir_val));
    pio->sm[sm].pinctrl = pinctrl_saved;
10001a7c:	4663      	mov	r3, ip
10001a7e:	30d8      	adds	r0, #216	; 0xd8
10001a80:	6006      	str	r6, [r0, #0]
10001a82:	6013      	str	r3, [r2, #0]
}
10001a84:	bcf0      	pop	{r4, r5, r6, r7}
10001a86:	46bb      	mov	fp, r7
10001a88:	46b2      	mov	sl, r6
10001a8a:	46a9      	mov	r9, r5
10001a8c:	46a0      	mov	r8, r4
10001a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001a90:	0000e080 	.word	0x0000e080

10001a94 <pio_sm_init>:

void pio_sm_init(PIO pio, uint sm, uint initial_pc, const pio_sm_config *config) {
10001a94:	b5f0      	push	{r4, r5, r6, r7, lr}
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
10001a96:	2501      	movs	r5, #1
10001a98:	408d      	lsls	r5, r1
10001a9a:	6804      	ldr	r4, [r0, #0]
10001a9c:	43ac      	bics	r4, r5
    pio->sm[sm].clkdiv = config->clkdiv;
10001a9e:	004d      	lsls	r5, r1, #1
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
10001aa0:	6004      	str	r4, [r0, #0]
    pio->sm[sm].clkdiv = config->clkdiv;
10001aa2:	186c      	adds	r4, r5, r1
10001aa4:	00e4      	lsls	r4, r4, #3
10001aa6:	1904      	adds	r4, r0, r4
10001aa8:	0026      	movs	r6, r4
10001aaa:	36c8      	adds	r6, #200	; 0xc8
    // Halt the machine, set some sensible defaults
    pio_sm_set_enabled(pio, sm, false);

    if (config) {
10001aac:	2b00      	cmp	r3, #0
10001aae:	d02a      	beq.n	10001b06 <pio_sm_init+0x72>
10001ab0:	681f      	ldr	r7, [r3, #0]
    pio->sm[sm].pinctrl = config->pinctrl;
10001ab2:	34dc      	adds	r4, #220	; 0xdc
    pio->sm[sm].clkdiv = config->clkdiv;
10001ab4:	6037      	str	r7, [r6, #0]
    pio->sm[sm].execctrl = config->execctrl;
10001ab6:	685f      	ldr	r7, [r3, #4]
10001ab8:	6077      	str	r7, [r6, #4]
    pio->sm[sm].shiftctrl = config->shiftctrl;
10001aba:	689f      	ldr	r7, [r3, #8]
    pio->sm[sm].pinctrl = config->pinctrl;
10001abc:	68db      	ldr	r3, [r3, #12]
    pio->sm[sm].shiftctrl = config->shiftctrl;
10001abe:	60b7      	str	r7, [r6, #8]
    pio->sm[sm].pinctrl = config->pinctrl;
10001ac0:	6023      	str	r3, [r4, #0]
 * \param sm State machine index (0..3)
 */
static inline void pio_sm_clear_fifos(PIO pio, uint sm) {
    // changing the FIFO join state clears the fifo
    check_sm_param(sm);
    hw_xor_bits(&pio->sm[sm].shiftctrl, PIO_SM0_SHIFTCTRL_FJOIN_RX_BITS);
10001ac2:	186d      	adds	r5, r5, r1
10001ac4:	00eb      	lsls	r3, r5, #3
10001ac6:	001d      	movs	r5, r3
10001ac8:	2480      	movs	r4, #128	; 0x80
10001aca:	35d0      	adds	r5, #208	; 0xd0
10001acc:	1945      	adds	r5, r0, r5
10001ace:	0164      	lsls	r4, r4, #5
10001ad0:	432c      	orrs	r4, r5
10001ad2:	2580      	movs	r5, #128	; 0x80
10001ad4:	062d      	lsls	r5, r5, #24
10001ad6:	6025      	str	r5, [r4, #0]
10001ad8:	6025      	str	r5, [r4, #0]
    const uint32_t fdebug_sm_mask =
            (1u << PIO_FDEBUG_TXOVER_LSB) |
            (1u << PIO_FDEBUG_RXUNDER_LSB) |
            (1u << PIO_FDEBUG_TXSTALL_LSB) |
            (1u << PIO_FDEBUG_RXSTALL_LSB);
    pio->fdebug = fdebug_sm_mask << sm;
10001ada:	4c11      	ldr	r4, [pc, #68]	; (10001b20 <pio_sm_init+0x8c>)
    pio->ctrl |= 1u << (PIO_CTRL_SM_RESTART_LSB + sm);
10001adc:	1d0d      	adds	r5, r1, #4
10001ade:	408c      	lsls	r4, r1
10001ae0:	6084      	str	r4, [r0, #8]
10001ae2:	2401      	movs	r4, #1
10001ae4:	0027      	movs	r7, r4
10001ae6:	40af      	lsls	r7, r5
10001ae8:	003d      	movs	r5, r7
    pio->ctrl |= 1u << (PIO_CTRL_CLKDIV_RESTART_LSB + sm);
10001aea:	3108      	adds	r1, #8
10001aec:	408c      	lsls	r4, r1
        assert(arg2 && arg2 <= 32);
    } else {
        assert(arg2 <= 31);
    }
#endif
    return instr_bits | (arg1 << 5u) | (arg2 & 0x1fu);
10001aee:	211f      	movs	r1, #31
    pio->ctrl |= 1u << (PIO_CTRL_SM_RESTART_LSB + sm);
10001af0:	6806      	ldr	r6, [r0, #0]
10001af2:	400a      	ands	r2, r1
10001af4:	4335      	orrs	r5, r6
10001af6:	6005      	str	r5, [r0, #0]
    pio->ctrl |= 1u << (PIO_CTRL_CLKDIV_RESTART_LSB + sm);
10001af8:	6805      	ldr	r5, [r0, #0]
10001afa:	432c      	orrs	r4, r5
10001afc:	6004      	str	r4, [r0, #0]
    pio->sm[sm].instr = instr;
10001afe:	18c0      	adds	r0, r0, r3
10001b00:	30d8      	adds	r0, #216	; 0xd8
10001b02:	6002      	str	r2, [r0, #0]

    // Finally, clear some internal SM state
    pio_sm_restart(pio, sm);
    pio_sm_clkdiv_restart(pio, sm);
    pio_sm_exec(pio, sm, pio_encode_jmp(initial_pc));
}
10001b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pio->sm[sm].clkdiv = config->clkdiv;
10001b06:	2780      	movs	r7, #128	; 0x80
10001b08:	027f      	lsls	r7, r7, #9
10001b0a:	6037      	str	r7, [r6, #0]
    pio->sm[sm].execctrl = config->execctrl;
10001b0c:	27f8      	movs	r7, #248	; 0xf8
10001b0e:	027f      	lsls	r7, r7, #9
10001b10:	6077      	str	r7, [r6, #4]
    pio->sm[sm].shiftctrl = config->shiftctrl;
10001b12:	27c0      	movs	r7, #192	; 0xc0
    pio->sm[sm].pinctrl = config->pinctrl;
10001b14:	34dc      	adds	r4, #220	; 0xdc
    pio->sm[sm].shiftctrl = config->shiftctrl;
10001b16:	033f      	lsls	r7, r7, #12
10001b18:	60b7      	str	r7, [r6, #8]
    pio->sm[sm].pinctrl = config->pinctrl;
10001b1a:	6023      	str	r3, [r4, #0]
10001b1c:	e7d1      	b.n	10001ac2 <pio_sm_init+0x2e>
10001b1e:	46c0      	nop			; (mov r8, r8)
10001b20:	01010101 	.word	0x01010101

10001b24 <running_on_fpga>:
#include "hardware/address_mapped.h"
#include "hardware/regs/tbman.h"
#include "hardware/regs/sysinfo.h"

bool running_on_fpga() {
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
10001b24:	4b02      	ldr	r3, [pc, #8]	; (10001b30 <running_on_fpga+0xc>)
10001b26:	6818      	ldr	r0, [r3, #0]
10001b28:	0780      	lsls	r0, r0, #30
10001b2a:	0fc0      	lsrs	r0, r0, #31
}
10001b2c:	4770      	bx	lr
10001b2e:	46c0      	nop			; (mov r8, r8)
10001b30:	4006c000 	.word	0x4006c000

10001b34 <pll_init>:
// For MHZ definitions etc
#include "hardware/clocks.h"
#include "hardware/pll.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint32_t refdiv, uint32_t vco_freq, uint32_t post_div1, uint8_t post_div2) {
10001b34:	b5f0      	push	{r4, r5, r6, r7, lr}
10001b36:	46c6      	mov	lr, r8
10001b38:	b500      	push	{lr}
10001b3a:	001e      	movs	r6, r3
10001b3c:	ab06      	add	r3, sp, #24
10001b3e:	781f      	ldrb	r7, [r3, #0]
    // Turn off PLL in case it is already running
    pll->pwr = 0xffffffff;
10001b40:	2301      	movs	r3, #1
10001b42:	425b      	negs	r3, r3
10001b44:	6043      	str	r3, [r0, #4]
    pll->fbdiv_int = 0;
10001b46:	2300      	movs	r3, #0
void pll_init(PLL pll, uint32_t refdiv, uint32_t vco_freq, uint32_t post_div1, uint8_t post_div2) {
10001b48:	0004      	movs	r4, r0
    pll->fbdiv_int = 0;
10001b4a:	6083      	str	r3, [r0, #8]

    uint32_t ref_mhz = XOSC_MHZ / refdiv;
    pll->cs = refdiv;
10001b4c:	6001      	str	r1, [r0, #0]
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10001b4e:	200c      	movs	r0, #12
void pll_init(PLL pll, uint32_t refdiv, uint32_t vco_freq, uint32_t post_div1, uint8_t post_div2) {
10001b50:	4690      	mov	r8, r2
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10001b52:	f7fe fbe3 	bl	1000031c <__wrap___aeabi_uidiv>

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * MHZ);
10001b56:	0141      	lsls	r1, r0, #5
10001b58:	1a09      	subs	r1, r1, r0
10001b5a:	018d      	lsls	r5, r1, #6
10001b5c:	1a69      	subs	r1, r5, r1
10001b5e:	00c9      	lsls	r1, r1, #3
10001b60:	1809      	adds	r1, r1, r0
10001b62:	0189      	lsls	r1, r1, #6
10001b64:	4640      	mov	r0, r8
10001b66:	f7fe fbd9 	bl	1000031c <__wrap___aeabi_uidiv>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001b6a:	21c0      	movs	r1, #192	; 0xc0

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
10001b6c:	1d23      	adds	r3, r4, #4
10001b6e:	0189      	lsls	r1, r1, #6
10001b70:	4319      	orrs	r1, r3
10001b72:	2321      	movs	r3, #33	; 0x21
    pll->fbdiv_int = fbdiv;
10001b74:	60a0      	str	r0, [r4, #8]
10001b76:	600b      	str	r3, [r1, #0]

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
10001b78:	6822      	ldr	r2, [r4, #0]
10001b7a:	2a00      	cmp	r2, #0
10001b7c:	dafc      	bge.n	10001b78 <pll_init+0x44>
10001b7e:	2308      	movs	r3, #8

    // Set up post dividers - div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
10001b80:	033f      	lsls	r7, r7, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10001b82:	0436      	lsls	r6, r6, #16
10001b84:	433e      	orrs	r6, r7
    pll->prim = pdiv;
10001b86:	60e6      	str	r6, [r4, #12]
10001b88:	600b      	str	r3, [r1, #0]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
/// \end::pll_init_finish[]
}
10001b8a:	bc80      	pop	{r7}
10001b8c:	46b8      	mov	r8, r7
10001b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10001b90 <_out_char>:
    (void) idx;
    (void) maxlen;
}

// internal _putchar wrapper
static inline void _out_char(char character, void *buffer, size_t idx, size_t maxlen) {
10001b90:	b510      	push	{r4, lr}
    (void) buffer;
    (void) idx;
    (void) maxlen;
    if (character) {
10001b92:	2800      	cmp	r0, #0
10001b94:	d100      	bne.n	10001b98 <_out_char+0x8>
        _putchar(character);
    }
}
10001b96:	bd10      	pop	{r4, pc}
    putchar(character);
10001b98:	f000 f996 	bl	10001ec8 <__wrap_putchar>
}
10001b9c:	e7fb      	b.n	10001b96 <_out_char+0x6>
10001b9e:	46c0      	nop			; (mov r8, r8)

10001ba0 <weak_raw_vprintf>:
    bool rc = weak_raw_vprintf(fmt, va);
    va_end(va);
    return rc;
}

bool weak_raw_vprintf(const char *fmt, va_list args) {
10001ba0:	b510      	push	{r4, lr}
    if (lazy_vsnprintf) {
10001ba2:	4a09      	ldr	r2, [pc, #36]	; (10001bc8 <weak_raw_vprintf+0x28>)
bool weak_raw_vprintf(const char *fmt, va_list args) {
10001ba4:	0003      	movs	r3, r0
    if (lazy_vsnprintf) {
10001ba6:	6814      	ldr	r4, [r2, #0]
bool weak_raw_vprintf(const char *fmt, va_list args) {
10001ba8:	b084      	sub	sp, #16
    if (lazy_vsnprintf) {
10001baa:	2c00      	cmp	r4, #0
10001bac:	d008      	beq.n	10001bc0 <weak_raw_vprintf+0x20>
        char buffer[1];
        lazy_vsnprintf(_out_char, buffer, (size_t) -1, fmt, args);
10001bae:	2201      	movs	r2, #1
10001bb0:	9100      	str	r1, [sp, #0]
10001bb2:	4806      	ldr	r0, [pc, #24]	; (10001bcc <weak_raw_vprintf+0x2c>)
10001bb4:	4252      	negs	r2, r2
10001bb6:	a903      	add	r1, sp, #12
10001bb8:	47a0      	blx	r4
        return true;
10001bba:	2001      	movs	r0, #1
    } else {
        puts(fmt);
        return false;
    }
}
10001bbc:	b004      	add	sp, #16
10001bbe:	bd10      	pop	{r4, pc}
        puts(fmt);
10001bc0:	f000 f990 	bl	10001ee4 <__wrap_puts>
        return false;
10001bc4:	2000      	movs	r0, #0
10001bc6:	e7f9      	b.n	10001bbc <weak_raw_vprintf+0x1c>
10001bc8:	20023b44 	.word	0x20023b44
10001bcc:	10001b91 	.word	0x10001b91

10001bd0 <runtime_init>:
                   | (0x7 << 1) // size 2^(7 + 1) = 256
                   | (subregion_select << 8)
                   | 0x10000000; // XN = disable instruction fetch; no other bits means no permissions
}

void runtime_init(void) {
10001bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001bd2:	4a2b      	ldr	r2, [pc, #172]	; (10001c80 <runtime_init+0xb0>)
10001bd4:	4b2b      	ldr	r3, [pc, #172]	; (10001c84 <runtime_init+0xb4>)
10001bd6:	492c      	ldr	r1, [pc, #176]	; (10001c88 <runtime_init+0xb8>)
10001bd8:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001bda:	4a2c      	ldr	r2, [pc, #176]	; (10001c8c <runtime_init+0xbc>)
10001bdc:	4b2c      	ldr	r3, [pc, #176]	; (10001c90 <runtime_init+0xc0>)
10001bde:	601a      	str	r2, [r3, #0]
10001be0:	0014      	movs	r4, r2
10001be2:	688b      	ldr	r3, [r1, #8]
10001be4:	439c      	bics	r4, r3
10001be6:	d1fb      	bne.n	10001be0 <runtime_init+0x10>
    extern void (*__preinit_array_end)();

    // Call each function in the list.
    // We have to take the address of the symbols, as __preinit_array_start *is*
    // the first function pointer, not the address of it.
    for (void (**p)() = &__preinit_array_start; p < &__preinit_array_end; ++p) {
10001be8:	4d2a      	ldr	r5, [pc, #168]	; (10001c94 <runtime_init+0xc4>)
10001bea:	4e2b      	ldr	r6, [pc, #172]	; (10001c98 <runtime_init+0xc8>)
10001bec:	42b5      	cmp	r5, r6
10001bee:	d208      	bcs.n	10001c02 <runtime_init+0x32>
10001bf0:	3e01      	subs	r6, #1
10001bf2:	1b76      	subs	r6, r6, r5
10001bf4:	08b6      	lsrs	r6, r6, #2
        (*p)();
10001bf6:	cd08      	ldmia	r5!, {r3}
10001bf8:	4798      	blx	r3
    for (void (**p)() = &__preinit_array_start; p < &__preinit_array_end; ++p) {
10001bfa:	0023      	movs	r3, r4
10001bfc:	3401      	adds	r4, #1
10001bfe:	42b3      	cmp	r3, r6
10001c00:	d1f9      	bne.n	10001bf6 <runtime_init+0x26>
    }

    // After calling preinit we have enough runtime to do the exciting maths
    // in clocks_init
    clocks_init();
10001c02:	f7fe fff7 	bl	10000bf4 <clocks_init>
10001c06:	4a25      	ldr	r2, [pc, #148]	; (10001c9c <runtime_init+0xcc>)
10001c08:	4b21      	ldr	r3, [pc, #132]	; (10001c90 <runtime_init+0xc0>)
10001c0a:	601a      	str	r2, [r3, #0]
10001c0c:	4a1e      	ldr	r2, [pc, #120]	; (10001c88 <runtime_init+0xb8>)
10001c0e:	6893      	ldr	r3, [r2, #8]
10001c10:	43db      	mvns	r3, r3
10001c12:	01db      	lsls	r3, r3, #7
10001c14:	09dc      	lsrs	r4, r3, #7
10001c16:	2b00      	cmp	r3, #0
10001c18:	d1f9      	bne.n	10001c0e <runtime_init+0x3e>
    unreset_block_wait(RESETS_RESET_BITS);

#if !PICO_IE_26_29_UNCHANGED_ON_RESET
    // after resetting BANK0 we should disable IE on 26-29
    hw_clear_alias(padsbank0_hw)->io[26] = hw_clear_alias(padsbank0_hw)->io[27] =
            hw_clear_alias(padsbank0_hw)->io[28] = hw_clear_alias(padsbank0_hw)->io[29] = PADS_BANK0_GPIO0_IE_BITS;
10001c1a:	2240      	movs	r2, #64	; 0x40
10001c1c:	4b20      	ldr	r3, [pc, #128]	; (10001ca0 <runtime_init+0xd0>)

    extern mutex_t __mutex_array_start;
    extern mutex_t __mutex_array_end;

    // the first function pointer, not the address of it.
    for (mutex_t *m = &__mutex_array_start; m < &__mutex_array_end; m++) {
10001c1e:	4d21      	ldr	r5, [pc, #132]	; (10001ca4 <runtime_init+0xd4>)
10001c20:	4f21      	ldr	r7, [pc, #132]	; (10001ca8 <runtime_init+0xd8>)
            hw_clear_alias(padsbank0_hw)->io[28] = hw_clear_alias(padsbank0_hw)->io[29] = PADS_BANK0_GPIO0_IE_BITS;
10001c22:	679a      	str	r2, [r3, #120]	; 0x78
10001c24:	675a      	str	r2, [r3, #116]	; 0x74
    hw_clear_alias(padsbank0_hw)->io[26] = hw_clear_alias(padsbank0_hw)->io[27] =
10001c26:	671a      	str	r2, [r3, #112]	; 0x70
10001c28:	66da      	str	r2, [r3, #108]	; 0x6c
    for (mutex_t *m = &__mutex_array_start; m < &__mutex_array_end; m++) {
10001c2a:	42bd      	cmp	r5, r7
10001c2c:	d20b      	bcs.n	10001c46 <runtime_init+0x76>
10001c2e:	2600      	movs	r6, #0
10001c30:	3f01      	subs	r7, #1
10001c32:	1b7f      	subs	r7, r7, r5
10001c34:	08ff      	lsrs	r7, r7, #3
        mutex_init(m);
10001c36:	0028      	movs	r0, r5
10001c38:	f7ff fc6e 	bl	10001518 <mutex_init>
    for (mutex_t *m = &__mutex_array_start; m < &__mutex_array_end; m++) {
10001c3c:	3508      	adds	r5, #8
10001c3e:	0033      	movs	r3, r6
10001c40:	3601      	adds	r6, #1
10001c42:	42bb      	cmp	r3, r7
10001c44:	d1f7      	bne.n	10001c36 <runtime_init+0x66>
    }

#if !(PICO_NO_RAM_VECTOR_TABLE || PICO_NO_FLASH)
    __builtin_memcpy(ram_vector_table, (uint32_t *) scb_hw->vtor, sizeof(ram_vector_table));
10001c46:	4e19      	ldr	r6, [pc, #100]	; (10001cac <runtime_init+0xdc>)
10001c48:	4d19      	ldr	r5, [pc, #100]	; (10001cb0 <runtime_init+0xe0>)
10001c4a:	22c0      	movs	r2, #192	; 0xc0
10001c4c:	68a9      	ldr	r1, [r5, #8]
10001c4e:	0030      	movs	r0, r6
10001c50:	f7fe fe76 	bl	10000940 <__wrap___aeabi_memcpy>
    scb_hw->vtor = (intptr_t) ram_vector_table;
10001c54:	60ae      	str	r6, [r5, #8]
    // install core0 stack guard
    extern char __StackBottom;
    runtime_install_stack_guard(&__StackBottom);
#endif

    spin_locks_reset();
10001c56:	f000 fb01 	bl	1000225c <spin_locks_reset>
    irq_init_priorities();
10001c5a:	f7ff fbdd 	bl	10001418 <irq_init_priorities>
    alarm_pool_init_default();
10001c5e:	f000 fd47 	bl	100026f0 <alarm_pool_init_default>
    extern void (*__init_array_end)();

    // Call each function in the list.
    // We have to take the address of the symbols, as __init_array_start *is*
    // the first function pointer, not the address of it.
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {
10001c62:	4d14      	ldr	r5, [pc, #80]	; (10001cb4 <runtime_init+0xe4>)
10001c64:	4e14      	ldr	r6, [pc, #80]	; (10001cb8 <runtime_init+0xe8>)
10001c66:	42b5      	cmp	r5, r6
10001c68:	d208      	bcs.n	10001c7c <runtime_init+0xac>
10001c6a:	3e01      	subs	r6, #1
10001c6c:	1b76      	subs	r6, r6, r5
10001c6e:	08b6      	lsrs	r6, r6, #2
        (*p)();
10001c70:	cd08      	ldmia	r5!, {r3}
10001c72:	4798      	blx	r3
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {
10001c74:	0023      	movs	r3, r4
10001c76:	3401      	adds	r4, #1
10001c78:	429e      	cmp	r6, r3
10001c7a:	d1f9      	bne.n	10001c70 <runtime_init+0xa0>
    }

}
10001c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10001c7e:	46c0      	nop			; (mov r8, r8)
10001c80:	ffffcdbf 	.word	0xffffcdbf
10001c84:	4000e000 	.word	0x4000e000
10001c88:	4000c000 	.word	0x4000c000
10001c8c:	003c7ffe 	.word	0x003c7ffe
10001c90:	4000f000 	.word	0x4000f000
10001c94:	20003030 	.word	0x20003030
10001c98:	20003040 	.word	0x20003040
10001c9c:	01ffffff 	.word	0x01ffffff
10001ca0:	4001f000 	.word	0x4001f000
10001ca4:	20003028 	.word	0x20003028
10001ca8:	20003030 	.word	0x20003030
10001cac:	20000000 	.word	0x20000000
10001cb0:	e000ed00 	.word	0xe000ed00
10001cb4:	20003040 	.word	0x20003040
10001cb8:	20003048 	.word	0x20003048

10001cbc <_sbrk>:
void *_sbrk(int incr) {
    extern char end; /* Set by linker.  */
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0)
10001cbc:	4a09      	ldr	r2, [pc, #36]	; (10001ce4 <_sbrk+0x28>)
void *_sbrk(int incr) {
10001cbe:	0003      	movs	r3, r0
    if (heap_end == 0)
10001cc0:	6810      	ldr	r0, [r2, #0]
10001cc2:	2800      	cmp	r0, #0
10001cc4:	d005      	beq.n	10001cd2 <_sbrk+0x16>
        heap_end = &end;

    prev_heap_end = heap_end;
    char *next_heap_end = heap_end + incr;

    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
10001cc6:	4908      	ldr	r1, [pc, #32]	; (10001ce8 <_sbrk+0x2c>)
    char *next_heap_end = heap_end + incr;
10001cc8:	18c3      	adds	r3, r0, r3
    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
10001cca:	428b      	cmp	r3, r1
10001ccc:	d207      	bcs.n	10001cde <_sbrk+0x22>
#else
        return (char *) -1;
#endif
    }

    heap_end = next_heap_end;
10001cce:	6013      	str	r3, [r2, #0]
    return (void *) prev_heap_end;
}
10001cd0:	4770      	bx	lr
        heap_end = &end;
10001cd2:	4806      	ldr	r0, [pc, #24]	; (10001cec <_sbrk+0x30>)
    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
10001cd4:	4904      	ldr	r1, [pc, #16]	; (10001ce8 <_sbrk+0x2c>)
    char *next_heap_end = heap_end + incr;
10001cd6:	18c3      	adds	r3, r0, r3
        heap_end = &end;
10001cd8:	6010      	str	r0, [r2, #0]
    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
10001cda:	428b      	cmp	r3, r1
10001cdc:	d3f7      	bcc.n	10001cce <_sbrk+0x12>
        return (char *) -1;
10001cde:	2001      	movs	r0, #1
10001ce0:	4240      	negs	r0, r0
10001ce2:	e7f5      	b.n	10001cd0 <_sbrk+0x14>
10001ce4:	200234c0 	.word	0x200234c0
10001ce8:	20040000 	.word	0x20040000
10001cec:	20023b8c 	.word	0x20023b8c

10001cf0 <exit>:
    __asm__("bkpt #0");
10001cf0:	be00      	bkpt	0x0000
10001cf2:	e7fd      	b.n	10001cf0 <exit>

10001cf4 <panic>:
//  right now, print mutex may be uninitialised (in which case it deadlocks - although after printing "PANIC")
//  more importantly there may be no stdout/UART initialized yet
// todo we may want to think about where we print panic messages to; writing to USB appears to work
//  though it doesn't seem like we can expect it to... fine for now
//
void __attribute__((noreturn)) __printflike(1, 0) panic(const char *fmt, ...) {
10001cf4:	b40f      	push	{r0, r1, r2, r3}
10001cf6:	b500      	push	{lr}
    puts("\n*** PANIC ***\n");
10001cf8:	4808      	ldr	r0, [pc, #32]	; (10001d1c <panic+0x28>)
void __attribute__((noreturn)) __printflike(1, 0) panic(const char *fmt, ...) {
10001cfa:	b083      	sub	sp, #12
    puts("\n*** PANIC ***\n");
10001cfc:	f000 f8f2 	bl	10001ee4 <__wrap_puts>
    if (fmt) {
10001d00:	9b04      	ldr	r3, [sp, #16]
10001d02:	2b00      	cmp	r3, #0
10001d04:	d007      	beq.n	10001d16 <panic+0x22>
#if PICO_PRINTF_NONE
        puts(fmt);
#else
        va_list args;
        va_start(args, fmt);
10001d06:	a905      	add	r1, sp, #20
#if PICO_PRINTF_ALWAYS_INCLUDED
        vprintf(fmt, args);
#else
        weak_raw_vprintf(fmt, args);
10001d08:	0018      	movs	r0, r3
        va_start(args, fmt);
10001d0a:	9101      	str	r1, [sp, #4]
        weak_raw_vprintf(fmt, args);
10001d0c:	f7ff ff48 	bl	10001ba0 <weak_raw_vprintf>
#endif
        va_end(args);
        puts("\n");
10001d10:	4803      	ldr	r0, [pc, #12]	; (10001d20 <panic+0x2c>)
10001d12:	f000 f8e7 	bl	10001ee4 <__wrap_puts>
10001d16:	be00      	bkpt	0x0000
10001d18:	e7fd      	b.n	10001d16 <panic+0x22>
10001d1a:	46c0      	nop			; (mov r8, r8)
10001d1c:	10006e7c 	.word	0x10006e7c
10001d20:	10006e8c 	.word	0x10006e8c

10001d24 <hard_assertion_failure>:
    }

    _exit(1);
}

void hard_assertion_failure(void) {
10001d24:	b510      	push	{r4, lr}
    panic("Hard assert");
10001d26:	4801      	ldr	r0, [pc, #4]	; (10001d2c <hard_assertion_failure+0x8>)
10001d28:	f7ff ffe4 	bl	10001cf4 <panic>
10001d2c:	10006e90 	.word	0x10006e90

10001d30 <stdio_out_chars_crlf.part.0>:
}
static void print_serialize_end() {
}
#endif

static void stdio_out_chars_crlf(stdio_driver_t *driver, const char *s, int len) {
10001d30:	b5f0      	push	{r4, r5, r6, r7, lr}
10001d32:	4646      	mov	r6, r8
10001d34:	464f      	mov	r7, r9
10001d36:	46d6      	mov	lr, sl
10001d38:	4680      	mov	r8, r0
10001d3a:	b5c0      	push	{r6, r7, lr}
10001d3c:	000e      	movs	r6, r1
10001d3e:	1e17      	subs	r7, r2, #0
        driver->out_chars(s, len);
        return;
    }
    int first_of_chunk = 0;
    static const char crlf_str[] = {'\r', '\n'};
    for (int i = 0; i < len; i++) {
10001d40:	dd3f      	ble.n	10001dc2 <stdio_out_chars_crlf.part.0+0x92>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10001d42:	1e4b      	subs	r3, r1, #1
10001d44:	4699      	mov	r9, r3
        if (s[i] == '\n' && !prev_char_was_cr) {
            if (i > first_of_chunk) {
                driver->out_chars(&s[first_of_chunk], i - first_of_chunk);
            }
            driver->out_chars(crlf_str, 2);
10001d46:	4b21      	ldr	r3, [pc, #132]	; (10001dcc <stdio_out_chars_crlf.part.0+0x9c>)
    for (int i = 0; i < len; i++) {
10001d48:	2501      	movs	r5, #1
10001d4a:	2400      	movs	r4, #0
    int first_of_chunk = 0;
10001d4c:	2000      	movs	r0, #0
            driver->out_chars(crlf_str, 2);
10001d4e:	469a      	mov	sl, r3
10001d50:	e00d      	b.n	10001d6e <stdio_out_chars_crlf.part.0+0x3e>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10001d52:	464b      	mov	r3, r9
10001d54:	5d1b      	ldrb	r3, [r3, r4]
10001d56:	3b0d      	subs	r3, #13
10001d58:	425a      	negs	r2, r3
10001d5a:	4153      	adcs	r3, r2
        if (s[i] == '\n' && !prev_char_was_cr) {
10001d5c:	5d32      	ldrb	r2, [r6, r4]
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10001d5e:	b2db      	uxtb	r3, r3
        if (s[i] == '\n' && !prev_char_was_cr) {
10001d60:	2a0a      	cmp	r2, #10
10001d62:	d00b      	beq.n	10001d7c <stdio_out_chars_crlf.part.0+0x4c>
            first_of_chunk = i + 1;
10001d64:	002b      	movs	r3, r5
    for (int i = 0; i < len; i++) {
10001d66:	3401      	adds	r4, #1
10001d68:	3501      	adds	r5, #1
10001d6a:	429f      	cmp	r7, r3
10001d6c:	dd1a      	ble.n	10001da4 <stdio_out_chars_crlf.part.0+0x74>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10001d6e:	2c00      	cmp	r4, #0
10001d70:	d1ef      	bne.n	10001d52 <stdio_out_chars_crlf.part.0+0x22>
10001d72:	4643      	mov	r3, r8
        if (s[i] == '\n' && !prev_char_was_cr) {
10001d74:	5d32      	ldrb	r2, [r6, r4]
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10001d76:	7c1b      	ldrb	r3, [r3, #16]
        if (s[i] == '\n' && !prev_char_was_cr) {
10001d78:	2a0a      	cmp	r2, #10
10001d7a:	d1f3      	bne.n	10001d64 <stdio_out_chars_crlf.part.0+0x34>
10001d7c:	2b00      	cmp	r3, #0
10001d7e:	d1f1      	bne.n	10001d64 <stdio_out_chars_crlf.part.0+0x34>
            if (i > first_of_chunk) {
10001d80:	42a0      	cmp	r0, r4
10001d82:	da04      	bge.n	10001d8e <stdio_out_chars_crlf.part.0+0x5e>
                driver->out_chars(&s[first_of_chunk], i - first_of_chunk);
10001d84:	4643      	mov	r3, r8
10001d86:	1a21      	subs	r1, r4, r0
10001d88:	681b      	ldr	r3, [r3, #0]
10001d8a:	1830      	adds	r0, r6, r0
10001d8c:	4798      	blx	r3
            driver->out_chars(crlf_str, 2);
10001d8e:	4643      	mov	r3, r8
10001d90:	4650      	mov	r0, sl
10001d92:	681b      	ldr	r3, [r3, #0]
10001d94:	2102      	movs	r1, #2
10001d96:	4798      	blx	r3
    for (int i = 0; i < len; i++) {
10001d98:	3401      	adds	r4, #1
            first_of_chunk = i + 1;
10001d9a:	0028      	movs	r0, r5
10001d9c:	002b      	movs	r3, r5
    for (int i = 0; i < len; i++) {
10001d9e:	3501      	adds	r5, #1
10001da0:	429f      	cmp	r7, r3
10001da2:	dce4      	bgt.n	10001d6e <stdio_out_chars_crlf.part.0+0x3e>
        }
    }
    if (first_of_chunk < len) {
10001da4:	4287      	cmp	r7, r0
10001da6:	dd04      	ble.n	10001db2 <stdio_out_chars_crlf.part.0+0x82>
        driver->out_chars(&s[first_of_chunk], len - first_of_chunk);
10001da8:	4643      	mov	r3, r8
10001daa:	1a39      	subs	r1, r7, r0
10001dac:	681b      	ldr	r3, [r3, #0]
10001dae:	1830      	adds	r0, r6, r0
10001db0:	4798      	blx	r3
    }
    if (len > 0) {
        driver->last_ended_with_cr = s[len - 1] == '\r';
10001db2:	19f6      	adds	r6, r6, r7
10001db4:	3e01      	subs	r6, #1
10001db6:	7833      	ldrb	r3, [r6, #0]
10001db8:	3b0d      	subs	r3, #13
10001dba:	425a      	negs	r2, r3
10001dbc:	4153      	adcs	r3, r2
10001dbe:	4642      	mov	r2, r8
10001dc0:	7413      	strb	r3, [r2, #16]
    }
#else
    driver->out_chars(s, len);
#endif
}
10001dc2:	bce0      	pop	{r5, r6, r7}
10001dc4:	46ba      	mov	sl, r7
10001dc6:	46b1      	mov	r9, r6
10001dc8:	46a8      	mov	r8, r5
10001dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001dcc:	10006e9c 	.word	0x10006e9c

10001dd0 <stdio_put_string.isra.0>:

static bool stdio_put_string(const char *s, int len, bool newline) {
10001dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
10001dd2:	4657      	mov	r7, sl
10001dd4:	4645      	mov	r5, r8
10001dd6:	46de      	mov	lr, fp
10001dd8:	464e      	mov	r6, r9
 *  \ingroup hardware_sync
 *
 * \return The core number the call was made from
 */
static inline uint get_core_num() {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
10001dda:	23d0      	movs	r3, #208	; 0xd0
10001ddc:	b5e0      	push	{r5, r6, r7, lr}
10001dde:	061b      	lsls	r3, r3, #24
10001de0:	681c      	ldr	r4, [r3, #0]
    if (!mutex_try_enter(&print_mutex, &owner)) {
10001de2:	4b35      	ldr	r3, [pc, #212]	; (10001eb8 <stdio_put_string.isra.0+0xe8>)
static bool stdio_put_string(const char *s, int len, bool newline) {
10001de4:	b083      	sub	sp, #12
10001de6:	0007      	movs	r7, r0
10001de8:	000d      	movs	r5, r1
    if (!mutex_try_enter(&print_mutex, &owner)) {
10001dea:	0018      	movs	r0, r3
10001dec:	a901      	add	r1, sp, #4
static bool stdio_put_string(const char *s, int len, bool newline) {
10001dee:	4690      	mov	r8, r2
    if (!mutex_try_enter(&print_mutex, &owner)) {
10001df0:	469a      	mov	sl, r3
10001df2:	f004 ffdd 	bl	10006db0 <__mutex_try_enter_veneer>
10001df6:	4681      	mov	r9, r0
10001df8:	2800      	cmp	r0, #0
10001dfa:	d107      	bne.n	10001e0c <stdio_put_string.isra.0+0x3c>
        if (owner == core_num) {
10001dfc:	9b01      	ldr	r3, [sp, #4]
10001dfe:	429c      	cmp	r4, r3
10001e00:	d004      	beq.n	10001e0c <stdio_put_string.isra.0+0x3c>
        mutex_enter_blocking(&print_mutex);
10001e02:	4650      	mov	r0, sl
10001e04:	f004 ffec 	bl	10006de0 <__mutex_enter_blocking_veneer>
    return true;
10001e08:	2301      	movs	r3, #1
10001e0a:	4699      	mov	r9, r3
    if (!serialzed) {
#if PICO_STDIO_IGNORE_NESTED_STDOUT
        return false;
#endif
    }
    if (len == -1) len = strlen(s);
10001e0c:	1c6b      	adds	r3, r5, #1
10001e0e:	d103      	bne.n	10001e18 <stdio_put_string.isra.0+0x48>
10001e10:	0038      	movs	r0, r7
10001e12:	f004 fe4f 	bl	10006ab4 <strlen>
10001e16:	0005      	movs	r5, r0
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10001e18:	4b28      	ldr	r3, [pc, #160]	; (10001ebc <stdio_put_string.isra.0+0xec>)
10001e1a:	681c      	ldr	r4, [r3, #0]
10001e1c:	2c00      	cmp	r4, #0
10001e1e:	d02f      	beq.n	10001e80 <stdio_put_string.isra.0+0xb0>
        if (!driver->out_chars) continue;
        if (filter && filter != driver) continue;
        stdio_out_chars_crlf(driver, s, len);
        if (newline) {
            const char c = '\n';
10001e20:	230a      	movs	r3, #10
        if (filter && filter != driver) continue;
10001e22:	4e27      	ldr	r6, [pc, #156]	; (10001ec0 <stdio_put_string.isra.0+0xf0>)
            const char c = '\n';
10001e24:	469b      	mov	fp, r3
10001e26:	e002      	b.n	10001e2e <stdio_put_string.isra.0+0x5e>
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10001e28:	68e4      	ldr	r4, [r4, #12]
10001e2a:	2c00      	cmp	r4, #0
10001e2c:	d028      	beq.n	10001e80 <stdio_put_string.isra.0+0xb0>
        if (!driver->out_chars) continue;
10001e2e:	6822      	ldr	r2, [r4, #0]
10001e30:	2a00      	cmp	r2, #0
10001e32:	d0f9      	beq.n	10001e28 <stdio_put_string.isra.0+0x58>
        if (filter && filter != driver) continue;
10001e34:	6833      	ldr	r3, [r6, #0]
10001e36:	2b00      	cmp	r3, #0
10001e38:	d001      	beq.n	10001e3e <stdio_put_string.isra.0+0x6e>
10001e3a:	42a3      	cmp	r3, r4
10001e3c:	d1f4      	bne.n	10001e28 <stdio_put_string.isra.0+0x58>
    if (!driver->crlf_enabled) {
10001e3e:	7c63      	ldrb	r3, [r4, #17]
10001e40:	2b00      	cmp	r3, #0
10001e42:	d027      	beq.n	10001e94 <stdio_put_string.isra.0+0xc4>
10001e44:	002a      	movs	r2, r5
10001e46:	0039      	movs	r1, r7
10001e48:	0020      	movs	r0, r4
10001e4a:	f7ff ff71 	bl	10001d30 <stdio_out_chars_crlf.part.0>
        if (newline) {
10001e4e:	4643      	mov	r3, r8
10001e50:	2b00      	cmp	r3, #0
10001e52:	d0e9      	beq.n	10001e28 <stdio_put_string.isra.0+0x58>
            const char c = '\n';
10001e54:	466b      	mov	r3, sp
10001e56:	465a      	mov	r2, fp
10001e58:	711a      	strb	r2, [r3, #4]
    if (!driver->crlf_enabled) {
10001e5a:	7c63      	ldrb	r3, [r4, #17]
10001e5c:	2b00      	cmp	r3, #0
10001e5e:	d01d      	beq.n	10001e9c <stdio_put_string.isra.0+0xcc>
        if (s[i] == '\n' && !prev_char_was_cr) {
10001e60:	7c23      	ldrb	r3, [r4, #16]
10001e62:	2b00      	cmp	r3, #0
10001e64:	d023      	beq.n	10001eae <stdio_put_string.isra.0+0xde>
        driver->out_chars(&s[first_of_chunk], len - first_of_chunk);
10001e66:	2101      	movs	r1, #1
10001e68:	6823      	ldr	r3, [r4, #0]
10001e6a:	a801      	add	r0, sp, #4
10001e6c:	4798      	blx	r3
        driver->last_ended_with_cr = s[len - 1] == '\r';
10001e6e:	466b      	mov	r3, sp
10001e70:	791b      	ldrb	r3, [r3, #4]
10001e72:	3b0d      	subs	r3, #13
10001e74:	425a      	negs	r2, r3
10001e76:	4153      	adcs	r3, r2
10001e78:	7423      	strb	r3, [r4, #16]
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10001e7a:	68e4      	ldr	r4, [r4, #12]
10001e7c:	2c00      	cmp	r4, #0
10001e7e:	d1d6      	bne.n	10001e2e <stdio_put_string.isra.0+0x5e>
            stdio_out_chars_crlf(driver, &c, 1);
        }
    }
    if (serialzed) {
10001e80:	464b      	mov	r3, r9
10001e82:	2b00      	cmp	r3, #0
10001e84:	d10f      	bne.n	10001ea6 <stdio_put_string.isra.0+0xd6>
        stdout_serialize_end();
    }
    return len;
}
10001e86:	b003      	add	sp, #12
10001e88:	bcf0      	pop	{r4, r5, r6, r7}
10001e8a:	46bb      	mov	fp, r7
10001e8c:	46b2      	mov	sl, r6
10001e8e:	46a9      	mov	r9, r5
10001e90:	46a0      	mov	r8, r4
10001e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
        driver->out_chars(s, len);
10001e94:	0029      	movs	r1, r5
10001e96:	0038      	movs	r0, r7
10001e98:	4790      	blx	r2
        return;
10001e9a:	e7d8      	b.n	10001e4e <stdio_put_string.isra.0+0x7e>
        driver->out_chars(s, len);
10001e9c:	2101      	movs	r1, #1
10001e9e:	6823      	ldr	r3, [r4, #0]
10001ea0:	a801      	add	r0, sp, #4
10001ea2:	4798      	blx	r3
        return;
10001ea4:	e7c0      	b.n	10001e28 <stdio_put_string.isra.0+0x58>
    mutex_exit(&print_mutex);
10001ea6:	4650      	mov	r0, sl
10001ea8:	f004 ff6a 	bl	10006d80 <__mutex_exit_veneer>
    return len;
10001eac:	e7eb      	b.n	10001e86 <stdio_put_string.isra.0+0xb6>
            driver->out_chars(crlf_str, 2);
10001eae:	2102      	movs	r1, #2
10001eb0:	4804      	ldr	r0, [pc, #16]	; (10001ec4 <stdio_put_string.isra.0+0xf4>)
10001eb2:	6823      	ldr	r3, [r4, #0]
10001eb4:	4798      	blx	r3
    if (first_of_chunk < len) {
10001eb6:	e7da      	b.n	10001e6e <stdio_put_string.isra.0+0x9e>
10001eb8:	20003028 	.word	0x20003028
10001ebc:	200234b4 	.word	0x200234b4
10001ec0:	200234bc 	.word	0x200234bc
10001ec4:	10006e9c 	.word	0x10006e9c

10001ec8 <__wrap_putchar>:
        // todo maybe a little sleep here?
    } while (!time_reached(until));
    return PICO_ERROR_TIMEOUT;
}

int WRAPPER_FUNC(putchar)(int c) {
10001ec8:	b510      	push	{r4, lr}
10001eca:	b082      	sub	sp, #8
    char cc = c;
10001ecc:	466b      	mov	r3, sp
int WRAPPER_FUNC(putchar)(int c) {
10001ece:	0004      	movs	r4, r0
    stdio_put_string(&cc, 1, false);
10001ed0:	2200      	movs	r2, #0
    char cc = c;
10001ed2:	1dd8      	adds	r0, r3, #7
    stdio_put_string(&cc, 1, false);
10001ed4:	2101      	movs	r1, #1
    char cc = c;
10001ed6:	7004      	strb	r4, [r0, #0]
    stdio_put_string(&cc, 1, false);
10001ed8:	f7ff ff7a 	bl	10001dd0 <stdio_put_string.isra.0>
    return c;
}
10001edc:	0020      	movs	r0, r4
10001ede:	b002      	add	sp, #8
10001ee0:	bd10      	pop	{r4, pc}
10001ee2:	46c0      	nop			; (mov r8, r8)

10001ee4 <__wrap_puts>:

int WRAPPER_FUNC(puts)(const char *s) {
10001ee4:	b570      	push	{r4, r5, r6, lr}
10001ee6:	0004      	movs	r4, r0
    int len = strlen(s);
10001ee8:	f004 fde4 	bl	10006ab4 <strlen>
    stdio_put_string(s, len, true);
10001eec:	2201      	movs	r2, #1
10001eee:	0001      	movs	r1, r0
    int len = strlen(s);
10001ef0:	0005      	movs	r5, r0
    stdio_put_string(s, len, true);
10001ef2:	0020      	movs	r0, r4
10001ef4:	f7ff ff6c 	bl	10001dd0 <stdio_put_string.isra.0>
        else drivers = driver;
    }
}

void stdio_flush() {
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10001ef8:	4b08      	ldr	r3, [pc, #32]	; (10001f1c <__wrap_puts+0x38>)
10001efa:	681c      	ldr	r4, [r3, #0]
10001efc:	2c00      	cmp	r4, #0
10001efe:	d006      	beq.n	10001f0e <__wrap_puts+0x2a>
        if (d->out_flush) d->out_flush();
10001f00:	6863      	ldr	r3, [r4, #4]
10001f02:	2b00      	cmp	r3, #0
10001f04:	d005      	beq.n	10001f12 <__wrap_puts+0x2e>
10001f06:	4798      	blx	r3
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10001f08:	68e4      	ldr	r4, [r4, #12]
10001f0a:	2c00      	cmp	r4, #0
10001f0c:	d1f8      	bne.n	10001f00 <__wrap_puts+0x1c>
}
10001f0e:	0028      	movs	r0, r5
10001f10:	bd70      	pop	{r4, r5, r6, pc}
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10001f12:	68e4      	ldr	r4, [r4, #12]
10001f14:	2c00      	cmp	r4, #0
10001f16:	d1f3      	bne.n	10001f00 <__wrap_puts+0x1c>
10001f18:	e7f9      	b.n	10001f0e <__wrap_puts+0x2a>
10001f1a:	46c0      	nop			; (mov r8, r8)
10001f1c:	200234b4 	.word	0x200234b4

10001f20 <stdio_set_driver_enabled>:
    stdio_driver_t *prev = drivers;
10001f20:	4a0d      	ldr	r2, [pc, #52]	; (10001f58 <stdio_set_driver_enabled+0x38>)
10001f22:	6813      	ldr	r3, [r2, #0]
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10001f24:	2b00      	cmp	r3, #0
10001f26:	d013      	beq.n	10001f50 <stdio_set_driver_enabled+0x30>
        if (d == driver) {
10001f28:	4283      	cmp	r3, r0
10001f2a:	d102      	bne.n	10001f32 <stdio_set_driver_enabled+0x12>
10001f2c:	e009      	b.n	10001f42 <stdio_set_driver_enabled+0x22>
10001f2e:	4298      	cmp	r0, r3
10001f30:	d008      	beq.n	10001f44 <stdio_set_driver_enabled+0x24>
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10001f32:	001a      	movs	r2, r3
10001f34:	68db      	ldr	r3, [r3, #12]
10001f36:	2b00      	cmp	r3, #0
10001f38:	d1f9      	bne.n	10001f2e <stdio_set_driver_enabled+0xe>
    if (enable) {
10001f3a:	2900      	cmp	r1, #0
10001f3c:	d000      	beq.n	10001f40 <stdio_set_driver_enabled+0x20>
        if (prev) prev->next = driver;
10001f3e:	60d0      	str	r0, [r2, #12]
}
10001f40:	4770      	bx	lr
        if (d == driver) {
10001f42:	001a      	movs	r2, r3
            if (!enable) {
10001f44:	2900      	cmp	r1, #0
10001f46:	d1fb      	bne.n	10001f40 <stdio_set_driver_enabled+0x20>
                prev->next = d->next;
10001f48:	68db      	ldr	r3, [r3, #12]
10001f4a:	60d3      	str	r3, [r2, #12]
                driver->next = NULL;
10001f4c:	60c1      	str	r1, [r0, #12]
10001f4e:	e7f7      	b.n	10001f40 <stdio_set_driver_enabled+0x20>
    if (enable) {
10001f50:	2900      	cmp	r1, #0
10001f52:	d0f5      	beq.n	10001f40 <stdio_set_driver_enabled+0x20>
        else drivers = driver;
10001f54:	6010      	str	r0, [r2, #0]
10001f56:	e7f3      	b.n	10001f40 <stdio_set_driver_enabled+0x20>
10001f58:	200234b4 	.word	0x200234b4

10001f5c <stdio_init_all>:
    int ret = vprintf(format, va);
    va_end(va);
    return ret;
}

void stdio_init_all() {
10001f5c:	b510      	push	{r4, lr}
#if PICO_STDIO_SEMIHOSTING
    stdio_semihosting_init();
#endif

#if PICO_STDIO_USB
    stdio_usb_init();
10001f5e:	f000 f8c1 	bl	100020e4 <stdio_usb_init>
#endif
}
10001f62:	bd10      	pop	{r4, pc}

10001f64 <stdio_usb_in_chars>:
        last_avail_time = 0;
    }
    mutex_exit(&stdio_usb_mutex);
}

int stdio_usb_in_chars(char *buf, int length) {
10001f64:	b570      	push	{r4, r5, r6, lr}
    uint32_t owner;
    if (!mutex_try_enter(&stdio_usb_mutex, &owner)) {
10001f66:	4c18      	ldr	r4, [pc, #96]	; (10001fc8 <stdio_usb_in_chars+0x64>)
int stdio_usb_in_chars(char *buf, int length) {
10001f68:	b082      	sub	sp, #8
10001f6a:	0006      	movs	r6, r0
10001f6c:	000d      	movs	r5, r1
    if (!mutex_try_enter(&stdio_usb_mutex, &owner)) {
10001f6e:	0020      	movs	r0, r4
10001f70:	a901      	add	r1, sp, #4
10001f72:	f004 ff1d 	bl	10006db0 <__mutex_try_enter_veneer>
10001f76:	2800      	cmp	r0, #0
10001f78:	d108      	bne.n	10001f8c <stdio_usb_in_chars+0x28>
        if (owner == get_core_num()) return PICO_ERROR_NO_DATA; // would deadlock otherwise
10001f7a:	23d0      	movs	r3, #208	; 0xd0
10001f7c:	061b      	lsls	r3, r3, #24
10001f7e:	681b      	ldr	r3, [r3, #0]
10001f80:	9a01      	ldr	r2, [sp, #4]
10001f82:	429a      	cmp	r2, r3
10001f84:	d01c      	beq.n	10001fc0 <stdio_usb_in_chars+0x5c>
        mutex_enter_blocking(&stdio_usb_mutex);
10001f86:	0020      	movs	r0, r4
10001f88:	f004 ff2a 	bl	10006de0 <__mutex_enter_blocking_veneer>
  return tud_cdc_n_write(itf, str, strlen(str));
}

static inline bool tud_cdc_connected (void)
{
  return tud_cdc_n_connected(0);
10001f8c:	2000      	movs	r0, #0
10001f8e:	f000 feeb 	bl	10002d68 <tud_cdc_n_connected>
    }
    int rc = PICO_ERROR_NO_DATA;
    if (tud_cdc_connected() && tud_cdc_available()) {
10001f92:	2800      	cmp	r0, #0
10001f94:	d107      	bne.n	10001fa6 <stdio_usb_in_chars+0x42>
    int rc = PICO_ERROR_NO_DATA;
10001f96:	2503      	movs	r5, #3
10001f98:	426d      	negs	r5, r5
        int count = tud_cdc_read(buf, length);
        rc =  count ? count : PICO_ERROR_NO_DATA;
    }
    mutex_exit(&stdio_usb_mutex);
10001f9a:	0020      	movs	r0, r4
10001f9c:	f004 fef0 	bl	10006d80 <__mutex_exit_veneer>
    return rc;
}
10001fa0:	0028      	movs	r0, r5
10001fa2:	b002      	add	sp, #8
10001fa4:	bd70      	pop	{r4, r5, r6, pc}
  tud_cdc_n_set_wanted_char(0, wanted);
}

static inline uint32_t tud_cdc_available (void)
{
  return tud_cdc_n_available(0);
10001fa6:	2000      	movs	r0, #0
10001fa8:	f000 fef8 	bl	10002d9c <tud_cdc_n_available>
    if (tud_cdc_connected() && tud_cdc_available()) {
10001fac:	2800      	cmp	r0, #0
10001fae:	d0f2      	beq.n	10001f96 <stdio_usb_in_chars+0x32>
  return tud_cdc_n_read_char(0);
}

static inline uint32_t tud_cdc_read (void* buffer, uint32_t bufsize)
{
  return tud_cdc_n_read(0, buffer, bufsize);
10001fb0:	002a      	movs	r2, r5
10001fb2:	0031      	movs	r1, r6
10001fb4:	2000      	movs	r0, #0
10001fb6:	f000 feff 	bl	10002db8 <tud_cdc_n_read>
10001fba:	1e05      	subs	r5, r0, #0
        rc =  count ? count : PICO_ERROR_NO_DATA;
10001fbc:	d0eb      	beq.n	10001f96 <stdio_usb_in_chars+0x32>
10001fbe:	e7ec      	b.n	10001f9a <stdio_usb_in_chars+0x36>
        if (owner == get_core_num()) return PICO_ERROR_NO_DATA; // would deadlock otherwise
10001fc0:	2503      	movs	r5, #3
10001fc2:	426d      	negs	r5, r5
10001fc4:	e7ec      	b.n	10001fa0 <stdio_usb_in_chars+0x3c>
10001fc6:	46c0      	nop			; (mov r8, r8)
10001fc8:	20023b68 	.word	0x20023b68

10001fcc <stdio_usb_out_chars>:
static void stdio_usb_out_chars(const char *buf, int length) {
10001fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
10001fce:	46de      	mov	lr, fp
10001fd0:	464f      	mov	r7, r9
10001fd2:	4646      	mov	r6, r8
10001fd4:	b5c0      	push	{r6, r7, lr}
    if (!mutex_try_enter(&stdio_usb_mutex, &owner)) {
10001fd6:	4b33      	ldr	r3, [pc, #204]	; (100020a4 <stdio_usb_out_chars+0xd8>)
static void stdio_usb_out_chars(const char *buf, int length) {
10001fd8:	b082      	sub	sp, #8
10001fda:	4681      	mov	r9, r0
10001fdc:	000d      	movs	r5, r1
    if (!mutex_try_enter(&stdio_usb_mutex, &owner)) {
10001fde:	0018      	movs	r0, r3
10001fe0:	a901      	add	r1, sp, #4
10001fe2:	469b      	mov	fp, r3
10001fe4:	f004 fee4 	bl	10006db0 <__mutex_try_enter_veneer>
10001fe8:	2800      	cmp	r0, #0
10001fea:	d108      	bne.n	10001ffe <stdio_usb_out_chars+0x32>
        if (owner == get_core_num()) return; // would deadlock otherwise
10001fec:	23d0      	movs	r3, #208	; 0xd0
10001fee:	061b      	lsls	r3, r3, #24
10001ff0:	681b      	ldr	r3, [r3, #0]
10001ff2:	9a01      	ldr	r2, [sp, #4]
10001ff4:	429a      	cmp	r2, r3
10001ff6:	d04f      	beq.n	10002098 <stdio_usb_out_chars+0xcc>
        mutex_enter_blocking(&stdio_usb_mutex);
10001ff8:	4658      	mov	r0, fp
10001ffa:	f004 fef1 	bl	10006de0 <__mutex_enter_blocking_veneer>
  return tud_cdc_n_connected(0);
10001ffe:	2000      	movs	r0, #0
10002000:	f000 feb2 	bl	10002d68 <tud_cdc_n_connected>
    if (tud_cdc_connected()) {
10002004:	2800      	cmp	r0, #0
10002006:	d03f      	beq.n	10002088 <stdio_usb_out_chars+0xbc>
        for (int i = 0; i < length;) {
10002008:	2400      	movs	r4, #0
1000200a:	2d00      	cmp	r5, #0
1000200c:	dd41      	ble.n	10002092 <stdio_usb_out_chars+0xc6>
                    (!tud_cdc_write_available() && time_us_64() > last_avail_time + PICO_STDIO_USB_STDOUT_TIMEOUT_US)) {
1000200e:	4e26      	ldr	r6, [pc, #152]	; (100020a8 <stdio_usb_out_chars+0xdc>)
10002010:	e011      	b.n	10002036 <stdio_usb_out_chars+0x6a>
                int n2 = tud_cdc_write(buf + i, n);
10002012:	464b      	mov	r3, r9
  return tud_cdc_n_write_char(0, ch);
}

static inline uint32_t tud_cdc_write (void const* buffer, uint32_t bufsize)
{
  return tud_cdc_n_write(0, buffer, bufsize);
10002014:	2000      	movs	r0, #0
10002016:	1919      	adds	r1, r3, r4
10002018:	f000 ff5a 	bl	10002ed0 <tud_cdc_n_write>
1000201c:	4680      	mov	r8, r0
                tud_task();
1000201e:	f001 fbab 	bl	10003778 <tud_task>
  return tud_cdc_n_write_str(0, str);
}

static inline uint32_t tud_cdc_write_flush (void)
{
  return tud_cdc_n_write_flush(0);
10002022:	2000      	movs	r0, #0
10002024:	f000 ff02 	bl	10002e2c <tud_cdc_n_write_flush>
                last_avail_time = time_us_64();
10002028:	f000 fd9a 	bl	10002b60 <time_us_64>
1000202c:	6030      	str	r0, [r6, #0]
1000202e:	6071      	str	r1, [r6, #4]
                i += n2;
10002030:	4444      	add	r4, r8
        for (int i = 0; i < length;) {
10002032:	42ac      	cmp	r4, r5
10002034:	da2d      	bge.n	10002092 <stdio_usb_out_chars+0xc6>
}

static inline uint32_t tud_cdc_write_available(void)
{
  return tud_cdc_n_write_available(0);
10002036:	2000      	movs	r0, #0
10002038:	f000 ff66 	bl	10002f08 <tud_cdc_n_write_available>
            int n = length - i;
1000203c:	1b2f      	subs	r7, r5, r4
1000203e:	0002      	movs	r2, r0
            if (n > avail) n = avail;
10002040:	42b8      	cmp	r0, r7
10002042:	dd00      	ble.n	10002046 <stdio_usb_out_chars+0x7a>
10002044:	003a      	movs	r2, r7
            if (n) {
10002046:	2a00      	cmp	r2, #0
10002048:	d1e3      	bne.n	10002012 <stdio_usb_out_chars+0x46>
                tud_task();
1000204a:	f001 fb95 	bl	10003778 <tud_task>
  return tud_cdc_n_write_flush(0);
1000204e:	2000      	movs	r0, #0
10002050:	f000 feec 	bl	10002e2c <tud_cdc_n_write_flush>
  return tud_cdc_n_connected(0);
10002054:	2000      	movs	r0, #0
10002056:	f000 fe87 	bl	10002d68 <tud_cdc_n_connected>
                if (!tud_cdc_connected() ||
1000205a:	2800      	cmp	r0, #0
1000205c:	d019      	beq.n	10002092 <stdio_usb_out_chars+0xc6>
  return tud_cdc_n_write_available(0);
1000205e:	2000      	movs	r0, #0
10002060:	f000 ff52 	bl	10002f08 <tud_cdc_n_write_available>
10002064:	2800      	cmp	r0, #0
10002066:	d1e4      	bne.n	10002032 <stdio_usb_out_chars+0x66>
                    (!tud_cdc_write_available() && time_us_64() > last_avail_time + PICO_STDIO_USB_STDOUT_TIMEOUT_US)) {
10002068:	f000 fd7a 	bl	10002b60 <time_us_64>
1000206c:	6832      	ldr	r2, [r6, #0]
1000206e:	6873      	ldr	r3, [r6, #4]
10002070:	000f      	movs	r7, r1
10002072:	2100      	movs	r1, #0
10002074:	4684      	mov	ip, r0
10002076:	480d      	ldr	r0, [pc, #52]	; (100020ac <stdio_usb_out_chars+0xe0>)
10002078:	1812      	adds	r2, r2, r0
1000207a:	414b      	adcs	r3, r1
1000207c:	429f      	cmp	r7, r3
1000207e:	d808      	bhi.n	10002092 <stdio_usb_out_chars+0xc6>
10002080:	d1d7      	bne.n	10002032 <stdio_usb_out_chars+0x66>
10002082:	4594      	cmp	ip, r2
10002084:	d9d5      	bls.n	10002032 <stdio_usb_out_chars+0x66>
10002086:	e004      	b.n	10002092 <stdio_usb_out_chars+0xc6>
        last_avail_time = 0;
10002088:	2000      	movs	r0, #0
1000208a:	2100      	movs	r1, #0
1000208c:	4b06      	ldr	r3, [pc, #24]	; (100020a8 <stdio_usb_out_chars+0xdc>)
1000208e:	6018      	str	r0, [r3, #0]
10002090:	6059      	str	r1, [r3, #4]
    mutex_exit(&stdio_usb_mutex);
10002092:	4658      	mov	r0, fp
10002094:	f004 fe74 	bl	10006d80 <__mutex_exit_veneer>
}
10002098:	b002      	add	sp, #8
1000209a:	bce0      	pop	{r5, r6, r7}
1000209c:	46bb      	mov	fp, r7
1000209e:	46b1      	mov	r9, r6
100020a0:	46a8      	mov	r8, r5
100020a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100020a4:	20023b68 	.word	0x20023b68
100020a8:	20003048 	.word	0x20003048
100020ac:	0007a120 	.word	0x0007a120

100020b0 <timer_task>:
    irq_set_pending(PICO_STDIO_USB_LOW_PRIORITY_IRQ);
100020b0:	201f      	movs	r0, #31
static int64_t timer_task(__unused alarm_id_t id, __unused void *user_data) {
100020b2:	b510      	push	{r4, lr}
    irq_set_pending(PICO_STDIO_USB_LOW_PRIORITY_IRQ);
100020b4:	f7ff f824 	bl	10001100 <irq_set_pending>
}
100020b8:	20fa      	movs	r0, #250	; 0xfa
100020ba:	2100      	movs	r1, #0
100020bc:	0080      	lsls	r0, r0, #2
100020be:	bd10      	pop	{r4, pc}

100020c0 <low_priority_worker_irq>:
static void low_priority_worker_irq() {
100020c0:	b510      	push	{r4, lr}
    if (mutex_try_enter(&stdio_usb_mutex, NULL)) {
100020c2:	4c07      	ldr	r4, [pc, #28]	; (100020e0 <low_priority_worker_irq+0x20>)
100020c4:	2100      	movs	r1, #0
100020c6:	0020      	movs	r0, r4
100020c8:	f004 fe72 	bl	10006db0 <__mutex_try_enter_veneer>
100020cc:	2800      	cmp	r0, #0
100020ce:	d100      	bne.n	100020d2 <low_priority_worker_irq+0x12>
}
100020d0:	bd10      	pop	{r4, pc}
        tud_task();
100020d2:	f001 fb51 	bl	10003778 <tud_task>
        mutex_exit(&stdio_usb_mutex);
100020d6:	0020      	movs	r0, r4
100020d8:	f004 fe52 	bl	10006d80 <__mutex_exit_veneer>
}
100020dc:	e7f8      	b.n	100020d0 <low_priority_worker_irq+0x10>
100020de:	46c0      	nop			; (mov r8, r8)
100020e0:	20023b68 	.word	0x20023b68

100020e4 <stdio_usb_init>:
#if PICO_STDIO_ENABLE_CRLF_SUPPORT
    .crlf_enabled = PICO_STDIO_USB_DEFAULT_CRLF
#endif
};

bool stdio_usb_init(void) {
100020e4:	b570      	push	{r4, r5, r6, lr}
#if !PICO_NO_BI_STDIO_USB
    bi_decl_if_func_used(bi_program_feature("USB stdin / stdout"));
100020e6:	4b1e      	ldr	r3, [pc, #120]	; (10002160 <stdio_usb_init+0x7c>)
bool stdio_usb_init(void) {
100020e8:	b084      	sub	sp, #16
    bi_decl_if_func_used(bi_program_feature("USB stdin / stdout"));
100020ea:	781b      	ldrb	r3, [r3, #0]
#endif

    // initialize TinyUSB
    tusb_init();
100020ec:	f002 fd42 	bl	10004b74 <tusb_init>

    irq_set_exclusive_handler(PICO_STDIO_USB_LOW_PRIORITY_IRQ, low_priority_worker_irq);
100020f0:	201f      	movs	r0, #31
100020f2:	491c      	ldr	r1, [pc, #112]	; (10002164 <stdio_usb_init+0x80>)
100020f4:	f7ff f814 	bl	10001120 <irq_set_exclusive_handler>
    irq_set_enabled(PICO_STDIO_USB_LOW_PRIORITY_IRQ, true);
100020f8:	2101      	movs	r1, #1
100020fa:	201f      	movs	r0, #31
100020fc:	f7fe ffee 	bl	100010dc <irq_set_enabled>

    mutex_init(&stdio_usb_mutex);
10002100:	4819      	ldr	r0, [pc, #100]	; (10002168 <stdio_usb_init+0x84>)
10002102:	f7ff fa09 	bl	10001518 <mutex_init>
 * @return >0 the alarm id
 * @return 0 the target timestamp was during or before this method call (whether the callback was called depends on fire_if_past)
 * @return -1 if there were no alarm slots available
 */
static inline alarm_id_t add_alarm_in_us(uint64_t us, alarm_callback_t callback, void *user_data, bool fire_if_past) {
    return alarm_pool_add_alarm_in_us(alarm_pool_get_default(), us, callback, user_data, fire_if_past);
10002106:	f000 fb2f 	bl	10002768 <alarm_pool_get_default>
1000210a:	0006      	movs	r6, r0
    update_us_since_boot(&t, time_us_64());
1000210c:	f000 fd28 	bl	10002b60 <time_us_64>
    uint64_t delayed = base + us;
10002110:	22fa      	movs	r2, #250	; 0xfa
    update_us_since_boot(&t, time_us_64());
10002112:	0004      	movs	r4, r0
10002114:	000d      	movs	r5, r1
    uint64_t delayed = base + us;
10002116:	2300      	movs	r3, #0
10002118:	0092      	lsls	r2, r2, #2
1000211a:	1912      	adds	r2, r2, r4
1000211c:	416b      	adcs	r3, r5
    if (delayed < base) {
1000211e:	4299      	cmp	r1, r3
10002120:	d814      	bhi.n	1000214c <stdio_usb_init+0x68>
10002122:	d011      	beq.n	10002148 <stdio_usb_init+0x64>
    return alarm_pool_add_alarm_at(pool, delayed_by_us(get_absolute_time(), us), callback, user_data, fire_if_past);
10002124:	2101      	movs	r1, #1
10002126:	9102      	str	r1, [sp, #8]
10002128:	2100      	movs	r1, #0
1000212a:	9101      	str	r1, [sp, #4]
1000212c:	490f      	ldr	r1, [pc, #60]	; (1000216c <stdio_usb_init+0x88>)
1000212e:	0030      	movs	r0, r6
10002130:	9100      	str	r1, [sp, #0]
10002132:	f000 fb1f 	bl	10002774 <alarm_pool_add_alarm_at>
    bool rc = add_alarm_in_us(PICO_STDIO_USB_TASK_INTERVAL_US, timer_task, NULL, true);
10002136:	0004      	movs	r4, r0
10002138:	1e63      	subs	r3, r4, #1
1000213a:	419c      	sbcs	r4, r3
1000213c:	b2e4      	uxtb	r4, r4
    if (rc) {
1000213e:	2800      	cmp	r0, #0
10002140:	d108      	bne.n	10002154 <stdio_usb_init+0x70>
        stdio_set_driver_enabled(&stdio_usb, true);
    }
    return rc;
}
10002142:	0020      	movs	r0, r4
10002144:	b004      	add	sp, #16
10002146:	bd70      	pop	{r4, r5, r6, pc}
    if (delayed < base) {
10002148:	4290      	cmp	r0, r2
1000214a:	d9eb      	bls.n	10002124 <stdio_usb_init+0x40>
        delayed = (uint64_t)-1;
1000214c:	2201      	movs	r2, #1
1000214e:	4252      	negs	r2, r2
10002150:	17d3      	asrs	r3, r2, #31
10002152:	e7e7      	b.n	10002124 <stdio_usb_init+0x40>
        stdio_set_driver_enabled(&stdio_usb, true);
10002154:	2101      	movs	r1, #1
10002156:	4806      	ldr	r0, [pc, #24]	; (10002170 <stdio_usb_init+0x8c>)
10002158:	f7ff fee2 	bl	10001f20 <stdio_set_driver_enabled>
1000215c:	e7f1      	b.n	10002142 <stdio_usb_init+0x5e>
1000215e:	46c0      	nop			; (mov r8, r8)
10002160:	101ad74c 	.word	0x101ad74c
10002164:	100020c1 	.word	0x100020c1
10002168:	20023b68 	.word	0x20023b68
1000216c:	100020b1 	.word	0x100020b1
10002170:	20002718 	.word	0x20002718

10002174 <tud_descriptor_device_cb>:
    [USBD_STR_CDC] = "Board CDC",
};

const uint8_t *tud_descriptor_device_cb(void) {
    return (const uint8_t *)&usbd_desc_device;
}
10002174:	4800      	ldr	r0, [pc, #0]	; (10002178 <tud_descriptor_device_cb+0x4>)
10002176:	4770      	bx	lr
10002178:	10006f40 	.word	0x10006f40

1000217c <tud_descriptor_configuration_cb>:

const uint8_t *tud_descriptor_configuration_cb(uint8_t index) {
    (void)index;
    return usbd_desc_cfg;
}
1000217c:	4800      	ldr	r0, [pc, #0]	; (10002180 <tud_descriptor_configuration_cb+0x4>)
1000217e:	4770      	bx	lr
10002180:	10006ef4 	.word	0x10006ef4

10002184 <tud_descriptor_string_cb>:

const uint16_t *tud_descriptor_string_cb(uint8_t index, uint16_t langid) {
10002184:	b530      	push	{r4, r5, lr}
    #define DESC_STR_MAX (20)
    static uint16_t desc_str[DESC_STR_MAX];

    uint8_t len;
    if (index == 0) {
10002186:	2800      	cmp	r0, #0
10002188:	d106      	bne.n	10002198 <tud_descriptor_string_cb+0x14>
        desc_str[1] = 0x0409; // supported language is English
1000218a:	24c1      	movs	r4, #193	; 0xc1
1000218c:	4811      	ldr	r0, [pc, #68]	; (100021d4 <tud_descriptor_string_cb+0x50>)
1000218e:	4b12      	ldr	r3, [pc, #72]	; (100021d8 <tud_descriptor_string_cb+0x54>)
10002190:	00a4      	lsls	r4, r4, #2
10002192:	8043      	strh	r3, [r0, #2]
            desc_str[1 + len] = str[len];
        }
    }

    // first byte is length (including header), second byte is string type
    desc_str[0] = (TUSB_DESC_STRING << 8) | (2 * len + 2);
10002194:	8004      	strh	r4, [r0, #0]

    return desc_str;
}
10002196:	bd30      	pop	{r4, r5, pc}
        if (index >= sizeof(usbd_desc_str) / sizeof(usbd_desc_str[0])) {
10002198:	2804      	cmp	r0, #4
1000219a:	d819      	bhi.n	100021d0 <tud_descriptor_string_cb+0x4c>
        const char *str = usbd_desc_str[index];
1000219c:	4b0f      	ldr	r3, [pc, #60]	; (100021dc <tud_descriptor_string_cb+0x58>)
1000219e:	0080      	lsls	r0, r0, #2
100021a0:	58c5      	ldr	r5, [r0, r3]
        for (len = 0; len < DESC_STR_MAX - 1 && str[len]; ++len) {
100021a2:	480c      	ldr	r0, [pc, #48]	; (100021d4 <tud_descriptor_string_cb+0x50>)
        const char *str = usbd_desc_str[index];
100021a4:	2300      	movs	r3, #0
100021a6:	1c81      	adds	r1, r0, #2
100021a8:	e004      	b.n	100021b4 <tud_descriptor_string_cb+0x30>
        for (len = 0; len < DESC_STR_MAX - 1 && str[len]; ++len) {
100021aa:	3301      	adds	r3, #1
            desc_str[1 + len] = str[len];
100021ac:	800a      	strh	r2, [r1, #0]
        for (len = 0; len < DESC_STR_MAX - 1 && str[len]; ++len) {
100021ae:	3102      	adds	r1, #2
100021b0:	2b13      	cmp	r3, #19
100021b2:	d00a      	beq.n	100021ca <tud_descriptor_string_cb+0x46>
100021b4:	5cea      	ldrb	r2, [r5, r3]
100021b6:	b2dc      	uxtb	r4, r3
100021b8:	2a00      	cmp	r2, #0
100021ba:	d1f6      	bne.n	100021aa <tud_descriptor_string_cb+0x26>
    desc_str[0] = (TUSB_DESC_STRING << 8) | (2 * len + 2);
100021bc:	23c0      	movs	r3, #192	; 0xc0
100021be:	3401      	adds	r4, #1
100021c0:	b2e4      	uxtb	r4, r4
100021c2:	0064      	lsls	r4, r4, #1
100021c4:	009b      	lsls	r3, r3, #2
100021c6:	431c      	orrs	r4, r3
100021c8:	e7e4      	b.n	10002194 <tud_descriptor_string_cb+0x10>
100021ca:	24ca      	movs	r4, #202	; 0xca
100021cc:	00a4      	lsls	r4, r4, #2
100021ce:	e7e1      	b.n	10002194 <tud_descriptor_string_cb+0x10>
            return NULL;
100021d0:	2000      	movs	r0, #0
100021d2:	e7e0      	b.n	10002196 <tud_descriptor_string_cb+0x12>
100021d4:	2002348c 	.word	0x2002348c
100021d8:	00000409 	.word	0x00000409
100021dc:	10006f54 	.word	0x10006f54

100021e0 <set_sys_clock_pll>:
                        48 * MHZ,
                        48 * MHZ);
    }
}

void set_sys_clock_pll(uint32_t vco_freq, uint post_div1, uint post_div2) {
100021e0:	b5f0      	push	{r4, r5, r6, r7, lr}
100021e2:	b083      	sub	sp, #12
100021e4:	0006      	movs	r6, r0
100021e6:	000c      	movs	r4, r1
100021e8:	0015      	movs	r5, r2
    if (!running_on_fpga()) {
100021ea:	f7ff fc9b 	bl	10001b24 <running_on_fpga>
100021ee:	2800      	cmp	r0, #0
100021f0:	d001      	beq.n	100021f6 <set_sys_clock_pll+0x16>
                        0, // Only AUX mux on ADC
                        CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLKSRC_PLL_USB,
                        48 * MHZ,
                        48 * MHZ);
    }
}
100021f2:	b003      	add	sp, #12
100021f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        clock_configure(clk_sys,
100021f6:	4f16      	ldr	r7, [pc, #88]	; (10002250 <set_sys_clock_pll+0x70>)
100021f8:	2201      	movs	r2, #1
100021fa:	003b      	movs	r3, r7
100021fc:	2101      	movs	r1, #1
100021fe:	9700      	str	r7, [sp, #0]
10002200:	3005      	adds	r0, #5
10002202:	f7fe fc7f 	bl	10000b04 <clock_configure>
        pll_init(pll_sys, 1, vco_freq, post_div1, post_div2);
10002206:	b2eb      	uxtb	r3, r5
10002208:	0032      	movs	r2, r6
1000220a:	9300      	str	r3, [sp, #0]
1000220c:	2101      	movs	r1, #1
1000220e:	0023      	movs	r3, r4
10002210:	4810      	ldr	r0, [pc, #64]	; (10002254 <set_sys_clock_pll+0x74>)
10002212:	f7ff fc8f 	bl	10001b34 <pll_init>
        uint32_t freq = vco_freq / (post_div1 * post_div2);
10002216:	0021      	movs	r1, r4
10002218:	0030      	movs	r0, r6
1000221a:	4369      	muls	r1, r5
1000221c:	f7fe f87e 	bl	1000031c <__wrap___aeabi_uidiv>
10002220:	0004      	movs	r4, r0
        clock_configure(clk_ref,
10002222:	4b0d      	ldr	r3, [pc, #52]	; (10002258 <set_sys_clock_pll+0x78>)
10002224:	2200      	movs	r2, #0
10002226:	9300      	str	r3, [sp, #0]
10002228:	2102      	movs	r1, #2
1000222a:	2004      	movs	r0, #4
1000222c:	f7fe fc6a 	bl	10000b04 <clock_configure>
        clock_configure(clk_sys,
10002230:	0023      	movs	r3, r4
10002232:	2200      	movs	r2, #0
10002234:	2101      	movs	r1, #1
10002236:	9400      	str	r4, [sp, #0]
10002238:	2005      	movs	r0, #5
1000223a:	f7fe fc63 	bl	10000b04 <clock_configure>
        clock_configure(clk_peri,
1000223e:	003b      	movs	r3, r7
10002240:	2202      	movs	r2, #2
10002242:	2100      	movs	r1, #0
10002244:	9700      	str	r7, [sp, #0]
10002246:	2006      	movs	r0, #6
10002248:	f7fe fc5c 	bl	10000b04 <clock_configure>
}
1000224c:	e7d1      	b.n	100021f2 <set_sys_clock_pll+0x12>
1000224e:	46c0      	nop			; (mov r8, r8)
10002250:	02dc6c00 	.word	0x02dc6c00
10002254:	40028000 	.word	0x40028000
10002258:	00b71b00 	.word	0x00b71b00

1000225c <spin_locks_reset>:
    *lock = 0;
1000225c:	2100      	movs	r1, #0

static void check_lock_num(uint __unused lock_num) {
    invalid_params_if(SYNC, lock_num >= 32);
}

void spin_locks_reset(void) {
1000225e:	4b04      	ldr	r3, [pc, #16]	; (10002270 <spin_locks_reset+0x14>)
    for (uint i = 0; i < NUM_SPIN_LOCKS; i++) {
10002260:	4a04      	ldr	r2, [pc, #16]	; (10002274 <spin_locks_reset+0x18>)
    __asm volatile ("dmb");
10002262:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002266:	c302      	stmia	r3!, {r1}
10002268:	4293      	cmp	r3, r2
1000226a:	d1fa      	bne.n	10002262 <spin_locks_reset+0x6>
        spin_unlock_unsafe(spin_lock_instance(i));
    }
}
1000226c:	4770      	bx	lr
1000226e:	46c0      	nop			; (mov r8, r8)
10002270:	d0000100 	.word	0xd0000100
10002274:	d0000180 	.word	0xd0000180

10002278 <next_striped_spin_lock_num>:
    spin_unlock_unsafe(lock);
    return lock;
}

uint next_striped_spin_lock_num() {
    uint rc = striped_spin_lock_num++;
10002278:	4a04      	ldr	r2, [pc, #16]	; (1000228c <next_striped_spin_lock_num+0x14>)
1000227a:	7810      	ldrb	r0, [r2, #0]
1000227c:	1c43      	adds	r3, r0, #1
1000227e:	b2db      	uxtb	r3, r3
    if (striped_spin_lock_num > PICO_SPINLOCK_ID_STRIPED_LAST) {
10002280:	2b17      	cmp	r3, #23
10002282:	d900      	bls.n	10002286 <next_striped_spin_lock_num+0xe>
        striped_spin_lock_num = PICO_SPINLOCK_ID_STRIPED_FIRST;
10002284:	2310      	movs	r3, #16
10002286:	7013      	strb	r3, [r2, #0]
    }
    return rc;
}
10002288:	4770      	bx	lr
1000228a:	46c0      	nop			; (mov r8, r8)
1000228c:	2000272c 	.word	0x2000272c

10002290 <spin_lock_claim_unused>:
void spin_lock_unclaim(uint lock_num) {
    check_lock_num(lock_num);
    hw_claim_clear((uint8_t *) &claimed, lock_num);
}

int spin_lock_claim_unused(bool required) {
10002290:	b500      	push	{lr}
    return hw_claim_unused_from_range((uint8_t*)&claimed, required, PICO_SPINLOCK_ID_CLAIM_FREE_FIRST, PICO_SPINLOCK_ID_CLAIM_FREE_END, "No spinlocks are available");
10002292:	4b05      	ldr	r3, [pc, #20]	; (100022a8 <spin_lock_claim_unused+0x18>)
int spin_lock_claim_unused(bool required) {
10002294:	b083      	sub	sp, #12
10002296:	0001      	movs	r1, r0
    return hw_claim_unused_from_range((uint8_t*)&claimed, required, PICO_SPINLOCK_ID_CLAIM_FREE_FIRST, PICO_SPINLOCK_ID_CLAIM_FREE_END, "No spinlocks are available");
10002298:	9300      	str	r3, [sp, #0]
1000229a:	2218      	movs	r2, #24
1000229c:	231f      	movs	r3, #31
1000229e:	4803      	ldr	r0, [pc, #12]	; (100022ac <spin_lock_claim_unused+0x1c>)
100022a0:	f7fe fbe2 	bl	10000a68 <hw_claim_unused_from_range>
}
100022a4:	b003      	add	sp, #12
100022a6:	bd00      	pop	{pc}
100022a8:	10006f68 	.word	0x10006f68
100022ac:	2002345c 	.word	0x2002345c

100022b0 <timer_pool_entry_comparator>:
}
#endif

static inline alarm_pool_entry_t *get_entry(alarm_pool_t *pool, pheap_node_id_t id) {
    assert(id && id <= pool->heap->max_nodes);
    return pool->entries + id - 1;
100022b0:	6883      	ldr	r3, [r0, #8]
100022b2:	480b      	ldr	r0, [pc, #44]	; (100022e0 <timer_pool_entry_comparator+0x30>)
static inline uint8_t *get_entry_id_high(alarm_pool_t *pool, pheap_node_id_t id) {
    assert(id && id <= pool->heap->max_nodes);
    return pool->entry_ids_high + id - 1;
}

bool timer_pool_entry_comparator(void *user_data, pheap_node_id_t a, pheap_node_id_t b) {
100022b4:	b510      	push	{r4, lr}
    return pool->entries + id - 1;
100022b6:	4684      	mov	ip, r0
100022b8:	4461      	add	r1, ip
100022ba:	4462      	add	r2, ip
    alarm_pool_t *pool = (alarm_pool_t *)user_data;
    return to_us_since_boot(get_entry(pool, a)->target) < to_us_since_boot(get_entry(pool, b)->target);
100022bc:	0109      	lsls	r1, r1, #4
100022be:	0112      	lsls	r2, r2, #4
100022c0:	189a      	adds	r2, r3, r2
100022c2:	1859      	adds	r1, r3, r1
100022c4:	6854      	ldr	r4, [r2, #4]
100022c6:	684b      	ldr	r3, [r1, #4]
100022c8:	2001      	movs	r0, #1
100022ca:	429c      	cmp	r4, r3
100022cc:	d801      	bhi.n	100022d2 <timer_pool_entry_comparator+0x22>
100022ce:	d002      	beq.n	100022d6 <timer_pool_entry_comparator+0x26>
100022d0:	2000      	movs	r0, #0
100022d2:	b2c0      	uxtb	r0, r0
}
100022d4:	bd10      	pop	{r4, pc}
    return to_us_since_boot(get_entry(pool, a)->target) < to_us_since_boot(get_entry(pool, b)->target);
100022d6:	6812      	ldr	r2, [r2, #0]
100022d8:	680b      	ldr	r3, [r1, #0]
100022da:	429a      	cmp	r2, r3
100022dc:	d8f9      	bhi.n	100022d2 <timer_pool_entry_comparator+0x22>
100022de:	e7f7      	b.n	100022d0 <timer_pool_entry_comparator+0x20>
100022e0:	0fffffff 	.word	0x0fffffff

100022e4 <sev_callback>:
    __asm volatile ("sev");
100022e4:	bf40      	sev

#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
static int64_t sev_callback(alarm_id_t id, void *user_data) {
    __sev();
    return 0;
}
100022e6:	2000      	movs	r0, #0
100022e8:	2100      	movs	r1, #0
100022ea:	4770      	bx	lr

100022ec <add_alarm_under_lock.isra.0>:
static alarm_id_t add_alarm_under_lock(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
100022ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100022ee:	46de      	mov	lr, fp
100022f0:	4657      	mov	r7, sl
100022f2:	464e      	mov	r6, r9
100022f4:	4645      	mov	r5, r8
100022f6:	b5e0      	push	{r5, r6, r7, lr}
100022f8:	001f      	movs	r7, r3
100022fa:	ab0d      	add	r3, sp, #52	; 0x34
100022fc:	781b      	ldrb	r3, [r3, #0]
100022fe:	0005      	movs	r5, r0
10002300:	469b      	mov	fp, r3
    if (reuse_id) {
10002302:	9b0c      	ldr	r3, [sp, #48]	; 0x30
static alarm_id_t add_alarm_under_lock(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
10002304:	0016      	movs	r6, r2
    if (reuse_id) {
10002306:	2b00      	cmp	r3, #0
10002308:	d045      	beq.n	10002396 <add_alarm_under_lock.isra.0+0xaa>
    return pool->entries + id - 1;
1000230a:	4a3f      	ldr	r2, [pc, #252]	; (10002408 <add_alarm_under_lock.isra.0+0x11c>)
        alarm_pool_entry_t *entry = get_entry(pool, id);
1000230c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return pool->entries + id - 1;
1000230e:	4694      	mov	ip, r2
        alarm_pool_entry_t *entry = get_entry(pool, id);
10002310:	b2db      	uxtb	r3, r3
    return pool->entries + id - 1;
10002312:	68aa      	ldr	r2, [r5, #8]
        alarm_pool_entry_t *entry = get_entry(pool, id);
10002314:	469a      	mov	sl, r3
    return pool->entries + id - 1;
10002316:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        if (id == ph_insert(pool->heap, id)) {
10002318:	682c      	ldr	r4, [r5, #0]
    return pool->entries + id - 1;
1000231a:	4463      	add	r3, ip
1000231c:	4694      	mov	ip, r2
1000231e:	011b      	lsls	r3, r3, #4
        entry->callback = callback;
10002320:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    return pool->entries + id - 1;
10002322:	4463      	add	r3, ip
        entry->callback = callback;
10002324:	609a      	str	r2, [r3, #8]
        entry->user_data = user_data;
10002326:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        entry->target = time;
10002328:	601e      	str	r6, [r3, #0]
        entry->user_data = user_data;
1000232a:	60da      	str	r2, [r3, #12]
1000232c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        entry->target = time;
1000232e:	605f      	str	r7, [r3, #4]
10002330:	4694      	mov	ip, r2
10002332:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hn->child = hn->sibling = hn->parent = 0;
10002334:	2200      	movs	r2, #0
    return heap->nodes + id - 1;
10002336:	005b      	lsls	r3, r3, #1
10002338:	4463      	add	r3, ip
1000233a:	3b03      	subs	r3, #3
1000233c:	4698      	mov	r8, r3
1000233e:	6823      	ldr	r3, [r4, #0]
10002340:	4443      	add	r3, r8
    hn->child = hn->sibling = hn->parent = 0;
10002342:	709a      	strb	r2, [r3, #2]
10002344:	705a      	strb	r2, [r3, #1]
10002346:	701a      	strb	r2, [r3, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10002348:	7b63      	ldrb	r3, [r4, #13]
1000234a:	4699      	mov	r9, r3
    if (!a) return b;
1000234c:	2b00      	cmp	r3, #0
1000234e:	d042      	beq.n	100023d6 <add_alarm_under_lock.isra.0+0xea>
    if (heap->comparator(heap->user_data, a, b)) {
10002350:	4652      	mov	r2, sl
10002352:	0019      	movs	r1, r3
10002354:	68a0      	ldr	r0, [r4, #8]
10002356:	6863      	ldr	r3, [r4, #4]
10002358:	4798      	blx	r3
    return heap->nodes + id - 1;
1000235a:	6822      	ldr	r2, [r4, #0]
    if (heap->comparator(heap->user_data, a, b)) {
1000235c:	2800      	cmp	r0, #0
1000235e:	d02b      	beq.n	100023b8 <add_alarm_under_lock.isra.0+0xcc>
    return heap->nodes + id - 1;
10002360:	464b      	mov	r3, r9
10002362:	005b      	lsls	r3, r3, #1
10002364:	444b      	add	r3, r9
10002366:	3b03      	subs	r3, #3
10002368:	18d1      	adds	r1, r2, r3
1000236a:	468c      	mov	ip, r1
1000236c:	4641      	mov	r1, r8
    c->parent = parent_id;
1000236e:	4648      	mov	r0, r9
    return heap->nodes + id - 1;
10002370:	1851      	adds	r1, r2, r1
    c->parent = parent_id;
10002372:	7088      	strb	r0, [r1, #2]
    if (!n->child) {
10002374:	5cd3      	ldrb	r3, [r2, r3]
10002376:	2b00      	cmp	r3, #0
10002378:	d142      	bne.n	10002400 <add_alarm_under_lock.isra.0+0x114>
        n->child = child_id;
1000237a:	4653      	mov	r3, sl
1000237c:	4662      	mov	r2, ip
1000237e:	7013      	strb	r3, [r2, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10002380:	464b      	mov	r3, r9
10002382:	7363      	strb	r3, [r4, #13]
        if (id == ph_insert(pool->heap, id)) {
10002384:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10002386:	4599      	cmp	r9, r3
10002388:	d027      	beq.n	100023da <add_alarm_under_lock.isra.0+0xee>
}
1000238a:	bcf0      	pop	{r4, r5, r6, r7}
1000238c:	46bb      	mov	fp, r7
1000238e:	46b2      	mov	sl, r6
10002390:	46a9      	mov	r9, r5
10002392:	46a0      	mov	r8, r4
10002394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        id = ph_new_node(pool->heap);
10002396:	6802      	ldr	r2, [r0, #0]
    if (!heap->free_head_id) return 0;
10002398:	7b94      	ldrb	r4, [r2, #14]
1000239a:	2c00      	cmp	r4, #0
1000239c:	d0f5      	beq.n	1000238a <add_alarm_under_lock.isra.0+0x9e>
    heap->free_head_id = ph_get_node(heap, id)->sibling;
1000239e:	6811      	ldr	r1, [r2, #0]
100023a0:	0063      	lsls	r3, r4, #1
100023a2:	468c      	mov	ip, r1
100023a4:	191b      	adds	r3, r3, r4
100023a6:	4463      	add	r3, ip
100023a8:	3b03      	subs	r3, #3
100023aa:	785b      	ldrb	r3, [r3, #1]
100023ac:	7393      	strb	r3, [r2, #14]
    if (!heap->free_head_id) heap->free_tail_id = 0;
100023ae:	2b00      	cmp	r3, #0
100023b0:	d100      	bne.n	100023b4 <add_alarm_under_lock.isra.0+0xc8>
100023b2:	73d3      	strb	r3, [r2, #15]
100023b4:	940c      	str	r4, [sp, #48]	; 0x30
    if (id) {
100023b6:	e7a8      	b.n	1000230a <add_alarm_under_lock.isra.0+0x1e>
    return heap->nodes + id - 1;
100023b8:	4643      	mov	r3, r8
100023ba:	18d1      	adds	r1, r2, r3
100023bc:	464b      	mov	r3, r9
    c->parent = parent_id;
100023be:	4650      	mov	r0, sl
    return heap->nodes + id - 1;
100023c0:	005b      	lsls	r3, r3, #1
100023c2:	444b      	add	r3, r9
100023c4:	3b03      	subs	r3, #3
100023c6:	18d3      	adds	r3, r2, r3
    c->parent = parent_id;
100023c8:	7098      	strb	r0, [r3, #2]
    if (!n->child) {
100023ca:	4640      	mov	r0, r8
100023cc:	5c12      	ldrb	r2, [r2, r0]
100023ce:	2a00      	cmp	r2, #0
100023d0:	d118      	bne.n	10002404 <add_alarm_under_lock.isra.0+0x118>
        n->child = child_id;
100023d2:	464b      	mov	r3, r9
100023d4:	700b      	strb	r3, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
100023d6:	4653      	mov	r3, sl
100023d8:	7363      	strb	r3, [r4, #13]
            bool is_missed = hardware_alarm_set_target(pool->hardware_alarm_num, time);
100023da:	0032      	movs	r2, r6
100023dc:	003b      	movs	r3, r7
100023de:	7d28      	ldrb	r0, [r5, #20]
100023e0:	f000 fc1e 	bl	10002c20 <hardware_alarm_set_target>
100023e4:	1e04      	subs	r4, r0, #0
            if (is_missed && !create_if_past) {
100023e6:	d006      	beq.n	100023f6 <add_alarm_under_lock.isra.0+0x10a>
100023e8:	465b      	mov	r3, fp
100023ea:	2b00      	cmp	r3, #0
100023ec:	d103      	bne.n	100023f6 <add_alarm_under_lock.isra.0+0x10a>
                ph_delete(pool->heap, id);
100023ee:	4651      	mov	r1, sl
100023f0:	6828      	ldr	r0, [r5, #0]
100023f2:	f7ff fa47 	bl	10001884 <ph_delete>
            if (missed) *missed = is_missed;
100023f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100023f8:	2b00      	cmp	r3, #0
100023fa:	d0c6      	beq.n	1000238a <add_alarm_under_lock.isra.0+0x9e>
100023fc:	701c      	strb	r4, [r3, #0]
    return id;
100023fe:	e7c4      	b.n	1000238a <add_alarm_under_lock.isra.0+0x9e>
        c->sibling = n->child;
10002400:	704b      	strb	r3, [r1, #1]
10002402:	e7ba      	b.n	1000237a <add_alarm_under_lock.isra.0+0x8e>
10002404:	705a      	strb	r2, [r3, #1]
10002406:	e7e4      	b.n	100023d2 <add_alarm_under_lock.isra.0+0xe6>
10002408:	0fffffff 	.word	0x0fffffff

1000240c <alarm_pool_alarm_callback>:
static void alarm_pool_alarm_callback(uint alarm_num) {
1000240c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000240e:	46de      	mov	lr, fp
10002410:	464e      	mov	r6, r9
10002412:	4657      	mov	r7, sl
10002414:	4645      	mov	r5, r8
10002416:	2300      	movs	r3, #0
10002418:	b5e0      	push	{r5, r6, r7, lr}
1000241a:	b08d      	sub	sp, #52	; 0x34
1000241c:	930a      	str	r3, [sp, #40]	; 0x28
    alarm_pool_t *pool = pools[alarm_num];
1000241e:	4b6b      	ldr	r3, [pc, #428]	; (100025cc <alarm_pool_alarm_callback+0x1c0>)
10002420:	0082      	lsls	r2, r0, #2
10002422:	58d3      	ldr	r3, [r2, r3]
static void alarm_pool_alarm_callback(uint alarm_num) {
10002424:	900b      	str	r0, [sp, #44]	; 0x2c
    alarm_pool_t *pool = pools[alarm_num];
10002426:	4699      	mov	r9, r3
        void *user_data = NULL;
10002428:	2300      	movs	r3, #0
1000242a:	469b      	mov	fp, r3
1000242c:	464b      	mov	r3, r9
1000242e:	9307      	str	r3, [sp, #28]
    update_us_since_boot(&t, time_us_64());
10002430:	f000 fb96 	bl	10002b60 <time_us_64>
        uint32_t save = spin_lock_blocking(pool->lock);
10002434:	9c07      	ldr	r4, [sp, #28]
10002436:	0006      	movs	r6, r0
10002438:	000f      	movs	r7, r1
1000243a:	6862      	ldr	r2, [r4, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
1000243c:	f3ef 8510 	mrs	r5, PRIMASK
    __asm volatile ("cpsid i");
10002440:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10002442:	6813      	ldr	r3, [r2, #0]
10002444:	2b00      	cmp	r3, #0
10002446:	d0fc      	beq.n	10002442 <alarm_pool_alarm_callback+0x36>
    __asm volatile ("dmb");
10002448:	0022      	movs	r2, r4
1000244a:	9407      	str	r4, [sp, #28]
1000244c:	f3bf 8f5f 	dmb	sy
        pheap_node_id_t next_id = ph_peek_head(pool->heap);
10002450:	6824      	ldr	r4, [r4, #0]
    return heap->root_id;
10002452:	7b63      	ldrb	r3, [r4, #13]
10002454:	4699      	mov	r9, r3
        if (next_id) {
10002456:	2b00      	cmp	r3, #0
10002458:	d067      	beq.n	1000252a <alarm_pool_alarm_callback+0x11e>
    return pool->entries + id - 1;
1000245a:	6892      	ldr	r2, [r2, #8]
1000245c:	4b5c      	ldr	r3, [pc, #368]	; (100025d0 <alarm_pool_alarm_callback+0x1c4>)
1000245e:	4690      	mov	r8, r2
10002460:	444b      	add	r3, r9
10002462:	011b      	lsls	r3, r3, #4
10002464:	4498      	add	r8, r3
            if (absolute_time_diff_us(now, entry->target) <= 0) {
10002466:	4643      	mov	r3, r8
10002468:	681a      	ldr	r2, [r3, #0]
1000246a:	685b      	ldr	r3, [r3, #4]
    return to_us_since_boot(to) - to_us_since_boot(from);
1000246c:	0010      	movs	r0, r2
1000246e:	0019      	movs	r1, r3
10002470:	1b80      	subs	r0, r0, r6
10002472:	41b9      	sbcs	r1, r7
10002474:	2900      	cmp	r1, #0
10002476:	dd5f      	ble.n	10002538 <alarm_pool_alarm_callback+0x12c>
                if (hardware_alarm_set_target(alarm_num, entry->target)) {
10002478:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000247a:	f000 fbd1 	bl	10002c20 <hardware_alarm_set_target>
        void *user_data = NULL;
1000247e:	2300      	movs	r3, #0
        absolute_time_t target = nil_time;
10002480:	2600      	movs	r6, #0
        void *user_data = NULL;
10002482:	4698      	mov	r8, r3
        absolute_time_t target = nil_time;
10002484:	2700      	movs	r7, #0
        alarm_callback_t callback = NULL;
10002486:	469a      	mov	sl, r3
        spin_unlock(pool->lock, save);
10002488:	9c07      	ldr	r4, [sp, #28]
1000248a:	6863      	ldr	r3, [r4, #4]
1000248c:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002490:	465a      	mov	r2, fp
10002492:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002494:	f385 8810 	msr	PRIMASK, r5
        if (callback) {
10002498:	4653      	mov	r3, sl
1000249a:	2b00      	cmp	r3, #0
1000249c:	d108      	bne.n	100024b0 <alarm_pool_alarm_callback+0xa4>
    } while (again);
1000249e:	2800      	cmp	r0, #0
100024a0:	d1c6      	bne.n	10002430 <alarm_pool_alarm_callback+0x24>
}
100024a2:	b00d      	add	sp, #52	; 0x34
100024a4:	bcf0      	pop	{r4, r5, r6, r7}
100024a6:	46bb      	mov	fp, r7
100024a8:	46b2      	mov	sl, r6
100024aa:	46a9      	mov	r9, r5
100024ac:	46a0      	mov	r8, r4
100024ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ((uint)id_high << 8u * sizeof(id)) | id;
100024b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            int64_t repeat = callback(make_public_id(id_high, next_id), user_data);
100024b2:	4641      	mov	r1, r8
    return ((uint)id_high << 8u * sizeof(id)) | id;
100024b4:	0218      	lsls	r0, r3, #8
100024b6:	464b      	mov	r3, r9
100024b8:	4318      	orrs	r0, r3
            int64_t repeat = callback(make_public_id(id_high, next_id), user_data);
100024ba:	47d0      	blx	sl
100024bc:	9008      	str	r0, [sp, #32]
100024be:	9109      	str	r1, [sp, #36]	; 0x24
            save = spin_lock_blocking(pool->lock);
100024c0:	6862      	ldr	r2, [r4, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100024c2:	f3ef 8510 	mrs	r5, PRIMASK
    __asm volatile ("cpsid i");
100024c6:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100024c8:	6813      	ldr	r3, [r2, #0]
100024ca:	2b00      	cmp	r3, #0
100024cc:	d0fc      	beq.n	100024c8 <alarm_pool_alarm_callback+0xbc>
    __asm volatile ("dmb");
100024ce:	9407      	str	r4, [sp, #28]
100024d0:	f3bf 8f5f 	dmb	sy
            if (repeat < 0 && pool->alarm_in_progress) {
100024d4:	9908      	ldr	r1, [sp, #32]
100024d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
100024d8:	2a00      	cmp	r2, #0
100024da:	db48      	blt.n	1000256e <alarm_pool_alarm_callback+0x162>
            } else if (repeat > 0 && pool->alarm_in_progress) {
100024dc:	4311      	orrs	r1, r2
100024de:	d003      	beq.n	100024e8 <alarm_pool_alarm_callback+0xdc>
100024e0:	9b07      	ldr	r3, [sp, #28]
100024e2:	691b      	ldr	r3, [r3, #16]
100024e4:	2b00      	cmp	r3, #0
100024e6:	d15d      	bne.n	100025a4 <alarm_pool_alarm_callback+0x198>
                ph_add_to_free_list(pool->heap, next_id);
100024e8:	9b07      	ldr	r3, [sp, #28]
100024ea:	681b      	ldr	r3, [r3, #0]

bool ph_delete(pheap_t *heap, pheap_node_id_t id);

static inline void ph_add_to_free_list(pheap_t *heap, pheap_node_id_t id) {
    assert(id && !ph_contains(heap, id));
    if (heap->free_tail_id) {
100024ec:	7bd9      	ldrb	r1, [r3, #15]
100024ee:	2900      	cmp	r1, #0
100024f0:	d007      	beq.n	10002502 <alarm_pool_alarm_callback+0xf6>
        ph_get_node(heap, heap->free_tail_id)->sibling = id;
100024f2:	004a      	lsls	r2, r1, #1
100024f4:	1852      	adds	r2, r2, r1
100024f6:	6819      	ldr	r1, [r3, #0]
100024f8:	468c      	mov	ip, r1
100024fa:	4649      	mov	r1, r9
100024fc:	4462      	add	r2, ip
100024fe:	3a03      	subs	r2, #3
10002500:	7051      	strb	r1, [r2, #1]
    }
    heap->free_tail_id = id;
10002502:	464a      	mov	r2, r9
10002504:	73da      	strb	r2, [r3, #15]
    return pool->entry_ids_high + id - 1;
10002506:	464b      	mov	r3, r9
10002508:	9a07      	ldr	r2, [sp, #28]
1000250a:	3b01      	subs	r3, #1
1000250c:	68d1      	ldr	r1, [r2, #12]
                (*get_entry_id_high(pool, next_id))++; // we bump it for next use of id
1000250e:	5cca      	ldrb	r2, [r1, r3]
10002510:	3201      	adds	r2, #1
10002512:	54ca      	strb	r2, [r1, r3]
            pool->alarm_in_progress = 0;
10002514:	465b      	mov	r3, fp
10002516:	9a07      	ldr	r2, [sp, #28]
10002518:	6113      	str	r3, [r2, #16]
            spin_unlock(pool->lock, save);
1000251a:	6853      	ldr	r3, [r2, #4]
1000251c:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002520:	465a      	mov	r2, fp
10002522:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002524:	f385 8810 	msr	PRIMASK, r5
    } while (again);
10002528:	e782      	b.n	10002430 <alarm_pool_alarm_callback+0x24>
        void *user_data = NULL;
1000252a:	2300      	movs	r3, #0
        absolute_time_t target = nil_time;
1000252c:	2600      	movs	r6, #0
        void *user_data = NULL;
1000252e:	4698      	mov	r8, r3
        absolute_time_t target = nil_time;
10002530:	2700      	movs	r7, #0
        alarm_callback_t callback = NULL;
10002532:	469a      	mov	sl, r3
        again = false;
10002534:	2000      	movs	r0, #0
10002536:	e7a7      	b.n	10002488 <alarm_pool_alarm_callback+0x7c>
            if (absolute_time_diff_us(now, entry->target) <= 0) {
10002538:	2900      	cmp	r1, #0
1000253a:	d101      	bne.n	10002540 <alarm_pool_alarm_callback+0x134>
1000253c:	2800      	cmp	r0, #0
1000253e:	d19b      	bne.n	10002478 <alarm_pool_alarm_callback+0x6c>
                pheap_node_id_t __unused removed_id = ph_remove_head_reserve(pool->heap, true);
10002540:	2101      	movs	r1, #1
10002542:	0020      	movs	r0, r4
10002544:	f7ff f920 	bl	10001788 <ph_remove_head_reserve>
                target = entry->target;
10002548:	4643      	mov	r3, r8
1000254a:	681e      	ldr	r6, [r3, #0]
1000254c:	685f      	ldr	r7, [r3, #4]
                callback = entry->callback;
1000254e:	689b      	ldr	r3, [r3, #8]
                id_high = *get_entry_id_high(pool, next_id);
10002550:	9a07      	ldr	r2, [sp, #28]
                callback = entry->callback;
10002552:	469a      	mov	sl, r3
                user_data = entry->user_data;
10002554:	4643      	mov	r3, r8
10002556:	68db      	ldr	r3, [r3, #12]
10002558:	4698      	mov	r8, r3
                id_high = *get_entry_id_high(pool, next_id);
1000255a:	68d3      	ldr	r3, [r2, #12]
1000255c:	444b      	add	r3, r9
1000255e:	3b01      	subs	r3, #1
10002560:	781b      	ldrb	r3, [r3, #0]
10002562:	930a      	str	r3, [sp, #40]	; 0x28
    return ((uint)id_high << 8u * sizeof(id)) | id;
10002564:	021b      	lsls	r3, r3, #8
10002566:	4303      	orrs	r3, r0
                pool->alarm_in_progress = make_public_id(id_high, removed_id);
10002568:	6113      	str	r3, [r2, #16]
        again = false;
1000256a:	2000      	movs	r0, #0
1000256c:	e78c      	b.n	10002488 <alarm_pool_alarm_callback+0x7c>
            if (repeat < 0 && pool->alarm_in_progress) {
1000256e:	6923      	ldr	r3, [r4, #16]
10002570:	2b00      	cmp	r3, #0
10002572:	d0b9      	beq.n	100024e8 <alarm_pool_alarm_callback+0xdc>
    uint64_t delayed = base + us;
10002574:	0033      	movs	r3, r6
10002576:	003c      	movs	r4, r7
10002578:	1a5b      	subs	r3, r3, r1
1000257a:	4194      	sbcs	r4, r2
1000257c:	001a      	movs	r2, r3
1000257e:	0023      	movs	r3, r4
    if (delayed < base) {
10002580:	42a7      	cmp	r7, r4
10002582:	d819      	bhi.n	100025b8 <alarm_pool_alarm_callback+0x1ac>
10002584:	429f      	cmp	r7, r3
10002586:	d01b      	beq.n	100025c0 <alarm_pool_alarm_callback+0x1b4>
                add_alarm_under_lock(pool, delayed_by_us(get_absolute_time(), repeat), callback, user_data, next_id,
10002588:	4659      	mov	r1, fp
1000258a:	9104      	str	r1, [sp, #16]
1000258c:	2101      	movs	r1, #1
1000258e:	9103      	str	r1, [sp, #12]
10002590:	4649      	mov	r1, r9
10002592:	9102      	str	r1, [sp, #8]
10002594:	4641      	mov	r1, r8
10002596:	9101      	str	r1, [sp, #4]
10002598:	4651      	mov	r1, sl
1000259a:	9807      	ldr	r0, [sp, #28]
1000259c:	9100      	str	r1, [sp, #0]
1000259e:	f7ff fea5 	bl	100022ec <add_alarm_under_lock.isra.0>
100025a2:	e7b7      	b.n	10002514 <alarm_pool_alarm_callback+0x108>
    update_us_since_boot(&t, time_us_64());
100025a4:	f000 fadc 	bl	10002b60 <time_us_64>
    uint64_t delayed = base + us;
100025a8:	9a08      	ldr	r2, [sp, #32]
100025aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    update_us_since_boot(&t, time_us_64());
100025ac:	0006      	movs	r6, r0
100025ae:	000f      	movs	r7, r1
    uint64_t delayed = base + us;
100025b0:	1992      	adds	r2, r2, r6
100025b2:	417b      	adcs	r3, r7
    if (delayed < base) {
100025b4:	4299      	cmp	r1, r3
100025b6:	d9e5      	bls.n	10002584 <alarm_pool_alarm_callback+0x178>
        delayed = (uint64_t)-1;
100025b8:	2201      	movs	r2, #1
100025ba:	4252      	negs	r2, r2
100025bc:	17d3      	asrs	r3, r2, #31
100025be:	e7e3      	b.n	10002588 <alarm_pool_alarm_callback+0x17c>
    if (delayed < base) {
100025c0:	4296      	cmp	r6, r2
100025c2:	d9e1      	bls.n	10002588 <alarm_pool_alarm_callback+0x17c>
        delayed = (uint64_t)-1;
100025c4:	2201      	movs	r2, #1
100025c6:	4252      	negs	r2, r2
100025c8:	17d3      	asrs	r3, r2, #31
100025ca:	e7dd      	b.n	10002588 <alarm_pool_alarm_callback+0x17c>
100025cc:	20023b4c 	.word	0x20023b4c
100025d0:	0fffffff 	.word	0x0fffffff

100025d4 <alarm_pool_add_alarm_at.constprop.0>:
alarm_id_t alarm_pool_add_alarm_at(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
100025d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100025d6:	4657      	mov	r7, sl
100025d8:	464e      	mov	r6, r9
100025da:	46de      	mov	lr, fp
100025dc:	4645      	mov	r5, r8
100025de:	4691      	mov	r9, r2
100025e0:	b5e0      	push	{r5, r6, r7, lr}
100025e2:	0004      	movs	r4, r0
100025e4:	469a      	mov	sl, r3
        uint32_t save = spin_lock_blocking(pool->lock);
100025e6:	6842      	ldr	r2, [r0, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100025e8:	f3ef 8810 	mrs	r8, PRIMASK
    __asm volatile ("cpsid i");
100025ec:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100025ee:	6813      	ldr	r3, [r2, #0]
100025f0:	2b00      	cmp	r3, #0
100025f2:	d0fc      	beq.n	100025ee <alarm_pool_add_alarm_at.constprop.0+0x1a>
    __asm volatile ("dmb");
100025f4:	f3bf 8f5f 	dmb	sy
        id = ph_new_node(pool->heap);
100025f8:	6826      	ldr	r6, [r4, #0]
    if (!heap->free_head_id) return 0;
100025fa:	7bb5      	ldrb	r5, [r6, #14]
100025fc:	2d00      	cmp	r5, #0
100025fe:	d048      	beq.n	10002692 <alarm_pool_add_alarm_at.constprop.0+0xbe>
    return heap->nodes + id - 1;
10002600:	006f      	lsls	r7, r5, #1
10002602:	6833      	ldr	r3, [r6, #0]
10002604:	197f      	adds	r7, r7, r5
10002606:	3f03      	subs	r7, #3
10002608:	19d9      	adds	r1, r3, r7
    heap->free_head_id = ph_get_node(heap, id)->sibling;
1000260a:	784b      	ldrb	r3, [r1, #1]
1000260c:	73b3      	strb	r3, [r6, #14]
    if (!heap->free_head_id) heap->free_tail_id = 0;
1000260e:	2b00      	cmp	r3, #0
10002610:	d100      	bne.n	10002614 <alarm_pool_add_alarm_at.constprop.0+0x40>
10002612:	73f3      	strb	r3, [r6, #15]
    return pool->entries + id - 1;
10002614:	68a2      	ldr	r2, [r4, #8]
10002616:	4b34      	ldr	r3, [pc, #208]	; (100026e8 <alarm_pool_add_alarm_at.constprop.0+0x114>)
10002618:	4694      	mov	ip, r2
        entry->target = time;
1000261a:	464a      	mov	r2, r9
    return pool->entries + id - 1;
1000261c:	18eb      	adds	r3, r5, r3
1000261e:	011b      	lsls	r3, r3, #4
10002620:	4463      	add	r3, ip
        entry->target = time;
10002622:	601a      	str	r2, [r3, #0]
10002624:	4652      	mov	r2, sl
10002626:	605a      	str	r2, [r3, #4]
        entry->callback = callback;
10002628:	4a30      	ldr	r2, [pc, #192]	; (100026ec <alarm_pool_add_alarm_at.constprop.0+0x118>)
1000262a:	609a      	str	r2, [r3, #8]
        entry->user_data = user_data;
1000262c:	2200      	movs	r2, #0
1000262e:	60da      	str	r2, [r3, #12]
    hn->child = hn->sibling = hn->parent = 0;
10002630:	708a      	strb	r2, [r1, #2]
10002632:	704a      	strb	r2, [r1, #1]
10002634:	700a      	strb	r2, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10002636:	7b73      	ldrb	r3, [r6, #13]
10002638:	469b      	mov	fp, r3
    if (!a) return b;
1000263a:	2b00      	cmp	r3, #0
1000263c:	d043      	beq.n	100026c6 <alarm_pool_add_alarm_at.constprop.0+0xf2>
    if (heap->comparator(heap->user_data, a, b)) {
1000263e:	002a      	movs	r2, r5
10002640:	0019      	movs	r1, r3
10002642:	68b0      	ldr	r0, [r6, #8]
10002644:	6873      	ldr	r3, [r6, #4]
10002646:	4798      	blx	r3
    return heap->nodes + id - 1;
10002648:	6832      	ldr	r2, [r6, #0]
    if (heap->comparator(heap->user_data, a, b)) {
1000264a:	2800      	cmp	r0, #0
1000264c:	d02f      	beq.n	100026ae <alarm_pool_add_alarm_at.constprop.0+0xda>
    return heap->nodes + id - 1;
1000264e:	465b      	mov	r3, fp
    c->parent = parent_id;
10002650:	4658      	mov	r0, fp
    return heap->nodes + id - 1;
10002652:	005b      	lsls	r3, r3, #1
10002654:	445b      	add	r3, fp
10002656:	19d7      	adds	r7, r2, r7
10002658:	3b03      	subs	r3, #3
    c->parent = parent_id;
1000265a:	70b8      	strb	r0, [r7, #2]
    return heap->nodes + id - 1;
1000265c:	18d1      	adds	r1, r2, r3
    if (!n->child) {
1000265e:	5cd3      	ldrb	r3, [r2, r3]
10002660:	2b00      	cmp	r3, #0
10002662:	d13f      	bne.n	100026e4 <alarm_pool_add_alarm_at.constprop.0+0x110>
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10002664:	465b      	mov	r3, fp
        n->child = child_id;
10002666:	700d      	strb	r5, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10002668:	7373      	strb	r3, [r6, #13]
        if (id == ph_insert(pool->heap, id)) {
1000266a:	455d      	cmp	r5, fp
1000266c:	d02c      	beq.n	100026c8 <alarm_pool_add_alarm_at.constprop.0+0xf4>
    bool missed = false;
1000266e:	2600      	movs	r6, #0
        if (id) id_high = *get_entry_id_high(pool, id);
10002670:	68e3      	ldr	r3, [r4, #12]
10002672:	195b      	adds	r3, r3, r5
10002674:	3b01      	subs	r3, #1
10002676:	7819      	ldrb	r1, [r3, #0]
        spin_unlock(pool->lock, save);
10002678:	6863      	ldr	r3, [r4, #4]
1000267a:	f3bf 8f5f 	dmb	sy
    *lock = 0;
1000267e:	2200      	movs	r2, #0
10002680:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002682:	f388 8810 	msr	PRIMASK, r8
        public_id = missed ? 0 : make_public_id(id_high, id);
10002686:	2000      	movs	r0, #0
10002688:	2e00      	cmp	r6, #0
1000268a:	d10a      	bne.n	100026a2 <alarm_pool_add_alarm_at.constprop.0+0xce>
    return ((uint)id_high << 8u * sizeof(id)) | id;
1000268c:	0208      	lsls	r0, r1, #8
1000268e:	4328      	orrs	r0, r5
10002690:	e007      	b.n	100026a2 <alarm_pool_add_alarm_at.constprop.0+0xce>
        spin_unlock(pool->lock, save);
10002692:	6863      	ldr	r3, [r4, #4]
    __asm volatile ("dmb");
10002694:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002698:	601d      	str	r5, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000269a:	f388 8810 	msr	PRIMASK, r8
            return -1;
1000269e:	2001      	movs	r0, #1
100026a0:	4240      	negs	r0, r0
}
100026a2:	bcf0      	pop	{r4, r5, r6, r7}
100026a4:	46bb      	mov	fp, r7
100026a6:	46b2      	mov	sl, r6
100026a8:	46a9      	mov	r9, r5
100026aa:	46a0      	mov	r8, r4
100026ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return heap->nodes + id - 1;
100026ae:	465b      	mov	r3, fp
100026b0:	005b      	lsls	r3, r3, #1
100026b2:	445b      	add	r3, fp
100026b4:	3b03      	subs	r3, #3
100026b6:	18d3      	adds	r3, r2, r3
    c->parent = parent_id;
100026b8:	709d      	strb	r5, [r3, #2]
    return heap->nodes + id - 1;
100026ba:	19d1      	adds	r1, r2, r7
    if (!n->child) {
100026bc:	5dd2      	ldrb	r2, [r2, r7]
100026be:	2a00      	cmp	r2, #0
100026c0:	d10e      	bne.n	100026e0 <alarm_pool_add_alarm_at.constprop.0+0x10c>
        n->child = child_id;
100026c2:	465b      	mov	r3, fp
100026c4:	700b      	strb	r3, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
100026c6:	7375      	strb	r5, [r6, #13]
            bool is_missed = hardware_alarm_set_target(pool->hardware_alarm_num, time);
100026c8:	464a      	mov	r2, r9
100026ca:	4653      	mov	r3, sl
100026cc:	7d20      	ldrb	r0, [r4, #20]
100026ce:	f000 faa7 	bl	10002c20 <hardware_alarm_set_target>
100026d2:	1e06      	subs	r6, r0, #0
            if (is_missed && !create_if_past) {
100026d4:	d0cb      	beq.n	1000266e <alarm_pool_add_alarm_at.constprop.0+0x9a>
                ph_delete(pool->heap, id);
100026d6:	0029      	movs	r1, r5
100026d8:	6820      	ldr	r0, [r4, #0]
100026da:	f7ff f8d3 	bl	10001884 <ph_delete>
100026de:	e7c7      	b.n	10002670 <alarm_pool_add_alarm_at.constprop.0+0x9c>
        c->sibling = n->child;
100026e0:	705a      	strb	r2, [r3, #1]
100026e2:	e7ee      	b.n	100026c2 <alarm_pool_add_alarm_at.constprop.0+0xee>
100026e4:	707b      	strb	r3, [r7, #1]
100026e6:	e7bd      	b.n	10002664 <alarm_pool_add_alarm_at.constprop.0+0x90>
100026e8:	0fffffff 	.word	0x0fffffff
100026ec:	100022e5 	.word	0x100022e5

100026f0 <alarm_pool_init_default>:
void alarm_pool_init_default() {
100026f0:	b570      	push	{r4, r5, r6, lr}
    if (!default_alarm_pool) {
100026f2:	4c18      	ldr	r4, [pc, #96]	; (10002754 <alarm_pool_init_default+0x64>)
100026f4:	6823      	ldr	r3, [r4, #0]
100026f6:	2b00      	cmp	r3, #0
100026f8:	d000      	beq.n	100026fc <alarm_pool_init_default+0xc>
}
100026fa:	bd70      	pop	{r4, r5, r6, pc}
    hardware_alarm_claim(hardware_alarm_num);
100026fc:	2003      	movs	r0, #3
100026fe:	f000 fa23 	bl	10002b48 <hardware_alarm_claim>
    hardware_alarm_cancel(hardware_alarm_num);
10002702:	2003      	movs	r0, #3
10002704:	f000 faee 	bl	10002ce4 <hardware_alarm_cancel>
    hardware_alarm_set_callback(hardware_alarm_num, alarm_pool_alarm_callback);
10002708:	4913      	ldr	r1, [pc, #76]	; (10002758 <alarm_pool_init_default+0x68>)
1000270a:	2003      	movs	r0, #3
1000270c:	f000 fa42 	bl	10002b94 <hardware_alarm_set_callback>
    alarm_pool_t *pool = (alarm_pool_t *)malloc(sizeof(alarm_pool_t));
10002710:	2018      	movs	r0, #24
10002712:	f7ff f8f5 	bl	10001900 <__wrap_malloc>
10002716:	0005      	movs	r5, r0
    pool->lock = spin_lock_instance(next_striped_spin_lock_num());
10002718:	f7ff fdae 	bl	10002278 <next_striped_spin_lock_num>
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
1000271c:	4b0f      	ldr	r3, [pc, #60]	; (1000275c <alarm_pool_init_default+0x6c>)
    pool->heap = ph_create(max_timers, timer_pool_entry_comparator, pool);
1000271e:	002a      	movs	r2, r5
10002720:	469c      	mov	ip, r3
10002722:	4460      	add	r0, ip
10002724:	0080      	lsls	r0, r0, #2
10002726:	490e      	ldr	r1, [pc, #56]	; (10002760 <alarm_pool_init_default+0x70>)
    pool->lock = spin_lock_instance(next_striped_spin_lock_num());
10002728:	6068      	str	r0, [r5, #4]
    pool->heap = ph_create(max_timers, timer_pool_entry_comparator, pool);
1000272a:	2010      	movs	r0, #16
1000272c:	f7fe ff36 	bl	1000159c <ph_create>
    pool->entries = (alarm_pool_entry_t *)calloc(max_timers, sizeof(alarm_pool_entry_t));
10002730:	2110      	movs	r1, #16
    pool->heap = ph_create(max_timers, timer_pool_entry_comparator, pool);
10002732:	6028      	str	r0, [r5, #0]
    pool->entries = (alarm_pool_entry_t *)calloc(max_timers, sizeof(alarm_pool_entry_t));
10002734:	2010      	movs	r0, #16
10002736:	f7ff f8e7 	bl	10001908 <__wrap_calloc>
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
1000273a:	2101      	movs	r1, #1
    pool->entries = (alarm_pool_entry_t *)calloc(max_timers, sizeof(alarm_pool_entry_t));
1000273c:	60a8      	str	r0, [r5, #8]
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
1000273e:	2010      	movs	r0, #16
10002740:	f7ff f8e2 	bl	10001908 <__wrap_calloc>
    pool->hardware_alarm_num = hardware_alarm_num;
10002744:	2303      	movs	r3, #3
10002746:	752b      	strb	r3, [r5, #20]
    pools[hardware_alarm_num] = pool;
10002748:	4b06      	ldr	r3, [pc, #24]	; (10002764 <alarm_pool_init_default+0x74>)
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
1000274a:	60e8      	str	r0, [r5, #12]
    pools[hardware_alarm_num] = pool;
1000274c:	60dd      	str	r5, [r3, #12]
        default_alarm_pool = alarm_pool_create(PICO_TIME_DEFAULT_ALARM_POOL_HARDWARE_ALARM_NUM,
1000274e:	6025      	str	r5, [r4, #0]
}
10002750:	e7d3      	b.n	100026fa <alarm_pool_init_default+0xa>
10002752:	46c0      	nop			; (mov r8, r8)
10002754:	20023488 	.word	0x20023488
10002758:	1000240d 	.word	0x1000240d
1000275c:	34000040 	.word	0x34000040
10002760:	100022b1 	.word	0x100022b1
10002764:	20023b4c 	.word	0x20023b4c

10002768 <alarm_pool_get_default>:
    return default_alarm_pool;
10002768:	4b01      	ldr	r3, [pc, #4]	; (10002770 <alarm_pool_get_default+0x8>)
1000276a:	6818      	ldr	r0, [r3, #0]
}
1000276c:	4770      	bx	lr
1000276e:	46c0      	nop			; (mov r8, r8)
10002770:	20023488 	.word	0x20023488

10002774 <alarm_pool_add_alarm_at>:
                                   void *user_data, bool fire_if_past) {
10002774:	b5f0      	push	{r4, r5, r6, r7, lr}
10002776:	46de      	mov	lr, fp
10002778:	464e      	mov	r6, r9
1000277a:	4645      	mov	r5, r8
1000277c:	4657      	mov	r7, sl
1000277e:	b5e0      	push	{r5, r6, r7, lr}
10002780:	b085      	sub	sp, #20
10002782:	9301      	str	r3, [sp, #4]
10002784:	ab10      	add	r3, sp, #64	; 0x40
10002786:	781b      	ldrb	r3, [r3, #0]
10002788:	0006      	movs	r6, r0
1000278a:	9303      	str	r3, [sp, #12]
    bool missed = false;
1000278c:	2300      	movs	r3, #0
1000278e:	469b      	mov	fp, r3
    hn->child = hn->sibling = hn->parent = 0;
10002790:	4698      	mov	r8, r3
                                   void *user_data, bool fire_if_past) {
10002792:	9200      	str	r2, [sp, #0]
        uint32_t save = spin_lock_blocking(pool->lock);
10002794:	6872      	ldr	r2, [r6, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10002796:	f3ef 8a10 	mrs	sl, PRIMASK
    __asm volatile ("cpsid i");
1000279a:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000279c:	6813      	ldr	r3, [r2, #0]
1000279e:	2b00      	cmp	r3, #0
100027a0:	d0fc      	beq.n	1000279c <alarm_pool_add_alarm_at+0x28>
    __asm volatile ("dmb");
100027a2:	f3bf 8f5f 	dmb	sy
        id = ph_new_node(pool->heap);
100027a6:	6835      	ldr	r5, [r6, #0]
    if (!heap->free_head_id) return 0;
100027a8:	7bac      	ldrb	r4, [r5, #14]
100027aa:	2c00      	cmp	r4, #0
100027ac:	d100      	bne.n	100027b0 <alarm_pool_add_alarm_at+0x3c>
100027ae:	e080      	b.n	100028b2 <alarm_pool_add_alarm_at+0x13e>
    return heap->nodes + id - 1;
100027b0:	0067      	lsls	r7, r4, #1
100027b2:	682b      	ldr	r3, [r5, #0]
100027b4:	193f      	adds	r7, r7, r4
100027b6:	3f03      	subs	r7, #3
100027b8:	19db      	adds	r3, r3, r7
    heap->free_head_id = ph_get_node(heap, id)->sibling;
100027ba:	785a      	ldrb	r2, [r3, #1]
100027bc:	73aa      	strb	r2, [r5, #14]
    if (!heap->free_head_id) heap->free_tail_id = 0;
100027be:	2a00      	cmp	r2, #0
100027c0:	d100      	bne.n	100027c4 <alarm_pool_add_alarm_at+0x50>
100027c2:	73ea      	strb	r2, [r5, #15]
    return pool->entries + id - 1;
100027c4:	68b1      	ldr	r1, [r6, #8]
100027c6:	4a55      	ldr	r2, [pc, #340]	; (1000291c <alarm_pool_add_alarm_at+0x1a8>)
100027c8:	468c      	mov	ip, r1
        entry->target = time;
100027ca:	9800      	ldr	r0, [sp, #0]
100027cc:	9901      	ldr	r1, [sp, #4]
    return pool->entries + id - 1;
100027ce:	18a2      	adds	r2, r4, r2
100027d0:	0112      	lsls	r2, r2, #4
100027d2:	4462      	add	r2, ip
        entry->target = time;
100027d4:	6010      	str	r0, [r2, #0]
100027d6:	6051      	str	r1, [r2, #4]
        entry->callback = callback;
100027d8:	990e      	ldr	r1, [sp, #56]	; 0x38
100027da:	6091      	str	r1, [r2, #8]
        entry->user_data = user_data;
100027dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
100027de:	60d1      	str	r1, [r2, #12]
    hn->child = hn->sibling = hn->parent = 0;
100027e0:	4642      	mov	r2, r8
100027e2:	709a      	strb	r2, [r3, #2]
100027e4:	705a      	strb	r2, [r3, #1]
100027e6:	701a      	strb	r2, [r3, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
100027e8:	7b6b      	ldrb	r3, [r5, #13]
100027ea:	4699      	mov	r9, r3
    if (!a) return b;
100027ec:	2b00      	cmp	r3, #0
100027ee:	d100      	bne.n	100027f2 <alarm_pool_add_alarm_at+0x7e>
100027f0:	e07d      	b.n	100028ee <alarm_pool_add_alarm_at+0x17a>
    if (heap->comparator(heap->user_data, a, b)) {
100027f2:	0022      	movs	r2, r4
100027f4:	0019      	movs	r1, r3
100027f6:	68a8      	ldr	r0, [r5, #8]
100027f8:	686b      	ldr	r3, [r5, #4]
100027fa:	4798      	blx	r3
    return heap->nodes + id - 1;
100027fc:	682a      	ldr	r2, [r5, #0]
    if (heap->comparator(heap->user_data, a, b)) {
100027fe:	2800      	cmp	r0, #0
10002800:	d069      	beq.n	100028d6 <alarm_pool_add_alarm_at+0x162>
    return heap->nodes + id - 1;
10002802:	464b      	mov	r3, r9
    c->parent = parent_id;
10002804:	4648      	mov	r0, r9
    return heap->nodes + id - 1;
10002806:	005b      	lsls	r3, r3, #1
10002808:	444b      	add	r3, r9
1000280a:	19d7      	adds	r7, r2, r7
1000280c:	3b03      	subs	r3, #3
    c->parent = parent_id;
1000280e:	70b8      	strb	r0, [r7, #2]
    return heap->nodes + id - 1;
10002810:	18d1      	adds	r1, r2, r3
    if (!n->child) {
10002812:	5cd3      	ldrb	r3, [r2, r3]
10002814:	2b00      	cmp	r3, #0
10002816:	d000      	beq.n	1000281a <alarm_pool_add_alarm_at+0xa6>
10002818:	e07c      	b.n	10002914 <alarm_pool_add_alarm_at+0x1a0>
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
1000281a:	464b      	mov	r3, r9
        n->child = child_id;
1000281c:	700c      	strb	r4, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
1000281e:	736b      	strb	r3, [r5, #13]
        if (id == ph_insert(pool->heap, id)) {
10002820:	454c      	cmp	r4, r9
10002822:	d065      	beq.n	100028f0 <alarm_pool_add_alarm_at+0x17c>
        if (id) id_high = *get_entry_id_high(pool, id);
10002824:	68f3      	ldr	r3, [r6, #12]
10002826:	191b      	adds	r3, r3, r4
10002828:	3b01      	subs	r3, #1
1000282a:	7818      	ldrb	r0, [r3, #0]
        spin_unlock(pool->lock, save);
1000282c:	6873      	ldr	r3, [r6, #4]
1000282e:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002832:	4642      	mov	r2, r8
10002834:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002836:	f38a 8810 	msr	PRIMASK, sl
        public_id = missed ? 0 : make_public_id(id_high, id);
1000283a:	465b      	mov	r3, fp
1000283c:	2b00      	cmp	r3, #0
1000283e:	d108      	bne.n	10002852 <alarm_pool_add_alarm_at+0xde>
    return ((uint)id_high << 8u * sizeof(id)) | id;
10002840:	0200      	lsls	r0, r0, #8
10002842:	4320      	orrs	r0, r4
}
10002844:	b005      	add	sp, #20
10002846:	bcf0      	pop	{r4, r5, r6, r7}
10002848:	46bb      	mov	fp, r7
1000284a:	46b2      	mov	sl, r6
1000284c:	46a9      	mov	r9, r5
1000284e:	46a0      	mov	r8, r4
10002850:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (missed && fire_if_past) {
10002852:	9b03      	ldr	r3, [sp, #12]
10002854:	2b00      	cmp	r3, #0
10002856:	d05f      	beq.n	10002918 <alarm_pool_add_alarm_at+0x1a4>
            int64_t repeat = callback(public_id, user_data);
10002858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000285a:	2000      	movs	r0, #0
1000285c:	990f      	ldr	r1, [sp, #60]	; 0x3c
1000285e:	4798      	blx	r3
            if (!repeat) {
10002860:	0003      	movs	r3, r0
            int64_t repeat = callback(public_id, user_data);
10002862:	0004      	movs	r4, r0
10002864:	000d      	movs	r5, r1
            if (!repeat) {
10002866:	430b      	orrs	r3, r1
10002868:	d056      	beq.n	10002918 <alarm_pool_add_alarm_at+0x1a4>
            } else if (repeat < 0) {
1000286a:	2900      	cmp	r1, #0
1000286c:	da0d      	bge.n	1000288a <alarm_pool_add_alarm_at+0x116>
    uint64_t delayed = base + us;
1000286e:	9800      	ldr	r0, [sp, #0]
10002870:	9901      	ldr	r1, [sp, #4]
10002872:	0002      	movs	r2, r0
10002874:	000b      	movs	r3, r1
10002876:	1b12      	subs	r2, r2, r4
10002878:	41ab      	sbcs	r3, r5
    if (delayed < base) {
1000287a:	4299      	cmp	r1, r3
1000287c:	d813      	bhi.n	100028a6 <alarm_pool_add_alarm_at+0x132>
1000287e:	d021      	beq.n	100028c4 <alarm_pool_add_alarm_at+0x150>
10002880:	9200      	str	r2, [sp, #0]
10002882:	9301      	str	r3, [sp, #4]
        delayed = (uint64_t)-1;
10002884:	9b03      	ldr	r3, [sp, #12]
10002886:	469b      	mov	fp, r3
10002888:	e784      	b.n	10002794 <alarm_pool_add_alarm_at+0x20>
    update_us_since_boot(&t, time_us_64());
1000288a:	f000 f969 	bl	10002b60 <time_us_64>
1000288e:	0002      	movs	r2, r0
10002890:	000b      	movs	r3, r1
    uint64_t delayed = base + us;
10002892:	18a4      	adds	r4, r4, r2
10002894:	415d      	adcs	r5, r3
10002896:	9400      	str	r4, [sp, #0]
10002898:	9501      	str	r5, [sp, #4]
    if (delayed < base) {
1000289a:	42a9      	cmp	r1, r5
1000289c:	d803      	bhi.n	100028a6 <alarm_pool_add_alarm_at+0x132>
1000289e:	d1f1      	bne.n	10002884 <alarm_pool_add_alarm_at+0x110>
100028a0:	9900      	ldr	r1, [sp, #0]
100028a2:	428a      	cmp	r2, r1
100028a4:	d9ee      	bls.n	10002884 <alarm_pool_add_alarm_at+0x110>
        delayed = (uint64_t)-1;
100028a6:	2301      	movs	r3, #1
100028a8:	425b      	negs	r3, r3
100028aa:	17dc      	asrs	r4, r3, #31
100028ac:	9300      	str	r3, [sp, #0]
100028ae:	9401      	str	r4, [sp, #4]
100028b0:	e7e8      	b.n	10002884 <alarm_pool_add_alarm_at+0x110>
        spin_unlock(pool->lock, save);
100028b2:	6873      	ldr	r3, [r6, #4]
    __asm volatile ("dmb");
100028b4:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100028b8:	601c      	str	r4, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100028ba:	f38a 8810 	msr	PRIMASK, sl
            return -1;
100028be:	2001      	movs	r0, #1
100028c0:	4240      	negs	r0, r0
100028c2:	e7bf      	b.n	10002844 <alarm_pool_add_alarm_at+0xd0>
    if (delayed < base) {
100028c4:	9900      	ldr	r1, [sp, #0]
100028c6:	4291      	cmp	r1, r2
100028c8:	d9da      	bls.n	10002880 <alarm_pool_add_alarm_at+0x10c>
        delayed = (uint64_t)-1;
100028ca:	2301      	movs	r3, #1
100028cc:	425b      	negs	r3, r3
100028ce:	17dc      	asrs	r4, r3, #31
100028d0:	9300      	str	r3, [sp, #0]
100028d2:	9401      	str	r4, [sp, #4]
100028d4:	e7d6      	b.n	10002884 <alarm_pool_add_alarm_at+0x110>
    return heap->nodes + id - 1;
100028d6:	464b      	mov	r3, r9
100028d8:	005b      	lsls	r3, r3, #1
100028da:	444b      	add	r3, r9
100028dc:	3b03      	subs	r3, #3
100028de:	18d3      	adds	r3, r2, r3
    c->parent = parent_id;
100028e0:	709c      	strb	r4, [r3, #2]
    return heap->nodes + id - 1;
100028e2:	19d1      	adds	r1, r2, r7
    if (!n->child) {
100028e4:	5dd2      	ldrb	r2, [r2, r7]
100028e6:	2a00      	cmp	r2, #0
100028e8:	d110      	bne.n	1000290c <alarm_pool_add_alarm_at+0x198>
        n->child = child_id;
100028ea:	464b      	mov	r3, r9
100028ec:	700b      	strb	r3, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
100028ee:	736c      	strb	r4, [r5, #13]
            bool is_missed = hardware_alarm_set_target(pool->hardware_alarm_num, time);
100028f0:	7d30      	ldrb	r0, [r6, #20]
100028f2:	9a00      	ldr	r2, [sp, #0]
100028f4:	9b01      	ldr	r3, [sp, #4]
100028f6:	f000 f993 	bl	10002c20 <hardware_alarm_set_target>
100028fa:	4683      	mov	fp, r0
            if (is_missed && !create_if_past) {
100028fc:	2800      	cmp	r0, #0
100028fe:	d100      	bne.n	10002902 <alarm_pool_add_alarm_at+0x18e>
10002900:	e790      	b.n	10002824 <alarm_pool_add_alarm_at+0xb0>
                ph_delete(pool->heap, id);
10002902:	0021      	movs	r1, r4
10002904:	6830      	ldr	r0, [r6, #0]
10002906:	f7fe ffbd 	bl	10001884 <ph_delete>
1000290a:	e78b      	b.n	10002824 <alarm_pool_add_alarm_at+0xb0>
        c->sibling = n->child;
1000290c:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
1000290e:	464b      	mov	r3, r9
10002910:	700b      	strb	r3, [r1, #0]
10002912:	e7ec      	b.n	100028ee <alarm_pool_add_alarm_at+0x17a>
        c->sibling = n->child;
10002914:	707b      	strb	r3, [r7, #1]
10002916:	e780      	b.n	1000281a <alarm_pool_add_alarm_at+0xa6>
    bool missed = false;
10002918:	2000      	movs	r0, #0
    return public_id;
1000291a:	e793      	b.n	10002844 <alarm_pool_add_alarm_at+0xd0>
1000291c:	0fffffff 	.word	0x0fffffff

10002920 <alarm_pool_cancel_alarm>:
bool alarm_pool_cancel_alarm(alarm_pool_t *pool, alarm_id_t alarm_id) {
10002920:	b570      	push	{r4, r5, r6, lr}
    uint32_t save = spin_lock_blocking(pool->lock);
10002922:	6842      	ldr	r2, [r0, #4]
bool alarm_pool_cancel_alarm(alarm_pool_t *pool, alarm_id_t alarm_id) {
10002924:	0004      	movs	r4, r0
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10002926:	f3ef 8510 	mrs	r5, PRIMASK
    __asm volatile ("cpsid i");
1000292a:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000292c:	6813      	ldr	r3, [r2, #0]
1000292e:	2b00      	cmp	r3, #0
10002930:	d0fc      	beq.n	1000292c <alarm_pool_cancel_alarm+0xc>
    __asm volatile ("dmb");
10002932:	f3bf 8f5f 	dmb	sy
    if (ph_contains(pool->heap, id)) {
10002936:	6820      	ldr	r0, [r4, #0]
    pheap_node_id_t id = (pheap_node_id_t) alarm_id;
10002938:	b2ce      	uxtb	r6, r1
    return id == heap->root_id || ph_get_node(heap, id)->parent;
1000293a:	7b43      	ldrb	r3, [r0, #13]
1000293c:	42b3      	cmp	r3, r6
1000293e:	d00a      	beq.n	10002956 <alarm_pool_cancel_alarm+0x36>
    return heap->nodes + id - 1;
10002940:	23ff      	movs	r3, #255	; 0xff
10002942:	400b      	ands	r3, r1
    return id == heap->root_id || ph_get_node(heap, id)->parent;
10002944:	005a      	lsls	r2, r3, #1
10002946:	18d3      	adds	r3, r2, r3
10002948:	6802      	ldr	r2, [r0, #0]
1000294a:	4694      	mov	ip, r2
1000294c:	4463      	add	r3, ip
1000294e:	3b03      	subs	r3, #3
10002950:	789b      	ldrb	r3, [r3, #2]
10002952:	2b00      	cmp	r3, #0
10002954:	d013      	beq.n	1000297e <alarm_pool_cancel_alarm+0x5e>
        if (id_high == *get_entry_id_high(pool, id)) {
10002956:	68e2      	ldr	r2, [r4, #12]
    return heap->nodes + id - 1;
10002958:	23ff      	movs	r3, #255	; 0xff
1000295a:	4694      	mov	ip, r2
1000295c:	400b      	ands	r3, r1
1000295e:	4463      	add	r3, ip
10002960:	3b01      	subs	r3, #1
        uint8_t id_high = (uint8_t)((uint)alarm_id >> 8u * sizeof(pheap_node_id_t));
10002962:	0a0a      	lsrs	r2, r1, #8
        if (id_high == *get_entry_id_high(pool, id)) {
10002964:	7819      	ldrb	r1, [r3, #0]
10002966:	b2d2      	uxtb	r2, r2
10002968:	4291      	cmp	r1, r2
1000296a:	d00e      	beq.n	1000298a <alarm_pool_cancel_alarm+0x6a>
    bool rc = false;
1000296c:	2000      	movs	r0, #0
    spin_unlock(pool->lock, save);
1000296e:	6863      	ldr	r3, [r4, #4]
10002970:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002974:	2200      	movs	r2, #0
10002976:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002978:	f385 8810 	msr	PRIMASK, r5
}
1000297c:	bd70      	pop	{r4, r5, r6, pc}
        if (alarm_id == pool->alarm_in_progress) {
1000297e:	6922      	ldr	r2, [r4, #16]
10002980:	428a      	cmp	r2, r1
10002982:	d1f3      	bne.n	1000296c <alarm_pool_cancel_alarm+0x4c>
    bool rc = false;
10002984:	2000      	movs	r0, #0
            pool->alarm_in_progress = 0;
10002986:	6123      	str	r3, [r4, #16]
10002988:	e7f1      	b.n	1000296e <alarm_pool_cancel_alarm+0x4e>
            rc = ph_delete(pool->heap, id);
1000298a:	0031      	movs	r1, r6
1000298c:	f7fe ff7a 	bl	10001884 <ph_delete>
10002990:	e7ed      	b.n	1000296e <alarm_pool_cancel_alarm+0x4e>
10002992:	46c0      	nop			; (mov r8, r8)

10002994 <sleep_ms>:
    }
#endif

}

void sleep_ms(uint32_t ms) {
10002994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002996:	0004      	movs	r4, r0
    update_us_since_boot(&t, time_us_64());
10002998:	f000 f8e2 	bl	10002b60 <time_us_64>
    sleep_us(ms * 1000ull);
1000299c:	22fa      	movs	r2, #250	; 0xfa
1000299e:	0006      	movs	r6, r0
100029a0:	000f      	movs	r7, r1
100029a2:	0020      	movs	r0, r4
100029a4:	2300      	movs	r3, #0
100029a6:	2100      	movs	r1, #0
100029a8:	0092      	lsls	r2, r2, #2
100029aa:	f7fd ffcf 	bl	1000094c <__wrap___aeabi_lmul>
    uint64_t delayed = base + us;
100029ae:	1980      	adds	r0, r0, r6
100029b0:	4179      	adcs	r1, r7
100029b2:	0004      	movs	r4, r0
100029b4:	000d      	movs	r5, r1
    if (delayed < base) {
100029b6:	428f      	cmp	r7, r1
100029b8:	d81a      	bhi.n	100029f0 <sleep_ms+0x5c>
100029ba:	d017      	beq.n	100029ec <sleep_ms+0x58>
    uint64_t t_before_us = t_us - PICO_TIME_SLEEP_OVERHEAD_ADJUST_US;
100029bc:	2606      	movs	r6, #6
100029be:	4276      	negs	r6, r6
100029c0:	17f7      	asrs	r7, r6, #31
100029c2:	1936      	adds	r6, r6, r4
100029c4:	416f      	adcs	r7, r5
    if (t_before_us > t_us) t_before_us = 0;
100029c6:	42af      	cmp	r7, r5
100029c8:	d937      	bls.n	10002a3a <sleep_ms+0xa6>
100029ca:	2600      	movs	r6, #0
100029cc:	2700      	movs	r7, #0
    update_us_since_boot(&t, time_us_64());
100029ce:	f000 f8c7 	bl	10002b60 <time_us_64>
    return to_us_since_boot(to) - to_us_since_boot(from);
100029d2:	0032      	movs	r2, r6
100029d4:	003b      	movs	r3, r7
100029d6:	1a12      	subs	r2, r2, r0
100029d8:	418b      	sbcs	r3, r1
    if (absolute_time_diff_us(get_absolute_time(), t_before) > 0) {
100029da:	2b00      	cmp	r3, #0
100029dc:	dc16      	bgt.n	10002a0c <sleep_ms+0x78>
100029de:	2b00      	cmp	r3, #0
100029e0:	d028      	beq.n	10002a34 <sleep_ms+0xa0>
    busy_wait_until(t);
100029e2:	0029      	movs	r1, r5
100029e4:	0020      	movs	r0, r4
100029e6:	f000 f8c5 	bl	10002b74 <busy_wait_until>
}
100029ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (delayed < base) {
100029ec:	4286      	cmp	r6, r0
100029ee:	d9e5      	bls.n	100029bc <sleep_ms+0x28>
    uint64_t t_before_us = t_us - PICO_TIME_SLEEP_OVERHEAD_ADJUST_US;
100029f0:	2607      	movs	r6, #7
100029f2:	4276      	negs	r6, r6
100029f4:	17f7      	asrs	r7, r6, #31
    update_us_since_boot(&t, time_us_64());
100029f6:	f000 f8b3 	bl	10002b60 <time_us_64>
    return to_us_since_boot(to) - to_us_since_boot(from);
100029fa:	0032      	movs	r2, r6
100029fc:	003b      	movs	r3, r7
100029fe:	1a12      	subs	r2, r2, r0
10002a00:	418b      	sbcs	r3, r1
        delayed = (uint64_t)-1;
10002a02:	2401      	movs	r4, #1
10002a04:	4264      	negs	r4, r4
10002a06:	17e5      	asrs	r5, r4, #31
    if (absolute_time_diff_us(get_absolute_time(), t_before) > 0) {
10002a08:	2b00      	cmp	r3, #0
10002a0a:	dde8      	ble.n	100029de <sleep_ms+0x4a>
    return default_alarm_pool;
10002a0c:	4b0d      	ldr	r3, [pc, #52]	; (10002a44 <sleep_ms+0xb0>)
    return alarm_pool_add_alarm_at(alarm_pool_get_default(), time, callback, user_data, fire_if_past);
10002a0e:	0032      	movs	r2, r6
10002a10:	6818      	ldr	r0, [r3, #0]
10002a12:	003b      	movs	r3, r7
10002a14:	f7ff fdde 	bl	100025d4 <alarm_pool_add_alarm_at.constprop.0>
        if (add_alarm_at(t_before, sev_callback, NULL, false) >= 0) {
10002a18:	2800      	cmp	r0, #0
10002a1a:	dbe2      	blt.n	100029e2 <sleep_ms+0x4e>
 * \param t Absolute time to compare against current time
 * \return true if it is now after the specified timestamp
 */
static inline bool time_reached(absolute_time_t t) {
    uint64_t target = to_us_since_boot(t);
    uint32_t hi_target = target >> 32u;
10002a1c:	0039      	movs	r1, r7
    uint32_t hi = timer_hw->timerawh;
10002a1e:	4a0a      	ldr	r2, [pc, #40]	; (10002a48 <sleep_ms+0xb4>)
10002a20:	6a53      	ldr	r3, [r2, #36]	; 0x24
    return (hi >= hi_target && (timer_hw->timerawl >= (uint32_t) target || hi != hi_target));
10002a22:	4299      	cmp	r1, r3
10002a24:	d804      	bhi.n	10002a30 <sleep_ms+0x9c>
10002a26:	6a90      	ldr	r0, [r2, #40]	; 0x28
10002a28:	4286      	cmp	r6, r0
10002a2a:	d9da      	bls.n	100029e2 <sleep_ms+0x4e>
10002a2c:	4299      	cmp	r1, r3
10002a2e:	d1d8      	bne.n	100029e2 <sleep_ms+0x4e>
    __asm volatile ("wfe");
10002a30:	bf20      	wfe
}
10002a32:	e7f5      	b.n	10002a20 <sleep_ms+0x8c>
    if (absolute_time_diff_us(get_absolute_time(), t_before) > 0) {
10002a34:	2a00      	cmp	r2, #0
10002a36:	d0d4      	beq.n	100029e2 <sleep_ms+0x4e>
10002a38:	e7e8      	b.n	10002a0c <sleep_ms+0x78>
    if (t_before_us > t_us) t_before_us = 0;
10002a3a:	42af      	cmp	r7, r5
10002a3c:	d1c7      	bne.n	100029ce <sleep_ms+0x3a>
10002a3e:	42a6      	cmp	r6, r4
10002a40:	d8c3      	bhi.n	100029ca <sleep_ms+0x36>
10002a42:	e7c4      	b.n	100029ce <sleep_ms+0x3a>
10002a44:	20023488 	.word	0x20023488
10002a48:	40054000 	.word	0x40054000

10002a4c <best_effort_wfe_or_timeout>:

bool best_effort_wfe_or_timeout(absolute_time_t timeout_timestamp) {
10002a4c:	b570      	push	{r4, r5, r6, lr}
    return default_alarm_pool;
10002a4e:	4d0e      	ldr	r5, [pc, #56]	; (10002a88 <best_effort_wfe_or_timeout+0x3c>)
10002a50:	0002      	movs	r2, r0
10002a52:	000b      	movs	r3, r1
bool best_effort_wfe_or_timeout(absolute_time_t timeout_timestamp) {
10002a54:	0006      	movs	r6, r0
10002a56:	6828      	ldr	r0, [r5, #0]
10002a58:	000c      	movs	r4, r1
10002a5a:	f7ff fdbb 	bl	100025d4 <alarm_pool_add_alarm_at.constprop.0>
10002a5e:	1e01      	subs	r1, r0, #0
#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
    alarm_id_t id;
    id = add_alarm_at(timeout_timestamp, sev_callback, NULL, false);
    if (id <= 0) {
10002a60:	dd03      	ble.n	10002a6a <best_effort_wfe_or_timeout+0x1e>
    __asm volatile ("wfe");
10002a62:	bf20      	wfe
 * \param alarm_id the alarm
 * \return true if the alarm was cancelled, false if it didn't exist
 * \sa alarm_id_t for a note on reuse of IDs
 */
static inline bool cancel_alarm(alarm_id_t alarm_id) {
    return alarm_pool_cancel_alarm(alarm_pool_get_default(), alarm_id);
10002a64:	6828      	ldr	r0, [r5, #0]
10002a66:	f7ff ff5b 	bl	10002920 <alarm_pool_cancel_alarm>
    uint32_t hi = timer_hw->timerawh;
10002a6a:	4b08      	ldr	r3, [pc, #32]	; (10002a8c <best_effort_wfe_or_timeout+0x40>)
10002a6c:	2000      	movs	r0, #0
10002a6e:	6a59      	ldr	r1, [r3, #36]	; 0x24
    return (hi >= hi_target && (timer_hw->timerawl >= (uint32_t) target || hi != hi_target));
10002a70:	428c      	cmp	r4, r1
10002a72:	d803      	bhi.n	10002a7c <best_effort_wfe_or_timeout+0x30>
10002a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002a76:	3001      	adds	r0, #1
10002a78:	42b3      	cmp	r3, r6
10002a7a:	d300      	bcc.n	10002a7e <best_effort_wfe_or_timeout+0x32>
    }
#else
    tight_loop_contents();
    return time_reached(timeout_timestamp);
#endif
}
10002a7c:	bd70      	pop	{r4, r5, r6, pc}
10002a7e:	1a64      	subs	r4, r4, r1
10002a80:	1e63      	subs	r3, r4, #1
10002a82:	419c      	sbcs	r4, r3
10002a84:	b2e0      	uxtb	r0, r4
10002a86:	e7f9      	b.n	10002a7c <best_effort_wfe_or_timeout+0x30>
10002a88:	20023488 	.word	0x20023488
10002a8c:	40054000 	.word	0x40054000

10002a90 <hardware_alarm_irq_handler>:

static inline uint harware_alarm_irq_number(uint alarm_num) {
    return TIMER_IRQ_0 + alarm_num;
}

static void hardware_alarm_irq_handler() {
10002a90:	b5f0      	push	{r4, r5, r6, r7, lr}
10002a92:	46d6      	mov	lr, sl
10002a94:	464f      	mov	r7, r9
10002a96:	4646      	mov	r6, r8
10002a98:	b5c0      	push	{r6, r7, lr}
    // Determine which timer this IRQ is for
    uint32_t ipsr;
    __asm volatile ("mrs %0, ipsr" : "=r" (ipsr)::);
10002a9a:	f3ef 8305 	mrs	r3, IPSR
    uint alarm_num = (ipsr & 0x3fu) - 16 - TIMER_IRQ_0;
10002a9e:	223f      	movs	r2, #63	; 0x3f
10002aa0:	4013      	ands	r3, r2
10002aa2:	0018      	movs	r0, r3
10002aa4:	3810      	subs	r0, #16
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10002aa6:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10002aaa:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10002aac:	4d20      	ldr	r5, [pc, #128]	; (10002b30 <hardware_alarm_irq_handler+0xa0>)
10002aae:	682a      	ldr	r2, [r5, #0]
10002ab0:	2a00      	cmp	r2, #0
10002ab2:	d0fc      	beq.n	10002aae <hardware_alarm_irq_handler+0x1e>
    __asm volatile ("dmb");
10002ab4:	f3bf 8f5f 	dmb	sy
    hardware_alarm_callback_t callback = NULL;

    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
    uint32_t save = spin_lock_blocking(lock);
    // Clear the timer IRQ (inside lock, because we check whether we have handled the IRQ yet in alarm_set by looking at the interrupt status
    timer_hw->intr = 1u << alarm_num;
10002ab8:	2201      	movs	r2, #1
10002aba:	0011      	movs	r1, r2
10002abc:	4081      	lsls	r1, r0
10002abe:	4c1d      	ldr	r4, [pc, #116]	; (10002b34 <hardware_alarm_irq_handler+0xa4>)
10002ac0:	4688      	mov	r8, r1
10002ac2:	6361      	str	r1, [r4, #52]	; 0x34

    // make sure the IRQ is still valid
    if (timer_callbacks_pending & (1u << alarm_num)) {
10002ac4:	491c      	ldr	r1, [pc, #112]	; (10002b38 <hardware_alarm_irq_handler+0xa8>)
10002ac6:	0017      	movs	r7, r2
10002ac8:	780e      	ldrb	r6, [r1, #0]
10002aca:	468a      	mov	sl, r1
10002acc:	0031      	movs	r1, r6
10002ace:	40c1      	lsrs	r1, r0
10002ad0:	400f      	ands	r7, r1
10002ad2:	420a      	tst	r2, r1
10002ad4:	d109      	bne.n	10002aea <hardware_alarm_irq_handler+0x5a>
10002ad6:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002ada:	602f      	str	r7, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002adc:	f38c 8810 	msr	PRIMASK, ip
    spin_unlock(lock, save);

    if (callback) {
        callback(alarm_num);
    }
}
10002ae0:	bce0      	pop	{r5, r6, r7}
10002ae2:	46ba      	mov	sl, r7
10002ae4:	46b1      	mov	r9, r6
10002ae6:	46a8      	mov	r8, r5
10002ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (timer_hw->timerawh >= target_hi[alarm_num]) {
10002aea:	4914      	ldr	r1, [pc, #80]	; (10002b3c <hardware_alarm_irq_handler+0xac>)
10002aec:	0082      	lsls	r2, r0, #2
10002aee:	6a64      	ldr	r4, [r4, #36]	; 0x24
10002af0:	5851      	ldr	r1, [r2, r1]
10002af2:	428c      	cmp	r4, r1
10002af4:	d30f      	bcc.n	10002b16 <hardware_alarm_irq_handler+0x86>
            callback = alarm_callbacks[alarm_num];
10002af6:	4b12      	ldr	r3, [pc, #72]	; (10002b40 <hardware_alarm_irq_handler+0xb0>)
10002af8:	58d2      	ldr	r2, [r2, r3]
            timer_callbacks_pending &= ~(1u << alarm_num);
10002afa:	4643      	mov	r3, r8
10002afc:	439e      	bics	r6, r3
10002afe:	4653      	mov	r3, sl
10002b00:	701e      	strb	r6, [r3, #0]
    __asm volatile ("dmb");
10002b02:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002b06:	2300      	movs	r3, #0
10002b08:	602b      	str	r3, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002b0a:	f38c 8810 	msr	PRIMASK, ip
    if (callback) {
10002b0e:	2a00      	cmp	r2, #0
10002b10:	d0e6      	beq.n	10002ae0 <hardware_alarm_irq_handler+0x50>
        callback(alarm_num);
10002b12:	4790      	blx	r2
}
10002b14:	e7e4      	b.n	10002ae0 <hardware_alarm_irq_handler+0x50>
            timer_hw->alarm[alarm_num] = timer_hw->alarm[alarm_num]; // re-arm the timer
10002b16:	4a0b      	ldr	r2, [pc, #44]	; (10002b44 <hardware_alarm_irq_handler+0xb4>)
10002b18:	009b      	lsls	r3, r3, #2
10002b1a:	4690      	mov	r8, r2
10002b1c:	4443      	add	r3, r8
10002b1e:	681a      	ldr	r2, [r3, #0]
10002b20:	601a      	str	r2, [r3, #0]
    __asm volatile ("dmb");
10002b22:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002b26:	2300      	movs	r3, #0
10002b28:	602b      	str	r3, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002b2a:	f38c 8810 	msr	PRIMASK, ip
    if (callback) {
10002b2e:	e7d7      	b.n	10002ae0 <hardware_alarm_irq_handler+0x50>
10002b30:	d0000128 	.word	0xd0000128
10002b34:	40054000 	.word	0x40054000
10002b38:	20023b8b 	.word	0x20023b8b
10002b3c:	20023b70 	.word	0x20023b70
10002b40:	2002334c 	.word	0x2002334c
10002b44:	40053fd0 	.word	0x40053fd0

10002b48 <hardware_alarm_claim>:
void hardware_alarm_claim(uint alarm_num) {
10002b48:	b510      	push	{r4, lr}
10002b4a:	0001      	movs	r1, r0
    hw_claim_or_assert(&claimed, alarm_num, "Hardware alarm %d already claimed");
10002b4c:	4a02      	ldr	r2, [pc, #8]	; (10002b58 <hardware_alarm_claim+0x10>)
10002b4e:	4803      	ldr	r0, [pc, #12]	; (10002b5c <hardware_alarm_claim+0x14>)
10002b50:	f7fd ff5e 	bl	10000a10 <hw_claim_or_assert>
}
10002b54:	bd10      	pop	{r4, pc}
10002b56:	46c0      	nop			; (mov r8, r8)
10002b58:	10006f84 	.word	0x10006f84
10002b5c:	20023b89 	.word	0x20023b89

10002b60 <time_us_64>:
    uint32_t hi = timer_hw->timerawh;
10002b60:	4b03      	ldr	r3, [pc, #12]	; (10002b70 <time_us_64+0x10>)
10002b62:	6a59      	ldr	r1, [r3, #36]	; 0x24
        lo = timer_hw->timerawl;
10002b64:	000a      	movs	r2, r1
10002b66:	6a98      	ldr	r0, [r3, #40]	; 0x28
        uint32_t next_hi = timer_hw->timerawh;
10002b68:	6a59      	ldr	r1, [r3, #36]	; 0x24
        if (hi == next_hi) break;
10002b6a:	428a      	cmp	r2, r1
10002b6c:	d1fa      	bne.n	10002b64 <time_us_64+0x4>
}
10002b6e:	4770      	bx	lr
10002b70:	40054000 	.word	0x40054000

10002b74 <busy_wait_until>:
    uint32_t hi = timer_hw->timerawh;
10002b74:	4a06      	ldr	r2, [pc, #24]	; (10002b90 <busy_wait_until+0x1c>)
10002b76:	6a53      	ldr	r3, [r2, #36]	; 0x24
    while (hi < hi_target) {
10002b78:	4299      	cmp	r1, r3
10002b7a:	d8fc      	bhi.n	10002b76 <busy_wait_until+0x2>
    while (hi == hi_target && timer_hw->timerawl < (uint32_t) target) {
10002b7c:	d107      	bne.n	10002b8e <busy_wait_until+0x1a>
10002b7e:	4b04      	ldr	r3, [pc, #16]	; (10002b90 <busy_wait_until+0x1c>)
10002b80:	e002      	b.n	10002b88 <busy_wait_until+0x14>
        hi = timer_hw->timerawh;
10002b82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    while (hi == hi_target && timer_hw->timerawl < (uint32_t) target) {
10002b84:	4291      	cmp	r1, r2
10002b86:	d102      	bne.n	10002b8e <busy_wait_until+0x1a>
10002b88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
10002b8a:	4282      	cmp	r2, r0
10002b8c:	d3f9      	bcc.n	10002b82 <busy_wait_until+0xe>
}
10002b8e:	4770      	bx	lr
10002b90:	40054000 	.word	0x40054000

10002b94 <hardware_alarm_set_callback>:

void hardware_alarm_set_callback(uint alarm_num, hardware_alarm_callback_t callback) {
10002b94:	b570      	push	{r4, r5, r6, lr}
10002b96:	0004      	movs	r4, r0
10002b98:	000d      	movs	r5, r1
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10002b9a:	f3ef 8610 	mrs	r6, PRIMASK
    __asm volatile ("cpsid i");
10002b9e:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10002ba0:	4a1a      	ldr	r2, [pc, #104]	; (10002c0c <hardware_alarm_set_callback+0x78>)
10002ba2:	6813      	ldr	r3, [r2, #0]
10002ba4:	2b00      	cmp	r3, #0
10002ba6:	d0fc      	beq.n	10002ba2 <hardware_alarm_set_callback+0xe>
    __asm volatile ("dmb");
10002ba8:	f3bf 8f5f 	dmb	sy
    //  should disallow IRQ handlers on both cores
    check_hardware_alarm_num_param(alarm_num);
    uint irq_num = harware_alarm_irq_number(alarm_num);
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
    uint32_t save = spin_lock_blocking(lock);
    if (callback) {
10002bac:	2d00      	cmp	r5, #0
10002bae:	d01b      	beq.n	10002be8 <hardware_alarm_set_callback+0x54>
        if (hardware_alarm_irq_handler != irq_get_vtable_handler(irq_num)) {
10002bb0:	0020      	movs	r0, r4
10002bb2:	f7fe faad 	bl	10001110 <irq_get_vtable_handler>
10002bb6:	4916      	ldr	r1, [pc, #88]	; (10002c10 <hardware_alarm_set_callback+0x7c>)
10002bb8:	4281      	cmp	r1, r0
10002bba:	d00a      	beq.n	10002bd2 <hardware_alarm_set_callback+0x3e>
            // note that set_exclusive will silently allow you to set the handler to the same thing
            // since it is idempotent, which means we don't need to worry about locking ourselves
            irq_set_exclusive_handler(irq_num, hardware_alarm_irq_handler);
10002bbc:	0020      	movs	r0, r4
10002bbe:	f7fe faaf 	bl	10001120 <irq_set_exclusive_handler>
            irq_set_enabled(irq_num, true);
10002bc2:	2101      	movs	r1, #1
10002bc4:	0020      	movs	r0, r4
10002bc6:	f7fe fa89 	bl	100010dc <irq_set_enabled>
            // Enable interrupt in block and at processor
            hw_set_bits(&timer_hw->inte, 1u << alarm_num);
10002bca:	2301      	movs	r3, #1
10002bcc:	40a3      	lsls	r3, r4
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002bce:	4a11      	ldr	r2, [pc, #68]	; (10002c14 <hardware_alarm_set_callback+0x80>)
10002bd0:	6013      	str	r3, [r2, #0]
        }
        alarm_callbacks[alarm_num] = callback;
10002bd2:	4b11      	ldr	r3, [pc, #68]	; (10002c18 <hardware_alarm_set_callback+0x84>)
10002bd4:	00a4      	lsls	r4, r4, #2
10002bd6:	50e5      	str	r5, [r4, r3]
10002bd8:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002bdc:	2200      	movs	r2, #0
10002bde:	4b0b      	ldr	r3, [pc, #44]	; (10002c0c <hardware_alarm_set_callback+0x78>)
10002be0:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002be2:	f386 8810 	msr	PRIMASK, r6
        timer_callbacks_pending &= ~(1u << alarm_num);
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
        irq_set_enabled(irq_num, false);
    }
    spin_unlock(lock, save);
}
10002be6:	bd70      	pop	{r4, r5, r6, pc}
        alarm_callbacks[alarm_num] = NULL;
10002be8:	4b0b      	ldr	r3, [pc, #44]	; (10002c18 <hardware_alarm_set_callback+0x84>)
10002bea:	00a2      	lsls	r2, r4, #2
10002bec:	50d5      	str	r5, [r2, r3]
        timer_callbacks_pending &= ~(1u << alarm_num);
10002bee:	2201      	movs	r2, #1
10002bf0:	40a2      	lsls	r2, r4
10002bf2:	490a      	ldr	r1, [pc, #40]	; (10002c1c <hardware_alarm_set_callback+0x88>)
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
10002bf4:	0020      	movs	r0, r4
        timer_callbacks_pending &= ~(1u << alarm_num);
10002bf6:	780b      	ldrb	r3, [r1, #0]
10002bf8:	4393      	bics	r3, r2
10002bfa:	700b      	strb	r3, [r1, #0]
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
10002bfc:	4904      	ldr	r1, [pc, #16]	; (10002c10 <hardware_alarm_set_callback+0x7c>)
10002bfe:	f7fe fab9 	bl	10001174 <irq_remove_handler>
        irq_set_enabled(irq_num, false);
10002c02:	2100      	movs	r1, #0
10002c04:	0020      	movs	r0, r4
10002c06:	f7fe fa69 	bl	100010dc <irq_set_enabled>
10002c0a:	e7e5      	b.n	10002bd8 <hardware_alarm_set_callback+0x44>
10002c0c:	d0000128 	.word	0xd0000128
10002c10:	10002a91 	.word	0x10002a91
10002c14:	40056038 	.word	0x40056038
10002c18:	2002334c 	.word	0x2002334c
10002c1c:	20023b8b 	.word	0x20023b8b

10002c20 <hardware_alarm_set_target>:

bool hardware_alarm_set_target(uint alarm_num, absolute_time_t target) {
10002c20:	b5f0      	push	{r4, r5, r6, r7, lr}
10002c22:	46ce      	mov	lr, r9
10002c24:	4647      	mov	r7, r8
10002c26:	b580      	push	{r7, lr}
    uint32_t hi = timer_hw->timerawh;
10002c28:	4c2a      	ldr	r4, [pc, #168]	; (10002cd4 <hardware_alarm_set_target+0xb4>)
10002c2a:	6a61      	ldr	r1, [r4, #36]	; 0x24
        lo = timer_hw->timerawl;
10002c2c:	000d      	movs	r5, r1
10002c2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        uint32_t next_hi = timer_hw->timerawh;
10002c30:	6a61      	ldr	r1, [r4, #36]	; 0x24
        if (hi == next_hi) break;
10002c32:	42a9      	cmp	r1, r5
10002c34:	d1fa      	bne.n	10002c2c <hardware_alarm_set_target+0xc>
    bool missed;
    uint64_t now = time_us_64();
    uint64_t t = to_us_since_boot(target);
    if (now >= t) {
10002c36:	428b      	cmp	r3, r1
10002c38:	d807      	bhi.n	10002c4a <hardware_alarm_set_target+0x2a>
10002c3a:	d004      	beq.n	10002c46 <hardware_alarm_set_target+0x26>
        missed = true;
10002c3c:	2001      	movs	r0, #1
            }
        }
        spin_unlock(lock, save);
    }
    return missed;
}
10002c3e:	bcc0      	pop	{r6, r7}
10002c40:	46b9      	mov	r9, r7
10002c42:	46b0      	mov	r8, r6
10002c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (now >= t) {
10002c46:	42b2      	cmp	r2, r6
10002c48:	d9f8      	bls.n	10002c3c <hardware_alarm_set_target+0x1c>
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10002c4a:	f3ef 8910 	mrs	r9, PRIMASK
    __asm volatile ("cpsid i");
10002c4e:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10002c50:	4c21      	ldr	r4, [pc, #132]	; (10002cd8 <hardware_alarm_set_target+0xb8>)
10002c52:	6821      	ldr	r1, [r4, #0]
10002c54:	2900      	cmp	r1, #0
10002c56:	d0fc      	beq.n	10002c52 <hardware_alarm_set_target+0x32>
    __asm volatile ("dmb");
10002c58:	f3bf 8f5f 	dmb	sy
        timer_hw->intr = 1u << alarm_num;
10002c5c:	2501      	movs	r5, #1
10002c5e:	4085      	lsls	r5, r0
10002c60:	4c1c      	ldr	r4, [pc, #112]	; (10002cd4 <hardware_alarm_set_target+0xb4>)
        timer_callbacks_pending |= 1u << alarm_num;
10002c62:	4f1e      	ldr	r7, [pc, #120]	; (10002cdc <hardware_alarm_set_target+0xbc>)
        timer_hw->intr = 1u << alarm_num;
10002c64:	6365      	str	r5, [r4, #52]	; 0x34
        timer_callbacks_pending |= 1u << alarm_num;
10002c66:	b2e9      	uxtb	r1, r5
10002c68:	4688      	mov	r8, r1
10002c6a:	7839      	ldrb	r1, [r7, #0]
10002c6c:	468c      	mov	ip, r1
10002c6e:	4641      	mov	r1, r8
10002c70:	4666      	mov	r6, ip
10002c72:	4331      	orrs	r1, r6
10002c74:	7039      	strb	r1, [r7, #0]
        timer_hw->alarm[alarm_num] = (uint32_t) t;
10002c76:	1d01      	adds	r1, r0, #4
10002c78:	0089      	lsls	r1, r1, #2
10002c7a:	510a      	str	r2, [r1, r4]
        target_hi[alarm_num] = t >> 32u;
10002c7c:	4918      	ldr	r1, [pc, #96]	; (10002ce0 <hardware_alarm_set_target+0xc0>)
10002c7e:	0080      	lsls	r0, r0, #2
10002c80:	5043      	str	r3, [r0, r1]
        if (!(timer_hw->armed & 1u << alarm_num)) {
10002c82:	6a21      	ldr	r1, [r4, #32]
        missed = false;
10002c84:	2000      	movs	r0, #0
        if (!(timer_hw->armed & 1u << alarm_num)) {
10002c86:	4229      	tst	r1, r5
10002c88:	d00b      	beq.n	10002ca2 <hardware_alarm_set_target+0x82>
    uint32_t hi = timer_hw->timerawh;
10002c8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
        lo = timer_hw->timerawl;
10002c8c:	0008      	movs	r0, r1
10002c8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        uint32_t next_hi = timer_hw->timerawh;
10002c90:	6a61      	ldr	r1, [r4, #36]	; 0x24
        if (hi == next_hi) break;
10002c92:	4281      	cmp	r1, r0
10002c94:	d1fa      	bne.n	10002c8c <hardware_alarm_set_target+0x6c>
            if (time_us_64() >= t) {
10002c96:	428b      	cmp	r3, r1
10002c98:	d802      	bhi.n	10002ca0 <hardware_alarm_set_target+0x80>
10002c9a:	d10a      	bne.n	10002cb2 <hardware_alarm_set_target+0x92>
10002c9c:	42b2      	cmp	r2, r6
10002c9e:	d908      	bls.n	10002cb2 <hardware_alarm_set_target+0x92>
        missed = false;
10002ca0:	2000      	movs	r0, #0
10002ca2:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002ca6:	2200      	movs	r2, #0
10002ca8:	4b0b      	ldr	r3, [pc, #44]	; (10002cd8 <hardware_alarm_set_target+0xb8>)
10002caa:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002cac:	f389 8810 	msr	PRIMASK, r9
}
10002cb0:	e7c5      	b.n	10002c3e <hardware_alarm_set_target+0x1e>
                timer_hw->armed = 1u << alarm_num;
10002cb2:	4b08      	ldr	r3, [pc, #32]	; (10002cd4 <hardware_alarm_set_target+0xb4>)
                timer_callbacks_pending &= ~(1u << alarm_num);
10002cb4:	4642      	mov	r2, r8
                timer_hw->armed = 1u << alarm_num;
10002cb6:	621d      	str	r5, [r3, #32]
                timer_hw->intr = 1u << alarm_num; // clear the IRQ too
10002cb8:	635d      	str	r5, [r3, #52]	; 0x34
                timer_callbacks_pending &= ~(1u << alarm_num);
10002cba:	4663      	mov	r3, ip
10002cbc:	4393      	bics	r3, r2
                missed = true;
10002cbe:	2001      	movs	r0, #1
                timer_callbacks_pending &= ~(1u << alarm_num);
10002cc0:	703b      	strb	r3, [r7, #0]
    __asm volatile ("dmb");
10002cc2:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002cc6:	2200      	movs	r2, #0
10002cc8:	4b03      	ldr	r3, [pc, #12]	; (10002cd8 <hardware_alarm_set_target+0xb8>)
10002cca:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002ccc:	f389 8810 	msr	PRIMASK, r9
10002cd0:	e7b5      	b.n	10002c3e <hardware_alarm_set_target+0x1e>
10002cd2:	46c0      	nop			; (mov r8, r8)
10002cd4:	40054000 	.word	0x40054000
10002cd8:	d0000128 	.word	0xd0000128
10002cdc:	20023b8b 	.word	0x20023b8b
10002ce0:	20023b70 	.word	0x20023b70

10002ce4 <hardware_alarm_cancel>:
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10002ce4:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10002ce8:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10002cea:	490a      	ldr	r1, [pc, #40]	; (10002d14 <hardware_alarm_cancel+0x30>)
10002cec:	680b      	ldr	r3, [r1, #0]
10002cee:	2b00      	cmp	r3, #0
10002cf0:	d0fc      	beq.n	10002cec <hardware_alarm_cancel+0x8>
    __asm volatile ("dmb");
10002cf2:	f3bf 8f5f 	dmb	sy
void hardware_alarm_cancel(uint alarm_num) {
    check_hardware_alarm_num_param(alarm_num);

    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
    uint32_t save = spin_lock_blocking(lock);
    timer_hw->armed = 1u << alarm_num;
10002cf6:	2301      	movs	r3, #1
10002cf8:	4083      	lsls	r3, r0
10002cfa:	4a07      	ldr	r2, [pc, #28]	; (10002d18 <hardware_alarm_cancel+0x34>)
    timer_callbacks_pending &= ~(1u << alarm_num);
10002cfc:	4807      	ldr	r0, [pc, #28]	; (10002d1c <hardware_alarm_cancel+0x38>)
    timer_hw->armed = 1u << alarm_num;
10002cfe:	6213      	str	r3, [r2, #32]
    timer_callbacks_pending &= ~(1u << alarm_num);
10002d00:	7802      	ldrb	r2, [r0, #0]
10002d02:	439a      	bics	r2, r3
10002d04:	7002      	strb	r2, [r0, #0]
10002d06:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002d0a:	2300      	movs	r3, #0
10002d0c:	600b      	str	r3, [r1, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002d0e:	f38c 8810 	msr	PRIMASK, ip
    spin_unlock(lock, save);
}
10002d12:	4770      	bx	lr
10002d14:	d0000128 	.word	0xd0000128
10002d18:	40054000 	.word	0x40054000
10002d1c:	20023b8b 	.word	0x20023b8b

10002d20 <_retrieve_unique_id_on_boot>:

static_assert(PICO_UNIQUE_BOARD_ID_SIZE_BYTES == FLASH_UNIQUE_ID_SIZE_BYTES, "Board ID size must match flash ID size");

static pico_unique_board_id_t retrieved_id;

static void __attribute__((constructor)) _retrieve_unique_id_on_boot() {
10002d20:	b510      	push	{r4, lr}
    // build. Since this constructor is pre-main it would be annoying to
    // debug, so just produce something well-defined and obviously wrong.
    for (int i = 0; i < PICO_UNIQUE_BOARD_ID_SIZE_BYTES; i++)
        retrieved_id.id[i] = 0xee;
#else
    flash_get_unique_id(retrieved_id.id);
10002d22:	4802      	ldr	r0, [pc, #8]	; (10002d2c <_retrieve_unique_id_on_boot+0xc>)
10002d24:	f7fe f928 	bl	10000f78 <flash_get_unique_id>
#endif
}
10002d28:	bd10      	pop	{r4, pc}
10002d2a:	46c0      	nop			; (mov r8, r8)
10002d2c:	20023b5c 	.word	0x20023b5c

10002d30 <watchdog_start_tick>:
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
10002d30:	2380      	movs	r3, #128	; 0x80
10002d32:	4a02      	ldr	r2, [pc, #8]	; (10002d3c <watchdog_start_tick+0xc>)
10002d34:	009b      	lsls	r3, r3, #2
10002d36:	4303      	orrs	r3, r0
10002d38:	62d3      	str	r3, [r2, #44]	; 0x2c
}
10002d3a:	4770      	bx	lr
10002d3c:	40058000 	.word	0x40058000

10002d40 <xosc_init>:
#include "hardware/structs/xosc.h"

void xosc_init(void) {
    // Assumes 1-15 MHz input
    assert(XOSC_MHZ <= 15);
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
10002d40:	23aa      	movs	r3, #170	; 0xaa
10002d42:	4a06      	ldr	r2, [pc, #24]	; (10002d5c <xosc_init+0x1c>)
10002d44:	011b      	lsls	r3, r3, #4
10002d46:	6013      	str	r3, [r2, #0]

    // Set xosc startup delay
    uint32_t startup_delay = (((12 * MHZ) / 1000) + 128) / 256;
    xosc_hw->startup = startup_delay;
10002d48:	232f      	movs	r3, #47	; 0x2f
10002d4a:	4905      	ldr	r1, [pc, #20]	; (10002d60 <xosc_init+0x20>)
10002d4c:	60d3      	str	r3, [r2, #12]
10002d4e:	4b05      	ldr	r3, [pc, #20]	; (10002d64 <xosc_init+0x24>)
10002d50:	6019      	str	r1, [r3, #0]

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
10002d52:	6853      	ldr	r3, [r2, #4]
10002d54:	2b00      	cmp	r3, #0
10002d56:	dafc      	bge.n	10002d52 <xosc_init+0x12>
}
10002d58:	4770      	bx	lr
10002d5a:	46c0      	nop			; (mov r8, r8)
10002d5c:	40024000 	.word	0x40024000
10002d60:	00fab000 	.word	0x00fab000
10002d64:	40026000 	.word	0x40026000

10002d68 <tud_cdc_n_connected>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_cdc_n_connected(uint8_t itf)
{
10002d68:	b510      	push	{r4, lr}
10002d6a:	0004      	movs	r4, r0
bool tud_suspended(void);

// Check if device is ready to transfer
static inline bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
10002d6c:	f000 fc9c 	bl	100036a8 <tud_mounted>
10002d70:	2800      	cmp	r0, #0
10002d72:	d101      	bne.n	10002d78 <tud_cdc_n_connected+0x10>
10002d74:	2000      	movs	r0, #0
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
}
10002d76:	bd10      	pop	{r4, pc}
10002d78:	f000 fc9e 	bl	100036b8 <tud_suspended>
10002d7c:	2800      	cmp	r0, #0
10002d7e:	d1f9      	bne.n	10002d74 <tud_cdc_n_connected+0xc>
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
10002d80:	0060      	lsls	r0, r4, #1
10002d82:	1904      	adds	r4, r0, r4
10002d84:	0123      	lsls	r3, r4, #4
10002d86:	4804      	ldr	r0, [pc, #16]	; (10002d98 <tud_cdc_n_connected+0x30>)
10002d88:	1b1c      	subs	r4, r3, r4
10002d8a:	0124      	lsls	r4, r4, #4
10002d8c:	1904      	adds	r4, r0, r4
10002d8e:	2001      	movs	r0, #1
10002d90:	7923      	ldrb	r3, [r4, #4]
10002d92:	4018      	ands	r0, r3
10002d94:	e7ef      	b.n	10002d76 <tud_cdc_n_connected+0xe>
10002d96:	46c0      	nop			; (mov r8, r8)
10002d98:	20022f18 	.word	0x20022f18

10002d9c <tud_cdc_n_available>:
//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
10002d9c:	0043      	lsls	r3, r0, #1
10002d9e:	181b      	adds	r3, r3, r0
{
10002da0:	b510      	push	{r4, lr}
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
10002da2:	0118      	lsls	r0, r3, #4
10002da4:	1ac0      	subs	r0, r0, r3
10002da6:	0100      	lsls	r0, r0, #4
10002da8:	4b02      	ldr	r3, [pc, #8]	; (10002db4 <tud_cdc_n_available+0x18>)
10002daa:	3010      	adds	r0, #16
10002dac:	18c0      	adds	r0, r0, r3
10002dae:	f000 fab9 	bl	10003324 <tu_fifo_count>
}
10002db2:	bd10      	pop	{r4, pc}
10002db4:	20022f18 	.word	0x20022f18

10002db8 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
10002db8:	b5f0      	push	{r4, r5, r6, r7, lr}
10002dba:	0044      	lsls	r4, r0, #1
10002dbc:	1820      	adds	r0, r4, r0
10002dbe:	0104      	lsls	r4, r0, #4
10002dc0:	1a24      	subs	r4, r4, r0
10002dc2:	0124      	lsls	r4, r4, #4
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, bufsize);
10002dc4:	0026      	movs	r6, r4
{
10002dc6:	46c6      	mov	lr, r8
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, bufsize);
10002dc8:	4f17      	ldr	r7, [pc, #92]	; (10002e28 <tud_cdc_n_read+0x70>)
10002dca:	3610      	adds	r6, #16
10002dcc:	19f6      	adds	r6, r6, r7
{
10002dce:	b500      	push	{lr}
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, bufsize);
10002dd0:	0030      	movs	r0, r6
10002dd2:	b292      	uxth	r2, r2
10002dd4:	f000 fb14 	bl	10003400 <tu_fifo_read_n>
10002dd8:	0005      	movs	r5, r0
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
10002dda:	0030      	movs	r0, r6
10002ddc:	f000 faae 	bl	1000333c <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf), );
10002de0:	283f      	cmp	r0, #63	; 0x3f
10002de2:	d803      	bhi.n	10002dec <tud_cdc_n_read+0x34>
  _prep_out_transaction(p_cdc);
  return num_read;
}
10002de4:	0028      	movs	r0, r5
10002de6:	bc80      	pop	{r7}
10002de8:	46b8      	mov	r8, r7
10002dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out), );
10002dec:	193b      	adds	r3, r7, r4
10002dee:	2000      	movs	r0, #0
10002df0:	78d9      	ldrb	r1, [r3, #3]
10002df2:	4698      	mov	r8, r3
10002df4:	f001 f9c6 	bl	10004184 <usbd_edpt_claim>
10002df8:	2800      	cmp	r0, #0
10002dfa:	d0f3      	beq.n	10002de4 <tud_cdc_n_read+0x2c>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
10002dfc:	0030      	movs	r0, r6
10002dfe:	f000 fa9d 	bl	1000333c <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )  {
10002e02:	283f      	cmp	r0, #63	; 0x3f
10002e04:	d90a      	bls.n	10002e1c <tud_cdc_n_read+0x64>
    usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
10002e06:	2394      	movs	r3, #148	; 0x94
10002e08:	009b      	lsls	r3, r3, #2
10002e0a:	18e2      	adds	r2, r4, r3
10002e0c:	4643      	mov	r3, r8
10002e0e:	19d2      	adds	r2, r2, r7
10002e10:	78d9      	ldrb	r1, [r3, #3]
10002e12:	2000      	movs	r0, #0
10002e14:	2340      	movs	r3, #64	; 0x40
10002e16:	f001 fa0d 	bl	10004234 <usbd_edpt_xfer>
10002e1a:	e7e3      	b.n	10002de4 <tud_cdc_n_read+0x2c>
    usbd_edpt_release(rhport, p_cdc->ep_out);
10002e1c:	4643      	mov	r3, r8
10002e1e:	2000      	movs	r0, #0
10002e20:	78d9      	ldrb	r1, [r3, #3]
10002e22:	f001 f9e1 	bl	100041e8 <usbd_edpt_release>
  return num_read;
10002e26:	e7dd      	b.n	10002de4 <tud_cdc_n_read+0x2c>
10002e28:	20022f18 	.word	0x20022f18

10002e2c <tud_cdc_n_write_flush>:

  return ret;
}

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
10002e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002e2e:	4647      	mov	r7, r8
10002e30:	46ce      	mov	lr, r9
10002e32:	b580      	push	{r7, lr}
10002e34:	0047      	lsls	r7, r0, #1
10002e36:	183b      	adds	r3, r7, r0
10002e38:	011c      	lsls	r4, r3, #4
10002e3a:	1ae4      	subs	r4, r4, r3
10002e3c:	0124      	lsls	r4, r4, #4
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];

  // No data to send
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
10002e3e:	4b23      	ldr	r3, [pc, #140]	; (10002ecc <tud_cdc_n_write_flush+0xa0>)
10002e40:	0026      	movs	r6, r4
10002e42:	4698      	mov	r8, r3
10002e44:	3628      	adds	r6, #40	; 0x28
10002e46:	4446      	add	r6, r8
{
10002e48:	0005      	movs	r5, r0
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
10002e4a:	0030      	movs	r0, r6
10002e4c:	f000 fa6a 	bl	10003324 <tu_fifo_count>
10002e50:	2800      	cmp	r0, #0
10002e52:	d104      	bne.n	10002e5e <tud_cdc_n_write_flush+0x32>
  }else
  {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
    return 0;
10002e54:	2000      	movs	r0, #0
  }
}
10002e56:	bcc0      	pop	{r6, r7}
10002e58:	46b9      	mov	r9, r7
10002e5a:	46b0      	mov	r8, r6
10002e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
10002e5e:	46a1      	mov	r9, r4
10002e60:	44c1      	add	r9, r8
10002e62:	464b      	mov	r3, r9
10002e64:	2000      	movs	r0, #0
10002e66:	7899      	ldrb	r1, [r3, #2]
10002e68:	f001 f98c 	bl	10004184 <usbd_edpt_claim>
10002e6c:	2800      	cmp	r0, #0
10002e6e:	d0f1      	beq.n	10002e54 <tud_cdc_n_write_flush+0x28>
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
10002e70:	23a4      	movs	r3, #164	; 0xa4
10002e72:	009b      	lsls	r3, r3, #2
10002e74:	469c      	mov	ip, r3
10002e76:	4464      	add	r4, ip
10002e78:	4444      	add	r4, r8
10002e7a:	0030      	movs	r0, r6
10002e7c:	2240      	movs	r2, #64	; 0x40
10002e7e:	0021      	movs	r1, r4
10002e80:	f000 fabe 	bl	10003400 <tu_fifo_read_n>
10002e84:	1e06      	subs	r6, r0, #0
  if ( count && tud_cdc_n_connected(itf) )
10002e86:	d016      	beq.n	10002eb6 <tud_cdc_n_write_flush+0x8a>
10002e88:	f000 fc0e 	bl	100036a8 <tud_mounted>
10002e8c:	2800      	cmp	r0, #0
10002e8e:	d012      	beq.n	10002eb6 <tud_cdc_n_write_flush+0x8a>
10002e90:	f000 fc12 	bl	100036b8 <tud_suspended>
10002e94:	2800      	cmp	r0, #0
10002e96:	d10e      	bne.n	10002eb6 <tud_cdc_n_write_flush+0x8a>
10002e98:	464b      	mov	r3, r9
10002e9a:	791b      	ldrb	r3, [r3, #4]
10002e9c:	07db      	lsls	r3, r3, #31
10002e9e:	d50a      	bpl.n	10002eb6 <tud_cdc_n_write_flush+0x8a>
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
10002ea0:	464b      	mov	r3, r9
10002ea2:	0022      	movs	r2, r4
10002ea4:	7899      	ldrb	r1, [r3, #2]
10002ea6:	2000      	movs	r0, #0
10002ea8:	0033      	movs	r3, r6
10002eaa:	f001 f9c3 	bl	10004234 <usbd_edpt_xfer>
10002eae:	2800      	cmp	r0, #0
10002eb0:	d0d0      	beq.n	10002e54 <tud_cdc_n_write_flush+0x28>
    return count;
10002eb2:	0030      	movs	r0, r6
10002eb4:	e7cf      	b.n	10002e56 <tud_cdc_n_write_flush+0x2a>
    usbd_edpt_release(rhport, p_cdc->ep_in);
10002eb6:	197d      	adds	r5, r7, r5
10002eb8:	012b      	lsls	r3, r5, #4
10002eba:	1b5d      	subs	r5, r3, r5
10002ebc:	012d      	lsls	r5, r5, #4
10002ebe:	4445      	add	r5, r8
10002ec0:	78a9      	ldrb	r1, [r5, #2]
10002ec2:	2000      	movs	r0, #0
10002ec4:	f001 f990 	bl	100041e8 <usbd_edpt_release>
10002ec8:	e7c4      	b.n	10002e54 <tud_cdc_n_write_flush+0x28>
10002eca:	46c0      	nop			; (mov r8, r8)
10002ecc:	20022f18 	.word	0x20022f18

10002ed0 <tud_cdc_n_write>:
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, bufsize);
10002ed0:	0043      	lsls	r3, r0, #1
10002ed2:	181b      	adds	r3, r3, r0
{
10002ed4:	b570      	push	{r4, r5, r6, lr}
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, bufsize);
10002ed6:	011c      	lsls	r4, r3, #4
10002ed8:	1ae4      	subs	r4, r4, r3
10002eda:	0124      	lsls	r4, r4, #4
10002edc:	4b09      	ldr	r3, [pc, #36]	; (10002f04 <tud_cdc_n_write+0x34>)
10002ede:	3428      	adds	r4, #40	; 0x28
10002ee0:	18e4      	adds	r4, r4, r3
{
10002ee2:	0005      	movs	r5, r0
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, bufsize);
10002ee4:	b292      	uxth	r2, r2
10002ee6:	0020      	movs	r0, r4
10002ee8:	f000 fb4a 	bl	10003580 <tu_fifo_write_n>
10002eec:	0006      	movs	r6, r0
  if ( tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE )
10002eee:	0020      	movs	r0, r4
10002ef0:	f000 fa18 	bl	10003324 <tu_fifo_count>
10002ef4:	283f      	cmp	r0, #63	; 0x3f
10002ef6:	d801      	bhi.n	10002efc <tud_cdc_n_write+0x2c>
}
10002ef8:	0030      	movs	r0, r6
10002efa:	bd70      	pop	{r4, r5, r6, pc}
    tud_cdc_n_write_flush(itf);
10002efc:	0028      	movs	r0, r5
10002efe:	f7ff ff95 	bl	10002e2c <tud_cdc_n_write_flush>
10002f02:	e7f9      	b.n	10002ef8 <tud_cdc_n_write+0x28>
10002f04:	20022f18 	.word	0x20022f18

10002f08 <tud_cdc_n_write_available>:

uint32_t tud_cdc_n_write_available (uint8_t itf)
{
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
10002f08:	0043      	lsls	r3, r0, #1
10002f0a:	181b      	adds	r3, r3, r0
{
10002f0c:	b510      	push	{r4, lr}
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
10002f0e:	0118      	lsls	r0, r3, #4
10002f10:	1ac0      	subs	r0, r0, r3
10002f12:	0100      	lsls	r0, r0, #4
10002f14:	4b02      	ldr	r3, [pc, #8]	; (10002f20 <tud_cdc_n_write_available+0x18>)
10002f16:	3028      	adds	r0, #40	; 0x28
10002f18:	18c0      	adds	r0, r0, r3
10002f1a:	f000 fa0f 	bl	1000333c <tu_fifo_remaining>
}
10002f1e:	bd10      	pop	{r4, pc}
10002f20:	20022f18 	.word	0x20022f18

10002f24 <cdcd_init>:
//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
10002f24:	22b4      	movs	r2, #180	; 0xb4
{
10002f26:	b570      	push	{r4, r5, r6, lr}
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
10002f28:	4c1a      	ldr	r4, [pc, #104]	; (10002f94 <cdcd_init+0x70>)
{
10002f2a:	b082      	sub	sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
10002f2c:	2100      	movs	r1, #0
10002f2e:	0020      	movs	r0, r4
10002f30:	0092      	lsls	r2, r2, #2
10002f32:	f7fd fcff 	bl	10000934 <__wrap_memset>

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];

    p_cdc->wanted_char = -1;
10002f36:	23ff      	movs	r3, #255	; 0xff
10002f38:	7163      	strb	r3, [r4, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate  = 115200;
10002f3a:	4b17      	ldr	r3, [pc, #92]	; (10002f98 <cdcd_init+0x74>)
    p_cdc->line_coding.stop_bits = 0;
    p_cdc->line_coding.parity    = 0;
    p_cdc->line_coding.data_bits = 8;

    // config fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
10002f3c:	2580      	movs	r5, #128	; 0x80
    p_cdc->line_coding.bit_rate  = 115200;
10002f3e:	80e3      	strh	r3, [r4, #6]
10002f40:	2301      	movs	r3, #1
10002f42:	2600      	movs	r6, #0
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
10002f44:	0021      	movs	r1, r4
10002f46:	0020      	movs	r0, r4
    p_cdc->line_coding.bit_rate  = 115200;
10002f48:	8123      	strh	r3, [r4, #8]
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
10002f4a:	006d      	lsls	r5, r5, #1
    p_cdc->line_coding.data_bits = 8;
10002f4c:	3307      	adds	r3, #7
10002f4e:	7323      	strb	r3, [r4, #12]
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
10002f50:	002a      	movs	r2, r5
10002f52:	3140      	adds	r1, #64	; 0x40
10002f54:	9600      	str	r6, [sp, #0]
10002f56:	3b07      	subs	r3, #7
10002f58:	3010      	adds	r0, #16
10002f5a:	f000 f9a7 	bl	100032ac <tu_fifo_config>
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, false);
10002f5e:	0021      	movs	r1, r4
10002f60:	0020      	movs	r0, r4
10002f62:	3141      	adds	r1, #65	; 0x41
10002f64:	002a      	movs	r2, r5
10002f66:	31ff      	adds	r1, #255	; 0xff
10002f68:	2301      	movs	r3, #1
10002f6a:	9600      	str	r6, [sp, #0]
10002f6c:	3028      	adds	r0, #40	; 0x28
10002f6e:	f000 f99d 	bl	100032ac <tu_fifo_config>
//--------------------------------------------------------------------+
typedef struct mutex osal_mutex_def_t, *osal_mutex_t;

static inline osal_mutex_t osal_mutex_create(osal_mutex_def_t* mdef)
{
    mutex_init(mdef);
10002f72:	2390      	movs	r3, #144	; 0x90
10002f74:	009b      	lsls	r3, r3, #2
10002f76:	18e5      	adds	r5, r4, r3
10002f78:	0028      	movs	r0, r5
10002f7a:	f7fe facd 	bl	10001518 <mutex_init>
10002f7e:	2392      	movs	r3, #146	; 0x92
10002f80:	009b      	lsls	r3, r3, #2
bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable);

#if CFG_FIFO_MUTEX
static inline void tu_fifo_config_mutex(tu_fifo_t *f, tu_fifo_mutex_t mutex_hdl)
{
  f->mutex = mutex_hdl;
10002f82:	6265      	str	r5, [r4, #36]	; 0x24
10002f84:	18e5      	adds	r5, r4, r3
10002f86:	0028      	movs	r0, r5
10002f88:	f7fe fac6 	bl	10001518 <mutex_init>
10002f8c:	63e5      	str	r5, [r4, #60]	; 0x3c
#if CFG_FIFO_MUTEX
    tu_fifo_config_mutex(&p_cdc->rx_ff, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex));
#endif
  }
}
10002f8e:	b002      	add	sp, #8
10002f90:	bd70      	pop	{r4, r5, r6, pc}
10002f92:	46c0      	nop			; (mov r8, r8)
10002f94:	20022f18 	.word	0x20022f18
10002f98:	ffffc200 	.word	0xffffc200

10002f9c <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
10002f9c:	b510      	push	{r4, lr}
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
  {
    tu_memclr(&_cdcd_itf[i], ITF_MEM_RESET_SIZE);
10002f9e:	4c07      	ldr	r4, [pc, #28]	; (10002fbc <cdcd_reset+0x20>)
10002fa0:	2205      	movs	r2, #5
10002fa2:	2100      	movs	r1, #0
10002fa4:	0020      	movs	r0, r4
10002fa6:	f7fd fcc5 	bl	10000934 <__wrap_memset>
    tu_fifo_clear(&_cdcd_itf[i].rx_ff);
10002faa:	0020      	movs	r0, r4
10002fac:	3010      	adds	r0, #16
10002fae:	f000 fb65 	bl	1000367c <tu_fifo_clear>
    tu_fifo_clear(&_cdcd_itf[i].tx_ff);
10002fb2:	0020      	movs	r0, r4
10002fb4:	3028      	adds	r0, #40	; 0x28
10002fb6:	f000 fb61 	bl	1000367c <tu_fifo_clear>
  }
}
10002fba:	bd10      	pop	{r4, pc}
10002fbc:	20022f18 	.word	0x20022f18

10002fc0 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
10002fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
10002fc2:	794b      	ldrb	r3, [r1, #5]
{
10002fc4:	0006      	movs	r6, r0
10002fc6:	b083      	sub	sp, #12
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
10002fc8:	2b02      	cmp	r3, #2
10002fca:	d102      	bne.n	10002fd2 <cdcd_open+0x12>
10002fcc:	798b      	ldrb	r3, [r1, #6]
10002fce:	2b02      	cmp	r3, #2
10002fd0:	d003      	beq.n	10002fda <cdcd_open+0x1a>
10002fd2:	2500      	movs	r5, #0

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);

  return drv_len;
}
10002fd4:	0028      	movs	r0, r5
10002fd6:	b003      	add	sp, #12
10002fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
static inline uint32_t tu_abs(int32_t value) { return (uint32_t)((value < 0) ? (-value) : value); }

/// inclusive range checking
static inline bool tu_within(uint32_t lower, uint32_t value, uint32_t upper)
{
  return (lower <= value) && (value <= upper);
10002fda:	79cb      	ldrb	r3, [r1, #7]
10002fdc:	2b06      	cmp	r3, #6
10002fde:	d8f8      	bhi.n	10002fd2 <cdcd_open+0x12>
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
10002fe0:	4f2f      	ldr	r7, [pc, #188]	; (100030a0 <cdcd_open+0xe0>)
10002fe2:	78bb      	ldrb	r3, [r7, #2]
10002fe4:	2b00      	cmp	r3, #0
10002fe6:	d1f4      	bne.n	10002fd2 <cdcd_open+0x12>
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
10002fe8:	788b      	ldrb	r3, [r1, #2]
  uint16_t drv_len = sizeof(tusb_desc_interface_t);
10002fea:	2509      	movs	r5, #9
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
10002fec:	703b      	strb	r3, [r7, #0]
// Descriptor helper
//--------------------------------------------------------------------+
static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
  return desc8 + desc8[DESC_OFFSET_LEN];
10002fee:	780c      	ldrb	r4, [r1, #0]
10002ff0:	190c      	adds	r4, r1, r4
}

static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10002ff2:	7863      	ldrb	r3, [r4, #1]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
10002ff4:	2b24      	cmp	r3, #36	; 0x24
10002ff6:	d10b      	bne.n	10003010 <cdcd_open+0x50>
10002ff8:	2a08      	cmp	r2, #8
10002ffa:	d802      	bhi.n	10003002 <cdcd_open+0x42>
10002ffc:	e00f      	b.n	1000301e <cdcd_open+0x5e>
10002ffe:	42aa      	cmp	r2, r5
10003000:	d30d      	bcc.n	1000301e <cdcd_open+0x5e>
}

static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
10003002:	7823      	ldrb	r3, [r4, #0]
  return desc8 + desc8[DESC_OFFSET_LEN];
10003004:	18e4      	adds	r4, r4, r3
    drv_len += tu_desc_len(p_desc);
10003006:	18ed      	adds	r5, r5, r3
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10003008:	7863      	ldrb	r3, [r4, #1]
1000300a:	b2ad      	uxth	r5, r5
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
1000300c:	2b24      	cmp	r3, #36	; 0x24
1000300e:	d0f6      	beq.n	10002ffe <cdcd_open+0x3e>
  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
10003010:	2b05      	cmp	r3, #5
10003012:	d020      	beq.n	10003056 <cdcd_open+0x96>
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
10003014:	2b04      	cmp	r3, #4
10003016:	d102      	bne.n	1000301e <cdcd_open+0x5e>
10003018:	7963      	ldrb	r3, [r4, #5]
1000301a:	2b0a      	cmp	r3, #10
1000301c:	d02e      	beq.n	1000307c <cdcd_open+0xbc>
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
1000301e:	4c21      	ldr	r4, [pc, #132]	; (100030a4 <cdcd_open+0xe4>)
10003020:	0020      	movs	r0, r4
10003022:	f000 f98b 	bl	1000333c <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf), );
10003026:	283f      	cmp	r0, #63	; 0x3f
10003028:	d9d4      	bls.n	10002fd4 <cdcd_open+0x14>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out), );
1000302a:	0026      	movs	r6, r4
1000302c:	3e10      	subs	r6, #16
1000302e:	2000      	movs	r0, #0
10003030:	78f1      	ldrb	r1, [r6, #3]
10003032:	f001 f8a7 	bl	10004184 <usbd_edpt_claim>
10003036:	2800      	cmp	r0, #0
10003038:	d0cc      	beq.n	10002fd4 <cdcd_open+0x14>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
1000303a:	0020      	movs	r0, r4
1000303c:	f000 f97e 	bl	1000333c <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )  {
10003040:	283f      	cmp	r0, #63	; 0x3f
10003042:	d916      	bls.n	10003072 <cdcd_open+0xb2>
    usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
10003044:	2390      	movs	r3, #144	; 0x90
10003046:	009b      	lsls	r3, r3, #2
10003048:	18e2      	adds	r2, r4, r3
1000304a:	78f1      	ldrb	r1, [r6, #3]
1000304c:	2340      	movs	r3, #64	; 0x40
1000304e:	2000      	movs	r0, #0
10003050:	f001 f8f0 	bl	10004234 <usbd_edpt_xfer>
10003054:	e7be      	b.n	10002fd4 <cdcd_open+0x14>
    TU_ASSERT( usbd_edpt_open(rhport, (tusb_desc_endpoint_t const *) p_desc), 0 );
10003056:	0021      	movs	r1, r4
10003058:	0030      	movs	r0, r6
1000305a:	f001 f88f 	bl	1000417c <usbd_edpt_open>
1000305e:	2800      	cmp	r0, #0
10003060:	d0b7      	beq.n	10002fd2 <cdcd_open+0x12>
    p_cdc->ep_notif = ((tusb_desc_endpoint_t const *) p_desc)->bEndpointAddress;
10003062:	78a3      	ldrb	r3, [r4, #2]
10003064:	707b      	strb	r3, [r7, #1]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
10003066:	7823      	ldrb	r3, [r4, #0]
    drv_len += tu_desc_len(p_desc);
10003068:	18ed      	adds	r5, r5, r3
  return desc8 + desc8[DESC_OFFSET_LEN];
1000306a:	18e4      	adds	r4, r4, r3
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
1000306c:	7863      	ldrb	r3, [r4, #1]
1000306e:	b2ad      	uxth	r5, r5
  return desc8 + desc8[DESC_OFFSET_LEN];
10003070:	e7d0      	b.n	10003014 <cdcd_open+0x54>
    usbd_edpt_release(rhport, p_cdc->ep_out);
10003072:	78f1      	ldrb	r1, [r6, #3]
10003074:	2000      	movs	r0, #0
10003076:	f001 f8b7 	bl	100041e8 <usbd_edpt_release>
1000307a:	e7ab      	b.n	10002fd4 <cdcd_open+0x14>
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
1000307c:	4b0a      	ldr	r3, [pc, #40]	; (100030a8 <cdcd_open+0xe8>)
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
1000307e:	7827      	ldrb	r7, [r4, #0]
10003080:	9301      	str	r3, [sp, #4]
10003082:	3301      	adds	r3, #1
10003084:	9300      	str	r3, [sp, #0]
10003086:	2202      	movs	r2, #2
10003088:	2302      	movs	r3, #2
1000308a:	0030      	movs	r0, r6
  return desc8 + desc8[DESC_OFFSET_LEN];
1000308c:	19e1      	adds	r1, r4, r7
1000308e:	f001 f841 	bl	10004114 <usbd_open_edpt_pair>
10003092:	2800      	cmp	r0, #0
10003094:	d09d      	beq.n	10002fd2 <cdcd_open+0x12>
    drv_len += 2*sizeof(tusb_desc_endpoint_t);
10003096:	350e      	adds	r5, #14
10003098:	19ed      	adds	r5, r5, r7
1000309a:	b2ad      	uxth	r5, r5
1000309c:	e7bf      	b.n	1000301e <cdcd_open+0x5e>
1000309e:	46c0      	nop			; (mov r8, r8)
100030a0:	20022f18 	.word	0x20022f18
100030a4:	20022f28 	.word	0x20022f28
100030a8:	20022f1a 	.word	0x20022f1a

100030ac <cdcd_control_complete>:
bool cdcd_control_complete(uint8_t rhport, tusb_control_request_t const * request)
{
  (void) rhport;

  //------------- Class Specific Request -------------//
  TU_VERIFY (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
100030ac:	2360      	movs	r3, #96	; 0x60
100030ae:	780a      	ldrb	r2, [r1, #0]
{
100030b0:	b570      	push	{r4, r5, r6, lr}
  TU_VERIFY (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
100030b2:	4013      	ands	r3, r2
100030b4:	2400      	movs	r4, #0
100030b6:	2b20      	cmp	r3, #32
100030b8:	d10b      	bne.n	100030d2 <cdcd_control_complete+0x26>
  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;

    if ( p_cdc->itf_num == request->wIndex ) break;
100030ba:	4a0b      	ldr	r2, [pc, #44]	; (100030e8 <cdcd_control_complete+0x3c>)
100030bc:	794b      	ldrb	r3, [r1, #5]
100030be:	790d      	ldrb	r5, [r1, #4]
100030c0:	7810      	ldrb	r0, [r2, #0]
100030c2:	021b      	lsls	r3, r3, #8
100030c4:	432b      	orrs	r3, r5
100030c6:	4298      	cmp	r0, r3
100030c8:	d103      	bne.n	100030d2 <cdcd_control_complete+0x26>
  }

  // Invoke callback
  if ( CDC_REQUEST_SET_LINE_CODING == request->bRequest )
100030ca:	784b      	ldrb	r3, [r1, #1]
  {
    if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
  }

  return true;
100030cc:	3401      	adds	r4, #1
  if ( CDC_REQUEST_SET_LINE_CODING == request->bRequest )
100030ce:	2b20      	cmp	r3, #32
100030d0:	d001      	beq.n	100030d6 <cdcd_control_complete+0x2a>
}
100030d2:	0020      	movs	r0, r4
100030d4:	bd70      	pop	{r4, r5, r6, pc}
    if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
100030d6:	4b05      	ldr	r3, [pc, #20]	; (100030ec <cdcd_control_complete+0x40>)
100030d8:	2b00      	cmp	r3, #0
100030da:	d0fa      	beq.n	100030d2 <cdcd_control_complete+0x26>
100030dc:	2000      	movs	r0, #0
100030de:	1d91      	adds	r1, r2, #6
100030e0:	e000      	b.n	100030e4 <cdcd_control_complete+0x38>
100030e2:	bf00      	nop
100030e4:	e7f5      	b.n	100030d2 <cdcd_control_complete+0x26>
100030e6:	46c0      	nop			; (mov r8, r8)
100030e8:	20022f18 	.word	0x20022f18
100030ec:	00000000 	.word	0x00000000

100030f0 <cdcd_control_request>:
// Handle class control request
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_request(uint8_t rhport, tusb_control_request_t const * request)
{
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
100030f0:	2360      	movs	r3, #96	; 0x60
100030f2:	780a      	ldrb	r2, [r1, #0]
{
100030f4:	b570      	push	{r4, r5, r6, lr}
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
100030f6:	4013      	ands	r3, r2
100030f8:	2400      	movs	r4, #0
100030fa:	2b20      	cmp	r3, #32
100030fc:	d111      	bne.n	10003122 <cdcd_control_request+0x32>
  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;

    if ( p_cdc->itf_num == request->wIndex ) break;
100030fe:	4a14      	ldr	r2, [pc, #80]	; (10003150 <cdcd_control_request+0x60>)
10003100:	794b      	ldrb	r3, [r1, #5]
10003102:	790e      	ldrb	r6, [r1, #4]
10003104:	7815      	ldrb	r5, [r2, #0]
10003106:	021b      	lsls	r3, r3, #8
10003108:	4333      	orrs	r3, r6
1000310a:	429d      	cmp	r5, r3
1000310c:	d109      	bne.n	10003122 <cdcd_control_request+0x32>
  }

  switch ( request->bRequest )
1000310e:	784b      	ldrb	r3, [r1, #1]
10003110:	2b21      	cmp	r3, #33	; 0x21
10003112:	d808      	bhi.n	10003126 <cdcd_control_request+0x36>
10003114:	2b1f      	cmp	r3, #31
10003116:	d904      	bls.n	10003122 <cdcd_control_request+0x32>
  {
    case CDC_REQUEST_SET_LINE_CODING:
      TU_LOG2("  Set Line Coding\r\n");
      tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
10003118:	2307      	movs	r3, #7
1000311a:	3206      	adds	r2, #6
1000311c:	f001 f8c6 	bl	100042ac <tud_control_xfer>
    break;

    default: return false; // stall unsupported request
  }

  return true;
10003120:	2401      	movs	r4, #1
}
10003122:	0020      	movs	r0, r4
10003124:	bd70      	pop	{r4, r5, r6, pc}
  switch ( request->bRequest )
10003126:	2b22      	cmp	r3, #34	; 0x22
10003128:	d1fb      	bne.n	10003122 <cdcd_control_request+0x32>
      bool const dtr = tu_bit_test(request->wValue, 0);
1000312a:	78cd      	ldrb	r5, [r1, #3]
1000312c:	788b      	ldrb	r3, [r1, #2]
1000312e:	022d      	lsls	r5, r5, #8
10003130:	431d      	orrs	r5, r3
      p_cdc->line_state = (uint8_t) request->wValue;
10003132:	7115      	strb	r5, [r2, #4]
      tud_control_status(rhport, request);
10003134:	f001 f8a2 	bl	1000427c <tud_control_status>
      if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
10003138:	4b06      	ldr	r3, [pc, #24]	; (10003154 <cdcd_control_request+0x64>)
  return true;
1000313a:	2401      	movs	r4, #1
      if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
1000313c:	2b00      	cmp	r3, #0
1000313e:	d0f0      	beq.n	10003122 <cdcd_control_request+0x32>
10003140:	0029      	movs	r1, r5
}

// Bit
static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
10003142:	086a      	lsrs	r2, r5, #1
10003144:	2000      	movs	r0, #0
10003146:	4022      	ands	r2, r4
10003148:	4021      	ands	r1, r4
1000314a:	e000      	b.n	1000314e <cdcd_control_request+0x5e>
1000314c:	bf00      	nop
1000314e:	e7e8      	b.n	10003122 <cdcd_control_request+0x32>
10003150:	20022f18 	.word	0x20022f18
10003154:	00000000 	.word	0x00000000

10003158 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
10003158:	b5f0      	push	{r4, r5, r6, r7, lr}
1000315a:	4646      	mov	r6, r8
1000315c:	464f      	mov	r7, r9
1000315e:	46d6      	mov	lr, sl
10003160:	b5c0      	push	{r6, r7, lr}

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
  {
    p_cdc = &_cdcd_itf[itf];
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
10003162:	4e4d      	ldr	r6, [pc, #308]	; (10003298 <cdcd_xfer_cb+0x140>)
{
10003164:	4699      	mov	r9, r3
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
10003166:	78f3      	ldrb	r3, [r6, #3]
{
10003168:	4680      	mov	r8, r0
1000316a:	000d      	movs	r5, r1
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
1000316c:	428b      	cmp	r3, r1
1000316e:	d157      	bne.n	10003220 <cdcd_xfer_cb+0xc8>

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
  {
    // TODO search for wanted char first for better performance
    for(uint32_t i=0; i<xferred_bytes; i++)
10003170:	464b      	mov	r3, r9
10003172:	2b00      	cmp	r3, #0
10003174:	d100      	bne.n	10003178 <cdcd_xfer_cb+0x20>
10003176:	e088      	b.n	1000328a <cdcd_xfer_cb+0x132>
10003178:	4b48      	ldr	r3, [pc, #288]	; (1000329c <cdcd_xfer_cb+0x144>)
1000317a:	2b00      	cmp	r3, #0
1000317c:	d100      	bne.n	10003180 <cdcd_xfer_cb+0x28>
1000317e:	e075      	b.n	1000326c <cdcd_xfer_cb+0x114>
10003180:	2394      	movs	r3, #148	; 0x94
10003182:	009b      	lsls	r3, r3, #2
10003184:	18f4      	adds	r4, r6, r3
10003186:	46a2      	mov	sl, r4
10003188:	0037      	movs	r7, r6
1000318a:	44ca      	add	sl, r9
1000318c:	3710      	adds	r7, #16
    {
      tu_fifo_write(&p_cdc->rx_ff, &p_cdc->epout_buf[i]);
1000318e:	0021      	movs	r1, r4
10003190:	0038      	movs	r0, r7
10003192:	f000 f9b3 	bl	100034fc <tu_fifo_write>

      // Check for wanted char and invoke callback if needed
      if ( tud_cdc_rx_wanted_cb && ( ((signed char) p_cdc->wanted_char) != -1 ) && ( p_cdc->wanted_char == p_cdc->epout_buf[i] ) )
10003196:	7973      	ldrb	r3, [r6, #5]
10003198:	2bff      	cmp	r3, #255	; 0xff
1000319a:	d002      	beq.n	100031a2 <cdcd_xfer_cb+0x4a>
1000319c:	7821      	ldrb	r1, [r4, #0]
1000319e:	4299      	cmp	r1, r3
100031a0:	d043      	beq.n	1000322a <cdcd_xfer_cb+0xd2>
    for(uint32_t i=0; i<xferred_bytes; i++)
100031a2:	3401      	adds	r4, #1
100031a4:	4554      	cmp	r4, sl
100031a6:	d1f2      	bne.n	1000318e <cdcd_xfer_cb+0x36>
        tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && tu_fifo_count(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
100031a8:	4b3d      	ldr	r3, [pc, #244]	; (100032a0 <cdcd_xfer_cb+0x148>)
100031aa:	2b00      	cmp	r3, #0
100031ac:	d004      	beq.n	100031b8 <cdcd_xfer_cb+0x60>
100031ae:	0038      	movs	r0, r7
100031b0:	f000 f8b8 	bl	10003324 <tu_fifo_count>
100031b4:	2800      	cmp	r0, #0
100031b6:	d16b      	bne.n	10003290 <cdcd_xfer_cb+0x138>
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
100031b8:	0038      	movs	r0, r7
100031ba:	f000 f8bf 	bl	1000333c <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf), );
100031be:	283f      	cmp	r0, #63	; 0x3f
100031c0:	d837      	bhi.n	10003232 <cdcd_xfer_cb+0xda>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
100031c2:	3f10      	subs	r7, #16
100031c4:	78bb      	ldrb	r3, [r7, #2]
100031c6:	429d      	cmp	r5, r3
100031c8:	d006      	beq.n	100031d8 <cdcd_xfer_cb+0x80>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
100031ca:	2401      	movs	r4, #1
}
100031cc:	0020      	movs	r0, r4
100031ce:	bce0      	pop	{r5, r6, r7}
100031d0:	46ba      	mov	sl, r7
100031d2:	46b1      	mov	r9, r6
100031d4:	46a8      	mov	r8, r5
100031d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
100031d8:	4b32      	ldr	r3, [pc, #200]	; (100032a4 <cdcd_xfer_cb+0x14c>)
100031da:	2b00      	cmp	r3, #0
100031dc:	d002      	beq.n	100031e4 <cdcd_xfer_cb+0x8c>
100031de:	2000      	movs	r0, #0
100031e0:	e000      	b.n	100031e4 <cdcd_xfer_cb+0x8c>
100031e2:	bf00      	nop
    if ( 0 == tud_cdc_n_write_flush(itf) )
100031e4:	2000      	movs	r0, #0
100031e6:	f7ff fe21 	bl	10002e2c <tud_cdc_n_write_flush>
100031ea:	2800      	cmp	r0, #0
100031ec:	d1ed      	bne.n	100031ca <cdcd_xfer_cb+0x72>
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
100031ee:	4d2e      	ldr	r5, [pc, #184]	; (100032a8 <cdcd_xfer_cb+0x150>)
100031f0:	0028      	movs	r0, r5
100031f2:	f000 f897 	bl	10003324 <tu_fifo_count>
100031f6:	2800      	cmp	r0, #0
100031f8:	d1e7      	bne.n	100031ca <cdcd_xfer_cb+0x72>
100031fa:	464b      	mov	r3, r9
100031fc:	2b00      	cmp	r3, #0
100031fe:	d0e4      	beq.n	100031ca <cdcd_xfer_cb+0x72>
10003200:	069b      	lsls	r3, r3, #26
10003202:	d1e2      	bne.n	100031ca <cdcd_xfer_cb+0x72>
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
10003204:	3d28      	subs	r5, #40	; 0x28
10003206:	4640      	mov	r0, r8
10003208:	78a9      	ldrb	r1, [r5, #2]
1000320a:	f000 ffbb 	bl	10004184 <usbd_edpt_claim>
1000320e:	1e04      	subs	r4, r0, #0
10003210:	d0db      	beq.n	100031ca <cdcd_xfer_cb+0x72>
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
10003212:	2300      	movs	r3, #0
10003214:	2200      	movs	r2, #0
10003216:	4640      	mov	r0, r8
10003218:	78a9      	ldrb	r1, [r5, #2]
1000321a:	f001 f80b 	bl	10004234 <usbd_edpt_xfer>
1000321e:	e7d5      	b.n	100031cc <cdcd_xfer_cb+0x74>
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
10003220:	78b3      	ldrb	r3, [r6, #2]
10003222:	428b      	cmp	r3, r1
10003224:	d0d8      	beq.n	100031d8 <cdcd_xfer_cb+0x80>
  TU_ASSERT(itf < CFG_TUD_CDC);
10003226:	2400      	movs	r4, #0
10003228:	e7d0      	b.n	100031cc <cdcd_xfer_cb+0x74>
        tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
1000322a:	2000      	movs	r0, #0
1000322c:	e000      	b.n	10003230 <cdcd_xfer_cb+0xd8>
1000322e:	bf00      	nop
10003230:	e7b7      	b.n	100031a2 <cdcd_xfer_cb+0x4a>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out), );
10003232:	003c      	movs	r4, r7
10003234:	3c10      	subs	r4, #16
10003236:	2000      	movs	r0, #0
10003238:	78e1      	ldrb	r1, [r4, #3]
1000323a:	f000 ffa3 	bl	10004184 <usbd_edpt_claim>
1000323e:	2800      	cmp	r0, #0
10003240:	d012      	beq.n	10003268 <cdcd_xfer_cb+0x110>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
10003242:	0038      	movs	r0, r7
10003244:	f000 f87a 	bl	1000333c <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )  {
10003248:	283f      	cmp	r0, #63	; 0x3f
1000324a:	d909      	bls.n	10003260 <cdcd_xfer_cb+0x108>
    usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
1000324c:	2390      	movs	r3, #144	; 0x90
1000324e:	009b      	lsls	r3, r3, #2
10003250:	18fa      	adds	r2, r7, r3
10003252:	2000      	movs	r0, #0
10003254:	2340      	movs	r3, #64	; 0x40
10003256:	78e1      	ldrb	r1, [r4, #3]
10003258:	f000 ffec 	bl	10004234 <usbd_edpt_xfer>
  if ( ep_addr == p_cdc->ep_in )
1000325c:	78a3      	ldrb	r3, [r4, #2]
1000325e:	e7b2      	b.n	100031c6 <cdcd_xfer_cb+0x6e>
    usbd_edpt_release(rhport, p_cdc->ep_out);
10003260:	2000      	movs	r0, #0
10003262:	78e1      	ldrb	r1, [r4, #3]
10003264:	f000 ffc0 	bl	100041e8 <usbd_edpt_release>
  if ( ep_addr == p_cdc->ep_in )
10003268:	78a3      	ldrb	r3, [r4, #2]
1000326a:	e7ac      	b.n	100031c6 <cdcd_xfer_cb+0x6e>
1000326c:	2394      	movs	r3, #148	; 0x94
1000326e:	009b      	lsls	r3, r3, #2
10003270:	18f4      	adds	r4, r6, r3
10003272:	46a2      	mov	sl, r4
10003274:	3610      	adds	r6, #16
10003276:	0037      	movs	r7, r6
10003278:	44ca      	add	sl, r9
      tu_fifo_write(&p_cdc->rx_ff, &p_cdc->epout_buf[i]);
1000327a:	0021      	movs	r1, r4
1000327c:	0038      	movs	r0, r7
    for(uint32_t i=0; i<xferred_bytes; i++)
1000327e:	3401      	adds	r4, #1
      tu_fifo_write(&p_cdc->rx_ff, &p_cdc->epout_buf[i]);
10003280:	f000 f93c 	bl	100034fc <tu_fifo_write>
    for(uint32_t i=0; i<xferred_bytes; i++)
10003284:	4554      	cmp	r4, sl
10003286:	d1f8      	bne.n	1000327a <cdcd_xfer_cb+0x122>
10003288:	e78e      	b.n	100031a8 <cdcd_xfer_cb+0x50>
1000328a:	3610      	adds	r6, #16
1000328c:	0037      	movs	r7, r6
1000328e:	e78b      	b.n	100031a8 <cdcd_xfer_cb+0x50>
    if (tud_cdc_rx_cb && tu_fifo_count(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
10003290:	2000      	movs	r0, #0
10003292:	e000      	b.n	10003296 <cdcd_xfer_cb+0x13e>
10003294:	bf00      	nop
10003296:	e78f      	b.n	100031b8 <cdcd_xfer_cb+0x60>
10003298:	20022f18 	.word	0x20022f18
	...
100032a8:	20022f40 	.word	0x20022f40

100032ac <tu_fifo_config>:
#define tu_fifo_unlock(_ff)

#endif

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
100032ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100032ae:	46c6      	mov	lr, r8
100032b0:	b500      	push	{lr}
100032b2:	0014      	movs	r4, r2
100032b4:	aa06      	add	r2, sp, #24
100032b6:	001e      	movs	r6, r3
100032b8:	7813      	ldrb	r3, [r2, #0]
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
100032ba:	2280      	movs	r2, #128	; 0x80
{
100032bc:	0005      	movs	r5, r0
100032be:	000f      	movs	r7, r1
100032c0:	4698      	mov	r8, r3
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
100032c2:	0212      	lsls	r2, r2, #8
100032c4:	4294      	cmp	r4, r2
100032c6:	d82b      	bhi.n	10003320 <tu_fifo_config+0x74>
  if (f->mutex)
100032c8:	6940      	ldr	r0, [r0, #20]
100032ca:	2800      	cmp	r0, #0
100032cc:	d01a      	beq.n	10003304 <tu_fifo_config+0x58>
    return mdef;
}

static inline bool osal_mutex_lock (osal_mutex_t mutex_hdl, uint32_t msec)
{
    return mutex_enter_timeout_ms(mutex_hdl, msec);
100032ce:	2101      	movs	r1, #1
100032d0:	4249      	negs	r1, r1
100032d2:	f003 fd75 	bl	10006dc0 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);

  f->buffer = (uint8_t*) buffer;
  f->depth  = depth;
  f->item_size = item_size;
  f->overwritable = overwritable;
100032d6:	4643      	mov	r3, r8
  f->depth  = depth;
100032d8:	80ac      	strh	r4, [r5, #4]

  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
100032da:	0064      	lsls	r4, r4, #1
100032dc:	b2a4      	uxth	r4, r4
  f->overwritable = overwritable;
100032de:	722b      	strb	r3, [r5, #8]
  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
100032e0:	1e63      	subs	r3, r4, #1
100032e2:	81ab      	strh	r3, [r5, #12]
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;

  f->rd_idx = f->wr_idx = 0;
100032e4:	2300      	movs	r3, #0
  if (f->mutex)
100032e6:	6968      	ldr	r0, [r5, #20]
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;
100032e8:	4264      	negs	r4, r4
  f->rd_idx = f->wr_idx = 0;
100032ea:	81eb      	strh	r3, [r5, #14]
  f->buffer = (uint8_t*) buffer;
100032ec:	602f      	str	r7, [r5, #0]
  f->item_size = item_size;
100032ee:	80ee      	strh	r6, [r5, #6]
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;
100032f0:	816c      	strh	r4, [r5, #10]
  f->rd_idx = f->wr_idx = 0;
100032f2:	822b      	strh	r3, [r5, #16]
  if (f->mutex)
100032f4:	2800      	cmp	r0, #0
100032f6:	d011      	beq.n	1000331c <tu_fifo_config+0x70>
}

static inline bool osal_mutex_unlock(osal_mutex_t mutex_hdl)
{
    mutex_exit(mutex_hdl);
100032f8:	f003 fd42 	bl	10006d80 <__mutex_exit_veneer>

  tu_fifo_unlock(f);

  return true;
100032fc:	2001      	movs	r0, #1
}
100032fe:	bc80      	pop	{r7}
10003300:	46b8      	mov	r8, r7
10003302:	bdf0      	pop	{r4, r5, r6, r7, pc}
  f->depth  = depth;
10003304:	80ac      	strh	r4, [r5, #4]
  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
10003306:	0064      	lsls	r4, r4, #1
10003308:	b2a4      	uxth	r4, r4
  f->overwritable = overwritable;
1000330a:	722b      	strb	r3, [r5, #8]
  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
1000330c:	1e63      	subs	r3, r4, #1
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;
1000330e:	4264      	negs	r4, r4
  f->rd_idx = f->wr_idx = 0;
10003310:	81e8      	strh	r0, [r5, #14]
  f->buffer = (uint8_t*) buffer;
10003312:	6029      	str	r1, [r5, #0]
  f->item_size = item_size;
10003314:	80ee      	strh	r6, [r5, #6]
  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
10003316:	81ab      	strh	r3, [r5, #12]
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;
10003318:	816c      	strh	r4, [r5, #10]
  f->rd_idx = f->wr_idx = 0;
1000331a:	8228      	strh	r0, [r5, #16]
  return true;
1000331c:	2001      	movs	r0, #1
1000331e:	e7ee      	b.n	100032fe <tu_fifo_config+0x52>
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
10003320:	2000      	movs	r0, #0
10003322:	e7ec      	b.n	100032fe <tu_fifo_config+0x52>

10003324 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
10003324:	b510      	push	{r4, lr}
  return _tu_fifo_count(f, f->wr_idx, f->rd_idx);
10003326:	89c4      	ldrh	r4, [r0, #14]
10003328:	8a01      	ldrh	r1, [r0, #16]
{
1000332a:	0002      	movs	r2, r0
  uint16_t cnt = wAbs-rAbs;
1000332c:	1a60      	subs	r0, r4, r1
1000332e:	b280      	uxth	r0, r0
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
10003330:	428c      	cmp	r4, r1
10003332:	d202      	bcs.n	1000333a <tu_fifo_count+0x16>
10003334:	8953      	ldrh	r3, [r2, #10]
10003336:	1ac0      	subs	r0, r0, r3
10003338:	b280      	uxth	r0, r0
}
1000333a:	bd10      	pop	{r4, pc}

1000333c <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
1000333c:	b510      	push	{r4, lr}
  return _tu_fifo_remaining(f, f->wr_idx, f->rd_idx);
1000333e:	89c4      	ldrh	r4, [r0, #14]
10003340:	8a01      	ldrh	r1, [r0, #16]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
10003342:	8883      	ldrh	r3, [r0, #4]
  uint16_t cnt = wAbs-rAbs;
10003344:	1a62      	subs	r2, r4, r1
10003346:	b292      	uxth	r2, r2
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
10003348:	428c      	cmp	r4, r1
1000334a:	d202      	bcs.n	10003352 <tu_fifo_remaining+0x16>
1000334c:	8940      	ldrh	r0, [r0, #10]
1000334e:	1a12      	subs	r2, r2, r0
10003350:	b292      	uxth	r2, r2
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
10003352:	1a98      	subs	r0, r3, r2
  return _tu_fifo_remaining(f, f->wr_idx, f->rd_idx);
10003354:	b280      	uxth	r0, r0
}
10003356:	bd10      	pop	{r4, pc}

10003358 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
10003358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000335a:	0004      	movs	r4, r0
  if (f->mutex)
1000335c:	6940      	ldr	r0, [r0, #20]
{
1000335e:	000e      	movs	r6, r1
  if (f->mutex)
10003360:	2800      	cmp	r0, #0
10003362:	d003      	beq.n	1000336c <tu_fifo_read+0x14>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10003364:	2101      	movs	r1, #1
10003366:	4249      	negs	r1, r1
10003368:	f003 fd2a 	bl	10006dc0 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);                                          // TODO: Here we may distinguish for read and write pointer mutexes!

  // Peek the data
  bool ret = _tu_fifo_peek_at(f, 0, buffer, f->wr_idx, f->rd_idx);    // f->rd_idx might get modified in case of an overflow so we can not use a local variable
1000336c:	89e1      	ldrh	r1, [r4, #14]
1000336e:	8a22      	ldrh	r2, [r4, #16]
10003370:	b28f      	uxth	r7, r1
  uint16_t cnt = wAbs-rAbs;
10003372:	1a8d      	subs	r5, r1, r2
  bool ret = _tu_fifo_peek_at(f, 0, buffer, f->wr_idx, f->rd_idx);    // f->rd_idx might get modified in case of an overflow so we can not use a local variable
10003374:	b293      	uxth	r3, r2
  uint16_t cnt = wAbs-rAbs;
10003376:	b2ad      	uxth	r5, r5
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
10003378:	4291      	cmp	r1, r2
1000337a:	d202      	bcs.n	10003382 <tu_fifo_read+0x2a>
1000337c:	8962      	ldrh	r2, [r4, #10]
1000337e:	1aad      	subs	r5, r5, r2
10003380:	b2ad      	uxth	r5, r5
  if (cnt > f->depth)
10003382:	88a2      	ldrh	r2, [r4, #4]
  if ((p < p - offset) || (p - offset > f->max_pointer_idx))
10003384:	89a1      	ldrh	r1, [r4, #12]
  if (cnt > f->depth)
10003386:	42aa      	cmp	r2, r5
10003388:	d205      	bcs.n	10003396 <tu_fifo_read+0x3e>
  if ((p < p - offset) || (p - offset > f->max_pointer_idx))
1000338a:	1ab8      	subs	r0, r7, r2
1000338c:	4288      	cmp	r0, r1
1000338e:	dc2b      	bgt.n	100033e8 <tu_fifo_read+0x90>
    p -= offset;
10003390:	b280      	uxth	r0, r0
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
10003392:	0015      	movs	r5, r2
10003394:	8220      	strh	r0, [r4, #16]
  if (cnt == 0 || offset >= cnt) return false;
10003396:	2d00      	cmp	r5, #0
10003398:	d02e      	beq.n	100033f8 <tu_fifo_read+0xa0>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
1000339a:	428b      	cmp	r3, r1
1000339c:	d906      	bls.n	100033ac <tu_fifo_read+0x54>
    p = (p + offset) + f->non_used_index_space;
1000339e:	8961      	ldrh	r1, [r4, #10]
100033a0:	185b      	adds	r3, r3, r1
100033a2:	b29b      	uxth	r3, r3
  while ( idx >= depth) idx -= depth;
100033a4:	429a      	cmp	r2, r3
100033a6:	d803      	bhi.n	100033b0 <tu_fifo_read+0x58>
100033a8:	1a9b      	subs	r3, r3, r2
100033aa:	b29b      	uxth	r3, r3
100033ac:	429a      	cmp	r2, r3
100033ae:	d9fb      	bls.n	100033a8 <tu_fifo_read+0x50>
  memcpy(p_buffer, f->buffer + (rRel * f->item_size), f->item_size);
100033b0:	88e2      	ldrh	r2, [r4, #6]
100033b2:	6821      	ldr	r1, [r4, #0]
100033b4:	4353      	muls	r3, r2
100033b6:	0030      	movs	r0, r6
100033b8:	18c9      	adds	r1, r1, r3
100033ba:	f7fd fac1 	bl	10000940 <__wrap___aeabi_memcpy>
  return true;
100033be:	2501      	movs	r5, #1
100033c0:	2001      	movs	r0, #1
100033c2:	2601      	movs	r6, #1
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
100033c4:	89a1      	ldrh	r1, [r4, #12]

  // Advance pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
100033c6:	8a22      	ldrh	r2, [r4, #16]
100033c8:	b293      	uxth	r3, r2
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
100033ca:	1812      	adds	r2, r2, r0
100033cc:	428a      	cmp	r2, r1
100033ce:	dd10      	ble.n	100033f2 <tu_fifo_read+0x9a>
    p = (p + offset) + f->non_used_index_space;
100033d0:	8962      	ldrh	r2, [r4, #10]
100033d2:	189b      	adds	r3, r3, r2
100033d4:	18ed      	adds	r5, r5, r3
100033d6:	b2ad      	uxth	r5, r5
  if (f->mutex)
100033d8:	6960      	ldr	r0, [r4, #20]
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
100033da:	8225      	strh	r5, [r4, #16]
  if (f->mutex)
100033dc:	2800      	cmp	r0, #0
100033de:	d001      	beq.n	100033e4 <tu_fifo_read+0x8c>
    mutex_exit(mutex_hdl);
100033e0:	f003 fcce 	bl	10006d80 <__mutex_exit_veneer>

  tu_fifo_unlock(f);
  return ret;
}
100033e4:	0030      	movs	r0, r6
100033e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    p = (p - offset) - f->non_used_index_space;
100033e8:	8960      	ldrh	r0, [r4, #10]
100033ea:	1810      	adds	r0, r2, r0
100033ec:	1a38      	subs	r0, r7, r0
100033ee:	b280      	uxth	r0, r0
100033f0:	e7cf      	b.n	10003392 <tu_fifo_read+0x3a>
    p += offset;
100033f2:	195d      	adds	r5, r3, r5
100033f4:	b2ad      	uxth	r5, r5
100033f6:	e7ef      	b.n	100033d8 <tu_fifo_read+0x80>
100033f8:	2000      	movs	r0, #0
  if (cnt == 0 || offset >= cnt) return false;
100033fa:	2600      	movs	r6, #0
100033fc:	e7e3      	b.n	100033c6 <tu_fifo_read+0x6e>
100033fe:	46c0      	nop			; (mov r8, r8)

10003400 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t count)
{
10003400:	b5f0      	push	{r4, r5, r6, r7, lr}
10003402:	46c6      	mov	lr, r8
10003404:	0004      	movs	r4, r0
  if (f->mutex)
10003406:	6940      	ldr	r0, [r0, #20]
{
10003408:	4688      	mov	r8, r1
1000340a:	0017      	movs	r7, r2
1000340c:	b500      	push	{lr}
  if (f->mutex)
1000340e:	2800      	cmp	r0, #0
10003410:	d003      	beq.n	1000341a <tu_fifo_read_n+0x1a>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10003412:	2101      	movs	r1, #1
10003414:	4249      	negs	r1, r1
10003416:	f003 fcd3 	bl	10006dc0 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);                                          // TODO: Here we may distinguish for read and write pointer mutexes!

  // Peek the data
  count = _tu_fifo_peek_at_n(f, 0, buffer, count, f->wr_idx, f->rd_idx);        // f->rd_idx might get modified in case of an overflow so we can not use a local variable
1000341a:	89e0      	ldrh	r0, [r4, #14]
1000341c:	8a21      	ldrh	r1, [r4, #16]
1000341e:	b282      	uxth	r2, r0
  uint16_t cnt = wAbs-rAbs;
10003420:	1a46      	subs	r6, r0, r1
  count = _tu_fifo_peek_at_n(f, 0, buffer, count, f->wr_idx, f->rd_idx);        // f->rd_idx might get modified in case of an overflow so we can not use a local variable
10003422:	b28b      	uxth	r3, r1
  uint16_t cnt = wAbs-rAbs;
10003424:	b2b6      	uxth	r6, r6
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
10003426:	4288      	cmp	r0, r1
10003428:	d202      	bcs.n	10003430 <tu_fifo_read_n+0x30>
1000342a:	8961      	ldrh	r1, [r4, #10]
1000342c:	1a76      	subs	r6, r6, r1
1000342e:	b2b6      	uxth	r6, r6
  if (cnt > f->depth)
10003430:	88a5      	ldrh	r5, [r4, #4]
  if ((p < p - offset) || (p - offset > f->max_pointer_idx))
10003432:	89a0      	ldrh	r0, [r4, #12]
  if (cnt > f->depth)
10003434:	42b5      	cmp	r5, r6
10003436:	d207      	bcs.n	10003448 <tu_fifo_read_n+0x48>
  if ((p < p - offset) || (p - offset > f->max_pointer_idx))
10003438:	1b53      	subs	r3, r2, r5
1000343a:	4283      	cmp	r3, r0
1000343c:	dc2c      	bgt.n	10003498 <tu_fifo_read_n+0x98>
    p -= offset;
1000343e:	b29b      	uxth	r3, r3
    rAbs = f->rd_idx;
10003440:	002e      	movs	r6, r5
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
10003442:	8223      	strh	r3, [r4, #16]
    rAbs = f->rd_idx;
10003444:	8a23      	ldrh	r3, [r4, #16]
10003446:	b29b      	uxth	r3, r3
  if (cnt == 0 || offset >= cnt) return 0;
10003448:	2e00      	cmp	r6, #0
1000344a:	d02c      	beq.n	100034a6 <tu_fifo_read_n+0xa6>
  if (cnt < n) {
1000344c:	1c3a      	adds	r2, r7, #0
1000344e:	42b7      	cmp	r7, r6
10003450:	d827      	bhi.n	100034a2 <tu_fifo_read_n+0xa2>
10003452:	b296      	uxth	r6, r2
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10003454:	4283      	cmp	r3, r0
10003456:	d902      	bls.n	1000345e <tu_fifo_read_n+0x5e>
    p = (p + offset) + f->non_used_index_space;
10003458:	8961      	ldrh	r1, [r4, #10]
1000345a:	185b      	adds	r3, r3, r1
1000345c:	b29b      	uxth	r3, r3
  while ( idx >= depth) idx -= depth;
1000345e:	429d      	cmp	r5, r3
10003460:	d803      	bhi.n	1000346a <tu_fifo_read_n+0x6a>
10003462:	1b5b      	subs	r3, r3, r5
10003464:	b29b      	uxth	r3, r3
10003466:	429d      	cmp	r5, r3
10003468:	d9fb      	bls.n	10003462 <tu_fifo_read_n+0x62>
  if(rRel + n <= f->depth)       // Linear mode only
1000346a:	199a      	adds	r2, r3, r6
1000346c:	0037      	movs	r7, r6
    memcpy(p_buffer, f->buffer + (rRel * f->item_size), n*f->item_size);
1000346e:	88e1      	ldrh	r1, [r4, #6]
  if(rRel + n <= f->depth)       // Linear mode only
10003470:	42aa      	cmp	r2, r5
10003472:	dc2c      	bgt.n	100034ce <tu_fifo_read_n+0xce>
    memcpy(p_buffer, f->buffer + (rRel * f->item_size), n*f->item_size);
10003474:	000a      	movs	r2, r1
10003476:	4359      	muls	r1, r3
10003478:	6823      	ldr	r3, [r4, #0]
1000347a:	4372      	muls	r2, r6
1000347c:	469c      	mov	ip, r3
1000347e:	4640      	mov	r0, r8
10003480:	4461      	add	r1, ip
10003482:	f7fd fa5d 	bl	10000940 <__wrap___aeabi_memcpy>

  // Advance read pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, count);
10003486:	8a22      	ldrh	r2, [r4, #16]
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10003488:	89a0      	ldrh	r0, [r4, #12]
  f->rd_idx = advance_pointer(f, f->rd_idx, count);
1000348a:	b293      	uxth	r3, r2
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
1000348c:	19d2      	adds	r2, r2, r7
1000348e:	4282      	cmp	r2, r0
10003490:	dc0f      	bgt.n	100034b2 <tu_fifo_read_n+0xb2>
    p += offset;
10003492:	199b      	adds	r3, r3, r6
10003494:	b29b      	uxth	r3, r3
10003496:	e010      	b.n	100034ba <tu_fifo_read_n+0xba>
    p = (p - offset) - f->non_used_index_space;
10003498:	8963      	ldrh	r3, [r4, #10]
1000349a:	18eb      	adds	r3, r5, r3
1000349c:	1ad3      	subs	r3, r2, r3
1000349e:	b29b      	uxth	r3, r3
100034a0:	e7ce      	b.n	10003440 <tu_fifo_read_n+0x40>
100034a2:	1c32      	adds	r2, r6, #0
100034a4:	e7d5      	b.n	10003452 <tu_fifo_read_n+0x52>
100034a6:	2700      	movs	r7, #0
  f->rd_idx = advance_pointer(f, f->rd_idx, count);
100034a8:	8a22      	ldrh	r2, [r4, #16]
100034aa:	b293      	uxth	r3, r2
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
100034ac:	19d2      	adds	r2, r2, r7
100034ae:	4282      	cmp	r2, r0
100034b0:	ddef      	ble.n	10003492 <tu_fifo_read_n+0x92>
    p = (p + offset) + f->non_used_index_space;
100034b2:	8962      	ldrh	r2, [r4, #10]
100034b4:	189b      	adds	r3, r3, r2
100034b6:	18f3      	adds	r3, r6, r3
100034b8:	b29b      	uxth	r3, r3
  if (f->mutex)
100034ba:	6960      	ldr	r0, [r4, #20]
  f->rd_idx = advance_pointer(f, f->rd_idx, count);
100034bc:	8223      	strh	r3, [r4, #16]
  if (f->mutex)
100034be:	2800      	cmp	r0, #0
100034c0:	d001      	beq.n	100034c6 <tu_fifo_read_n+0xc6>
    mutex_exit(mutex_hdl);
100034c2:	f003 fc5d 	bl	10006d80 <__mutex_exit_veneer>

  tu_fifo_unlock(f);
  return count;
}
100034c6:	0030      	movs	r0, r6
100034c8:	bc80      	pop	{r7}
100034ca:	46b8      	mov	r8, r7
100034cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint16_t nLin = f->depth - rRel;
100034ce:	1aed      	subs	r5, r5, r3
    memcpy(p_buffer, f->buffer + (rRel * f->item_size), nLin*f->item_size);
100034d0:	b2ad      	uxth	r5, r5
100034d2:	002a      	movs	r2, r5
100034d4:	434a      	muls	r2, r1
100034d6:	4359      	muls	r1, r3
100034d8:	6823      	ldr	r3, [r4, #0]
100034da:	4640      	mov	r0, r8
100034dc:	469c      	mov	ip, r3
100034de:	4461      	add	r1, ip
100034e0:	f7fd fa2e 	bl	10000940 <__wrap___aeabi_memcpy>
    memcpy(p_buffer + nLin*f->item_size, f->buffer, (n - nLin) * f->item_size);
100034e4:	88e3      	ldrh	r3, [r4, #6]
100034e6:	1b72      	subs	r2, r6, r5
100034e8:	0018      	movs	r0, r3
100034ea:	4368      	muls	r0, r5
100034ec:	435a      	muls	r2, r3
100034ee:	6821      	ldr	r1, [r4, #0]
100034f0:	4440      	add	r0, r8
100034f2:	f7fd fa25 	bl	10000940 <__wrap___aeabi_memcpy>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
100034f6:	89a0      	ldrh	r0, [r4, #12]
100034f8:	e7d6      	b.n	100034a8 <tu_fifo_read_n+0xa8>
100034fa:	46c0      	nop			; (mov r8, r8)

100034fc <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
100034fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100034fe:	0004      	movs	r4, r0
  if (f->mutex)
10003500:	6940      	ldr	r0, [r0, #20]
{
10003502:	000e      	movs	r6, r1
  if (f->mutex)
10003504:	2800      	cmp	r0, #0
10003506:	d003      	beq.n	10003510 <tu_fifo_write+0x14>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10003508:	2101      	movs	r1, #1
1000350a:	4249      	negs	r1, r1
1000350c:	f003 fc58 	bl	10006dc0 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);

  uint16_t w = f->wr_idx;
10003510:	89e2      	ldrh	r2, [r4, #14]

  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable ) return false;
10003512:	8a21      	ldrh	r1, [r4, #16]
  uint16_t w = f->wr_idx;
10003514:	b295      	uxth	r5, r2
  uint16_t cnt = wAbs-rAbs;
10003516:	1a53      	subs	r3, r2, r1
10003518:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
1000351a:	4291      	cmp	r1, r2
1000351c:	d902      	bls.n	10003524 <tu_fifo_write+0x28>
1000351e:	8962      	ldrh	r2, [r4, #10]
10003520:	1a9b      	subs	r3, r3, r2
10003522:	b29b      	uxth	r3, r3
  return (_tu_fifo_count(f, wAbs, rAbs) == f->depth);
10003524:	88a2      	ldrh	r2, [r4, #4]
  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable ) return false;
10003526:	429a      	cmp	r2, r3
10003528:	d026      	beq.n	10003578 <tu_fifo_write+0x7c>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
1000352a:	89a1      	ldrh	r1, [r4, #12]
1000352c:	002b      	movs	r3, r5
1000352e:	42a9      	cmp	r1, r5
10003530:	d206      	bcs.n	10003540 <tu_fifo_write+0x44>
    p = (p + offset) + f->non_used_index_space;
10003532:	8963      	ldrh	r3, [r4, #10]
10003534:	18eb      	adds	r3, r5, r3
10003536:	b29b      	uxth	r3, r3
  while ( idx >= depth) idx -= depth;
10003538:	429a      	cmp	r2, r3
1000353a:	d803      	bhi.n	10003544 <tu_fifo_write+0x48>
1000353c:	1a9b      	subs	r3, r3, r2
1000353e:	b29b      	uxth	r3, r3
10003540:	429a      	cmp	r2, r3
10003542:	d9fb      	bls.n	1000353c <tu_fifo_write+0x40>
  memcpy(f->buffer + (wRel * f->item_size), data, f->item_size);
10003544:	88e2      	ldrh	r2, [r4, #6]
10003546:	6821      	ldr	r1, [r4, #0]
10003548:	4353      	muls	r3, r2
1000354a:	18c8      	adds	r0, r1, r3
1000354c:	0031      	movs	r1, r6
1000354e:	f7fd f9f7 	bl	10000940 <__wrap___aeabi_memcpy>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10003552:	89a3      	ldrh	r3, [r4, #12]
10003554:	42ab      	cmp	r3, r5
10003556:	d90a      	bls.n	1000356e <tu_fifo_write+0x72>
    p += offset;
10003558:	3501      	adds	r5, #1
1000355a:	b2ad      	uxth	r5, r5
  if (f->mutex)
1000355c:	6960      	ldr	r0, [r4, #20]
  // Advance pointer
  f->wr_idx = advance_pointer(f, w, 1);

  tu_fifo_unlock(f);

  return true;
1000355e:	2701      	movs	r7, #1
  f->wr_idx = advance_pointer(f, w, 1);
10003560:	81e5      	strh	r5, [r4, #14]
  if (f->mutex)
10003562:	2800      	cmp	r0, #0
10003564:	d001      	beq.n	1000356a <tu_fifo_write+0x6e>
    mutex_exit(mutex_hdl);
10003566:	f003 fc0b 	bl	10006d80 <__mutex_exit_veneer>
}
1000356a:	0038      	movs	r0, r7
1000356c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    p = (p + offset) + f->non_used_index_space;
1000356e:	8963      	ldrh	r3, [r4, #10]
10003570:	18ed      	adds	r5, r5, r3
10003572:	3501      	adds	r5, #1
10003574:	b2ad      	uxth	r5, r5
10003576:	e7f1      	b.n	1000355c <tu_fifo_write+0x60>
  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable ) return false;
10003578:	7a27      	ldrb	r7, [r4, #8]
1000357a:	2f00      	cmp	r7, #0
1000357c:	d1d5      	bne.n	1000352a <tu_fifo_write+0x2e>
1000357e:	e7f4      	b.n	1000356a <tu_fifo_write+0x6e>

10003580 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t count)
{
10003580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003582:	4647      	mov	r7, r8
10003584:	46ce      	mov	lr, r9
10003586:	0004      	movs	r4, r0
10003588:	b580      	push	{r7, lr}
1000358a:	0015      	movs	r5, r2
1000358c:	000f      	movs	r7, r1
  if ( count == 0 ) return 0;
1000358e:	2a00      	cmp	r2, #0
10003590:	d052      	beq.n	10003638 <tu_fifo_write_n+0xb8>
  if (f->mutex)
10003592:	6940      	ldr	r0, [r0, #20]
10003594:	2800      	cmp	r0, #0
10003596:	d003      	beq.n	100035a0 <tu_fifo_write_n+0x20>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10003598:	2101      	movs	r1, #1
1000359a:	4249      	negs	r1, r1
1000359c:	f003 fc10 	bl	10006dc0 <__mutex_enter_timeout_ms_veneer>

  tu_fifo_lock(f);

  uint16_t w = f->wr_idx, r = f->rd_idx;
100035a0:	89e6      	ldrh	r6, [r4, #14]
  uint8_t const* buf8 = (uint8_t const*) data;

  if (!f->overwritable)
100035a2:	7a23      	ldrb	r3, [r4, #8]
  uint16_t w = f->wr_idx, r = f->rd_idx;
100035a4:	8a20      	ldrh	r0, [r4, #16]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
100035a6:	88a1      	ldrh	r1, [r4, #4]
  uint16_t w = f->wr_idx, r = f->rd_idx;
100035a8:	b2b6      	uxth	r6, r6
100035aa:	b280      	uxth	r0, r0
  if (!f->overwritable)
100035ac:	2b00      	cmp	r3, #0
100035ae:	d138      	bne.n	10003622 <tu_fifo_write_n+0xa2>
  uint16_t cnt = wAbs-rAbs;
100035b0:	1a33      	subs	r3, r6, r0
100035b2:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
100035b4:	4286      	cmp	r6, r0
100035b6:	d202      	bcs.n	100035be <tu_fifo_write_n+0x3e>
100035b8:	8962      	ldrh	r2, [r4, #10]
100035ba:	1a9b      	subs	r3, r3, r2
100035bc:	b29b      	uxth	r3, r3
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
100035be:	1acb      	subs	r3, r1, r3
static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
100035c0:	1c1a      	adds	r2, r3, #0
100035c2:	b29b      	uxth	r3, r3
100035c4:	42ab      	cmp	r3, r5
100035c6:	d852      	bhi.n	1000366e <tu_fifo_write_n+0xee>
100035c8:	b293      	uxth	r3, r2
100035ca:	4698      	mov	r8, r3
  if(wRel + n <= f->depth)  // Linear mode only
100035cc:	001d      	movs	r5, r3
    count = tu_min16(count, _tu_fifo_remaining(f, w, r));
  }
  else if (count > f->depth)
  {
    // Only copy last part
    buf8 = buf8 + (count - f->depth) * f->item_size;
100035ce:	88e2      	ldrh	r2, [r4, #6]
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
100035d0:	89a0      	ldrh	r0, [r4, #12]
  uint16_t w = f->wr_idx, r = f->rd_idx;
100035d2:	0033      	movs	r3, r6
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
100035d4:	4286      	cmp	r6, r0
100035d6:	dd05      	ble.n	100035e4 <tu_fifo_write_n+0x64>
    p = (p + offset) + f->non_used_index_space;
100035d8:	8963      	ldrh	r3, [r4, #10]
100035da:	18f3      	adds	r3, r6, r3
100035dc:	b29b      	uxth	r3, r3
  while ( idx >= depth) idx -= depth;
100035de:	e001      	b.n	100035e4 <tu_fifo_write_n+0x64>
100035e0:	1a5b      	subs	r3, r3, r1
100035e2:	b29b      	uxth	r3, r3
100035e4:	428b      	cmp	r3, r1
100035e6:	d2fb      	bcs.n	100035e0 <tu_fifo_write_n+0x60>
  if(wRel + n <= f->depth)  // Linear mode only
100035e8:	1958      	adds	r0, r3, r5
100035ea:	4288      	cmp	r0, r1
100035ec:	dc2a      	bgt.n	10003644 <tu_fifo_write_n+0xc4>
    memcpy(f->buffer + (wRel * f->item_size), data, n*f->item_size);
100035ee:	4353      	muls	r3, r2
100035f0:	6821      	ldr	r1, [r4, #0]
100035f2:	436a      	muls	r2, r5
100035f4:	18c8      	adds	r0, r1, r3
100035f6:	0039      	movs	r1, r7
100035f8:	f7fd f9a2 	bl	10000940 <__wrap___aeabi_memcpy>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
100035fc:	89a3      	ldrh	r3, [r4, #12]
100035fe:	1975      	adds	r5, r6, r5
10003600:	429d      	cmp	r5, r3
10003602:	dd1c      	ble.n	1000363e <tu_fifo_write_n+0xbe>
    p = (p + offset) + f->non_used_index_space;
10003604:	8963      	ldrh	r3, [r4, #10]
10003606:	18f6      	adds	r6, r6, r3
10003608:	4446      	add	r6, r8
1000360a:	b2b6      	uxth	r6, r6
  if (f->mutex)
1000360c:	6960      	ldr	r0, [r4, #20]

  // Write data
  _ff_push_n(f, buf8, count, wRel);

  // Advance pointer
  f->wr_idx = advance_pointer(f, w, count);
1000360e:	81e6      	strh	r6, [r4, #14]
  if (f->mutex)
10003610:	2800      	cmp	r0, #0
10003612:	d001      	beq.n	10003618 <tu_fifo_write_n+0x98>
    mutex_exit(mutex_hdl);
10003614:	f003 fbb4 	bl	10006d80 <__mutex_exit_veneer>

  tu_fifo_unlock(f);

  return count;
}
10003618:	4640      	mov	r0, r8
1000361a:	bcc0      	pop	{r6, r7}
1000361c:	46b9      	mov	r9, r7
1000361e:	46b0      	mov	r8, r6
10003620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(wRel + n <= f->depth)  // Linear mode only
10003622:	46a8      	mov	r8, r5
    buf8 = buf8 + (count - f->depth) * f->item_size;
10003624:	88e2      	ldrh	r2, [r4, #6]
  else if (count > f->depth)
10003626:	42a9      	cmp	r1, r5
10003628:	d2d2      	bcs.n	100035d0 <tu_fifo_write_n+0x50>
    buf8 = buf8 + (count - f->depth) * f->item_size;
1000362a:	1a6d      	subs	r5, r5, r1
1000362c:	4355      	muls	r5, r2
    f->wr_idx = r;
1000362e:	4688      	mov	r8, r1
    buf8 = buf8 + (count - f->depth) * f->item_size;
10003630:	197f      	adds	r7, r7, r5
    f->wr_idx = r;
10003632:	81e0      	strh	r0, [r4, #14]
10003634:	000d      	movs	r5, r1
10003636:	e7cb      	b.n	100035d0 <tu_fifo_write_n+0x50>
  if ( count == 0 ) return 0;
10003638:	2300      	movs	r3, #0
1000363a:	4698      	mov	r8, r3
1000363c:	e7ec      	b.n	10003618 <tu_fifo_write_n+0x98>
    p += offset;
1000363e:	4446      	add	r6, r8
10003640:	b2b6      	uxth	r6, r6
10003642:	e7e3      	b.n	1000360c <tu_fifo_write_n+0x8c>
    uint16_t nLin = f->depth - wRel;
10003644:	1ac9      	subs	r1, r1, r3
    memcpy(f->buffer + (wRel * f->item_size), data, nLin*f->item_size);
10003646:	b289      	uxth	r1, r1
10003648:	4689      	mov	r9, r1
1000364a:	4353      	muls	r3, r2
1000364c:	6821      	ldr	r1, [r4, #0]
1000364e:	18c8      	adds	r0, r1, r3
10003650:	464b      	mov	r3, r9
10003652:	0039      	movs	r1, r7
10003654:	435a      	muls	r2, r3
10003656:	f7fd f973 	bl	10000940 <__wrap___aeabi_memcpy>
    memcpy(f->buffer, data + nLin*f->item_size, (n - nLin) * f->item_size);
1000365a:	464b      	mov	r3, r9
1000365c:	88e1      	ldrh	r1, [r4, #6]
1000365e:	1aea      	subs	r2, r5, r3
10003660:	434a      	muls	r2, r1
10003662:	4359      	muls	r1, r3
10003664:	6820      	ldr	r0, [r4, #0]
10003666:	1879      	adds	r1, r7, r1
10003668:	f7fd f96a 	bl	10000940 <__wrap___aeabi_memcpy>
1000366c:	e7c6      	b.n	100035fc <tu_fifo_write_n+0x7c>
1000366e:	1c2a      	adds	r2, r5, #0
10003670:	b293      	uxth	r3, r2
10003672:	4698      	mov	r8, r3
  if(wRel + n <= f->depth)  // Linear mode only
10003674:	001d      	movs	r5, r3
    buf8 = buf8 + (count - f->depth) * f->item_size;
10003676:	88e2      	ldrh	r2, [r4, #6]
10003678:	e7aa      	b.n	100035d0 <tu_fifo_write_n+0x50>
1000367a:	46c0      	nop			; (mov r8, r8)

1000367c <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
1000367c:	b510      	push	{r4, lr}
1000367e:	0004      	movs	r4, r0
  if (f->mutex)
10003680:	6940      	ldr	r0, [r0, #20]
10003682:	2800      	cmp	r0, #0
10003684:	d00d      	beq.n	100036a2 <tu_fifo_clear+0x26>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10003686:	2101      	movs	r1, #1
10003688:	4249      	negs	r1, r1
1000368a:	f003 fb99 	bl	10006dc0 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);
  f->rd_idx = f->wr_idx = 0;
1000368e:	2300      	movs	r3, #0
  if (f->mutex)
10003690:	6960      	ldr	r0, [r4, #20]
  f->rd_idx = f->wr_idx = 0;
10003692:	81e3      	strh	r3, [r4, #14]
10003694:	8223      	strh	r3, [r4, #16]
  if (f->mutex)
10003696:	2800      	cmp	r0, #0
10003698:	d001      	beq.n	1000369e <tu_fifo_clear+0x22>
    mutex_exit(mutex_hdl);
1000369a:	f003 fb71 	bl	10006d80 <__mutex_exit_veneer>
  tu_fifo_unlock(f);

  return true;
}
1000369e:	2001      	movs	r0, #1
100036a0:	bd10      	pop	{r4, pc}
  f->rd_idx = f->wr_idx = 0;
100036a2:	81e0      	strh	r0, [r4, #14]
100036a4:	8220      	strh	r0, [r4, #16]
  return true;
100036a6:	e7fa      	b.n	1000369e <tu_fifo_clear+0x22>

100036a8 <tud_mounted>:
  return (tusb_speed_t) _usbd_dev.speed;
}

bool tud_mounted(void)
{
  return _usbd_dev.cfg_num ? 1 : 0;
100036a8:	4b02      	ldr	r3, [pc, #8]	; (100036b4 <tud_mounted+0xc>)
100036aa:	7858      	ldrb	r0, [r3, #1]
100036ac:	1e43      	subs	r3, r0, #1
100036ae:	4198      	sbcs	r0, r3
100036b0:	b2c0      	uxtb	r0, r0
}
100036b2:	4770      	bx	lr
100036b4:	20023244 	.word	0x20023244

100036b8 <tud_suspended>:

bool tud_suspended(void)
{
  return _usbd_dev.suspended;
100036b8:	4b02      	ldr	r3, [pc, #8]	; (100036c4 <tud_suspended+0xc>)
100036ba:	7818      	ldrb	r0, [r3, #0]
100036bc:	0740      	lsls	r0, r0, #29
100036be:	0fc0      	lsrs	r0, r0, #31
}
100036c0:	4770      	bx	lr
100036c2:	46c0      	nop			; (mov r8, r8)
100036c4:	20023244 	.word	0x20023244

100036c8 <tud_init>:

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_init (void)
{
100036c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  TU_LOG2("USBD init\r\n");

  tu_varclr(&_usbd_dev);
100036ca:	2237      	movs	r2, #55	; 0x37
100036cc:	2100      	movs	r1, #0
100036ce:	4821      	ldr	r0, [pc, #132]	; (10003754 <tud_init+0x8c>)
100036d0:	f7fd f930 	bl	10000934 <__wrap_memset>
    mutex_init(mdef);
100036d4:	4c20      	ldr	r4, [pc, #128]	; (10003758 <tud_init+0x90>)
100036d6:	0020      	movs	r0, r4
100036d8:	f7fd ff1e 	bl	10001518 <mutex_init>

#if CFG_TUSB_OS != OPT_OS_NONE
  // Init device mutex
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
100036dc:	4b1f      	ldr	r3, [pc, #124]	; (1000375c <tud_init+0x94>)
100036de:	601c      	str	r4, [r3, #0]
    critical_section_exit(&qhdl->critsec);
}

static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
  critical_section_init(&qdef->critsec);
100036e0:	4c1f      	ldr	r4, [pc, #124]	; (10003760 <tud_init+0x98>)
100036e2:	0020      	movs	r0, r4
100036e4:	3018      	adds	r0, #24
100036e6:	f7fd fbfb 	bl	10000ee0 <critical_section_init>
  tu_fifo_clear(&qdef->ff);
100036ea:	0020      	movs	r0, r4
100036ec:	f7ff ffc6 	bl	1000367c <tu_fifo_clear>
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
100036f0:	4b1c      	ldr	r3, [pc, #112]	; (10003764 <tud_init+0x9c>)
  TU_ASSERT(_usbd_q);

  // Get application driver if available
  if ( usbd_app_driver_get_cb )
100036f2:	4e1d      	ldr	r6, [pc, #116]	; (10003768 <tud_init+0xa0>)
  {
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
100036f4:	4d1d      	ldr	r5, [pc, #116]	; (1000376c <tud_init+0xa4>)
  _usbd_q = osal_queue_create(&_usbd_qdef);
100036f6:	601c      	str	r4, [r3, #0]
  if ( usbd_app_driver_get_cb )
100036f8:	2e00      	cmp	r6, #0
100036fa:	d004      	beq.n	10003706 <tud_init+0x3e>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
100036fc:	0028      	movs	r0, r5
100036fe:	e000      	b.n	10003702 <tud_init+0x3a>
10003700:	bf00      	nop
10003702:	4b1b      	ldr	r3, [pc, #108]	; (10003770 <tud_init+0xa8>)
10003704:	6018      	str	r0, [r3, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
10003706:	2400      	movs	r4, #0
10003708:	782b      	ldrb	r3, [r5, #0]
1000370a:	2e00      	cmp	r6, #0
1000370c:	d019      	beq.n	10003742 <tud_init+0x7a>
1000370e:	4e19      	ldr	r6, [pc, #100]	; (10003774 <tud_init+0xac>)
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003710:	4f17      	ldr	r7, [pc, #92]	; (10003770 <tud_init+0xa8>)
10003712:	429c      	cmp	r4, r3
10003714:	d30f      	bcc.n	10003736 <tud_init+0x6e>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10003716:	d119      	bne.n	1000374c <tud_init+0x84>
10003718:	0033      	movs	r3, r6
  {
    usbd_class_driver_t const * driver = get_driver(i);
    TU_LOG2("%s init\r\n", driver->name);
    driver->init();
1000371a:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
1000371c:	3401      	adds	r4, #1
1000371e:	782b      	ldrb	r3, [r5, #0]
10003720:	b2e4      	uxtb	r4, r4
10003722:	42a3      	cmp	r3, r4
10003724:	d2f5      	bcs.n	10003712 <tud_init+0x4a>
  }

  // Init device controller driver
  dcd_init(TUD_OPT_RHPORT);
10003726:	2000      	movs	r0, #0
10003728:	f000 ff72 	bl	10004610 <dcd_init>
  dcd_int_enable(TUD_OPT_RHPORT);
1000372c:	2000      	movs	r0, #0
1000372e:	f000 ff49 	bl	100045c4 <dcd_int_enable>

  return true;
}
10003732:	2001      	movs	r0, #1
10003734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    driver->init();
10003736:	00e3      	lsls	r3, r4, #3
10003738:	683a      	ldr	r2, [r7, #0]
1000373a:	1b1b      	subs	r3, r3, r4
1000373c:	009b      	lsls	r3, r3, #2
1000373e:	589b      	ldr	r3, [r3, r2]
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003740:	e7eb      	b.n	1000371a <tud_init+0x52>
    driver->init();
10003742:	f7ff fbef 	bl	10002f24 <cdcd_init>
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
10003746:	782b      	ldrb	r3, [r5, #0]
10003748:	2b00      	cmp	r3, #0
1000374a:	d0ec      	beq.n	10003726 <tud_init+0x5e>
    driver->init();
1000374c:	2300      	movs	r3, #0
1000374e:	681b      	ldr	r3, [r3, #0]
10003750:	deff      	udf	#255	; 0xff
10003752:	46c0      	nop			; (mov r8, r8)
10003754:	20023244 	.word	0x20023244
10003758:	200231fc 	.word	0x200231fc
1000375c:	2002327c 	.word	0x2002327c
10003760:	20002730 	.word	0x20002730
10003764:	20023280 	.word	0x20023280
10003768:	00000000 	.word	0x00000000
1000376c:	20023b85 	.word	0x20023b85
10003770:	20022f14 	.word	0x20022f14
10003774:	10002f25 	.word	0x10002f25

10003778 <tud_task>:
      }
    }
    @endcode
 */
void tud_task (void)
{
10003778:	b5f0      	push	{r4, r5, r6, r7, lr}
1000377a:	46de      	mov	lr, fp
1000377c:	4657      	mov	r7, sl
1000377e:	464e      	mov	r6, r9
10003780:	4645      	mov	r5, r8
10003782:	b5e0      	push	{r5, r6, r7, lr}
10003784:	b08b      	sub	sp, #44	; 0x2c
  // Skip if stack is not initialized
  if ( !tusb_inited() ) return;
10003786:	f001 fa05 	bl	10004b94 <tusb_inited>
1000378a:	2800      	cmp	r0, #0
1000378c:	d100      	bne.n	10003790 <tud_task+0x18>
1000378e:	e123      	b.n	100039d8 <tud_task+0x260>
10003790:	4bb3      	ldr	r3, [pc, #716]	; (10003a60 <tud_task+0x2e8>)
10003792:	af07      	add	r7, sp, #28
10003794:	469a      	mov	sl, r3
#if CFG_TUSB_DEBUG >= 2
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG2("\r\n"); // extra line for setup
    TU_LOG2("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch ( event.event_id )
10003796:	4bb3      	ldr	r3, [pc, #716]	; (10003a64 <tud_task+0x2ec>)
10003798:	469b      	mov	fp, r3
    if ( !osal_queue_receive(_usbd_q, &event) ) return;
1000379a:	4653      	mov	r3, sl
1000379c:	681d      	ldr	r5, [r3, #0]
 * method will block until it is released.
 *
 * \param critsec Pointer to critical_section structure
 */
static inline void critical_section_enter_blocking(critical_section_t *critsec) {
    critsec->save = spin_lock_blocking(critsec->core.spin_lock);
1000379e:	69aa      	ldr	r2, [r5, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100037a0:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
100037a4:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100037a6:	6813      	ldr	r3, [r2, #0]
100037a8:	2b00      	cmp	r3, #0
100037aa:	d0fc      	beq.n	100037a6 <tud_task+0x2e>
    __asm volatile ("dmb");
100037ac:	f3bf 8f5f 	dmb	sy
100037b0:	61e9      	str	r1, [r5, #28]
  //  however osal_queue_recieve may be. therefore my assumption is that
  //  the fifo mutex is not populated for queues used from an IRQ context
  assert(!qhdl->ff.mutex);

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
100037b2:	0028      	movs	r0, r5
100037b4:	0039      	movs	r1, r7
100037b6:	f7ff fdcf 	bl	10003358 <tu_fifo_read>
 *  \ingroup critical_section
 *
 * \param critsec Pointer to critical_section structure
 */
static inline void critical_section_exit(critical_section_t *critsec) {
    spin_unlock(critsec->core.spin_lock, critsec->save);
100037ba:	69aa      	ldr	r2, [r5, #24]
100037bc:	0004      	movs	r4, r0
100037be:	69eb      	ldr	r3, [r5, #28]
100037c0:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100037c4:	2100      	movs	r1, #0
100037c6:	6011      	str	r1, [r2, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100037c8:	f383 8810 	msr	PRIMASK, r3
100037cc:	2800      	cmp	r0, #0
100037ce:	d100      	bne.n	100037d2 <tud_task+0x5a>
100037d0:	e102      	b.n	100039d8 <tud_task+0x260>
    switch ( event.event_id )
100037d2:	787b      	ldrb	r3, [r7, #1]
100037d4:	2b08      	cmp	r3, #8
100037d6:	d8e0      	bhi.n	1000379a <tud_task+0x22>
100037d8:	465a      	mov	r2, fp
100037da:	009b      	lsls	r3, r3, #2
100037dc:	58d3      	ldr	r3, [r2, r3]
100037de:	469f      	mov	pc, r3
        }
      break;

      case USBD_EVENT_FUNC_CALL:
        TU_LOG2("\r\n");
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
100037e0:	687b      	ldr	r3, [r7, #4]
100037e2:	2b00      	cmp	r3, #0
100037e4:	d0d9      	beq.n	1000379a <tud_task+0x22>
100037e6:	68b8      	ldr	r0, [r7, #8]
100037e8:	4798      	blx	r3
  {
100037ea:	e7d6      	b.n	1000379a <tud_task+0x22>
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
100037ec:	227f      	movs	r2, #127	; 0x7f
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
100037ee:	7939      	ldrb	r1, [r7, #4]
        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
100037f0:	4b9d      	ldr	r3, [pc, #628]	; (10003a68 <tud_task+0x2f0>)
100037f2:	400a      	ands	r2, r1
100037f4:	0054      	lsls	r4, r2, #1
100037f6:	09c8      	lsrs	r0, r1, #7
100037f8:	191b      	adds	r3, r3, r4
100037fa:	181b      	adds	r3, r3, r0
100037fc:	0018      	movs	r0, r3
100037fe:	2501      	movs	r5, #1
10003800:	3020      	adds	r0, #32
10003802:	7944      	ldrb	r4, [r0, #5]
10003804:	43ac      	bics	r4, r5
10003806:	7144      	strb	r4, [r0, #5]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
10003808:	7944      	ldrb	r4, [r0, #5]
1000380a:	3503      	adds	r5, #3
1000380c:	43ac      	bics	r4, r5
1000380e:	7144      	strb	r4, [r0, #5]
        if ( 0 == epnum )
10003810:	2a00      	cmp	r2, #0
10003812:	d100      	bne.n	10003816 <tud_task+0x9e>
10003814:	e0e7      	b.n	100039e6 <tud_task+0x26e>
  if ( usbd_app_driver_get_cb )
10003816:	4a95      	ldr	r2, [pc, #596]	; (10003a6c <tud_task+0x2f4>)
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
10003818:	7cdb      	ldrb	r3, [r3, #19]
  if ( usbd_app_driver_get_cb )
1000381a:	2a00      	cmp	r2, #0
1000381c:	d006      	beq.n	1000382c <tud_task+0xb4>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
1000381e:	4a94      	ldr	r2, [pc, #592]	; (10003a70 <tud_task+0x2f8>)
10003820:	7812      	ldrb	r2, [r2, #0]
10003822:	4293      	cmp	r3, r2
10003824:	d200      	bcs.n	10003828 <tud_task+0xb0>
10003826:	e16f      	b.n	10003b08 <tud_task+0x390>
    drvid -= _app_driver_count;
10003828:	1a9b      	subs	r3, r3, r2
1000382a:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
1000382c:	2b00      	cmp	r3, #0
1000382e:	d000      	beq.n	10003832 <tud_task+0xba>
10003830:	e0d2      	b.n	100039d8 <tud_task+0x260>
10003832:	4c90      	ldr	r4, [pc, #576]	; (10003a74 <tud_task+0x2fc>)
          driver->xfer_cb(event.rhport, ep_addr, event.xfer_complete.result, event.xfer_complete.len);
10003834:	797a      	ldrb	r2, [r7, #5]
10003836:	7838      	ldrb	r0, [r7, #0]
10003838:	68bb      	ldr	r3, [r7, #8]
1000383a:	47a0      	blx	r4
1000383c:	e7ad      	b.n	1000379a <tud_task+0x22>
        _usbd_dev.connected = 1;
1000383e:	4b8a      	ldr	r3, [pc, #552]	; (10003a68 <tud_task+0x2f0>)
10003840:	2601      	movs	r6, #1
10003842:	4698      	mov	r8, r3
10003844:	4642      	mov	r2, r8
10003846:	781b      	ldrb	r3, [r3, #0]

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
  usbd_control_set_complete_callback(NULL);
10003848:	2000      	movs	r0, #0
        _usbd_dev.connected = 1;
1000384a:	4333      	orrs	r3, r6
1000384c:	7013      	strb	r3, [r2, #0]
        if ( !process_control_request(event.rhport, &event.setup_received) )
1000384e:	783b      	ldrb	r3, [r7, #0]
10003850:	4699      	mov	r9, r3
  usbd_control_set_complete_callback(NULL);
10003852:	f000 fd93 	bl	1000437c <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
10003856:	2360      	movs	r3, #96	; 0x60
10003858:	793d      	ldrb	r5, [r7, #4]
1000385a:	402b      	ands	r3, r5
1000385c:	2b60      	cmp	r3, #96	; 0x60
1000385e:	d00d      	beq.n	1000387c <tud_task+0x104>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
10003860:	2b40      	cmp	r3, #64	; 0x40
10003862:	d100      	bne.n	10003866 <tud_task+0xee>
10003864:	e0db      	b.n	10003a1e <tud_task+0x2a6>
    TU_LOG2("  %s", _tusb_std_request_str[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG2("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
10003866:	06ed      	lsls	r5, r5, #27
10003868:	0eed      	lsrs	r5, r5, #27
1000386a:	2d01      	cmp	r5, #1
1000386c:	d100      	bne.n	10003870 <tud_task+0xf8>
1000386e:	e156      	b.n	10003b1e <tud_task+0x3a6>
10003870:	2d02      	cmp	r5, #2
10003872:	d100      	bne.n	10003876 <tud_task+0xfe>
10003874:	e112      	b.n	10003a9c <tud_task+0x324>
10003876:	2d00      	cmp	r5, #0
10003878:	d100      	bne.n	1000387c <tud_task+0x104>
1000387a:	e0e2      	b.n	10003a42 <tud_task+0x2ca>
          dcd_edpt_stall(event.rhport, 0);
1000387c:	7838      	ldrb	r0, [r7, #0]
1000387e:	2100      	movs	r1, #0
10003880:	f000 fff0 	bl	10004864 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
10003884:	2180      	movs	r1, #128	; 0x80
10003886:	7838      	ldrb	r0, [r7, #0]
10003888:	f000 ffec 	bl	10004864 <dcd_edpt_stall>
1000388c:	e785      	b.n	1000379a <tud_task+0x22>
        if (tud_resume_cb) tud_resume_cb();
1000388e:	4b7a      	ldr	r3, [pc, #488]	; (10003a78 <tud_task+0x300>)
10003890:	2b00      	cmp	r3, #0
10003892:	d082      	beq.n	1000379a <tud_task+0x22>
10003894:	e000      	b.n	10003898 <tud_task+0x120>
10003896:	bf00      	nop
10003898:	e77f      	b.n	1000379a <tud_task+0x22>
        if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
1000389a:	4b78      	ldr	r3, [pc, #480]	; (10003a7c <tud_task+0x304>)
1000389c:	2b00      	cmp	r3, #0
1000389e:	d100      	bne.n	100038a2 <tud_task+0x12a>
100038a0:	e77b      	b.n	1000379a <tud_task+0x22>
100038a2:	4b71      	ldr	r3, [pc, #452]	; (10003a68 <tud_task+0x2f0>)
100038a4:	7818      	ldrb	r0, [r3, #0]
100038a6:	0700      	lsls	r0, r0, #28
100038a8:	0fc0      	lsrs	r0, r0, #31
100038aa:	e000      	b.n	100038ae <tud_task+0x136>
100038ac:	bf00      	nop
100038ae:	e774      	b.n	1000379a <tud_task+0x22>
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
100038b0:	4d6f      	ldr	r5, [pc, #444]	; (10003a70 <tud_task+0x2f8>)
100038b2:	4a6e      	ldr	r2, [pc, #440]	; (10003a6c <tud_task+0x2f4>)
100038b4:	2400      	movs	r4, #0
100038b6:	782b      	ldrb	r3, [r5, #0]
100038b8:	2a00      	cmp	r2, #0
100038ba:	d100      	bne.n	100038be <tud_task+0x146>
100038bc:	e099      	b.n	100039f2 <tud_task+0x27a>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
100038be:	4e70      	ldr	r6, [pc, #448]	; (10003a80 <tud_task+0x308>)
100038c0:	42a3      	cmp	r3, r4
100038c2:	d809      	bhi.n	100038d8 <tud_task+0x160>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
100038c4:	42a3      	cmp	r3, r4
100038c6:	d000      	beq.n	100038ca <tud_task+0x152>
100038c8:	e096      	b.n	100039f8 <tud_task+0x280>
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
100038ca:	3401      	adds	r4, #1
100038cc:	b2e4      	uxtb	r4, r4
100038ce:	429c      	cmp	r4, r3
100038d0:	d900      	bls.n	100038d4 <tud_task+0x15c>
100038d2:	e762      	b.n	1000379a <tud_task+0x22>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
100038d4:	42a3      	cmp	r3, r4
100038d6:	d9f5      	bls.n	100038c4 <tud_task+0x14c>
          if ( driver->sof ) driver->sof(event.rhport);
100038d8:	6831      	ldr	r1, [r6, #0]
100038da:	00e2      	lsls	r2, r4, #3
100038dc:	468c      	mov	ip, r1
100038de:	1b12      	subs	r2, r2, r4
100038e0:	0092      	lsls	r2, r2, #2
100038e2:	4462      	add	r2, ip
100038e4:	6992      	ldr	r2, [r2, #24]
100038e6:	2a00      	cmp	r2, #0
100038e8:	d0ef      	beq.n	100038ca <tud_task+0x152>
100038ea:	7838      	ldrb	r0, [r7, #0]
100038ec:	4790      	blx	r2
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
100038ee:	3401      	adds	r4, #1
100038f0:	782b      	ldrb	r3, [r5, #0]
100038f2:	b2e4      	uxtb	r4, r4
100038f4:	429c      	cmp	r4, r3
100038f6:	d9e3      	bls.n	100038c0 <tud_task+0x148>
100038f8:	e74f      	b.n	1000379a <tud_task+0x22>
  tu_varclr(&_usbd_dev);
100038fa:	2237      	movs	r2, #55	; 0x37
100038fc:	2100      	movs	r1, #0
100038fe:	485a      	ldr	r0, [pc, #360]	; (10003a68 <tud_task+0x2f0>)
        usbd_reset(event.rhport);
10003900:	783e      	ldrb	r6, [r7, #0]
  tu_varclr(&_usbd_dev);
10003902:	f7fd f817 	bl	10000934 <__wrap_memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
10003906:	2210      	movs	r2, #16
10003908:	21ff      	movs	r1, #255	; 0xff
1000390a:	485e      	ldr	r0, [pc, #376]	; (10003a84 <tud_task+0x30c>)
1000390c:	f7fd f812 	bl	10000934 <__wrap_memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
10003910:	4855      	ldr	r0, [pc, #340]	; (10003a68 <tud_task+0x2f0>)
10003912:	2212      	movs	r2, #18
10003914:	21ff      	movs	r1, #255	; 0xff
10003916:	3013      	adds	r0, #19
10003918:	f7fd f80c 	bl	10000934 <__wrap_memset>
  usbd_control_reset();
1000391c:	f000 fd24 	bl	10004368 <usbd_control_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10003920:	4d53      	ldr	r5, [pc, #332]	; (10003a70 <tud_task+0x2f8>)
10003922:	4a52      	ldr	r2, [pc, #328]	; (10003a6c <tud_task+0x2f4>)
10003924:	2400      	movs	r4, #0
10003926:	782b      	ldrb	r3, [r5, #0]
10003928:	2a00      	cmp	r2, #0
1000392a:	d100      	bne.n	1000392e <tud_task+0x1b6>
1000392c:	e070      	b.n	10003a10 <tud_task+0x298>
1000392e:	4a56      	ldr	r2, [pc, #344]	; (10003a88 <tud_task+0x310>)
10003930:	4690      	mov	r8, r2
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003932:	4a53      	ldr	r2, [pc, #332]	; (10003a80 <tud_task+0x308>)
10003934:	4691      	mov	r9, r2
10003936:	42a3      	cmp	r3, r4
10003938:	d845      	bhi.n	100039c6 <tud_task+0x24e>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
1000393a:	d166      	bne.n	10003a0a <tud_task+0x292>
1000393c:	4643      	mov	r3, r8
    get_driver(i)->reset(rhport);
1000393e:	0030      	movs	r0, r6
10003940:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10003942:	3401      	adds	r4, #1
10003944:	782b      	ldrb	r3, [r5, #0]
10003946:	b2e4      	uxtb	r4, r4
10003948:	42a3      	cmp	r3, r4
1000394a:	d2f4      	bcs.n	10003936 <tud_task+0x1be>
        if (tud_umount_cb) tud_umount_cb();
1000394c:	4b4f      	ldr	r3, [pc, #316]	; (10003a8c <tud_task+0x314>)
1000394e:	2b00      	cmp	r3, #0
10003950:	d100      	bne.n	10003954 <tud_task+0x1dc>
10003952:	e722      	b.n	1000379a <tud_task+0x22>
10003954:	e000      	b.n	10003958 <tud_task+0x1e0>
10003956:	bf00      	nop
10003958:	e71f      	b.n	1000379a <tud_task+0x22>
  tu_varclr(&_usbd_dev);
1000395a:	4b43      	ldr	r3, [pc, #268]	; (10003a68 <tud_task+0x2f0>)
1000395c:	2237      	movs	r2, #55	; 0x37
1000395e:	4698      	mov	r8, r3
10003960:	2100      	movs	r1, #0
10003962:	0018      	movs	r0, r3
        usbd_reset(event.rhport);
10003964:	783e      	ldrb	r6, [r7, #0]
  tu_varclr(&_usbd_dev);
10003966:	f7fc ffe5 	bl	10000934 <__wrap_memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
1000396a:	4643      	mov	r3, r8
1000396c:	2210      	movs	r2, #16
1000396e:	1cd8      	adds	r0, r3, #3
10003970:	21ff      	movs	r1, #255	; 0xff
10003972:	f7fc ffdf 	bl	10000934 <__wrap_memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
10003976:	4640      	mov	r0, r8
10003978:	2212      	movs	r2, #18
1000397a:	21ff      	movs	r1, #255	; 0xff
1000397c:	3013      	adds	r0, #19
1000397e:	f7fc ffd9 	bl	10000934 <__wrap_memset>
  usbd_control_reset();
10003982:	f000 fcf1 	bl	10004368 <usbd_control_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10003986:	4d3a      	ldr	r5, [pc, #232]	; (10003a70 <tud_task+0x2f8>)
10003988:	4a38      	ldr	r2, [pc, #224]	; (10003a6c <tud_task+0x2f4>)
1000398a:	2400      	movs	r4, #0
1000398c:	782b      	ldrb	r3, [r5, #0]
1000398e:	2a00      	cmp	r2, #0
10003990:	d035      	beq.n	100039fe <tud_task+0x286>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003992:	4a3b      	ldr	r2, [pc, #236]	; (10003a80 <tud_task+0x308>)
10003994:	4691      	mov	r9, r2
10003996:	429c      	cmp	r4, r3
10003998:	d30c      	bcc.n	100039b4 <tud_task+0x23c>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
1000399a:	d136      	bne.n	10003a0a <tud_task+0x292>
1000399c:	4b3a      	ldr	r3, [pc, #232]	; (10003a88 <tud_task+0x310>)
    get_driver(i)->reset(rhport);
1000399e:	0030      	movs	r0, r6
100039a0:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
100039a2:	3401      	adds	r4, #1
100039a4:	782b      	ldrb	r3, [r5, #0]
100039a6:	b2e4      	uxtb	r4, r4
100039a8:	42a3      	cmp	r3, r4
100039aa:	d2f4      	bcs.n	10003996 <tud_task+0x21e>
        _usbd_dev.speed = event.bus_reset.speed;
100039ac:	4642      	mov	r2, r8
100039ae:	793b      	ldrb	r3, [r7, #4]
100039b0:	7093      	strb	r3, [r2, #2]
      break;
100039b2:	e6f2      	b.n	1000379a <tud_task+0x22>
    get_driver(i)->reset(rhport);
100039b4:	464a      	mov	r2, r9
100039b6:	6812      	ldr	r2, [r2, #0]
100039b8:	00e3      	lsls	r3, r4, #3
100039ba:	4694      	mov	ip, r2
100039bc:	1b1b      	subs	r3, r3, r4
100039be:	009b      	lsls	r3, r3, #2
100039c0:	4463      	add	r3, ip
100039c2:	685b      	ldr	r3, [r3, #4]
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
100039c4:	e7eb      	b.n	1000399e <tud_task+0x226>
    get_driver(i)->reset(rhport);
100039c6:	464a      	mov	r2, r9
100039c8:	6812      	ldr	r2, [r2, #0]
100039ca:	00e3      	lsls	r3, r4, #3
100039cc:	4694      	mov	ip, r2
100039ce:	1b1b      	subs	r3, r3, r4
100039d0:	009b      	lsls	r3, r3, #2
100039d2:	4463      	add	r3, ip
100039d4:	685b      	ldr	r3, [r3, #4]
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
100039d6:	e7b2      	b.n	1000393e <tud_task+0x1c6>
}
100039d8:	b00b      	add	sp, #44	; 0x2c
100039da:	bcf0      	pop	{r4, r5, r6, r7}
100039dc:	46bb      	mov	fp, r7
100039de:	46b2      	mov	sl, r6
100039e0:	46a9      	mov	r9, r5
100039e2:	46a0      	mov	r8, r4
100039e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
100039e6:	797a      	ldrb	r2, [r7, #5]
100039e8:	7838      	ldrb	r0, [r7, #0]
100039ea:	68bb      	ldr	r3, [r7, #8]
100039ec:	f000 fcda 	bl	100043a4 <usbd_control_xfer_cb>
100039f0:	e6d3      	b.n	1000379a <tud_task+0x22>
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
100039f2:	2b00      	cmp	r3, #0
100039f4:	d100      	bne.n	100039f8 <tud_task+0x280>
100039f6:	e6d0      	b.n	1000379a <tud_task+0x22>
          if ( driver->sof ) driver->sof(event.rhport);
100039f8:	2300      	movs	r3, #0
100039fa:	699b      	ldr	r3, [r3, #24]
100039fc:	deff      	udf	#255	; 0xff
    get_driver(i)->reset(rhport);
100039fe:	0030      	movs	r0, r6
10003a00:	f7ff facc 	bl	10002f9c <cdcd_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10003a04:	782b      	ldrb	r3, [r5, #0]
10003a06:	2b00      	cmp	r3, #0
10003a08:	d0d0      	beq.n	100039ac <tud_task+0x234>
    get_driver(i)->reset(rhport);
10003a0a:	2300      	movs	r3, #0
10003a0c:	685b      	ldr	r3, [r3, #4]
10003a0e:	deff      	udf	#255	; 0xff
10003a10:	0030      	movs	r0, r6
10003a12:	f7ff fac3 	bl	10002f9c <cdcd_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10003a16:	782b      	ldrb	r3, [r5, #0]
10003a18:	2b00      	cmp	r3, #0
10003a1a:	d097      	beq.n	1000394c <tud_task+0x1d4>
10003a1c:	e7f5      	b.n	10003a0a <tud_task+0x292>
    TU_VERIFY(tud_vendor_control_request_cb);
10003a1e:	4b1c      	ldr	r3, [pc, #112]	; (10003a90 <tud_task+0x318>)
10003a20:	2b00      	cmp	r3, #0
10003a22:	d100      	bne.n	10003a26 <tud_task+0x2ae>
10003a24:	e72a      	b.n	1000387c <tud_task+0x104>
    if (tud_vendor_control_complete_cb) usbd_control_set_complete_callback(tud_vendor_control_complete_cb);
10003a26:	481b      	ldr	r0, [pc, #108]	; (10003a94 <tud_task+0x31c>)
10003a28:	2800      	cmp	r0, #0
10003a2a:	d001      	beq.n	10003a30 <tud_task+0x2b8>
10003a2c:	f000 fca6 	bl	1000437c <usbd_control_set_complete_callback>
    return tud_vendor_control_request_cb(rhport, p_request);
10003a30:	4648      	mov	r0, r9
10003a32:	a908      	add	r1, sp, #32
10003a34:	e000      	b.n	10003a38 <tud_task+0x2c0>
10003a36:	bf00      	nop
10003a38:	0004      	movs	r4, r0
        if ( !process_control_request(event.rhport, &event.setup_received) )
10003a3a:	2c00      	cmp	r4, #0
10003a3c:	d000      	beq.n	10003a40 <tud_task+0x2c8>
10003a3e:	e6ac      	b.n	1000379a <tud_task+0x22>
10003a40:	e71c      	b.n	1000387c <tud_task+0x104>
  {
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
10003a42:	2b20      	cmp	r3, #32
10003a44:	d100      	bne.n	10003a48 <tud_task+0x2d0>
10003a46:	e09b      	b.n	10003b80 <tud_task+0x408>
        TU_VERIFY(driver);

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
      }
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
10003a48:	2b00      	cmp	r3, #0
10003a4a:	d000      	beq.n	10003a4e <tud_task+0x2d6>
10003a4c:	e716      	b.n	1000387c <tud_task+0x104>
        // Non standard request is not supported
        TU_BREAKPOINT();
        return false;
      }

      switch ( p_request->bRequest )
10003a4e:	797b      	ldrb	r3, [r7, #5]
10003a50:	2b09      	cmp	r3, #9
10003a52:	d900      	bls.n	10003a56 <tud_task+0x2de>
10003a54:	e712      	b.n	1000387c <tud_task+0x104>
10003a56:	4a10      	ldr	r2, [pc, #64]	; (10003a98 <tud_task+0x320>)
10003a58:	009b      	lsls	r3, r3, #2
10003a5a:	58d3      	ldr	r3, [r2, r3]
10003a5c:	469f      	mov	pc, r3
10003a5e:	46c0      	nop			; (mov r8, r8)
10003a60:	20023280 	.word	0x20023280
10003a64:	10006fa8 	.word	0x10006fa8
10003a68:	20023244 	.word	0x20023244
10003a6c:	00000000 	.word	0x00000000
10003a70:	20023b85 	.word	0x20023b85
10003a74:	10003159 	.word	0x10003159
	...
10003a80:	20022f14 	.word	0x20022f14
10003a84:	20023247 	.word	0x20023247
10003a88:	10002f9d 	.word	0x10002f9d
	...
10003a98:	10006fcc 	.word	0x10006fcc
10003a9c:	227f      	movs	r2, #127	; 0x7f
static inline uint8_t tu_u16_low (uint16_t u16) { return (uint8_t) (u16 & 0x00ff); }
10003a9e:	7a39      	ldrb	r1, [r7, #8]
10003aa0:	400a      	ands	r2, r1
10003aa2:	9202      	str	r2, [sp, #8]
    {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
10003aa4:	2a08      	cmp	r2, #8
10003aa6:	d900      	bls.n	10003aaa <tud_task+0x332>
10003aa8:	e6e8      	b.n	1000387c <tud_task+0x104>
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
10003aaa:	09c8      	lsrs	r0, r1, #7
10003aac:	9001      	str	r0, [sp, #4]

      bool ret = false;

      // Handle STD request to endpoint
      if ( TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type )
10003aae:	2b00      	cmp	r3, #0
10003ab0:	d100      	bne.n	10003ab4 <tud_task+0x33c>
10003ab2:	e082      	b.n	10003bba <tud_task+0x442>
      bool ret = false;
10003ab4:	2400      	movs	r4, #0
10003ab6:	0053      	lsls	r3, r2, #1
10003ab8:	9302      	str	r3, [sp, #8]
          // Unknown/Unsupported request
          default: TU_BREAKPOINT(); return false;
        }
      }

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
10003aba:	9a01      	ldr	r2, [sp, #4]
10003abc:	9b02      	ldr	r3, [sp, #8]
10003abe:	4694      	mov	ip, r2
10003ac0:	4443      	add	r3, r8
  if ( usbd_app_driver_get_cb )
10003ac2:	4ac9      	ldr	r2, [pc, #804]	; (10003de8 <tud_task+0x670>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
10003ac4:	4463      	add	r3, ip
10003ac6:	7cdb      	ldrb	r3, [r3, #19]
  if ( usbd_app_driver_get_cb )
10003ac8:	2a00      	cmp	r2, #0
10003aca:	d006      	beq.n	10003ada <tud_task+0x362>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003acc:	4ac7      	ldr	r2, [pc, #796]	; (10003dec <tud_task+0x674>)
10003ace:	7812      	ldrb	r2, [r2, #0]
10003ad0:	4293      	cmp	r3, r2
10003ad2:	d200      	bcs.n	10003ad6 <tud_task+0x35e>
10003ad4:	e100      	b.n	10003cd8 <tud_task+0x560>
    drvid -= _app_driver_count;
10003ad6:	1a9b      	subs	r3, r3, r2
10003ad8:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10003ada:	2b00      	cmp	r3, #0
10003adc:	d000      	beq.n	10003ae0 <tud_task+0x368>
10003ade:	e0f2      	b.n	10003cc6 <tud_task+0x54e>
10003ae0:	48c3      	ldr	r0, [pc, #780]	; (10003df0 <tud_task+0x678>)
10003ae2:	4dc4      	ldr	r5, [pc, #784]	; (10003df4 <tud_task+0x67c>)
  usbd_control_set_complete_callback(driver->control_complete);
10003ae4:	f000 fc4a 	bl	1000437c <usbd_control_set_complete_callback>
  return driver->control_request(rhport, request);
10003ae8:	4648      	mov	r0, r9
10003aea:	68eb      	ldr	r3, [r5, #12]
10003aec:	a908      	add	r1, sp, #32
10003aee:	4798      	blx	r3
        // We will forward all request targeted endpoint to class drivers after
        // - For class-type requests: driver is fully responsible to reply to host
        // - For std-type requests  : driver init/re-init internal variable/buffer only, and
        //                            must not call tud_control_status(), driver's return value will have no effect.
        //                            EP state has already affected (stalled/cleared)
        if ( invoke_class_control(rhport, driver, p_request) ) ret = true;
10003af0:	2800      	cmp	r0, #0
10003af2:	d100      	bne.n	10003af6 <tud_task+0x37e>
10003af4:	e0e7      	b.n	10003cc6 <tud_task+0x54e>
      }

      if ( TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type )
10003af6:	2260      	movs	r2, #96	; 0x60
10003af8:	793b      	ldrb	r3, [r7, #4]
10003afa:	421a      	tst	r2, r3
10003afc:	d000      	beq.n	10003b00 <tud_task+0x388>
10003afe:	e64c      	b.n	1000379a <tud_task+0x22>
      {
        // Set complete callback = NULL since it can also stall the request.
        usbd_control_set_complete_callback(NULL);
10003b00:	2000      	movs	r0, #0
10003b02:	f000 fc3b 	bl	1000437c <usbd_control_set_complete_callback>
10003b06:	e648      	b.n	1000379a <tud_task+0x22>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003b08:	00da      	lsls	r2, r3, #3
10003b0a:	1ad3      	subs	r3, r2, r3
10003b0c:	4aba      	ldr	r2, [pc, #744]	; (10003df8 <tud_task+0x680>)
10003b0e:	009b      	lsls	r3, r3, #2
10003b10:	6812      	ldr	r2, [r2, #0]
10003b12:	18d3      	adds	r3, r2, r3
          TU_ASSERT(driver, );
10003b14:	2b00      	cmp	r3, #0
10003b16:	d100      	bne.n	10003b1a <tud_task+0x3a2>
10003b18:	e75e      	b.n	100039d8 <tud_task+0x260>
          driver->xfer_cb(event.rhport, ep_addr, event.xfer_complete.result, event.xfer_complete.len);
10003b1a:	695c      	ldr	r4, [r3, #20]
10003b1c:	e68a      	b.n	10003834 <tud_task+0xbc>
10003b1e:	7a3b      	ldrb	r3, [r7, #8]
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
10003b20:	2b0f      	cmp	r3, #15
10003b22:	d900      	bls.n	10003b26 <tud_task+0x3ae>
10003b24:	e6aa      	b.n	1000387c <tud_task+0x104>
  if ( usbd_app_driver_get_cb )
10003b26:	4ab0      	ldr	r2, [pc, #704]	; (10003de8 <tud_task+0x670>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
10003b28:	4443      	add	r3, r8
10003b2a:	78db      	ldrb	r3, [r3, #3]
  if ( usbd_app_driver_get_cb )
10003b2c:	2a00      	cmp	r2, #0
10003b2e:	d005      	beq.n	10003b3c <tud_task+0x3c4>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003b30:	4aae      	ldr	r2, [pc, #696]	; (10003dec <tud_task+0x674>)
10003b32:	7812      	ldrb	r2, [r2, #0]
10003b34:	4293      	cmp	r3, r2
10003b36:	d35e      	bcc.n	10003bf6 <tud_task+0x47e>
    drvid -= _app_driver_count;
10003b38:	1a9b      	subs	r3, r3, r2
10003b3a:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10003b3c:	2b00      	cmp	r3, #0
10003b3e:	d000      	beq.n	10003b42 <tud_task+0x3ca>
10003b40:	e69c      	b.n	1000387c <tud_task+0x104>
10003b42:	48ab      	ldr	r0, [pc, #684]	; (10003df0 <tud_task+0x678>)
10003b44:	4cab      	ldr	r4, [pc, #684]	; (10003df4 <tud_task+0x67c>)
  usbd_control_set_complete_callback(driver->control_complete);
10003b46:	f000 fc19 	bl	1000437c <usbd_control_set_complete_callback>
  return driver->control_request(rhport, request);
10003b4a:	4648      	mov	r0, r9
10003b4c:	68e3      	ldr	r3, [r4, #12]
10003b4e:	a908      	add	r1, sp, #32
10003b50:	4798      	blx	r3
      if ( !invoke_class_control(rhport, driver, p_request) )
10003b52:	2800      	cmp	r0, #0
10003b54:	d000      	beq.n	10003b58 <tud_task+0x3e0>
10003b56:	e620      	b.n	1000379a <tud_task+0x22>
        TU_VERIFY( TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type &&
10003b58:	2260      	movs	r2, #96	; 0x60
10003b5a:	0011      	movs	r1, r2
10003b5c:	793b      	ldrb	r3, [r7, #4]
10003b5e:	4019      	ands	r1, r3
10003b60:	421a      	tst	r2, r3
10003b62:	d000      	beq.n	10003b66 <tud_task+0x3ee>
10003b64:	e68a      	b.n	1000387c <tud_task+0x104>
10003b66:	797b      	ldrb	r3, [r7, #5]
10003b68:	2b0a      	cmp	r3, #10
10003b6a:	d000      	beq.n	10003b6e <tud_task+0x3f6>
10003b6c:	e686      	b.n	1000387c <tud_task+0x104>
        uint8_t alternate = 0;
10003b6e:	ab06      	add	r3, sp, #24
10003b70:	1c9a      	adds	r2, r3, #2
10003b72:	7011      	strb	r1, [r2, #0]
        tud_control_xfer(rhport, p_request, &alternate, 1);
10003b74:	2301      	movs	r3, #1
10003b76:	4648      	mov	r0, r9
10003b78:	a908      	add	r1, sp, #32
10003b7a:	f000 fb97 	bl	100042ac <tud_control_xfer>
10003b7e:	e60c      	b.n	1000379a <tud_task+0x22>
10003b80:	7a3b      	ldrb	r3, [r7, #8]
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
10003b82:	2b0f      	cmp	r3, #15
10003b84:	d900      	bls.n	10003b88 <tud_task+0x410>
10003b86:	e679      	b.n	1000387c <tud_task+0x104>
  if ( usbd_app_driver_get_cb )
10003b88:	4a97      	ldr	r2, [pc, #604]	; (10003de8 <tud_task+0x670>)
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
10003b8a:	4443      	add	r3, r8
10003b8c:	78db      	ldrb	r3, [r3, #3]
  if ( usbd_app_driver_get_cb )
10003b8e:	2a00      	cmp	r2, #0
10003b90:	d006      	beq.n	10003ba0 <tud_task+0x428>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003b92:	4a96      	ldr	r2, [pc, #600]	; (10003dec <tud_task+0x674>)
10003b94:	7812      	ldrb	r2, [r2, #0]
10003b96:	4293      	cmp	r3, r2
10003b98:	d200      	bcs.n	10003b9c <tud_task+0x424>
10003b9a:	e0c7      	b.n	10003d2c <tud_task+0x5b4>
    drvid -= _app_driver_count;
10003b9c:	1a9b      	subs	r3, r3, r2
10003b9e:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10003ba0:	2b00      	cmp	r3, #0
10003ba2:	d000      	beq.n	10003ba6 <tud_task+0x42e>
10003ba4:	e66a      	b.n	1000387c <tud_task+0x104>
10003ba6:	4892      	ldr	r0, [pc, #584]	; (10003df0 <tud_task+0x678>)
10003ba8:	4c92      	ldr	r4, [pc, #584]	; (10003df4 <tud_task+0x67c>)
  usbd_control_set_complete_callback(driver->control_complete);
10003baa:	f000 fbe7 	bl	1000437c <usbd_control_set_complete_callback>
  return driver->control_request(rhport, request);
10003bae:	68e3      	ldr	r3, [r4, #12]
10003bb0:	4648      	mov	r0, r9
10003bb2:	a908      	add	r1, sp, #32
10003bb4:	4798      	blx	r3
10003bb6:	0004      	movs	r4, r0
        return invoke_class_control(rhport, driver, p_request);
10003bb8:	e73f      	b.n	10003a3a <tud_task+0x2c2>
        switch ( p_request->bRequest )
10003bba:	797b      	ldrb	r3, [r7, #5]
10003bbc:	9303      	str	r3, [sp, #12]
10003bbe:	2b01      	cmp	r3, #1
10003bc0:	d100      	bne.n	10003bc4 <tud_task+0x44c>
10003bc2:	e09d      	b.n	10003d00 <tud_task+0x588>
10003bc4:	2b03      	cmp	r3, #3
10003bc6:	d100      	bne.n	10003bca <tud_task+0x452>
10003bc8:	e090      	b.n	10003cec <tud_task+0x574>
10003bca:	2b00      	cmp	r3, #0
10003bcc:	d000      	beq.n	10003bd0 <tud_task+0x458>
10003bce:	e655      	b.n	1000387c <tud_task+0x104>
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].stalled;
10003bd0:	0053      	lsls	r3, r2, #1
10003bd2:	9a01      	ldr	r2, [sp, #4]
10003bd4:	9302      	str	r3, [sp, #8]
10003bd6:	4694      	mov	ip, r2
10003bd8:	4443      	add	r3, r8
10003bda:	4463      	add	r3, ip
10003bdc:	3320      	adds	r3, #32
10003bde:	795b      	ldrb	r3, [r3, #5]
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
10003be0:	aa06      	add	r2, sp, #24
  return _usbd_dev.ep_status[epnum][dir].stalled;
10003be2:	079b      	lsls	r3, r3, #30
10003be4:	0fdb      	lsrs	r3, r3, #31
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
10003be6:	3202      	adds	r2, #2
10003be8:	8013      	strh	r3, [r2, #0]
            tud_control_xfer(rhport, p_request, &status, 2);
10003bea:	4648      	mov	r0, r9
10003bec:	2302      	movs	r3, #2
10003bee:	a908      	add	r1, sp, #32
10003bf0:	f000 fb5c 	bl	100042ac <tud_control_xfer>
          break;
10003bf4:	e761      	b.n	10003aba <tud_task+0x342>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003bf6:	4a80      	ldr	r2, [pc, #512]	; (10003df8 <tud_task+0x680>)
10003bf8:	00dc      	lsls	r4, r3, #3
10003bfa:	1ae3      	subs	r3, r4, r3
10003bfc:	6814      	ldr	r4, [r2, #0]
10003bfe:	009b      	lsls	r3, r3, #2
10003c00:	18e4      	adds	r4, r4, r3
      TU_VERIFY(driver);
10003c02:	2c00      	cmp	r4, #0
10003c04:	d100      	bne.n	10003c08 <tud_task+0x490>
10003c06:	e639      	b.n	1000387c <tud_task+0x104>
  usbd_control_set_complete_callback(driver->control_complete);
10003c08:	6920      	ldr	r0, [r4, #16]
10003c0a:	e79c      	b.n	10003b46 <tud_task+0x3ce>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
10003c0c:	88fb      	ldrh	r3, [r7, #6]
10003c0e:	2b01      	cmp	r3, #1
10003c10:	d000      	beq.n	10003c14 <tud_task+0x49c>
10003c12:	e633      	b.n	1000387c <tud_task+0x104>
          _usbd_dev.remote_wakeup_en = false;
10003c14:	4643      	mov	r3, r8
10003c16:	2208      	movs	r2, #8
10003c18:	781b      	ldrb	r3, [r3, #0]
10003c1a:	4393      	bics	r3, r2
10003c1c:	4642      	mov	r2, r8
          tud_control_status(rhport, p_request);
10003c1e:	4648      	mov	r0, r9
10003c20:	a908      	add	r1, sp, #32
          _usbd_dev.remote_wakeup_en = false;
10003c22:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
10003c24:	f000 fb2a 	bl	1000427c <tud_control_status>
        break;
10003c28:	e5b7      	b.n	1000379a <tud_task+0x22>
          uint16_t status = (_usbd_dev.self_powered ? 1 : 0) | (_usbd_dev.remote_wakeup_en ? 2 : 0);
10003c2a:	4643      	mov	r3, r8
10003c2c:	2002      	movs	r0, #2
10003c2e:	7819      	ldrb	r1, [r3, #0]
10003c30:	ab06      	add	r3, sp, #24
10003c32:	1c9a      	adds	r2, r3, #2
10003c34:	068b      	lsls	r3, r1, #26
10003c36:	0889      	lsrs	r1, r1, #2
10003c38:	4001      	ands	r1, r0
10003c3a:	0fdb      	lsrs	r3, r3, #31
10003c3c:	430b      	orrs	r3, r1
10003c3e:	8013      	strh	r3, [r2, #0]
          tud_control_xfer(rhport, p_request, &status, 2);
10003c40:	4648      	mov	r0, r9
10003c42:	2302      	movs	r3, #2
10003c44:	a908      	add	r1, sp, #32
10003c46:	f000 fb31 	bl	100042ac <tud_control_xfer>
        break;
10003c4a:	e5a6      	b.n	1000379a <tud_task+0x22>
          if ( !_usbd_dev.cfg_num && cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
10003c4c:	4643      	mov	r3, r8
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
10003c4e:	79ba      	ldrb	r2, [r7, #6]
10003c50:	9203      	str	r2, [sp, #12]
          if ( !_usbd_dev.cfg_num && cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
10003c52:	785b      	ldrb	r3, [r3, #1]
10003c54:	2b00      	cmp	r3, #0
10003c56:	d102      	bne.n	10003c5e <tud_task+0x4e6>
10003c58:	2a00      	cmp	r2, #0
10003c5a:	d000      	beq.n	10003c5e <tud_task+0x4e6>
10003c5c:	e084      	b.n	10003d68 <tud_task+0x5f0>
          _usbd_dev.cfg_num = cfg_num;
10003c5e:	4643      	mov	r3, r8
10003c60:	9a03      	ldr	r2, [sp, #12]
          tud_control_status(rhport, p_request);
10003c62:	4648      	mov	r0, r9
10003c64:	a908      	add	r1, sp, #32
          _usbd_dev.cfg_num = cfg_num;
10003c66:	705a      	strb	r2, [r3, #1]
          tud_control_status(rhport, p_request);
10003c68:	f000 fb08 	bl	1000427c <tud_control_status>
        break;
10003c6c:	e595      	b.n	1000379a <tud_task+0x22>
          uint8_t cfg_num = _usbd_dev.cfg_num;
10003c6e:	4643      	mov	r3, r8
10003c70:	aa06      	add	r2, sp, #24
10003c72:	785b      	ldrb	r3, [r3, #1]
10003c74:	3202      	adds	r2, #2
10003c76:	7013      	strb	r3, [r2, #0]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
10003c78:	4648      	mov	r0, r9
10003c7a:	2301      	movs	r3, #1
10003c7c:	a908      	add	r1, sp, #32
10003c7e:	f000 fb15 	bl	100042ac <tud_control_xfer>
        break;
10003c82:	e58a      	b.n	1000379a <tud_task+0x22>
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
10003c84:	88fb      	ldrh	r3, [r7, #6]
10003c86:	79b8      	ldrb	r0, [r7, #6]
  switch(desc_type)
10003c88:	0a1b      	lsrs	r3, r3, #8
10003c8a:	2b0f      	cmp	r3, #15
10003c8c:	d900      	bls.n	10003c90 <tud_task+0x518>
10003c8e:	e5f5      	b.n	1000387c <tud_task+0x104>
10003c90:	4a5a      	ldr	r2, [pc, #360]	; (10003dfc <tud_task+0x684>)
10003c92:	009b      	lsls	r3, r3, #2
10003c94:	58d3      	ldr	r3, [r2, r3]
10003c96:	469f      	mov	pc, r3
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
10003c98:	a808      	add	r0, sp, #32
10003c9a:	f000 fb75 	bl	10004388 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
10003c9e:	4648      	mov	r0, r9
10003ca0:	79b9      	ldrb	r1, [r7, #6]
10003ca2:	f000 fc95 	bl	100045d0 <dcd_set_address>
          _usbd_dev.addressed = 1;
10003ca6:	4643      	mov	r3, r8
10003ca8:	2202      	movs	r2, #2
10003caa:	781b      	ldrb	r3, [r3, #0]
10003cac:	4313      	orrs	r3, r2
10003cae:	4642      	mov	r2, r8
10003cb0:	7013      	strb	r3, [r2, #0]
        break;
10003cb2:	e572      	b.n	1000379a <tud_task+0x22>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
10003cb4:	88fb      	ldrh	r3, [r7, #6]
10003cb6:	2b01      	cmp	r3, #1
10003cb8:	d000      	beq.n	10003cbc <tud_task+0x544>
10003cba:	e5df      	b.n	1000387c <tud_task+0x104>
          _usbd_dev.remote_wakeup_en = true;
10003cbc:	4643      	mov	r3, r8
10003cbe:	2208      	movs	r2, #8
10003cc0:	781b      	ldrb	r3, [r3, #0]
10003cc2:	4313      	orrs	r3, r2
10003cc4:	e7aa      	b.n	10003c1c <tud_task+0x4a4>
      if ( TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type )
10003cc6:	2260      	movs	r2, #96	; 0x60
10003cc8:	793b      	ldrb	r3, [r7, #4]
10003cca:	421a      	tst	r2, r3
10003ccc:	d000      	beq.n	10003cd0 <tud_task+0x558>
10003cce:	e6b4      	b.n	10003a3a <tud_task+0x2c2>
        usbd_control_set_complete_callback(NULL);
10003cd0:	2000      	movs	r0, #0
10003cd2:	f000 fb53 	bl	1000437c <usbd_control_set_complete_callback>
10003cd6:	e6b0      	b.n	10003a3a <tud_task+0x2c2>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003cd8:	4a47      	ldr	r2, [pc, #284]	; (10003df8 <tud_task+0x680>)
10003cda:	00dd      	lsls	r5, r3, #3
10003cdc:	1aeb      	subs	r3, r5, r3
10003cde:	6815      	ldr	r5, [r2, #0]
10003ce0:	009b      	lsls	r3, r3, #2
10003ce2:	18ed      	adds	r5, r5, r3
      if (driver)
10003ce4:	2d00      	cmp	r5, #0
10003ce6:	d0ee      	beq.n	10003cc6 <tud_task+0x54e>
  usbd_control_set_complete_callback(driver->control_complete);
10003ce8:	6928      	ldr	r0, [r5, #16]
10003cea:	e6fb      	b.n	10003ae4 <tud_task+0x36c>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) usbd_edpt_stall(rhport, ep_addr);
10003cec:	88fb      	ldrh	r3, [r7, #6]
10003cee:	2b00      	cmp	r3, #0
10003cf0:	d027      	beq.n	10003d42 <tud_task+0x5ca>
10003cf2:	0053      	lsls	r3, r2, #1
10003cf4:	9302      	str	r3, [sp, #8]
            tud_control_status(rhport, p_request);
10003cf6:	4648      	mov	r0, r9
10003cf8:	a908      	add	r1, sp, #32
10003cfa:	f000 fabf 	bl	1000427c <tud_control_status>
          break;
10003cfe:	e6dc      	b.n	10003aba <tud_task+0x342>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) usbd_edpt_clear_stall(rhport, ep_addr);
10003d00:	88fb      	ldrh	r3, [r7, #6]
10003d02:	2b00      	cmp	r3, #0
10003d04:	d1f5      	bne.n	10003cf2 <tud_task+0x57a>
  dcd_edpt_clear_stall(rhport, ep_addr);
10003d06:	4648      	mov	r0, r9
10003d08:	f000 fdd4 	bl	100048b4 <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = false;
10003d0c:	9a01      	ldr	r2, [sp, #4]
10003d0e:	9b02      	ldr	r3, [sp, #8]
10003d10:	4694      	mov	ip, r2
10003d12:	005b      	lsls	r3, r3, #1
10003d14:	9302      	str	r3, [sp, #8]
10003d16:	4443      	add	r3, r8
10003d18:	4463      	add	r3, ip
10003d1a:	3320      	adds	r3, #32
10003d1c:	795a      	ldrb	r2, [r3, #5]
  _usbd_dev.ep_status[epnum][dir].busy = false;
10003d1e:	9903      	ldr	r1, [sp, #12]
  _usbd_dev.ep_status[epnum][dir].stalled = false;
10003d20:	43aa      	bics	r2, r5
10003d22:	715a      	strb	r2, [r3, #5]
  _usbd_dev.ep_status[epnum][dir].busy = false;
10003d24:	795a      	ldrb	r2, [r3, #5]
10003d26:	438a      	bics	r2, r1
10003d28:	715a      	strb	r2, [r3, #5]
}
10003d2a:	e7e4      	b.n	10003cf6 <tud_task+0x57e>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003d2c:	4a32      	ldr	r2, [pc, #200]	; (10003df8 <tud_task+0x680>)
10003d2e:	00dc      	lsls	r4, r3, #3
10003d30:	1ae3      	subs	r3, r4, r3
10003d32:	6814      	ldr	r4, [r2, #0]
10003d34:	009b      	lsls	r3, r3, #2
10003d36:	18e4      	adds	r4, r4, r3
        TU_VERIFY(driver);
10003d38:	2c00      	cmp	r4, #0
10003d3a:	d100      	bne.n	10003d3e <tud_task+0x5c6>
10003d3c:	e59e      	b.n	1000387c <tud_task+0x104>
  usbd_control_set_complete_callback(driver->control_complete);
10003d3e:	6920      	ldr	r0, [r4, #16]
10003d40:	e733      	b.n	10003baa <tud_task+0x432>
  dcd_edpt_stall(rhport, ep_addr);
10003d42:	4648      	mov	r0, r9
10003d44:	f000 fd8e 	bl	10004864 <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = true;
10003d48:	9a01      	ldr	r2, [sp, #4]
10003d4a:	2102      	movs	r1, #2
10003d4c:	4694      	mov	ip, r2
10003d4e:	9b02      	ldr	r3, [sp, #8]
10003d50:	005b      	lsls	r3, r3, #1
10003d52:	9302      	str	r3, [sp, #8]
10003d54:	4443      	add	r3, r8
10003d56:	4463      	add	r3, ip
10003d58:	3320      	adds	r3, #32
10003d5a:	795a      	ldrb	r2, [r3, #5]
10003d5c:	430a      	orrs	r2, r1
10003d5e:	715a      	strb	r2, [r3, #5]
  _usbd_dev.ep_status[epnum][dir].busy = true;
10003d60:	795a      	ldrb	r2, [r3, #5]
10003d62:	4316      	orrs	r6, r2
10003d64:	715e      	strb	r6, [r3, #5]
}
10003d66:	e7c6      	b.n	10003cf6 <tud_task+0x57e>
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1); // index is cfg_num-1
10003d68:	1e50      	subs	r0, r2, #1
10003d6a:	b2c0      	uxtb	r0, r0
10003d6c:	f7fe fa06 	bl	1000217c <tud_descriptor_configuration_cb>
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
10003d70:	2800      	cmp	r0, #0
10003d72:	d100      	bne.n	10003d76 <tud_task+0x5fe>
10003d74:	e582      	b.n	1000387c <tud_task+0x104>
10003d76:	7843      	ldrb	r3, [r0, #1]
10003d78:	2b02      	cmp	r3, #2
10003d7a:	d000      	beq.n	10003d7e <tud_task+0x606>
10003d7c:	e57e      	b.n	1000387c <tud_task+0x104>
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
10003d7e:	2101      	movs	r1, #1
10003d80:	79c2      	ldrb	r2, [r0, #7]
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
10003d82:	0005      	movs	r5, r0
  _usbd_dev.self_powered = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED) ? 1 : 0;
10003d84:	1193      	asrs	r3, r2, #6
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
10003d86:	1152      	asrs	r2, r2, #5
10003d88:	400b      	ands	r3, r1
10003d8a:	400a      	ands	r2, r1
10003d8c:	0112      	lsls	r2, r2, #4
10003d8e:	015b      	lsls	r3, r3, #5
10003d90:	4313      	orrs	r3, r2
10003d92:	4642      	mov	r2, r8
10003d94:	7812      	ldrb	r2, [r2, #0]
10003d96:	312f      	adds	r1, #47	; 0x2f
10003d98:	438a      	bics	r2, r1
10003d9a:	4313      	orrs	r3, r2
10003d9c:	4642      	mov	r2, r8
10003d9e:	7013      	strb	r3, [r2, #0]
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + desc_cfg->wTotalLength;
10003da0:	78c3      	ldrb	r3, [r0, #3]
10003da2:	7882      	ldrb	r2, [r0, #2]
10003da4:	021b      	lsls	r3, r3, #8
10003da6:	4313      	orrs	r3, r2
10003da8:	18c3      	adds	r3, r0, r3
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
10003daa:	3509      	adds	r5, #9
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + desc_cfg->wTotalLength;
10003dac:	9304      	str	r3, [sp, #16]
  while( p_desc < desc_end )
10003dae:	9b04      	ldr	r3, [sp, #16]
10003db0:	42ab      	cmp	r3, r5
10003db2:	d800      	bhi.n	10003db6 <tud_task+0x63e>
10003db4:	e0cf      	b.n	10003f56 <tud_task+0x7de>
    tusb_desc_interface_assoc_t const * desc_itf_assoc = NULL;
10003db6:	2300      	movs	r3, #0
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10003db8:	786a      	ldrb	r2, [r5, #1]
10003dba:	9302      	str	r3, [sp, #8]
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
10003dbc:	2a0b      	cmp	r2, #11
10003dbe:	d104      	bne.n	10003dca <tud_task+0x652>
  return desc8 + desc8[DESC_OFFSET_LEN];
10003dc0:	782b      	ldrb	r3, [r5, #0]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10003dc2:	9502      	str	r5, [sp, #8]
  return desc8 + desc8[DESC_OFFSET_LEN];
10003dc4:	18eb      	adds	r3, r5, r3
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10003dc6:	001d      	movs	r5, r3
10003dc8:	785a      	ldrb	r2, [r3, #1]
    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
10003dca:	2a04      	cmp	r2, #4
10003dcc:	d000      	beq.n	10003dd0 <tud_task+0x658>
10003dce:	e555      	b.n	1000387c <tud_task+0x104>
    uint16_t const remaining_len = desc_end-p_desc;
10003dd0:	9b04      	ldr	r3, [sp, #16]
10003dd2:	4a05      	ldr	r2, [pc, #20]	; (10003de8 <tud_task+0x670>)
10003dd4:	1b5b      	subs	r3, r3, r5
10003dd6:	b29b      	uxth	r3, r3
10003dd8:	9301      	str	r3, [sp, #4]
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
10003dda:	4b04      	ldr	r3, [pc, #16]	; (10003dec <tud_task+0x674>)
10003ddc:	2400      	movs	r4, #0
10003dde:	781b      	ldrb	r3, [r3, #0]
10003de0:	2a00      	cmp	r2, #0
10003de2:	d11d      	bne.n	10003e20 <tud_task+0x6a8>
10003de4:	e029      	b.n	10003e3a <tud_task+0x6c2>
10003de6:	46c0      	nop			; (mov r8, r8)
10003de8:	00000000 	.word	0x00000000
10003dec:	20023b85 	.word	0x20023b85
10003df0:	100030ad 	.word	0x100030ad
10003df4:	10007034 	.word	0x10007034
10003df8:	20022f14 	.word	0x20022f14
10003dfc:	10006ff4 	.word	0x10006ff4
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10003e00:	429c      	cmp	r4, r3
10003e02:	d126      	bne.n	10003e52 <tud_task+0x6da>
10003e04:	4b57      	ldr	r3, [pc, #348]	; (10003f64 <tud_task+0x7ec>)
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
10003e06:	0029      	movs	r1, r5
10003e08:	4648      	mov	r0, r9
10003e0a:	9a01      	ldr	r2, [sp, #4]
10003e0c:	4798      	blx	r3
      if ( drv_len > 0 )
10003e0e:	2800      	cmp	r0, #0
10003e10:	d122      	bne.n	10003e58 <tud_task+0x6e0>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
10003e12:	4b55      	ldr	r3, [pc, #340]	; (10003f68 <tud_task+0x7f0>)
10003e14:	3401      	adds	r4, #1
10003e16:	781b      	ldrb	r3, [r3, #0]
10003e18:	b2e4      	uxtb	r4, r4
10003e1a:	42a3      	cmp	r3, r4
10003e1c:	d200      	bcs.n	10003e20 <tud_task+0x6a8>
10003e1e:	e52d      	b.n	1000387c <tud_task+0x104>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003e20:	429c      	cmp	r4, r3
10003e22:	d2ed      	bcs.n	10003e00 <tud_task+0x688>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
10003e24:	4b51      	ldr	r3, [pc, #324]	; (10003f6c <tud_task+0x7f4>)
10003e26:	681b      	ldr	r3, [r3, #0]
10003e28:	9305      	str	r3, [sp, #20]
10003e2a:	9a05      	ldr	r2, [sp, #20]
10003e2c:	00e3      	lsls	r3, r4, #3
10003e2e:	4694      	mov	ip, r2
10003e30:	1b1b      	subs	r3, r3, r4
10003e32:	009b      	lsls	r3, r3, #2
10003e34:	4463      	add	r3, ip
10003e36:	689b      	ldr	r3, [r3, #8]
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003e38:	e7e5      	b.n	10003e06 <tud_task+0x68e>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
10003e3a:	0029      	movs	r1, r5
10003e3c:	4648      	mov	r0, r9
10003e3e:	9a01      	ldr	r2, [sp, #4]
10003e40:	f7ff f8be 	bl	10002fc0 <cdcd_open>
10003e44:	1e06      	subs	r6, r0, #0
      if ( drv_len > 0 )
10003e46:	d108      	bne.n	10003e5a <tud_task+0x6e2>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
10003e48:	4b47      	ldr	r3, [pc, #284]	; (10003f68 <tud_task+0x7f0>)
10003e4a:	781b      	ldrb	r3, [r3, #0]
10003e4c:	2b00      	cmp	r3, #0
10003e4e:	d100      	bne.n	10003e52 <tud_task+0x6da>
10003e50:	e514      	b.n	1000387c <tud_task+0x104>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
10003e52:	2300      	movs	r3, #0
10003e54:	689b      	ldr	r3, [r3, #8]
10003e56:	deff      	udf	#255	; 0xff
10003e58:	0006      	movs	r6, r0
        TU_ASSERT( sizeof(tusb_desc_interface_t) <= drv_len && drv_len <= remaining_len);
10003e5a:	2e08      	cmp	r6, #8
10003e5c:	d800      	bhi.n	10003e60 <tud_task+0x6e8>
10003e5e:	e50d      	b.n	1000387c <tud_task+0x104>
10003e60:	9b01      	ldr	r3, [sp, #4]
10003e62:	42b3      	cmp	r3, r6
10003e64:	d200      	bcs.n	10003e68 <tud_task+0x6f0>
10003e66:	e509      	b.n	1000387c <tud_task+0x104>
        TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[desc_itf->bInterfaceNumber]);
10003e68:	4643      	mov	r3, r8
10003e6a:	78aa      	ldrb	r2, [r5, #2]
10003e6c:	189b      	adds	r3, r3, r2
10003e6e:	78d9      	ldrb	r1, [r3, #3]
10003e70:	29ff      	cmp	r1, #255	; 0xff
10003e72:	d000      	beq.n	10003e76 <tud_task+0x6fe>
10003e74:	e502      	b.n	1000387c <tud_task+0x104>
        _usbd_dev.itf2drv[desc_itf->bInterfaceNumber] = drv_id;
10003e76:	70dc      	strb	r4, [r3, #3]
        if (desc_itf_assoc)
10003e78:	9b02      	ldr	r3, [sp, #8]
10003e7a:	2b00      	cmp	r3, #0
10003e7c:	d014      	beq.n	10003ea8 <tud_task+0x730>
10003e7e:	0018      	movs	r0, r3
          TU_ASSERT(desc_itf_assoc->bFirstInterface == desc_itf->bInterfaceNumber &&
10003e80:	789b      	ldrb	r3, [r3, #2]
10003e82:	4293      	cmp	r3, r2
10003e84:	d000      	beq.n	10003e88 <tud_task+0x710>
10003e86:	e4f9      	b.n	1000387c <tud_task+0x104>
10003e88:	7901      	ldrb	r1, [r0, #4]
10003e8a:	796a      	ldrb	r2, [r5, #5]
10003e8c:	4291      	cmp	r1, r2
10003e8e:	d000      	beq.n	10003e92 <tud_task+0x71a>
10003e90:	e4f4      	b.n	1000387c <tud_task+0x104>
          for(uint8_t i=1; i<desc_itf_assoc->bInterfaceCount; i++)
10003e92:	78c2      	ldrb	r2, [r0, #3]
10003e94:	2a01      	cmp	r2, #1
10003e96:	d907      	bls.n	10003ea8 <tud_task+0x730>
            _usbd_dev.itf2drv[desc_itf->bInterfaceNumber+i] = drv_id;
10003e98:	3304      	adds	r3, #4
10003e9a:	3a01      	subs	r2, #1
10003e9c:	4443      	add	r3, r8
10003e9e:	0018      	movs	r0, r3
10003ea0:	0021      	movs	r1, r4
10003ea2:	b2d2      	uxtb	r2, r2
10003ea4:	f7fc fd46 	bl	10000934 <__wrap_memset>
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
10003ea8:	217f      	movs	r1, #127	; 0x7f
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
10003eaa:	002a      	movs	r2, r5
10003eac:	2300      	movs	r3, #0
10003eae:	468c      	mov	ip, r1
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
10003eb0:	7851      	ldrb	r1, [r2, #1]
10003eb2:	2905      	cmp	r1, #5
10003eb4:	d107      	bne.n	10003ec6 <tud_task+0x74e>
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
10003eb6:	4661      	mov	r1, ip
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
10003eb8:	7890      	ldrb	r0, [r2, #2]
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
10003eba:	4001      	ands	r1, r0
10003ebc:	0049      	lsls	r1, r1, #1
10003ebe:	4441      	add	r1, r8
10003ec0:	3113      	adds	r1, #19
10003ec2:	09c0      	lsrs	r0, r0, #7
10003ec4:	540c      	strb	r4, [r1, r0]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
10003ec6:	7811      	ldrb	r1, [r2, #0]
    len   = (uint16_t)(len + tu_desc_len(p_desc));
10003ec8:	185b      	adds	r3, r3, r1
10003eca:	b29b      	uxth	r3, r3
  return desc8 + desc8[DESC_OFFSET_LEN];
10003ecc:	1852      	adds	r2, r2, r1
  while( len < desc_len )
10003ece:	42b3      	cmp	r3, r6
10003ed0:	d3ee      	bcc.n	10003eb0 <tud_task+0x738>
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
10003ed2:	4b25      	ldr	r3, [pc, #148]	; (10003f68 <tud_task+0x7f0>)
        p_desc += drv_len; // next interface
10003ed4:	19ad      	adds	r5, r5, r6
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
10003ed6:	781b      	ldrb	r3, [r3, #0]
10003ed8:	42a3      	cmp	r3, r4
10003eda:	d300      	bcc.n	10003ede <tud_task+0x766>
10003edc:	e767      	b.n	10003dae <tud_task+0x636>
10003ede:	e4cd      	b.n	1000387c <tud_task+0x104>
      if (!tud_descriptor_bos_cb) return false;
10003ee0:	4b23      	ldr	r3, [pc, #140]	; (10003f70 <tud_task+0x7f8>)
10003ee2:	2b00      	cmp	r3, #0
10003ee4:	d100      	bne.n	10003ee8 <tud_task+0x770>
10003ee6:	e4c9      	b.n	1000387c <tud_task+0x104>
      tusb_desc_bos_t const* desc_bos = (tusb_desc_bos_t const*) tud_descriptor_bos_cb();
10003ee8:	e000      	b.n	10003eec <tud_task+0x774>
10003eea:	bf00      	nop
10003eec:	0004      	movs	r4, r0
      memcpy(&total_len, (uint8_t*) desc_config + offsetof(tusb_desc_configuration_t, wTotalLength), 2);
10003eee:	ab06      	add	r3, sp, #24
10003ef0:	1c9d      	adds	r5, r3, #2
10003ef2:	2202      	movs	r2, #2
10003ef4:	1ca1      	adds	r1, r4, #2
10003ef6:	0028      	movs	r0, r5
10003ef8:	f7fc fd22 	bl	10000940 <__wrap___aeabi_memcpy>
      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
10003efc:	0022      	movs	r2, r4
10003efe:	4648      	mov	r0, r9
10003f00:	882b      	ldrh	r3, [r5, #0]
10003f02:	a908      	add	r1, sp, #32
10003f04:	f000 f9d2 	bl	100042ac <tud_control_xfer>
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
10003f08:	2800      	cmp	r0, #0
10003f0a:	d000      	beq.n	10003f0e <tud_task+0x796>
10003f0c:	e445      	b.n	1000379a <tud_task+0x22>
10003f0e:	e4b5      	b.n	1000387c <tud_task+0x104>
      if ( tud_descriptor_device_qualifier_cb )
10003f10:	4b18      	ldr	r3, [pc, #96]	; (10003f74 <tud_task+0x7fc>)
10003f12:	2b00      	cmp	r3, #0
10003f14:	d100      	bne.n	10003f18 <tud_task+0x7a0>
10003f16:	e4b1      	b.n	1000387c <tud_task+0x104>
        uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
10003f18:	e000      	b.n	10003f1c <tud_task+0x7a4>
10003f1a:	bf00      	nop
10003f1c:	1e02      	subs	r2, r0, #0
        TU_ASSERT(desc_qualifier);
10003f1e:	d100      	bne.n	10003f22 <tud_task+0x7aa>
10003f20:	e4ac      	b.n	1000387c <tud_task+0x104>
        return tud_control_xfer(rhport, p_request, (void*) desc_qualifier, desc_qualifier[0]);
10003f22:	4648      	mov	r0, r9
10003f24:	7813      	ldrb	r3, [r2, #0]
10003f26:	a908      	add	r1, sp, #32
10003f28:	f000 f9c0 	bl	100042ac <tud_control_xfer>
10003f2c:	e7ec      	b.n	10003f08 <tud_task+0x790>
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, p_request->wIndex);
10003f2e:	8939      	ldrh	r1, [r7, #8]
10003f30:	f7fe f928 	bl	10002184 <tud_descriptor_string_cb>
10003f34:	1e02      	subs	r2, r0, #0
      TU_VERIFY(desc_str);
10003f36:	d1f4      	bne.n	10003f22 <tud_task+0x7aa>
10003f38:	e4a0      	b.n	1000387c <tud_task+0x104>
      tusb_desc_configuration_t const* desc_config = (tusb_desc_configuration_t const*) tud_descriptor_configuration_cb(desc_index);
10003f3a:	f7fe f91f 	bl	1000217c <tud_descriptor_configuration_cb>
10003f3e:	1e04      	subs	r4, r0, #0
      TU_ASSERT(desc_config);
10003f40:	d1d5      	bne.n	10003eee <tud_task+0x776>
10003f42:	e49b      	b.n	1000387c <tud_task+0x104>
      return tud_control_xfer(rhport, p_request, (void*) tud_descriptor_device_cb(), len);
10003f44:	f7fe f916 	bl	10002174 <tud_descriptor_device_cb>
10003f48:	2312      	movs	r3, #18
10003f4a:	0002      	movs	r2, r0
10003f4c:	a908      	add	r1, sp, #32
10003f4e:	4648      	mov	r0, r9
10003f50:	f000 f9ac 	bl	100042ac <tud_control_xfer>
10003f54:	e7d8      	b.n	10003f08 <tud_task+0x790>
  if (tud_mount_cb) tud_mount_cb();
10003f56:	4b08      	ldr	r3, [pc, #32]	; (10003f78 <tud_task+0x800>)
10003f58:	2b00      	cmp	r3, #0
10003f5a:	d100      	bne.n	10003f5e <tud_task+0x7e6>
10003f5c:	e67f      	b.n	10003c5e <tud_task+0x4e6>
10003f5e:	e000      	b.n	10003f62 <tud_task+0x7ea>
10003f60:	bf00      	nop
10003f62:	e67c      	b.n	10003c5e <tud_task+0x4e6>
10003f64:	10002fc1 	.word	0x10002fc1
10003f68:	20023b85 	.word	0x20023b85
10003f6c:	20022f14 	.word	0x20022f14
	...

10003f7c <dcd_event_bus_signal>:
{
10003f7c:	b530      	push	{r4, r5, lr}
10003f7e:	b085      	sub	sp, #20
10003f80:	0005      	movs	r5, r0
10003f82:	000c      	movs	r4, r1
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
10003f84:	220c      	movs	r2, #12
10003f86:	2100      	movs	r1, #0
10003f88:	a801      	add	r0, sp, #4
10003f8a:	f7fc fcd3 	bl	10000934 <__wrap_memset>
10003f8e:	466b      	mov	r3, sp
10003f90:	711d      	strb	r5, [r3, #4]
10003f92:	715c      	strb	r4, [r3, #5]
  switch (event->event_id)
10003f94:	2c04      	cmp	r4, #4
10003f96:	d04b      	beq.n	10004030 <dcd_event_bus_signal+0xb4>
10003f98:	d805      	bhi.n	10003fa6 <dcd_event_bus_signal+0x2a>
10003f9a:	2c02      	cmp	r4, #2
10003f9c:	d030      	beq.n	10004000 <dcd_event_bus_signal+0x84>
10003f9e:	2c03      	cmp	r4, #3
10003fa0:	d115      	bne.n	10003fce <dcd_event_bus_signal+0x52>
}
10003fa2:	b005      	add	sp, #20
10003fa4:	bd30      	pop	{r4, r5, pc}
  switch (event->event_id)
10003fa6:	2c05      	cmp	r4, #5
10003fa8:	d111      	bne.n	10003fce <dcd_event_bus_signal+0x52>
      if ( _usbd_dev.connected )
10003faa:	4b2a      	ldr	r3, [pc, #168]	; (10004054 <dcd_event_bus_signal+0xd8>)
10003fac:	781a      	ldrb	r2, [r3, #0]
10003fae:	07d2      	lsls	r2, r2, #31
10003fb0:	d5f7      	bpl.n	10003fa2 <dcd_event_bus_signal+0x26>
        _usbd_dev.suspended = 0;
10003fb2:	2104      	movs	r1, #4
10003fb4:	781a      	ldrb	r2, [r3, #0]
10003fb6:	438a      	bics	r2, r1
10003fb8:	701a      	strb	r2, [r3, #0]
        osal_queue_send(_usbd_q, event, in_isr);
10003fba:	4b27      	ldr	r3, [pc, #156]	; (10004058 <dcd_event_bus_signal+0xdc>)
10003fbc:	681c      	ldr	r4, [r3, #0]
    critsec->save = spin_lock_blocking(critsec->core.spin_lock);
10003fbe:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10003fc0:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
10003fc4:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10003fc6:	6813      	ldr	r3, [r2, #0]
10003fc8:	2b00      	cmp	r3, #0
10003fca:	d109      	bne.n	10003fe0 <dcd_event_bus_signal+0x64>
10003fcc:	e7fb      	b.n	10003fc6 <dcd_event_bus_signal+0x4a>
      osal_queue_send(_usbd_q, event, in_isr);
10003fce:	4b22      	ldr	r3, [pc, #136]	; (10004058 <dcd_event_bus_signal+0xdc>)
10003fd0:	681c      	ldr	r4, [r3, #0]
10003fd2:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10003fd4:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
10003fd8:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10003fda:	6813      	ldr	r3, [r2, #0]
10003fdc:	2b00      	cmp	r3, #0
10003fde:	d0fc      	beq.n	10003fda <dcd_event_bus_signal+0x5e>
    __asm volatile ("dmb");
10003fe0:	f3bf 8f5f 	dmb	sy
10003fe4:	61e1      	str	r1, [r4, #28]
  //  however osal_queue_recieve may be. therefore my assumption is that
  //  the fifo mutex is not populated for queues used from an IRQ context
  assert(!qhdl->ff.mutex);

  _osal_q_lock(qhdl);
  bool success = tu_fifo_write(&qhdl->ff, data);
10003fe6:	0020      	movs	r0, r4
10003fe8:	a901      	add	r1, sp, #4
10003fea:	f7ff fa87 	bl	100034fc <tu_fifo_write>
    spin_unlock(critsec->core.spin_lock, critsec->save);
10003fee:	69a2      	ldr	r2, [r4, #24]
10003ff0:	69e3      	ldr	r3, [r4, #28]
10003ff2:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10003ff6:	2100      	movs	r1, #0
10003ff8:	6011      	str	r1, [r2, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10003ffa:	f383 8810 	msr	PRIMASK, r3
}
10003ffe:	e7d0      	b.n	10003fa2 <dcd_event_bus_signal+0x26>
      _usbd_dev.connected  = 0;
10004000:	2101      	movs	r1, #1
10004002:	4b14      	ldr	r3, [pc, #80]	; (10004054 <dcd_event_bus_signal+0xd8>)
10004004:	781a      	ldrb	r2, [r3, #0]
10004006:	438a      	bics	r2, r1
10004008:	701a      	strb	r2, [r3, #0]
      _usbd_dev.addressed  = 0;
1000400a:	781a      	ldrb	r2, [r3, #0]
      _usbd_dev.suspended  = 0;
1000400c:	3103      	adds	r1, #3
      _usbd_dev.addressed  = 0;
1000400e:	43a2      	bics	r2, r4
10004010:	701a      	strb	r2, [r3, #0]
      _usbd_dev.cfg_num    = 0;
10004012:	2200      	movs	r2, #0
10004014:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended  = 0;
10004016:	781a      	ldrb	r2, [r3, #0]
10004018:	438a      	bics	r2, r1
1000401a:	701a      	strb	r2, [r3, #0]
      osal_queue_send(_usbd_q, event, in_isr);
1000401c:	4b0e      	ldr	r3, [pc, #56]	; (10004058 <dcd_event_bus_signal+0xdc>)
1000401e:	681c      	ldr	r4, [r3, #0]
    critsec->save = spin_lock_blocking(critsec->core.spin_lock);
10004020:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004022:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
10004026:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004028:	6813      	ldr	r3, [r2, #0]
1000402a:	2b00      	cmp	r3, #0
1000402c:	d1d8      	bne.n	10003fe0 <dcd_event_bus_signal+0x64>
1000402e:	e7fb      	b.n	10004028 <dcd_event_bus_signal+0xac>
      if ( _usbd_dev.connected )
10004030:	4b08      	ldr	r3, [pc, #32]	; (10004054 <dcd_event_bus_signal+0xd8>)
10004032:	781a      	ldrb	r2, [r3, #0]
10004034:	07d2      	lsls	r2, r2, #31
10004036:	d5b4      	bpl.n	10003fa2 <dcd_event_bus_signal+0x26>
        _usbd_dev.suspended = 1;
10004038:	2104      	movs	r1, #4
1000403a:	781a      	ldrb	r2, [r3, #0]
1000403c:	430a      	orrs	r2, r1
1000403e:	701a      	strb	r2, [r3, #0]
        osal_queue_send(_usbd_q, event, in_isr);
10004040:	4b05      	ldr	r3, [pc, #20]	; (10004058 <dcd_event_bus_signal+0xdc>)
10004042:	681c      	ldr	r4, [r3, #0]
10004044:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004046:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
1000404a:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000404c:	6813      	ldr	r3, [r2, #0]
1000404e:	2b00      	cmp	r3, #0
10004050:	d1c6      	bne.n	10003fe0 <dcd_event_bus_signal+0x64>
10004052:	e7fb      	b.n	1000404c <dcd_event_bus_signal+0xd0>
10004054:	20023244 	.word	0x20023244
10004058:	20023280 	.word	0x20023280

1000405c <dcd_event_setup_received>:
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
1000405c:	2300      	movs	r3, #0
{
1000405e:	b530      	push	{r4, r5, lr}
10004060:	b085      	sub	sp, #20
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
10004062:	ad01      	add	r5, sp, #4
10004064:	806b      	strh	r3, [r5, #2]
10004066:	7028      	strb	r0, [r5, #0]
10004068:	3306      	adds	r3, #6
  memcpy(&event.setup_received, setup, 8);
1000406a:	2208      	movs	r2, #8
1000406c:	a802      	add	r0, sp, #8
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
1000406e:	706b      	strb	r3, [r5, #1]
  memcpy(&event.setup_received, setup, 8);
10004070:	f7fc fc66 	bl	10000940 <__wrap___aeabi_memcpy>
      osal_queue_send(_usbd_q, event, in_isr);
10004074:	4b0c      	ldr	r3, [pc, #48]	; (100040a8 <dcd_event_setup_received+0x4c>)
10004076:	681c      	ldr	r4, [r3, #0]
10004078:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
1000407a:	f3ef 8310 	mrs	r3, PRIMASK
    __asm volatile ("cpsid i");
1000407e:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004080:	6811      	ldr	r1, [r2, #0]
10004082:	2900      	cmp	r1, #0
10004084:	d0fc      	beq.n	10004080 <dcd_event_setup_received+0x24>
    __asm volatile ("dmb");
10004086:	f3bf 8f5f 	dmb	sy
1000408a:	61e3      	str	r3, [r4, #28]
1000408c:	0029      	movs	r1, r5
1000408e:	0020      	movs	r0, r4
10004090:	f7ff fa34 	bl	100034fc <tu_fifo_write>
    spin_unlock(critsec->core.spin_lock, critsec->save);
10004094:	69a2      	ldr	r2, [r4, #24]
10004096:	69e3      	ldr	r3, [r4, #28]
10004098:	f3bf 8f5f 	dmb	sy
    *lock = 0;
1000409c:	2100      	movs	r1, #0
1000409e:	6011      	str	r1, [r2, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100040a0:	f383 8810 	msr	PRIMASK, r3
}
100040a4:	b005      	add	sp, #20
100040a6:	bd30      	pop	{r4, r5, pc}
100040a8:	20023280 	.word	0x20023280

100040ac <dcd_event_xfer_complete>:
{
100040ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100040ae:	46c6      	mov	lr, r8
100040b0:	4680      	mov	r8, r0
100040b2:	b500      	push	{lr}
100040b4:	b084      	sub	sp, #16
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
100040b6:	ac01      	add	r4, sp, #4
{
100040b8:	000f      	movs	r7, r1
100040ba:	0016      	movs	r6, r2
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
100040bc:	2100      	movs	r1, #0
100040be:	2208      	movs	r2, #8
100040c0:	0020      	movs	r0, r4
{
100040c2:	001d      	movs	r5, r3
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
100040c4:	f7fc fc36 	bl	10000934 <__wrap_memset>
100040c8:	4643      	mov	r3, r8
100040ca:	7023      	strb	r3, [r4, #0]
100040cc:	2307      	movs	r3, #7
100040ce:	7063      	strb	r3, [r4, #1]
      osal_queue_send(_usbd_q, event, in_isr);
100040d0:	4b0f      	ldr	r3, [pc, #60]	; (10004110 <dcd_event_xfer_complete+0x64>)
  event.xfer_complete.result  = result;
100040d2:	7165      	strb	r5, [r4, #5]
      osal_queue_send(_usbd_q, event, in_isr);
100040d4:	681d      	ldr	r5, [r3, #0]
  event.xfer_complete.ep_addr = ep_addr;
100040d6:	7127      	strb	r7, [r4, #4]
  event.xfer_complete.len     = xferred_bytes;
100040d8:	60a6      	str	r6, [r4, #8]
    critsec->save = spin_lock_blocking(critsec->core.spin_lock);
100040da:	69aa      	ldr	r2, [r5, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100040dc:	f3ef 8310 	mrs	r3, PRIMASK
    __asm volatile ("cpsid i");
100040e0:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100040e2:	6811      	ldr	r1, [r2, #0]
100040e4:	2900      	cmp	r1, #0
100040e6:	d0fc      	beq.n	100040e2 <dcd_event_xfer_complete+0x36>
    __asm volatile ("dmb");
100040e8:	f3bf 8f5f 	dmb	sy
100040ec:	61eb      	str	r3, [r5, #28]
100040ee:	0021      	movs	r1, r4
100040f0:	0028      	movs	r0, r5
100040f2:	f7ff fa03 	bl	100034fc <tu_fifo_write>
    spin_unlock(critsec->core.spin_lock, critsec->save);
100040f6:	69aa      	ldr	r2, [r5, #24]
100040f8:	69eb      	ldr	r3, [r5, #28]
100040fa:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100040fe:	2100      	movs	r1, #0
10004100:	6011      	str	r1, [r2, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004102:	f383 8810 	msr	PRIMASK, r3
}
10004106:	b004      	add	sp, #16
10004108:	bc80      	pop	{r7}
1000410a:	46b8      	mov	r8, r7
1000410c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000410e:	46c0      	nop			; (mov r8, r8)
10004110:	20023280 	.word	0x20023280

10004114 <usbd_open_edpt_pair>:
{
10004114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004116:	4647      	mov	r7, r8
10004118:	46d6      	mov	lr, sl
1000411a:	b580      	push	{r7, lr}
1000411c:	4698      	mov	r8, r3
1000411e:	9b08      	ldr	r3, [sp, #32]
10004120:	0006      	movs	r6, r0
10004122:	000c      	movs	r4, r1
10004124:	1e17      	subs	r7, r2, #0
10004126:	469a      	mov	sl, r3
  for(int i=0; i<ep_count; i++)
10004128:	d021      	beq.n	1000416e <usbd_open_edpt_pair+0x5a>
1000412a:	2500      	movs	r5, #0
1000412c:	e006      	b.n	1000413c <usbd_open_edpt_pair+0x28>
      (*ep_out) = desc_ep->bEndpointAddress;
1000412e:	4652      	mov	r2, sl
10004130:	7013      	strb	r3, [r2, #0]
10004132:	7823      	ldrb	r3, [r4, #0]
  for(int i=0; i<ep_count; i++)
10004134:	3501      	adds	r5, #1
10004136:	18e4      	adds	r4, r4, r3
10004138:	42bd      	cmp	r5, r7
1000413a:	da18      	bge.n	1000416e <usbd_open_edpt_pair+0x5a>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
1000413c:	7863      	ldrb	r3, [r4, #1]
1000413e:	2b05      	cmp	r3, #5
10004140:	d117      	bne.n	10004172 <usbd_open_edpt_pair+0x5e>
10004142:	78e1      	ldrb	r1, [r4, #3]
10004144:	0789      	lsls	r1, r1, #30
10004146:	0f89      	lsrs	r1, r1, #30
10004148:	4541      	cmp	r1, r8
1000414a:	d112      	bne.n	10004172 <usbd_open_edpt_pair+0x5e>
  return dcd_edpt_open(rhport, desc_ep);
1000414c:	0021      	movs	r1, r4
1000414e:	0030      	movs	r0, r6
10004150:	f000 facc 	bl	100046ec <dcd_edpt_open>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
10004154:	2800      	cmp	r0, #0
10004156:	d00c      	beq.n	10004172 <usbd_open_edpt_pair+0x5e>
    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
10004158:	78a3      	ldrb	r3, [r4, #2]
1000415a:	09da      	lsrs	r2, r3, #7
1000415c:	2a01      	cmp	r2, #1
1000415e:	d1e6      	bne.n	1000412e <usbd_open_edpt_pair+0x1a>
      (*ep_in) = desc_ep->bEndpointAddress;
10004160:	9a09      	ldr	r2, [sp, #36]	; 0x24
  for(int i=0; i<ep_count; i++)
10004162:	3501      	adds	r5, #1
      (*ep_out) = desc_ep->bEndpointAddress;
10004164:	7013      	strb	r3, [r2, #0]
10004166:	7823      	ldrb	r3, [r4, #0]
10004168:	18e4      	adds	r4, r4, r3
  for(int i=0; i<ep_count; i++)
1000416a:	42bd      	cmp	r5, r7
1000416c:	dbe6      	blt.n	1000413c <usbd_open_edpt_pair+0x28>
  return true;
1000416e:	2001      	movs	r0, #1
10004170:	e000      	b.n	10004174 <usbd_open_edpt_pair+0x60>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
10004172:	2000      	movs	r0, #0
}
10004174:	bcc0      	pop	{r6, r7}
10004176:	46ba      	mov	sl, r7
10004178:	46b0      	mov	r8, r6
1000417a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1000417c <usbd_edpt_open>:
{
1000417c:	b510      	push	{r4, lr}
  return dcd_edpt_open(rhport, desc_ep);
1000417e:	f000 fab5 	bl	100046ec <dcd_edpt_open>
}
10004182:	bd10      	pop	{r4, pc}

10004184 <usbd_edpt_claim>:
{
10004184:	b570      	push	{r4, r5, r6, lr}
  TU_VERIFY((_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0));
10004186:	247f      	movs	r4, #127	; 0x7f
10004188:	400c      	ands	r4, r1
1000418a:	0063      	lsls	r3, r4, #1
1000418c:	4c14      	ldr	r4, [pc, #80]	; (100041e0 <usbd_edpt_claim+0x5c>)
1000418e:	09c9      	lsrs	r1, r1, #7
10004190:	18e4      	adds	r4, r4, r3
10004192:	1864      	adds	r4, r4, r1
10004194:	3420      	adds	r4, #32
10004196:	7963      	ldrb	r3, [r4, #5]
10004198:	07db      	lsls	r3, r3, #31
1000419a:	0fdd      	lsrs	r5, r3, #31
1000419c:	2b00      	cmp	r3, #0
1000419e:	d118      	bne.n	100041d2 <usbd_edpt_claim+0x4e>
100041a0:	7963      	ldrb	r3, [r4, #5]
100041a2:	075b      	lsls	r3, r3, #29
100041a4:	d501      	bpl.n	100041aa <usbd_edpt_claim+0x26>
}
100041a6:	0028      	movs	r0, r5
100041a8:	bd70      	pop	{r4, r5, r6, pc}
    return mutex_enter_timeout_ms(mutex_hdl, msec);
100041aa:	2101      	movs	r1, #1
  osal_mutex_lock(_usbd_mutex, OSAL_TIMEOUT_WAIT_FOREVER);
100041ac:	4e0d      	ldr	r6, [pc, #52]	; (100041e4 <usbd_edpt_claim+0x60>)
100041ae:	4249      	negs	r1, r1
100041b0:	6830      	ldr	r0, [r6, #0]
100041b2:	f002 fe05 	bl	10006dc0 <__mutex_enter_timeout_ms_veneer>
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0);
100041b6:	7963      	ldrb	r3, [r4, #5]
100041b8:	07db      	lsls	r3, r3, #31
100041ba:	0fdd      	lsrs	r5, r3, #31
100041bc:	2b00      	cmp	r3, #0
100041be:	d10a      	bne.n	100041d6 <usbd_edpt_claim+0x52>
100041c0:	7963      	ldrb	r3, [r4, #5]
100041c2:	075b      	lsls	r3, r3, #29
100041c4:	d408      	bmi.n	100041d8 <usbd_edpt_claim+0x54>
    _usbd_dev.ep_status[epnum][dir].claimed = 1;
100041c6:	2204      	movs	r2, #4
100041c8:	7963      	ldrb	r3, [r4, #5]
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0);
100041ca:	2501      	movs	r5, #1
    _usbd_dev.ep_status[epnum][dir].claimed = 1;
100041cc:	4313      	orrs	r3, r2
100041ce:	7163      	strb	r3, [r4, #5]
100041d0:	e002      	b.n	100041d8 <usbd_edpt_claim+0x54>
  TU_VERIFY((_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0));
100041d2:	2500      	movs	r5, #0
100041d4:	e7e7      	b.n	100041a6 <usbd_edpt_claim+0x22>
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0);
100041d6:	2500      	movs	r5, #0
    mutex_exit(mutex_hdl);
100041d8:	6830      	ldr	r0, [r6, #0]
100041da:	f002 fdd1 	bl	10006d80 <__mutex_exit_veneer>
  return ret;
100041de:	e7e2      	b.n	100041a6 <usbd_edpt_claim+0x22>
100041e0:	20023244 	.word	0x20023244
100041e4:	2002327c 	.word	0x2002327c

100041e8 <usbd_edpt_release>:
{
100041e8:	b570      	push	{r4, r5, r6, lr}
100041ea:	000c      	movs	r4, r1
    return mutex_enter_timeout_ms(mutex_hdl, msec);
100041ec:	2101      	movs	r1, #1
  osal_mutex_lock(_usbd_mutex, OSAL_TIMEOUT_WAIT_FOREVER);
100041ee:	4d0f      	ldr	r5, [pc, #60]	; (1000422c <usbd_edpt_release+0x44>)
100041f0:	4249      	negs	r1, r1
100041f2:	6828      	ldr	r0, [r5, #0]
100041f4:	f002 fde4 	bl	10006dc0 <__mutex_enter_timeout_ms_veneer>
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 1);
100041f8:	217f      	movs	r1, #127	; 0x7f
100041fa:	4021      	ands	r1, r4
100041fc:	004b      	lsls	r3, r1, #1
100041fe:	490c      	ldr	r1, [pc, #48]	; (10004230 <usbd_edpt_release+0x48>)
10004200:	09e4      	lsrs	r4, r4, #7
10004202:	18c9      	adds	r1, r1, r3
10004204:	1909      	adds	r1, r1, r4
10004206:	3120      	adds	r1, #32
10004208:	794b      	ldrb	r3, [r1, #5]
1000420a:	2400      	movs	r4, #0
1000420c:	07db      	lsls	r3, r3, #31
1000420e:	d408      	bmi.n	10004222 <usbd_edpt_release+0x3a>
10004210:	794b      	ldrb	r3, [r1, #5]
10004212:	075b      	lsls	r3, r3, #29
10004214:	0fdc      	lsrs	r4, r3, #31
10004216:	2b00      	cmp	r3, #0
10004218:	da03      	bge.n	10004222 <usbd_edpt_release+0x3a>
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
1000421a:	2204      	movs	r2, #4
1000421c:	794b      	ldrb	r3, [r1, #5]
1000421e:	4393      	bics	r3, r2
10004220:	714b      	strb	r3, [r1, #5]
    mutex_exit(mutex_hdl);
10004222:	6828      	ldr	r0, [r5, #0]
10004224:	f002 fdac 	bl	10006d80 <__mutex_exit_veneer>
}
10004228:	0020      	movs	r0, r4
1000422a:	bd70      	pop	{r4, r5, r6, pc}
1000422c:	2002327c 	.word	0x2002327c
10004230:	20023244 	.word	0x20023244

10004234 <usbd_edpt_xfer>:
{
10004234:	b570      	push	{r4, r5, r6, lr}
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
10004236:	257f      	movs	r5, #127	; 0x7f
10004238:	4c0f      	ldr	r4, [pc, #60]	; (10004278 <usbd_edpt_xfer+0x44>)
1000423a:	400d      	ands	r5, r1
1000423c:	006d      	lsls	r5, r5, #1
1000423e:	1964      	adds	r4, r4, r5
{
10004240:	0006      	movs	r6, r0
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
10004242:	09c8      	lsrs	r0, r1, #7
10004244:	1824      	adds	r4, r4, r0
10004246:	3420      	adds	r4, #32
10004248:	7965      	ldrb	r5, [r4, #5]
1000424a:	2000      	movs	r0, #0
1000424c:	07ed      	lsls	r5, r5, #31
1000424e:	d500      	bpl.n	10004252 <usbd_edpt_xfer+0x1e>
}
10004250:	bd70      	pop	{r4, r5, r6, pc}
  _usbd_dev.ep_status[epnum][dir].busy = true;
10004252:	2501      	movs	r5, #1
10004254:	7960      	ldrb	r0, [r4, #5]
10004256:	4328      	orrs	r0, r5
10004258:	7160      	strb	r0, [r4, #5]
  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
1000425a:	0030      	movs	r0, r6
1000425c:	f000 faec 	bl	10004838 <dcd_edpt_xfer>
10004260:	2800      	cmp	r0, #0
10004262:	d1f5      	bne.n	10004250 <usbd_edpt_xfer+0x1c>
    _usbd_dev.ep_status[epnum][dir].busy = false;
10004264:	2201      	movs	r2, #1
10004266:	7963      	ldrb	r3, [r4, #5]
10004268:	4393      	bics	r3, r2
1000426a:	7163      	strb	r3, [r4, #5]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
1000426c:	7963      	ldrb	r3, [r4, #5]
1000426e:	3203      	adds	r2, #3
10004270:	4393      	bics	r3, r2
10004272:	7163      	strb	r3, [r4, #5]
    return false;
10004274:	e7ec      	b.n	10004250 <usbd_edpt_xfer+0x1c>
10004276:	46c0      	nop			; (mov r8, r8)
10004278:	20023244 	.word	0x20023244

1000427c <tud_control_status>:
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
}

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
1000427c:	b570      	push	{r4, r5, r6, lr}
  _ctrl_xfer.request       = (*request);
1000427e:	4e0a      	ldr	r6, [pc, #40]	; (100042a8 <tud_control_status+0x2c>)
{
10004280:	0005      	movs	r5, r0
  _ctrl_xfer.request       = (*request);
10004282:	0030      	movs	r0, r6
10004284:	2208      	movs	r2, #8
{
10004286:	000c      	movs	r4, r1
  _ctrl_xfer.request       = (*request);
10004288:	f7fc fb5a 	bl	10000940 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer        = NULL;
1000428c:	2300      	movs	r3, #0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
1000428e:	217f      	movs	r1, #127	; 0x7f
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
10004290:	60f3      	str	r3, [r6, #12]
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10004292:	7822      	ldrb	r2, [r4, #0]
  _ctrl_xfer.buffer        = NULL;
10004294:	60b3      	str	r3, [r6, #8]
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10004296:	4291      	cmp	r1, r2
10004298:	415b      	adcs	r3, r3
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
1000429a:	0028      	movs	r0, r5
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
1000429c:	01d9      	lsls	r1, r3, #7
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
1000429e:	2200      	movs	r2, #0
100042a0:	2300      	movs	r3, #0
100042a2:	f000 fac9 	bl	10004838 <dcd_edpt_xfer>

  return _status_stage_xact(rhport, request);
}
100042a6:	bd70      	pop	{r4, r5, r6, pc}
100042a8:	200231e8 	.word	0x200231e8

100042ac <tud_control_xfer>:
}

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
100042ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100042ae:	46ce      	mov	lr, r9
100042b0:	4647      	mov	r7, r8
100042b2:	4691      	mov	r9, r2
  _ctrl_xfer.request       = (*request);
100042b4:	4e2a      	ldr	r6, [pc, #168]	; (10004360 <tud_control_xfer+0xb4>)
{
100042b6:	b580      	push	{r7, lr}
  _ctrl_xfer.request       = (*request);
100042b8:	2208      	movs	r2, #8
{
100042ba:	0007      	movs	r7, r0
  _ctrl_xfer.request       = (*request);
100042bc:	0030      	movs	r0, r6
{
100042be:	000d      	movs	r5, r1
100042c0:	4698      	mov	r8, r3
  _ctrl_xfer.request       = (*request);
100042c2:	f7fc fb3d 	bl	10000940 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
100042c6:	464b      	mov	r3, r9
100042c8:	60b3      	str	r3, [r6, #8]
  _ctrl_xfer.total_xferred = 0U;
100042ca:	2300      	movs	r3, #0
100042cc:	81f3      	strh	r3, [r6, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
100042ce:	79ec      	ldrb	r4, [r5, #7]
100042d0:	79a9      	ldrb	r1, [r5, #6]
100042d2:	0224      	lsls	r4, r4, #8
100042d4:	430c      	orrs	r4, r1
static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
100042d6:	1c23      	adds	r3, r4, #0
100042d8:	4544      	cmp	r4, r8
100042da:	d900      	bls.n	100042de <tud_control_xfer+0x32>
100042dc:	4643      	mov	r3, r8
100042de:	b29a      	uxth	r2, r3
100042e0:	4690      	mov	r8, r2
100042e2:	81b3      	strh	r3, [r6, #12]
  
  if (request->wLength > 0U)
100042e4:	2c00      	cmp	r4, #0
100042e6:	d013      	beq.n	10004310 <tud_control_xfer+0x64>
  {
    if(_ctrl_xfer.data_len > 0U)
100042e8:	2a00      	cmp	r2, #0
100042ea:	d01f      	beq.n	1000432c <tud_control_xfer+0x80>
    {
      TU_ASSERT(buffer);
100042ec:	464b      	mov	r3, r9
100042ee:	2b00      	cmp	r3, #0
100042f0:	d034      	beq.n	1000435c <tud_control_xfer+0xb0>
100042f2:	1c13      	adds	r3, r2, #0
100042f4:	2a40      	cmp	r2, #64	; 0x40
100042f6:	d81f      	bhi.n	10004338 <tud_control_xfer+0x8c>
100042f8:	b29b      	uxth	r3, r3
100042fa:	4698      	mov	r8, r3
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
100042fc:	7833      	ldrb	r3, [r6, #0]
100042fe:	2b7f      	cmp	r3, #127	; 0x7f
10004300:	d820      	bhi.n	10004344 <tud_control_xfer+0x98>
10004302:	2100      	movs	r1, #0
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
10004304:	4a17      	ldr	r2, [pc, #92]	; (10004364 <tud_control_xfer+0xb8>)
10004306:	4643      	mov	r3, r8
10004308:	0038      	movs	r0, r7
1000430a:	f000 fa95 	bl	10004838 <dcd_edpt_xfer>
1000430e:	e009      	b.n	10004324 <tud_control_xfer+0x78>
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10004310:	227f      	movs	r2, #127	; 0x7f
10004312:	782b      	ldrb	r3, [r5, #0]
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
10004314:	0038      	movs	r0, r7
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10004316:	429a      	cmp	r2, r3
10004318:	4164      	adcs	r4, r4
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
1000431a:	2300      	movs	r3, #0
1000431c:	2200      	movs	r2, #0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
1000431e:	01e1      	lsls	r1, r4, #7
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
10004320:	f000 fa8a 	bl	10004838 <dcd_edpt_xfer>
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
  }

  return true;
}
10004324:	bcc0      	pop	{r6, r7}
10004326:	46b9      	mov	r9, r7
10004328:	46b0      	mov	r8, r6
1000432a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
1000432c:	7833      	ldrb	r3, [r6, #0]
1000432e:	2b7f      	cmp	r3, #127	; 0x7f
10004330:	d911      	bls.n	10004356 <tud_control_xfer+0xaa>
    ep_addr = EDPT_CTRL_IN;
10004332:	2180      	movs	r1, #128	; 0x80
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
10004334:	2200      	movs	r2, #0
10004336:	e7e6      	b.n	10004306 <tud_control_xfer+0x5a>
10004338:	2340      	movs	r3, #64	; 0x40
1000433a:	b29b      	uxth	r3, r3
1000433c:	4698      	mov	r8, r3
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
1000433e:	7833      	ldrb	r3, [r6, #0]
10004340:	2b7f      	cmp	r3, #127	; 0x7f
10004342:	d9de      	bls.n	10004302 <tud_control_xfer+0x56>
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
10004344:	4c07      	ldr	r4, [pc, #28]	; (10004364 <tud_control_xfer+0xb8>)
10004346:	4642      	mov	r2, r8
10004348:	4649      	mov	r1, r9
1000434a:	0020      	movs	r0, r4
1000434c:	f7fc faf8 	bl	10000940 <__wrap___aeabi_memcpy>
    ep_addr = EDPT_CTRL_IN;
10004350:	2180      	movs	r1, #128	; 0x80
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
10004352:	0022      	movs	r2, r4
10004354:	e7d7      	b.n	10004306 <tud_control_xfer+0x5a>
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
10004356:	2100      	movs	r1, #0
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
10004358:	2200      	movs	r2, #0
1000435a:	e7d4      	b.n	10004306 <tud_control_xfer+0x5a>
      TU_ASSERT(buffer);
1000435c:	2000      	movs	r0, #0
1000435e:	e7e1      	b.n	10004324 <tud_control_xfer+0x78>
10004360:	200231e8 	.word	0x200231e8
10004364:	20023204 	.word	0x20023204

10004368 <usbd_control_reset>:
//--------------------------------------------------------------------+
// USBD API
//--------------------------------------------------------------------+

void usbd_control_reset(void)
{
10004368:	b510      	push	{r4, lr}
  tu_varclr(&_ctrl_xfer);
1000436a:	2214      	movs	r2, #20
1000436c:	2100      	movs	r1, #0
1000436e:	4802      	ldr	r0, [pc, #8]	; (10004378 <usbd_control_reset+0x10>)
10004370:	f7fc fae0 	bl	10000934 <__wrap_memset>
}
10004374:	bd10      	pop	{r4, pc}
10004376:	46c0      	nop			; (mov r8, r8)
10004378:	200231e8 	.word	0x200231e8

1000437c <usbd_control_set_complete_callback>:

// TODO may find a better way
void usbd_control_set_complete_callback( bool (*fp) (uint8_t, tusb_control_request_t const * ) )
{
  _ctrl_xfer.complete_cb = fp;
1000437c:	4b01      	ldr	r3, [pc, #4]	; (10004384 <usbd_control_set_complete_callback+0x8>)
1000437e:	6118      	str	r0, [r3, #16]
}
10004380:	4770      	bx	lr
10004382:	46c0      	nop			; (mov r8, r8)
10004384:	200231e8 	.word	0x200231e8

10004388 <usbd_control_set_request>:

// useful for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
10004388:	b510      	push	{r4, lr}
  _ctrl_xfer.request       = (*request);
1000438a:	4c05      	ldr	r4, [pc, #20]	; (100043a0 <usbd_control_set_request+0x18>)
{
1000438c:	0001      	movs	r1, r0
  _ctrl_xfer.request       = (*request);
1000438e:	2208      	movs	r2, #8
10004390:	0020      	movs	r0, r4
10004392:	f7fc fad5 	bl	10000940 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer        = NULL;
10004396:	2300      	movs	r3, #0
10004398:	60a3      	str	r3, [r4, #8]
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
1000439a:	60e3      	str	r3, [r4, #12]
}
1000439c:	bd10      	pop	{r4, pc}
1000439e:	46c0      	nop			; (mov r8, r8)
100043a0:	200231e8 	.word	0x200231e8

100043a4 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
100043a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
100043a6:	4d37      	ldr	r5, [pc, #220]	; (10004484 <usbd_control_xfer_cb+0xe0>)
{
100043a8:	001c      	movs	r4, r3
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
100043aa:	782b      	ldrb	r3, [r5, #0]
{
100043ac:	0006      	movs	r6, r0
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
100043ae:	09da      	lsrs	r2, r3, #7
100043b0:	09c9      	lsrs	r1, r1, #7
100043b2:	428a      	cmp	r2, r1
100043b4:	d00c      	beq.n	100043d0 <usbd_control_xfer_cb+0x2c>
  {
    TU_ASSERT(0 == xferred_bytes);
100043b6:	2700      	movs	r7, #0
100043b8:	2c00      	cmp	r4, #0
100043ba:	d001      	beq.n	100043c0 <usbd_control_xfer_cb+0x1c>
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
  }

  return true;
}
100043bc:	0038      	movs	r0, r7
100043be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
100043c0:	4b31      	ldr	r3, [pc, #196]	; (10004488 <usbd_control_xfer_cb+0xe4>)
    return true;
100043c2:	3701      	adds	r7, #1
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
100043c4:	2b00      	cmp	r3, #0
100043c6:	d0f9      	beq.n	100043bc <usbd_control_xfer_cb+0x18>
100043c8:	0029      	movs	r1, r5
100043ca:	f000 f973 	bl	100046b4 <dcd_edpt0_status_complete>
100043ce:	e7f5      	b.n	100043bc <usbd_control_xfer_cb+0x18>
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
100043d0:	2b7f      	cmp	r3, #127	; 0x7f
100043d2:	d806      	bhi.n	100043e2 <usbd_control_xfer_cb+0x3e>
    TU_VERIFY(_ctrl_xfer.buffer);
100043d4:	68a8      	ldr	r0, [r5, #8]
100043d6:	2800      	cmp	r0, #0
100043d8:	d038      	beq.n	1000444c <usbd_control_xfer_cb+0xa8>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
100043da:	0022      	movs	r2, r4
100043dc:	492b      	ldr	r1, [pc, #172]	; (1000448c <usbd_control_xfer_cb+0xe8>)
100043de:	f7fc faaf 	bl	10000940 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer += xferred_bytes;
100043e2:	68ab      	ldr	r3, [r5, #8]
  _ctrl_xfer.total_xferred += xferred_bytes;
100043e4:	89ea      	ldrh	r2, [r5, #14]
  _ctrl_xfer.buffer += xferred_bytes;
100043e6:	1919      	adds	r1, r3, r4
  _ctrl_xfer.total_xferred += xferred_bytes;
100043e8:	1912      	adds	r2, r2, r4
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
100043ea:	88eb      	ldrh	r3, [r5, #6]
  _ctrl_xfer.total_xferred += xferred_bytes;
100043ec:	b292      	uxth	r2, r2
100043ee:	81ea      	strh	r2, [r5, #14]
  _ctrl_xfer.buffer += xferred_bytes;
100043f0:	60a9      	str	r1, [r5, #8]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
100043f2:	4293      	cmp	r3, r2
100043f4:	d015      	beq.n	10004422 <usbd_control_xfer_cb+0x7e>
100043f6:	2c3f      	cmp	r4, #63	; 0x3f
100043f8:	d913      	bls.n	10004422 <usbd_control_xfer_cb+0x7e>
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
100043fa:	89ac      	ldrh	r4, [r5, #12]
100043fc:	1aa0      	subs	r0, r4, r2
100043fe:	1c07      	adds	r7, r0, #0
10004400:	b280      	uxth	r0, r0
10004402:	2840      	cmp	r0, #64	; 0x40
10004404:	d82e      	bhi.n	10004464 <usbd_control_xfer_cb+0xc0>
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
10004406:	782b      	ldrb	r3, [r5, #0]
10004408:	b2bf      	uxth	r7, r7
1000440a:	2b7f      	cmp	r3, #127	; 0x7f
1000440c:	d82c      	bhi.n	10004468 <usbd_control_xfer_cb+0xc4>
  uint8_t ep_addr = EDPT_CTRL_OUT;
1000440e:	2100      	movs	r1, #0
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
10004410:	42a2      	cmp	r2, r4
10004412:	d034      	beq.n	1000447e <usbd_control_xfer_cb+0xda>
10004414:	4a1d      	ldr	r2, [pc, #116]	; (1000448c <usbd_control_xfer_cb+0xe8>)
10004416:	003b      	movs	r3, r7
10004418:	0030      	movs	r0, r6
1000441a:	f000 fa0d 	bl	10004838 <dcd_edpt_xfer>
1000441e:	0007      	movs	r7, r0
10004420:	e7cc      	b.n	100043bc <usbd_control_xfer_cb+0x18>
    if ( _ctrl_xfer.complete_cb )
10004422:	692b      	ldr	r3, [r5, #16]
10004424:	2b00      	cmp	r3, #0
10004426:	d004      	beq.n	10004432 <usbd_control_xfer_cb+0x8e>
      is_ok = _ctrl_xfer.complete_cb(rhport, &_ctrl_xfer.request);
10004428:	0029      	movs	r1, r5
1000442a:	0030      	movs	r0, r6
1000442c:	4798      	blx	r3
    if ( is_ok )
1000442e:	2800      	cmp	r0, #0
10004430:	d00e      	beq.n	10004450 <usbd_control_xfer_cb+0xac>
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10004432:	227f      	movs	r2, #127	; 0x7f
10004434:	2100      	movs	r1, #0
10004436:	782b      	ldrb	r3, [r5, #0]
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
10004438:	0030      	movs	r0, r6
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
1000443a:	429a      	cmp	r2, r3
1000443c:	4149      	adcs	r1, r1
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
1000443e:	2300      	movs	r3, #0
10004440:	2200      	movs	r2, #0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10004442:	01c9      	lsls	r1, r1, #7
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
10004444:	f000 f9f8 	bl	10004838 <dcd_edpt_xfer>
10004448:	0007      	movs	r7, r0
1000444a:	e7b7      	b.n	100043bc <usbd_control_xfer_cb+0x18>
    TU_ASSERT(0 == xferred_bytes);
1000444c:	2700      	movs	r7, #0
1000444e:	e7b5      	b.n	100043bc <usbd_control_xfer_cb+0x18>
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
10004450:	2100      	movs	r1, #0
10004452:	0030      	movs	r0, r6
10004454:	f000 fa06 	bl	10004864 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
10004458:	2180      	movs	r1, #128	; 0x80
1000445a:	0030      	movs	r0, r6
1000445c:	f000 fa02 	bl	10004864 <dcd_edpt_stall>
  return true;
10004460:	2701      	movs	r7, #1
10004462:	e7ab      	b.n	100043bc <usbd_control_xfer_cb+0x18>
10004464:	2740      	movs	r7, #64	; 0x40
10004466:	e7ce      	b.n	10004406 <usbd_control_xfer_cb+0x62>
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
10004468:	42a2      	cmp	r2, r4
1000446a:	d007      	beq.n	1000447c <usbd_control_xfer_cb+0xd8>
1000446c:	4c07      	ldr	r4, [pc, #28]	; (1000448c <usbd_control_xfer_cb+0xe8>)
1000446e:	003a      	movs	r2, r7
10004470:	0020      	movs	r0, r4
10004472:	f7fc fa65 	bl	10000940 <__wrap___aeabi_memcpy>
    ep_addr = EDPT_CTRL_IN;
10004476:	2180      	movs	r1, #128	; 0x80
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
10004478:	0022      	movs	r2, r4
1000447a:	e7cc      	b.n	10004416 <usbd_control_xfer_cb+0x72>
    ep_addr = EDPT_CTRL_IN;
1000447c:	2180      	movs	r1, #128	; 0x80
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
1000447e:	2200      	movs	r2, #0
10004480:	e7c9      	b.n	10004416 <usbd_control_xfer_cb+0x72>
10004482:	46c0      	nop			; (mov r8, r8)
10004484:	200231e8 	.word	0x200231e8
10004488:	100046b5 	.word	0x100046b5
1000448c:	20023204 	.word	0x20023204

10004490 <dcd_rp2040_irq>:
    _hw_endpoint_clear_stall(ep);
}

static void dcd_rp2040_irq(void)
{
    uint32_t status = usb_hw->ints;
10004490:	2398      	movs	r3, #152	; 0x98
{
10004492:	b5f0      	push	{r4, r5, r6, r7, lr}
10004494:	4645      	mov	r5, r8
10004496:	46de      	mov	lr, fp
10004498:	4657      	mov	r7, sl
1000449a:	464e      	mov	r6, r9
    uint32_t status = usb_hw->ints;
1000449c:	4a42      	ldr	r2, [pc, #264]	; (100045a8 <dcd_rp2040_irq+0x118>)
{
1000449e:	b5e0      	push	{r5, r6, r7, lr}
    uint32_t status = usb_hw->ints;
100044a0:	58d3      	ldr	r3, [r2, r3]
    uint32_t handled = 0;

    if (status & USB_INTS_SETUP_REQ_BITS)
100044a2:	2480      	movs	r4, #128	; 0x80
    uint32_t status = usb_hw->ints;
100044a4:	4698      	mov	r8, r3
    if (status & USB_INTS_SETUP_REQ_BITS)
100044a6:	001d      	movs	r5, r3
100044a8:	2310      	movs	r3, #16
{
100044aa:	b085      	sub	sp, #20
100044ac:	9303      	str	r3, [sp, #12]
    if (status & USB_INTS_SETUP_REQ_BITS)
100044ae:	4643      	mov	r3, r8
100044b0:	0264      	lsls	r4, r4, #9
100044b2:	4025      	ands	r5, r4
100044b4:	4223      	tst	r3, r4
100044b6:	d014      	beq.n	100044e2 <dcd_rp2040_irq+0x52>
        ep->next_pid = 1u;
100044b8:	2101      	movs	r1, #1
100044ba:	2039      	movs	r0, #57	; 0x39
        ep->stalled  = 0;
100044bc:	2200      	movs	r2, #0
        ep->next_pid = 1u;
100044be:	4b3b      	ldr	r3, [pc, #236]	; (100045ac <dcd_rp2040_irq+0x11c>)
    {
        handled |= USB_INTS_SETUP_REQ_BITS;
100044c0:	0025      	movs	r5, r4
        ep->next_pid = 1u;
100044c2:	5419      	strb	r1, [r3, r0]
100044c4:	7159      	strb	r1, [r3, #5]
        ep->stalled  = 0;
100044c6:	3147      	adds	r1, #71	; 0x47
100044c8:	545a      	strb	r2, [r3, r1]
100044ca:	751a      	strb	r2, [r3, #20]
        uint8_t const *setup = (uint8_t const *)&usb_dpram->setup_packet;
        // Clear stall bits and reset pid
        reset_ep0();
        // Pass setup packet to tiny usb
        dcd_event_setup_received(0, setup, true);
100044cc:	2000      	movs	r0, #0
100044ce:	3201      	adds	r2, #1
100044d0:	4937      	ldr	r1, [pc, #220]	; (100045b0 <dcd_rp2040_irq+0x120>)
100044d2:	f7ff fdc3 	bl	1000405c <dcd_event_setup_received>
        usb_hw_clear->sie_status = USB_SIE_STATUS_SETUP_REC_BITS;
100044d6:	2280      	movs	r2, #128	; 0x80
100044d8:	4b36      	ldr	r3, [pc, #216]	; (100045b4 <dcd_rp2040_irq+0x124>)
100044da:	0292      	lsls	r2, r2, #10
100044dc:	651a      	str	r2, [r3, #80]	; 0x50
100044de:	4b36      	ldr	r3, [pc, #216]	; (100045b8 <dcd_rp2040_irq+0x128>)
100044e0:	9303      	str	r3, [sp, #12]
    }

    if (status & USB_INTS_BUFF_STATUS_BITS)
100044e2:	4643      	mov	r3, r8
100044e4:	06db      	lsls	r3, r3, #27
100044e6:	d40d      	bmi.n	10004504 <dcd_rp2040_irq+0x74>
    {
        handled |= USB_INTS_BUFF_STATUS_BITS;
        hw_handle_buff_status();
    }

    if (status & USB_INTS_BUS_RESET_BITS)
100044e8:	2380      	movs	r3, #128	; 0x80
100044ea:	4642      	mov	r2, r8
100044ec:	015b      	lsls	r3, r3, #5
100044ee:	421a      	tst	r2, r3
100044f0:	d138      	bne.n	10004564 <dcd_rp2040_irq+0xd4>
#if TUD_OPT_RP2040_USB_DEVICE_ENUMERATION_FIX
        rp2040_usb_device_enumeration_fix();
#endif
    }

    if (status ^ handled)
100044f2:	4545      	cmp	r5, r8
100044f4:	d152      	bne.n	1000459c <dcd_rp2040_irq+0x10c>
    {
        panic("Unhandled IRQ 0x%x\n", (uint) (status ^ handled));
    }
}
100044f6:	b005      	add	sp, #20
100044f8:	bcf0      	pop	{r4, r5, r6, r7}
100044fa:	46bb      	mov	fp, r7
100044fc:	46b2      	mov	sl, r6
100044fe:	46a9      	mov	r9, r5
10004500:	46a0      	mov	r8, r4
10004502:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t remaining_buffers = usb_hw->buf_status;
10004504:	4b28      	ldr	r3, [pc, #160]	; (100045a8 <dcd_rp2040_irq+0x118>)
10004506:	6d9f      	ldr	r7, [r3, #88]	; 0x58
10004508:	469a      	mov	sl, r3
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
1000450a:	2f00      	cmp	r7, #0
1000450c:	d024      	beq.n	10004558 <dcd_rp2040_irq+0xc8>
            usb_hw_clear->buf_status = bit;
1000450e:	4b29      	ldr	r3, [pc, #164]	; (100045b4 <dcd_rp2040_irq+0x124>)
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
10004510:	2500      	movs	r5, #0
    uint bit = 1u;
10004512:	2401      	movs	r4, #1
            usb_hw_clear->buf_status = bit;
10004514:	469b      	mov	fp, r3
10004516:	e003      	b.n	10004520 <dcd_rp2040_irq+0x90>
        bit <<= 1u;
10004518:	0064      	lsls	r4, r4, #1
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
1000451a:	3501      	adds	r5, #1
1000451c:	2d20      	cmp	r5, #32
1000451e:	d01b      	beq.n	10004558 <dcd_rp2040_irq+0xc8>
        if (remaining_buffers & bit)
10004520:	4227      	tst	r7, r4
10004522:	d0f9      	beq.n	10004518 <dcd_rp2040_irq+0x88>
            uint __unused which = (usb_hw->buf_cpu_should_handle & bit) ? 1 : 0;
10004524:	4653      	mov	r3, sl
10004526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            usb_hw_clear->buf_status = bit;
10004528:	465b      	mov	r3, fp
    return &hw_endpoints[num][in];
1000452a:	2668      	movs	r6, #104	; 0x68
1000452c:	2201      	movs	r2, #1
            usb_hw_clear->buf_status = bit;
1000452e:	659c      	str	r4, [r3, #88]	; 0x58
            struct hw_endpoint *ep = hw_endpoint_get_by_num(i >> 1u, !(i & 1u));
10004530:	086b      	lsrs	r3, r5, #1
    return &hw_endpoints[num][in];
10004532:	435e      	muls	r6, r3
10004534:	2334      	movs	r3, #52	; 0x34
10004536:	4691      	mov	r9, r2
10004538:	43aa      	bics	r2, r5
1000453a:	4353      	muls	r3, r2
1000453c:	18f6      	adds	r6, r6, r3
1000453e:	4b1b      	ldr	r3, [pc, #108]	; (100045ac <dcd_rp2040_irq+0x11c>)
10004540:	469c      	mov	ip, r3
10004542:	4466      	add	r6, ip
            bool done = _hw_endpoint_xfer_continue(ep);
10004544:	0030      	movs	r0, r6
10004546:	f000 fa3d 	bl	100049c4 <_hw_endpoint_xfer_continue>
            if (done)
1000454a:	2800      	cmp	r0, #0
1000454c:	d11a      	bne.n	10004584 <dcd_rp2040_irq+0xf4>
            remaining_buffers &= ~bit;
1000454e:	43a7      	bics	r7, r4
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
10004550:	3501      	adds	r5, #1
        bit <<= 1u;
10004552:	0064      	lsls	r4, r4, #1
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
10004554:	2f00      	cmp	r7, #0
10004556:	d1e1      	bne.n	1000451c <dcd_rp2040_irq+0x8c>
    if (status & USB_INTS_BUS_RESET_BITS)
10004558:	2380      	movs	r3, #128	; 0x80
1000455a:	4642      	mov	r2, r8
1000455c:	015b      	lsls	r3, r3, #5
        handled |= USB_INTS_BUFF_STATUS_BITS;
1000455e:	9d03      	ldr	r5, [sp, #12]
    if (status & USB_INTS_BUS_RESET_BITS)
10004560:	421a      	tst	r2, r3
10004562:	d0c6      	beq.n	100044f2 <dcd_rp2040_irq+0x62>
        assigned_address = 0;
10004564:	2200      	movs	r2, #0
10004566:	4915      	ldr	r1, [pc, #84]	; (100045bc <dcd_rp2040_irq+0x12c>)
        dcd_event_bus_signal(0, DCD_EVENT_BUS_RESET, true);
10004568:	2000      	movs	r0, #0
        assigned_address = 0;
1000456a:	700a      	strb	r2, [r1, #0]
        usb_hw->dev_addr_ctrl = assigned_address;
1000456c:	490e      	ldr	r1, [pc, #56]	; (100045a8 <dcd_rp2040_irq+0x118>)
        handled |= USB_INTS_BUS_RESET_BITS;
1000456e:	431d      	orrs	r5, r3
        usb_hw->dev_addr_ctrl = assigned_address;
10004570:	600a      	str	r2, [r1, #0]
        dcd_event_bus_signal(0, DCD_EVENT_BUS_RESET, true);
10004572:	3201      	adds	r2, #1
10004574:	2101      	movs	r1, #1
10004576:	f7ff fd01 	bl	10003f7c <dcd_event_bus_signal>
        usb_hw_clear->sie_status = USB_SIE_STATUS_BUS_RESET_BITS;
1000457a:	2280      	movs	r2, #128	; 0x80
1000457c:	4b0d      	ldr	r3, [pc, #52]	; (100045b4 <dcd_rp2040_irq+0x124>)
1000457e:	0312      	lsls	r2, r2, #12
10004580:	651a      	str	r2, [r3, #80]	; 0x50
10004582:	e7b6      	b.n	100044f2 <dcd_rp2040_irq+0x62>
                dcd_event_xfer_complete(0, ep->ep_addr, ep->len, XFER_RESULT_SUCCESS, true);
10004584:	464b      	mov	r3, r9
10004586:	69f2      	ldr	r2, [r6, #28]
10004588:	7931      	ldrb	r1, [r6, #4]
1000458a:	2000      	movs	r0, #0
1000458c:	9300      	str	r3, [sp, #0]
1000458e:	2300      	movs	r3, #0
10004590:	f7ff fd8c 	bl	100040ac <dcd_event_xfer_complete>
                hw_endpoint_reset_transfer(ep);
10004594:	0030      	movs	r0, r6
10004596:	f000 f9e9 	bl	1000496c <hw_endpoint_reset_transfer>
1000459a:	e7d8      	b.n	1000454e <dcd_rp2040_irq+0xbe>
        panic("Unhandled IRQ 0x%x\n", (uint) (status ^ handled));
1000459c:	4641      	mov	r1, r8
1000459e:	4808      	ldr	r0, [pc, #32]	; (100045c0 <dcd_rp2040_irq+0x130>)
100045a0:	4069      	eors	r1, r5
100045a2:	f7fd fba7 	bl	10001cf4 <panic>
100045a6:	46c0      	nop			; (mov r8, r8)
100045a8:	50110000 	.word	0x50110000
100045ac:	200234c4 	.word	0x200234c4
100045b0:	50100000 	.word	0x50100000
100045b4:	50113000 	.word	0x50113000
100045b8:	00010010 	.word	0x00010010
100045bc:	20023b87 	.word	0x20023b87
100045c0:	10007050 	.word	0x10007050

100045c4 <dcd_int_enable>:

    dcd_connect(rhport);
}

void dcd_int_enable(uint8_t rhport)
{
100045c4:	b510      	push	{r4, lr}
    assert(rhport == 0);
    irq_set_enabled(USBCTRL_IRQ, true);
100045c6:	2101      	movs	r1, #1
100045c8:	2005      	movs	r0, #5
100045ca:	f7fc fd87 	bl	100010dc <irq_set_enabled>
}
100045ce:	bd10      	pop	{r4, pc}

100045d0 <dcd_set_address>:
{
    pico_trace("dcd_set_address %d %d\n", rhport, dev_addr);
    assert(rhport == 0);

    // Can't set device address in hardware until status xfer has complete
    assigned_address = dev_addr;
100045d0:	4b09      	ldr	r3, [pc, #36]	; (100045f8 <dcd_set_address+0x28>)
{
100045d2:	b510      	push	{r4, lr}
        ep->next_pid = 1u;
100045d4:	2201      	movs	r2, #1
    assigned_address = dev_addr;
100045d6:	7019      	strb	r1, [r3, #0]
        ep->next_pid = 1u;
100045d8:	2139      	movs	r1, #57	; 0x39
        ep->stalled  = 0;
100045da:	2300      	movs	r3, #0
        ep->next_pid = 1u;
100045dc:	4807      	ldr	r0, [pc, #28]	; (100045fc <dcd_set_address+0x2c>)
100045de:	5442      	strb	r2, [r0, r1]
100045e0:	7142      	strb	r2, [r0, #5]
        ep->stalled  = 0;
100045e2:	3247      	adds	r2, #71	; 0x47
100045e4:	5483      	strb	r3, [r0, r2]
100045e6:	7503      	strb	r3, [r0, #20]
    _hw_endpoint_xfer(ep, buffer, total_bytes, start);
100045e8:	2200      	movs	r2, #0
100045ea:	2100      	movs	r1, #0
100045ec:	3034      	adds	r0, #52	; 0x34
100045ee:	3301      	adds	r3, #1
100045f0:	f000 fa68 	bl	10004ac4 <_hw_endpoint_xfer>

    ep0_0len_status();
}
100045f4:	bd10      	pop	{r4, pc}
100045f6:	46c0      	nop			; (mov r8, r8)
100045f8:	20023b87 	.word	0x20023b87
100045fc:	200234c4 	.word	0x200234c4

10004600 <dcd_connect>:
// connect by enabling internal pull-up resistor on D+/D-
void dcd_connect(uint8_t rhport)
{
    pico_info("dcd_connect %d\n", rhport);
    assert(rhport == 0);
    usb_hw_set->sie_ctrl = USB_SIE_CTRL_PULLUP_EN_BITS;
10004600:	2280      	movs	r2, #128	; 0x80
10004602:	4b02      	ldr	r3, [pc, #8]	; (1000460c <dcd_connect+0xc>)
10004604:	0252      	lsls	r2, r2, #9
10004606:	64da      	str	r2, [r3, #76]	; 0x4c
}
10004608:	4770      	bx	lr
1000460a:	46c0      	nop			; (mov r8, r8)
1000460c:	50112000 	.word	0x50112000

10004610 <dcd_init>:
{
10004610:	b570      	push	{r4, r5, r6, lr}
10004612:	0005      	movs	r5, r0
    rp2040_usb_init();
10004614:	f000 f982 	bl	1000491c <rp2040_usb_init>
    irq_set_exclusive_handler(USBCTRL_IRQ, dcd_rp2040_irq);
10004618:	2005      	movs	r0, #5
1000461a:	491c      	ldr	r1, [pc, #112]	; (1000468c <dcd_init+0x7c>)
1000461c:	f7fc fd80 	bl	10001120 <irq_set_exclusive_handler>
    memset(hw_endpoints, 0, sizeof(hw_endpoints));
10004620:	22d0      	movs	r2, #208	; 0xd0
10004622:	4c1b      	ldr	r4, [pc, #108]	; (10004690 <dcd_init+0x80>)
10004624:	2100      	movs	r1, #0
10004626:	0020      	movs	r0, r4
10004628:	00d2      	lsls	r2, r2, #3
1000462a:	f7fc f983 	bl	10000934 <__wrap_memset>
    assigned_address = 0;
1000462e:	2200      	movs	r2, #0
10004630:	4b18      	ldr	r3, [pc, #96]	; (10004694 <dcd_init+0x84>)
    next_buffer_ptr = &usb_dpram->epx_data[0];
10004632:	4919      	ldr	r1, [pc, #100]	; (10004698 <dcd_init+0x88>)
    assigned_address = 0;
10004634:	701a      	strb	r2, [r3, #0]
    next_buffer_ptr = &usb_dpram->epx_data[0];
10004636:	4b19      	ldr	r3, [pc, #100]	; (1000469c <dcd_init+0x8c>)
    ep->wMaxPacketSize = wMaxPacketSize;
10004638:	2040      	movs	r0, #64	; 0x40
    next_buffer_ptr = &usb_dpram->epx_data[0];
1000463a:	6019      	str	r1, [r3, #0]
    ep->in = in;
1000463c:	2635      	movs	r6, #53	; 0x35
    ep->rx = in == false;
1000463e:	2301      	movs	r3, #1
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].out;
10004640:	4917      	ldr	r1, [pc, #92]	; (100046a0 <dcd_init+0x90>)
    ep->rx = in == false;
10004642:	70e3      	strb	r3, [r4, #3]
    ep->next_pid = num == 0 ? 1u : 0u;
10004644:	7163      	strb	r3, [r4, #5]
    ep->wMaxPacketSize = wMaxPacketSize;
10004646:	62e0      	str	r0, [r4, #44]	; 0x2c
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].out;
10004648:	60e1      	str	r1, [r4, #12]
    *ep->buffer_control = 0;
1000464a:	600a      	str	r2, [r1, #0]
    ep->in = in;
1000464c:	55a3      	strb	r3, [r4, r6]
    ep->ep_addr = ep_addr;
1000464e:	364c      	adds	r6, #76	; 0x4c
10004650:	36ff      	adds	r6, #255	; 0xff
10004652:	8726      	strh	r6, [r4, #56]	; 0x38
    ep->transfer_type = transfer_type;
10004654:	2600      	movs	r6, #0
    ep->wMaxPacketSize = wMaxPacketSize;
10004656:	6620      	str	r0, [r4, #96]	; 0x60
    ep->transfer_type = transfer_type;
10004658:	3024      	adds	r0, #36	; 0x24
1000465a:	5426      	strb	r6, [r4, r0]
        ep->hw_data_buf = (uint8_t*)&usb_dpram->ep0_buf_a[0];
1000465c:	4911      	ldr	r1, [pc, #68]	; (100046a4 <dcd_init+0x94>)
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].in;
1000465e:	4812      	ldr	r0, [pc, #72]	; (100046a8 <dcd_init+0x98>)
        ep->endpoint_control = NULL;
10004660:	60a2      	str	r2, [r4, #8]
        ep->hw_data_buf = (uint8_t*)&usb_dpram->ep0_buf_a[0];
10004662:	6121      	str	r1, [r4, #16]
    ep->configured = true;
10004664:	7023      	strb	r3, [r4, #0]
    ep->num = num;
10004666:	86e2      	strh	r2, [r4, #54]	; 0x36
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].in;
10004668:	6420      	str	r0, [r4, #64]	; 0x40
    *ep->buffer_control = 0;
1000466a:	6002      	str	r2, [r0, #0]
        ep->endpoint_control = NULL;
1000466c:	63e2      	str	r2, [r4, #60]	; 0x3c
    ep->configured = true;
1000466e:	3234      	adds	r2, #52	; 0x34
10004670:	54a3      	strb	r3, [r4, r2]
    usb_hw->main_ctrl = USB_MAIN_CTRL_CONTROLLER_EN_BITS;
10004672:	4a0e      	ldr	r2, [pc, #56]	; (100046ac <dcd_init+0x9c>)
        ep->hw_data_buf = (uint8_t*)&usb_dpram->ep0_buf_a[0];
10004674:	6461      	str	r1, [r4, #68]	; 0x44
    usb_hw->main_ctrl = USB_MAIN_CTRL_CONTROLLER_EN_BITS;
10004676:	6413      	str	r3, [r2, #64]	; 0x40
    usb_hw->sie_ctrl = USB_SIE_CTRL_EP0_INT_1BUF_BITS; 
10004678:	2380      	movs	r3, #128	; 0x80
1000467a:	059b      	lsls	r3, r3, #22
1000467c:	64d3      	str	r3, [r2, #76]	; 0x4c
    usb_hw->inte     = USB_INTS_BUFF_STATUS_BITS | USB_INTS_BUS_RESET_BITS | USB_INTS_SETUP_REQ_BITS;
1000467e:	2390      	movs	r3, #144	; 0x90
10004680:	490b      	ldr	r1, [pc, #44]	; (100046b0 <dcd_init+0xa0>)
    dcd_connect(rhport);
10004682:	0028      	movs	r0, r5
    usb_hw->inte     = USB_INTS_BUFF_STATUS_BITS | USB_INTS_BUS_RESET_BITS | USB_INTS_SETUP_REQ_BITS;
10004684:	50d1      	str	r1, [r2, r3]
    dcd_connect(rhport);
10004686:	f7ff ffbb 	bl	10004600 <dcd_connect>
}
1000468a:	bd70      	pop	{r4, r5, r6, pc}
1000468c:	10004491 	.word	0x10004491
10004690:	200234c4 	.word	0x200234c4
10004694:	20023b87 	.word	0x20023b87
10004698:	50100180 	.word	0x50100180
1000469c:	20023b48 	.word	0x20023b48
100046a0:	50100084 	.word	0x50100084
100046a4:	50100100 	.word	0x50100100
100046a8:	50100080 	.word	0x50100080
100046ac:	50110000 	.word	0x50110000
100046b0:	00011010 	.word	0x00011010

100046b4 <dcd_edpt0_status_complete>:
void dcd_edpt0_status_complete(uint8_t rhport, tusb_control_request_t const * request)
{
    pico_trace("dcd_edpt0_status_complete %d\n", rhport);
    assert(rhport == 0);

    if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
100046b4:	780b      	ldrb	r3, [r1, #0]
100046b6:	065b      	lsls	r3, r3, #25
100046b8:	d102      	bne.n	100046c0 <dcd_edpt0_status_complete+0xc>
        request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
100046ba:	784b      	ldrb	r3, [r1, #1]
100046bc:	2b05      	cmp	r3, #5
100046be:	d009      	beq.n	100046d4 <dcd_edpt0_status_complete+0x20>
        ep->next_pid = 1u;
100046c0:	2101      	movs	r1, #1
100046c2:	2039      	movs	r0, #57	; 0x39
        ep->stalled  = 0;
100046c4:	2200      	movs	r2, #0
        ep->next_pid = 1u;
100046c6:	4b06      	ldr	r3, [pc, #24]	; (100046e0 <dcd_edpt0_status_complete+0x2c>)
100046c8:	7159      	strb	r1, [r3, #5]
100046ca:	5419      	strb	r1, [r3, r0]
        ep->stalled  = 0;
100046cc:	3147      	adds	r1, #71	; 0x47
100046ce:	751a      	strb	r2, [r3, #20]
100046d0:	545a      	strb	r2, [r3, r1]
        pico_trace("Set HW address %d\n", assigned_address);
        usb_hw->dev_addr_ctrl = assigned_address;
    }

    reset_ep0();
}
100046d2:	4770      	bx	lr
        usb_hw->dev_addr_ctrl = assigned_address;
100046d4:	4b03      	ldr	r3, [pc, #12]	; (100046e4 <dcd_edpt0_status_complete+0x30>)
100046d6:	781a      	ldrb	r2, [r3, #0]
100046d8:	4b03      	ldr	r3, [pc, #12]	; (100046e8 <dcd_edpt0_status_complete+0x34>)
100046da:	601a      	str	r2, [r3, #0]
100046dc:	e7f0      	b.n	100046c0 <dcd_edpt0_status_complete+0xc>
100046de:	46c0      	nop			; (mov r8, r8)
100046e0:	200234c4 	.word	0x200234c4
100046e4:	20023b87 	.word	0x20023b87
100046e8:	50110000 	.word	0x50110000

100046ec <dcd_edpt_open>:

bool dcd_edpt_open (uint8_t rhport, tusb_desc_endpoint_t const * desc_edpt)
{
100046ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100046ee:	4647      	mov	r7, r8
100046f0:	46ce      	mov	lr, r9
    pico_info("dcd_edpt_open %d %02x\n", rhport, desc_edpt->bEndpointAddress);
    assert(rhport == 0);
    hw_endpoint_init(desc_edpt->bEndpointAddress, desc_edpt->wMaxPacketSize.size, desc_edpt->bmAttributes.xfer);
100046f2:	2307      	movs	r3, #7
{
100046f4:	b580      	push	{r7, lr}
    hw_endpoint_init(desc_edpt->bEndpointAddress, desc_edpt->wMaxPacketSize.size, desc_edpt->bmAttributes.xfer);
100046f6:	7948      	ldrb	r0, [r1, #5]
100046f8:	78cc      	ldrb	r4, [r1, #3]
100046fa:	790a      	ldrb	r2, [r1, #4]
100046fc:	4003      	ands	r3, r0
100046fe:	788f      	ldrb	r7, [r1, #2]
10004700:	07a4      	lsls	r4, r4, #30
10004702:	021b      	lsls	r3, r3, #8
10004704:	4313      	orrs	r3, r2
10004706:	0fa2      	lsrs	r2, r4, #30
10004708:	4694      	mov	ip, r2
1000470a:	0014      	movs	r4, r2
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
1000470c:	207f      	movs	r0, #127	; 0x7f
1000470e:	b27a      	sxtb	r2, r7
10004710:	4691      	mov	r9, r2
    ep->ep_addr = ep_addr;
10004712:	2168      	movs	r1, #104	; 0x68
10004714:	2234      	movs	r2, #52	; 0x34
10004716:	4038      	ands	r0, r7
    return &hw_endpoints[num][in];
10004718:	09fe      	lsrs	r6, r7, #7
    ep->ep_addr = ep_addr;
1000471a:	4341      	muls	r1, r0
1000471c:	4372      	muls	r2, r6
1000471e:	1852      	adds	r2, r2, r1
    ep->rx = in == false;
10004720:	4649      	mov	r1, r9
10004722:	43c9      	mvns	r1, r1
    ep->ep_addr = ep_addr;
10004724:	4d3c      	ldr	r5, [pc, #240]	; (10004818 <dcd_edpt_open+0x12c>)
    ep->rx = in == false;
10004726:	0fc9      	lsrs	r1, r1, #31
    ep->ep_addr = ep_addr;
10004728:	18aa      	adds	r2, r5, r2
    ep->rx = in == false;
1000472a:	70d1      	strb	r1, [r2, #3]
    ep->next_pid = num == 0 ? 1u : 0u;
1000472c:	4241      	negs	r1, r0
1000472e:	4141      	adcs	r1, r0
    ep->ep_addr = ep_addr;
10004730:	7117      	strb	r7, [r2, #4]
    ep->in = in;
10004732:	7056      	strb	r6, [r2, #1]
    ep->num = num;
10004734:	7090      	strb	r0, [r2, #2]
    ep->next_pid = num == 0 ? 1u : 0u;
10004736:	7151      	strb	r1, [r2, #5]
    if (transfer_type == TUSB_XFER_ISOCHRONOUS)
10004738:	2c01      	cmp	r4, #1
1000473a:	d05f      	beq.n	100047fc <dcd_edpt_open+0x110>
        if (wMaxPacketSize > USB_MAX_PACKET_SIZE)
1000473c:	2b40      	cmp	r3, #64	; 0x40
1000473e:	d861      	bhi.n	10004804 <dcd_edpt_open+0x118>
    ep->wMaxPacketSize = wMaxPacketSize;
10004740:	2234      	movs	r2, #52	; 0x34
10004742:	2168      	movs	r1, #104	; 0x68
10004744:	4372      	muls	r2, r6
10004746:	4341      	muls	r1, r0
10004748:	1852      	adds	r2, r2, r1
1000474a:	18aa      	adds	r2, r5, r2
    ep->transfer_type = transfer_type;
1000474c:	0011      	movs	r1, r2
1000474e:	4667      	mov	r7, ip
10004750:	3130      	adds	r1, #48	; 0x30
10004752:	700f      	strb	r7, [r1, #0]
    if (ep->in)
10004754:	4649      	mov	r1, r9
    ep->wMaxPacketSize = wMaxPacketSize;
10004756:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ep->in)
10004758:	2900      	cmp	r1, #0
1000475a:	db3e      	blt.n	100047da <dcd_edpt_open+0xee>
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].out;
1000475c:	4f2f      	ldr	r7, [pc, #188]	; (1000481c <dcd_edpt_open+0x130>)
1000475e:	00c1      	lsls	r1, r0, #3
10004760:	46bc      	mov	ip, r7
    *ep->buffer_control = 0;
10004762:	2700      	movs	r7, #0
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].out;
10004764:	4461      	add	r1, ip
10004766:	60d1      	str	r1, [r2, #12]
    *ep->buffer_control = 0;
10004768:	600f      	str	r7, [r1, #0]
    if (ep->num == 0)
1000476a:	2800      	cmp	r0, #0
1000476c:	d03e      	beq.n	100047ec <dcd_edpt_open+0x100>
            ep->endpoint_control = &usb_dpram->ep_ctrl[num-1].out;
1000476e:	4f2c      	ldr	r7, [pc, #176]	; (10004820 <dcd_edpt_open+0x134>)
10004770:	00c1      	lsls	r1, r0, #3
10004772:	46bc      	mov	ip, r7
10004774:	4461      	add	r1, ip
10004776:	6091      	str	r1, [r2, #8]
    ep->hw_data_buf = next_buffer_ptr;
10004778:	2768      	movs	r7, #104	; 0x68
1000477a:	4a2a      	ldr	r2, [pc, #168]	; (10004824 <dcd_edpt_open+0x138>)
1000477c:	4347      	muls	r7, r0
1000477e:	6811      	ldr	r1, [r2, #0]
10004780:	4690      	mov	r8, r2
10004782:	2234      	movs	r2, #52	; 0x34
10004784:	46bc      	mov	ip, r7
10004786:	4372      	muls	r2, r6
10004788:	4462      	add	r2, ip
1000478a:	18aa      	adds	r2, r5, r2
1000478c:	6111      	str	r1, [r2, #16]
    next_buffer_ptr += size;
1000478e:	2b40      	cmp	r3, #64	; 0x40
10004790:	d200      	bcs.n	10004794 <dcd_edpt_open+0xa8>
10004792:	2340      	movs	r3, #64	; 0x40
    if ((uintptr_t)next_buffer_ptr & 0b111111u)
10004794:	223f      	movs	r2, #63	; 0x3f
    next_buffer_ptr += size;
10004796:	18cb      	adds	r3, r1, r3
    if ((uintptr_t)next_buffer_ptr & 0b111111u)
10004798:	4213      	tst	r3, r2
1000479a:	d001      	beq.n	100047a0 <dcd_edpt_open+0xb4>
        fixptr &= ~0b111111u;
1000479c:	4393      	bics	r3, r2
        fixptr += 64;
1000479e:	3340      	adds	r3, #64	; 0x40
        next_buffer_ptr = (uint8_t*)fixptr;
100047a0:	4642      	mov	r2, r8
100047a2:	6013      	str	r3, [r2, #0]
}

static inline uintptr_t hw_data_offset(uint8_t *buf)
{
    // Remove usb base from buffer pointer
    return (uintptr_t)buf ^ (uintptr_t)usb_dpram;
100047a4:	4b20      	ldr	r3, [pc, #128]	; (10004828 <dcd_edpt_open+0x13c>)
    *ep->endpoint_control = reg;
100047a6:	2268      	movs	r2, #104	; 0x68
100047a8:	4059      	eors	r1, r3
100047aa:	2334      	movs	r3, #52	; 0x34
                  | (ep->transfer_type << EP_CTRL_BUFFER_TYPE_LSB)
100047ac:	06a4      	lsls	r4, r4, #26
                  | dpram_offset;
100047ae:	430c      	orrs	r4, r1
    uint32_t reg =  EP_CTRL_ENABLE_BITS
100047b0:	21a0      	movs	r1, #160	; 0xa0
    *ep->endpoint_control = reg;
100047b2:	4373      	muls	r3, r6
100047b4:	4342      	muls	r2, r0
100047b6:	189b      	adds	r3, r3, r2
100047b8:	18eb      	adds	r3, r5, r3
100047ba:	689b      	ldr	r3, [r3, #8]
    uint32_t reg =  EP_CTRL_ENABLE_BITS
100047bc:	0609      	lsls	r1, r1, #24
100047be:	430c      	orrs	r4, r1
    *ep->endpoint_control = reg;
100047c0:	601c      	str	r4, [r3, #0]
    ep->configured = true;
100047c2:	2334      	movs	r3, #52	; 0x34
100047c4:	435e      	muls	r6, r3
100047c6:	3334      	adds	r3, #52	; 0x34
100047c8:	4358      	muls	r0, r3
100047ca:	3b67      	subs	r3, #103	; 0x67
100047cc:	1836      	adds	r6, r6, r0
100047ce:	55ab      	strb	r3, [r5, r6]
    return true;
}
100047d0:	2001      	movs	r0, #1
100047d2:	bcc0      	pop	{r6, r7}
100047d4:	46b9      	mov	r9, r7
100047d6:	46b0      	mov	r8, r6
100047d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].in;
100047da:	4f14      	ldr	r7, [pc, #80]	; (1000482c <dcd_edpt_open+0x140>)
100047dc:	00c1      	lsls	r1, r0, #3
100047de:	46bc      	mov	ip, r7
    *ep->buffer_control = 0;
100047e0:	2700      	movs	r7, #0
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].in;
100047e2:	4461      	add	r1, ip
100047e4:	60d1      	str	r1, [r2, #12]
    *ep->buffer_control = 0;
100047e6:	600f      	str	r7, [r1, #0]
    if (ep->num == 0)
100047e8:	2800      	cmp	r0, #0
100047ea:	d10f      	bne.n	1000480c <dcd_edpt_open+0x120>
        ep->endpoint_control = NULL;
100047ec:	2334      	movs	r3, #52	; 0x34
100047ee:	2200      	movs	r2, #0
100047f0:	4373      	muls	r3, r6
100047f2:	18eb      	adds	r3, r5, r3
100047f4:	609a      	str	r2, [r3, #8]
        ep->hw_data_buf = (uint8_t*)&usb_dpram->ep0_buf_a[0];
100047f6:	4a0e      	ldr	r2, [pc, #56]	; (10004830 <dcd_edpt_open+0x144>)
100047f8:	611a      	str	r2, [r3, #16]
100047fa:	e7e2      	b.n	100047c2 <dcd_edpt_open+0xd6>
        if (wMaxPacketSize > USB_MAX_ISO_PACKET_SIZE)
100047fc:	2280      	movs	r2, #128	; 0x80
100047fe:	00d2      	lsls	r2, r2, #3
10004800:	4293      	cmp	r3, r2
10004802:	d39d      	bcc.n	10004740 <dcd_edpt_open+0x54>
            panic("Isochronous wMaxPacketSize %d too large", wMaxPacketSize);
10004804:	0019      	movs	r1, r3
10004806:	480b      	ldr	r0, [pc, #44]	; (10004834 <dcd_edpt_open+0x148>)
10004808:	f7fd fa74 	bl	10001cf4 <panic>
            ep->endpoint_control = &usb_dpram->ep_ctrl[num-1].in;
1000480c:	4f06      	ldr	r7, [pc, #24]	; (10004828 <dcd_edpt_open+0x13c>)
1000480e:	00c1      	lsls	r1, r0, #3
10004810:	46bc      	mov	ip, r7
10004812:	4461      	add	r1, ip
10004814:	6091      	str	r1, [r2, #8]
10004816:	e7af      	b.n	10004778 <dcd_edpt_open+0x8c>
10004818:	200234c4 	.word	0x200234c4
1000481c:	50100084 	.word	0x50100084
10004820:	50100004 	.word	0x50100004
10004824:	20023b48 	.word	0x20023b48
10004828:	50100000 	.word	0x50100000
1000482c:	50100080 	.word	0x50100080
10004830:	50100100 	.word	0x50100100
10004834:	10007064 	.word	0x10007064

10004838 <dcd_edpt_xfer>:

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
10004838:	b510      	push	{r4, lr}
1000483a:	000c      	movs	r4, r1
    return &hw_endpoints[num][in];
1000483c:	2034      	movs	r0, #52	; 0x34
{
1000483e:	0011      	movs	r1, r2
10004840:	001a      	movs	r2, r3
    return &hw_endpoints[num][in];
10004842:	09e3      	lsrs	r3, r4, #7
10004844:	4358      	muls	r0, r3
10004846:	237f      	movs	r3, #127	; 0x7f
10004848:	4023      	ands	r3, r4
1000484a:	2468      	movs	r4, #104	; 0x68
1000484c:	435c      	muls	r4, r3
1000484e:	4b04      	ldr	r3, [pc, #16]	; (10004860 <dcd_edpt_xfer+0x28>)
10004850:	1900      	adds	r0, r0, r4
10004852:	18c0      	adds	r0, r0, r3
    _hw_endpoint_xfer(ep, buffer, total_bytes, start);
10004854:	2301      	movs	r3, #1
10004856:	f000 f935 	bl	10004ac4 <_hw_endpoint_xfer>
    assert(rhport == 0);
    // True means start new xfer
    hw_endpoint_xfer(ep_addr, buffer, total_bytes, true);
    return true;
}
1000485a:	2001      	movs	r0, #1
1000485c:	bd10      	pop	{r4, pc}
1000485e:	46c0      	nop			; (mov r8, r8)
10004860:	200234c4 	.word	0x200234c4

10004864 <dcd_edpt_stall>:

void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
10004864:	b570      	push	{r4, r5, r6, lr}
10004866:	257f      	movs	r5, #127	; 0x7f
    return &hw_endpoints[num][in];
10004868:	2034      	movs	r0, #52	; 0x34
1000486a:	2368      	movs	r3, #104	; 0x68
1000486c:	400d      	ands	r5, r1
    uint8_t in = (ep_addr & TUSB_DIR_IN_MASK) ? 1 : 0;
1000486e:	09cc      	lsrs	r4, r1, #7
    return &hw_endpoints[num][in];
10004870:	436b      	muls	r3, r5
10004872:	4360      	muls	r0, r4
10004874:	4e0c      	ldr	r6, [pc, #48]	; (100048a8 <dcd_edpt_stall+0x44>)
10004876:	18c0      	adds	r0, r0, r3
10004878:	1830      	adds	r0, r6, r0
    if (ep->num == 0)
1000487a:	7883      	ldrb	r3, [r0, #2]
1000487c:	2b00      	cmp	r3, #0
1000487e:	d105      	bne.n	1000488c <dcd_edpt_stall+0x28>
        usb_hw_set->ep_stall_arm = ep->in ? USB_EP_STALL_ARM_EP0_IN_BITS : USB_EP_STALL_ARM_EP0_OUT_BITS;
10004880:	7843      	ldrb	r3, [r0, #1]
10004882:	425a      	negs	r2, r3
10004884:	4153      	adcs	r3, r2
10004886:	4a09      	ldr	r2, [pc, #36]	; (100048ac <dcd_edpt_stall+0x48>)
10004888:	3301      	adds	r3, #1
1000488a:	6693      	str	r3, [r2, #104]	; 0x68
    return _hw_endpoint_buffer_control_update32(ep, ~value, value);
1000488c:	2280      	movs	r2, #128	; 0x80
1000488e:	4908      	ldr	r1, [pc, #32]	; (100048b0 <dcd_edpt_stall+0x4c>)
10004890:	0112      	lsls	r2, r2, #4
10004892:	f000 f875 	bl	10004980 <_hw_endpoint_buffer_control_update32>
    ep->stalled = true;
10004896:	2134      	movs	r1, #52	; 0x34
10004898:	2301      	movs	r3, #1
1000489a:	434c      	muls	r4, r1
1000489c:	3134      	adds	r1, #52	; 0x34
1000489e:	434d      	muls	r5, r1
100048a0:	1964      	adds	r4, r4, r5
100048a2:	1934      	adds	r4, r6, r4
100048a4:	7523      	strb	r3, [r4, #20]
    pico_trace("dcd_edpt_stall %d %02x\n", rhport, ep_addr);
    assert(rhport == 0);
    hw_endpoint_stall(ep_addr);
}
100048a6:	bd70      	pop	{r4, r5, r6, pc}
100048a8:	200234c4 	.word	0x200234c4
100048ac:	50112000 	.word	0x50112000
100048b0:	fffff7ff 	.word	0xfffff7ff

100048b4 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall (uint8_t rhport, uint8_t ep_addr)
{
100048b4:	b570      	push	{r4, r5, r6, lr}
100048b6:	257f      	movs	r5, #127	; 0x7f
    return &hw_endpoints[num][in];
100048b8:	2034      	movs	r0, #52	; 0x34
100048ba:	2368      	movs	r3, #104	; 0x68
100048bc:	400d      	ands	r5, r1
    uint8_t in = (ep_addr & TUSB_DIR_IN_MASK) ? 1 : 0;
100048be:	09cc      	lsrs	r4, r1, #7
    return &hw_endpoints[num][in];
100048c0:	436b      	muls	r3, r5
100048c2:	4360      	muls	r0, r4
100048c4:	4e0c      	ldr	r6, [pc, #48]	; (100048f8 <dcd_edpt_clear_stall+0x44>)
100048c6:	18c0      	adds	r0, r0, r3
100048c8:	1830      	adds	r0, r6, r0
    if (ep->num == 0)
100048ca:	7883      	ldrb	r3, [r0, #2]
100048cc:	2b00      	cmp	r3, #0
100048ce:	d105      	bne.n	100048dc <dcd_edpt_clear_stall+0x28>
        usb_hw_clear->ep_stall_arm = ep->in ? USB_EP_STALL_ARM_EP0_IN_BITS : USB_EP_STALL_ARM_EP0_OUT_BITS;
100048d0:	7843      	ldrb	r3, [r0, #1]
100048d2:	425a      	negs	r2, r3
100048d4:	4153      	adcs	r3, r2
100048d6:	4a09      	ldr	r2, [pc, #36]	; (100048fc <dcd_edpt_clear_stall+0x48>)
100048d8:	3301      	adds	r3, #1
100048da:	6693      	str	r3, [r2, #104]	; 0x68
    return _hw_endpoint_buffer_control_update32(ep, ~value, 0);
100048dc:	2200      	movs	r2, #0
100048de:	4908      	ldr	r1, [pc, #32]	; (10004900 <dcd_edpt_clear_stall+0x4c>)
100048e0:	f000 f84e 	bl	10004980 <_hw_endpoint_buffer_control_update32>
    ep->stalled = false;
100048e4:	2134      	movs	r1, #52	; 0x34
100048e6:	2300      	movs	r3, #0
100048e8:	434c      	muls	r4, r1
100048ea:	3134      	adds	r1, #52	; 0x34
100048ec:	434d      	muls	r5, r1
100048ee:	1964      	adds	r4, r4, r5
100048f0:	1934      	adds	r4, r6, r4
100048f2:	7523      	strb	r3, [r4, #20]
    pico_trace("dcd_edpt_clear_stall %d %02x\n", rhport, ep_addr);
    assert(rhport == 0);
    hw_endpoint_clear_stall(ep_addr);
}
100048f4:	bd70      	pop	{r4, r5, r6, pc}
100048f6:	46c0      	nop			; (mov r8, r8)
100048f8:	200234c4 	.word	0x200234c4
100048fc:	50113000 	.word	0x50113000
10004900:	fffff7ff 	.word	0xfffff7ff

10004904 <_hw_endpoint_buffer_control_update32.part.0.isra.0>:
    }
    if (or_mask) {
        value |= or_mask;
        if (or_mask & USB_BUF_CTRL_AVAIL) {
            if (*ep->buffer_control & USB_BUF_CTRL_AVAIL) {
                panic("ep %d %s was already available", ep->num, ep_dir_string[ep->in]);
10004904:	4b03      	ldr	r3, [pc, #12]	; (10004914 <_hw_endpoint_buffer_control_update32.part.0.isra.0+0x10>)
10004906:	0080      	lsls	r0, r0, #2
10004908:	58c2      	ldr	r2, [r0, r3]
void _hw_endpoint_buffer_control_update32(struct hw_endpoint *ep, uint32_t and_mask, uint32_t or_mask) {
1000490a:	b510      	push	{r4, lr}
                panic("ep %d %s was already available", ep->num, ep_dir_string[ep->in]);
1000490c:	4802      	ldr	r0, [pc, #8]	; (10004918 <_hw_endpoint_buffer_control_update32.part.0.isra.0+0x14>)
1000490e:	f7fd f9f1 	bl	10001cf4 <panic>
10004912:	46c0      	nop			; (mov r8, r8)
10004914:	20002750 	.word	0x20002750
10004918:	1000708c 	.word	0x1000708c

1000491c <rp2040_usb_init>:
1000491c:	2280      	movs	r2, #128	; 0x80
1000491e:	4b0e      	ldr	r3, [pc, #56]	; (10004958 <rp2040_usb_init+0x3c>)
10004920:	0452      	lsls	r2, r2, #17
{
10004922:	b510      	push	{r4, lr}
10004924:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10004926:	4b0d      	ldr	r3, [pc, #52]	; (1000495c <rp2040_usb_init+0x40>)
10004928:	490d      	ldr	r1, [pc, #52]	; (10004960 <rp2040_usb_init+0x44>)
1000492a:	601a      	str	r2, [r3, #0]
1000492c:	0010      	movs	r0, r2
1000492e:	688b      	ldr	r3, [r1, #8]
10004930:	4398      	bics	r0, r3
10004932:	d1fb      	bne.n	1000492c <rp2040_usb_init+0x10>
    memset(usb_hw, 0, sizeof(*usb_hw));
10004934:	4c0b      	ldr	r4, [pc, #44]	; (10004964 <rp2040_usb_init+0x48>)
10004936:	229c      	movs	r2, #156	; 0x9c
10004938:	2100      	movs	r1, #0
1000493a:	0020      	movs	r0, r4
1000493c:	f7fb fffa 	bl	10000934 <__wrap_memset>
    memset(usb_dpram, 0, sizeof(*usb_dpram));
10004940:	2280      	movs	r2, #128	; 0x80
10004942:	2100      	movs	r1, #0
10004944:	0152      	lsls	r2, r2, #5
10004946:	4808      	ldr	r0, [pc, #32]	; (10004968 <rp2040_usb_init+0x4c>)
10004948:	f7fb fff4 	bl	10000934 <__wrap_memset>
    usb_hw->muxing    = USB_USB_MUXING_TO_PHY_BITS    | USB_USB_MUXING_SOFTCON_BITS;
1000494c:	2309      	movs	r3, #9
1000494e:	6763      	str	r3, [r4, #116]	; 0x74
    usb_hw->pwr       = USB_USB_PWR_VBUS_DETECT_BITS  | USB_USB_PWR_VBUS_DETECT_OVERRIDE_EN_BITS;
10004950:	3303      	adds	r3, #3
10004952:	67a3      	str	r3, [r4, #120]	; 0x78
}
10004954:	bd10      	pop	{r4, pc}
10004956:	46c0      	nop			; (mov r8, r8)
10004958:	4000e000 	.word	0x4000e000
1000495c:	4000f000 	.word	0x4000f000
10004960:	4000c000 	.word	0x4000c000
10004964:	50110000 	.word	0x50110000
10004968:	50100000 	.word	0x50100000

1000496c <hw_endpoint_reset_transfer>:
    ep->stalled = false;
1000496c:	2300      	movs	r3, #0
    ep->sent_setup = false;
1000496e:	2100      	movs	r1, #0
10004970:	2232      	movs	r2, #50	; 0x32
    ep->stalled = false;
10004972:	8283      	strh	r3, [r0, #20]
    ep->sent_setup = false;
10004974:	5481      	strb	r1, [r0, r2]
    ep->total_len = 0;
10004976:	6183      	str	r3, [r0, #24]
    ep->len = 0;
10004978:	61c3      	str	r3, [r0, #28]
    ep->transfer_size = 0;
1000497a:	6203      	str	r3, [r0, #32]
    ep->user_buf = 0;
1000497c:	6283      	str	r3, [r0, #40]	; 0x28
}
1000497e:	4770      	bx	lr

10004980 <_hw_endpoint_buffer_control_update32>:
void _hw_endpoint_buffer_control_update32(struct hw_endpoint *ep, uint32_t and_mask, uint32_t or_mask) {
10004980:	b510      	push	{r4, lr}
        value = *ep->buffer_control & and_mask;
10004982:	68c3      	ldr	r3, [r0, #12]
    if (and_mask) {
10004984:	2900      	cmp	r1, #0
10004986:	d001      	beq.n	1000498c <_hw_endpoint_buffer_control_update32+0xc>
        value = *ep->buffer_control & and_mask;
10004988:	681c      	ldr	r4, [r3, #0]
1000498a:	4021      	ands	r1, r4
    if (or_mask) {
1000498c:	2a00      	cmp	r2, #0
1000498e:	d011      	beq.n	100049b4 <_hw_endpoint_buffer_control_update32+0x34>
        if (or_mask & USB_BUF_CTRL_AVAIL) {
10004990:	2480      	movs	r4, #128	; 0x80
10004992:	00e4      	lsls	r4, r4, #3
        value |= or_mask;
10004994:	4311      	orrs	r1, r2
        if (or_mask & USB_BUF_CTRL_AVAIL) {
10004996:	4222      	tst	r2, r4
10004998:	d00c      	beq.n	100049b4 <_hw_endpoint_buffer_control_update32+0x34>
            if (*ep->buffer_control & USB_BUF_CTRL_AVAIL) {
1000499a:	681a      	ldr	r2, [r3, #0]
1000499c:	4222      	tst	r2, r4
1000499e:	d10b      	bne.n	100049b8 <_hw_endpoint_buffer_control_update32+0x38>
            }
            *ep->buffer_control = value & ~USB_BUF_CTRL_AVAIL;
100049a0:	4a07      	ldr	r2, [pc, #28]	; (100049c0 <_hw_endpoint_buffer_control_update32+0x40>)
100049a2:	400a      	ands	r2, r1
100049a4:	601a      	str	r2, [r3, #0]
            // 12 cycle delay.. (should be good for 48*12Mhz = 576Mhz)
            // Don't need delay in host mode as host is in charge
#ifndef RP2040_USB_HOST_MODE
            __asm volatile (
100049a6:	e7ff      	b.n	100049a8 <_hw_endpoint_buffer_control_update32+0x28>
100049a8:	e7ff      	b.n	100049aa <_hw_endpoint_buffer_control_update32+0x2a>
100049aa:	e7ff      	b.n	100049ac <_hw_endpoint_buffer_control_update32+0x2c>
100049ac:	e7ff      	b.n	100049ae <_hw_endpoint_buffer_control_update32+0x2e>
100049ae:	e7ff      	b.n	100049b0 <_hw_endpoint_buffer_control_update32+0x30>
100049b0:	e7ff      	b.n	100049b2 <_hw_endpoint_buffer_control_update32+0x32>
                    "1:\n"
                    : : : "memory");
#endif
        }
    }
    *ep->buffer_control = value;
100049b2:	68c3      	ldr	r3, [r0, #12]
100049b4:	6019      	str	r1, [r3, #0]
}
100049b6:	bd10      	pop	{r4, pc}
100049b8:	7881      	ldrb	r1, [r0, #2]
100049ba:	7840      	ldrb	r0, [r0, #1]
100049bc:	f7ff ffa2 	bl	10004904 <_hw_endpoint_buffer_control_update32.part.0.isra.0>
100049c0:	fffffbff 	.word	0xfffffbff

100049c4 <_hw_endpoint_xfer_continue>:
    }
}

// Returns true if transfer is complete
bool _hw_endpoint_xfer_continue(struct hw_endpoint *ep)
{
100049c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _hw_endpoint_lock_update(ep, 1);
    // Part way through a transfer
    if (!ep->active)
100049c6:	7d46      	ldrb	r6, [r0, #21]
{
100049c8:	0004      	movs	r4, r0
    if (!ep->active)
100049ca:	2e00      	cmp	r6, #0
100049cc:	d100      	bne.n	100049d0 <_hw_endpoint_xfer_continue+0xc>
100049ce:	e067      	b.n	10004aa0 <_hw_endpoint_xfer_continue+0xdc>
    return *ep->buffer_control;
100049d0:	68c3      	ldr	r3, [r0, #12]
    if (!ep->rx)
100049d2:	78c0      	ldrb	r0, [r0, #3]
100049d4:	681d      	ldr	r5, [r3, #0]
    uint transferred_bytes = buf_ctrl & USB_BUF_CTRL_LEN_MASK;
100049d6:	05ad      	lsls	r5, r5, #22
100049d8:	0dad      	lsrs	r5, r5, #22
    if (!ep->rx)
100049da:	2800      	cmp	r0, #0
100049dc:	d143      	bne.n	10004a66 <_hw_endpoint_xfer_continue+0xa2>
        ep->len += transferred_bytes;
100049de:	69e3      	ldr	r3, [r4, #28]
100049e0:	18e9      	adds	r1, r5, r3
100049e2:	61e1      	str	r1, [r4, #28]

    // Update EP struct from hardware state
    _hw_endpoint_xfer_sync(ep);

    // Now we have synced our state with the hardware. Is there more data to transfer?
    uint remaining_bytes = ep->total_len - ep->len;
100049e4:	69a2      	ldr	r2, [r4, #24]
100049e6:	1a55      	subs	r5, r2, r1
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
100049e8:	2d40      	cmp	r5, #64	; 0x40
100049ea:	d82e      	bhi.n	10004a4a <_hw_endpoint_xfer_continue+0x86>
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
100049ec:	186b      	adds	r3, r5, r1
100049ee:	1a9b      	subs	r3, r3, r2
100049f0:	425f      	negs	r7, r3
100049f2:	417b      	adcs	r3, r7
100049f4:	2724      	movs	r7, #36	; 0x24
100049f6:	b2db      	uxtb	r3, r3
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
100049f8:	6225      	str	r5, [r4, #32]
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
100049fa:	55e3      	strb	r3, [r4, r7]
    _hw_endpoint_update_last_buf(ep);

    // Can happen because of programmer error so check for it
    if (ep->len > ep->total_len)
100049fc:	428a      	cmp	r2, r1
100049fe:	d34c      	bcc.n	10004a9a <_hw_endpoint_xfer_continue+0xd6>
    {
        panic("Transferred more data than expected");
    }

    // If we are done then notify tinyusb
    if (ep->len == ep->total_len)
10004a00:	d049      	beq.n	10004a96 <_hw_endpoint_xfer_continue+0xd2>
    if (!ep->rx)
10004a02:	2800      	cmp	r0, #0
10004a04:	d023      	beq.n	10004a4e <_hw_endpoint_xfer_continue+0x8a>
    uint32_t val = ep->transfer_size | USB_BUF_CTRL_AVAIL;
10004a06:	2280      	movs	r2, #128	; 0x80
10004a08:	00d2      	lsls	r2, r2, #3
10004a0a:	432a      	orrs	r2, r5
    val |= ep->next_pid ? USB_BUF_CTRL_DATA1_PID : USB_BUF_CTRL_DATA0_PID;
10004a0c:	7961      	ldrb	r1, [r4, #5]
10004a0e:	2900      	cmp	r1, #0
10004a10:	d002      	beq.n	10004a18 <_hw_endpoint_xfer_continue+0x54>
10004a12:	2080      	movs	r0, #128	; 0x80
10004a14:	0180      	lsls	r0, r0, #6
10004a16:	4302      	orrs	r2, r0
    ep->next_pid ^= 1u;
10004a18:	2001      	movs	r0, #1
10004a1a:	4041      	eors	r1, r0
10004a1c:	7161      	strb	r1, [r4, #5]
    if (ep->last_buf)
10004a1e:	2b00      	cmp	r3, #0
10004a20:	d002      	beq.n	10004a28 <_hw_endpoint_xfer_continue+0x64>
        val |= USB_BUF_CTRL_LAST;
10004a22:	2380      	movs	r3, #128	; 0x80
10004a24:	01db      	lsls	r3, r3, #7
10004a26:	431a      	orrs	r2, r3
            if (*ep->buffer_control & USB_BUF_CTRL_AVAIL) {
10004a28:	68e1      	ldr	r1, [r4, #12]
10004a2a:	680b      	ldr	r3, [r1, #0]
10004a2c:	055b      	lsls	r3, r3, #21
10004a2e:	d43c      	bmi.n	10004aaa <_hw_endpoint_xfer_continue+0xe6>
            *ep->buffer_control = value & ~USB_BUF_CTRL_AVAIL;
10004a30:	4b20      	ldr	r3, [pc, #128]	; (10004ab4 <_hw_endpoint_xfer_continue+0xf0>)
10004a32:	4013      	ands	r3, r2
10004a34:	600b      	str	r3, [r1, #0]
            __asm volatile (
10004a36:	e7ff      	b.n	10004a38 <_hw_endpoint_xfer_continue+0x74>
10004a38:	e7ff      	b.n	10004a3a <_hw_endpoint_xfer_continue+0x76>
10004a3a:	e7ff      	b.n	10004a3c <_hw_endpoint_xfer_continue+0x78>
10004a3c:	e7ff      	b.n	10004a3e <_hw_endpoint_xfer_continue+0x7a>
10004a3e:	e7ff      	b.n	10004a40 <_hw_endpoint_xfer_continue+0x7c>
10004a40:	e7ff      	b.n	10004a42 <_hw_endpoint_xfer_continue+0x7e>
        _hw_endpoint_start_next_buffer(ep);
    }

    _hw_endpoint_lock_update(ep, -1);
    // More work to do
    return false;
10004a42:	2000      	movs	r0, #0
    *ep->buffer_control = value;
10004a44:	68e3      	ldr	r3, [r4, #12]
10004a46:	601a      	str	r2, [r3, #0]
}
10004a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
10004a4a:	2540      	movs	r5, #64	; 0x40
10004a4c:	e7ce      	b.n	100049ec <_hw_endpoint_xfer_continue+0x28>
        memcpy(ep->hw_data_buf, &ep->user_buf[ep->len], ep->transfer_size);
10004a4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
10004a50:	002a      	movs	r2, r5
10004a52:	469c      	mov	ip, r3
10004a54:	6920      	ldr	r0, [r4, #16]
10004a56:	4461      	add	r1, ip
10004a58:	f7fb ff72 	bl	10000940 <__wrap___aeabi_memcpy>
        val |= USB_BUF_CTRL_FULL;
10004a5c:	2284      	movs	r2, #132	; 0x84
10004a5e:	0212      	lsls	r2, r2, #8
    if (ep->last_buf)
10004a60:	5de3      	ldrb	r3, [r4, r7]
        val |= USB_BUF_CTRL_FULL;
10004a62:	432a      	orrs	r2, r5
10004a64:	e7d2      	b.n	10004a0c <_hw_endpoint_xfer_continue+0x48>
        memcpy(&ep->user_buf[ep->len], ep->hw_data_buf, transferred_bytes);
10004a66:	69e3      	ldr	r3, [r4, #28]
10004a68:	6aa0      	ldr	r0, [r4, #40]	; 0x28
10004a6a:	469c      	mov	ip, r3
10004a6c:	6921      	ldr	r1, [r4, #16]
10004a6e:	002a      	movs	r2, r5
10004a70:	4460      	add	r0, ip
10004a72:	f7fb ff65 	bl	10000940 <__wrap___aeabi_memcpy>
        ep->len += transferred_bytes;
10004a76:	69e3      	ldr	r3, [r4, #28]
    if ((ep->rx) && (transferred_bytes < ep->transfer_size))
10004a78:	78e0      	ldrb	r0, [r4, #3]
        ep->len += transferred_bytes;
10004a7a:	18e9      	adds	r1, r5, r3
10004a7c:	61e1      	str	r1, [r4, #28]
    if ((ep->rx) && (transferred_bytes < ep->transfer_size))
10004a7e:	2800      	cmp	r0, #0
10004a80:	d0b0      	beq.n	100049e4 <_hw_endpoint_xfer_continue+0x20>
10004a82:	6a23      	ldr	r3, [r4, #32]
10004a84:	429d      	cmp	r5, r3
10004a86:	d2ad      	bcs.n	100049e4 <_hw_endpoint_xfer_continue+0x20>
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
10004a88:	2300      	movs	r3, #0
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10004a8a:	2201      	movs	r2, #1
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
10004a8c:	6223      	str	r3, [r4, #32]
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10004a8e:	3324      	adds	r3, #36	; 0x24
        ep->total_len = ep->len;
10004a90:	61a1      	str	r1, [r4, #24]
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10004a92:	54e2      	strb	r2, [r4, r3]
    if (ep->len > ep->total_len)
10004a94:	e7d8      	b.n	10004a48 <_hw_endpoint_xfer_continue+0x84>
        return true;
10004a96:	0030      	movs	r0, r6
10004a98:	e7d6      	b.n	10004a48 <_hw_endpoint_xfer_continue+0x84>
        panic("Transferred more data than expected");
10004a9a:	4807      	ldr	r0, [pc, #28]	; (10004ab8 <_hw_endpoint_xfer_continue+0xf4>)
10004a9c:	f7fd f92a 	bl	10001cf4 <panic>
        panic("Can't continue xfer on inactive ep %d %s", ep->num, ep_dir_string);
10004aa0:	7881      	ldrb	r1, [r0, #2]
10004aa2:	4a06      	ldr	r2, [pc, #24]	; (10004abc <_hw_endpoint_xfer_continue+0xf8>)
10004aa4:	4806      	ldr	r0, [pc, #24]	; (10004ac0 <_hw_endpoint_xfer_continue+0xfc>)
10004aa6:	f7fd f925 	bl	10001cf4 <panic>
10004aaa:	78a1      	ldrb	r1, [r4, #2]
10004aac:	7860      	ldrb	r0, [r4, #1]
10004aae:	f7ff ff29 	bl	10004904 <_hw_endpoint_buffer_control_update32.part.0.isra.0>
10004ab2:	46c0      	nop			; (mov r8, r8)
10004ab4:	fffffbff 	.word	0xfffffbff
10004ab8:	100070d8 	.word	0x100070d8
10004abc:	20002750 	.word	0x20002750
10004ac0:	100070ac 	.word	0x100070ac

10004ac4 <_hw_endpoint_xfer>:

void _hw_endpoint_xfer(struct hw_endpoint *ep, uint8_t *buffer, uint16_t total_len, bool start)
{
10004ac4:	b570      	push	{r4, r5, r6, lr}
10004ac6:	0004      	movs	r4, r0
    pico_trace(" total_len %d, start=%d\n", total_len, start);

    assert(ep->configured);


    if (start)
10004ac8:	2b00      	cmp	r3, #0
10004aca:	d049      	beq.n	10004b60 <_hw_endpoint_xfer+0x9c>
    if (ep->active)
10004acc:	7d43      	ldrb	r3, [r0, #21]
10004ace:	2b00      	cmp	r3, #0
10004ad0:	d003      	beq.n	10004ada <_hw_endpoint_xfer+0x16>
    ep->stalled = false;
10004ad2:	2300      	movs	r3, #0
10004ad4:	7503      	strb	r3, [r0, #20]
    ep->sent_setup = false;
10004ad6:	2032      	movs	r0, #50	; 0x32
10004ad8:	5423      	strb	r3, [r4, r0]
    ep->len = 0;
10004ada:	2300      	movs	r3, #0
    ep->total_len = total_len;
10004adc:	61a2      	str	r2, [r4, #24]
    ep->len = 0;
10004ade:	61e3      	str	r3, [r4, #28]
    ep->transfer_size = total_len > 64 ? 64 : total_len;
10004ae0:	1c15      	adds	r5, r2, #0
10004ae2:	2a40      	cmp	r2, #64	; 0x40
10004ae4:	d831      	bhi.n	10004b4a <_hw_endpoint_xfer+0x86>
    ep->active = true;
10004ae6:	2301      	movs	r3, #1
    ep->transfer_size = total_len > 64 ? 64 : total_len;
10004ae8:	b2ad      	uxth	r5, r5
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10004aea:	1b52      	subs	r2, r2, r5
    ep->active = true;
10004aec:	7563      	strb	r3, [r4, #21]
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10004aee:	4253      	negs	r3, r2
10004af0:	415a      	adcs	r2, r3
10004af2:	2624      	movs	r6, #36	; 0x24
    ep->buf_sel = 0;
10004af4:	2325      	movs	r3, #37	; 0x25
10004af6:	2000      	movs	r0, #0
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10004af8:	b2d2      	uxtb	r2, r2
    ep->transfer_size = total_len > 64 ? 64 : total_len;
10004afa:	6225      	str	r5, [r4, #32]
    ep->user_buf = buffer;
10004afc:	62a1      	str	r1, [r4, #40]	; 0x28
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10004afe:	55a2      	strb	r2, [r4, r6]
    ep->buf_sel = 0;
10004b00:	54e0      	strb	r0, [r4, r3]
    if (!ep->rx)
10004b02:	78e3      	ldrb	r3, [r4, #3]
10004b04:	2b00      	cmp	r3, #0
10004b06:	d022      	beq.n	10004b4e <_hw_endpoint_xfer+0x8a>
    uint32_t val = ep->transfer_size | USB_BUF_CTRL_AVAIL;
10004b08:	2380      	movs	r3, #128	; 0x80
10004b0a:	00db      	lsls	r3, r3, #3
10004b0c:	432b      	orrs	r3, r5
    val |= ep->next_pid ? USB_BUF_CTRL_DATA1_PID : USB_BUF_CTRL_DATA0_PID;
10004b0e:	7961      	ldrb	r1, [r4, #5]
10004b10:	2900      	cmp	r1, #0
10004b12:	d002      	beq.n	10004b1a <_hw_endpoint_xfer+0x56>
10004b14:	2080      	movs	r0, #128	; 0x80
10004b16:	0180      	lsls	r0, r0, #6
10004b18:	4303      	orrs	r3, r0
    ep->next_pid ^= 1u;
10004b1a:	2001      	movs	r0, #1
10004b1c:	4041      	eors	r1, r0
10004b1e:	7161      	strb	r1, [r4, #5]
    if (ep->last_buf)
10004b20:	2a00      	cmp	r2, #0
10004b22:	d002      	beq.n	10004b2a <_hw_endpoint_xfer+0x66>
        val |= USB_BUF_CTRL_LAST;
10004b24:	2280      	movs	r2, #128	; 0x80
10004b26:	01d2      	lsls	r2, r2, #7
10004b28:	4313      	orrs	r3, r2
            if (*ep->buffer_control & USB_BUF_CTRL_AVAIL) {
10004b2a:	68e1      	ldr	r1, [r4, #12]
10004b2c:	680a      	ldr	r2, [r1, #0]
10004b2e:	0552      	lsls	r2, r2, #21
10004b30:	d419      	bmi.n	10004b66 <_hw_endpoint_xfer+0xa2>
            *ep->buffer_control = value & ~USB_BUF_CTRL_AVAIL;
10004b32:	4a0f      	ldr	r2, [pc, #60]	; (10004b70 <_hw_endpoint_xfer+0xac>)
10004b34:	401a      	ands	r2, r3
10004b36:	600a      	str	r2, [r1, #0]
            __asm volatile (
10004b38:	e7ff      	b.n	10004b3a <_hw_endpoint_xfer+0x76>
10004b3a:	e7ff      	b.n	10004b3c <_hw_endpoint_xfer+0x78>
10004b3c:	e7ff      	b.n	10004b3e <_hw_endpoint_xfer+0x7a>
10004b3e:	e7ff      	b.n	10004b40 <_hw_endpoint_xfer+0x7c>
10004b40:	e7ff      	b.n	10004b42 <_hw_endpoint_xfer+0x7e>
10004b42:	e7ff      	b.n	10004b44 <_hw_endpoint_xfer+0x80>
    *ep->buffer_control = value;
10004b44:	68e2      	ldr	r2, [r4, #12]
10004b46:	6013      	str	r3, [r2, #0]
    }
    else
    {
        _hw_endpoint_xfer_continue(ep);
    }
}
10004b48:	bd70      	pop	{r4, r5, r6, pc}
    ep->transfer_size = total_len > 64 ? 64 : total_len;
10004b4a:	2540      	movs	r5, #64	; 0x40
10004b4c:	e7cb      	b.n	10004ae6 <_hw_endpoint_xfer+0x22>
        memcpy(ep->hw_data_buf, &ep->user_buf[ep->len], ep->transfer_size);
10004b4e:	002a      	movs	r2, r5
10004b50:	6920      	ldr	r0, [r4, #16]
10004b52:	f7fb fef5 	bl	10000940 <__wrap___aeabi_memcpy>
        val |= USB_BUF_CTRL_FULL;
10004b56:	2384      	movs	r3, #132	; 0x84
10004b58:	021b      	lsls	r3, r3, #8
    if (ep->last_buf)
10004b5a:	5da2      	ldrb	r2, [r4, r6]
        val |= USB_BUF_CTRL_FULL;
10004b5c:	432b      	orrs	r3, r5
10004b5e:	e7d6      	b.n	10004b0e <_hw_endpoint_xfer+0x4a>
        _hw_endpoint_xfer_continue(ep);
10004b60:	f7ff ff30 	bl	100049c4 <_hw_endpoint_xfer_continue>
}
10004b64:	e7f0      	b.n	10004b48 <_hw_endpoint_xfer+0x84>
10004b66:	78a1      	ldrb	r1, [r4, #2]
10004b68:	7860      	ldrb	r0, [r4, #1]
10004b6a:	f7ff fecb 	bl	10004904 <_hw_endpoint_buffer_control_update32.part.0.isra.0>
10004b6e:	46c0      	nop			; (mov r8, r8)
10004b70:	fffffbff 	.word	0xfffffbff

10004b74 <tusb_init>:
#if TUSB_OPT_DEVICE_ENABLED
#include "device/usbd_pvt.h"
#endif

bool tusb_init(void)
{
10004b74:	b570      	push	{r4, r5, r6, lr}
  // skip if already initialized
  if (_initialized) return true;
10004b76:	4d06      	ldr	r5, [pc, #24]	; (10004b90 <tusb_init+0x1c>)
10004b78:	782c      	ldrb	r4, [r5, #0]
10004b7a:	2c00      	cmp	r4, #0
10004b7c:	d001      	beq.n	10004b82 <tusb_init+0xe>
#endif

  _initialized = true;

  return TUSB_ERROR_NONE;
}
10004b7e:	0020      	movs	r0, r4
10004b80:	bd70      	pop	{r4, r5, r6, pc}
  TU_ASSERT ( tud_init() ); // init device stack
10004b82:	f7fe fda1 	bl	100036c8 <tud_init>
10004b86:	2800      	cmp	r0, #0
10004b88:	d0f9      	beq.n	10004b7e <tusb_init+0xa>
  _initialized = true;
10004b8a:	2301      	movs	r3, #1
10004b8c:	702b      	strb	r3, [r5, #0]
  return TUSB_ERROR_NONE;
10004b8e:	e7f6      	b.n	10004b7e <tusb_init+0xa>
10004b90:	20023b86 	.word	0x20023b86

10004b94 <tusb_inited>:

bool tusb_inited(void)
{
  return _initialized;
10004b94:	4b01      	ldr	r3, [pc, #4]	; (10004b9c <tusb_inited+0x8>)
10004b96:	7818      	ldrb	r0, [r3, #0]
}
10004b98:	4770      	bx	lr
10004b9a:	46c0      	nop			; (mov r8, r8)
10004b9c:	20023b86 	.word	0x20023b86

10004ba0 <_Z8OpenPagev>:
	"                                T H E     E N D\n",
};

// open page
void OpenPage()
{
10004ba0:	b570      	push	{r4, r5, r6, lr}
	LayerOff(IMG_LAYER);
10004ba2:	2001      	movs	r0, #1
10004ba4:	f000 fe0a 	bl	100057bc <_Z8LayerOffh>

	PrintSetup(Text, TEXTW, TEXTH, TEXTWB);
10004ba8:	2206      	movs	r2, #6
10004baa:	2150      	movs	r1, #80	; 0x50
10004bac:	23a0      	movs	r3, #160	; 0xa0
10004bae:	4816      	ldr	r0, [pc, #88]	; (10004c08 <_Z8OpenPagev+0x68>)
10004bb0:	f001 fb34 	bl	1000621c <_Z10PrintSetupPhiii>
	int inx = Page;
10004bb4:	4b15      	ldr	r3, [pc, #84]	; (10004c0c <_Z8OpenPagev+0x6c>)
	PrintSetCol(PC_COLOR(PC_BLACK, PC_WHITE));
10004bb6:	200f      	movs	r0, #15
	int inx = Page;
10004bb8:	681d      	ldr	r5, [r3, #0]
	PrintSetCol(PC_COLOR(PC_BLACK, PC_WHITE));
10004bba:	f001 fbaf 	bl	1000631c <_Z11PrintSetColh>
	PrintClear();
10004bbe:	f001 fb57 	bl	10006270 <_Z10PrintClearv>
	memcpy(Img_rows_Copy, ImgRowsList[inx], (IMGHEIGHT+1)*sizeof(u16));
10004bc2:	4b13      	ldr	r3, [pc, #76]	; (10004c10 <_Z8OpenPagev+0x70>)
10004bc4:	00ac      	lsls	r4, r5, #2
10004bc6:	58e1      	ldr	r1, [r4, r3]
10004bc8:	4a12      	ldr	r2, [pc, #72]	; (10004c14 <_Z8OpenPagev+0x74>)
10004bca:	4813      	ldr	r0, [pc, #76]	; (10004c18 <_Z8OpenPagev+0x78>)
10004bcc:	f7fb feb8 	bl	10000940 <__wrap___aeabi_memcpy>
	memcpy(Img_Copy, ImgList[inx], ImgSizeList[inx]);
10004bd0:	4b12      	ldr	r3, [pc, #72]	; (10004c1c <_Z8OpenPagev+0x7c>)
10004bd2:	4813      	ldr	r0, [pc, #76]	; (10004c20 <_Z8OpenPagev+0x80>)
10004bd4:	58e1      	ldr	r1, [r4, r3]
10004bd6:	4b13      	ldr	r3, [pc, #76]	; (10004c24 <_Z8OpenPagev+0x84>)
10004bd8:	58e2      	ldr	r2, [r4, r3]
10004bda:	f7fb feb1 	bl	10000940 <__wrap___aeabi_memcpy>
	PrintText(PageText[inx]);
10004bde:	4b12      	ldr	r3, [pc, #72]	; (10004c28 <_Z8OpenPagev+0x88>)
10004be0:	58e0      	ldr	r0, [r4, r3]
10004be2:	f001 fba1 	bl	10006328 <_Z9PrintTextPKc>

	// page 0
	if (inx == 0)
10004be6:	2d00      	cmp	r5, #0
10004be8:	d003      	beq.n	10004bf2 <_Z8OpenPagev+0x52>
		PrintSetCol(PC_COLOR(PC_BLACK, PC_LTRED));
		PrintSetPos((TEXTW - sizeof(Title)+1)/2, 2);
		PrintText(Title);
	}

	LayerOn(IMG_LAYER);
10004bea:	2001      	movs	r0, #1
10004bec:	f000 fdd6 	bl	1000579c <_Z7LayerOnh>
}
10004bf0:	bd70      	pop	{r4, r5, r6, pc}
		PrintSetCol(PC_COLOR(PC_BLACK, PC_LTRED));
10004bf2:	200c      	movs	r0, #12
10004bf4:	f001 fb92 	bl	1000631c <_Z11PrintSetColh>
		PrintSetPos((TEXTW - sizeof(Title)+1)/2, 2);
10004bf8:	2102      	movs	r1, #2
10004bfa:	201d      	movs	r0, #29
10004bfc:	f001 fb84 	bl	10006308 <_Z11PrintSetPosii>
		PrintText(Title);
10004c00:	480a      	ldr	r0, [pc, #40]	; (10004c2c <_Z8OpenPagev+0x8c>)
10004c02:	f001 fb91 	bl	10006328 <_Z9PrintTextPKc>
10004c06:	e7f0      	b.n	10004bea <_Z8OpenPagev+0x4a>
10004c08:	20022abc 	.word	0x20022abc
10004c0c:	200218bc 	.word	0x200218bc
10004c10:	101aca70 	.word	0x101aca70
10004c14:	00000362 	.word	0x00000362
10004c18:	2001fdbc 	.word	0x2001fdbc
10004c1c:	101acb38 	.word	0x101acb38
10004c20:	2000500c 	.word	0x2000500c
10004c24:	101acac8 	.word	0x101acac8
10004c28:	20002758 	.word	0x20002758
10004c2c:	101acb20 	.word	0x101acb20

10004c30 <_Z9VideoInitv>:

// initialize videomode
void VideoInit()
{
10004c30:	b5f0      	push	{r4, r5, r6, r7, lr}
	// setup videomode
	VgaCfgDef(&Cfg); // get default configuration
10004c32:	4d29      	ldr	r5, [pc, #164]	; (10004cd8 <_Z9VideoInitv+0xa8>)
{
10004c34:	b085      	sub	sp, #20
	VgaCfgDef(&Cfg); // get default configuration
10004c36:	0028      	movs	r0, r5
10004c38:	f000 fea8 	bl	1000598c <_Z9VgaCfgDefP7sVgaCfg>
	Cfg.video = &VideoVGA; // video timings
10004c3c:	4b27      	ldr	r3, [pc, #156]	; (10004cdc <_Z9VideoInitv+0xac>)

	// initialize base layer 0
	ScreenClear(pScreen);

	// initialize base layer 0 to simple color (will not be visible) + text segment
	sStrip* t = ScreenAddStrip(pScreen, IMGHEIGHT);
10004c3e:	27d8      	movs	r7, #216	; 0xd8
	Cfg.video = &VideoVGA; // video timings
10004c40:	60ab      	str	r3, [r5, #8]
	Cfg.width = WIDTH; // screen width
10004c42:	4b27      	ldr	r3, [pc, #156]	; (10004ce0 <_Z9VideoInitv+0xb0>)
	VgaCfg(&Cfg, &Vmode); // calculate videomode setup
10004c44:	0028      	movs	r0, r5
	Cfg.width = WIDTH; // screen width
10004c46:	602b      	str	r3, [r5, #0]
	Cfg.freq = 150000; // user faster sys_clk (AText mode is not fast enough)
10004c48:	4b26      	ldr	r3, [pc, #152]	; (10004ce4 <_Z9VideoInitv+0xb4>)
	VgaCfg(&Cfg, &Vmode); // calculate videomode setup
10004c4a:	4c27      	ldr	r4, [pc, #156]	; (10004ce8 <_Z9VideoInitv+0xb8>)
	Cfg.freq = 150000; // user faster sys_clk (AText mode is not fast enough)
10004c4c:	60eb      	str	r3, [r5, #12]
	Cfg.mode[IMG_LAYER] = LAYERMODE_RLE; // layer 1 mode
10004c4e:	2306      	movs	r3, #6
10004c50:	756b      	strb	r3, [r5, #21]
	sSegm* g = ScreenAddSegm(t, WIDTH);
10004c52:	25a0      	movs	r5, #160	; 0xa0
	VgaCfg(&Cfg, &Vmode); // calculate videomode setup
10004c54:	0021      	movs	r1, r4
10004c56:	f000 feaf 	bl	100059b8 <_Z6VgaCfgPK7sVgaCfgP6sVmode>
	ScreenClear(pScreen);
10004c5a:	4e24      	ldr	r6, [pc, #144]	; (10004cec <_Z9VideoInitv+0xbc>)
	sStrip* t = ScreenAddStrip(pScreen, IMGHEIGHT);
10004c5c:	007f      	lsls	r7, r7, #1
	ScreenClear(pScreen);
10004c5e:	6830      	ldr	r0, [r6, #0]
10004c60:	f000 fe40 	bl	100058e4 <_Z11ScreenClearP7sScreen>
	sSegm* g = ScreenAddSegm(t, WIDTH);
10004c64:	00ad      	lsls	r5, r5, #2
	sStrip* t = ScreenAddStrip(pScreen, IMGHEIGHT);
10004c66:	0039      	movs	r1, r7
10004c68:	6830      	ldr	r0, [r6, #0]
10004c6a:	f000 fe43 	bl	100058f4 <_Z14ScreenAddStripP7sScreeni>
	sSegm* g = ScreenAddSegm(t, WIDTH);
10004c6e:	0029      	movs	r1, r5
10004c70:	f000 fe52 	bl	10005918 <_Z13ScreenAddSegmP6sStripi>
	ScreenSegmColor(g, 0, 0);
10004c74:	2200      	movs	r2, #0
10004c76:	2100      	movs	r1, #0
10004c78:	f000 fe6a 	bl	10005950 <_Z15ScreenSegmColorP5sSegmmm>
	t = ScreenAddStrip(pScreen, TEXTHEIGHT);
10004c7c:	2130      	movs	r1, #48	; 0x30
10004c7e:	6830      	ldr	r0, [r6, #0]
10004c80:	f000 fe38 	bl	100058f4 <_Z14ScreenAddStripP7sScreeni>
	g = ScreenAddSegm(t, WIDTH);
10004c84:	0029      	movs	r1, r5
10004c86:	f000 fe47 	bl	10005918 <_Z13ScreenAddSegmP6sStripi>
	ScreenSegmAText(g, Text, Font_Copy, 8, DefPal16, TEXTWB);
10004c8a:	23a0      	movs	r3, #160	; 0xa0
10004c8c:	9301      	str	r3, [sp, #4]
10004c8e:	4b18      	ldr	r3, [pc, #96]	; (10004cf0 <_Z9VideoInitv+0xc0>)
10004c90:	4a18      	ldr	r2, [pc, #96]	; (10004cf4 <_Z9VideoInitv+0xc4>)
10004c92:	9300      	str	r3, [sp, #0]
10004c94:	4918      	ldr	r1, [pc, #96]	; (10004cf8 <_Z9VideoInitv+0xc8>)
10004c96:	2308      	movs	r3, #8
10004c98:	f000 fe64 	bl	10005964 <_Z15ScreenSegmATextP5sSegmPKvS2_tS2_i>

	// setup layer 1 with RLE image
	LayerSetup(IMG_LAYER, Img_Copy, &Vmode, IMGWIDTH, IMGHEIGHT, 0, Img_rows_Copy);
10004c9c:	4b17      	ldr	r3, [pc, #92]	; (10004cfc <_Z9VideoInitv+0xcc>)
10004c9e:	0022      	movs	r2, r4
10004ca0:	9302      	str	r3, [sp, #8]
10004ca2:	2300      	movs	r3, #0
10004ca4:	4916      	ldr	r1, [pc, #88]	; (10004d00 <_Z9VideoInitv+0xd0>)
10004ca6:	9301      	str	r3, [sp, #4]
10004ca8:	2001      	movs	r0, #1
10004caa:	002b      	movs	r3, r5
10004cac:	9700      	str	r7, [sp, #0]
10004cae:	f000 fd95 	bl	100057dc <_Z10LayerSetuphPKhPK6sVmodetthPKv>
	LayerOn(IMG_LAYER);
10004cb2:	2001      	movs	r0, #1
10004cb4:	f000 fd72 	bl	1000579c <_Z7LayerOnh>

	// initialize system clock
	set_sys_clock_pll(Vmode.vco*1000, Vmode.pd1, Vmode.pd2);
10004cb8:	68e3      	ldr	r3, [r4, #12]
10004cba:	7ce2      	ldrb	r2, [r4, #19]
10004cbc:	0158      	lsls	r0, r3, #5
10004cbe:	1ac0      	subs	r0, r0, r3
10004cc0:	0080      	lsls	r0, r0, #2
10004cc2:	18c0      	adds	r0, r0, r3
10004cc4:	7ca1      	ldrb	r1, [r4, #18]
10004cc6:	00c0      	lsls	r0, r0, #3
10004cc8:	f7fd fa8a 	bl	100021e0 <set_sys_clock_pll>

	// initialize videomode
	VgaInitReq(&Vmode);
10004ccc:	0020      	movs	r0, r4
10004cce:	f000 fd51 	bl	10005774 <_Z10VgaInitReqPK6sVmode>
}
10004cd2:	b005      	add	sp, #20
10004cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004cd6:	46c0      	nop			; (mov r8, r8)
10004cd8:	20003270 	.word	0x20003270
10004cdc:	101acef8 	.word	0x101acef8
10004ce0:	01e00280 	.word	0x01e00280
10004ce4:	000249f0 	.word	0x000249f0
10004ce8:	20022e80 	.word	0x20022e80
10004cec:	200027e4 	.word	0x200027e4
10004cf0:	200027d4 	.word	0x200027d4
10004cf4:	20004808 	.word	0x20004808
10004cf8:	20022abc 	.word	0x20022abc
10004cfc:	2001fdbc 	.word	0x2001fdbc
10004d00:	2000500c 	.word	0x2000500c

10004d04 <_Z10initJoyPadv>:
// #define PB_CF 21		// Center Fire
// #define PB_DN 22		// Down direction
// #define PB_UR 26		// Upper right
// #define PB_UP 27		// Up direction
void initJoyPad()
{
10004d04:	b510      	push	{r4, lr}
	gpio_init(PB_UL);
10004d06:	201a      	movs	r0, #26
10004d08:	f7fc f9ca 	bl	100010a0 <gpio_init>
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO to set to input, as bits 0-29
 */
static inline void gpio_set_dir_in_masked(uint32_t mask) {
    sio_hw->gpio_oe_clr = mask;
10004d0c:	24d0      	movs	r4, #208	; 0xd0
10004d0e:	2380      	movs	r3, #128	; 0x80
10004d10:	0624      	lsls	r4, r4, #24
10004d12:	04db      	lsls	r3, r3, #19
10004d14:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10004d16:	2200      	movs	r2, #0
10004d18:	2101      	movs	r1, #1
10004d1a:	201a      	movs	r0, #26
10004d1c:	f7fc f996 	bl	1000104c <gpio_set_pulls>
	gpio_set_dir(PB_UL, GPIO_IN);
	gpio_pull_up(PB_UL);
	
	gpio_init(PB_FR);
10004d20:	2011      	movs	r0, #17
10004d22:	f7fc f9bd 	bl	100010a0 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10004d26:	2380      	movs	r3, #128	; 0x80
10004d28:	029b      	lsls	r3, r3, #10
10004d2a:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10004d2c:	2200      	movs	r2, #0
10004d2e:	2101      	movs	r1, #1
10004d30:	2011      	movs	r0, #17
10004d32:	f7fc f98b 	bl	1000104c <gpio_set_pulls>
	gpio_set_dir(PB_FR, GPIO_IN);
	gpio_pull_up(PB_FR);
	
	gpio_init(PB_UP);
10004d36:	2010      	movs	r0, #16
10004d38:	f7fc f9b2 	bl	100010a0 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10004d3c:	2380      	movs	r3, #128	; 0x80
10004d3e:	025b      	lsls	r3, r3, #9
10004d40:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10004d42:	2200      	movs	r2, #0
10004d44:	2101      	movs	r1, #1
10004d46:	2010      	movs	r0, #16
10004d48:	f7fc f980 	bl	1000104c <gpio_set_pulls>
	gpio_set_dir(PB_UP, GPIO_IN);
	gpio_pull_up(PB_UP);
	
	gpio_init(PB_UR);
10004d4c:	2016      	movs	r0, #22
10004d4e:	f7fc f9a7 	bl	100010a0 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10004d52:	2380      	movs	r3, #128	; 0x80
10004d54:	03db      	lsls	r3, r3, #15
10004d56:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10004d58:	2200      	movs	r2, #0
10004d5a:	2101      	movs	r1, #1
10004d5c:	2016      	movs	r0, #22
10004d5e:	f7fc f975 	bl	1000104c <gpio_set_pulls>
	gpio_set_dir(PB_UR, GPIO_IN);
	gpio_pull_up(PB_UR);
	
	gpio_init(PB_DN);
10004d62:	2012      	movs	r0, #18
10004d64:	f7fc f99c 	bl	100010a0 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10004d68:	2380      	movs	r3, #128	; 0x80
10004d6a:	02db      	lsls	r3, r3, #11
10004d6c:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10004d6e:	2200      	movs	r2, #0
10004d70:	2101      	movs	r1, #1
10004d72:	2012      	movs	r0, #18
10004d74:	f7fc f96a 	bl	1000104c <gpio_set_pulls>
	gpio_set_dir(PB_DN, GPIO_IN);
	gpio_pull_up(PB_DN);
	
	gpio_init(PB_LT);
10004d78:	2014      	movs	r0, #20
10004d7a:	f7fc f991 	bl	100010a0 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10004d7e:	2380      	movs	r3, #128	; 0x80
10004d80:	035b      	lsls	r3, r3, #13
10004d82:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10004d84:	2200      	movs	r2, #0
10004d86:	2101      	movs	r1, #1
10004d88:	2014      	movs	r0, #20
10004d8a:	f7fc f95f 	bl	1000104c <gpio_set_pulls>
	gpio_set_dir(PB_LT, GPIO_IN);
	gpio_pull_up(PB_LT);
	
	gpio_init(PB_RT);
10004d8e:	2015      	movs	r0, #21
10004d90:	f7fc f986 	bl	100010a0 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10004d94:	2380      	movs	r3, #128	; 0x80
10004d96:	039b      	lsls	r3, r3, #14
10004d98:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10004d9a:	2200      	movs	r2, #0
10004d9c:	2101      	movs	r1, #1
10004d9e:	2015      	movs	r0, #21
10004da0:	f7fc f954 	bl	1000104c <gpio_set_pulls>
	gpio_set_dir(PB_RT, GPIO_IN);
	gpio_pull_up(PB_RT);
	
	gpio_init(PB_CF);
10004da4:	201b      	movs	r0, #27
10004da6:	f7fc f97b 	bl	100010a0 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10004daa:	2380      	movs	r3, #128	; 0x80
10004dac:	051b      	lsls	r3, r3, #20
    gpio_set_pulls(gpio, true, false);
10004dae:	2200      	movs	r2, #0
10004db0:	2101      	movs	r1, #1
10004db2:	201b      	movs	r0, #27
    sio_hw->gpio_oe_clr = mask;
10004db4:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10004db6:	f7fc f949 	bl	1000104c <gpio_set_pulls>
	gpio_set_dir(PB_CF, GPIO_IN);
	gpio_pull_up(PB_CF);
}
10004dba:	bd10      	pop	{r4, pc}

10004dbc <main>:
int main()
{
	char ch;

	// copy font to RAM buffer
	memcpy(Font_Copy, FontBold8x8, sizeof(FontBold8x8));
10004dbc:	2280      	movs	r2, #128	; 0x80
{
10004dbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memcpy(Font_Copy, FontBold8x8, sizeof(FontBold8x8));
10004dc0:	4923      	ldr	r1, [pc, #140]	; (10004e50 <main+0x94>)
10004dc2:	0112      	lsls	r2, r2, #4
10004dc4:	4823      	ldr	r0, [pc, #140]	; (10004e54 <main+0x98>)
10004dc6:	f7fb fdbb 	bl	10000940 <__wrap___aeabi_memcpy>

	// run VGA core
	multicore_launch_core1(VgaCore);
10004dca:	4823      	ldr	r0, [pc, #140]	; (10004e58 <main+0x9c>)
10004dcc:	f7fc fb50 	bl	10001470 <multicore_launch_core1>

	// initialize videomode (and open first page)
	VideoInit();
10004dd0:	f7ff ff2e 	bl	10004c30 <_Z9VideoInitv>

	// open first page
	Page = 0;
10004dd4:	2300      	movs	r3, #0
10004dd6:	4e21      	ldr	r6, [pc, #132]	; (10004e5c <main+0xa0>)
    return !!((1ul << gpio) & sio_hw->gpio_in);
10004dd8:	25d0      	movs	r5, #208	; 0xd0
10004dda:	6033      	str	r3, [r6, #0]
10004ddc:	2401      	movs	r4, #1
	OpenPage();
10004dde:	f7ff fedf 	bl	10004ba0 <_Z8OpenPagev>
			break;

		case 'L':
		case 'l':
			Page++;
			if (Page >= PAGES) Page = 0;
10004de2:	2700      	movs	r7, #0
	stdio_init_all();
10004de4:	f7fd f8ba 	bl	10001f5c <stdio_init_all>
	initJoyPad();
10004de8:	f7ff ff8c 	bl	10004d04 <_Z10initJoyPadv>
10004dec:	062d      	lsls	r5, r5, #24
10004dee:	686b      	ldr	r3, [r5, #4]
10004df0:	0d1b      	lsrs	r3, r3, #20
		if (!gpio_get(PB_LT))
10004df2:	421c      	tst	r4, r3
10004df4:	d019      	beq.n	10004e2a <main+0x6e>
10004df6:	686b      	ldr	r3, [r5, #4]
10004df8:	0d5b      	lsrs	r3, r3, #21
		else if (!gpio_get(PB_RT))
10004dfa:	421c      	tst	r4, r3
10004dfc:	d1f7      	bne.n	10004dee <main+0x32>
10004dfe:	686b      	ldr	r3, [r5, #4]
10004e00:	0d5b      	lsrs	r3, r3, #21
			while (!gpio_get(PB_RT))
10004e02:	421c      	tst	r4, r3
10004e04:	d106      	bne.n	10004e14 <main+0x58>
				sleep_ms(20);
10004e06:	2014      	movs	r0, #20
10004e08:	f7fd fdc4 	bl	10002994 <sleep_ms>
10004e0c:	686b      	ldr	r3, [r5, #4]
10004e0e:	0d5b      	lsrs	r3, r3, #21
			while (!gpio_get(PB_RT))
10004e10:	421c      	tst	r4, r3
10004e12:	d0f8      	beq.n	10004e06 <main+0x4a>
			Page++;
10004e14:	6833      	ldr	r3, [r6, #0]
10004e16:	3301      	adds	r3, #1
			if (Page >= PAGES) Page = 0;
10004e18:	2b15      	cmp	r3, #21
10004e1a:	dd14      	ble.n	10004e46 <main+0x8a>
10004e1c:	6037      	str	r7, [r6, #0]
			OpenPage();
10004e1e:	f7ff febf 	bl	10004ba0 <_Z8OpenPagev>
10004e22:	686b      	ldr	r3, [r5, #4]
10004e24:	0d1b      	lsrs	r3, r3, #20
		if (!gpio_get(PB_LT))
10004e26:	421c      	tst	r4, r3
10004e28:	d1e5      	bne.n	10004df6 <main+0x3a>
10004e2a:	686b      	ldr	r3, [r5, #4]
10004e2c:	0d1b      	lsrs	r3, r3, #20
			while (!gpio_get(PB_LT))
10004e2e:	421c      	tst	r4, r3
10004e30:	d106      	bne.n	10004e40 <main+0x84>
				sleep_ms(20);
10004e32:	2014      	movs	r0, #20
10004e34:	f7fd fdae 	bl	10002994 <sleep_ms>
10004e38:	686b      	ldr	r3, [r5, #4]
10004e3a:	0d1b      	lsrs	r3, r3, #20
			while (!gpio_get(PB_LT))
10004e3c:	421c      	tst	r4, r3
10004e3e:	d0f8      	beq.n	10004e32 <main+0x76>
			if (Page < 0) Page = PAGES-1;
10004e40:	6833      	ldr	r3, [r6, #0]
10004e42:	3b01      	subs	r3, #1
10004e44:	d401      	bmi.n	10004e4a <main+0x8e>
10004e46:	6033      	str	r3, [r6, #0]
10004e48:	e7e9      	b.n	10004e1e <main+0x62>
10004e4a:	2315      	movs	r3, #21
10004e4c:	6033      	str	r3, [r6, #0]
10004e4e:	e7e6      	b.n	10004e1e <main+0x62>
10004e50:	101acf30 	.word	0x101acf30
10004e54:	20004808 	.word	0x20004808
10004e58:	10005729 	.word	0x10005729
10004e5c:	200218bc 	.word	0x200218bc

10004e60 <_Z10VgaDmaInitv>:
 * \param read_addr Initial read address of transfer.
 * \param trigger True to start the transfer immediately
 */
static inline void dma_channel_set_read_addr(uint channel, const volatile void *read_addr, bool trigger) {
    if (!trigger) {
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10004e60:	23a0      	movs	r3, #160	; 0xa0
// 0x10 (alias 1):  CTRL        READ_ADDR     WRITE_ADDR    TRANS_COUNT_TRIG
// 0x20 (alias 2):  CTRL        TRANS_COUNT   READ_ADDR     WRITE_ADDR_TRIG
// 0x30 (alias 3):  CTRL        WRITE_ADDR    TRANS_COUNT   READ_ADDR_TRIG ... !

void VgaDmaInit()
{
10004e62:	b570      	push	{r4, r5, r6, lr}
 * \param trans_count The number of transfers (not NOT bytes, see channel_config_set_transfer_data_size)
 * \param trigger True to start the transfer immediately
 */
static inline void dma_channel_set_trans_count(uint channel, uint32_t trans_count, bool trigger) {
    if (!trigger) {
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10004e64:	2402      	movs	r4, #2
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10004e66:	4a2a      	ldr	r2, [pc, #168]	; (10004f10 <_Z10VgaDmaInitv+0xb0>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10004e68:	492a      	ldr	r1, [pc, #168]	; (10004f14 <_Z10VgaDmaInitv+0xb4>)
10004e6a:	05db      	lsls	r3, r3, #23
10004e6c:	6019      	str	r1, [r3, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10004e6e:	605a      	str	r2, [r3, #4]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10004e70:	4a29      	ldr	r2, [pc, #164]	; (10004f18 <_Z10VgaDmaInitv+0xb8>)
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10004e72:	609c      	str	r4, [r3, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10004e74:	611a      	str	r2, [r3, #16]
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10004e76:	2200      	movs	r2, #0
10004e78:	4b28      	ldr	r3, [pc, #160]	; (10004f1c <_Z10VgaDmaInitv+0xbc>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10004e7a:	4829      	ldr	r0, [pc, #164]	; (10004f20 <_Z10VgaDmaInitv+0xc0>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10004e7c:	601a      	str	r2, [r3, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10004e7e:	6058      	str	r0, [r3, #4]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10004e80:	4828      	ldr	r0, [pc, #160]	; (10004f24 <_Z10VgaDmaInitv+0xc4>)
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10004e82:	609a      	str	r2, [r3, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10004e84:	6118      	str	r0, [r3, #16]
	dma_channel_config cfg;
	int layer;
	for (layer = 0; layer < LAYERS; layer++)
	{
		// layer is not active
		if ((layer > 0) && (LayerModeInx[layer] == LAYERMODE_BASE)) continue;
10004e86:	4b28      	ldr	r3, [pc, #160]	; (10004f28 <_Z10VgaDmaInitv+0xc8>)
10004e88:	7858      	ldrb	r0, [r3, #1]
10004e8a:	2800      	cmp	r0, #0
10004e8c:	d00d      	beq.n	10004eaa <_Z10VgaDmaInitv+0x4a>
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10004e8e:	4827      	ldr	r0, [pc, #156]	; (10004f2c <_Z10VgaDmaInitv+0xcc>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10004e90:	4d27      	ldr	r5, [pc, #156]	; (10004f30 <_Z10VgaDmaInitv+0xd0>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10004e92:	6001      	str	r1, [r0, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10004e94:	6045      	str	r5, [r0, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10004e96:	6084      	str	r4, [r0, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10004e98:	4c26      	ldr	r4, [pc, #152]	; (10004f34 <_Z10VgaDmaInitv+0xd4>)
10004e9a:	6104      	str	r4, [r0, #16]
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10004e9c:	4826      	ldr	r0, [pc, #152]	; (10004f38 <_Z10VgaDmaInitv+0xd8>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10004e9e:	4c27      	ldr	r4, [pc, #156]	; (10004f3c <_Z10VgaDmaInitv+0xdc>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10004ea0:	6002      	str	r2, [r0, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10004ea2:	6044      	str	r4, [r0, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10004ea4:	6082      	str	r2, [r0, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10004ea6:	4a26      	ldr	r2, [pc, #152]	; (10004f40 <_Z10VgaDmaInitv+0xe0>)
10004ea8:	6102      	str	r2, [r0, #16]
10004eaa:	789a      	ldrb	r2, [r3, #2]
10004eac:	2a00      	cmp	r2, #0
10004eae:	d00f      	beq.n	10004ed0 <_Z10VgaDmaInitv+0x70>
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10004eb0:	4a24      	ldr	r2, [pc, #144]	; (10004f44 <_Z10VgaDmaInitv+0xe4>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10004eb2:	4825      	ldr	r0, [pc, #148]	; (10004f48 <_Z10VgaDmaInitv+0xe8>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10004eb4:	6011      	str	r1, [r2, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10004eb6:	6050      	str	r0, [r2, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10004eb8:	2002      	movs	r0, #2
10004eba:	6090      	str	r0, [r2, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10004ebc:	4823      	ldr	r0, [pc, #140]	; (10004f4c <_Z10VgaDmaInitv+0xec>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10004ebe:	4c24      	ldr	r4, [pc, #144]	; (10004f50 <_Z10VgaDmaInitv+0xf0>)
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10004ec0:	6110      	str	r0, [r2, #16]
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10004ec2:	2000      	movs	r0, #0
10004ec4:	4a23      	ldr	r2, [pc, #140]	; (10004f54 <_Z10VgaDmaInitv+0xf4>)
10004ec6:	6010      	str	r0, [r2, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10004ec8:	6054      	str	r4, [r2, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10004eca:	6090      	str	r0, [r2, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10004ecc:	4822      	ldr	r0, [pc, #136]	; (10004f58 <_Z10VgaDmaInitv+0xf8>)
10004ece:	6110      	str	r0, [r2, #16]
10004ed0:	78db      	ldrb	r3, [r3, #3]
10004ed2:	2b00      	cmp	r3, #0
10004ed4:	d00f      	beq.n	10004ef6 <_Z10VgaDmaInitv+0x96>
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10004ed6:	4b21      	ldr	r3, [pc, #132]	; (10004f5c <_Z10VgaDmaInitv+0xfc>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10004ed8:	4a21      	ldr	r2, [pc, #132]	; (10004f60 <_Z10VgaDmaInitv+0x100>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10004eda:	6019      	str	r1, [r3, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10004edc:	605a      	str	r2, [r3, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10004ede:	2202      	movs	r2, #2
10004ee0:	609a      	str	r2, [r3, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10004ee2:	4a20      	ldr	r2, [pc, #128]	; (10004f64 <_Z10VgaDmaInitv+0x104>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10004ee4:	4920      	ldr	r1, [pc, #128]	; (10004f68 <_Z10VgaDmaInitv+0x108>)
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10004ee6:	611a      	str	r2, [r3, #16]
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10004ee8:	2200      	movs	r2, #0
10004eea:	4b20      	ldr	r3, [pc, #128]	; (10004f6c <_Z10VgaDmaInitv+0x10c>)
10004eec:	601a      	str	r2, [r3, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10004eee:	6059      	str	r1, [r3, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10004ef0:	609a      	str	r2, [r3, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10004ef2:	4a1f      	ldr	r2, [pc, #124]	; (10004f70 <_Z10VgaDmaInitv+0x110>)
10004ef4:	611a      	str	r2, [r3, #16]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10004ef6:	2202      	movs	r2, #2
10004ef8:	4b1e      	ldr	r3, [pc, #120]	; (10004f74 <_Z10VgaDmaInitv+0x114>)

	// enable DMA channel IRQ0
	dma_channel_set_irq0_enabled(VGA_DMA_PIO0, true);

	// set DMA IRQ handler
	irq_set_exclusive_handler(DMA_IRQ_0, VgaLine);
10004efa:	200b      	movs	r0, #11
10004efc:	601a      	str	r2, [r3, #0]
10004efe:	491e      	ldr	r1, [pc, #120]	; (10004f78 <_Z10VgaDmaInitv+0x118>)
10004f00:	f7fc f90e 	bl	10001120 <irq_set_exclusive_handler>

	// set highest IRQ priority
	irq_set_priority(DMA_IRQ_0, 0);
10004f04:	2100      	movs	r1, #0
10004f06:	200b      	movs	r0, #11
10004f08:	f7fc fa14 	bl	10001334 <irq_set_priority>
}
10004f0c:	bd70      	pop	{r4, r5, r6, pc}
10004f0e:	46c0      	nop			; (mov r8, r8)
10004f10:	50000078 	.word	0x50000078
10004f14:	20003290 	.word	0x20003290
10004f18:	001f84f9 	.word	0x001f84f9
10004f1c:	50000040 	.word	0x50000040
10004f20:	50200010 	.word	0x50200010
10004f24:	0060001b 	.word	0x0060001b
10004f28:	20020124 	.word	0x20020124
10004f2c:	50000080 	.word	0x50000080
10004f30:	500000f8 	.word	0x500000f8
10004f34:	001f94f9 	.word	0x001f94f9
10004f38:	500000c0 	.word	0x500000c0
10004f3c:	50200014 	.word	0x50200014
10004f40:	0060901b 	.word	0x0060901b
10004f44:	50000100 	.word	0x50000100
10004f48:	50000178 	.word	0x50000178
10004f4c:	001fa4f9 	.word	0x001fa4f9
10004f50:	50200018 	.word	0x50200018
10004f54:	50000140 	.word	0x50000140
10004f58:	0061201b 	.word	0x0061201b
10004f5c:	50000180 	.word	0x50000180
10004f60:	500001f8 	.word	0x500001f8
10004f64:	001fb4f9 	.word	0x001fb4f9
10004f68:	5020001c 	.word	0x5020001c
10004f6c:	500001c0 	.word	0x500001c0
10004f70:	0061b01b 	.word	0x0061b01b
10004f74:	50002404 	.word	0x50002404
10004f78:	20002531 	.word	0x20002531

10004f7c <_Z10VgaPioInitv>:

// initialize VGA PIO
void VgaPioInit()
{
10004f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
10004f7e:	46ce      	mov	lr, r9
10004f80:	4647      	mov	r7, r8
10004f82:	b580      	push	{r7, lr}
10004f84:	b099      	sub	sp, #100	; 0x64
	int i;

	// clear PIO instruction memory 
	pio_clear_instruction_memory(VGA_PIO);
10004f86:	485c      	ldr	r0, [pc, #368]	; (100050f8 <_Z10VgaPioInitv+0x17c>)

	// configure main program instructions
	uint16_t ins[32]; // temporary buffer of program instructions
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
10004f88:	ac08      	add	r4, sp, #32
	pio_clear_instruction_memory(VGA_PIO);
10004f8a:	f7fc fd25 	bl	100019d8 <pio_clear_instruction_memory>
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
10004f8e:	0022      	movs	r2, r4
10004f90:	4b5a      	ldr	r3, [pc, #360]	; (100050fc <_Z10VgaPioInitv+0x180>)
10004f92:	cb23      	ldmia	r3!, {r0, r1, r5}
10004f94:	c223      	stmia	r2!, {r0, r1, r5}
10004f96:	cb23      	ldmia	r3!, {r0, r1, r5}
10004f98:	c223      	stmia	r2!, {r0, r1, r5}
10004f9a:	6819      	ldr	r1, [r3, #0]
	u16 cpp = (u16)CurVmode.cpp; // number of clocks per pixel
10004f9c:	4d58      	ldr	r5, [pc, #352]	; (10005100 <_Z10VgaPioInitv+0x184>)
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
10004f9e:	6011      	str	r1, [r2, #0]
10004fa0:	889b      	ldrh	r3, [r3, #4]
	// load main program into PIO's instruction memory
	struct pio_program prg;
	prg.instructions = ins;
	prg.length = vga_program.length;
	prg.origin = BASE_OFFSET;
	pio_add_program(VGA_PIO, &prg);
10004fa2:	4855      	ldr	r0, [pc, #340]	; (100050f8 <_Z10VgaPioInitv+0x17c>)
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
10004fa4:	8093      	strh	r3, [r2, #4]
	ins[vga_offset_extra1] |= (cpp-2) << 8; // update waits
10004fa6:	8aee      	ldrh	r6, [r5, #22]
10004fa8:	4b56      	ldr	r3, [pc, #344]	; (10005104 <_Z10VgaPioInitv+0x188>)
10004faa:	1eb2      	subs	r2, r6, #2
10004fac:	0212      	lsls	r2, r2, #8
10004fae:	4313      	orrs	r3, r2
10004fb0:	b29b      	uxth	r3, r3
	prg.length = vga_program.length;
10004fb2:	466a      	mov	r2, sp
	ins[vga_offset_extra1] |= (cpp-2) << 8; // update waits
10004fb4:	8323      	strh	r3, [r4, #24]
	ins[vga_offset_extra2] |= (cpp-2) << 8; // update waits
10004fb6:	83a3      	strh	r3, [r4, #28]
	prg.length = vga_program.length;
10004fb8:	230f      	movs	r3, #15
	pio_add_program(VGA_PIO, &prg);
10004fba:	a902      	add	r1, sp, #8
	prg.length = vga_program.length;
10004fbc:	7313      	strb	r3, [r2, #12]
	prg.origin = BASE_OFFSET;
10004fbe:	3302      	adds	r3, #2
10004fc0:	7353      	strb	r3, [r2, #13]
	prg.instructions = ins;
10004fc2:	9402      	str	r4, [sp, #8]
	pio_add_program(VGA_PIO, &prg);
10004fc4:	f7fc fca4 	bl	10001910 <pio_add_program>

	// load layer program
	if (LayerProgInx != LAYERPROG_BASE)
10004fc8:	4b4f      	ldr	r3, [pc, #316]	; (10005108 <_Z10VgaPioInitv+0x18c>)
10004fca:	781b      	ldrb	r3, [r3, #0]
10004fcc:	2b00      	cmp	r3, #0
10004fce:	d161      	bne.n	10005094 <_Z10VgaPioInitv+0x118>
	{
		// configure layer program instructions
		memcpy(ins, CurLayerProg.ins, CurLayerProg.length*sizeof(uint16_t)); // copy program into buffer
		for (i = 0; i < CurLayerProg.extranum; i++)
10004fd0:	2400      	movs	r4, #0
    gpio_set_function(pin, pio == pio0 ? GPIO_FUNC_PIO0 : GPIO_FUNC_PIO1);
10004fd2:	0020      	movs	r0, r4
10004fd4:	2106      	movs	r1, #6
		prg.origin = LAYER_OFFSET;
		pio_add_program(VGA_PIO, &prg);
	}

	// connect PIO to the pad
	for (i = VGA_GPIO_FIRST; i <= VGA_GPIO_LAST; i++) pio_gpio_init(VGA_PIO, i);
10004fd6:	3401      	adds	r4, #1
10004fd8:	f7fc f820 	bl	1000101c <gpio_set_function>
10004fdc:	2c09      	cmp	r4, #9
10004fde:	d1f8      	bne.n	10004fd2 <_Z10VgaPioInitv+0x56>

	// negative HSYNC output
	if (!CurVmode.psync) gpio_set_outover(VGA_GPIO_SYNC, GPIO_OVERRIDE_INVERT);
10004fe0:	2357      	movs	r3, #87	; 0x57
10004fe2:	5ceb      	ldrb	r3, [r5, r3]
10004fe4:	2b00      	cmp	r3, #0
10004fe6:	d100      	bne.n	10004fea <_Z10VgaPioInitv+0x6e>
10004fe8:	e081      	b.n	100050ee <_Z10VgaPioInitv+0x172>

		// get default config
		pio_sm_config cfg = pio_get_default_sm_config();

		// map state machine's OUT and MOV pins	
		sm_config_set_out_pins(&cfg, LayerFirstPin[layer], LayerNumPin[layer]);
10004fea:	4b48      	ldr	r3, [pc, #288]	; (1000510c <_Z10VgaPioInitv+0x190>)
		for (i = 0; i < CurLayerProg.extranum; i++)
10004fec:	2400      	movs	r4, #0
		sm_config_set_out_pins(&cfg, LayerFirstPin[layer], LayerNumPin[layer]);
10004fee:	4698      	mov	r8, r3
		if ((layer > 0) && (LayerModeInx[layer] == LAYERMODE_BASE)) continue;
10004ff0:	2c00      	cmp	r4, #0
10004ff2:	d003      	beq.n	10004ffc <_Z10VgaPioInitv+0x80>
10004ff4:	4b46      	ldr	r3, [pc, #280]	; (10005110 <_Z10VgaPioInitv+0x194>)
10004ff6:	5d1b      	ldrb	r3, [r3, r4]
10004ff8:	2b00      	cmp	r3, #0
10004ffa:	d036      	beq.n	1000506a <_Z10VgaPioInitv+0xee>
		pio_sm_set_consecutive_pindirs(VGA_PIO, VGA_SM(layer), VGA_GPIO_FIRST, VGA_GPIO_NUM, true);
10004ffc:	2301      	movs	r3, #1
10004ffe:	2200      	movs	r2, #0
10005000:	0021      	movs	r1, r4
10005002:	483d      	ldr	r0, [pc, #244]	; (100050f8 <_Z10VgaPioInitv+0x17c>)
10005004:	9300      	str	r3, [sp, #0]
10005006:	3308      	adds	r3, #8
10005008:	f7fc fd02 	bl	10001a10 <pio_sm_set_consecutive_pindirs>
		sm_config_set_out_pins(&cfg, LayerFirstPin[layer], LayerNumPin[layer]);
1000500c:	4643      	mov	r3, r8
1000500e:	5d1e      	ldrb	r6, [r3, r4]
10005010:	4b40      	ldr	r3, [pc, #256]	; (10005114 <_Z10VgaPioInitv+0x198>)
                 (out_count << PIO_SM0_PINCTRL_OUT_COUNT_LSB);
10005012:	0536      	lsls	r6, r6, #20
10005014:	5d1b      	ldrb	r3, [r3, r4]
                 (out_base << PIO_SM0_PINCTRL_OUT_BASE_LSB) |
10005016:	431e      	orrs	r6, r3
    c->pinctrl = (c->pinctrl & ~(PIO_SM0_PINCTRL_OUT_BASE_BITS | PIO_SM0_PINCTRL_OUT_COUNT_BITS)) |
10005018:	9607      	str	r6, [sp, #28]

		// join FIFO to send only
		sm_config_set_fifo_join(&cfg, PIO_FIFO_JOIN_TX);

		// PIO clock divider
		sm_config_set_clkdiv(&cfg, CurVmode.div);
1000501a:	8aaf      	ldrh	r7, [r5, #20]
1000501c:	0038      	movs	r0, r7
1000501e:	f7fb fbff 	bl	10000820 <__wrap___aeabi_ui2f>
10005022:	4681      	mov	r9, r0
    uint8_t div_frac = (uint8_t) ((div - div_int) * (1u << 8u));
10005024:	0038      	movs	r0, r7
10005026:	f7fb fc01 	bl	1000082c <__wrap___aeabi_i2f>
1000502a:	1c01      	adds	r1, r0, #0
1000502c:	4648      	mov	r0, r9
1000502e:	f7fb fbe8 	bl	10000802 <__wrap___aeabi_fsub>
10005032:	2187      	movs	r1, #135	; 0x87
10005034:	05c9      	lsls	r1, r1, #23
10005036:	f7fb fbed 	bl	10000814 <__wrap___aeabi_fmul>
1000503a:	f7fb fc4b 	bl	100008d4 <__wrap___aeabi_f2uiz>
            (div_frac << PIO_SM0_CLKDIV_FRAC_LSB) |
1000503e:	b2c0      	uxtb	r0, r0
            (div_int << PIO_SM0_CLKDIV_INT_LSB);
10005040:	043b      	lsls	r3, r7, #16
            (div_frac << PIO_SM0_CLKDIV_FRAC_LSB) |
10005042:	0200      	lsls	r0, r0, #8
10005044:	4318      	orrs	r0, r3
    c->shiftctrl = (c->shiftctrl &
10005046:	4b34      	ldr	r3, [pc, #208]	; (10005118 <_Z10VgaPioInitv+0x19c>)
    c->clkdiv =
10005048:	9004      	str	r0, [sp, #16]
    c->shiftctrl = (c->shiftctrl &
1000504a:	9306      	str	r3, [sp, #24]

		// shift left, autopull, pull threshold
		sm_config_set_out_shift(&cfg, false, true, 32);
	
		// base layer 0
		if (layer == 0)
1000504c:	2c00      	cmp	r4, #0
1000504e:	d014      	beq.n	1000507a <_Z10VgaPioInitv+0xfe>
			pio_sm_init(VGA_PIO, VGA_SM0, vga_offset_entry+BASE_OFFSET, &cfg);
		}
		else
		{
			// set wrap
			sm_config_set_wrap(&cfg, CurLayerProg.wrap_target+LAYER_OFFSET, CurLayerProg.wrap+LAYER_OFFSET);
10005050:	4a32      	ldr	r2, [pc, #200]	; (1000511c <_Z10VgaPioInitv+0x1a0>)

			// initialize state machine
			pio_sm_init(VGA_PIO, VGA_SM(layer), CurLayerProg.idle+LAYER_OFFSET, &cfg);
10005052:	4829      	ldr	r0, [pc, #164]	; (100050f8 <_Z10VgaPioInitv+0x17c>)
			sm_config_set_wrap(&cfg, CurLayerProg.wrap_target+LAYER_OFFSET, CurLayerProg.wrap+LAYER_OFFSET);
10005054:	7a53      	ldrb	r3, [r2, #9]
10005056:	7a91      	ldrb	r1, [r2, #10]
                  (wrap_target << PIO_SM0_EXECCTRL_WRAP_BOTTOM_LSB) |
10005058:	01db      	lsls	r3, r3, #7
                  (wrap << PIO_SM0_EXECCTRL_WRAP_TOP_LSB);
1000505a:	0309      	lsls	r1, r1, #12
                  (wrap_target << PIO_SM0_EXECCTRL_WRAP_BOTTOM_LSB) |
1000505c:	430b      	orrs	r3, r1
    c->execctrl = (c->execctrl & ~(PIO_SM0_EXECCTRL_WRAP_TOP_BITS | PIO_SM0_EXECCTRL_WRAP_BOTTOM_BITS)) |
1000505e:	9305      	str	r3, [sp, #20]
			pio_sm_init(VGA_PIO, VGA_SM(layer), CurLayerProg.idle+LAYER_OFFSET, &cfg);
10005060:	0021      	movs	r1, r4
10005062:	7ad2      	ldrb	r2, [r2, #11]
10005064:	ab04      	add	r3, sp, #16
10005066:	f7fc fd15 	bl	10001a94 <pio_sm_init>
	for (layer = 0; layer < LAYERS; layer++)
1000506a:	3401      	adds	r4, #1
1000506c:	2c04      	cmp	r4, #4
1000506e:	d1bf      	bne.n	10004ff0 <_Z10VgaPioInitv+0x74>
		}
	}
}
10005070:	b019      	add	sp, #100	; 0x64
10005072:	bcc0      	pop	{r6, r7}
10005074:	46b9      	mov	r9, r7
10005076:	46b0      	mov	r8, r6
10005078:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000507a:	4b29      	ldr	r3, [pc, #164]	; (10005120 <_Z10VgaPioInitv+0x1a4>)
			pio_sm_init(VGA_PIO, VGA_SM0, vga_offset_entry+BASE_OFFSET, &cfg);
1000507c:	2213      	movs	r2, #19
1000507e:	9305      	str	r3, [sp, #20]
    c->pinctrl = (c->pinctrl & ~PIO_SM0_PINCTRL_SIDESET_BASE_BITS) |
10005080:	4b28      	ldr	r3, [pc, #160]	; (10005124 <_Z10VgaPioInitv+0x1a8>)
10005082:	2100      	movs	r1, #0
10005084:	431e      	orrs	r6, r3
10005086:	481c      	ldr	r0, [pc, #112]	; (100050f8 <_Z10VgaPioInitv+0x17c>)
10005088:	ab04      	add	r3, sp, #16
1000508a:	9607      	str	r6, [sp, #28]
	for (layer = 0; layer < LAYERS; layer++)
1000508c:	3401      	adds	r4, #1
			pio_sm_init(VGA_PIO, VGA_SM0, vga_offset_entry+BASE_OFFSET, &cfg);
1000508e:	f7fc fd01 	bl	10001a94 <pio_sm_init>
	for (layer = 0; layer < LAYERS; layer++)
10005092:	e7af      	b.n	10004ff4 <_Z10VgaPioInitv+0x78>
		memcpy(ins, CurLayerProg.ins, CurLayerProg.length*sizeof(uint16_t)); // copy program into buffer
10005094:	4b21      	ldr	r3, [pc, #132]	; (1000511c <_Z10VgaPioInitv+0x1a0>)
10005096:	0020      	movs	r0, r4
10005098:	4698      	mov	r8, r3
1000509a:	7a1b      	ldrb	r3, [r3, #8]
1000509c:	005a      	lsls	r2, r3, #1
1000509e:	4699      	mov	r9, r3
100050a0:	4643      	mov	r3, r8
100050a2:	6819      	ldr	r1, [r3, #0]
100050a4:	f7fb fc4c 	bl	10000940 <__wrap___aeabi_memcpy>
		for (i = 0; i < CurLayerProg.extranum; i++)
100050a8:	4643      	mov	r3, r8
100050aa:	7b9b      	ldrb	r3, [r3, #14]
100050ac:	469c      	mov	ip, r3
100050ae:	2b00      	cmp	r3, #0
100050b0:	d011      	beq.n	100050d6 <_Z10VgaPioInitv+0x15a>
100050b2:	4641      	mov	r1, r8
100050b4:	2000      	movs	r0, #0
100050b6:	310f      	adds	r1, #15
			int extra = (int)cpp - CurLayerProg.extra[i*2+1];
100050b8:	784b      	ldrb	r3, [r1, #1]
			ins[CurLayerProg.extra[i*2]] |= extra << 8; // update waits
100050ba:	780a      	ldrb	r2, [r1, #0]
			int extra = (int)cpp - CurLayerProg.extra[i*2+1];
100050bc:	1af3      	subs	r3, r6, r3
			ins[CurLayerProg.extra[i*2]] |= extra << 8; // update waits
100050be:	43df      	mvns	r7, r3
100050c0:	0052      	lsls	r2, r2, #1
100050c2:	17ff      	asrs	r7, r7, #31
100050c4:	403b      	ands	r3, r7
100050c6:	5aa7      	ldrh	r7, [r4, r2]
100050c8:	021b      	lsls	r3, r3, #8
100050ca:	433b      	orrs	r3, r7
		for (i = 0; i < CurLayerProg.extranum; i++)
100050cc:	3001      	adds	r0, #1
			ins[CurLayerProg.extra[i*2]] |= extra << 8; // update waits
100050ce:	52a3      	strh	r3, [r4, r2]
		for (i = 0; i < CurLayerProg.extranum; i++)
100050d0:	3102      	adds	r1, #2
100050d2:	4560      	cmp	r0, ip
100050d4:	dbf0      	blt.n	100050b8 <_Z10VgaPioInitv+0x13c>
		prg.length = CurLayerProg.length;
100050d6:	466b      	mov	r3, sp
100050d8:	464a      	mov	r2, r9
100050da:	731a      	strb	r2, [r3, #12]
		prg.origin = LAYER_OFFSET;
100050dc:	2300      	movs	r3, #0
100050de:	466a      	mov	r2, sp
		pio_add_program(VGA_PIO, &prg);
100050e0:	a902      	add	r1, sp, #8
100050e2:	4805      	ldr	r0, [pc, #20]	; (100050f8 <_Z10VgaPioInitv+0x17c>)
		prg.instructions = ins;
100050e4:	9402      	str	r4, [sp, #8]
		prg.origin = LAYER_OFFSET;
100050e6:	7353      	strb	r3, [r2, #13]
		pio_add_program(VGA_PIO, &prg);
100050e8:	f7fc fc12 	bl	10001910 <pio_add_program>
100050ec:	e770      	b.n	10004fd0 <_Z10VgaPioInitv+0x54>
	if (!CurVmode.psync) gpio_set_outover(VGA_GPIO_SYNC, GPIO_OVERRIDE_INVERT);
100050ee:	2101      	movs	r1, #1
100050f0:	2008      	movs	r0, #8
100050f2:	f7fb ffc3 	bl	1000107c <gpio_set_outover>
100050f6:	e778      	b.n	10004fea <_Z10VgaPioInitv+0x6e>
100050f8:	50200000 	.word	0x50200000
100050fc:	101acc04 	.word	0x101acc04
10005100:	2000479c 	.word	0x2000479c
10005104:	00006008 	.word	0x00006008
10005108:	20023b81 	.word	0x20023b81
1000510c:	200027d0 	.word	0x200027d0
10005110:	20020124 	.word	0x20020124
10005114:	20020120 	.word	0x20020120
10005118:	40060000 	.word	0x40060000
1000511c:	2000476c 	.word	0x2000476c
10005120:	0001fd80 	.word	0x0001fd80
10005124:	20002000 	.word	0x20002000

10005128 <_Z10VgaBufInitv>:

// initialize scanline buffers
void VgaBufInit()
{
10005128:	b5f0      	push	{r4, r5, r6, r7, lr}
1000512a:	464e      	mov	r6, r9
1000512c:	4645      	mov	r5, r8
1000512e:	4657      	mov	r7, sl
10005130:	46de      	mov	lr, fp
	// init HSYNC..back porch buffer
	//  hsync must be min. 3
	//  hback must be min. 13
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
10005132:	2388      	movs	r3, #136	; 0x88
{
10005134:	b5e0      	push	{r5, r6, r7, lr}
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
10005136:	485f      	ldr	r0, [pc, #380]	; (100052b4 <_Z10VgaBufInitv+0x18c>)
10005138:	4f5f      	ldr	r7, [pc, #380]	; (100052b8 <_Z10VgaBufInitv+0x190>)
1000513a:	8c41      	ldrh	r1, [r0, #34]	; 0x22
	LineBufHsBp[1] = BYTESWAP(VGADARK(CurVmode.hback-4-1-9,0)); // back porch - 1 - 9
1000513c:	4e5f      	ldr	r6, [pc, #380]	; (100052bc <_Z10VgaBufInitv+0x194>)
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
1000513e:	1eca      	subs	r2, r1, #3
10005140:	ba12      	rev	r2, r2
10005142:	431a      	orrs	r2, r3
10005144:	603a      	str	r2, [r7, #0]
	LineBufHsBp[1] = BYTESWAP(VGADARK(CurVmode.hback-4-1-9,0)); // back porch - 1 - 9
10005146:	8c84      	ldrh	r4, [r0, #36]	; 0x24
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
10005148:	469c      	mov	ip, r3
	LineBufHsBp[1] = BYTESWAP(VGADARK(CurVmode.hback-4-1-9,0)); // back porch - 1 - 9
1000514a:	3c0e      	subs	r4, #14
1000514c:	0423      	lsls	r3, r4, #16
1000514e:	0225      	lsls	r5, r4, #8
10005150:	0e2d      	lsrs	r5, r5, #24
10005152:	4033      	ands	r3, r6
10005154:	432b      	orrs	r3, r5
10005156:	25ff      	movs	r5, #255	; 0xff
10005158:	022d      	lsls	r5, r5, #8
1000515a:	402c      	ands	r4, r5
1000515c:	4323      	orrs	r3, r4
1000515e:	24a0      	movs	r4, #160	; 0xa0
10005160:	4323      	orrs	r3, r4
10005162:	607b      	str	r3, [r7, #4]
	LineBufHsBp[2] = BYTESWAP(VGACMD(vga_offset_irqset+BASE_OFFSET,0)); // IRQ command (takes 9 clock cycles)
10005164:	23c0      	movs	r3, #192	; 0xc0
10005166:	60bb      	str	r3, [r7, #8]
	LineBufHsBp[3] = BYTESWAP(VGACMD(vga_offset_output+BASE_OFFSET, CurVmode.width - 2)); // missing 2 clock cycles after last pixel
10005168:	8803      	ldrh	r3, [r0, #0]
1000516a:	3440      	adds	r4, #64	; 0x40
1000516c:	3b02      	subs	r3, #2
1000516e:	ba1b      	rev	r3, r3
10005170:	4323      	orrs	r3, r4
10005172:	60fb      	str	r3, [r7, #12]

	// init front porch buffer
	//  hfront must be min. 4
	LineBufFp = BYTESWAP(VGADARK(CurVmode.hfront-4,0)); // front porch
10005174:	8c07      	ldrh	r7, [r0, #32]
{
10005176:	b083      	sub	sp, #12
	LineBufFp = BYTESWAP(VGADARK(CurVmode.hfront-4,0)); // front porch
10005178:	3f04      	subs	r7, #4
1000517a:	043b      	lsls	r3, r7, #16
1000517c:	023c      	lsls	r4, r7, #8
1000517e:	0e24      	lsrs	r4, r4, #24
10005180:	4033      	ands	r3, r6
10005182:	4323      	orrs	r3, r4
10005184:	24a0      	movs	r4, #160	; 0xa0
10005186:	402f      	ands	r7, r5
10005188:	433b      	orrs	r3, r7
1000518a:	4f4d      	ldr	r7, [pc, #308]	; (100052c0 <_Z10VgaBufInitv+0x198>)
1000518c:	4323      	orrs	r3, r4
1000518e:	603b      	str	r3, [r7, #0]

	// init dark line
	LineBufDark[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
10005190:	4b4c      	ldr	r3, [pc, #304]	; (100052c4 <_Z10VgaBufInitv+0x19c>)
10005192:	601a      	str	r2, [r3, #0]
	LineBufDark[1] = BYTESWAP(VGADARK(CurVmode.htot-CurVmode.hsync-4,0)); // dark line
10005194:	8bc2      	ldrh	r2, [r0, #30]
	LineBufDark[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
10005196:	4698      	mov	r8, r3
	LineBufDark[1] = BYTESWAP(VGADARK(CurVmode.htot-CurVmode.hsync-4,0)); // dark line
10005198:	1a57      	subs	r7, r2, r1
1000519a:	1f3b      	subs	r3, r7, #4
1000519c:	4699      	mov	r9, r3
1000519e:	464c      	mov	r4, r9
100051a0:	041b      	lsls	r3, r3, #16
100051a2:	0224      	lsls	r4, r4, #8
100051a4:	0e24      	lsrs	r4, r4, #24
100051a6:	4033      	ands	r3, r6
100051a8:	4323      	orrs	r3, r4
100051aa:	464c      	mov	r4, r9
100051ac:	402c      	ands	r4, r5
100051ae:	4323      	orrs	r3, r4
100051b0:	24a0      	movs	r4, #160	; 0xa0
100051b2:	4323      	orrs	r3, r4
100051b4:	4644      	mov	r4, r8
100051b6:	6063      	str	r3, [r4, #4]

	// TV mode
	if (CurVmode.inter)
100051b8:	2356      	movs	r3, #86	; 0x56
100051ba:	5cc3      	ldrb	r3, [r0, r3]
100051bc:	2b00      	cmp	r3, #0
100051be:	d060      	beq.n	10005282 <_Z10VgaBufInitv+0x15a>
	{
		// vertical synchronization
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
100051c0:	4664      	mov	r4, ip
100051c2:	0848      	lsrs	r0, r1, #1
100051c4:	1ec3      	subs	r3, r0, #3
100051c6:	ba1b      	rev	r3, r3
100051c8:	431c      	orrs	r4, r3
100051ca:	4b3f      	ldr	r3, [pc, #252]	; (100052c8 <_Z10VgaBufInitv+0x1a0>)
100051cc:	46a0      	mov	r8, r4
100051ce:	601c      	str	r4, [r3, #0]
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line
100051d0:	0854      	lsrs	r4, r2, #1
100051d2:	1a27      	subs	r7, r4, r0
100051d4:	46a1      	mov	r9, r4
100051d6:	1f3c      	subs	r4, r7, #4
100051d8:	46a2      	mov	sl, r4
100051da:	0427      	lsls	r7, r4, #16
100051dc:	0224      	lsls	r4, r4, #8
100051de:	4037      	ands	r7, r6
100051e0:	0e24      	lsrs	r4, r4, #24
100051e2:	4327      	orrs	r7, r4
100051e4:	4654      	mov	r4, sl
100051e6:	402c      	ands	r4, r5
100051e8:	4327      	orrs	r7, r4
100051ea:	24a0      	movs	r4, #160	; 0xa0
100051ec:	433c      	orrs	r4, r7
100051ee:	9401      	str	r4, [sp, #4]
100051f0:	605c      	str	r4, [r3, #4]
		LineBufSync[2] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
100051f2:	4644      	mov	r4, r8
		LineBufSync[3] = BYTESWAP(VGADARK((CurVmode.htot+1)/2-CurVmode.hsync/2-4,0)); // dark line
100051f4:	3201      	adds	r2, #1
100051f6:	1052      	asrs	r2, r2, #1
100051f8:	1a10      	subs	r0, r2, r0
100051fa:	3804      	subs	r0, #4
		LineBufSync[2] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
100051fc:	609c      	str	r4, [r3, #8]
		LineBufSync[3] = BYTESWAP(VGADARK((CurVmode.htot+1)/2-CurVmode.hsync/2-4,0)); // dark line
100051fe:	0404      	lsls	r4, r0, #16
10005200:	4034      	ands	r4, r6
10005202:	46a2      	mov	sl, r4
10005204:	0204      	lsls	r4, r0, #8
10005206:	0e24      	lsrs	r4, r4, #24
10005208:	46a3      	mov	fp, r4
1000520a:	4654      	mov	r4, sl
1000520c:	465f      	mov	r7, fp
1000520e:	4028      	ands	r0, r5
10005210:	433c      	orrs	r4, r7
10005212:	4320      	orrs	r0, r4
10005214:	24a0      	movs	r4, #160	; 0xa0
10005216:	4320      	orrs	r0, r4
10005218:	60d8      	str	r0, [r3, #12]

		LineBufSync[4] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot/2-CurVmode.hsync-3)); // invert dark line
1000521a:	4648      	mov	r0, r9
1000521c:	4664      	mov	r4, ip
1000521e:	1a40      	subs	r0, r0, r1
10005220:	3803      	subs	r0, #3
10005222:	ba00      	rev	r0, r0
10005224:	4320      	orrs	r0, r4
10005226:	6118      	str	r0, [r3, #16]
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10005228:	1f08      	subs	r0, r1, #4
1000522a:	4681      	mov	r9, r0
1000522c:	0400      	lsls	r0, r0, #16
1000522e:	4006      	ands	r6, r0
10005230:	4648      	mov	r0, r9
		LineBufSync[6] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,(CurVmode.htot+1)/2-CurVmode.hsync-3)); // invert dark line
10005232:	1a52      	subs	r2, r2, r1
10005234:	4661      	mov	r1, ip
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10005236:	0200      	lsls	r0, r0, #8
10005238:	0e00      	lsrs	r0, r0, #24
1000523a:	4306      	orrs	r6, r0
1000523c:	4648      	mov	r0, r9
		LineBufSync[6] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,(CurVmode.htot+1)/2-CurVmode.hsync-3)); // invert dark line
1000523e:	3a03      	subs	r2, #3
10005240:	ba12      	rev	r2, r2
10005242:	430a      	orrs	r2, r1
10005244:	619a      	str	r2, [r3, #24]
		LineBufSync[7] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC

		LineBufSync[8] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
10005246:	4642      	mov	r2, r8
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10005248:	4005      	ands	r5, r0
		LineBufSync[9] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line

		// control blocks - initialize to VSYNC
		CtrlBuf1[0] = 4; // send 4x u32
1000524a:	2004      	movs	r0, #4
		LineBufSync[8] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
1000524c:	621a      	str	r2, [r3, #32]
		LineBufSync[9] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line
1000524e:	9a01      	ldr	r2, [sp, #4]
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10005250:	4335      	orrs	r5, r6
10005252:	3418      	adds	r4, #24
		LineBufSync[9] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line
10005254:	625a      	str	r2, [r3, #36]	; 0x24
		CtrlBuf1[0] = 4; // send 4x u32
10005256:	491d      	ldr	r1, [pc, #116]	; (100052cc <_Z10VgaBufInitv+0x1a4>)
		CtrlBuf1[1] = (u32)&LineBufSync[4]; // VSYNC

		CtrlBuf2[0] = 4; // send 4x u32
10005258:	4a1d      	ldr	r2, [pc, #116]	; (100052d0 <_Z10VgaBufInitv+0x1a8>)
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000525a:	432c      	orrs	r4, r5
1000525c:	615c      	str	r4, [r3, #20]
		LineBufSync[7] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000525e:	61dc      	str	r4, [r3, #28]
		CtrlBuf1[1] = (u32)&LineBufSync[4]; // VSYNC
10005260:	3310      	adds	r3, #16
		CtrlBuf1[0] = 4; // send 4x u32
10005262:	6008      	str	r0, [r1, #0]
		CtrlBuf1[1] = (u32)&LineBufSync[4]; // VSYNC
10005264:	604b      	str	r3, [r1, #4]
		CtrlBuf2[0] = 4; // send 4x u32
10005266:	6010      	str	r0, [r2, #0]
		CtrlBuf2[1] = (u32)&LineBufSync[4]; // VSYNC
10005268:	6053      	str	r3, [r2, #4]

		CtrlBuf2[0] = 2; // send 2x u32
		CtrlBuf2[1] = (u32)&LineBufSync[0]; // VSYNC
	}

	CtrlBuf1[2] = 0; // stop mark
1000526a:	2300      	movs	r3, #0
1000526c:	608b      	str	r3, [r1, #8]
	CtrlBuf1[3] = 0; // stop mark
1000526e:	60cb      	str	r3, [r1, #12]

	CtrlBuf2[2] = 0; // stop mark
10005270:	6093      	str	r3, [r2, #8]
	CtrlBuf2[3] = 0; // stop mark
10005272:	60d3      	str	r3, [r2, #12]
}
10005274:	b003      	add	sp, #12
10005276:	bcf0      	pop	{r4, r5, r6, r7}
10005278:	46bb      	mov	fp, r7
1000527a:	46b2      	mov	sl, r6
1000527c:	46a9      	mov	r9, r5
1000527e:	46a0      	mov	r8, r4
10005280:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
10005282:	4662      	mov	r2, ip
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10005284:	24a0      	movs	r4, #160	; 0xa0
		CtrlBuf1[0] = 2; // send 2x u32
10005286:	2002      	movs	r0, #2
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
10005288:	3f03      	subs	r7, #3
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000528a:	3904      	subs	r1, #4
1000528c:	ba3f      	rev	r7, r7
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
1000528e:	4317      	orrs	r7, r2
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10005290:	040a      	lsls	r2, r1, #16
10005292:	4016      	ands	r6, r2
10005294:	020a      	lsls	r2, r1, #8
10005296:	0e12      	lsrs	r2, r2, #24
10005298:	4316      	orrs	r6, r2
1000529a:	4029      	ands	r1, r5
1000529c:	4331      	orrs	r1, r6
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
1000529e:	4b0a      	ldr	r3, [pc, #40]	; (100052c8 <_Z10VgaBufInitv+0x1a0>)
		CtrlBuf2[0] = 2; // send 2x u32
100052a0:	4a0b      	ldr	r2, [pc, #44]	; (100052d0 <_Z10VgaBufInitv+0x1a8>)
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
100052a2:	430c      	orrs	r4, r1
		CtrlBuf1[0] = 2; // send 2x u32
100052a4:	4909      	ldr	r1, [pc, #36]	; (100052cc <_Z10VgaBufInitv+0x1a4>)
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
100052a6:	601f      	str	r7, [r3, #0]
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
100052a8:	605c      	str	r4, [r3, #4]
		CtrlBuf1[0] = 2; // send 2x u32
100052aa:	6008      	str	r0, [r1, #0]
		CtrlBuf1[1] = (u32)&LineBufSync[0]; // VSYNC
100052ac:	604b      	str	r3, [r1, #4]
		CtrlBuf2[0] = 2; // send 2x u32
100052ae:	6010      	str	r0, [r2, #0]
		CtrlBuf2[1] = (u32)&LineBufSync[0]; // VSYNC
100052b0:	6053      	str	r3, [r2, #4]
100052b2:	e7da      	b.n	1000526a <_Z10VgaBufInitv+0x142>
100052b4:	2000479c 	.word	0x2000479c
100052b8:	20021884 	.word	0x20021884
100052bc:	00ffff00 	.word	0x00ffff00
100052c0:	20021880 	.word	0x20021880
100052c4:	20021878 	.word	0x20021878
100052c8:	20021894 	.word	0x20021894
100052cc:	20003290 	.word	0x20003290
100052d0:	20003cf0 	.word	0x20003cf0

100052d4 <_Z7VgaTermv>:
 *
 * \param channel DMA channel
 */
static inline void dma_channel_abort(uint channel) {
    check_dma_channel_param(channel);
    dma_hw->abort = 1u << channel;
100052d4:	21a0      	movs	r1, #160	; 0xa0
100052d6:	2302      	movs	r3, #2
    // Bit will go 0 once channel has reached safe state
    // (i.e. any in-flight transfers have retired)
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
100052d8:	2002      	movs	r0, #2
    dma_hw->abort = 1u << channel;
100052da:	4a27      	ldr	r2, [pc, #156]	; (10005378 <_Z7VgaTermv+0xa4>)
100052dc:	05c9      	lsls	r1, r1, #23

// terminate VGA service
void VgaTerm()
{
100052de:	b570      	push	{r4, r5, r6, lr}
100052e0:	508b      	str	r3, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
100052e2:	588b      	ldr	r3, [r1, r2]
100052e4:	4218      	tst	r0, r3
100052e6:	d1fc      	bne.n	100052e2 <_Z7VgaTermv+0xe>
    dma_hw->abort = 1u << channel;
100052e8:	2301      	movs	r3, #1
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
100052ea:	20a0      	movs	r0, #160	; 0xa0
    dma_hw->abort = 1u << channel;
100052ec:	508b      	str	r3, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
100052ee:	2201      	movs	r2, #1
100052f0:	4921      	ldr	r1, [pc, #132]	; (10005378 <_Z7VgaTermv+0xa4>)
100052f2:	05c0      	lsls	r0, r0, #23
100052f4:	5843      	ldr	r3, [r0, r1]
100052f6:	421a      	tst	r2, r3
100052f8:	d1fc      	bne.n	100052f4 <_Z7VgaTermv+0x20>
    dma_hw->abort = 1u << channel;
100052fa:	24a0      	movs	r4, #160	; 0xa0
100052fc:	2001      	movs	r0, #1
100052fe:	2601      	movs	r6, #1
10005300:	4a1d      	ldr	r2, [pc, #116]	; (10005378 <_Z7VgaTermv+0xa4>)
10005302:	05e4      	lsls	r4, r4, #23
10005304:	0031      	movs	r1, r6
10005306:	4081      	lsls	r1, r0
10005308:	50a1      	str	r1, [r4, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
1000530a:	58a3      	ldr	r3, [r4, r2]
1000530c:	420b      	tst	r3, r1
1000530e:	d1fc      	bne.n	1000530a <_Z7VgaTermv+0x36>
    dma_hw->abort = 1u << channel;
10005310:	0031      	movs	r1, r6
10005312:	1e43      	subs	r3, r0, #1
10005314:	4099      	lsls	r1, r3
10005316:	50a1      	str	r1, [r4, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
10005318:	58a3      	ldr	r3, [r4, r2]
1000531a:	001d      	movs	r5, r3
1000531c:	400d      	ands	r5, r1
1000531e:	420b      	tst	r3, r1
10005320:	d1fa      	bne.n	10005318 <_Z7VgaTermv+0x44>
	int i;

	// abort DMA channels
	dma_channel_abort(VGA_DMA_PIO0); // pre-abort, could be chaining right now
	dma_channel_abort(VGA_DMA_CB0);
	for (i = 0; i < LAYERS; i++)
10005322:	3002      	adds	r0, #2
10005324:	2809      	cmp	r0, #9
10005326:	d1ed      	bne.n	10005304 <_Z7VgaTermv+0x30>
		dma_channel_abort(VGA_DMA_PIO(i));
		dma_channel_abort(VGA_DMA_CB(i));
	}

	// disable IRQ0 from DMA0
	irq_set_enabled(DMA_IRQ_0, false);
10005328:	2100      	movs	r1, #0
1000532a:	3002      	adds	r0, #2
1000532c:	f7fb fed6 	bl	100010dc <irq_set_enabled>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10005330:	2302      	movs	r3, #2
10005332:	4a12      	ldr	r2, [pc, #72]	; (1000537c <_Z7VgaTermv+0xa8>)
    pio->ctrl = (pio->ctrl & ~mask) | (enabled ? mask : 0u);
10005334:	4812      	ldr	r0, [pc, #72]	; (10005380 <_Z7VgaTermv+0xac>)
10005336:	6013      	str	r3, [r2, #0]
	dma_channel_set_irq0_enabled(VGA_DMA_PIO0, false);

	// Clear the interrupt request for DMA control channel
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
10005338:	4a12      	ldr	r2, [pc, #72]	; (10005384 <_Z7VgaTermv+0xb0>)
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000533a:	4913      	ldr	r1, [pc, #76]	; (10005388 <_Z7VgaTermv+0xb4>)
1000533c:	50a3      	str	r3, [r4, r2]
1000533e:	220f      	movs	r2, #15
10005340:	6803      	ldr	r3, [r0, #0]
10005342:	4393      	bics	r3, r2
10005344:	6003      	str	r3, [r0, #0]
    pio->ctrl |= (mask << PIO_CTRL_SM_RESTART_LSB) & PIO_CTRL_SM_RESTART_BITS;
10005346:	6803      	ldr	r3, [r0, #0]
10005348:	32e1      	adds	r2, #225	; 0xe1
1000534a:	4313      	orrs	r3, r2
1000534c:	6003      	str	r3, [r0, #0]
1000534e:	2380      	movs	r3, #128	; 0x80
10005350:	4a0e      	ldr	r2, [pc, #56]	; (1000538c <_Z7VgaTermv+0xb8>)
10005352:	061b      	lsls	r3, r3, #24
10005354:	6013      	str	r3, [r2, #0]
10005356:	6013      	str	r3, [r2, #0]

	// clear FIFOs
	for (i = 0; i < LAYERS; i++)
	{
		pio_sm_clear_fifos(VGA_PIO, VGA_SM(i));
		CtrlBufNext[i] = NULL;
10005358:	4a0d      	ldr	r2, [pc, #52]	; (10005390 <_Z7VgaTermv+0xbc>)
1000535a:	6015      	str	r5, [r2, #0]
1000535c:	600b      	str	r3, [r1, #0]
1000535e:	600b      	str	r3, [r1, #0]
10005360:	490c      	ldr	r1, [pc, #48]	; (10005394 <_Z7VgaTermv+0xc0>)
10005362:	6055      	str	r5, [r2, #4]
10005364:	600b      	str	r3, [r1, #0]
10005366:	600b      	str	r3, [r1, #0]
10005368:	490b      	ldr	r1, [pc, #44]	; (10005398 <_Z7VgaTermv+0xc4>)
1000536a:	6095      	str	r5, [r2, #8]
1000536c:	600b      	str	r3, [r1, #0]
1000536e:	600b      	str	r3, [r1, #0]
10005370:	60d5      	str	r5, [r2, #12]
	}

	// clear PIO instruction memory 
	pio_clear_instruction_memory(VGA_PIO);
10005372:	f7fc fb31 	bl	100019d8 <pio_clear_instruction_memory>
}
10005376:	bd70      	pop	{r4, r5, r6, pc}
10005378:	00000444 	.word	0x00000444
1000537c:	50003404 	.word	0x50003404
10005380:	50200000 	.word	0x50200000
10005384:	0000040c 	.word	0x0000040c
10005388:	502010e8 	.word	0x502010e8
1000538c:	502010d0 	.word	0x502010d0
10005390:	20004750 	.word	0x20004750
10005394:	50201100 	.word	0x50201100
10005398:	50201118 	.word	0x50201118

1000539c <_Z16ScanlineTypeInitPK6sVmode>:

// initialize scanline type table
void ScanlineTypeInit(const sVmode* v)
{
1000539c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000539e:	46c6      	mov	lr, r8
	u8* d = ScanlineType;
	int i, k;

	// line 0 is not used
	*d++ = LINE_DARK;
100053a0:	2305      	movs	r3, #5
{
100053a2:	b500      	push	{lr}
	*d++ = LINE_DARK;
100053a4:	4c6b      	ldr	r4, [pc, #428]	; (10005554 <_Z16ScanlineTypeInitPK6sVmode+0x1b8>)
{
100053a6:	0005      	movs	r5, r0
	*d++ = LINE_DARK;
100053a8:	7023      	strb	r3, [r4, #0]

	// progressive mode (VGA 525)
	if (!v->inter)
100053aa:	3351      	adds	r3, #81	; 0x51
100053ac:	5cc3      	ldrb	r3, [r0, r3]
100053ae:	2b00      	cmp	r3, #0
100053b0:	d125      	bne.n	100053fe <_Z16ScanlineTypeInitPK6sVmode+0x62>
	{
		// vertical sync (VGA 2)
		for (i = v->vsync1; i > 0; i--) *d++ = LINE_VSYNC;
100053b2:	8e86      	ldrh	r6, [r0, #52]	; 0x34
	*d++ = LINE_DARK;
100053b4:	3401      	adds	r4, #1
		for (i = v->vsync1; i > 0; i--) *d++ = LINE_VSYNC;
100053b6:	2e00      	cmp	r6, #0
100053b8:	d005      	beq.n	100053c6 <_Z16ScanlineTypeInitPK6sVmode+0x2a>
100053ba:	0020      	movs	r0, r4
100053bc:	0032      	movs	r2, r6
100053be:	2100      	movs	r1, #0
100053c0:	f7fb fab8 	bl	10000934 <__wrap_memset>
100053c4:	1934      	adds	r4, r6, r4

		// dark (VGA 33)
		for (i = v->vback1; i > 0; i--) *d++ = LINE_DARK;
100053c6:	8f2e      	ldrh	r6, [r5, #56]	; 0x38
100053c8:	2e00      	cmp	r6, #0
100053ca:	d005      	beq.n	100053d8 <_Z16ScanlineTypeInitPK6sVmode+0x3c>
100053cc:	0020      	movs	r0, r4
100053ce:	0032      	movs	r2, r6
100053d0:	2105      	movs	r1, #5
100053d2:	f7fb faaf 	bl	10000934 <__wrap_memset>
100053d6:	19a4      	adds	r4, r4, r6

		// image (VGA 480)
		for (i = v->vact1; i > 0; i--) *d++ = LINE_IMG;
100053d8:	8f6e      	ldrh	r6, [r5, #58]	; 0x3a
100053da:	2e00      	cmp	r6, #0
100053dc:	d005      	beq.n	100053ea <_Z16ScanlineTypeInitPK6sVmode+0x4e>
100053de:	0020      	movs	r0, r4
100053e0:	0032      	movs	r2, r6
100053e2:	2106      	movs	r1, #6
100053e4:	f7fb faa6 	bl	10000934 <__wrap_memset>
100053e8:	19a4      	adds	r4, r4, r6

		// dark (VGA 10)
		for (i = v->vfront1; i > 0; i--) *d++ = LINE_DARK;
100053ea:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
100053ec:	2a00      	cmp	r2, #0
100053ee:	d003      	beq.n	100053f8 <_Z16ScanlineTypeInitPK6sVmode+0x5c>
100053f0:	2105      	movs	r1, #5
100053f2:	0020      	movs	r0, r4
100053f4:	f7fb fa9e 	bl	10000934 <__wrap_memset>
		for (i = v->vfront2; i > 0; i--) *d++ = LINE_DARK;

		// half sync (PAL 3, NTSC 3)
		for (i = v->vpre2/2; i > 0; i--) *d++ = LINE_HHSYNC;
	}
}
100053f8:	bc80      	pop	{r7}
100053fa:	46b8      	mov	r8, r7
100053fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (i = v->vsync1/2; i > 0; i--) *d++ = LINE_VVSYNC;
100053fe:	8e83      	ldrh	r3, [r0, #52]	; 0x34
	*d++ = LINE_DARK;
10005400:	3401      	adds	r4, #1
		for (i = v->vsync1/2; i > 0; i--) *d++ = LINE_VVSYNC;
10005402:	085e      	lsrs	r6, r3, #1
10005404:	d006      	beq.n	10005414 <_Z16ScanlineTypeInitPK6sVmode+0x78>
10005406:	0020      	movs	r0, r4
10005408:	0032      	movs	r2, r6
1000540a:	2101      	movs	r1, #1
1000540c:	f7fb fa92 	bl	10000934 <__wrap_memset>
		if ((v->vsync1 & 1) != 0) *d++ = LINE_VHSYNC;
10005410:	8eab      	ldrh	r3, [r5, #52]	; 0x34
		for (i = v->vsync1/2; i > 0; i--) *d++ = LINE_VVSYNC;
10005412:	1934      	adds	r4, r6, r4
		if ((v->vsync1 & 1) != 0) *d++ = LINE_VHSYNC;
10005414:	07db      	lsls	r3, r3, #31
10005416:	d502      	bpl.n	1000541e <_Z16ScanlineTypeInitPK6sVmode+0x82>
10005418:	2302      	movs	r3, #2
1000541a:	7023      	strb	r3, [r4, #0]
1000541c:	3401      	adds	r4, #1
		for (i = v->vpost1/2; i > 0; i--) *d++ = LINE_HHSYNC;
1000541e:	8eee      	ldrh	r6, [r5, #54]	; 0x36
10005420:	0876      	lsrs	r6, r6, #1
10005422:	d005      	beq.n	10005430 <_Z16ScanlineTypeInitPK6sVmode+0x94>
10005424:	0020      	movs	r0, r4
10005426:	0032      	movs	r2, r6
10005428:	2103      	movs	r1, #3
1000542a:	f7fb fa83 	bl	10000934 <__wrap_memset>
1000542e:	19a4      	adds	r4, r4, r6
		for (i = v->vback1; i > 0; i--) *d++ = LINE_DARK;
10005430:	8f2e      	ldrh	r6, [r5, #56]	; 0x38
10005432:	2e00      	cmp	r6, #0
10005434:	d005      	beq.n	10005442 <_Z16ScanlineTypeInitPK6sVmode+0xa6>
10005436:	0020      	movs	r0, r4
10005438:	0032      	movs	r2, r6
1000543a:	2105      	movs	r1, #5
1000543c:	f7fb fa7a 	bl	10000934 <__wrap_memset>
10005440:	19a4      	adds	r4, r4, r6
		if (v->odd)
10005442:	2358      	movs	r3, #88	; 0x58
10005444:	5ceb      	ldrb	r3, [r5, r3]
			for (i = v->vact1; i > 0; i--) *d++ = LINE_IMGODD1; // odd lines 1, 3, 5, ... (PAL)
10005446:	8f6e      	ldrh	r6, [r5, #58]	; 0x3a
		if (v->odd)
10005448:	2b00      	cmp	r3, #0
1000544a:	d16e      	bne.n	1000552a <_Z16ScanlineTypeInitPK6sVmode+0x18e>
			for (i = v->vact1; i > 0; i--) *d++ = LINE_IMGEVEN1; // even lines 0, 2, 4, ... (NTSC)
1000544c:	2e00      	cmp	r6, #0
1000544e:	d005      	beq.n	1000545c <_Z16ScanlineTypeInitPK6sVmode+0xc0>
10005450:	0020      	movs	r0, r4
10005452:	0032      	movs	r2, r6
10005454:	2107      	movs	r1, #7
10005456:	f7fb fa6d 	bl	10000934 <__wrap_memset>
1000545a:	19a4      	adds	r4, r4, r6
		for (i = v->vfront1; i > 0; i--) *d++ = LINE_DARK;
1000545c:	8fae      	ldrh	r6, [r5, #60]	; 0x3c
1000545e:	2e00      	cmp	r6, #0
10005460:	d005      	beq.n	1000546e <_Z16ScanlineTypeInitPK6sVmode+0xd2>
10005462:	0020      	movs	r0, r4
10005464:	0032      	movs	r2, r6
10005466:	2105      	movs	r1, #5
10005468:	f7fb fa64 	bl	10000934 <__wrap_memset>
1000546c:	19a4      	adds	r4, r4, r6
		for (i = v->vpre1/2; i > 0; i--) *d++ = LINE_HHSYNC;
1000546e:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
10005470:	087e      	lsrs	r6, r7, #1
10005472:	d006      	beq.n	10005482 <_Z16ScanlineTypeInitPK6sVmode+0xe6>
10005474:	0020      	movs	r0, r4
10005476:	0032      	movs	r2, r6
10005478:	2103      	movs	r1, #3
1000547a:	f7fb fa5b 	bl	10000934 <__wrap_memset>
		k = v->vpre1 & 1;
1000547e:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
		for (i = v->vpre1/2; i > 0; i--) *d++ = LINE_HHSYNC;
10005480:	19a4      	adds	r4, r4, r6
		k = v->vpre1 & 1;
10005482:	2301      	movs	r3, #1
10005484:	001a      	movs	r2, r3
10005486:	403a      	ands	r2, r7
		if (k != 0) *d++ = LINE_HVSYNC;
10005488:	423b      	tst	r3, r7
1000548a:	d002      	beq.n	10005492 <_Z16ScanlineTypeInitPK6sVmode+0xf6>
1000548c:	3303      	adds	r3, #3
1000548e:	7023      	strb	r3, [r4, #0]
10005490:	3401      	adds	r4, #1
		for (i = (v->vsync2 - k)/2; i > 0; i--) *d++ = LINE_VVSYNC;
10005492:	2342      	movs	r3, #66	; 0x42
10005494:	4698      	mov	r8, r3
10005496:	5aeb      	ldrh	r3, [r5, r3]
10005498:	1a9a      	subs	r2, r3, r2
1000549a:	0fd6      	lsrs	r6, r2, #31
1000549c:	18b6      	adds	r6, r6, r2
1000549e:	1076      	asrs	r6, r6, #1
100054a0:	d007      	beq.n	100054b2 <_Z16ScanlineTypeInitPK6sVmode+0x116>
100054a2:	0020      	movs	r0, r4
100054a4:	0032      	movs	r2, r6
100054a6:	2101      	movs	r1, #1
100054a8:	f7fb fa44 	bl	10000934 <__wrap_memset>
		if (((v->vsync2 - k) & 1) != 0) *d++ = LINE_VHSYNC;
100054ac:	4643      	mov	r3, r8
100054ae:	5aeb      	ldrh	r3, [r5, r3]
		for (i = (v->vsync2 - k)/2; i > 0; i--) *d++ = LINE_VVSYNC;
100054b0:	19a4      	adds	r4, r4, r6
		if (((v->vsync2 - k) & 1) != 0) *d++ = LINE_VHSYNC;
100054b2:	1bdb      	subs	r3, r3, r7
100054b4:	07db      	lsls	r3, r3, #31
100054b6:	d502      	bpl.n	100054be <_Z16ScanlineTypeInitPK6sVmode+0x122>
100054b8:	2302      	movs	r3, #2
100054ba:	7023      	strb	r3, [r4, #0]
100054bc:	3401      	adds	r4, #1
		for (i = v->vpost2/2; i > 0; i--) *d++ = LINE_HHSYNC;
100054be:	2344      	movs	r3, #68	; 0x44
100054c0:	5aee      	ldrh	r6, [r5, r3]
100054c2:	0876      	lsrs	r6, r6, #1
100054c4:	d005      	beq.n	100054d2 <_Z16ScanlineTypeInitPK6sVmode+0x136>
100054c6:	0020      	movs	r0, r4
100054c8:	0032      	movs	r2, r6
100054ca:	2103      	movs	r1, #3
100054cc:	f7fb fa32 	bl	10000934 <__wrap_memset>
100054d0:	19a4      	adds	r4, r4, r6
		for (i = v->vback2; i > 0; i--) *d++ = LINE_DARK;
100054d2:	2346      	movs	r3, #70	; 0x46
100054d4:	5aee      	ldrh	r6, [r5, r3]
100054d6:	2e00      	cmp	r6, #0
100054d8:	d005      	beq.n	100054e6 <_Z16ScanlineTypeInitPK6sVmode+0x14a>
100054da:	0020      	movs	r0, r4
100054dc:	0032      	movs	r2, r6
100054de:	2105      	movs	r1, #5
100054e0:	f7fb fa28 	bl	10000934 <__wrap_memset>
100054e4:	19a4      	adds	r4, r4, r6
		if (v->odd)
100054e6:	2358      	movs	r3, #88	; 0x58
100054e8:	5ceb      	ldrb	r3, [r5, r3]
100054ea:	2b00      	cmp	r3, #0
100054ec:	d026      	beq.n	1000553c <_Z16ScanlineTypeInitPK6sVmode+0x1a0>
			for (i = v->vact2; i > 0; i--) *d++ = LINE_IMGEVEN2; // even lines 0, 2, 4, ... (PAL)
100054ee:	2348      	movs	r3, #72	; 0x48
100054f0:	5aee      	ldrh	r6, [r5, r3]
100054f2:	2e00      	cmp	r6, #0
100054f4:	d005      	beq.n	10005502 <_Z16ScanlineTypeInitPK6sVmode+0x166>
100054f6:	0020      	movs	r0, r4
100054f8:	0032      	movs	r2, r6
100054fa:	2108      	movs	r1, #8
100054fc:	f7fb fa1a 	bl	10000934 <__wrap_memset>
10005500:	19a4      	adds	r4, r4, r6
		for (i = v->vfront2; i > 0; i--) *d++ = LINE_DARK;
10005502:	234a      	movs	r3, #74	; 0x4a
10005504:	5aee      	ldrh	r6, [r5, r3]
10005506:	2e00      	cmp	r6, #0
10005508:	d005      	beq.n	10005516 <_Z16ScanlineTypeInitPK6sVmode+0x17a>
1000550a:	0020      	movs	r0, r4
1000550c:	0032      	movs	r2, r6
1000550e:	2105      	movs	r1, #5
10005510:	f7fb fa10 	bl	10000934 <__wrap_memset>
10005514:	19a4      	adds	r4, r4, r6
		for (i = v->vpre2/2; i > 0; i--) *d++ = LINE_HHSYNC;
10005516:	234c      	movs	r3, #76	; 0x4c
10005518:	5aea      	ldrh	r2, [r5, r3]
1000551a:	0852      	lsrs	r2, r2, #1
1000551c:	d100      	bne.n	10005520 <_Z16ScanlineTypeInitPK6sVmode+0x184>
1000551e:	e76b      	b.n	100053f8 <_Z16ScanlineTypeInitPK6sVmode+0x5c>
10005520:	2103      	movs	r1, #3
10005522:	0020      	movs	r0, r4
10005524:	f7fb fa06 	bl	10000934 <__wrap_memset>
10005528:	e766      	b.n	100053f8 <_Z16ScanlineTypeInitPK6sVmode+0x5c>
			for (i = v->vact1; i > 0; i--) *d++ = LINE_IMGODD1; // odd lines 1, 3, 5, ... (PAL)
1000552a:	2e00      	cmp	r6, #0
1000552c:	d096      	beq.n	1000545c <_Z16ScanlineTypeInitPK6sVmode+0xc0>
1000552e:	0020      	movs	r0, r4
10005530:	0032      	movs	r2, r6
10005532:	2109      	movs	r1, #9
10005534:	f7fb f9fe 	bl	10000934 <__wrap_memset>
10005538:	19a4      	adds	r4, r4, r6
1000553a:	e78f      	b.n	1000545c <_Z16ScanlineTypeInitPK6sVmode+0xc0>
			for (i = v->vact2; i > 0; i--) *d++ = LINE_IMGODD2; // odd lines 1, 3, 5, ... (NTSC)
1000553c:	2348      	movs	r3, #72	; 0x48
1000553e:	5aee      	ldrh	r6, [r5, r3]
10005540:	2e00      	cmp	r6, #0
10005542:	d0de      	beq.n	10005502 <_Z16ScanlineTypeInitPK6sVmode+0x166>
10005544:	0020      	movs	r0, r4
10005546:	0032      	movs	r2, r6
10005548:	210a      	movs	r1, #10
1000554a:	f7fb f9f3 	bl	10000934 <__wrap_memset>
1000554e:	19a4      	adds	r4, r4, r6
10005550:	e7d7      	b.n	10005502 <_Z16ScanlineTypeInitPK6sVmode+0x166>
10005552:	46c0      	nop			; (mov r8, r8)
10005554:	200220dc 	.word	0x200220dc

10005558 <_Z7VgaInitPK6sVmode>:
}

// initialize videomode (returns False on bad configuration)
// - All layer modes must use same layer program (LAYERMODE_BASE = overlapped layers are OFF)
void VgaInit(const sVmode* vmode)
{
10005558:	b5f0      	push	{r4, r5, r6, r7, lr}
1000555a:	46de      	mov	lr, fp
1000555c:	464e      	mov	r6, r9
1000555e:	4645      	mov	r5, r8
10005560:	4657      	mov	r7, sl
10005562:	0004      	movs	r4, r0
10005564:	b5e0      	push	{r5, r6, r7, lr}
10005566:	b083      	sub	sp, #12
10005568:	9001      	str	r0, [sp, #4]
	int i;

	// stop old state
	VgaTerm();
1000556a:	f7ff feb3 	bl	100052d4 <_Z7VgaTermv>

	// initialize scanline type table
	ScanlineTypeInit(vmode);
1000556e:	0020      	movs	r0, r4
10005570:	f7ff ff14 	bl	1000539c <_Z16ScanlineTypeInitPK6sVmode>
	// prepare render font pixel mask
	for (i = 0; i < 256; i++)
	{
		// higher 4 bits
		u32 m = 0;
		if ((i & B7) != 0) m |= 0xff;
10005574:	2280      	movs	r2, #128	; 0x80
10005576:	4691      	mov	r9, r2
		if ((i & B6) != 0) m |= 0xff << 8;
10005578:	3a40      	subs	r2, #64	; 0x40
1000557a:	4690      	mov	r8, r2
		if ((i & B5) != 0) m |= 0xff << 16;
		if ((i & B4) != 0) m |= 0xff << 24;
1000557c:	22ff      	movs	r2, #255	; 0xff
		if ((i & B5) != 0) m |= 0xff << 16;
1000557e:	27ff      	movs	r7, #255	; 0xff
		if ((i & B4) != 0) m |= 0xff << 24;
10005580:	0612      	lsls	r2, r2, #24
	for (i = 0; i < 256; i++)
10005582:	2300      	movs	r3, #0
		if ((i & B5) != 0) m |= 0xff << 16;
10005584:	2520      	movs	r5, #32
		if ((i & B4) != 0) m |= 0xff << 24;
10005586:	2610      	movs	r6, #16
10005588:	4694      	mov	ip, r2
1000558a:	4956      	ldr	r1, [pc, #344]	; (100056e4 <_Z7VgaInitPK6sVmode+0x18c>)
		if ((i & B5) != 0) m |= 0xff << 16;
1000558c:	043f      	lsls	r7, r7, #16
1000558e:	e024      	b.n	100055da <_Z7VgaInitPK6sVmode+0x82>
		if ((i & B7) != 0) m |= 0xff;
10005590:	20ff      	movs	r0, #255	; 0xff
		u32 m = 0;
10005592:	2200      	movs	r2, #0
		if ((i & B7) != 0) m |= 0xff;
10005594:	0200      	lsls	r0, r0, #8
		if ((i & B6) != 0) m |= 0xff << 8;
10005596:	4644      	mov	r4, r8
10005598:	421c      	tst	r4, r3
1000559a:	d000      	beq.n	1000559e <_Z7VgaInitPK6sVmode+0x46>
1000559c:	0002      	movs	r2, r0
		if ((i & B5) != 0) m |= 0xff << 16;
1000559e:	421d      	tst	r5, r3
100055a0:	d000      	beq.n	100055a4 <_Z7VgaInitPK6sVmode+0x4c>
100055a2:	433a      	orrs	r2, r7
		if ((i & B4) != 0) m |= 0xff << 24;
100055a4:	421e      	tst	r6, r3
100055a6:	d001      	beq.n	100055ac <_Z7VgaInitPK6sVmode+0x54>
100055a8:	4660      	mov	r0, ip
100055aa:	4302      	orrs	r2, r0
		RenderTextMask[2*i] = m;
100055ac:	600a      	str	r2, [r1, #0]

		// lower 4 bits
		m = 0;
		if ((i & B3) != 0) m |= 0xff;
100055ae:	071a      	lsls	r2, r3, #28
100055b0:	d419      	bmi.n	100055e6 <_Z7VgaInitPK6sVmode+0x8e>
100055b2:	20ff      	movs	r0, #255	; 0xff
		m = 0;
100055b4:	2200      	movs	r2, #0
		if ((i & B3) != 0) m |= 0xff;
100055b6:	0200      	lsls	r0, r0, #8
		if ((i & B2) != 0) m |= 0xff << 8;
100055b8:	075c      	lsls	r4, r3, #29
100055ba:	d500      	bpl.n	100055be <_Z7VgaInitPK6sVmode+0x66>
100055bc:	0002      	movs	r2, r0
		if ((i & B1) != 0) m |= 0xff << 16;
100055be:	0798      	lsls	r0, r3, #30
100055c0:	d500      	bpl.n	100055c4 <_Z7VgaInitPK6sVmode+0x6c>
100055c2:	433a      	orrs	r2, r7
		if ((i & B0) != 0) m |= 0xff << 24;
100055c4:	07d8      	lsls	r0, r3, #31
100055c6:	d501      	bpl.n	100055cc <_Z7VgaInitPK6sVmode+0x74>
100055c8:	4660      	mov	r0, ip
100055ca:	4302      	orrs	r2, r0
		RenderTextMask[2*i+1] = m;
100055cc:	604a      	str	r2, [r1, #4]
	for (i = 0; i < 256; i++)
100055ce:	2280      	movs	r2, #128	; 0x80
100055d0:	3301      	adds	r3, #1
100055d2:	3108      	adds	r1, #8
100055d4:	0052      	lsls	r2, r2, #1
100055d6:	4293      	cmp	r3, r2
100055d8:	d008      	beq.n	100055ec <_Z7VgaInitPK6sVmode+0x94>
		if ((i & B7) != 0) m |= 0xff;
100055da:	464a      	mov	r2, r9
100055dc:	421a      	tst	r2, r3
100055de:	d0d7      	beq.n	10005590 <_Z7VgaInitPK6sVmode+0x38>
100055e0:	22ff      	movs	r2, #255	; 0xff
100055e2:	4841      	ldr	r0, [pc, #260]	; (100056e8 <_Z7VgaInitPK6sVmode+0x190>)
100055e4:	e7d7      	b.n	10005596 <_Z7VgaInitPK6sVmode+0x3e>
		if ((i & B3) != 0) m |= 0xff;
100055e6:	22ff      	movs	r2, #255	; 0xff
100055e8:	483f      	ldr	r0, [pc, #252]	; (100056e8 <_Z7VgaInitPK6sVmode+0x190>)
100055ea:	e7e5      	b.n	100055b8 <_Z7VgaInitPK6sVmode+0x60>

	// save current videomode
	memcpy(&CurVmode, vmode, sizeof(sVmode));

	// initialize parameters
	ScanLine = 1; // currently processed scanline
100055ec:	2401      	movs	r4, #1
	memset(LineBuf0, COL_BLACK, BLACK_MAX);
100055ee:	3281      	adds	r2, #129	; 0x81
100055f0:	2100      	movs	r1, #0
100055f2:	32ff      	adds	r2, #255	; 0xff
100055f4:	483d      	ldr	r0, [pc, #244]	; (100056ec <_Z7VgaInitPK6sVmode+0x194>)
100055f6:	f7fb f99d 	bl	10000934 <__wrap_memset>
	memcpy(&CurVmode, vmode, sizeof(sVmode));
100055fa:	9d01      	ldr	r5, [sp, #4]
100055fc:	225c      	movs	r2, #92	; 0x5c
100055fe:	0029      	movs	r1, r5
10005600:	483b      	ldr	r0, [pc, #236]	; (100056f0 <_Z7VgaInitPK6sVmode+0x198>)
10005602:	f7fb f99d 	bl	10000940 <__wrap___aeabi_memcpy>
	ScanLine = 1; // currently processed scanline
10005606:	4b3b      	ldr	r3, [pc, #236]	; (100056f4 <_Z7VgaInitPK6sVmode+0x19c>)
//	Frame = 0;
	BufInx = 0; // at first, control buffer 1 will be sent out
	CtrlBufNext[0] = CtrlBuf2;

	// initialize base layer
	LayerModeInx[0] = LAYERMODE_BASE;
10005608:	483b      	ldr	r0, [pc, #236]	; (100056f8 <_Z7VgaInitPK6sVmode+0x1a0>)
	ScanLine = 1; // currently processed scanline
1000560a:	601c      	str	r4, [r3, #0]
	BufInx = 0; // at first, control buffer 1 will be sent out
1000560c:	2300      	movs	r3, #0
	LayerModeInx[0] = LAYERMODE_BASE;
1000560e:	4681      	mov	r9, r0
	BufInx = 0; // at first, control buffer 1 will be sent out
10005610:	4a3a      	ldr	r2, [pc, #232]	; (100056fc <_Z7VgaInitPK6sVmode+0x1a4>)
	CtrlBufNext[0] = CtrlBuf2;
10005612:	493b      	ldr	r1, [pc, #236]	; (10005700 <_Z7VgaInitPK6sVmode+0x1a8>)
	BufInx = 0; // at first, control buffer 1 will be sent out
10005614:	6013      	str	r3, [r2, #0]
	memcpy(&CurLayerMode[0], &LayerMode[LAYERMODE_BASE], sizeof(sLayerMode));
10005616:	4f3b      	ldr	r7, [pc, #236]	; (10005704 <_Z7VgaInitPK6sVmode+0x1ac>)
	CtrlBufNext[0] = CtrlBuf2;
10005618:	4a3b      	ldr	r2, [pc, #236]	; (10005708 <_Z7VgaInitPK6sVmode+0x1b0>)
	LayerModeInx[0] = LAYERMODE_BASE;
1000561a:	7003      	strb	r3, [r0, #0]
	memcpy(&CurLayerMode[0], &LayerMode[LAYERMODE_BASE], sizeof(sLayerMode));
1000561c:	4b3b      	ldr	r3, [pc, #236]	; (1000570c <_Z7VgaInitPK6sVmode+0x1b4>)
	CtrlBufNext[0] = CtrlBuf2;
1000561e:	6011      	str	r1, [r2, #0]
	memcpy(&CurLayerMode[0], &LayerMode[LAYERMODE_BASE], sizeof(sLayerMode));
10005620:	0038      	movs	r0, r7
10005622:	0019      	movs	r1, r3
10005624:	2203      	movs	r2, #3
10005626:	469a      	mov	sl, r3
10005628:	f7fb f98a 	bl	10000940 <__wrap___aeabi_memcpy>
	memset(&LayerScreen[0], 0, sizeof(sLayer));
1000562c:	2100      	movs	r1, #0
1000562e:	2224      	movs	r2, #36	; 0x24
10005630:	4837      	ldr	r0, [pc, #220]	; (10005710 <_Z7VgaInitPK6sVmode+0x1b8>)
10005632:	f7fb f97f 	bl	10000934 <__wrap_memset>

	// save layer modes
	LayerModeInx[1] = vmode->mode[1];
10005636:	4649      	mov	r1, r9
10005638:	7eab      	ldrb	r3, [r5, #26]
	LayerModeInx[2] = vmode->mode[2];
	LayerModeInx[3] = vmode->mode[3];

	LayerMask = B0; // mask of active layers
1000563a:	4e36      	ldr	r6, [pc, #216]	; (10005714 <_Z7VgaInitPK6sVmode+0x1bc>)
	LayerModeInx[1] = vmode->mode[1];
1000563c:	704b      	strb	r3, [r1, #1]
	LayerModeInx[2] = vmode->mode[2];
1000563e:	7eeb      	ldrb	r3, [r5, #27]
10005640:	3703      	adds	r7, #3
10005642:	708b      	strb	r3, [r1, #2]
	LayerModeInx[3] = vmode->mode[3];
10005644:	7f2b      	ldrb	r3, [r5, #28]
	LayerMask = B0; // mask of active layers
10005646:	7034      	strb	r4, [r6, #0]
	LayerModeInx[3] = vmode->mode[3];
10005648:	70cb      	strb	r3, [r1, #3]
	for (i = 1; i < LAYERS; i++)
	{
		memcpy(&CurLayerMode[i], &LayerMode[LayerModeInx[i]], sizeof(sLayerMode));
		if (LayerModeInx[i] != LAYERMODE_BASE) LayerMask |= (1 << i);
1000564a:	2301      	movs	r3, #1
1000564c:	469b      	mov	fp, r3
		memcpy(&CurLayerMode[i], &LayerMode[LayerModeInx[i]], sizeof(sLayerMode));
1000564e:	464b      	mov	r3, r9
10005650:	5d1d      	ldrb	r5, [r3, r4]
10005652:	2203      	movs	r2, #3
10005654:	0069      	lsls	r1, r5, #1
10005656:	1949      	adds	r1, r1, r5
10005658:	0038      	movs	r0, r7
1000565a:	4451      	add	r1, sl
1000565c:	f7fb f970 	bl	10000940 <__wrap___aeabi_memcpy>
		if (LayerModeInx[i] != LAYERMODE_BASE) LayerMask |= (1 << i);
10005660:	2d00      	cmp	r5, #0
10005662:	d004      	beq.n	1000566e <_Z7VgaInitPK6sVmode+0x116>
10005664:	465b      	mov	r3, fp
10005666:	40a3      	lsls	r3, r4
10005668:	7832      	ldrb	r2, [r6, #0]
1000566a:	4313      	orrs	r3, r2
1000566c:	7033      	strb	r3, [r6, #0]
	for (i = 1; i < LAYERS; i++)
1000566e:	3401      	adds	r4, #1
10005670:	3703      	adds	r7, #3
10005672:	2c04      	cmp	r4, #4
10005674:	d1eb      	bne.n	1000564e <_Z7VgaInitPK6sVmode+0xf6>
	}

	// get layer program
	LayerProgInx = vmode->prog;
10005676:	9b01      	ldr	r3, [sp, #4]
	memcpy(&CurLayerProg, &LayerProg[LayerProgInx], sizeof(sLayerProg));
10005678:	4927      	ldr	r1, [pc, #156]	; (10005718 <_Z7VgaInitPK6sVmode+0x1c0>)
	LayerProgInx = vmode->prog;
1000567a:	7e1a      	ldrb	r2, [r3, #24]
1000567c:	4b27      	ldr	r3, [pc, #156]	; (1000571c <_Z7VgaInitPK6sVmode+0x1c4>)
1000567e:	701a      	strb	r2, [r3, #0]
	memcpy(&CurLayerProg, &LayerProg[LayerProgInx], sizeof(sLayerProg));
10005680:	0053      	lsls	r3, r2, #1
10005682:	189b      	adds	r3, r3, r2
10005684:	4a26      	ldr	r2, [pc, #152]	; (10005720 <_Z7VgaInitPK6sVmode+0x1c8>)
10005686:	011b      	lsls	r3, r3, #4
10005688:	189b      	adds	r3, r3, r2
1000568a:	000a      	movs	r2, r1
1000568c:	cb13      	ldmia	r3!, {r0, r1, r4}
1000568e:	c213      	stmia	r2!, {r0, r1, r4}
10005690:	cb13      	ldmia	r3!, {r0, r1, r4}
10005692:	c213      	stmia	r2!, {r0, r1, r4}
10005694:	cb13      	ldmia	r3!, {r0, r1, r4}
10005696:	c213      	stmia	r2!, {r0, r1, r4}
10005698:	cb13      	ldmia	r3!, {r0, r1, r4}
1000569a:	c213      	stmia	r2!, {r0, r1, r4}

	// initialize VGA PIO
	VgaPioInit();
1000569c:	f7ff fc6e 	bl	10004f7c <_Z10VgaPioInitv>

	// initialize scanline buffers
	VgaBufInit();
100056a0:	f7ff fd42 	bl	10005128 <_Z10VgaBufInitv>

	// initialize DMA
	VgaDmaInit();
100056a4:	f7ff fbdc 	bl	10004e60 <_Z10VgaDmaInitv>

	// enable DMA IRQ
	irq_set_enabled(DMA_IRQ_0, true);
100056a8:	2101      	movs	r1, #1
100056aa:	200b      	movs	r0, #11
100056ac:	f7fb fd16 	bl	100010dc <irq_set_enabled>
    dma_hw->multi_channel_trigger = chan_mask;
100056b0:	22a0      	movs	r2, #160	; 0xa0
100056b2:	2386      	movs	r3, #134	; 0x86
100056b4:	2101      	movs	r1, #1
100056b6:	05d2      	lsls	r2, r2, #23
100056b8:	00db      	lsls	r3, r3, #3
100056ba:	50d1      	str	r1, [r2, r3]
                 ((mask << PIO_CTRL_SM_ENABLE_LSB) & PIO_CTRL_SM_ENABLE_BITS);
100056bc:	230f      	movs	r3, #15
    pio->ctrl |= ((mask << PIO_CTRL_CLKDIV_RESTART_LSB) & PIO_CTRL_CLKDIV_RESTART_BITS) |
100056be:	4919      	ldr	r1, [pc, #100]	; (10005724 <_Z7VgaInitPK6sVmode+0x1cc>)

	// start DMA with base layer 0
	dma_channel_start(VGA_DMA_CB0);

	// run state machines
	pio_enable_sm_mask_in_sync(VGA_PIO, LayerMask);
100056c0:	7832      	ldrb	r2, [r6, #0]
100056c2:	6808      	ldr	r0, [r1, #0]
                 ((mask << PIO_CTRL_SM_ENABLE_LSB) & PIO_CTRL_SM_ENABLE_BITS);
100056c4:	4013      	ands	r3, r2
    pio->ctrl |= ((mask << PIO_CTRL_CLKDIV_RESTART_LSB) & PIO_CTRL_CLKDIV_RESTART_BITS) |
100056c6:	4303      	orrs	r3, r0
100056c8:	20f0      	movs	r0, #240	; 0xf0
100056ca:	0212      	lsls	r2, r2, #8
100056cc:	0100      	lsls	r0, r0, #4
100056ce:	4002      	ands	r2, r0
100056d0:	4313      	orrs	r3, r2
100056d2:	600b      	str	r3, [r1, #0]
}
100056d4:	b003      	add	sp, #12
100056d6:	bcf0      	pop	{r4, r5, r6, r7}
100056d8:	46bb      	mov	fp, r7
100056da:	46b2      	mov	sl, r6
100056dc:	46a9      	mov	r9, r5
100056de:	46a0      	mov	r8, r4
100056e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100056e2:	46c0      	nop			; (mov r8, r8)
100056e4:	200218d8 	.word	0x200218d8
100056e8:	0000ffff 	.word	0x0000ffff
100056ec:	200201b8 	.word	0x200201b8
100056f0:	2000479c 	.word	0x2000479c
100056f4:	200220d8 	.word	0x200220d8
100056f8:	20020124 	.word	0x20020124
100056fc:	2000326c 	.word	0x2000326c
10005700:	20003cf0 	.word	0x20003cf0
10005704:	20004760 	.word	0x20004760
10005708:	20004750 	.word	0x20004750
1000570c:	101acc70 	.word	0x101acc70
10005710:	20020128 	.word	0x20020128
10005714:	20023b80 	.word	0x20023b80
10005718:	2000476c 	.word	0x2000476c
1000571c:	20023b81 	.word	0x20023b81
10005720:	101accac 	.word	0x101accac
10005724:	50200000 	.word	0x50200000

10005728 <_Z7VgaCorev>:

void (* volatile Core1Fnc)() = NULL; // core 1 remote function

// VGA core
void VgaCore()
{
10005728:	b570      	push	{r4, r5, r6, lr}
			if ((u32)v == (u32)1)
				VgaTerm(); // terminate
			else
				VgaInit(v);
			__dmb();
			VgaVmodeReq = NULL;
1000572a:	2600      	movs	r6, #0
1000572c:	4d0f      	ldr	r5, [pc, #60]	; (1000576c <_Z7VgaCorev+0x44>)
1000572e:	4c10      	ldr	r4, [pc, #64]	; (10005770 <_Z7VgaCorev+0x48>)
    __asm volatile ("dmb");
10005730:	f3bf 8f5f 	dmb	sy
		v = VgaVmodeReq;
10005734:	6828      	ldr	r0, [r5, #0]
		if (v != NULL)
10005736:	2800      	cmp	r0, #0
10005738:	d006      	beq.n	10005748 <_Z7VgaCorev+0x20>
			if ((u32)v == (u32)1)
1000573a:	2801      	cmp	r0, #1
1000573c:	d012      	beq.n	10005764 <_Z7VgaCorev+0x3c>
				VgaInit(v);
1000573e:	f7ff ff0b 	bl	10005558 <_Z7VgaInitPK6sVmode>
10005742:	f3bf 8f5f 	dmb	sy
			VgaVmodeReq = NULL;
10005746:	602e      	str	r6, [r5, #0]
		}

		// execute remote function
		fnc = Core1Fnc;
10005748:	6823      	ldr	r3, [r4, #0]
		if (fnc != NULL)
1000574a:	2b00      	cmp	r3, #0
1000574c:	d0f0      	beq.n	10005730 <_Z7VgaCorev+0x8>
		{
			fnc();
1000574e:	4798      	blx	r3
10005750:	f3bf 8f5f 	dmb	sy
			__dmb();
			Core1Fnc = NULL;
10005754:	6026      	str	r6, [r4, #0]
10005756:	f3bf 8f5f 	dmb	sy
		v = VgaVmodeReq;
1000575a:	6828      	ldr	r0, [r5, #0]
		if (v != NULL)
1000575c:	2800      	cmp	r0, #0
1000575e:	d0f3      	beq.n	10005748 <_Z7VgaCorev+0x20>
			if ((u32)v == (u32)1)
10005760:	2801      	cmp	r0, #1
10005762:	d1ec      	bne.n	1000573e <_Z7VgaCorev+0x16>
				VgaTerm(); // terminate
10005764:	f7ff fdb6 	bl	100052d4 <_Z7VgaTermv>
10005768:	e7eb      	b.n	10005742 <_Z7VgaCorev+0x1a>
1000576a:	46c0      	nop			; (mov r8, r8)
1000576c:	20022e7c 	.word	0x20022e7c
10005770:	2000328c 	.word	0x2000328c

10005774 <_Z10VgaInitReqPK6sVmode>:
}

// request to initialize VGA videomode, NULL=only stop driver (wait to initialization completes)
void VgaInitReq(const sVmode* vmode)
{
	if (vmode == NULL) vmode = (const sVmode*)1;
10005774:	2800      	cmp	r0, #0
10005776:	d00c      	beq.n	10005792 <_Z10VgaInitReqPK6sVmode+0x1e>
10005778:	f3bf 8f5f 	dmb	sy
	__dmb();
	VgaVmodeReq = vmode;
1000577c:	4a06      	ldr	r2, [pc, #24]	; (10005798 <_Z10VgaInitReqPK6sVmode+0x24>)
1000577e:	6010      	str	r0, [r2, #0]
	while (VgaVmodeReq != NULL) { __dmb(); }
10005780:	6813      	ldr	r3, [r2, #0]
10005782:	2b00      	cmp	r3, #0
10005784:	d004      	beq.n	10005790 <_Z10VgaInitReqPK6sVmode+0x1c>
10005786:	f3bf 8f5f 	dmb	sy
1000578a:	6813      	ldr	r3, [r2, #0]
1000578c:	2b00      	cmp	r3, #0
1000578e:	d1fa      	bne.n	10005786 <_Z10VgaInitReqPK6sVmode+0x12>
}
10005790:	4770      	bx	lr
	if (vmode == NULL) vmode = (const sVmode*)1;
10005792:	3001      	adds	r0, #1
10005794:	e7f0      	b.n	10005778 <_Z10VgaInitReqPK6sVmode+0x4>
10005796:	46c0      	nop			; (mov r8, r8)
10005798:	20022e7c 	.word	0x20022e7c

1000579c <_Z7LayerOnh>:
// number of pins of overlapped layer (base layer should stay VGA_GPIO_OUTNUM)
u8 LayerNumPin[LAYERS_MAX] = { VGA_GPIO_OUTNUM, VGA_GPIO_OUTNUM, VGA_GPIO_OUTNUM, VGA_GPIO_OUTNUM};

// set overlapped layer 1..3 ON
void LayerOn(u8 inx)
{
1000579c:	0003      	movs	r3, r0
1000579e:	f3bf 8f5f 	dmb	sy
	__dmb();
	LayerScreen[inx].on = True;
100057a2:	00c0      	lsls	r0, r0, #3
100057a4:	18c3      	adds	r3, r0, r3
100057a6:	4804      	ldr	r0, [pc, #16]	; (100057b8 <_Z7LayerOnh+0x1c>)
100057a8:	009b      	lsls	r3, r3, #2
100057aa:	18c0      	adds	r0, r0, r3
100057ac:	2301      	movs	r3, #1
100057ae:	3022      	adds	r0, #34	; 0x22
100057b0:	7003      	strb	r3, [r0, #0]
100057b2:	f3bf 8f5f 	dmb	sy
	__dmb();
}
100057b6:	4770      	bx	lr
100057b8:	20020128 	.word	0x20020128

100057bc <_Z8LayerOffh>:

// set overlapped layer 1..3 OFF
void LayerOff(u8 inx)
{
100057bc:	0003      	movs	r3, r0
100057be:	f3bf 8f5f 	dmb	sy
	__dmb();
	LayerScreen[inx].on = False;
100057c2:	00c0      	lsls	r0, r0, #3
100057c4:	18c3      	adds	r3, r0, r3
100057c6:	4804      	ldr	r0, [pc, #16]	; (100057d8 <_Z8LayerOffh+0x1c>)
100057c8:	009b      	lsls	r3, r3, #2
100057ca:	18c0      	adds	r0, r0, r3
100057cc:	2300      	movs	r3, #0
100057ce:	3022      	adds	r0, #34	; 0x22
100057d0:	7003      	strb	r3, [r0, #0]
100057d2:	f3bf 8f5f 	dmb	sy
	__dmb();
}
100057d6:	4770      	bx	lr
100057d8:	20020128 	.word	0x20020128

100057dc <_Z10LayerSetuphPKhPK6sVmodetthPKv>:
//  h ... image height
//  col ... key color (needed for LAYERMODE_KEY and LAYERMODE_MONO layer mode)
//  par ... additional data (RLE index table, integer transformation matrix)
// Use these functions after layer setup: LayerSetX, LayerSetY, LayerOn
void LayerSetup(u8 inx, const u8* img, const sVmode* vmode, u16 w, u16 h, u8 col /* = 0 */, const void* par /* = NULL */)
{
100057dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100057de:	46de      	mov	lr, fp
100057e0:	464e      	mov	r6, r9
100057e2:	4645      	mov	r5, r8
100057e4:	4657      	mov	r7, sl
100057e6:	b5e0      	push	{r5, r6, r7, lr}
100057e8:	b083      	sub	sp, #12
100057ea:	4688      	mov	r8, r1
100057ec:	a90c      	add	r1, sp, #48	; 0x30
100057ee:	4693      	mov	fp, r2
100057f0:	880a      	ldrh	r2, [r1, #0]
100057f2:	a90d      	add	r1, sp, #52	; 0x34
100057f4:	4691      	mov	r9, r2
100057f6:	7809      	ldrb	r1, [r1, #0]
100057f8:	f3bf 8f5f 	dmb	sy
	LayerScreen[inx].on = False;
100057fc:	00c2      	lsls	r2, r0, #3
100057fe:	1814      	adds	r4, r2, r0
10005800:	4e35      	ldr	r6, [pc, #212]	; (100058d8 <_Z10LayerSetuphPKhPK6sVmodetthPKv+0xfc>)
10005802:	9201      	str	r2, [sp, #4]
10005804:	00a2      	lsls	r2, r4, #2
10005806:	18b4      	adds	r4, r6, r2
10005808:	4694      	mov	ip, r2
1000580a:	2222      	movs	r2, #34	; 0x22
1000580c:	4692      	mov	sl, r2
1000580e:	44a2      	add	sl, r4
10005810:	2700      	movs	r7, #0
10005812:	4652      	mov	r2, sl
10005814:	7017      	strb	r7, [r2, #0]
10005816:	f3bf 8f5f 	dmb	sy
	LayerOff(inx); // set layer OFF
	sLayer* lay = &LayerScreen[inx]; // get pointer to layer
	lay->img = img; // pointer to image data
1000581a:	4662      	mov	r2, ip
1000581c:	4645      	mov	r5, r8
1000581e:	50b5      	str	r5, [r6, r2]
	lay->par = par; // additional parameter
10005820:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	lay->keycol = col | ((u16)col << 8) | ((u32)col << 16) | ((u32)col << 24); // key color
	lay->x = 0; // X coordinate
10005822:	8267      	strh	r7, [r4, #18]
	lay->par = par; // additional parameter
10005824:	6062      	str	r2, [r4, #4]
	lay->keycol = col | ((u16)col << 8) | ((u32)col << 16) | ((u32)col << 24); // key color
10005826:	040a      	lsls	r2, r1, #16
10005828:	4690      	mov	r8, r2
1000582a:	060a      	lsls	r2, r1, #24
1000582c:	4694      	mov	ip, r2
1000582e:	4642      	mov	r2, r8
10005830:	4665      	mov	r5, ip
10005832:	432a      	orrs	r2, r5
10005834:	4690      	mov	r8, r2
10005836:	020a      	lsls	r2, r1, #8
10005838:	4311      	orrs	r1, r2
1000583a:	4642      	mov	r2, r8
1000583c:	4311      	orrs	r1, r2
	lay->y = 0; // Y coordinate
	lay->h = h; // height of image
1000583e:	464a      	mov	r2, r9
10005840:	8322      	strh	r2, [r4, #24]
	lay->spritenum = 0; // number of sprites
	lay->cpp = vmode->cpp; // save clocks per pixel
10005842:	465a      	mov	r2, fp
	lay->y = 0; // Y coordinate
10005844:	82a7      	strh	r7, [r4, #20]
	lay->spritenum = 0; // number of sprites
10005846:	8427      	strh	r7, [r4, #32]
	lay->cpp = vmode->cpp; // save clocks per pixel
10005848:	0027      	movs	r7, r4
	lay->keycol = col | ((u16)col << 8) | ((u32)col << 16) | ((u32)col << 24); // key color
1000584a:	60e1      	str	r1, [r4, #12]
	lay->cpp = vmode->cpp; // save clocks per pixel
1000584c:	8ad2      	ldrh	r2, [r2, #22]
1000584e:	3723      	adds	r7, #35	; 0x23
10005850:	703a      	strb	r2, [r7, #0]
	lay->mode = vmode->mode[inx]; // layer mode
10005852:	465a      	mov	r2, fp
10005854:	1812      	adds	r2, r2, r0
10005856:	7e52      	ldrb	r2, [r2, #25]
	lay->w = w; // image width
10005858:	82e3      	strh	r3, [r4, #22]
	lay->mode = vmode->mode[inx]; // layer mode
1000585a:	7722      	strb	r2, [r4, #28]
	lay->trans = mono ? (((w/8)+3)/4) : (w/4); // transfer count
1000585c:	2a04      	cmp	r2, #4
1000585e:	d019      	beq.n	10005894 <_Z10LayerSetuphPKhPK6sVmodetthPKv+0xb8>
10005860:	089f      	lsrs	r7, r3, #2
10005862:	8227      	strh	r7, [r4, #16]
	lay->wb = mono ? (w/8) : w; // width bytes
10005864:	8363      	strh	r3, [r4, #26]
	switch (lay->mode)
10005866:	2a12      	cmp	r2, #18
10005868:	d834      	bhi.n	100058d4 <_Z10LayerSetuphPKhPK6sVmodetthPKv+0xf8>
1000586a:	4c1c      	ldr	r4, [pc, #112]	; (100058dc <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x100>)
1000586c:	0092      	lsls	r2, r2, #2
1000586e:	58a2      	ldr	r2, [r4, r2]
10005870:	4697      	mov	pc, r2
		init = VGAWHITE(cppx, w);
10005872:	1e59      	subs	r1, r3, #1
10005874:	23c0      	movs	r3, #192	; 0xc0
10005876:	029b      	lsls	r3, r3, #10
10005878:	430b      	orrs	r3, r1
	lay->init = init; // init word
1000587a:	9a01      	ldr	r2, [sp, #4]
1000587c:	4694      	mov	ip, r2
1000587e:	4460      	add	r0, ip
10005880:	0080      	lsls	r0, r0, #2
10005882:	1830      	adds	r0, r6, r0
10005884:	6083      	str	r3, [r0, #8]
	LayerSetW(inx, w); // set width of image, update parameters init, trans and wb
}
10005886:	b003      	add	sp, #12
10005888:	bcf0      	pop	{r4, r5, r6, r7}
1000588a:	46bb      	mov	fp, r7
1000588c:	46b2      	mov	sl, r6
1000588e:	46a9      	mov	r9, r5
10005890:	46a0      	mov	r8, r4
10005892:	bdf0      	pop	{r4, r5, r6, r7, pc}
	lay->trans = mono ? (((w/8)+3)/4) : (w/4); // transfer count
10005894:	08df      	lsrs	r7, r3, #3
10005896:	1cfa      	adds	r2, r7, #3
10005898:	1092      	asrs	r2, r2, #2
1000589a:	8222      	strh	r2, [r4, #16]
		init = VGAMONO(cppx, w, (lay->keycol & 0xff));
1000589c:	22ff      	movs	r2, #255	; 0xff
1000589e:	0309      	lsls	r1, r1, #12
100058a0:	0312      	lsls	r2, r2, #12
100058a2:	3b01      	subs	r3, #1
100058a4:	4011      	ands	r1, r2
100058a6:	005b      	lsls	r3, r3, #1
100058a8:	430b      	orrs	r3, r1
100058aa:	2101      	movs	r1, #1
	lay->wb = mono ? (w/8) : w; // width bytes
100058ac:	8367      	strh	r7, [r4, #26]
		init = VGAMONO(cppx, w, (lay->keycol & 0xff));
100058ae:	430b      	orrs	r3, r1
		break;
100058b0:	e7e3      	b.n	1000587a <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x9e>
		init = VGAKEY(cppx, w, (lay->keycol & 0xff));
100058b2:	22ff      	movs	r2, #255	; 0xff
100058b4:	02c9      	lsls	r1, r1, #11
100058b6:	02d2      	lsls	r2, r2, #11
100058b8:	3b01      	subs	r3, #1
100058ba:	4011      	ands	r1, r2
100058bc:	4319      	orrs	r1, r3
100058be:	2380      	movs	r3, #128	; 0x80
100058c0:	031b      	lsls	r3, r3, #12
100058c2:	430b      	orrs	r3, r1
		break;
100058c4:	e7d9      	b.n	1000587a <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x9e>
		init = VGACOLOR(cppx, w);
100058c6:	4906      	ldr	r1, [pc, #24]	; (100058e0 <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x104>)
100058c8:	3b01      	subs	r3, #1
100058ca:	005b      	lsls	r3, r3, #1
100058cc:	430b      	orrs	r3, r1
		break;
100058ce:	e7d4      	b.n	1000587a <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x9e>
	switch (lay->mode)
100058d0:	2301      	movs	r3, #1
100058d2:	e7d2      	b.n	1000587a <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x9e>
	u32 init = 0; // init word
100058d4:	2300      	movs	r3, #0
100058d6:	e7d0      	b.n	1000587a <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x9e>
100058d8:	20020128 	.word	0x20020128
100058dc:	101acc24 	.word	0x101acc24
100058e0:	002ff000 	.word	0x002ff000

100058e4 <_Z11ScreenClearP7sScreen>:
100058e4:	f3bf 8f5f 	dmb	sy

// clear screen (set 0 strips, does not modify sprites)
void ScreenClear(sScreen* s)
{
	__dmb();
	s->num = 0;
100058e8:	2300      	movs	r3, #0
100058ea:	8003      	strh	r3, [r0, #0]
100058ec:	f3bf 8f5f 	dmb	sy
	__dmb();
}
100058f0:	4770      	bx	lr
100058f2:	46c0      	nop			; (mov r8, r8)

100058f4 <_Z14ScreenAddStripP7sScreeni>:

// add empty strip to the screen (returns pointer to the strip)
sStrip* ScreenAddStrip(sScreen* s, int height)
{
	int n = s->num;
100058f4:	23e4      	movs	r3, #228	; 0xe4
100058f6:	8802      	ldrh	r2, [r0, #0]
{
100058f8:	b510      	push	{r4, lr}
100058fa:	4353      	muls	r3, r2
	sStrip* t = &s->strip[n];
	t->height = height;
100058fc:	18c4      	adds	r4, r0, r3
100058fe:	80a1      	strh	r1, [r4, #4]
	t->num = 0;
10005900:	2100      	movs	r1, #0
10005902:	80e1      	strh	r1, [r4, #6]
10005904:	f3bf 8f5f 	dmb	sy
	__dmb();
	s->num = n + 1;
10005908:	3201      	adds	r2, #1
1000590a:	8002      	strh	r2, [r0, #0]
1000590c:	f3bf 8f5f 	dmb	sy
	sStrip* t = &s->strip[n];
10005910:	3304      	adds	r3, #4
10005912:	18c0      	adds	r0, r0, r3
	__dmb();
	return t;
}
10005914:	bd10      	pop	{r4, pc}
10005916:	46c0      	nop			; (mov r8, r8)

10005918 <_Z13ScreenAddSegmP6sStripi>:

// add empty segment to video strip (returns pointer to the segment and initialises is to defaults)
sSegm* ScreenAddSegm(sStrip* strip, int width)
{
10005918:	b5f0      	push	{r4, r5, r6, r7, lr}
	int n = strip->num;
	sSegm* g = &strip->seg[n];
	g->width = width;
1000591a:	2500      	movs	r5, #0
	int n = strip->num;
1000591c:	8844      	ldrh	r4, [r0, #2]
	g->width = width;
1000591e:	040f      	lsls	r7, r1, #16
10005920:	00e3      	lsls	r3, r4, #3
10005922:	1b1b      	subs	r3, r3, r4
10005924:	009b      	lsls	r3, r3, #2
10005926:	0c3e      	lsrs	r6, r7, #16
10005928:	18c2      	adds	r2, r0, r3
1000592a:	433e      	orrs	r6, r7
1000592c:	6056      	str	r6, [r2, #4]
	g->wb = width;
	g->offx = 0;
1000592e:	6095      	str	r5, [r2, #8]
	g->offy = 0;
	g->wrapx = width;
10005930:	8191      	strh	r1, [r2, #12]
	g->wrapy = strip->height;
10005932:	8801      	ldrh	r1, [r0, #0]
	g->data = NULL;
10005934:	6115      	str	r5, [r2, #16]
	g->wrapy = strip->height;
10005936:	81d1      	strh	r1, [r2, #14]
	g->form = GF_COLOR;
10005938:	8295      	strh	r5, [r2, #20]
	g->dbly = false;
	g->par = 0;
1000593a:	6195      	str	r5, [r2, #24]
	g->par2 = 0;
1000593c:	61d5      	str	r5, [r2, #28]
1000593e:	f3bf 8f5f 	dmb	sy
	__dmb();
	strip->num = n + 1;
10005942:	3401      	adds	r4, #1
10005944:	8044      	strh	r4, [r0, #2]
10005946:	f3bf 8f5f 	dmb	sy
	sSegm* g = &strip->seg[n];
1000594a:	3304      	adds	r3, #4
1000594c:	18c0      	adds	r0, r0, r3
	__dmb();
	return g;
}
1000594e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10005950 <_Z15ScreenSegmColorP5sSegmmm>:
// set video segment to simple color format GF_COLOR
//  col1 = color pattern 4-pixels even line (use macro MULTICOL)
//  col2 = color pattern 4-pixels odd line (use macro MULTICOL)
void ScreenSegmColor(sSegm* segm, u32 col1, u32 col2)
{
	segm->par = col1;
10005950:	6141      	str	r1, [r0, #20]
	segm->par2 = col2;
10005952:	6182      	str	r2, [r0, #24]
10005954:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_COLOR;
10005958:	2300      	movs	r3, #0
1000595a:	7403      	strb	r3, [r0, #16]
1000595c:	f3bf 8f5f 	dmb	sy
	__dmb();
}
10005960:	4770      	bx	lr
10005962:	46c0      	nop			; (mov r8, r8)

10005964 <_Z15ScreenSegmATextP5sSegmPKvS2_tS2_i>:
//   font = pointer to 1-bit font of 256 characters of width 8 (total width of image 2048 pixels)
//   fontheight = font height
//   pal = pointer to palette of 16 colors
//   wb = pitch - number of bytes between text lines
void ScreenSegmAText(sSegm* segm, const void* data, const void* font, u16 fontheight, const void* pal, int wb)
{
10005964:	b510      	push	{r4, lr}
	segm->form = GF_COLOR;
10005966:	2400      	movs	r4, #0
10005968:	7404      	strb	r4, [r0, #16]
1000596a:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->data = data;
	segm->par = (u32)font;
1000596e:	6142      	str	r2, [r0, #20]
	segm->par2 = (u32)pal;
	segm->par3 = fontheight;
10005970:	8243      	strh	r3, [r0, #18]
	segm->par2 = (u32)pal;
10005972:	9a02      	ldr	r2, [sp, #8]
	segm->wb = wb;
10005974:	9b03      	ldr	r3, [sp, #12]
	segm->data = data;
10005976:	60c1      	str	r1, [r0, #12]
	segm->par2 = (u32)pal;
10005978:	6182      	str	r2, [r0, #24]
	segm->wb = wb;
1000597a:	8043      	strh	r3, [r0, #2]
1000597c:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_ATEXT;
10005980:	230b      	movs	r3, #11
10005982:	7403      	strb	r3, [r0, #16]
10005984:	f3bf 8f5f 	dmb	sy
	__dmb();
}
10005988:	bd10      	pop	{r4, pc}
1000598a:	46c0      	nop			; (mov r8, r8)

1000598c <_Z9VgaCfgDefP7sVgaCfg>:
};

// initialize default VGA configuration
void VgaCfgDef(sVgaCfg* cfg)
{
	cfg->width = 640;		// width in pixels
1000598c:	4b06      	ldr	r3, [pc, #24]	; (100059a8 <_Z9VgaCfgDefP7sVgaCfg+0x1c>)
	cfg->height = 480;		// height in lines
	cfg->wfull = 0;			// width of full screen, corresponding to 'hfull' time (0=use 'width' parameter)
	cfg->video = &VideoVGA;		// used video timings
1000598e:	4a07      	ldr	r2, [pc, #28]	; (100059ac <_Z9VgaCfgDefP7sVgaCfg+0x20>)
	cfg->width = 640;		// width in pixels
10005990:	6003      	str	r3, [r0, #0]
	cfg->wfull = 0;			// width of full screen, corresponding to 'hfull' time (0=use 'width' parameter)
10005992:	2300      	movs	r3, #0
	cfg->video = &VideoVGA;		// used video timings
10005994:	6082      	str	r2, [r0, #8]
	cfg->freq = 120000;		// required minimal system frequency in kHz (real frequency can be higher)
10005996:	4a06      	ldr	r2, [pc, #24]	; (100059b0 <_Z9VgaCfgDefP7sVgaCfg+0x24>)
	cfg->wfull = 0;			// width of full screen, corresponding to 'hfull' time (0=use 'width' parameter)
10005998:	8083      	strh	r3, [r0, #4]
	cfg->freq = 120000;		// required minimal system frequency in kHz (real frequency can be higher)
1000599a:	60c2      	str	r2, [r0, #12]
1000599c:	4a05      	ldr	r2, [pc, #20]	; (100059b4 <_Z9VgaCfgDefP7sVgaCfg+0x28>)
	cfg->fmax = 270000;		// maximal system frequency in kHz (limit resolution if needed)
	cfg->mode[0] = LAYERMODE_BASE;	// modes of overlapped layers 0..3 LAYERMODE_* (LAYERMODE_BASE = layer is off)
1000599e:	6143      	str	r3, [r0, #20]
	cfg->freq = 120000;		// required minimal system frequency in kHz (real frequency can be higher)
100059a0:	6102      	str	r2, [r0, #16]
	cfg->mode[1] = LAYERMODE_BASE;	// - mode of layer 0 is ignored (always use LAYERMODE_BASE)
	cfg->mode[2] = LAYERMODE_BASE;	// - all overlapped layers must use same layer program
	cfg->mode[3] = LAYERMODE_BASE;
	cfg->dbly = False;		// double in Y direction
100059a2:	8303      	strh	r3, [r0, #24]
	cfg->lockfreq = False;		// lock required frequency, do not change it
}
100059a4:	4770      	bx	lr
100059a6:	46c0      	nop			; (mov r8, r8)
100059a8:	01e00280 	.word	0x01e00280
100059ac:	101acef8 	.word	0x101acef8
100059b0:	0001d4c0 	.word	0x0001d4c0
100059b4:	00041eb0 	.word	0x00041eb0

100059b8 <_Z6VgaCfgPK7sVgaCfgP6sVmode>:

// calculate videomode setup
//   cfg ... required configuration
//   vmode ... destination videomode setup for driver
void VgaCfg(const sVgaCfg* cfg, sVmode* vmode)
{
100059b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100059ba:	46de      	mov	lr, fp
100059bc:	4657      	mov	r7, sl
100059be:	464e      	mov	r6, r9
100059c0:	4645      	mov	r5, r8
	int i;

	// prepare layer program, copy layer modes
	u8 prog = LAYERMODE_BASE;
	vmode->mode[0] = prog;
100059c2:	2300      	movs	r3, #0
{
100059c4:	b5e0      	push	{r5, r6, r7, lr}
	vmode->mode[0] = prog;
100059c6:	764b      	strb	r3, [r1, #25]
	for (i = 1; i < LAYERS; i++)
	{
		if (cfg->mode[i] != LAYERMODE_BASE) prog = LayerMode[cfg->mode[i]].prog;
100059c8:	7d42      	ldrb	r2, [r0, #21]
{
100059ca:	4682      	mov	sl, r0
100059cc:	468b      	mov	fp, r1
100059ce:	b091      	sub	sp, #68	; 0x44
		if (cfg->mode[i] != LAYERMODE_BASE) prog = LayerMode[cfg->mode[i]].prog;
100059d0:	2a00      	cmp	r2, #0
100059d2:	d100      	bne.n	100059d6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x1e>
100059d4:	e290      	b.n	10005ef8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x540>
100059d6:	4bdb      	ldr	r3, [pc, #876]	; (10005d44 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x38c>)
100059d8:	0051      	lsls	r1, r2, #1
100059da:	1889      	adds	r1, r1, r2
100059dc:	5c59      	ldrb	r1, [r3, r1]
		vmode->mode[i] = cfg->mode[i];
100059de:	4658      	mov	r0, fp
100059e0:	7682      	strb	r2, [r0, #26]
		if (cfg->mode[i] != LAYERMODE_BASE) prog = LayerMode[cfg->mode[i]].prog;
100059e2:	4652      	mov	r2, sl
100059e4:	7d92      	ldrb	r2, [r2, #22]
100059e6:	2a00      	cmp	r2, #0
100059e8:	d002      	beq.n	100059f0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x38>
100059ea:	0051      	lsls	r1, r2, #1
100059ec:	1889      	adds	r1, r1, r2
100059ee:	5c59      	ldrb	r1, [r3, r1]
		vmode->mode[i] = cfg->mode[i];
100059f0:	4658      	mov	r0, fp
100059f2:	76c2      	strb	r2, [r0, #27]
		if (cfg->mode[i] != LAYERMODE_BASE) prog = LayerMode[cfg->mode[i]].prog;
100059f4:	4652      	mov	r2, sl
100059f6:	7dd2      	ldrb	r2, [r2, #23]
100059f8:	2a00      	cmp	r2, #0
100059fa:	d002      	beq.n	10005a02 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x4a>
100059fc:	0051      	lsls	r1, r2, #1
100059fe:	1889      	adds	r1, r1, r2
10005a00:	5c59      	ldrb	r1, [r3, r1]
		vmode->mode[i] = cfg->mode[i];
10005a02:	4658      	mov	r0, fp
10005a04:	7702      	strb	r2, [r0, #28]
	}
	vmode->prog = prog;

	// prepare minimal and maximal clocks per pixel
	int mincpp = LayerMode[LAYERMODE_BASE].mincpp;
10005a06:	785a      	ldrb	r2, [r3, #1]
	vmode->prog = prog;
10005a08:	7601      	strb	r1, [r0, #24]
	int mincpp = LayerMode[LAYERMODE_BASE].mincpp;
10005a0a:	4694      	mov	ip, r2
	int maxcpp = LayerMode[LAYERMODE_BASE].maxcpp;
	int cpp;
	for (i = 1; i < LAYERS; i++)
	{
		cpp = LayerMode[cfg->mode[i]].mincpp;
10005a0c:	4652      	mov	r2, sl
10005a0e:	7d54      	ldrb	r4, [r2, #21]
10005a10:	7d96      	ldrb	r6, [r2, #22]
10005a12:	0060      	lsls	r0, r4, #1
10005a14:	0072      	lsls	r2, r6, #1
10005a16:	1991      	adds	r1, r2, r6
10005a18:	1907      	adds	r7, r0, r4
10005a1a:	1859      	adds	r1, r3, r1
10005a1c:	19df      	adds	r7, r3, r7
10005a1e:	787f      	ldrb	r7, [r7, #1]
10005a20:	7849      	ldrb	r1, [r1, #1]
	int maxcpp = LayerMode[LAYERMODE_BASE].maxcpp;
10005a22:	789d      	ldrb	r5, [r3, #2]
		if (cpp > mincpp) mincpp = cpp;
10005a24:	42b9      	cmp	r1, r7
10005a26:	da00      	bge.n	10005a2a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x72>
10005a28:	0039      	movs	r1, r7
10005a2a:	4561      	cmp	r1, ip
10005a2c:	da00      	bge.n	10005a30 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x78>
10005a2e:	4661      	mov	r1, ip
		cpp = LayerMode[cfg->mode[i]].maxcpp;
10005a30:	1992      	adds	r2, r2, r6
10005a32:	1900      	adds	r0, r0, r4
10005a34:	189a      	adds	r2, r3, r2
10005a36:	1818      	adds	r0, r3, r0
10005a38:	7880      	ldrb	r0, [r0, #2]
10005a3a:	7892      	ldrb	r2, [r2, #2]
10005a3c:	4282      	cmp	r2, r0
10005a3e:	dd00      	ble.n	10005a42 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x8a>
10005a40:	0002      	movs	r2, r0
10005a42:	42aa      	cmp	r2, r5
10005a44:	dd00      	ble.n	10005a48 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x90>
10005a46:	002a      	movs	r2, r5
		cpp = LayerMode[cfg->mode[i]].mincpp;
10005a48:	4650      	mov	r0, sl
10005a4a:	7dc4      	ldrb	r4, [r0, #23]
10005a4c:	0060      	lsls	r0, r4, #1
10005a4e:	1905      	adds	r5, r0, r4
10005a50:	195d      	adds	r5, r3, r5
10005a52:	786e      	ldrb	r6, [r5, #1]
10005a54:	428e      	cmp	r6, r1
10005a56:	da00      	bge.n	10005a5a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0xa2>
10005a58:	000e      	movs	r6, r1
		cpp = LayerMode[cfg->mode[i]].maxcpp;
10005a5a:	1900      	adds	r0, r0, r4
10005a5c:	181b      	adds	r3, r3, r0
10005a5e:	789c      	ldrb	r4, [r3, #2]
10005a60:	4294      	cmp	r4, r2
10005a62:	dd00      	ble.n	10005a66 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0xae>
10005a64:	0014      	movs	r4, r2
		if (cpp < maxcpp) maxcpp = cpp;
	}

	// prepare full width
	int w = cfg->width; // required width
10005a66:	4653      	mov	r3, sl
	int wfull = cfg->wfull;	// full width
10005a68:	4652      	mov	r2, sl
	int w = cfg->width; // required width
10005a6a:	881b      	ldrh	r3, [r3, #0]
10005a6c:	9306      	str	r3, [sp, #24]
	int wfull = cfg->wfull;	// full width
10005a6e:	8897      	ldrh	r7, [r2, #4]
	if (wfull == 0) wfull = w; // use required width as 100% width
10005a70:	2f00      	cmp	r7, #0
10005a72:	d100      	bne.n	10005a76 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0xbe>
10005a74:	001f      	movs	r7, r3

	// prepare maximal active time and maximal pixels
	const sVideo* v = cfg->video;
10005a76:	4653      	mov	r3, sl
10005a78:	689b      	ldr	r3, [r3, #8]
10005a7a:	4699      	mov	r9, r3
	float hmax = v->htot - v->hfront - v->hsync - v->hback;
10005a7c:	6859      	ldr	r1, [r3, #4]
10005a7e:	6818      	ldr	r0, [r3, #0]
10005a80:	f7fa febf 	bl	10000802 <__wrap___aeabi_fsub>
10005a84:	464b      	mov	r3, r9
10005a86:	6899      	ldr	r1, [r3, #8]
10005a88:	f7fa febb 	bl	10000802 <__wrap___aeabi_fsub>
10005a8c:	464b      	mov	r3, r9
10005a8e:	68d9      	ldr	r1, [r3, #12]
10005a90:	f7fa feb7 	bl	10000802 <__wrap___aeabi_fsub>
	float hfull = v->hfull;
10005a94:	464b      	mov	r3, r9
10005a96:	691b      	ldr	r3, [r3, #16]
	float hmax = v->htot - v->hfront - v->hsync - v->hback;
10005a98:	9007      	str	r0, [sp, #28]
	int wmax = (int)(wfull*hmax/hfull + 0.001f);
10005a9a:	0038      	movs	r0, r7
	float hfull = v->hfull;
10005a9c:	4698      	mov	r8, r3
	int wmax = (int)(wfull*hmax/hfull + 0.001f);
10005a9e:	f7fa fec5 	bl	1000082c <__wrap___aeabi_i2f>

	// calculate cpp from required frequency (rounded down), limit minimal cpp
	u32 freq = cfg->freq;
10005aa2:	4653      	mov	r3, sl
10005aa4:	68dd      	ldr	r5, [r3, #12]
	int wmax = (int)(wfull*hmax/hfull + 0.001f);
10005aa6:	9004      	str	r0, [sp, #16]
	u32 freq = cfg->freq;
10005aa8:	950e      	str	r5, [sp, #56]	; 0x38
	cpp = (int)(freq*hfull/1000/wfull + 0.1f);
	if (cpp < mincpp) cpp = mincpp;

	// recalculate frequency if not locked
	if (!cfg->lockfreq)
10005aaa:	7e5b      	ldrb	r3, [r3, #25]
10005aac:	2b00      	cmp	r3, #0
10005aae:	d130      	bne.n	10005b12 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x15a>
	cpp = (int)(freq*hfull/1000/wfull + 0.1f);
10005ab0:	0028      	movs	r0, r5
10005ab2:	f7fa feb5 	bl	10000820 <__wrap___aeabi_ui2f>
10005ab6:	4641      	mov	r1, r8
10005ab8:	f7fa feac 	bl	10000814 <__wrap___aeabi_fmul>
10005abc:	49a2      	ldr	r1, [pc, #648]	; (10005d48 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
10005abe:	f7fa fea6 	bl	1000080e <__wrap___aeabi_fdiv>
10005ac2:	9904      	ldr	r1, [sp, #16]
10005ac4:	f7fa fea3 	bl	1000080e <__wrap___aeabi_fdiv>
10005ac8:	49a0      	ldr	r1, [pc, #640]	; (10005d4c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x394>)
10005aca:	f7fa fe9d 	bl	10000808 <__wrap___aeabi_fadd>
10005ace:	f7fa fecf 	bl	10000870 <__wrap___aeabi_f2iz>
	{
		int freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
10005ad2:	4286      	cmp	r6, r0
10005ad4:	da00      	bge.n	10005ad8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x120>
10005ad6:	e240      	b.n	10005f5a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5a2>
10005ad8:	437e      	muls	r6, r7
10005ada:	0170      	lsls	r0, r6, #5
10005adc:	1b80      	subs	r0, r0, r6
10005ade:	0080      	lsls	r0, r0, #2
10005ae0:	1980      	adds	r0, r0, r6
10005ae2:	00c0      	lsls	r0, r0, #3
10005ae4:	f7fa fea2 	bl	1000082c <__wrap___aeabi_i2f>
10005ae8:	4641      	mov	r1, r8
10005aea:	f7fa fe90 	bl	1000080e <__wrap___aeabi_fdiv>
10005aee:	21fc      	movs	r1, #252	; 0xfc
10005af0:	0589      	lsls	r1, r1, #22
10005af2:	f7fa fe89 	bl	10000808 <__wrap___aeabi_fadd>
10005af6:	f7fa febb 	bl	10000870 <__wrap___aeabi_f2iz>
10005afa:	30c8      	adds	r0, #200	; 0xc8
		if (freq2 < freq)
10005afc:	4285      	cmp	r5, r0
10005afe:	d900      	bls.n	10005b02 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x14a>
10005b00:	e215      	b.n	10005f2e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x576>
		{
			cpp++;
			freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
		}
		if (freq2 >= freq) freq = freq2;
10005b02:	0005      	movs	r5, r0
10005b04:	900e      	str	r0, [sp, #56]	; 0x38
		if (freq > cfg->fmax) freq = cfg->fmax;
10005b06:	4653      	mov	r3, sl
10005b08:	691b      	ldr	r3, [r3, #16]
10005b0a:	42ab      	cmp	r3, r5
10005b0c:	d201      	bcs.n	10005b12 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x15a>
10005b0e:	001d      	movs	r5, r3
10005b10:	930e      	str	r3, [sp, #56]	; 0x38

	// find sysclock setup (use set_sys_clock_pll to set sysclock)
	u32 vco;
	u16 fbdiv;
	u8 pd1, pd2;
	FindSysClock(freq, &freq, &vco, &fbdiv, &pd1, &pd2);
10005b12:	ab0a      	add	r3, sp, #40	; 0x28
10005b14:	469c      	mov	ip, r3
10005b16:	260e      	movs	r6, #14
10005b18:	230d      	movs	r3, #13
10005b1a:	4466      	add	r6, ip
10005b1c:	4463      	add	r3, ip
10005b1e:	af0d      	add	r7, sp, #52	; 0x34
10005b20:	a90e      	add	r1, sp, #56	; 0x38
10005b22:	0028      	movs	r0, r5
10005b24:	9301      	str	r3, [sp, #4]
10005b26:	aa0f      	add	r2, sp, #60	; 0x3c
10005b28:	0033      	movs	r3, r6
10005b2a:	9700      	str	r7, [sp, #0]
10005b2c:	f000 fa3c 	bl	10005fa8 <_Z12FindSysClockmPmS_PtPhS1_>

	vmode->freq = freq;
10005b30:	465b      	mov	r3, fp
10005b32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	vmode->fbdiv = fbdiv;
	vmode->pd1 = pd1;
	vmode->pd2 = pd2;

	// calculate divisor
	cpp = (int)(freq*hfull/1000/wfull + 0.2f);
10005b34:	980e      	ldr	r0, [sp, #56]	; 0x38
	vmode->freq = freq;
10005b36:	609a      	str	r2, [r3, #8]
	vmode->vco = vco;
10005b38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10005b3a:	60da      	str	r2, [r3, #12]
	vmode->fbdiv = fbdiv;
10005b3c:	465a      	mov	r2, fp
10005b3e:	8833      	ldrh	r3, [r6, #0]
10005b40:	8213      	strh	r3, [r2, #16]
	vmode->pd1 = pd1;
10005b42:	783b      	ldrb	r3, [r7, #0]
10005b44:	7493      	strb	r3, [r2, #18]
	vmode->pd2 = pd2;
10005b46:	ab0a      	add	r3, sp, #40	; 0x28
10005b48:	7b5b      	ldrb	r3, [r3, #13]
10005b4a:	74d3      	strb	r3, [r2, #19]
	cpp = (int)(freq*hfull/1000/wfull + 0.2f);
10005b4c:	f7fa fe68 	bl	10000820 <__wrap___aeabi_ui2f>
10005b50:	4641      	mov	r1, r8
10005b52:	9003      	str	r0, [sp, #12]
10005b54:	f7fa fe5e 	bl	10000814 <__wrap___aeabi_fmul>
10005b58:	497b      	ldr	r1, [pc, #492]	; (10005d48 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
10005b5a:	f7fa fe58 	bl	1000080e <__wrap___aeabi_fdiv>
10005b5e:	9904      	ldr	r1, [sp, #16]
10005b60:	9005      	str	r0, [sp, #20]
10005b62:	f7fa fe54 	bl	1000080e <__wrap___aeabi_fdiv>
10005b66:	497a      	ldr	r1, [pc, #488]	; (10005d50 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x398>)
10005b68:	4680      	mov	r8, r0
10005b6a:	f7fa fe4d 	bl	10000808 <__wrap___aeabi_fadd>
10005b6e:	f7fa fe7f 	bl	10000870 <__wrap___aeabi_f2iz>
10005b72:	0005      	movs	r5, r0
	int div = 1;
	while (cpp > maxcpp)
10005b74:	4284      	cmp	r4, r0
10005b76:	db00      	blt.n	10005b7a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x1c2>
10005b78:	e20c      	b.n	10005f94 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5dc>
	int div = 1;
10005b7a:	2701      	movs	r7, #1
10005b7c:	4645      	mov	r5, r8
	{
		div++;
10005b7e:	3701      	adds	r7, #1
		cpp = (int)(freq*hfull/1000/wfull/div + 0.2f);
10005b80:	0038      	movs	r0, r7
10005b82:	f7fa fe53 	bl	1000082c <__wrap___aeabi_i2f>
10005b86:	1c01      	adds	r1, r0, #0
10005b88:	1c06      	adds	r6, r0, #0
10005b8a:	1c28      	adds	r0, r5, #0
10005b8c:	f7fa fe3f 	bl	1000080e <__wrap___aeabi_fdiv>
10005b90:	496f      	ldr	r1, [pc, #444]	; (10005d50 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x398>)
10005b92:	f7fa fe39 	bl	10000808 <__wrap___aeabi_fadd>
10005b96:	f7fa fe6b 	bl	10000870 <__wrap___aeabi_f2iz>
	while (cpp > maxcpp)
10005b9a:	4284      	cmp	r4, r0
10005b9c:	dbef      	blt.n	10005b7e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x1c6>
	}

	vmode->div = div;
10005b9e:	0005      	movs	r5, r0
	vmode->vback2 = v->vback2 - dh/2; // V back porch (after VSYNC, before image) on subframe 2
	vmode->vfront2 = v->vfront2 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 2
	vmode->vpre2 = v->vpre2; // V sync pre half-pulses on subframe 2

	// frequency
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
10005ba0:	0438      	lsls	r0, r7, #16
10005ba2:	0c00      	lsrs	r0, r0, #16
10005ba4:	f7fa fe42 	bl	1000082c <__wrap___aeabi_i2f>
	vmode->div = div;
10005ba8:	b2bc      	uxth	r4, r7
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
10005baa:	9008      	str	r0, [sp, #32]
	vmode->div = div;
10005bac:	465b      	mov	r3, fp
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
10005bae:	0028      	movs	r0, r5
	vmode->div = div;
10005bb0:	829c      	strh	r4, [r3, #20]
	vmode->cpp = cpp;
10005bb2:	82dd      	strh	r5, [r3, #22]
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
10005bb4:	f7fa fe3a 	bl	1000082c <__wrap___aeabi_i2f>
	wmax = (int)(freq*hmax/1000/cpp/div + 0.4f);
10005bb8:	9907      	ldr	r1, [sp, #28]
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
10005bba:	1c04      	adds	r4, r0, #0
	wmax = (int)(freq*hmax/1000/cpp/div + 0.4f);
10005bbc:	9803      	ldr	r0, [sp, #12]
10005bbe:	f7fa fe29 	bl	10000814 <__wrap___aeabi_fmul>
10005bc2:	4961      	ldr	r1, [pc, #388]	; (10005d48 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
10005bc4:	f7fa fe23 	bl	1000080e <__wrap___aeabi_fdiv>
10005bc8:	1c21      	adds	r1, r4, #0
10005bca:	f7fa fe20 	bl	1000080e <__wrap___aeabi_fdiv>
10005bce:	1c31      	adds	r1, r6, #0
10005bd0:	f7fa fe1d 	bl	1000080e <__wrap___aeabi_fdiv>
10005bd4:	495f      	ldr	r1, [pc, #380]	; (10005d54 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x39c>)
10005bd6:	f7fa fe17 	bl	10000808 <__wrap___aeabi_fadd>
10005bda:	f7fa fe49 	bl	10000870 <__wrap___aeabi_f2iz>
10005bde:	0007      	movs	r7, r0
	if (w > wmax) w = wmax;
10005be0:	9806      	ldr	r0, [sp, #24]
10005be2:	42b8      	cmp	r0, r7
10005be4:	dd00      	ble.n	10005be8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x230>
10005be6:	0038      	movs	r0, r7
	w = ALIGN4(w);
10005be8:	2303      	movs	r3, #3
10005bea:	4398      	bics	r0, r3
	vmode->width = w; // active width
10005bec:	465b      	mov	r3, fp
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
10005bee:	1c21      	adds	r1, r4, #0
	vmode->width = w; // active width
10005bf0:	8018      	strh	r0, [r3, #0]
	w = ALIGN4(w);
10005bf2:	4680      	mov	r8, r0
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
10005bf4:	9805      	ldr	r0, [sp, #20]
10005bf6:	f7fa fe0a 	bl	1000080e <__wrap___aeabi_fdiv>
10005bfa:	1c31      	adds	r1, r6, #0
10005bfc:	f7fa fe07 	bl	1000080e <__wrap___aeabi_fdiv>
10005c00:	4954      	ldr	r1, [pc, #336]	; (10005d54 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x39c>)
10005c02:	f7fa fe01 	bl	10000808 <__wrap___aeabi_fadd>
10005c06:	f7fa fe33 	bl	10000870 <__wrap___aeabi_f2iz>
	vmode->wfull = wfull; // width of full screen (image should be full visible)
10005c0a:	465b      	mov	r3, fp
10005c0c:	8098      	strh	r0, [r3, #4]
	vmode->wmax = wmax; // maximal width (can be > wfull)
10005c0e:	80df      	strh	r7, [r3, #6]
	int hwidth = w*cpp; // active width in state machine clocks
10005c10:	4643      	mov	r3, r8
10005c12:	435d      	muls	r5, r3
	int htot = (int)(freq*v->htot/1000/div + 0.5f);  // total state machine clocks per line
10005c14:	464b      	mov	r3, r9
10005c16:	9f03      	ldr	r7, [sp, #12]
10005c18:	6819      	ldr	r1, [r3, #0]
10005c1a:	1c38      	adds	r0, r7, #0
10005c1c:	f7fa fdfa 	bl	10000814 <__wrap___aeabi_fmul>
10005c20:	4949      	ldr	r1, [pc, #292]	; (10005d48 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
10005c22:	f7fa fdf4 	bl	1000080e <__wrap___aeabi_fdiv>
10005c26:	1c31      	adds	r1, r6, #0
10005c28:	f7fa fdf1 	bl	1000080e <__wrap___aeabi_fdiv>
10005c2c:	21fc      	movs	r1, #252	; 0xfc
10005c2e:	0589      	lsls	r1, r1, #22
10005c30:	f7fa fdea 	bl	10000808 <__wrap___aeabi_fadd>
10005c34:	f7fa fe1c 	bl	10000870 <__wrap___aeabi_f2iz>
	int hsync = (int)(freq*v->hsync/1000/div + 0.5f); // H sync pulse in state machine clocks (min. 4)
10005c38:	464b      	mov	r3, r9
	int htot = (int)(freq*v->htot/1000/div + 0.5f);  // total state machine clocks per line
10005c3a:	0004      	movs	r4, r0
	int hsync = (int)(freq*v->hsync/1000/div + 0.5f); // H sync pulse in state machine clocks (min. 4)
10005c3c:	6899      	ldr	r1, [r3, #8]
10005c3e:	1c38      	adds	r0, r7, #0
10005c40:	f7fa fde8 	bl	10000814 <__wrap___aeabi_fmul>
10005c44:	4940      	ldr	r1, [pc, #256]	; (10005d48 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
10005c46:	f7fa fde2 	bl	1000080e <__wrap___aeabi_fdiv>
10005c4a:	1c31      	adds	r1, r6, #0
10005c4c:	f7fa fddf 	bl	1000080e <__wrap___aeabi_fdiv>
10005c50:	21fc      	movs	r1, #252	; 0xfc
10005c52:	0589      	lsls	r1, r1, #22
10005c54:	f7fa fdd8 	bl	10000808 <__wrap___aeabi_fadd>
10005c58:	f7fa fe0a 	bl	10000870 <__wrap___aeabi_f2iz>
10005c5c:	0007      	movs	r7, r0
	if (hsync < 4)
10005c5e:	2803      	cmp	r0, #3
10005c60:	dc00      	bgt.n	10005c64 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2ac>
10005c62:	e143      	b.n	10005eec <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x534>
	vmode->hsync = (u16)hsync; // H sync pulse in state machine clocks (min. 4)
10005c64:	b283      	uxth	r3, r0
10005c66:	9304      	str	r3, [sp, #16]
	int hfront = (int)(freq*v->hfront/1000/div + 0.5f); // H front porch in state machine clocks (min. 2)
10005c68:	464b      	mov	r3, r9
10005c6a:	9803      	ldr	r0, [sp, #12]
10005c6c:	6859      	ldr	r1, [r3, #4]
10005c6e:	f7fa fdd1 	bl	10000814 <__wrap___aeabi_fmul>
10005c72:	4935      	ldr	r1, [pc, #212]	; (10005d48 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
10005c74:	f7fa fdcb 	bl	1000080e <__wrap___aeabi_fdiv>
10005c78:	1c31      	adds	r1, r6, #0
10005c7a:	f7fa fdc8 	bl	1000080e <__wrap___aeabi_fdiv>
10005c7e:	21fc      	movs	r1, #252	; 0xfc
10005c80:	0589      	lsls	r1, r1, #22
10005c82:	f7fa fdc1 	bl	10000808 <__wrap___aeabi_fadd>
10005c86:	f7fa fdf3 	bl	10000870 <__wrap___aeabi_f2iz>
	int hback = (int)(freq*v->hback/1000/div + 0.5f); // H back porch in state machine clocks (min. 13)
10005c8a:	464b      	mov	r3, r9
	int hfront = (int)(freq*v->hfront/1000/div + 0.5f); // H front porch in state machine clocks (min. 2)
10005c8c:	4680      	mov	r8, r0
	int hback = (int)(freq*v->hback/1000/div + 0.5f); // H back porch in state machine clocks (min. 13)
10005c8e:	68d9      	ldr	r1, [r3, #12]
10005c90:	9803      	ldr	r0, [sp, #12]
10005c92:	f7fa fdbf 	bl	10000814 <__wrap___aeabi_fmul>
10005c96:	492c      	ldr	r1, [pc, #176]	; (10005d48 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
10005c98:	f7fa fdb9 	bl	1000080e <__wrap___aeabi_fdiv>
10005c9c:	1c31      	adds	r1, r6, #0
10005c9e:	f7fa fdb6 	bl	1000080e <__wrap___aeabi_fdiv>
10005ca2:	21fc      	movs	r1, #252	; 0xfc
10005ca4:	0589      	lsls	r1, r1, #22
10005ca6:	f7fa fdaf 	bl	10000808 <__wrap___aeabi_fadd>
10005caa:	f7fa fde1 	bl	10000870 <__wrap___aeabi_f2iz>
	int d = htot - hfront - hsync - hback - hwidth; // difference
10005cae:	4643      	mov	r3, r8
10005cb0:	1ae2      	subs	r2, r4, r3
10005cb2:	1bd2      	subs	r2, r2, r7
10005cb4:	1a12      	subs	r2, r2, r0
10005cb6:	1b52      	subs	r2, r2, r5
	hfront += d/2;
10005cb8:	0fd3      	lsrs	r3, r2, #31
10005cba:	189b      	adds	r3, r3, r2
10005cbc:	1059      	asrs	r1, r3, #1
10005cbe:	4441      	add	r1, r8
	hback += (d < 0) ? (d-1)/2 : (d+1)/2;
10005cc0:	2a00      	cmp	r2, #0
10005cc2:	da00      	bge.n	10005cc6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x30e>
10005cc4:	e161      	b.n	10005f8a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5d2>
10005cc6:	3201      	adds	r2, #1
10005cc8:	1053      	asrs	r3, r2, #1
10005cca:	181b      	adds	r3, r3, r0
	if (hfront < 4)
10005ccc:	2903      	cmp	r1, #3
10005cce:	dc02      	bgt.n	10005cd6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x31e>
		hback -= 4 - hfront;
10005cd0:	18cb      	adds	r3, r1, r3
		hfront = 4;
10005cd2:	2104      	movs	r1, #4
		hback -= 4 - hfront;
10005cd4:	3b04      	subs	r3, #4
	if (hback < 13)
10005cd6:	2b0c      	cmp	r3, #12
10005cd8:	dc00      	bgt.n	10005cdc <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x324>
10005cda:	e100      	b.n	10005ede <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x526>
	vmode->hback = (u16)hback; // H back porch in state machine clocks (min. 13)
10005cdc:	b29a      	uxth	r2, r3
	htot = hfront + hsync + hback + hwidth; // total state machine clocks per line
10005cde:	187f      	adds	r7, r7, r1
10005ce0:	18fb      	adds	r3, r7, r3
	if (v->inter && ((htot & 1) != 0))
10005ce2:	4648      	mov	r0, r9
	htot = hfront + hsync + hback + hwidth; // total state machine clocks per line
10005ce4:	195d      	adds	r5, r3, r5
	if (v->inter && ((htot & 1) != 0))
10005ce6:	2334      	movs	r3, #52	; 0x34
10005ce8:	5cc0      	ldrb	r0, [r0, r3]
10005cea:	2800      	cmp	r0, #0
10005cec:	d002      	beq.n	10005cf4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x33c>
10005cee:	07eb      	lsls	r3, r5, #31
10005cf0:	d500      	bpl.n	10005cf4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x33c>
10005cf2:	e119      	b.n	10005f28 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x570>
	vmode->htot = (u16)htot; // total state machine clocks per line
10005cf4:	465b      	mov	r3, fp
	vmode->hfront = (u16)hfront; // H front porch in state machine clocks (min. 2)
10005cf6:	8419      	strh	r1, [r3, #32]
	vmode->hback = (u16)hback; // H back porch in state machine clocks (min. 13)
10005cf8:	849a      	strh	r2, [r3, #36]	; 0x24
	vmode->hsync = (u16)hsync; // H sync pulse in state machine clocks (min. 4)
10005cfa:	9904      	ldr	r1, [sp, #16]
	if (cfg->dbly) h *= 2; // use double lines
10005cfc:	4652      	mov	r2, sl
	vmode->htot = (u16)htot; // total state machine clocks per line
10005cfe:	83dd      	strh	r5, [r3, #30]
	vmode->hsync = (u16)hsync; // H sync pulse in state machine clocks (min. 4)
10005d00:	8459      	strh	r1, [r3, #34]	; 0x22
	int h = cfg->height; // required height
10005d02:	4653      	mov	r3, sl
	if (cfg->dbly) h *= 2; // use double lines
10005d04:	7e14      	ldrb	r4, [r2, #24]
	int h = cfg->height; // required height
10005d06:	885b      	ldrh	r3, [r3, #2]
	if (cfg->dbly) h *= 2; // use double lines
10005d08:	2c00      	cmp	r4, #0
10005d0a:	d025      	beq.n	10005d58 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3a0>
	vmode->vmax = v->vmax; // maximal height
10005d0c:	464a      	mov	r2, r9
10005d0e:	8ad1      	ldrh	r1, [r2, #22]
10005d10:	465a      	mov	r2, fp
	if (cfg->dbly) h *= 2; // use double lines
10005d12:	005b      	lsls	r3, r3, #1
	vmode->vmax = v->vmax; // maximal height
10005d14:	85d1      	strh	r1, [r2, #46]	; 0x2e
	if (h > v->vmax) h = v->vmax; // limit height
10005d16:	4299      	cmp	r1, r3
10005d18:	dd00      	ble.n	10005d1c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x364>
10005d1a:	e0fe      	b.n	10005f1a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x562>
	if (cfg->dbly) h &= ~1; // must be even number if double lines
10005d1c:	2301      	movs	r3, #1
10005d1e:	4399      	bics	r1, r3
	if (v->inter) // interlaced
10005d20:	2800      	cmp	r0, #0
10005d22:	d100      	bne.n	10005d26 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x36e>
10005d24:	e0f0      	b.n	10005f08 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x550>
		if (v->odd) // first frame is odd lines
10005d26:	2336      	movs	r3, #54	; 0x36
10005d28:	464a      	mov	r2, r9
10005d2a:	5cd3      	ldrb	r3, [r2, r3]
10005d2c:	2b00      	cmp	r3, #0
10005d2e:	d100      	bne.n	10005d32 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x37a>
10005d30:	e0ee      	b.n	10005f10 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x558>
			vact1 = h/2;
10005d32:	104a      	asrs	r2, r1, #1
			vact2 = (h+1)/2; // if even lines, even frame will have more lines
10005d34:	0016      	movs	r6, r2
10005d36:	1c4b      	adds	r3, r1, #1
10005d38:	105b      	asrs	r3, r3, #1
	vmode->vact2 = vact2; // active scanlines of 2nd subframe
10005d3a:	b298      	uxth	r0, r3
	if (cfg->dbly) h /= 2; // return double lines to single lines
10005d3c:	2c00      	cmp	r4, #0
10005d3e:	d016      	beq.n	10005d6e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3b6>
	vmode->vact2 = vact2; // active scanlines of 2nd subframe
10005d40:	0031      	movs	r1, r6
	if (cfg->dbly) h /= 2; // return double lines to single lines
10005d42:	e014      	b.n	10005d6e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3b6>
10005d44:	101acc70 	.word	0x101acc70
10005d48:	447a0000 	.word	0x447a0000
10005d4c:	3dcccccd 	.word	0x3dcccccd
10005d50:	3e4ccccd 	.word	0x3e4ccccd
10005d54:	3ecccccd 	.word	0x3ecccccd
	vmode->vmax = v->vmax; // maximal height
10005d58:	464a      	mov	r2, r9
10005d5a:	8ad1      	ldrh	r1, [r2, #22]
10005d5c:	465a      	mov	r2, fp
10005d5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
	if (h > v->vmax) h = v->vmax; // limit height
10005d60:	4299      	cmp	r1, r3
10005d62:	dd00      	ble.n	10005d66 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3ae>
10005d64:	e0cb      	b.n	10005efe <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x546>
	if (v->inter) // interlaced
10005d66:	2800      	cmp	r0, #0
10005d68:	d1dd      	bne.n	10005d26 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x36e>
10005d6a:	000a      	movs	r2, r1
	int vact2 = 0;
10005d6c:	2300      	movs	r3, #0
	vmode->height = h;
10005d6e:	465c      	mov	r4, fp
10005d70:	8061      	strh	r1, [r4, #2]
	vmode->vtot = v->vtot; // total scanlines
10005d72:	4649      	mov	r1, r9
10005d74:	8a8e      	ldrh	r6, [r1, #20]
	vmode->vact1 = vact1; // active scanlines of 1st subframe
10005d76:	b291      	uxth	r1, r2
10005d78:	8761      	strh	r1, [r4, #58]	; 0x3a
10005d7a:	9105      	str	r1, [sp, #20]
	int dh = vact1 - v->vact1; // difference
10005d7c:	4649      	mov	r1, r9
	vmode->vtot = v->vtot; // total scanlines
10005d7e:	85a6      	strh	r6, [r4, #44]	; 0x2c
	int dh = vact1 - v->vact1; // difference
10005d80:	8bc9      	ldrh	r1, [r1, #30]
10005d82:	1a52      	subs	r2, r2, r1
	vmode->vsync1 = v->vsync1; // V sync (half-)pulses on subframe 1
10005d84:	4649      	mov	r1, r9
10005d86:	8b09      	ldrh	r1, [r1, #24]
10005d88:	86a1      	strh	r1, [r4, #52]	; 0x34
10005d8a:	9104      	str	r1, [sp, #16]
	vmode->vpost1 = v->vpost1; // V sync post (half-)pulses on subframe 1
10005d8c:	4649      	mov	r1, r9
10005d8e:	8b49      	ldrh	r1, [r1, #26]
10005d90:	86e1      	strh	r1, [r4, #54]	; 0x36
	vmode->vback1 = v->vback1 - dh/2; // V back porch (after VSYNC, before image) on subframe 1
10005d92:	464c      	mov	r4, r9
	vmode->vpost1 = v->vpost1; // V sync post (half-)pulses on subframe 1
10005d94:	9106      	str	r1, [sp, #24]
	vmode->vback1 = v->vback1 - dh/2; // V back porch (after VSYNC, before image) on subframe 1
10005d96:	0fd1      	lsrs	r1, r2, #31
10005d98:	8ba4      	ldrh	r4, [r4, #28]
10005d9a:	1889      	adds	r1, r1, r2
10005d9c:	1049      	asrs	r1, r1, #1
10005d9e:	1a61      	subs	r1, r4, r1
10005da0:	b28f      	uxth	r7, r1
10005da2:	4659      	mov	r1, fp
10005da4:	870f      	strh	r7, [r1, #56]	; 0x38
	vmode->vfront1 = v->vfront1 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 1
10005da6:	4649      	mov	r1, r9
10005da8:	8c09      	ldrh	r1, [r1, #32]
10005daa:	2a00      	cmp	r2, #0
10005dac:	da00      	bge.n	10005db0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3f8>
10005dae:	e0e6      	b.n	10005f7e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5c6>
10005db0:	3201      	adds	r2, #1
10005db2:	1052      	asrs	r2, r2, #1
10005db4:	b292      	uxth	r2, r2
10005db6:	1a8a      	subs	r2, r1, r2
10005db8:	4659      	mov	r1, fp
10005dba:	b292      	uxth	r2, r2
10005dbc:	878a      	strh	r2, [r1, #60]	; 0x3c
10005dbe:	9207      	str	r2, [sp, #28]
	vmode->vpre1 = v->vpre1; // V sync pre (half-)pulses on subframe 1
10005dc0:	464a      	mov	r2, r9
10005dc2:	8c52      	ldrh	r2, [r2, #34]	; 0x22
10005dc4:	87ca      	strh	r2, [r1, #62]	; 0x3e
10005dc6:	9209      	str	r2, [sp, #36]	; 0x24
	vmode->vact2 = vact2; // active scanlines of 2nd subframe
10005dc8:	2248      	movs	r2, #72	; 0x48
10005dca:	5288      	strh	r0, [r1, r2]
	dh = vact2 - v->vact2; // difference
10005dcc:	464a      	mov	r2, r9
10005dce:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
	vmode->vsync2 = v->vsync2; // V sync half-pulses on subframe 2
10005dd0:	4658      	mov	r0, fp
	dh = vact2 - v->vact2; // difference
10005dd2:	1a9b      	subs	r3, r3, r2
	vmode->vsync2 = v->vsync2; // V sync half-pulses on subframe 2
10005dd4:	464a      	mov	r2, r9
10005dd6:	8c92      	ldrh	r2, [r2, #36]	; 0x24
10005dd8:	920a      	str	r2, [sp, #40]	; 0x28
10005dda:	0011      	movs	r1, r2
10005ddc:	2242      	movs	r2, #66	; 0x42
10005dde:	5281      	strh	r1, [r0, r2]
	vmode->vpost2 = v->vpost2; // V sync post half-pulses on subframe 2
10005de0:	464a      	mov	r2, r9
10005de2:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
10005de4:	0011      	movs	r1, r2
10005de6:	920b      	str	r2, [sp, #44]	; 0x2c
10005de8:	2244      	movs	r2, #68	; 0x44
10005dea:	5281      	strh	r1, [r0, r2]
	vmode->vback2 = v->vback2 - dh/2; // V back porch (after VSYNC, before image) on subframe 2
10005dec:	4649      	mov	r1, r9
10005dee:	0fda      	lsrs	r2, r3, #31
10005df0:	8d0c      	ldrh	r4, [r1, #40]	; 0x28
10005df2:	18d2      	adds	r2, r2, r3
10005df4:	1052      	asrs	r2, r2, #1
10005df6:	1aa4      	subs	r4, r4, r2
10005df8:	2246      	movs	r2, #70	; 0x46
10005dfa:	b2a4      	uxth	r4, r4
10005dfc:	5284      	strh	r4, [r0, r2]
	vmode->vfront2 = v->vfront2 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 2
10005dfe:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
10005e00:	2b00      	cmp	r3, #0
10005e02:	da00      	bge.n	10005e06 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x44e>
10005e04:	e0b5      	b.n	10005f72 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5ba>
10005e06:	3301      	adds	r3, #1
10005e08:	105b      	asrs	r3, r3, #1
10005e0a:	b29b      	uxth	r3, r3
10005e0c:	4659      	mov	r1, fp
10005e0e:	1ad3      	subs	r3, r2, r3
10005e10:	224a      	movs	r2, #74	; 0x4a
10005e12:	528b      	strh	r3, [r1, r2]
	vmode->vpre2 = v->vpre2; // V sync pre half-pulses on subframe 2
10005e14:	464b      	mov	r3, r9
10005e16:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
10005e18:	234c      	movs	r3, #76	; 0x4c
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
10005e1a:	9803      	ldr	r0, [sp, #12]
	vmode->vpre2 = v->vpre2; // V sync pre half-pulses on subframe 2
10005e1c:	52ca      	strh	r2, [r1, r3]
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
10005e1e:	4960      	ldr	r1, [pc, #384]	; (10005fa0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5e8>)
10005e20:	f7fa fcf8 	bl	10000814 <__wrap___aeabi_fmul>
10005e24:	9908      	ldr	r1, [sp, #32]
10005e26:	f7fa fcf2 	bl	1000080e <__wrap___aeabi_fdiv>
10005e2a:	042d      	lsls	r5, r5, #16
10005e2c:	4680      	mov	r8, r0
10005e2e:	0c28      	lsrs	r0, r5, #16
10005e30:	f7fa fcfc 	bl	1000082c <__wrap___aeabi_i2f>
10005e34:	1c01      	adds	r1, r0, #0
10005e36:	4640      	mov	r0, r8
10005e38:	f7fa fce9 	bl	1000080e <__wrap___aeabi_fdiv>
10005e3c:	465b      	mov	r3, fp
10005e3e:	1c05      	adds	r5, r0, #0
10005e40:	6298      	str	r0, [r3, #40]	; 0x28
	vmode->vfreq = vmode->hfreq / vmode->vtot;
10005e42:	0030      	movs	r0, r6
10005e44:	f7fa fcf2 	bl	1000082c <__wrap___aeabi_i2f>
10005e48:	1c01      	adds	r1, r0, #0
10005e4a:	1c28      	adds	r0, r5, #0
10005e4c:	f7fa fcdf 	bl	1000080e <__wrap___aeabi_fdiv>

	// name
	vmode->name = v->name;	// video timing name
10005e50:	464a      	mov	r2, r9
	vmode->vfreq = vmode->hfreq / vmode->vtot;
10005e52:	465b      	mov	r3, fp
	vmode->name = v->name;	// video timing name
10005e54:	6b12      	ldr	r2, [r2, #48]	; 0x30
	vmode->vfreq = vmode->hfreq / vmode->vtot;
10005e56:	6318      	str	r0, [r3, #48]	; 0x30
	vmode->name = v->name;	// video timing name
10005e58:	651a      	str	r2, [r3, #80]	; 0x50

	// flags
	vmode->lockfreq = cfg->lockfreq; // lock current frequency, do not change it
10005e5a:	4653      	mov	r3, sl
10005e5c:	4659      	mov	r1, fp
10005e5e:	7e5a      	ldrb	r2, [r3, #25]
10005e60:	2354      	movs	r3, #84	; 0x54
10005e62:	54ca      	strb	r2, [r1, r3]
	vmode->dbly = cfg->dbly; // double scanlines
10005e64:	4653      	mov	r3, sl
10005e66:	7e1a      	ldrb	r2, [r3, #24]
10005e68:	2355      	movs	r3, #85	; 0x55
10005e6a:	54ca      	strb	r2, [r1, r3]
	vmode->inter = v->inter; // interlaced (use sub-frames)
10005e6c:	464a      	mov	r2, r9
10005e6e:	3b21      	subs	r3, #33	; 0x21
10005e70:	5cd1      	ldrb	r1, [r2, r3]
10005e72:	4658      	mov	r0, fp
10005e74:	2256      	movs	r2, #86	; 0x56
10005e76:	5481      	strb	r1, [r0, r2]
	vmode->psync = v->psync; // positive synchronization
10005e78:	4649      	mov	r1, r9
10005e7a:	3a21      	subs	r2, #33	; 0x21
10005e7c:	5c89      	ldrb	r1, [r1, r2]
10005e7e:	3222      	adds	r2, #34	; 0x22
10005e80:	5481      	strb	r1, [r0, r2]
	vmode->odd = v->odd; // first sub-frame is odd lines 1, 3, 5,... (PAL)
10005e82:	4649      	mov	r1, r9
10005e84:	3a21      	subs	r2, #33	; 0x21
10005e86:	5c89      	ldrb	r1, [r1, r2]
10005e88:	3222      	adds	r2, #34	; 0x22
10005e8a:	5481      	strb	r1, [r0, r2]

	// first active scanline
	if (v->inter)
10005e8c:	464a      	mov	r2, r9
10005e8e:	5cd3      	ldrb	r3, [r2, r3]
10005e90:	2b00      	cmp	r3, #0
10005e92:	d068      	beq.n	10005f66 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5ae>
	{
		// interlaced
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
10005e94:	9a06      	ldr	r2, [sp, #24]
		vmode->vfirst2 = vmode->vfirst1 + vmode->vact1 + vmode->vfront1 + 
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
10005e96:	990a      	ldr	r1, [sp, #40]	; 0x28
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
10005e98:	4694      	mov	ip, r2
10005e9a:	9b04      	ldr	r3, [sp, #16]
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
10005e9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
10005e9e:	4463      	add	r3, ip
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
10005ea0:	468c      	mov	ip, r1
10005ea2:	990b      	ldr	r1, [sp, #44]	; 0x2c
10005ea4:	4462      	add	r2, ip
10005ea6:	468c      	mov	ip, r1
10005ea8:	9905      	ldr	r1, [sp, #20]
10005eaa:	4462      	add	r2, ip
10005eac:	468c      	mov	ip, r1
10005eae:	9907      	ldr	r1, [sp, #28]
10005eb0:	1052      	asrs	r2, r2, #1
10005eb2:	4462      	add	r2, ip
10005eb4:	468c      	mov	ip, r1
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
10005eb6:	105b      	asrs	r3, r3, #1
10005eb8:	3301      	adds	r3, #1
10005eba:	18fb      	adds	r3, r7, r3
10005ebc:	b29b      	uxth	r3, r3
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
10005ebe:	18a2      	adds	r2, r4, r2
10005ec0:	189a      	adds	r2, r3, r2
10005ec2:	4462      	add	r2, ip
10005ec4:	b292      	uxth	r2, r2
10005ec6:	4658      	mov	r0, fp
10005ec8:	214e      	movs	r1, #78	; 0x4e
10005eca:	5242      	strh	r2, [r0, r1]
10005ecc:	2240      	movs	r2, #64	; 0x40
10005ece:	5283      	strh	r3, [r0, r2]
	{
		// progressive
		vmode->vfirst1 = vmode->vsync1 + vmode->vback1 + 1;
		vmode->vfirst2 = 0;
	}
}
10005ed0:	b011      	add	sp, #68	; 0x44
10005ed2:	bcf0      	pop	{r4, r5, r6, r7}
10005ed4:	46bb      	mov	fp, r7
10005ed6:	46b2      	mov	sl, r6
10005ed8:	46a9      	mov	r9, r5
10005eda:	46a0      	mov	r8, r4
10005edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hfront -= 13 - hback;
10005ede:	18c9      	adds	r1, r1, r3
10005ee0:	390d      	subs	r1, #13
10005ee2:	2902      	cmp	r1, #2
10005ee4:	db3b      	blt.n	10005f5e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5a6>
10005ee6:	220d      	movs	r2, #13
		hback = 13;
10005ee8:	230d      	movs	r3, #13
10005eea:	e6f8      	b.n	10005cde <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x326>
		htot -= 4 - hsync;
10005eec:	2304      	movs	r3, #4
10005eee:	1824      	adds	r4, r4, r0
		hsync = 4;
10005ef0:	2704      	movs	r7, #4
		htot -= 4 - hsync;
10005ef2:	3c04      	subs	r4, #4
		hsync = 4;
10005ef4:	9304      	str	r3, [sp, #16]
10005ef6:	e6b7      	b.n	10005c68 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2b0>
	u8 prog = LAYERMODE_BASE;
10005ef8:	2100      	movs	r1, #0
10005efa:	4b2a      	ldr	r3, [pc, #168]	; (10005fa4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5ec>)
10005efc:	e56f      	b.n	100059de <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x26>
10005efe:	0019      	movs	r1, r3
	if (v->inter) // interlaced
10005f00:	2800      	cmp	r0, #0
10005f02:	d000      	beq.n	10005f06 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x54e>
10005f04:	e70f      	b.n	10005d26 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x36e>
10005f06:	e730      	b.n	10005d6a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3b2>
	if (cfg->dbly) h &= ~1; // must be even number if double lines
10005f08:	000a      	movs	r2, r1
	int vact2 = 0;
10005f0a:	2300      	movs	r3, #0
	if (cfg->dbly) h /= 2; // return double lines to single lines
10005f0c:	0849      	lsrs	r1, r1, #1
10005f0e:	e72e      	b.n	10005d6e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3b6>
			vact1 = (h+1)/2; // if even lines, even frame will have more lines
10005f10:	1c4a      	adds	r2, r1, #1
			vact2 = h/2;
10005f12:	104b      	asrs	r3, r1, #1
10005f14:	001e      	movs	r6, r3
			vact1 = (h+1)/2; // if even lines, even frame will have more lines
10005f16:	1052      	asrs	r2, r2, #1
			vact2 = h/2;
10005f18:	e70f      	b.n	10005d3a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x382>
10005f1a:	0019      	movs	r1, r3
	if (cfg->dbly) h &= ~1; // must be even number if double lines
10005f1c:	2301      	movs	r3, #1
10005f1e:	4399      	bics	r1, r3
	if (v->inter) // interlaced
10005f20:	2800      	cmp	r0, #0
10005f22:	d000      	beq.n	10005f26 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x56e>
10005f24:	e6ff      	b.n	10005d26 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x36e>
10005f26:	e7ef      	b.n	10005f08 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x550>
		htot--;
10005f28:	3d01      	subs	r5, #1
		hfront++;
10005f2a:	3101      	adds	r1, #1
10005f2c:	e6e2      	b.n	10005cf4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x33c>
			freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
10005f2e:	19f6      	adds	r6, r6, r7
10005f30:	0170      	lsls	r0, r6, #5
10005f32:	1b80      	subs	r0, r0, r6
10005f34:	0080      	lsls	r0, r0, #2
10005f36:	1980      	adds	r0, r0, r6
10005f38:	00c0      	lsls	r0, r0, #3
10005f3a:	f7fa fc77 	bl	1000082c <__wrap___aeabi_i2f>
10005f3e:	4641      	mov	r1, r8
10005f40:	f7fa fc65 	bl	1000080e <__wrap___aeabi_fdiv>
10005f44:	21fc      	movs	r1, #252	; 0xfc
10005f46:	0589      	lsls	r1, r1, #22
10005f48:	f7fa fc5e 	bl	10000808 <__wrap___aeabi_fadd>
10005f4c:	f7fa fc90 	bl	10000870 <__wrap___aeabi_f2iz>
10005f50:	30c8      	adds	r0, #200	; 0xc8
		if (freq2 >= freq) freq = freq2;
10005f52:	4285      	cmp	r5, r0
10005f54:	d900      	bls.n	10005f58 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5a0>
10005f56:	e5d6      	b.n	10005b06 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x14e>
10005f58:	e5d3      	b.n	10005b02 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x14a>
		int freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
10005f5a:	0006      	movs	r6, r0
10005f5c:	e5bc      	b.n	10005ad8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x120>
10005f5e:	2102      	movs	r1, #2
10005f60:	220d      	movs	r2, #13
		hback = 13;
10005f62:	230d      	movs	r3, #13
10005f64:	e6bb      	b.n	10005cde <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x326>
		vmode->vfirst1 = vmode->vsync1 + vmode->vback1 + 1;
10005f66:	9b04      	ldr	r3, [sp, #16]
		vmode->vfirst2 = 0;
10005f68:	2200      	movs	r2, #0
		vmode->vfirst1 = vmode->vsync1 + vmode->vback1 + 1;
10005f6a:	3301      	adds	r3, #1
10005f6c:	18fb      	adds	r3, r7, r3
10005f6e:	b29b      	uxth	r3, r3
		vmode->vfirst2 = 0;
10005f70:	e7a9      	b.n	10005ec6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x50e>
	vmode->vfront2 = v->vfront2 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 2
10005f72:	1e59      	subs	r1, r3, #1
10005f74:	0fcb      	lsrs	r3, r1, #31
10005f76:	185b      	adds	r3, r3, r1
10005f78:	105b      	asrs	r3, r3, #1
10005f7a:	b29b      	uxth	r3, r3
10005f7c:	e746      	b.n	10005e0c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x454>
	vmode->vfront1 = v->vfront1 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 1
10005f7e:	1e54      	subs	r4, r2, #1
10005f80:	0fe2      	lsrs	r2, r4, #31
10005f82:	1912      	adds	r2, r2, r4
10005f84:	1052      	asrs	r2, r2, #1
10005f86:	b292      	uxth	r2, r2
10005f88:	e715      	b.n	10005db6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3fe>
	hback += (d < 0) ? (d-1)/2 : (d+1)/2;
10005f8a:	3a01      	subs	r2, #1
10005f8c:	0fd3      	lsrs	r3, r2, #31
10005f8e:	189b      	adds	r3, r3, r2
10005f90:	105b      	asrs	r3, r3, #1
10005f92:	e69a      	b.n	10005cca <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x312>
	while (cpp > maxcpp)
10005f94:	23fe      	movs	r3, #254	; 0xfe
10005f96:	059b      	lsls	r3, r3, #22
10005f98:	2401      	movs	r4, #1
10005f9a:	9308      	str	r3, [sp, #32]
10005f9c:	1c1e      	adds	r6, r3, #0
10005f9e:	e605      	b.n	10005bac <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x1f4>
10005fa0:	447a0000 	.word	0x447a0000
10005fa4:	101acc70 	.word	0x101acc70

10005fa8 <_Z12FindSysClockmPmS_PtPhS1_>:
//  outfbdiv ... output fbdiv (16..320)
//  outpd1 ... output postdiv1 (1..7)
//  outpd2 ... output postdiv2 (1..7)
// Returns true if precise frequency has been found, or near frequency used otherwise.
bool FindSysClock(u32 reqkhz, u32* outkhz, u32* outvco, u16* outfbdiv, u8* outpd1, u8* outpd2)
{
10005fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
10005faa:	46de      	mov	lr, fp
10005fac:	464e      	mov	r6, r9
10005fae:	4657      	mov	r7, sl
10005fb0:	4645      	mov	r5, r8
10005fb2:	b5e0      	push	{r5, r6, r7, lr}
10005fb4:	b087      	sub	sp, #28
10005fb6:	9000      	str	r0, [sp, #0]
	// get reference frequency in kHz (should be 12 MHz)
	u32 input = clock_get_hz(clk_ref)/1000;
10005fb8:	2004      	movs	r0, #4
{
10005fba:	468a      	mov	sl, r1
10005fbc:	4691      	mov	r9, r2
10005fbe:	9304      	str	r3, [sp, #16]
	u32 input = clock_get_hz(clk_ref)/1000;
10005fc0:	f7fa ff88 	bl	10000ed4 <clock_get_hz>
10005fc4:	21fa      	movs	r1, #250	; 0xfa
10005fc6:	0089      	lsls	r1, r1, #2
10005fc8:	f7fa f9a8 	bl	1000031c <__wrap___aeabi_uidiv>
	*outkhz = 0;
10005fcc:	2300      	movs	r3, #0
10005fce:	4651      	mov	r1, sl
10005fd0:	4684      	mov	ip, r0
10005fd2:	4a8e      	ldr	r2, [pc, #568]	; (1000620c <_Z12FindSysClockmPmS_PtPhS1_+0x264>)
10005fd4:	600b      	str	r3, [r1, #0]
10005fd6:	0083      	lsls	r3, r0, #2
10005fd8:	4463      	add	r3, ip
10005fda:	4694      	mov	ip, r2
10005fdc:	019b      	lsls	r3, r3, #6
10005fde:	4463      	add	r3, ip
10005fe0:	9302      	str	r3, [sp, #8]
						*outpd2 = pd2;
10005fe2:	464b      	mov	r3, r9
	*outkhz = 0;
10005fe4:	25a0      	movs	r5, #160	; 0xa0
						*outpd2 = pd2;
10005fe6:	46d1      	mov	r9, sl
10005fe8:	469a      	mov	sl, r3
	*outkhz = 0;
10005fea:	4e89      	ldr	r6, [pc, #548]	; (10006210 <_Z12FindSysClockmPmS_PtPhS1_+0x268>)
	u32 input = clock_get_hz(clk_ref)/1000;
10005fec:	9005      	str	r0, [sp, #20]
	*outkhz = 0;
10005fee:	006d      	lsls	r5, r5, #1
		vco = fbdiv * input;
10005ff0:	4a88      	ldr	r2, [pc, #544]	; (10006214 <_Z12FindSysClockmPmS_PtPhS1_+0x26c>)
10005ff2:	9b02      	ldr	r3, [sp, #8]
10005ff4:	4694      	mov	ip, r2
10005ff6:	001c      	movs	r4, r3
		if ((vco >= vcomin) && (vco <= vcomax))
10005ff8:	4a87      	ldr	r2, [pc, #540]	; (10006218 <_Z12FindSysClockmPmS_PtPhS1_+0x270>)
10005ffa:	4464      	add	r4, ip
10005ffc:	4293      	cmp	r3, r2
10005ffe:	d900      	bls.n	10006002 <_Z12FindSysClockmPmS_PtPhS1_+0x5a>
10006000:	e0dd      	b.n	100061be <_Z12FindSysClockmPmS_PtPhS1_+0x216>
10006002:	2306      	movs	r3, #6
10006004:	9503      	str	r5, [sp, #12]
10006006:	4698      	mov	r8, r3
10006008:	e0b4      	b.n	10006174 <_Z12FindSysClockmPmS_PtPhS1_+0x1cc>
					khz = vco / (pd1 * pd2);
1000600a:	4641      	mov	r1, r8
1000600c:	0020      	movs	r0, r4
1000600e:	4369      	muls	r1, r5
10006010:	f7fa f984 	bl	1000031c <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10006014:	9b00      	ldr	r3, [sp, #0]
10006016:	1ac3      	subs	r3, r0, r3
10006018:	17da      	asrs	r2, r3, #31
1000601a:	189b      	adds	r3, r3, r2
1000601c:	4053      	eors	r3, r2
					if (margin < margin_best)
1000601e:	42b3      	cmp	r3, r6
10006020:	d20c      	bcs.n	1000603c <_Z12FindSysClockmPmS_PtPhS1_+0x94>
						*outkhz = khz;
10006022:	464a      	mov	r2, r9
10006024:	6010      	str	r0, [r2, #0]
						*outvco = vco;
10006026:	4652      	mov	r2, sl
						*outpd2 = pd2;
10006028:	001e      	movs	r6, r3
						*outvco = vco;
1000602a:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
1000602c:	9903      	ldr	r1, [sp, #12]
1000602e:	9a04      	ldr	r2, [sp, #16]
10006030:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
10006032:	9a10      	ldr	r2, [sp, #64]	; 0x40
10006034:	9901      	ldr	r1, [sp, #4]
10006036:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
10006038:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000603a:	7017      	strb	r7, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
1000603c:	1e7b      	subs	r3, r7, #1
1000603e:	b2db      	uxtb	r3, r3
10006040:	469b      	mov	fp, r3
10006042:	2b00      	cmp	r3, #0
10006044:	d100      	bne.n	10006048 <_Z12FindSysClockmPmS_PtPhS1_+0xa0>
10006046:	e091      	b.n	1000616c <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
10006048:	0019      	movs	r1, r3
1000604a:	0020      	movs	r0, r4
1000604c:	4369      	muls	r1, r5
1000604e:	f7fa f965 	bl	1000031c <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10006052:	9b00      	ldr	r3, [sp, #0]
10006054:	1ac3      	subs	r3, r0, r3
10006056:	17da      	asrs	r2, r3, #31
10006058:	189b      	adds	r3, r3, r2
1000605a:	4053      	eors	r3, r2
					if (margin < margin_best)
1000605c:	42b3      	cmp	r3, r6
1000605e:	d20d      	bcs.n	1000607c <_Z12FindSysClockmPmS_PtPhS1_+0xd4>
						*outkhz = khz;
10006060:	464a      	mov	r2, r9
10006062:	6010      	str	r0, [r2, #0]
						*outvco = vco;
10006064:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
10006066:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
10006068:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
1000606a:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
1000606c:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
1000606e:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
10006070:	9a10      	ldr	r2, [sp, #64]	; 0x40
10006072:	9901      	ldr	r1, [sp, #4]
10006074:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
10006076:	4659      	mov	r1, fp
10006078:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000607a:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
1000607c:	1ebb      	subs	r3, r7, #2
1000607e:	b2db      	uxtb	r3, r3
10006080:	469b      	mov	fp, r3
10006082:	2b00      	cmp	r3, #0
10006084:	d072      	beq.n	1000616c <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
10006086:	0019      	movs	r1, r3
10006088:	0020      	movs	r0, r4
1000608a:	4369      	muls	r1, r5
1000608c:	f7fa f946 	bl	1000031c <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10006090:	9b00      	ldr	r3, [sp, #0]
10006092:	1ac3      	subs	r3, r0, r3
10006094:	17da      	asrs	r2, r3, #31
10006096:	189b      	adds	r3, r3, r2
10006098:	4053      	eors	r3, r2
					if (margin < margin_best)
1000609a:	429e      	cmp	r6, r3
1000609c:	d90d      	bls.n	100060ba <_Z12FindSysClockmPmS_PtPhS1_+0x112>
						*outkhz = khz;
1000609e:	464a      	mov	r2, r9
100060a0:	6010      	str	r0, [r2, #0]
						*outvco = vco;
100060a2:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
100060a4:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
100060a6:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
100060a8:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
100060aa:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
100060ac:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
100060ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
100060b0:	9901      	ldr	r1, [sp, #4]
100060b2:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
100060b4:	4659      	mov	r1, fp
100060b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
100060b8:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
100060ba:	1efb      	subs	r3, r7, #3
100060bc:	b2db      	uxtb	r3, r3
100060be:	469b      	mov	fp, r3
100060c0:	2b00      	cmp	r3, #0
100060c2:	d053      	beq.n	1000616c <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
100060c4:	0019      	movs	r1, r3
100060c6:	0020      	movs	r0, r4
100060c8:	4369      	muls	r1, r5
100060ca:	f7fa f927 	bl	1000031c <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
100060ce:	9b00      	ldr	r3, [sp, #0]
100060d0:	1ac3      	subs	r3, r0, r3
100060d2:	17da      	asrs	r2, r3, #31
100060d4:	189b      	adds	r3, r3, r2
100060d6:	4053      	eors	r3, r2
					if (margin < margin_best)
100060d8:	429e      	cmp	r6, r3
100060da:	d90d      	bls.n	100060f8 <_Z12FindSysClockmPmS_PtPhS1_+0x150>
						*outkhz = khz;
100060dc:	464a      	mov	r2, r9
100060de:	6010      	str	r0, [r2, #0]
						*outvco = vco;
100060e0:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
100060e2:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
100060e4:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
100060e6:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
100060e8:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
100060ea:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
100060ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
100060ee:	9901      	ldr	r1, [sp, #4]
100060f0:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
100060f2:	4659      	mov	r1, fp
100060f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
100060f6:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
100060f8:	1f3b      	subs	r3, r7, #4
100060fa:	b2db      	uxtb	r3, r3
100060fc:	469b      	mov	fp, r3
100060fe:	2b00      	cmp	r3, #0
10006100:	d034      	beq.n	1000616c <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
10006102:	0019      	movs	r1, r3
10006104:	0020      	movs	r0, r4
10006106:	4369      	muls	r1, r5
10006108:	f7fa f908 	bl	1000031c <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
1000610c:	9b00      	ldr	r3, [sp, #0]
1000610e:	1ac3      	subs	r3, r0, r3
10006110:	17da      	asrs	r2, r3, #31
10006112:	189b      	adds	r3, r3, r2
10006114:	4053      	eors	r3, r2
					if (margin < margin_best)
10006116:	429e      	cmp	r6, r3
10006118:	d90d      	bls.n	10006136 <_Z12FindSysClockmPmS_PtPhS1_+0x18e>
						*outkhz = khz;
1000611a:	464a      	mov	r2, r9
1000611c:	6010      	str	r0, [r2, #0]
						*outvco = vco;
1000611e:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
10006120:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
10006122:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
10006124:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
10006126:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
10006128:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
1000612a:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000612c:	9901      	ldr	r1, [sp, #4]
1000612e:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
10006130:	4659      	mov	r1, fp
10006132:	9a11      	ldr	r2, [sp, #68]	; 0x44
10006134:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
10006136:	2f05      	cmp	r7, #5
10006138:	d018      	beq.n	1000616c <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
1000613a:	0029      	movs	r1, r5
1000613c:	0020      	movs	r0, r4
1000613e:	f7fa f8ed 	bl	1000031c <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10006142:	9b00      	ldr	r3, [sp, #0]
10006144:	1ac3      	subs	r3, r0, r3
10006146:	17da      	asrs	r2, r3, #31
10006148:	189b      	adds	r3, r3, r2
1000614a:	4053      	eors	r3, r2
					if (margin < margin_best)
1000614c:	429e      	cmp	r6, r3
1000614e:	d90d      	bls.n	1000616c <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
						*outkhz = khz;
10006150:	464a      	mov	r2, r9
10006152:	6010      	str	r0, [r2, #0]
						*outvco = vco;
10006154:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
10006156:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
10006158:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
1000615a:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
1000615c:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
1000615e:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
10006160:	9a10      	ldr	r2, [sp, #64]	; 0x40
10006162:	9901      	ldr	r1, [sp, #4]
10006164:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
10006166:	2101      	movs	r1, #1
10006168:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000616a:	7011      	strb	r1, [r2, #0]
			for (pd1 = 7; pd1 >= 1; pd1--)
1000616c:	2301      	movs	r3, #1
1000616e:	425b      	negs	r3, r3
10006170:	469c      	mov	ip, r3
10006172:	44e0      	add	r8, ip
				for (pd2 = pd1; pd2 >= 1; pd2--)
10006174:	4643      	mov	r3, r8
10006176:	b2df      	uxtb	r7, r3
10006178:	1c7b      	adds	r3, r7, #1
1000617a:	b2da      	uxtb	r2, r3
1000617c:	4643      	mov	r3, r8
1000617e:	1c5d      	adds	r5, r3, #1
					khz = vco / (pd1 * pd2);
10006180:	0029      	movs	r1, r5
10006182:	0020      	movs	r0, r4
10006184:	4369      	muls	r1, r5
10006186:	9201      	str	r2, [sp, #4]
10006188:	f7fa f8c8 	bl	1000031c <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
1000618c:	9b00      	ldr	r3, [sp, #0]
1000618e:	1ac3      	subs	r3, r0, r3
10006190:	17d9      	asrs	r1, r3, #31
10006192:	185b      	adds	r3, r3, r1
10006194:	404b      	eors	r3, r1
					if (margin < margin_best)
10006196:	429e      	cmp	r6, r3
10006198:	d90c      	bls.n	100061b4 <_Z12FindSysClockmPmS_PtPhS1_+0x20c>
						*outkhz = khz;
1000619a:	4649      	mov	r1, r9
1000619c:	6008      	str	r0, [r1, #0]
						*outvco = vco;
1000619e:	4651      	mov	r1, sl
						*outpd2 = pd2;
100061a0:	001e      	movs	r6, r3
						*outvco = vco;
100061a2:	600c      	str	r4, [r1, #0]
						*outfbdiv = fbdiv;
100061a4:	9803      	ldr	r0, [sp, #12]
100061a6:	9904      	ldr	r1, [sp, #16]
						*outpd1 = pd1;
100061a8:	9a01      	ldr	r2, [sp, #4]
						*outfbdiv = fbdiv;
100061aa:	8008      	strh	r0, [r1, #0]
						*outpd1 = pd1;
100061ac:	9910      	ldr	r1, [sp, #64]	; 0x40
100061ae:	700a      	strb	r2, [r1, #0]
						*outpd2 = pd2;
100061b0:	9911      	ldr	r1, [sp, #68]	; 0x44
100061b2:	700a      	strb	r2, [r1, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
100061b4:	4643      	mov	r3, r8
100061b6:	2b00      	cmp	r3, #0
100061b8:	d000      	beq.n	100061bc <_Z12FindSysClockmPmS_PtPhS1_+0x214>
100061ba:	e726      	b.n	1000600a <_Z12FindSysClockmPmS_PtPhS1_+0x62>
100061bc:	9d03      	ldr	r5, [sp, #12]
			if (fbdiv < 16) break;
100061be:	9b02      	ldr	r3, [sp, #8]
100061c0:	9a05      	ldr	r2, [sp, #20]
			fbdiv--;
100061c2:	3d01      	subs	r5, #1
			if (fbdiv < 16) break;
100061c4:	1a9b      	subs	r3, r3, r2
			fbdiv--;
100061c6:	b2ad      	uxth	r5, r5
			if (fbdiv < 16) break;
100061c8:	9302      	str	r3, [sp, #8]
100061ca:	2d0f      	cmp	r5, #15
100061cc:	d000      	beq.n	100061d0 <_Z12FindSysClockmPmS_PtPhS1_+0x228>
100061ce:	e70f      	b.n	10005ff0 <_Z12FindSysClockmPmS_PtPhS1_+0x48>
	return (*outkhz == reqkhz) && (*outvco == *outkhz * *outpd1 * *outpd2);
100061d0:	4653      	mov	r3, sl
100061d2:	46ca      	mov	sl, r9
100061d4:	4699      	mov	r9, r3
100061d6:	4653      	mov	r3, sl
100061d8:	9a00      	ldr	r2, [sp, #0]
100061da:	681b      	ldr	r3, [r3, #0]
100061dc:	2000      	movs	r0, #0
100061de:	429a      	cmp	r2, r3
100061e0:	d10d      	bne.n	100061fe <_Z12FindSysClockmPmS_PtPhS1_+0x256>
100061e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
100061e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
100061e6:	781b      	ldrb	r3, [r3, #0]
100061e8:	7810      	ldrb	r0, [r2, #0]
100061ea:	4358      	muls	r0, r3
100061ec:	9b00      	ldr	r3, [sp, #0]
100061ee:	4343      	muls	r3, r0
100061f0:	0018      	movs	r0, r3
100061f2:	464b      	mov	r3, r9
100061f4:	681b      	ldr	r3, [r3, #0]
100061f6:	1ac0      	subs	r0, r0, r3
100061f8:	4243      	negs	r3, r0
100061fa:	4158      	adcs	r0, r3
100061fc:	b2c0      	uxtb	r0, r0

	// find PLL setup
	return vcocalc(reqkhz, input, 400000, 1600000, false,  outkhz, outvco, outfbdiv, outpd1, outpd2);
}
100061fe:	b007      	add	sp, #28
10006200:	bcf0      	pop	{r4, r5, r6, r7}
10006202:	46bb      	mov	fp, r7
10006204:	46b2      	mov	sl, r6
10006206:	46a9      	mov	r9, r5
10006208:	46a0      	mov	r8, r4
1000620a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000620c:	fff9e580 	.word	0xfff9e580
10006210:	000186a0 	.word	0x000186a0
10006214:	00061a80 	.word	0x00061a80
10006218:	00124f80 	.word	0x00124f80

1000621c <_Z10PrintSetupPhiii>:
// use mono mode
Bool PrintMonoMode;

// setup print service (if bufwb < 2*bufw, use mono text)
void PrintSetup(u8* buf, int bufw, int bufh, int bufwb)
{
1000621c:	b510      	push	{r4, lr}
	PrintBuf = buf;
1000621e:	4c0c      	ldr	r4, [pc, #48]	; (10006250 <_Z10PrintSetupPhiii+0x34>)
10006220:	6020      	str	r0, [r4, #0]
	PrintBufW = bufw;
10006222:	480c      	ldr	r0, [pc, #48]	; (10006254 <_Z10PrintSetupPhiii+0x38>)
10006224:	6001      	str	r1, [r0, #0]
	PrintBufH = bufh;
10006226:	480c      	ldr	r0, [pc, #48]	; (10006258 <_Z10PrintSetupPhiii+0x3c>)
	PrintBufWB = bufwb;
	PrintX = 0;
	PrintY = 0;
	PrintMonoMode = (bufwb < 2*bufw);
10006228:	0049      	lsls	r1, r1, #1
	PrintBufH = bufh;
1000622a:	6002      	str	r2, [r0, #0]
	PrintBufWB = bufwb;
1000622c:	4a0b      	ldr	r2, [pc, #44]	; (1000625c <_Z10PrintSetupPhiii+0x40>)
	PrintX = 0;
1000622e:	480c      	ldr	r0, [pc, #48]	; (10006260 <_Z10PrintSetupPhiii+0x44>)
	PrintBufWB = bufwb;
10006230:	6013      	str	r3, [r2, #0]
	PrintX = 0;
10006232:	2200      	movs	r2, #0
10006234:	6002      	str	r2, [r0, #0]
	PrintY = 0;
10006236:	480b      	ldr	r0, [pc, #44]	; (10006264 <_Z10PrintSetupPhiii+0x48>)
10006238:	6002      	str	r2, [r0, #0]
	PrintMonoMode = (bufwb < 2*bufw);
1000623a:	2201      	movs	r2, #1
1000623c:	4299      	cmp	r1, r3
1000623e:	dc00      	bgt.n	10006242 <_Z10PrintSetupPhiii+0x26>
10006240:	2200      	movs	r2, #0
10006242:	4b09      	ldr	r3, [pc, #36]	; (10006268 <_Z10PrintSetupPhiii+0x4c>)
10006244:	701a      	strb	r2, [r3, #0]
	PrintCol = PC_COLOR(PC_BLACK, PC_WHITE);
10006246:	220f      	movs	r2, #15
10006248:	4b08      	ldr	r3, [pc, #32]	; (1000626c <_Z10PrintSetupPhiii+0x50>)
1000624a:	701a      	strb	r2, [r3, #0]
}
1000624c:	bd10      	pop	{r4, pc}
1000624e:	46c0      	nop			; (mov r8, r8)
10006250:	200218c0 	.word	0x200218c0
10006254:	200218c8 	.word	0x200218c8
10006258:	200218c4 	.word	0x200218c4
1000625c:	200218cc 	.word	0x200218cc
10006260:	200218d0 	.word	0x200218d0
10006264:	200218d4 	.word	0x200218d4
10006268:	20023b83 	.word	0x20023b83
1000626c:	20023b82 	.word	0x20023b82

10006270 <_Z10PrintClearv>:

// clear text screen, using current color
void PrintClear()
{
10006270:	b5f0      	push	{r4, r5, r6, r7, lr}
10006272:	464f      	mov	r7, r9
10006274:	46d6      	mov	lr, sl
10006276:	4646      	mov	r6, r8
10006278:	b5c0      	push	{r6, r7, lr}
	int i, y;
	u8* d;
	u8 col = PrintCol;
1000627a:	4b1b      	ldr	r3, [pc, #108]	; (100062e8 <_Z10PrintClearv+0x78>)
	for (y = 0; y < PrintBufH; y++)
1000627c:	4f1b      	ldr	r7, [pc, #108]	; (100062ec <_Z10PrintClearv+0x7c>)
	u8 col = PrintCol;
1000627e:	781d      	ldrb	r5, [r3, #0]
	for (y = 0; y < PrintBufH; y++)
10006280:	683b      	ldr	r3, [r7, #0]
10006282:	2b00      	cmp	r3, #0
10006284:	dd25      	ble.n	100062d2 <_Z10PrintClearv+0x62>
10006286:	4b1a      	ldr	r3, [pc, #104]	; (100062f0 <_Z10PrintClearv+0x80>)
10006288:	2600      	movs	r6, #0
1000628a:	4699      	mov	r9, r3
1000628c:	4b19      	ldr	r3, [pc, #100]	; (100062f4 <_Z10PrintClearv+0x84>)
	{
		d = &PrintBuf[y*PrintBufWB];
		for (i = PrintBufW; i > 0; i--)
		{
			*d++ = ' ';
1000628e:	2020      	movs	r0, #32
10006290:	4698      	mov	r8, r3
10006292:	4b19      	ldr	r3, [pc, #100]	; (100062f8 <_Z10PrintClearv+0x88>)
10006294:	4c19      	ldr	r4, [pc, #100]	; (100062fc <_Z10PrintClearv+0x8c>)
10006296:	469c      	mov	ip, r3
		d = &PrintBuf[y*PrintBufWB];
10006298:	464a      	mov	r2, r9
1000629a:	4643      	mov	r3, r8
1000629c:	6812      	ldr	r2, [r2, #0]
1000629e:	681b      	ldr	r3, [r3, #0]
100062a0:	4692      	mov	sl, r2
		for (i = PrintBufW; i > 0; i--)
100062a2:	4662      	mov	r2, ip
		d = &PrintBuf[y*PrintBufWB];
100062a4:	4373      	muls	r3, r6
		for (i = PrintBufW; i > 0; i--)
100062a6:	6812      	ldr	r2, [r2, #0]
		d = &PrintBuf[y*PrintBufWB];
100062a8:	4453      	add	r3, sl
		for (i = PrintBufW; i > 0; i--)
100062aa:	2a00      	cmp	r2, #0
100062ac:	dc04      	bgt.n	100062b8 <_Z10PrintClearv+0x48>
100062ae:	e010      	b.n	100062d2 <_Z10PrintClearv+0x62>
100062b0:	3a01      	subs	r2, #1
			*d++ = ' ';
100062b2:	3301      	adds	r3, #1
		for (i = PrintBufW; i > 0; i--)
100062b4:	2a00      	cmp	r2, #0
100062b6:	d008      	beq.n	100062ca <_Z10PrintClearv+0x5a>
			*d++ = ' ';
100062b8:	7018      	strb	r0, [r3, #0]
			if (!PrintMonoMode) *d++ = col;
100062ba:	7821      	ldrb	r1, [r4, #0]
100062bc:	2900      	cmp	r1, #0
100062be:	d1f7      	bne.n	100062b0 <_Z10PrintClearv+0x40>
		for (i = PrintBufW; i > 0; i--)
100062c0:	3a01      	subs	r2, #1
			if (!PrintMonoMode) *d++ = col;
100062c2:	705d      	strb	r5, [r3, #1]
100062c4:	3302      	adds	r3, #2
		for (i = PrintBufW; i > 0; i--)
100062c6:	2a00      	cmp	r2, #0
100062c8:	d1f6      	bne.n	100062b8 <_Z10PrintClearv+0x48>
	for (y = 0; y < PrintBufH; y++)
100062ca:	683b      	ldr	r3, [r7, #0]
100062cc:	3601      	adds	r6, #1
100062ce:	42b3      	cmp	r3, r6
100062d0:	dce2      	bgt.n	10006298 <_Z10PrintClearv+0x28>
		}
	}
	PrintX = 0;
100062d2:	2300      	movs	r3, #0
100062d4:	4a0a      	ldr	r2, [pc, #40]	; (10006300 <_Z10PrintClearv+0x90>)
100062d6:	6013      	str	r3, [r2, #0]
	PrintY = 0;
100062d8:	4a0a      	ldr	r2, [pc, #40]	; (10006304 <_Z10PrintClearv+0x94>)
100062da:	6013      	str	r3, [r2, #0]
}
100062dc:	bce0      	pop	{r5, r6, r7}
100062de:	46ba      	mov	sl, r7
100062e0:	46b1      	mov	r9, r6
100062e2:	46a8      	mov	r8, r5
100062e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100062e6:	46c0      	nop			; (mov r8, r8)
100062e8:	20023b82 	.word	0x20023b82
100062ec:	200218c4 	.word	0x200218c4
100062f0:	200218c0 	.word	0x200218c0
100062f4:	200218cc 	.word	0x200218cc
100062f8:	200218c8 	.word	0x200218c8
100062fc:	20023b83 	.word	0x20023b83
10006300:	200218d0 	.word	0x200218d0
10006304:	200218d4 	.word	0x200218d4

10006308 <_Z11PrintSetPosii>:
}

// set absolute print position
void PrintSetPos(int x, int y)
{
	PrintX = x;
10006308:	4b02      	ldr	r3, [pc, #8]	; (10006314 <_Z11PrintSetPosii+0xc>)
1000630a:	6018      	str	r0, [r3, #0]
	PrintY = y;
1000630c:	4b02      	ldr	r3, [pc, #8]	; (10006318 <_Z11PrintSetPosii+0x10>)
1000630e:	6019      	str	r1, [r3, #0]
}
10006310:	4770      	bx	lr
10006312:	46c0      	nop			; (mov r8, r8)
10006314:	200218d0 	.word	0x200218d0
10006318:	200218d4 	.word	0x200218d4

1000631c <_Z11PrintSetColh>:
}

// set print color (2x4 bits of colors, use PC_COLOR macro)
void PrintSetCol(u8 col)
{
	PrintCol = col;
1000631c:	4b01      	ldr	r3, [pc, #4]	; (10006324 <_Z11PrintSetColh+0x8>)
1000631e:	7018      	strb	r0, [r3, #0]
}
10006320:	4770      	bx	lr
10006322:	46c0      	nop			; (mov r8, r8)
10006324:	20023b82 	.word	0x20023b82

10006328 <_Z9PrintTextPKc>:
	for (; num > 0; num--) PrintSpc();
}

// print text
void PrintText(const char* text)
{
10006328:	b5f0      	push	{r4, r5, r6, r7, lr}
1000632a:	46de      	mov	lr, fp
1000632c:	4657      	mov	r7, sl
1000632e:	464e      	mov	r6, r9
10006330:	4645      	mov	r5, r8
10006332:	b5e0      	push	{r5, r6, r7, lr}
	char ch;
	while ((ch = *text++) != 0)
10006334:	7803      	ldrb	r3, [r0, #0]
10006336:	1c42      	adds	r2, r0, #1
10006338:	2b00      	cmp	r3, #0
1000633a:	d020      	beq.n	1000637e <_Z9PrintTextPKc+0x56>
		if (PrintMonoMode)
1000633c:	4e2e      	ldr	r6, [pc, #184]	; (100063f8 <_Z9PrintTextPKc+0xd0>)
1000633e:	492f      	ldr	r1, [pc, #188]	; (100063fc <_Z9PrintTextPKc+0xd4>)
10006340:	46b1      	mov	r9, r6
			u8* d = &PrintBuf[PrintX*2 + PrintY*PrintBufWB];
10006342:	4e2f      	ldr	r6, [pc, #188]	; (10006400 <_Z9PrintTextPKc+0xd8>)
	if (((u32)PrintX < (u32)PrintBufW) && ((u32)PrintY < (u32)PrintBufH))
10006344:	482f      	ldr	r0, [pc, #188]	; (10006404 <_Z9PrintTextPKc+0xdc>)
			u8* d = &PrintBuf[PrintX*2 + PrintY*PrintBufWB];
10006346:	46b0      	mov	r8, r6
			*d = PrintCol;
10006348:	4e2f      	ldr	r6, [pc, #188]	; (10006408 <_Z9PrintTextPKc+0xe0>)
	if (((u32)PrintX < (u32)PrintBufW) && ((u32)PrintY < (u32)PrintBufH))
1000634a:	4d30      	ldr	r5, [pc, #192]	; (1000640c <_Z9PrintTextPKc+0xe4>)
			*d = PrintCol;
1000634c:	46b4      	mov	ip, r6
1000634e:	e00d      	b.n	1000636c <_Z9PrintTextPKc+0x44>
	else if (ch == CHAR_LF)
10006350:	2b0a      	cmp	r3, #10
10006352:	d01a      	beq.n	1000638a <_Z9PrintTextPKc+0x62>
	else if (ch == CHAR_TAB)
10006354:	2b09      	cmp	r3, #9
10006356:	d11f      	bne.n	10006398 <_Z9PrintTextPKc+0x70>
		PrintX = (PrintX + 7) & ~7;
10006358:	2607      	movs	r6, #7
1000635a:	680b      	ldr	r3, [r1, #0]
1000635c:	3307      	adds	r3, #7
1000635e:	43b3      	bics	r3, r6
10006360:	600b      	str	r3, [r1, #0]
	while ((ch = *text++) != 0)
10006362:	3201      	adds	r2, #1
10006364:	1e53      	subs	r3, r2, #1
10006366:	781b      	ldrb	r3, [r3, #0]
10006368:	2b00      	cmp	r3, #0
1000636a:	d008      	beq.n	1000637e <_Z9PrintTextPKc+0x56>
	if (ch == CHAR_CR)
1000636c:	2b0d      	cmp	r3, #13
1000636e:	d1ef      	bne.n	10006350 <_Z9PrintTextPKc+0x28>
		PrintX = 0;
10006370:	2300      	movs	r3, #0
	while ((ch = *text++) != 0)
10006372:	3201      	adds	r2, #1
		PrintX = 0;
10006374:	600b      	str	r3, [r1, #0]
	while ((ch = *text++) != 0)
10006376:	1e53      	subs	r3, r2, #1
10006378:	781b      	ldrb	r3, [r3, #0]
1000637a:	2b00      	cmp	r3, #0
1000637c:	d1f6      	bne.n	1000636c <_Z9PrintTextPKc+0x44>
	{
		PrintChar(ch);
	}
}
1000637e:	bcf0      	pop	{r4, r5, r6, r7}
10006380:	46bb      	mov	fp, r7
10006382:	46b2      	mov	sl, r6
10006384:	46a9      	mov	r9, r5
10006386:	46a0      	mov	r8, r4
10006388:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PrintX = 0;
1000638a:	2300      	movs	r3, #0
		PrintY++;
1000638c:	4e1f      	ldr	r6, [pc, #124]	; (1000640c <_Z9PrintTextPKc+0xe4>)
		PrintX = 0;
1000638e:	600b      	str	r3, [r1, #0]
		PrintY++;
10006390:	6833      	ldr	r3, [r6, #0]
10006392:	3301      	adds	r3, #1
10006394:	6033      	str	r3, [r6, #0]
10006396:	e7e4      	b.n	10006362 <_Z9PrintTextPKc+0x3a>
	if (((u32)PrintX < (u32)PrintBufW) && ((u32)PrintY < (u32)PrintBufH))
10006398:	680e      	ldr	r6, [r1, #0]
1000639a:	6807      	ldr	r7, [r0, #0]
1000639c:	42be      	cmp	r6, r7
1000639e:	d215      	bcs.n	100063cc <_Z9PrintTextPKc+0xa4>
100063a0:	682f      	ldr	r7, [r5, #0]
100063a2:	4c1b      	ldr	r4, [pc, #108]	; (10006410 <_Z9PrintTextPKc+0xe8>)
100063a4:	46ba      	mov	sl, r7
100063a6:	6827      	ldr	r7, [r4, #0]
100063a8:	45ba      	cmp	sl, r7
100063aa:	d20f      	bcs.n	100063cc <_Z9PrintTextPKc+0xa4>
		if (PrintMonoMode)
100063ac:	464f      	mov	r7, r9
100063ae:	783f      	ldrb	r7, [r7, #0]
100063b0:	2f00      	cmp	r7, #0
100063b2:	d00e      	beq.n	100063d2 <_Z9PrintTextPKc+0xaa>
			u8* d = &PrintBuf[PrintX + PrintY*PrintBufWB];
100063b4:	4f12      	ldr	r7, [pc, #72]	; (10006400 <_Z9PrintTextPKc+0xd8>)
100063b6:	683f      	ldr	r7, [r7, #0]
100063b8:	46bb      	mov	fp, r7
100063ba:	4657      	mov	r7, sl
100063bc:	465c      	mov	r4, fp
100063be:	4367      	muls	r7, r4
			*d = ch;
100063c0:	4c14      	ldr	r4, [pc, #80]	; (10006414 <_Z9PrintTextPKc+0xec>)
100063c2:	6824      	ldr	r4, [r4, #0]
100063c4:	46a3      	mov	fp, r4
100063c6:	445e      	add	r6, fp
100063c8:	55f3      	strb	r3, [r6, r7]
	PrintX++;
100063ca:	680e      	ldr	r6, [r1, #0]
100063cc:	1c73      	adds	r3, r6, #1
100063ce:	600b      	str	r3, [r1, #0]
}
100063d0:	e7c7      	b.n	10006362 <_Z9PrintTextPKc+0x3a>
			u8* d = &PrintBuf[PrintX*2 + PrintY*PrintBufWB];
100063d2:	4644      	mov	r4, r8
100063d4:	4657      	mov	r7, sl
100063d6:	6824      	ldr	r4, [r4, #0]
100063d8:	0076      	lsls	r6, r6, #1
100063da:	4367      	muls	r7, r4
100063dc:	46ba      	mov	sl, r7
100063de:	4c0d      	ldr	r4, [pc, #52]	; (10006414 <_Z9PrintTextPKc+0xec>)
100063e0:	4456      	add	r6, sl
100063e2:	6824      	ldr	r4, [r4, #0]
100063e4:	46a2      	mov	sl, r4
100063e6:	4456      	add	r6, sl
			*d++ = ch;
100063e8:	7033      	strb	r3, [r6, #0]
			*d = PrintCol;
100063ea:	4663      	mov	r3, ip
100063ec:	781b      	ldrb	r3, [r3, #0]
100063ee:	7073      	strb	r3, [r6, #1]
	PrintX++;
100063f0:	680e      	ldr	r6, [r1, #0]
100063f2:	1c73      	adds	r3, r6, #1
100063f4:	600b      	str	r3, [r1, #0]
100063f6:	e7b4      	b.n	10006362 <_Z9PrintTextPKc+0x3a>
100063f8:	20023b83 	.word	0x20023b83
100063fc:	200218d0 	.word	0x200218d0
10006400:	200218cc 	.word	0x200218cc
10006404:	200218c8 	.word	0x200218c8
10006408:	20023b82 	.word	0x20023b82
1000640c:	200218d4 	.word	0x200218d4
10006410:	200218c4 	.word	0x200218c4
10006414:	200218c0 	.word	0x200218c0

10006418 <calloc>:
10006418:	0003      	movs	r3, r0
1000641a:	b510      	push	{r4, lr}
1000641c:	000a      	movs	r2, r1
1000641e:	4903      	ldr	r1, [pc, #12]	; (1000642c <calloc+0x14>)
10006420:	6808      	ldr	r0, [r1, #0]
10006422:	0019      	movs	r1, r3
10006424:	f000 f804 	bl	10006430 <_calloc_r>
10006428:	bd10      	pop	{r4, pc}
1000642a:	46c0      	nop			; (mov r8, r8)
1000642c:	200027e8 	.word	0x200027e8

10006430 <_calloc_r>:
10006430:	b570      	push	{r4, r5, r6, lr}
10006432:	0c0b      	lsrs	r3, r1, #16
10006434:	2400      	movs	r4, #0
10006436:	0c15      	lsrs	r5, r2, #16
10006438:	2b00      	cmp	r3, #0
1000643a:	d128      	bne.n	1000648e <_calloc_r+0x5e>
1000643c:	2d00      	cmp	r5, #0
1000643e:	d137      	bne.n	100064b0 <_calloc_r+0x80>
10006440:	b28b      	uxth	r3, r1
10006442:	b291      	uxth	r1, r2
10006444:	4359      	muls	r1, r3
10006446:	f000 f851 	bl	100064ec <_malloc_r>
1000644a:	1e05      	subs	r5, r0, #0
1000644c:	d019      	beq.n	10006482 <_calloc_r+0x52>
1000644e:	0003      	movs	r3, r0
10006450:	3b08      	subs	r3, #8
10006452:	685a      	ldr	r2, [r3, #4]
10006454:	2303      	movs	r3, #3
10006456:	439a      	bics	r2, r3
10006458:	3a04      	subs	r2, #4
1000645a:	2a24      	cmp	r2, #36	; 0x24
1000645c:	d813      	bhi.n	10006486 <_calloc_r+0x56>
1000645e:	0003      	movs	r3, r0
10006460:	2a13      	cmp	r2, #19
10006462:	d90a      	bls.n	1000647a <_calloc_r+0x4a>
10006464:	6004      	str	r4, [r0, #0]
10006466:	6044      	str	r4, [r0, #4]
10006468:	3308      	adds	r3, #8
1000646a:	2a1b      	cmp	r2, #27
1000646c:	d905      	bls.n	1000647a <_calloc_r+0x4a>
1000646e:	6084      	str	r4, [r0, #8]
10006470:	60c4      	str	r4, [r0, #12]
10006472:	2a24      	cmp	r2, #36	; 0x24
10006474:	d025      	beq.n	100064c2 <_calloc_r+0x92>
10006476:	0003      	movs	r3, r0
10006478:	3310      	adds	r3, #16
1000647a:	2200      	movs	r2, #0
1000647c:	601a      	str	r2, [r3, #0]
1000647e:	605a      	str	r2, [r3, #4]
10006480:	609a      	str	r2, [r3, #8]
10006482:	0028      	movs	r0, r5
10006484:	bd70      	pop	{r4, r5, r6, pc}
10006486:	2100      	movs	r1, #0
10006488:	f7fa fa54 	bl	10000934 <__wrap_memset>
1000648c:	e7f9      	b.n	10006482 <_calloc_r+0x52>
1000648e:	2d00      	cmp	r5, #0
10006490:	d111      	bne.n	100064b6 <_calloc_r+0x86>
10006492:	1c15      	adds	r5, r2, #0
10006494:	b289      	uxth	r1, r1
10006496:	b292      	uxth	r2, r2
10006498:	434a      	muls	r2, r1
1000649a:	b2ad      	uxth	r5, r5
1000649c:	b29b      	uxth	r3, r3
1000649e:	436b      	muls	r3, r5
100064a0:	0c11      	lsrs	r1, r2, #16
100064a2:	185b      	adds	r3, r3, r1
100064a4:	0c19      	lsrs	r1, r3, #16
100064a6:	d106      	bne.n	100064b6 <_calloc_r+0x86>
100064a8:	0419      	lsls	r1, r3, #16
100064aa:	b292      	uxth	r2, r2
100064ac:	4311      	orrs	r1, r2
100064ae:	e7ca      	b.n	10006446 <_calloc_r+0x16>
100064b0:	1c2b      	adds	r3, r5, #0
100064b2:	1c0d      	adds	r5, r1, #0
100064b4:	e7ee      	b.n	10006494 <_calloc_r+0x64>
100064b6:	f000 f809 	bl	100064cc <__errno>
100064ba:	230c      	movs	r3, #12
100064bc:	2500      	movs	r5, #0
100064be:	6003      	str	r3, [r0, #0]
100064c0:	e7df      	b.n	10006482 <_calloc_r+0x52>
100064c2:	0003      	movs	r3, r0
100064c4:	6104      	str	r4, [r0, #16]
100064c6:	3318      	adds	r3, #24
100064c8:	6144      	str	r4, [r0, #20]
100064ca:	e7d6      	b.n	1000647a <_calloc_r+0x4a>

100064cc <__errno>:
100064cc:	4b01      	ldr	r3, [pc, #4]	; (100064d4 <__errno+0x8>)
100064ce:	6818      	ldr	r0, [r3, #0]
100064d0:	4770      	bx	lr
100064d2:	46c0      	nop			; (mov r8, r8)
100064d4:	200027e8 	.word	0x200027e8

100064d8 <malloc>:
100064d8:	b510      	push	{r4, lr}
100064da:	4b03      	ldr	r3, [pc, #12]	; (100064e8 <malloc+0x10>)
100064dc:	0001      	movs	r1, r0
100064de:	6818      	ldr	r0, [r3, #0]
100064e0:	f000 f804 	bl	100064ec <_malloc_r>
100064e4:	bd10      	pop	{r4, pc}
100064e6:	46c0      	nop			; (mov r8, r8)
100064e8:	200027e8 	.word	0x200027e8

100064ec <_malloc_r>:
100064ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100064ee:	464e      	mov	r6, r9
100064f0:	4645      	mov	r5, r8
100064f2:	46de      	mov	lr, fp
100064f4:	4657      	mov	r7, sl
100064f6:	b5e0      	push	{r5, r6, r7, lr}
100064f8:	000d      	movs	r5, r1
100064fa:	350b      	adds	r5, #11
100064fc:	0006      	movs	r6, r0
100064fe:	b083      	sub	sp, #12
10006500:	2d16      	cmp	r5, #22
10006502:	d822      	bhi.n	1000654a <_malloc_r+0x5e>
10006504:	2910      	cmp	r1, #16
10006506:	d900      	bls.n	1000650a <_malloc_r+0x1e>
10006508:	e0b2      	b.n	10006670 <_malloc_r+0x184>
1000650a:	f000 fab1 	bl	10006a70 <__malloc_lock>
1000650e:	2510      	movs	r5, #16
10006510:	2318      	movs	r3, #24
10006512:	2002      	movs	r0, #2
10006514:	4fcc      	ldr	r7, [pc, #816]	; (10006848 <_malloc_r+0x35c>)
10006516:	18fb      	adds	r3, r7, r3
10006518:	001a      	movs	r2, r3
1000651a:	685c      	ldr	r4, [r3, #4]
1000651c:	3a08      	subs	r2, #8
1000651e:	4294      	cmp	r4, r2
10006520:	d100      	bne.n	10006524 <_malloc_r+0x38>
10006522:	e0b5      	b.n	10006690 <_malloc_r+0x1a4>
10006524:	2303      	movs	r3, #3
10006526:	6862      	ldr	r2, [r4, #4]
10006528:	439a      	bics	r2, r3
1000652a:	0013      	movs	r3, r2
1000652c:	68e2      	ldr	r2, [r4, #12]
1000652e:	68a1      	ldr	r1, [r4, #8]
10006530:	60ca      	str	r2, [r1, #12]
10006532:	6091      	str	r1, [r2, #8]
10006534:	2201      	movs	r2, #1
10006536:	18e3      	adds	r3, r4, r3
10006538:	6859      	ldr	r1, [r3, #4]
1000653a:	0030      	movs	r0, r6
1000653c:	430a      	orrs	r2, r1
1000653e:	605a      	str	r2, [r3, #4]
10006540:	f000 fa9e 	bl	10006a80 <__malloc_unlock>
10006544:	0020      	movs	r0, r4
10006546:	3008      	adds	r0, #8
10006548:	e095      	b.n	10006676 <_malloc_r+0x18a>
1000654a:	2307      	movs	r3, #7
1000654c:	439d      	bics	r5, r3
1000654e:	d500      	bpl.n	10006552 <_malloc_r+0x66>
10006550:	e08e      	b.n	10006670 <_malloc_r+0x184>
10006552:	42a9      	cmp	r1, r5
10006554:	d900      	bls.n	10006558 <_malloc_r+0x6c>
10006556:	e08b      	b.n	10006670 <_malloc_r+0x184>
10006558:	f000 fa8a 	bl	10006a70 <__malloc_lock>
1000655c:	23fc      	movs	r3, #252	; 0xfc
1000655e:	005b      	lsls	r3, r3, #1
10006560:	429d      	cmp	r5, r3
10006562:	d200      	bcs.n	10006566 <_malloc_r+0x7a>
10006564:	e1a7      	b.n	100068b6 <_malloc_r+0x3ca>
10006566:	0a68      	lsrs	r0, r5, #9
10006568:	d100      	bne.n	1000656c <_malloc_r+0x80>
1000656a:	e08b      	b.n	10006684 <_malloc_r+0x198>
1000656c:	2804      	cmp	r0, #4
1000656e:	d900      	bls.n	10006572 <_malloc_r+0x86>
10006570:	e17a      	b.n	10006868 <_malloc_r+0x37c>
10006572:	2338      	movs	r3, #56	; 0x38
10006574:	4698      	mov	r8, r3
10006576:	09a8      	lsrs	r0, r5, #6
10006578:	4480      	add	r8, r0
1000657a:	3039      	adds	r0, #57	; 0x39
1000657c:	00c1      	lsls	r1, r0, #3
1000657e:	4fb2      	ldr	r7, [pc, #712]	; (10006848 <_malloc_r+0x35c>)
10006580:	1879      	adds	r1, r7, r1
10006582:	684c      	ldr	r4, [r1, #4]
10006584:	3908      	subs	r1, #8
10006586:	42a1      	cmp	r1, r4
10006588:	d00e      	beq.n	100065a8 <_malloc_r+0xbc>
1000658a:	2303      	movs	r3, #3
1000658c:	469c      	mov	ip, r3
1000658e:	e004      	b.n	1000659a <_malloc_r+0xae>
10006590:	2a00      	cmp	r2, #0
10006592:	dacb      	bge.n	1000652c <_malloc_r+0x40>
10006594:	68e4      	ldr	r4, [r4, #12]
10006596:	42a1      	cmp	r1, r4
10006598:	d006      	beq.n	100065a8 <_malloc_r+0xbc>
1000659a:	4662      	mov	r2, ip
1000659c:	6863      	ldr	r3, [r4, #4]
1000659e:	4393      	bics	r3, r2
100065a0:	1b5a      	subs	r2, r3, r5
100065a2:	2a0f      	cmp	r2, #15
100065a4:	ddf4      	ble.n	10006590 <_malloc_r+0xa4>
100065a6:	4640      	mov	r0, r8
100065a8:	003a      	movs	r2, r7
100065aa:	693c      	ldr	r4, [r7, #16]
100065ac:	3208      	adds	r2, #8
100065ae:	4294      	cmp	r4, r2
100065b0:	d100      	bne.n	100065b4 <_malloc_r+0xc8>
100065b2:	e078      	b.n	100066a6 <_malloc_r+0x1ba>
100065b4:	2303      	movs	r3, #3
100065b6:	6861      	ldr	r1, [r4, #4]
100065b8:	4399      	bics	r1, r3
100065ba:	4689      	mov	r9, r1
100065bc:	000b      	movs	r3, r1
100065be:	1b49      	subs	r1, r1, r5
100065c0:	290f      	cmp	r1, #15
100065c2:	dd00      	ble.n	100065c6 <_malloc_r+0xda>
100065c4:	e17b      	b.n	100068be <_malloc_r+0x3d2>
100065c6:	617a      	str	r2, [r7, #20]
100065c8:	613a      	str	r2, [r7, #16]
100065ca:	2900      	cmp	r1, #0
100065cc:	dab2      	bge.n	10006534 <_malloc_r+0x48>
100065ce:	2280      	movs	r2, #128	; 0x80
100065d0:	0092      	lsls	r2, r2, #2
100065d2:	4591      	cmp	r9, r2
100065d4:	d300      	bcc.n	100065d8 <_malloc_r+0xec>
100065d6:	e10f      	b.n	100067f8 <_malloc_r+0x30c>
100065d8:	0959      	lsrs	r1, r3, #5
100065da:	08da      	lsrs	r2, r3, #3
100065dc:	2301      	movs	r3, #1
100065de:	408b      	lsls	r3, r1
100065e0:	00d2      	lsls	r2, r2, #3
100065e2:	6879      	ldr	r1, [r7, #4]
100065e4:	19d2      	adds	r2, r2, r7
100065e6:	430b      	orrs	r3, r1
100065e8:	6891      	ldr	r1, [r2, #8]
100065ea:	607b      	str	r3, [r7, #4]
100065ec:	60e2      	str	r2, [r4, #12]
100065ee:	60a1      	str	r1, [r4, #8]
100065f0:	6094      	str	r4, [r2, #8]
100065f2:	60cc      	str	r4, [r1, #12]
100065f4:	2101      	movs	r1, #1
100065f6:	1082      	asrs	r2, r0, #2
100065f8:	4091      	lsls	r1, r2
100065fa:	4299      	cmp	r1, r3
100065fc:	d859      	bhi.n	100066b2 <_malloc_r+0x1c6>
100065fe:	420b      	tst	r3, r1
10006600:	d105      	bne.n	1000660e <_malloc_r+0x122>
10006602:	2203      	movs	r2, #3
10006604:	4390      	bics	r0, r2
10006606:	0049      	lsls	r1, r1, #1
10006608:	3004      	adds	r0, #4
1000660a:	420b      	tst	r3, r1
1000660c:	d0fb      	beq.n	10006606 <_malloc_r+0x11a>
1000660e:	2303      	movs	r3, #3
10006610:	4698      	mov	r8, r3
10006612:	00c3      	lsls	r3, r0, #3
10006614:	4699      	mov	r9, r3
10006616:	44b9      	add	r9, r7
10006618:	46cc      	mov	ip, r9
1000661a:	4682      	mov	sl, r0
1000661c:	4663      	mov	r3, ip
1000661e:	68dc      	ldr	r4, [r3, #12]
10006620:	45a4      	cmp	ip, r4
10006622:	d107      	bne.n	10006634 <_malloc_r+0x148>
10006624:	e12c      	b.n	10006880 <_malloc_r+0x394>
10006626:	2a00      	cmp	r2, #0
10006628:	db00      	blt.n	1000662c <_malloc_r+0x140>
1000662a:	e135      	b.n	10006898 <_malloc_r+0x3ac>
1000662c:	68e4      	ldr	r4, [r4, #12]
1000662e:	45a4      	cmp	ip, r4
10006630:	d100      	bne.n	10006634 <_malloc_r+0x148>
10006632:	e125      	b.n	10006880 <_malloc_r+0x394>
10006634:	4642      	mov	r2, r8
10006636:	6863      	ldr	r3, [r4, #4]
10006638:	4393      	bics	r3, r2
1000663a:	1b5a      	subs	r2, r3, r5
1000663c:	2a0f      	cmp	r2, #15
1000663e:	ddf2      	ble.n	10006626 <_malloc_r+0x13a>
10006640:	2001      	movs	r0, #1
10006642:	4680      	mov	r8, r0
10006644:	1961      	adds	r1, r4, r5
10006646:	4305      	orrs	r5, r0
10006648:	6065      	str	r5, [r4, #4]
1000664a:	68a0      	ldr	r0, [r4, #8]
1000664c:	68e5      	ldr	r5, [r4, #12]
1000664e:	3708      	adds	r7, #8
10006650:	60c5      	str	r5, [r0, #12]
10006652:	60a8      	str	r0, [r5, #8]
10006654:	4640      	mov	r0, r8
10006656:	4310      	orrs	r0, r2
10006658:	60f9      	str	r1, [r7, #12]
1000665a:	60b9      	str	r1, [r7, #8]
1000665c:	6048      	str	r0, [r1, #4]
1000665e:	60cf      	str	r7, [r1, #12]
10006660:	0030      	movs	r0, r6
10006662:	608f      	str	r7, [r1, #8]
10006664:	50e2      	str	r2, [r4, r3]
10006666:	f000 fa0b 	bl	10006a80 <__malloc_unlock>
1000666a:	0020      	movs	r0, r4
1000666c:	3008      	adds	r0, #8
1000666e:	e002      	b.n	10006676 <_malloc_r+0x18a>
10006670:	230c      	movs	r3, #12
10006672:	2000      	movs	r0, #0
10006674:	6033      	str	r3, [r6, #0]
10006676:	b003      	add	sp, #12
10006678:	bcf0      	pop	{r4, r5, r6, r7}
1000667a:	46bb      	mov	fp, r7
1000667c:	46b2      	mov	sl, r6
1000667e:	46a9      	mov	r9, r5
10006680:	46a0      	mov	r8, r4
10006682:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006684:	2180      	movs	r1, #128	; 0x80
10006686:	233f      	movs	r3, #63	; 0x3f
10006688:	2040      	movs	r0, #64	; 0x40
1000668a:	4698      	mov	r8, r3
1000668c:	0089      	lsls	r1, r1, #2
1000668e:	e776      	b.n	1000657e <_malloc_r+0x92>
10006690:	68dc      	ldr	r4, [r3, #12]
10006692:	3002      	adds	r0, #2
10006694:	42a3      	cmp	r3, r4
10006696:	d000      	beq.n	1000669a <_malloc_r+0x1ae>
10006698:	e744      	b.n	10006524 <_malloc_r+0x38>
1000669a:	003a      	movs	r2, r7
1000669c:	693c      	ldr	r4, [r7, #16]
1000669e:	3208      	adds	r2, #8
100066a0:	4294      	cmp	r4, r2
100066a2:	d000      	beq.n	100066a6 <_malloc_r+0x1ba>
100066a4:	e786      	b.n	100065b4 <_malloc_r+0xc8>
100066a6:	2101      	movs	r1, #1
100066a8:	687b      	ldr	r3, [r7, #4]
100066aa:	1082      	asrs	r2, r0, #2
100066ac:	4091      	lsls	r1, r2
100066ae:	4299      	cmp	r1, r3
100066b0:	d9a5      	bls.n	100065fe <_malloc_r+0x112>
100066b2:	2303      	movs	r3, #3
100066b4:	68bc      	ldr	r4, [r7, #8]
100066b6:	6862      	ldr	r2, [r4, #4]
100066b8:	439a      	bics	r2, r3
100066ba:	4691      	mov	r9, r2
100066bc:	4295      	cmp	r5, r2
100066be:	d803      	bhi.n	100066c8 <_malloc_r+0x1dc>
100066c0:	1b53      	subs	r3, r2, r5
100066c2:	2b0f      	cmp	r3, #15
100066c4:	dd00      	ble.n	100066c8 <_malloc_r+0x1dc>
100066c6:	e089      	b.n	100067dc <_malloc_r+0x2f0>
100066c8:	0023      	movs	r3, r4
100066ca:	444b      	add	r3, r9
100066cc:	4a5f      	ldr	r2, [pc, #380]	; (1000684c <_malloc_r+0x360>)
100066ce:	9301      	str	r3, [sp, #4]
100066d0:	4b5f      	ldr	r3, [pc, #380]	; (10006850 <_malloc_r+0x364>)
100066d2:	4693      	mov	fp, r2
100066d4:	681b      	ldr	r3, [r3, #0]
100066d6:	6812      	ldr	r2, [r2, #0]
100066d8:	18eb      	adds	r3, r5, r3
100066da:	3201      	adds	r2, #1
100066dc:	d100      	bne.n	100066e0 <_malloc_r+0x1f4>
100066de:	e13d      	b.n	1000695c <_malloc_r+0x470>
100066e0:	4a5c      	ldr	r2, [pc, #368]	; (10006854 <_malloc_r+0x368>)
100066e2:	4694      	mov	ip, r2
100066e4:	4463      	add	r3, ip
100066e6:	0b1b      	lsrs	r3, r3, #12
100066e8:	031b      	lsls	r3, r3, #12
100066ea:	9300      	str	r3, [sp, #0]
100066ec:	0030      	movs	r0, r6
100066ee:	9900      	ldr	r1, [sp, #0]
100066f0:	f000 f9ce 	bl	10006a90 <_sbrk_r>
100066f4:	0003      	movs	r3, r0
100066f6:	4680      	mov	r8, r0
100066f8:	3301      	adds	r3, #1
100066fa:	d100      	bne.n	100066fe <_malloc_r+0x212>
100066fc:	e0fa      	b.n	100068f4 <_malloc_r+0x408>
100066fe:	9b01      	ldr	r3, [sp, #4]
10006700:	4283      	cmp	r3, r0
10006702:	d900      	bls.n	10006706 <_malloc_r+0x21a>
10006704:	e0f4      	b.n	100068f0 <_malloc_r+0x404>
10006706:	4b54      	ldr	r3, [pc, #336]	; (10006858 <_malloc_r+0x36c>)
10006708:	9800      	ldr	r0, [sp, #0]
1000670a:	001a      	movs	r2, r3
1000670c:	469a      	mov	sl, r3
1000670e:	6812      	ldr	r2, [r2, #0]
10006710:	0003      	movs	r3, r0
10006712:	4694      	mov	ip, r2
10006714:	4651      	mov	r1, sl
10006716:	4463      	add	r3, ip
10006718:	600b      	str	r3, [r1, #0]
1000671a:	9901      	ldr	r1, [sp, #4]
1000671c:	001a      	movs	r2, r3
1000671e:	4541      	cmp	r1, r8
10006720:	d100      	bne.n	10006724 <_malloc_r+0x238>
10006722:	e151      	b.n	100069c8 <_malloc_r+0x4dc>
10006724:	465b      	mov	r3, fp
10006726:	681b      	ldr	r3, [r3, #0]
10006728:	3301      	adds	r3, #1
1000672a:	d100      	bne.n	1000672e <_malloc_r+0x242>
1000672c:	e156      	b.n	100069dc <_malloc_r+0x4f0>
1000672e:	4643      	mov	r3, r8
10006730:	9901      	ldr	r1, [sp, #4]
10006732:	1a5b      	subs	r3, r3, r1
10006734:	189a      	adds	r2, r3, r2
10006736:	4653      	mov	r3, sl
10006738:	601a      	str	r2, [r3, #0]
1000673a:	2307      	movs	r3, #7
1000673c:	4642      	mov	r2, r8
1000673e:	4641      	mov	r1, r8
10006740:	401a      	ands	r2, r3
10006742:	9201      	str	r2, [sp, #4]
10006744:	4219      	tst	r1, r3
10006746:	d100      	bne.n	1000674a <_malloc_r+0x25e>
10006748:	e112      	b.n	10006970 <_malloc_r+0x484>
1000674a:	2308      	movs	r3, #8
1000674c:	4698      	mov	r8, r3
1000674e:	1a88      	subs	r0, r1, r2
10006750:	4b42      	ldr	r3, [pc, #264]	; (1000685c <_malloc_r+0x370>)
10006752:	9900      	ldr	r1, [sp, #0]
10006754:	4480      	add	r8, r0
10006756:	4441      	add	r1, r8
10006758:	1a9b      	subs	r3, r3, r2
1000675a:	1a5b      	subs	r3, r3, r1
1000675c:	051b      	lsls	r3, r3, #20
1000675e:	0d1b      	lsrs	r3, r3, #20
10006760:	9100      	str	r1, [sp, #0]
10006762:	0030      	movs	r0, r6
10006764:	0019      	movs	r1, r3
10006766:	469b      	mov	fp, r3
10006768:	f000 f992 	bl	10006a90 <_sbrk_r>
1000676c:	1c43      	adds	r3, r0, #1
1000676e:	d100      	bne.n	10006772 <_malloc_r+0x286>
10006770:	e150      	b.n	10006a14 <_malloc_r+0x528>
10006772:	4643      	mov	r3, r8
10006774:	1ac0      	subs	r0, r0, r3
10006776:	0003      	movs	r3, r0
10006778:	445b      	add	r3, fp
1000677a:	9300      	str	r3, [sp, #0]
1000677c:	4653      	mov	r3, sl
1000677e:	4652      	mov	r2, sl
10006780:	681b      	ldr	r3, [r3, #0]
10006782:	2101      	movs	r1, #1
10006784:	445b      	add	r3, fp
10006786:	6013      	str	r3, [r2, #0]
10006788:	4642      	mov	r2, r8
1000678a:	4640      	mov	r0, r8
1000678c:	60ba      	str	r2, [r7, #8]
1000678e:	9a00      	ldr	r2, [sp, #0]
10006790:	430a      	orrs	r2, r1
10006792:	6042      	str	r2, [r0, #4]
10006794:	42bc      	cmp	r4, r7
10006796:	d100      	bne.n	1000679a <_malloc_r+0x2ae>
10006798:	e124      	b.n	100069e4 <_malloc_r+0x4f8>
1000679a:	464a      	mov	r2, r9
1000679c:	2a0f      	cmp	r2, #15
1000679e:	d800      	bhi.n	100067a2 <_malloc_r+0x2b6>
100067a0:	e122      	b.n	100069e8 <_malloc_r+0x4fc>
100067a2:	2007      	movs	r0, #7
100067a4:	3a0c      	subs	r2, #12
100067a6:	4382      	bics	r2, r0
100067a8:	6860      	ldr	r0, [r4, #4]
100067aa:	4001      	ands	r1, r0
100067ac:	2005      	movs	r0, #5
100067ae:	4311      	orrs	r1, r2
100067b0:	6061      	str	r1, [r4, #4]
100067b2:	18a1      	adds	r1, r4, r2
100067b4:	6048      	str	r0, [r1, #4]
100067b6:	6088      	str	r0, [r1, #8]
100067b8:	2a0f      	cmp	r2, #15
100067ba:	d900      	bls.n	100067be <_malloc_r+0x2d2>
100067bc:	e135      	b.n	10006a2a <_malloc_r+0x53e>
100067be:	4642      	mov	r2, r8
100067c0:	4644      	mov	r4, r8
100067c2:	6852      	ldr	r2, [r2, #4]
100067c4:	4926      	ldr	r1, [pc, #152]	; (10006860 <_malloc_r+0x374>)
100067c6:	6808      	ldr	r0, [r1, #0]
100067c8:	4298      	cmp	r0, r3
100067ca:	d200      	bcs.n	100067ce <_malloc_r+0x2e2>
100067cc:	600b      	str	r3, [r1, #0]
100067ce:	4925      	ldr	r1, [pc, #148]	; (10006864 <_malloc_r+0x378>)
100067d0:	6808      	ldr	r0, [r1, #0]
100067d2:	4298      	cmp	r0, r3
100067d4:	d300      	bcc.n	100067d8 <_malloc_r+0x2ec>
100067d6:	e08f      	b.n	100068f8 <_malloc_r+0x40c>
100067d8:	600b      	str	r3, [r1, #0]
100067da:	e08d      	b.n	100068f8 <_malloc_r+0x40c>
100067dc:	2201      	movs	r2, #1
100067de:	0029      	movs	r1, r5
100067e0:	4313      	orrs	r3, r2
100067e2:	4311      	orrs	r1, r2
100067e4:	1965      	adds	r5, r4, r5
100067e6:	6061      	str	r1, [r4, #4]
100067e8:	0030      	movs	r0, r6
100067ea:	60bd      	str	r5, [r7, #8]
100067ec:	606b      	str	r3, [r5, #4]
100067ee:	f000 f947 	bl	10006a80 <__malloc_unlock>
100067f2:	0020      	movs	r0, r4
100067f4:	3008      	adds	r0, #8
100067f6:	e73e      	b.n	10006676 <_malloc_r+0x18a>
100067f8:	0a5a      	lsrs	r2, r3, #9
100067fa:	2a04      	cmp	r2, #4
100067fc:	d972      	bls.n	100068e4 <_malloc_r+0x3f8>
100067fe:	2a14      	cmp	r2, #20
10006800:	d900      	bls.n	10006804 <_malloc_r+0x318>
10006802:	e0c5      	b.n	10006990 <_malloc_r+0x4a4>
10006804:	0011      	movs	r1, r2
10006806:	325c      	adds	r2, #92	; 0x5c
10006808:	315b      	adds	r1, #91	; 0x5b
1000680a:	00d2      	lsls	r2, r2, #3
1000680c:	2308      	movs	r3, #8
1000680e:	425b      	negs	r3, r3
10006810:	469c      	mov	ip, r3
10006812:	18ba      	adds	r2, r7, r2
10006814:	4494      	add	ip, r2
10006816:	4663      	mov	r3, ip
10006818:	689a      	ldr	r2, [r3, #8]
1000681a:	2303      	movs	r3, #3
1000681c:	4698      	mov	r8, r3
1000681e:	4594      	cmp	ip, r2
10006820:	d100      	bne.n	10006824 <_malloc_r+0x338>
10006822:	e09e      	b.n	10006962 <_malloc_r+0x476>
10006824:	4643      	mov	r3, r8
10006826:	6851      	ldr	r1, [r2, #4]
10006828:	4399      	bics	r1, r3
1000682a:	4549      	cmp	r1, r9
1000682c:	d902      	bls.n	10006834 <_malloc_r+0x348>
1000682e:	6892      	ldr	r2, [r2, #8]
10006830:	4594      	cmp	ip, r2
10006832:	d1f7      	bne.n	10006824 <_malloc_r+0x338>
10006834:	68d3      	ldr	r3, [r2, #12]
10006836:	469c      	mov	ip, r3
10006838:	687b      	ldr	r3, [r7, #4]
1000683a:	4661      	mov	r1, ip
1000683c:	60a2      	str	r2, [r4, #8]
1000683e:	60e1      	str	r1, [r4, #12]
10006840:	608c      	str	r4, [r1, #8]
10006842:	60d4      	str	r4, [r2, #12]
10006844:	e6d6      	b.n	100065f4 <_malloc_r+0x108>
10006846:	46c0      	nop			; (mov r8, r8)
10006848:	20002c18 	.word	0x20002c18
1000684c:	20003020 	.word	0x20003020
10006850:	20022f10 	.word	0x20022f10
10006854:	0000100f 	.word	0x0000100f
10006858:	20022ee0 	.word	0x20022ee0
1000685c:	00001008 	.word	0x00001008
10006860:	20022f08 	.word	0x20022f08
10006864:	20022f0c 	.word	0x20022f0c
10006868:	2814      	cmp	r0, #20
1000686a:	d952      	bls.n	10006912 <_malloc_r+0x426>
1000686c:	2854      	cmp	r0, #84	; 0x54
1000686e:	d900      	bls.n	10006872 <_malloc_r+0x386>
10006870:	e096      	b.n	100069a0 <_malloc_r+0x4b4>
10006872:	236e      	movs	r3, #110	; 0x6e
10006874:	4698      	mov	r8, r3
10006876:	0b28      	lsrs	r0, r5, #12
10006878:	4480      	add	r8, r0
1000687a:	306f      	adds	r0, #111	; 0x6f
1000687c:	00c1      	lsls	r1, r0, #3
1000687e:	e67e      	b.n	1000657e <_malloc_r+0x92>
10006880:	2308      	movs	r3, #8
10006882:	469b      	mov	fp, r3
10006884:	3b07      	subs	r3, #7
10006886:	44dc      	add	ip, fp
10006888:	469b      	mov	fp, r3
1000688a:	44da      	add	sl, fp
1000688c:	4643      	mov	r3, r8
1000688e:	4652      	mov	r2, sl
10006890:	4213      	tst	r3, r2
10006892:	d000      	beq.n	10006896 <_malloc_r+0x3aa>
10006894:	e6c2      	b.n	1000661c <_malloc_r+0x130>
10006896:	e04c      	b.n	10006932 <_malloc_r+0x446>
10006898:	2201      	movs	r2, #1
1000689a:	18e3      	adds	r3, r4, r3
1000689c:	6859      	ldr	r1, [r3, #4]
1000689e:	0030      	movs	r0, r6
100068a0:	430a      	orrs	r2, r1
100068a2:	605a      	str	r2, [r3, #4]
100068a4:	68e3      	ldr	r3, [r4, #12]
100068a6:	68a2      	ldr	r2, [r4, #8]
100068a8:	60d3      	str	r3, [r2, #12]
100068aa:	609a      	str	r2, [r3, #8]
100068ac:	f000 f8e8 	bl	10006a80 <__malloc_unlock>
100068b0:	0020      	movs	r0, r4
100068b2:	3008      	adds	r0, #8
100068b4:	e6df      	b.n	10006676 <_malloc_r+0x18a>
100068b6:	002b      	movs	r3, r5
100068b8:	08e8      	lsrs	r0, r5, #3
100068ba:	3308      	adds	r3, #8
100068bc:	e62a      	b.n	10006514 <_malloc_r+0x28>
100068be:	2301      	movs	r3, #1
100068c0:	1960      	adds	r0, r4, r5
100068c2:	431d      	orrs	r5, r3
100068c4:	6065      	str	r5, [r4, #4]
100068c6:	6178      	str	r0, [r7, #20]
100068c8:	6138      	str	r0, [r7, #16]
100068ca:	60c2      	str	r2, [r0, #12]
100068cc:	6082      	str	r2, [r0, #8]
100068ce:	001a      	movs	r2, r3
100068d0:	464b      	mov	r3, r9
100068d2:	430a      	orrs	r2, r1
100068d4:	6042      	str	r2, [r0, #4]
100068d6:	0030      	movs	r0, r6
100068d8:	50e1      	str	r1, [r4, r3]
100068da:	f000 f8d1 	bl	10006a80 <__malloc_unlock>
100068de:	0020      	movs	r0, r4
100068e0:	3008      	adds	r0, #8
100068e2:	e6c8      	b.n	10006676 <_malloc_r+0x18a>
100068e4:	099a      	lsrs	r2, r3, #6
100068e6:	0011      	movs	r1, r2
100068e8:	3239      	adds	r2, #57	; 0x39
100068ea:	3138      	adds	r1, #56	; 0x38
100068ec:	00d2      	lsls	r2, r2, #3
100068ee:	e78d      	b.n	1000680c <_malloc_r+0x320>
100068f0:	42bc      	cmp	r4, r7
100068f2:	d060      	beq.n	100069b6 <_malloc_r+0x4ca>
100068f4:	68bc      	ldr	r4, [r7, #8]
100068f6:	6862      	ldr	r2, [r4, #4]
100068f8:	2303      	movs	r3, #3
100068fa:	439a      	bics	r2, r3
100068fc:	1b53      	subs	r3, r2, r5
100068fe:	4295      	cmp	r5, r2
10006900:	d802      	bhi.n	10006908 <_malloc_r+0x41c>
10006902:	2b0f      	cmp	r3, #15
10006904:	dd00      	ble.n	10006908 <_malloc_r+0x41c>
10006906:	e769      	b.n	100067dc <_malloc_r+0x2f0>
10006908:	0030      	movs	r0, r6
1000690a:	f000 f8b9 	bl	10006a80 <__malloc_unlock>
1000690e:	2000      	movs	r0, #0
10006910:	e6b1      	b.n	10006676 <_malloc_r+0x18a>
10006912:	235b      	movs	r3, #91	; 0x5b
10006914:	4698      	mov	r8, r3
10006916:	4480      	add	r8, r0
10006918:	305c      	adds	r0, #92	; 0x5c
1000691a:	00c1      	lsls	r1, r0, #3
1000691c:	e62f      	b.n	1000657e <_malloc_r+0x92>
1000691e:	2308      	movs	r3, #8
10006920:	425b      	negs	r3, r3
10006922:	469c      	mov	ip, r3
10006924:	44e1      	add	r9, ip
10006926:	464b      	mov	r3, r9
10006928:	689b      	ldr	r3, [r3, #8]
1000692a:	3801      	subs	r0, #1
1000692c:	454b      	cmp	r3, r9
1000692e:	d000      	beq.n	10006932 <_malloc_r+0x446>
10006930:	e098      	b.n	10006a64 <_malloc_r+0x578>
10006932:	4643      	mov	r3, r8
10006934:	4203      	tst	r3, r0
10006936:	d1f2      	bne.n	1000691e <_malloc_r+0x432>
10006938:	687b      	ldr	r3, [r7, #4]
1000693a:	438b      	bics	r3, r1
1000693c:	607b      	str	r3, [r7, #4]
1000693e:	0049      	lsls	r1, r1, #1
10006940:	4299      	cmp	r1, r3
10006942:	d900      	bls.n	10006946 <_malloc_r+0x45a>
10006944:	e6b5      	b.n	100066b2 <_malloc_r+0x1c6>
10006946:	2900      	cmp	r1, #0
10006948:	d104      	bne.n	10006954 <_malloc_r+0x468>
1000694a:	e6b2      	b.n	100066b2 <_malloc_r+0x1c6>
1000694c:	2204      	movs	r2, #4
1000694e:	4694      	mov	ip, r2
10006950:	0049      	lsls	r1, r1, #1
10006952:	44e2      	add	sl, ip
10006954:	420b      	tst	r3, r1
10006956:	d0f9      	beq.n	1000694c <_malloc_r+0x460>
10006958:	4650      	mov	r0, sl
1000695a:	e65a      	b.n	10006612 <_malloc_r+0x126>
1000695c:	3310      	adds	r3, #16
1000695e:	9300      	str	r3, [sp, #0]
10006960:	e6c4      	b.n	100066ec <_malloc_r+0x200>
10006962:	1089      	asrs	r1, r1, #2
10006964:	3b02      	subs	r3, #2
10006966:	408b      	lsls	r3, r1
10006968:	6879      	ldr	r1, [r7, #4]
1000696a:	430b      	orrs	r3, r1
1000696c:	607b      	str	r3, [r7, #4]
1000696e:	e764      	b.n	1000683a <_malloc_r+0x34e>
10006970:	9b00      	ldr	r3, [sp, #0]
10006972:	0030      	movs	r0, r6
10006974:	4443      	add	r3, r8
10006976:	425b      	negs	r3, r3
10006978:	051b      	lsls	r3, r3, #20
1000697a:	0d1b      	lsrs	r3, r3, #20
1000697c:	0019      	movs	r1, r3
1000697e:	469b      	mov	fp, r3
10006980:	f000 f886 	bl	10006a90 <_sbrk_r>
10006984:	1c43      	adds	r3, r0, #1
10006986:	d000      	beq.n	1000698a <_malloc_r+0x49e>
10006988:	e6f3      	b.n	10006772 <_malloc_r+0x286>
1000698a:	2300      	movs	r3, #0
1000698c:	469b      	mov	fp, r3
1000698e:	e6f5      	b.n	1000677c <_malloc_r+0x290>
10006990:	2a54      	cmp	r2, #84	; 0x54
10006992:	d82b      	bhi.n	100069ec <_malloc_r+0x500>
10006994:	0b1a      	lsrs	r2, r3, #12
10006996:	0011      	movs	r1, r2
10006998:	326f      	adds	r2, #111	; 0x6f
1000699a:	316e      	adds	r1, #110	; 0x6e
1000699c:	00d2      	lsls	r2, r2, #3
1000699e:	e735      	b.n	1000680c <_malloc_r+0x320>
100069a0:	23aa      	movs	r3, #170	; 0xaa
100069a2:	005b      	lsls	r3, r3, #1
100069a4:	4298      	cmp	r0, r3
100069a6:	d82b      	bhi.n	10006a00 <_malloc_r+0x514>
100069a8:	3bdd      	subs	r3, #221	; 0xdd
100069aa:	4698      	mov	r8, r3
100069ac:	0be8      	lsrs	r0, r5, #15
100069ae:	4480      	add	r8, r0
100069b0:	3078      	adds	r0, #120	; 0x78
100069b2:	00c1      	lsls	r1, r0, #3
100069b4:	e5e3      	b.n	1000657e <_malloc_r+0x92>
100069b6:	4b2c      	ldr	r3, [pc, #176]	; (10006a68 <_malloc_r+0x57c>)
100069b8:	9a00      	ldr	r2, [sp, #0]
100069ba:	469a      	mov	sl, r3
100069bc:	681b      	ldr	r3, [r3, #0]
100069be:	469c      	mov	ip, r3
100069c0:	4653      	mov	r3, sl
100069c2:	4462      	add	r2, ip
100069c4:	601a      	str	r2, [r3, #0]
100069c6:	e6ad      	b.n	10006724 <_malloc_r+0x238>
100069c8:	0509      	lsls	r1, r1, #20
100069ca:	d000      	beq.n	100069ce <_malloc_r+0x4e2>
100069cc:	e6aa      	b.n	10006724 <_malloc_r+0x238>
100069ce:	0002      	movs	r2, r0
100069d0:	68bc      	ldr	r4, [r7, #8]
100069d2:	444a      	add	r2, r9
100069d4:	3101      	adds	r1, #1
100069d6:	430a      	orrs	r2, r1
100069d8:	6062      	str	r2, [r4, #4]
100069da:	e6f3      	b.n	100067c4 <_malloc_r+0x2d8>
100069dc:	465b      	mov	r3, fp
100069de:	4642      	mov	r2, r8
100069e0:	601a      	str	r2, [r3, #0]
100069e2:	e6aa      	b.n	1000673a <_malloc_r+0x24e>
100069e4:	4644      	mov	r4, r8
100069e6:	e6ed      	b.n	100067c4 <_malloc_r+0x2d8>
100069e8:	6041      	str	r1, [r0, #4]
100069ea:	e78d      	b.n	10006908 <_malloc_r+0x41c>
100069ec:	21aa      	movs	r1, #170	; 0xaa
100069ee:	0049      	lsls	r1, r1, #1
100069f0:	428a      	cmp	r2, r1
100069f2:	d824      	bhi.n	10006a3e <_malloc_r+0x552>
100069f4:	0bda      	lsrs	r2, r3, #15
100069f6:	0011      	movs	r1, r2
100069f8:	3278      	adds	r2, #120	; 0x78
100069fa:	3177      	adds	r1, #119	; 0x77
100069fc:	00d2      	lsls	r2, r2, #3
100069fe:	e705      	b.n	1000680c <_malloc_r+0x320>
10006a00:	4b1a      	ldr	r3, [pc, #104]	; (10006a6c <_malloc_r+0x580>)
10006a02:	4298      	cmp	r0, r3
10006a04:	d824      	bhi.n	10006a50 <_malloc_r+0x564>
10006a06:	237c      	movs	r3, #124	; 0x7c
10006a08:	4698      	mov	r8, r3
10006a0a:	0ca8      	lsrs	r0, r5, #18
10006a0c:	4480      	add	r8, r0
10006a0e:	307d      	adds	r0, #125	; 0x7d
10006a10:	00c1      	lsls	r1, r0, #3
10006a12:	e5b4      	b.n	1000657e <_malloc_r+0x92>
10006a14:	9a00      	ldr	r2, [sp, #0]
10006a16:	9b01      	ldr	r3, [sp, #4]
10006a18:	4694      	mov	ip, r2
10006a1a:	4642      	mov	r2, r8
10006a1c:	3b08      	subs	r3, #8
10006a1e:	4463      	add	r3, ip
10006a20:	1a9b      	subs	r3, r3, r2
10006a22:	9300      	str	r3, [sp, #0]
10006a24:	2300      	movs	r3, #0
10006a26:	469b      	mov	fp, r3
10006a28:	e6a8      	b.n	1000677c <_malloc_r+0x290>
10006a2a:	0021      	movs	r1, r4
10006a2c:	0030      	movs	r0, r6
10006a2e:	3108      	adds	r1, #8
10006a30:	f000 f8bc 	bl	10006bac <_free_r>
10006a34:	4653      	mov	r3, sl
10006a36:	68bc      	ldr	r4, [r7, #8]
10006a38:	681b      	ldr	r3, [r3, #0]
10006a3a:	6862      	ldr	r2, [r4, #4]
10006a3c:	e6c2      	b.n	100067c4 <_malloc_r+0x2d8>
10006a3e:	490b      	ldr	r1, [pc, #44]	; (10006a6c <_malloc_r+0x580>)
10006a40:	428a      	cmp	r2, r1
10006a42:	d80b      	bhi.n	10006a5c <_malloc_r+0x570>
10006a44:	0c9a      	lsrs	r2, r3, #18
10006a46:	0011      	movs	r1, r2
10006a48:	327d      	adds	r2, #125	; 0x7d
10006a4a:	317c      	adds	r1, #124	; 0x7c
10006a4c:	00d2      	lsls	r2, r2, #3
10006a4e:	e6dd      	b.n	1000680c <_malloc_r+0x320>
10006a50:	21fe      	movs	r1, #254	; 0xfe
10006a52:	237e      	movs	r3, #126	; 0x7e
10006a54:	207f      	movs	r0, #127	; 0x7f
10006a56:	4698      	mov	r8, r3
10006a58:	0089      	lsls	r1, r1, #2
10006a5a:	e590      	b.n	1000657e <_malloc_r+0x92>
10006a5c:	22fe      	movs	r2, #254	; 0xfe
10006a5e:	217e      	movs	r1, #126	; 0x7e
10006a60:	0092      	lsls	r2, r2, #2
10006a62:	e6d3      	b.n	1000680c <_malloc_r+0x320>
10006a64:	687b      	ldr	r3, [r7, #4]
10006a66:	e76a      	b.n	1000693e <_malloc_r+0x452>
10006a68:	20022ee0 	.word	0x20022ee0
10006a6c:	00000554 	.word	0x00000554

10006a70 <__malloc_lock>:
10006a70:	b510      	push	{r4, lr}
10006a72:	4802      	ldr	r0, [pc, #8]	; (10006a7c <__malloc_lock+0xc>)
10006a74:	f000 f97c 	bl	10006d70 <__retarget_lock_acquire_recursive>
10006a78:	bd10      	pop	{r4, pc}
10006a7a:	46c0      	nop			; (mov r8, r8)
10006a7c:	20022edc 	.word	0x20022edc

10006a80 <__malloc_unlock>:
10006a80:	b510      	push	{r4, lr}
10006a82:	4802      	ldr	r0, [pc, #8]	; (10006a8c <__malloc_unlock+0xc>)
10006a84:	f000 f976 	bl	10006d74 <__retarget_lock_release_recursive>
10006a88:	bd10      	pop	{r4, pc}
10006a8a:	46c0      	nop			; (mov r8, r8)
10006a8c:	20022edc 	.word	0x20022edc

10006a90 <_sbrk_r>:
10006a90:	2300      	movs	r3, #0
10006a92:	b570      	push	{r4, r5, r6, lr}
10006a94:	4d06      	ldr	r5, [pc, #24]	; (10006ab0 <_sbrk_r+0x20>)
10006a96:	0004      	movs	r4, r0
10006a98:	0008      	movs	r0, r1
10006a9a:	602b      	str	r3, [r5, #0]
10006a9c:	f7fb f90e 	bl	10001cbc <_sbrk>
10006aa0:	1c43      	adds	r3, r0, #1
10006aa2:	d000      	beq.n	10006aa6 <_sbrk_r+0x16>
10006aa4:	bd70      	pop	{r4, r5, r6, pc}
10006aa6:	682b      	ldr	r3, [r5, #0]
10006aa8:	2b00      	cmp	r3, #0
10006aaa:	d0fb      	beq.n	10006aa4 <_sbrk_r+0x14>
10006aac:	6023      	str	r3, [r4, #0]
10006aae:	e7f9      	b.n	10006aa4 <_sbrk_r+0x14>
10006ab0:	200234b8 	.word	0x200234b8

10006ab4 <strlen>:
10006ab4:	b510      	push	{r4, lr}
10006ab6:	0783      	lsls	r3, r0, #30
10006ab8:	d00a      	beq.n	10006ad0 <strlen+0x1c>
10006aba:	0003      	movs	r3, r0
10006abc:	2103      	movs	r1, #3
10006abe:	e002      	b.n	10006ac6 <strlen+0x12>
10006ac0:	3301      	adds	r3, #1
10006ac2:	420b      	tst	r3, r1
10006ac4:	d005      	beq.n	10006ad2 <strlen+0x1e>
10006ac6:	781a      	ldrb	r2, [r3, #0]
10006ac8:	2a00      	cmp	r2, #0
10006aca:	d1f9      	bne.n	10006ac0 <strlen+0xc>
10006acc:	1a18      	subs	r0, r3, r0
10006ace:	bd10      	pop	{r4, pc}
10006ad0:	0003      	movs	r3, r0
10006ad2:	6819      	ldr	r1, [r3, #0]
10006ad4:	4a0c      	ldr	r2, [pc, #48]	; (10006b08 <strlen+0x54>)
10006ad6:	4c0d      	ldr	r4, [pc, #52]	; (10006b0c <strlen+0x58>)
10006ad8:	188a      	adds	r2, r1, r2
10006ada:	438a      	bics	r2, r1
10006adc:	4222      	tst	r2, r4
10006ade:	d10f      	bne.n	10006b00 <strlen+0x4c>
10006ae0:	6859      	ldr	r1, [r3, #4]
10006ae2:	4a09      	ldr	r2, [pc, #36]	; (10006b08 <strlen+0x54>)
10006ae4:	3304      	adds	r3, #4
10006ae6:	188a      	adds	r2, r1, r2
10006ae8:	438a      	bics	r2, r1
10006aea:	4222      	tst	r2, r4
10006aec:	d108      	bne.n	10006b00 <strlen+0x4c>
10006aee:	6859      	ldr	r1, [r3, #4]
10006af0:	4a05      	ldr	r2, [pc, #20]	; (10006b08 <strlen+0x54>)
10006af2:	3304      	adds	r3, #4
10006af4:	188a      	adds	r2, r1, r2
10006af6:	438a      	bics	r2, r1
10006af8:	4222      	tst	r2, r4
10006afa:	d0f1      	beq.n	10006ae0 <strlen+0x2c>
10006afc:	e000      	b.n	10006b00 <strlen+0x4c>
10006afe:	3301      	adds	r3, #1
10006b00:	781a      	ldrb	r2, [r3, #0]
10006b02:	2a00      	cmp	r2, #0
10006b04:	d1fb      	bne.n	10006afe <strlen+0x4a>
10006b06:	e7e1      	b.n	10006acc <strlen+0x18>
10006b08:	fefefeff 	.word	0xfefefeff
10006b0c:	80808080 	.word	0x80808080

10006b10 <_malloc_trim_r>:
10006b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10006b12:	000c      	movs	r4, r1
10006b14:	0005      	movs	r5, r0
10006b16:	f7ff ffab 	bl	10006a70 <__malloc_lock>
10006b1a:	4f20      	ldr	r7, [pc, #128]	; (10006b9c <_malloc_trim_r+0x8c>)
10006b1c:	68bb      	ldr	r3, [r7, #8]
10006b1e:	685e      	ldr	r6, [r3, #4]
10006b20:	2303      	movs	r3, #3
10006b22:	439e      	bics	r6, r3
10006b24:	4b1e      	ldr	r3, [pc, #120]	; (10006ba0 <_malloc_trim_r+0x90>)
10006b26:	1b34      	subs	r4, r6, r4
10006b28:	469c      	mov	ip, r3
10006b2a:	4464      	add	r4, ip
10006b2c:	0b24      	lsrs	r4, r4, #12
10006b2e:	3c01      	subs	r4, #1
10006b30:	3311      	adds	r3, #17
10006b32:	0324      	lsls	r4, r4, #12
10006b34:	429c      	cmp	r4, r3
10006b36:	db07      	blt.n	10006b48 <_malloc_trim_r+0x38>
10006b38:	2100      	movs	r1, #0
10006b3a:	0028      	movs	r0, r5
10006b3c:	f7ff ffa8 	bl	10006a90 <_sbrk_r>
10006b40:	68bb      	ldr	r3, [r7, #8]
10006b42:	199b      	adds	r3, r3, r6
10006b44:	4298      	cmp	r0, r3
10006b46:	d004      	beq.n	10006b52 <_malloc_trim_r+0x42>
10006b48:	0028      	movs	r0, r5
10006b4a:	f7ff ff99 	bl	10006a80 <__malloc_unlock>
10006b4e:	2000      	movs	r0, #0
10006b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10006b52:	0028      	movs	r0, r5
10006b54:	4261      	negs	r1, r4
10006b56:	f7ff ff9b 	bl	10006a90 <_sbrk_r>
10006b5a:	1c43      	adds	r3, r0, #1
10006b5c:	d00d      	beq.n	10006b7a <_malloc_trim_r+0x6a>
10006b5e:	2201      	movs	r2, #1
10006b60:	68bb      	ldr	r3, [r7, #8]
10006b62:	1b36      	subs	r6, r6, r4
10006b64:	4316      	orrs	r6, r2
10006b66:	605e      	str	r6, [r3, #4]
10006b68:	4b0e      	ldr	r3, [pc, #56]	; (10006ba4 <_malloc_trim_r+0x94>)
10006b6a:	0028      	movs	r0, r5
10006b6c:	681a      	ldr	r2, [r3, #0]
10006b6e:	1b14      	subs	r4, r2, r4
10006b70:	601c      	str	r4, [r3, #0]
10006b72:	f7ff ff85 	bl	10006a80 <__malloc_unlock>
10006b76:	2001      	movs	r0, #1
10006b78:	e7ea      	b.n	10006b50 <_malloc_trim_r+0x40>
10006b7a:	2100      	movs	r1, #0
10006b7c:	0028      	movs	r0, r5
10006b7e:	f7ff ff87 	bl	10006a90 <_sbrk_r>
10006b82:	68ba      	ldr	r2, [r7, #8]
10006b84:	1a83      	subs	r3, r0, r2
10006b86:	2b0f      	cmp	r3, #15
10006b88:	ddde      	ble.n	10006b48 <_malloc_trim_r+0x38>
10006b8a:	4907      	ldr	r1, [pc, #28]	; (10006ba8 <_malloc_trim_r+0x98>)
10006b8c:	6809      	ldr	r1, [r1, #0]
10006b8e:	1a40      	subs	r0, r0, r1
10006b90:	4904      	ldr	r1, [pc, #16]	; (10006ba4 <_malloc_trim_r+0x94>)
10006b92:	6008      	str	r0, [r1, #0]
10006b94:	2101      	movs	r1, #1
10006b96:	430b      	orrs	r3, r1
10006b98:	6053      	str	r3, [r2, #4]
10006b9a:	e7d5      	b.n	10006b48 <_malloc_trim_r+0x38>
10006b9c:	20002c18 	.word	0x20002c18
10006ba0:	00000fef 	.word	0x00000fef
10006ba4:	20022ee0 	.word	0x20022ee0
10006ba8:	20003020 	.word	0x20003020

10006bac <_free_r>:
10006bac:	b5f0      	push	{r4, r5, r6, r7, lr}
10006bae:	46c6      	mov	lr, r8
10006bb0:	0005      	movs	r5, r0
10006bb2:	000c      	movs	r4, r1
10006bb4:	b500      	push	{lr}
10006bb6:	2900      	cmp	r1, #0
10006bb8:	d04f      	beq.n	10006c5a <_free_r+0xae>
10006bba:	f7ff ff59 	bl	10006a70 <__malloc_lock>
10006bbe:	0021      	movs	r1, r4
10006bc0:	3908      	subs	r1, #8
10006bc2:	684c      	ldr	r4, [r1, #4]
10006bc4:	2601      	movs	r6, #1
10006bc6:	0022      	movs	r2, r4
10006bc8:	2003      	movs	r0, #3
10006bca:	43b2      	bics	r2, r6
10006bcc:	188f      	adds	r7, r1, r2
10006bce:	687b      	ldr	r3, [r7, #4]
10006bd0:	4383      	bics	r3, r0
10006bd2:	4862      	ldr	r0, [pc, #392]	; (10006d5c <_free_r+0x1b0>)
10006bd4:	4698      	mov	r8, r3
10006bd6:	6883      	ldr	r3, [r0, #8]
10006bd8:	42bb      	cmp	r3, r7
10006bda:	d06a      	beq.n	10006cb2 <_free_r+0x106>
10006bdc:	4643      	mov	r3, r8
10006bde:	607b      	str	r3, [r7, #4]
10006be0:	4226      	tst	r6, r4
10006be2:	d11e      	bne.n	10006c22 <_free_r+0x76>
10006be4:	2308      	movs	r3, #8
10006be6:	469c      	mov	ip, r3
10006be8:	680c      	ldr	r4, [r1, #0]
10006bea:	4484      	add	ip, r0
10006bec:	1b09      	subs	r1, r1, r4
10006bee:	1912      	adds	r2, r2, r4
10006bf0:	688c      	ldr	r4, [r1, #8]
10006bf2:	4564      	cmp	r4, ip
10006bf4:	d04f      	beq.n	10006c96 <_free_r+0xea>
10006bf6:	68cb      	ldr	r3, [r1, #12]
10006bf8:	60e3      	str	r3, [r4, #12]
10006bfa:	609c      	str	r4, [r3, #8]
10006bfc:	4643      	mov	r3, r8
10006bfe:	18fc      	adds	r4, r7, r3
10006c00:	6864      	ldr	r4, [r4, #4]
10006c02:	4234      	tst	r4, r6
10006c04:	d111      	bne.n	10006c2a <_free_r+0x7e>
10006c06:	68bb      	ldr	r3, [r7, #8]
10006c08:	4c55      	ldr	r4, [pc, #340]	; (10006d60 <_free_r+0x1b4>)
10006c0a:	4442      	add	r2, r8
10006c0c:	42a3      	cmp	r3, r4
10006c0e:	d100      	bne.n	10006c12 <_free_r+0x66>
10006c10:	e07e      	b.n	10006d10 <_free_r+0x164>
10006c12:	68fc      	ldr	r4, [r7, #12]
10006c14:	60dc      	str	r4, [r3, #12]
10006c16:	60a3      	str	r3, [r4, #8]
10006c18:	2301      	movs	r3, #1
10006c1a:	4313      	orrs	r3, r2
10006c1c:	604b      	str	r3, [r1, #4]
10006c1e:	508a      	str	r2, [r1, r2]
10006c20:	e006      	b.n	10006c30 <_free_r+0x84>
10006c22:	18fc      	adds	r4, r7, r3
10006c24:	6864      	ldr	r4, [r4, #4]
10006c26:	4234      	tst	r4, r6
10006c28:	d0ed      	beq.n	10006c06 <_free_r+0x5a>
10006c2a:	4316      	orrs	r6, r2
10006c2c:	604e      	str	r6, [r1, #4]
10006c2e:	603a      	str	r2, [r7, #0]
10006c30:	2380      	movs	r3, #128	; 0x80
10006c32:	009b      	lsls	r3, r3, #2
10006c34:	429a      	cmp	r2, r3
10006c36:	d213      	bcs.n	10006c60 <_free_r+0xb4>
10006c38:	0954      	lsrs	r4, r2, #5
10006c3a:	08d3      	lsrs	r3, r2, #3
10006c3c:	2201      	movs	r2, #1
10006c3e:	40a2      	lsls	r2, r4
10006c40:	6844      	ldr	r4, [r0, #4]
10006c42:	00db      	lsls	r3, r3, #3
10006c44:	4322      	orrs	r2, r4
10006c46:	6042      	str	r2, [r0, #4]
10006c48:	1818      	adds	r0, r3, r0
10006c4a:	6883      	ldr	r3, [r0, #8]
10006c4c:	60c8      	str	r0, [r1, #12]
10006c4e:	608b      	str	r3, [r1, #8]
10006c50:	6081      	str	r1, [r0, #8]
10006c52:	60d9      	str	r1, [r3, #12]
10006c54:	0028      	movs	r0, r5
10006c56:	f7ff ff13 	bl	10006a80 <__malloc_unlock>
10006c5a:	bc80      	pop	{r7}
10006c5c:	46b8      	mov	r8, r7
10006c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006c60:	0a53      	lsrs	r3, r2, #9
10006c62:	2b04      	cmp	r3, #4
10006c64:	d83e      	bhi.n	10006ce4 <_free_r+0x138>
10006c66:	0994      	lsrs	r4, r2, #6
10006c68:	0026      	movs	r6, r4
10006c6a:	3439      	adds	r4, #57	; 0x39
10006c6c:	3638      	adds	r6, #56	; 0x38
10006c6e:	00e4      	lsls	r4, r4, #3
10006c70:	1904      	adds	r4, r0, r4
10006c72:	6823      	ldr	r3, [r4, #0]
10006c74:	3c08      	subs	r4, #8
10006c76:	2703      	movs	r7, #3
10006c78:	429c      	cmp	r4, r3
10006c7a:	d042      	beq.n	10006d02 <_free_r+0x156>
10006c7c:	6858      	ldr	r0, [r3, #4]
10006c7e:	43b8      	bics	r0, r7
10006c80:	4290      	cmp	r0, r2
10006c82:	d902      	bls.n	10006c8a <_free_r+0xde>
10006c84:	689b      	ldr	r3, [r3, #8]
10006c86:	429c      	cmp	r4, r3
10006c88:	d1f8      	bne.n	10006c7c <_free_r+0xd0>
10006c8a:	68dc      	ldr	r4, [r3, #12]
10006c8c:	60cc      	str	r4, [r1, #12]
10006c8e:	608b      	str	r3, [r1, #8]
10006c90:	60a1      	str	r1, [r4, #8]
10006c92:	60d9      	str	r1, [r3, #12]
10006c94:	e7de      	b.n	10006c54 <_free_r+0xa8>
10006c96:	4643      	mov	r3, r8
10006c98:	18f8      	adds	r0, r7, r3
10006c9a:	6840      	ldr	r0, [r0, #4]
10006c9c:	4230      	tst	r0, r6
10006c9e:	d157      	bne.n	10006d50 <_free_r+0x1a4>
10006ca0:	68fb      	ldr	r3, [r7, #12]
10006ca2:	68b8      	ldr	r0, [r7, #8]
10006ca4:	4442      	add	r2, r8
10006ca6:	4316      	orrs	r6, r2
10006ca8:	60c3      	str	r3, [r0, #12]
10006caa:	6098      	str	r0, [r3, #8]
10006cac:	604e      	str	r6, [r1, #4]
10006cae:	508a      	str	r2, [r1, r2]
10006cb0:	e7d0      	b.n	10006c54 <_free_r+0xa8>
10006cb2:	0013      	movs	r3, r2
10006cb4:	4443      	add	r3, r8
10006cb6:	4226      	tst	r6, r4
10006cb8:	d106      	bne.n	10006cc8 <_free_r+0x11c>
10006cba:	680a      	ldr	r2, [r1, #0]
10006cbc:	1a89      	subs	r1, r1, r2
10006cbe:	688c      	ldr	r4, [r1, #8]
10006cc0:	189b      	adds	r3, r3, r2
10006cc2:	68ca      	ldr	r2, [r1, #12]
10006cc4:	60e2      	str	r2, [r4, #12]
10006cc6:	6094      	str	r4, [r2, #8]
10006cc8:	2201      	movs	r2, #1
10006cca:	431a      	orrs	r2, r3
10006ccc:	604a      	str	r2, [r1, #4]
10006cce:	4a25      	ldr	r2, [pc, #148]	; (10006d64 <_free_r+0x1b8>)
10006cd0:	6081      	str	r1, [r0, #8]
10006cd2:	6812      	ldr	r2, [r2, #0]
10006cd4:	429a      	cmp	r2, r3
10006cd6:	d8bd      	bhi.n	10006c54 <_free_r+0xa8>
10006cd8:	4b23      	ldr	r3, [pc, #140]	; (10006d68 <_free_r+0x1bc>)
10006cda:	0028      	movs	r0, r5
10006cdc:	6819      	ldr	r1, [r3, #0]
10006cde:	f7ff ff17 	bl	10006b10 <_malloc_trim_r>
10006ce2:	e7b7      	b.n	10006c54 <_free_r+0xa8>
10006ce4:	2b14      	cmp	r3, #20
10006ce6:	d907      	bls.n	10006cf8 <_free_r+0x14c>
10006ce8:	2b54      	cmp	r3, #84	; 0x54
10006cea:	d81a      	bhi.n	10006d22 <_free_r+0x176>
10006cec:	0b14      	lsrs	r4, r2, #12
10006cee:	0026      	movs	r6, r4
10006cf0:	346f      	adds	r4, #111	; 0x6f
10006cf2:	366e      	adds	r6, #110	; 0x6e
10006cf4:	00e4      	lsls	r4, r4, #3
10006cf6:	e7bb      	b.n	10006c70 <_free_r+0xc4>
10006cf8:	001e      	movs	r6, r3
10006cfa:	335c      	adds	r3, #92	; 0x5c
10006cfc:	365b      	adds	r6, #91	; 0x5b
10006cfe:	00dc      	lsls	r4, r3, #3
10006d00:	e7b6      	b.n	10006c70 <_free_r+0xc4>
10006d02:	2201      	movs	r2, #1
10006d04:	10b6      	asrs	r6, r6, #2
10006d06:	40b2      	lsls	r2, r6
10006d08:	6846      	ldr	r6, [r0, #4]
10006d0a:	4332      	orrs	r2, r6
10006d0c:	6042      	str	r2, [r0, #4]
10006d0e:	e7bd      	b.n	10006c8c <_free_r+0xe0>
10006d10:	60d9      	str	r1, [r3, #12]
10006d12:	6099      	str	r1, [r3, #8]
10006d14:	60cb      	str	r3, [r1, #12]
10006d16:	608b      	str	r3, [r1, #8]
10006d18:	2301      	movs	r3, #1
10006d1a:	4313      	orrs	r3, r2
10006d1c:	604b      	str	r3, [r1, #4]
10006d1e:	508a      	str	r2, [r1, r2]
10006d20:	e798      	b.n	10006c54 <_free_r+0xa8>
10006d22:	24aa      	movs	r4, #170	; 0xaa
10006d24:	0064      	lsls	r4, r4, #1
10006d26:	42a3      	cmp	r3, r4
10006d28:	d805      	bhi.n	10006d36 <_free_r+0x18a>
10006d2a:	0bd4      	lsrs	r4, r2, #15
10006d2c:	0026      	movs	r6, r4
10006d2e:	3478      	adds	r4, #120	; 0x78
10006d30:	3677      	adds	r6, #119	; 0x77
10006d32:	00e4      	lsls	r4, r4, #3
10006d34:	e79c      	b.n	10006c70 <_free_r+0xc4>
10006d36:	4c0d      	ldr	r4, [pc, #52]	; (10006d6c <_free_r+0x1c0>)
10006d38:	42a3      	cmp	r3, r4
10006d3a:	d805      	bhi.n	10006d48 <_free_r+0x19c>
10006d3c:	0c94      	lsrs	r4, r2, #18
10006d3e:	0026      	movs	r6, r4
10006d40:	347d      	adds	r4, #125	; 0x7d
10006d42:	367c      	adds	r6, #124	; 0x7c
10006d44:	00e4      	lsls	r4, r4, #3
10006d46:	e793      	b.n	10006c70 <_free_r+0xc4>
10006d48:	24fe      	movs	r4, #254	; 0xfe
10006d4a:	267e      	movs	r6, #126	; 0x7e
10006d4c:	00a4      	lsls	r4, r4, #2
10006d4e:	e78f      	b.n	10006c70 <_free_r+0xc4>
10006d50:	0033      	movs	r3, r6
10006d52:	4313      	orrs	r3, r2
10006d54:	604b      	str	r3, [r1, #4]
10006d56:	603a      	str	r2, [r7, #0]
10006d58:	e77c      	b.n	10006c54 <_free_r+0xa8>
10006d5a:	46c0      	nop			; (mov r8, r8)
10006d5c:	20002c18 	.word	0x20002c18
10006d60:	20002c20 	.word	0x20002c20
10006d64:	20003024 	.word	0x20003024
10006d68:	20022f10 	.word	0x20022f10
10006d6c:	00000554 	.word	0x00000554

10006d70 <__retarget_lock_acquire_recursive>:
10006d70:	4770      	bx	lr
10006d72:	46c0      	nop			; (mov r8, r8)

10006d74 <__retarget_lock_release_recursive>:
10006d74:	4770      	bx	lr
10006d76:	46c0      	nop			; (mov r8, r8)

10006d78 <_fini>:
10006d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10006d7a:	46c0      	nop			; (mov r8, r8)
10006d7c:	0000      	movs	r0, r0
	...

10006d80 <__mutex_exit_veneer>:
10006d80:	b401      	push	{r0}
10006d82:	4802      	ldr	r0, [pc, #8]	; (10006d8c <__mutex_exit_veneer+0xc>)
10006d84:	4684      	mov	ip, r0
10006d86:	bc01      	pop	{r0}
10006d88:	4760      	bx	ip
10006d8a:	bf00      	nop
10006d8c:	2000204d 	.word	0x2000204d

10006d90 <____aeabi_ldiv0_veneer>:
10006d90:	b401      	push	{r0}
10006d92:	4802      	ldr	r0, [pc, #8]	; (10006d9c <____aeabi_ldiv0_veneer+0xc>)
10006d94:	4684      	mov	ip, r0
10006d96:	bc01      	pop	{r0}
10006d98:	4760      	bx	ip
10006d9a:	bf00      	nop
10006d9c:	2000264d 	.word	0x2000264d

10006da0 <____aeabi_idiv0_veneer>:
10006da0:	b401      	push	{r0}
10006da2:	4802      	ldr	r0, [pc, #8]	; (10006dac <____aeabi_idiv0_veneer+0xc>)
10006da4:	4684      	mov	ip, r0
10006da6:	bc01      	pop	{r0}
10006da8:	4760      	bx	ip
10006daa:	bf00      	nop
10006dac:	2000264d 	.word	0x2000264d

10006db0 <__mutex_try_enter_veneer>:
10006db0:	b401      	push	{r0}
10006db2:	4802      	ldr	r0, [pc, #8]	; (10006dbc <__mutex_try_enter_veneer+0xc>)
10006db4:	4684      	mov	ip, r0
10006db6:	bc01      	pop	{r0}
10006db8:	4760      	bx	ip
10006dba:	bf00      	nop
10006dbc:	20001f71 	.word	0x20001f71

10006dc0 <__mutex_enter_timeout_ms_veneer>:
10006dc0:	b401      	push	{r0}
10006dc2:	4802      	ldr	r0, [pc, #8]	; (10006dcc <__mutex_enter_timeout_ms_veneer+0xc>)
10006dc4:	4684      	mov	ip, r0
10006dc6:	bc01      	pop	{r0}
10006dc8:	4760      	bx	ip
10006dca:	bf00      	nop
10006dcc:	20001fb5 	.word	0x20001fb5

10006dd0 <__flash_do_cmd.constprop.0_veneer>:
10006dd0:	b401      	push	{r0}
10006dd2:	4802      	ldr	r0, [pc, #8]	; (10006ddc <__flash_do_cmd.constprop.0_veneer+0xc>)
10006dd4:	4684      	mov	ip, r0
10006dd6:	bc01      	pop	{r0}
10006dd8:	4760      	bx	ip
10006dda:	bf00      	nop
10006ddc:	20001e81 	.word	0x20001e81

10006de0 <__mutex_enter_blocking_veneer>:
10006de0:	b401      	push	{r0}
10006de2:	4802      	ldr	r0, [pc, #8]	; (10006dec <__mutex_enter_blocking_veneer+0xc>)
10006de4:	4684      	mov	ip, r0
10006de6:	bc01      	pop	{r0}
10006de8:	4760      	bx	ip
10006dea:	bf00      	nop
10006dec:	20001f25 	.word	0x20001f25

Disassembly of section .data:

200000c0 <RenderAText>:
200000c0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
200000c2:	4644      	mov	r4, r8
200000c4:	b410      	push	{r4}
200000c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
200000c8:	4e49      	ldr	r6, [pc, #292]	; (200001f0 <RenderAText_pSioBase>)
200000ca:	6632      	str	r2, [r6, #96]	; 0x60
200000cc:	8a62      	ldrh	r2, [r4, #18]
200000ce:	6672      	str	r2, [r6, #100]	; 0x64
200000d0:	8925      	ldrh	r5, [r4, #8]
200000d2:	2703      	movs	r7, #3
200000d4:	43bd      	bics	r5, r7
200000d6:	9509      	str	r5, [sp, #36]	; 0x24
200000d8:	43b9      	bics	r1, r7
200000da:	43bb      	bics	r3, r7
200000dc:	9303      	str	r3, [sp, #12]
200000de:	6f75      	ldr	r5, [r6, #116]	; 0x74
200000e0:	6f32      	ldr	r2, [r6, #112]	; 0x70
200000e2:	022d      	lsls	r5, r5, #8
200000e4:	6963      	ldr	r3, [r4, #20]
200000e6:	442b      	add	r3, r5
200000e8:	8865      	ldrh	r5, [r4, #2]
200000ea:	436a      	muls	r2, r5
200000ec:	68e5      	ldr	r5, [r4, #12]
200000ee:	442a      	add	r2, r5
200000f0:	9202      	str	r2, [sp, #8]
200000f2:	08ce      	lsrs	r6, r1, #3
200000f4:	4432      	add	r2, r6
200000f6:	4432      	add	r2, r6
200000f8:	69a5      	ldr	r5, [r4, #24]
200000fa:	46a8      	mov	r8, r5
200000fc:	4d3b      	ldr	r5, [pc, #236]	; (200001ec <RenderAText_Addr>)
200000fe:	46ae      	mov	lr, r5
20000100:	074e      	lsls	r6, r1, #29
20000102:	d521      	bpl.n	20000148 <RenderAText+0x88>
20000104:	7856      	ldrb	r6, [r2, #1]
20000106:	4645      	mov	r5, r8
20000108:	0934      	lsrs	r4, r6, #4
2000010a:	5d2c      	ldrb	r4, [r5, r4]
2000010c:	0736      	lsls	r6, r6, #28
2000010e:	0f36      	lsrs	r6, r6, #28
20000110:	5dae      	ldrb	r6, [r5, r6]
20000112:	0225      	lsls	r5, r4, #8
20000114:	4325      	orrs	r5, r4
20000116:	042c      	lsls	r4, r5, #16
20000118:	432c      	orrs	r4, r5
2000011a:	0235      	lsls	r5, r6, #8
2000011c:	4335      	orrs	r5, r6
2000011e:	042e      	lsls	r6, r5, #16
20000120:	432e      	orrs	r6, r5
20000122:	4066      	eors	r6, r4
20000124:	7815      	ldrb	r5, [r2, #0]
20000126:	5d5d      	ldrb	r5, [r3, r5]
20000128:	3202      	adds	r2, #2
2000012a:	00ed      	lsls	r5, r5, #3
2000012c:	4475      	add	r5, lr
2000012e:	686f      	ldr	r7, [r5, #4]
20000130:	4037      	ands	r7, r6
20000132:	4067      	eors	r7, r4
20000134:	c080      	stmia	r0!, {r7}
20000136:	3104      	adds	r1, #4
20000138:	9f09      	ldr	r7, [sp, #36]	; 0x24
2000013a:	42b9      	cmp	r1, r7
2000013c:	d301      	bcc.n	20000142 <RenderAText+0x82>
2000013e:	2100      	movs	r1, #0
20000140:	9a02      	ldr	r2, [sp, #8]
20000142:	9f03      	ldr	r7, [sp, #12]
20000144:	3f04      	subs	r7, #4
20000146:	9703      	str	r7, [sp, #12]
20000148:	9f09      	ldr	r7, [sp, #36]	; 0x24
2000014a:	1a7f      	subs	r7, r7, r1

2000014c <RenderAText_OutLoop>:
2000014c:	9e03      	ldr	r6, [sp, #12]
2000014e:	42b7      	cmp	r7, r6
20000150:	d900      	bls.n	20000154 <RenderAText_OutLoop+0x8>
20000152:	4637      	mov	r7, r6
20000154:	2f08      	cmp	r7, #8
20000156:	d220      	bcs.n	2000019a <RenderAText_Last+0x3e>
20000158:	2f04      	cmp	r7, #4
2000015a:	d31b      	bcc.n	20000194 <RenderAText_Last+0x38>

2000015c <RenderAText_Last>:
2000015c:	7856      	ldrb	r6, [r2, #1]
2000015e:	4645      	mov	r5, r8
20000160:	0934      	lsrs	r4, r6, #4
20000162:	5d2c      	ldrb	r4, [r5, r4]
20000164:	0736      	lsls	r6, r6, #28
20000166:	0f36      	lsrs	r6, r6, #28
20000168:	5dae      	ldrb	r6, [r5, r6]
2000016a:	0225      	lsls	r5, r4, #8
2000016c:	4325      	orrs	r5, r4
2000016e:	042c      	lsls	r4, r5, #16
20000170:	432c      	orrs	r4, r5
20000172:	0235      	lsls	r5, r6, #8
20000174:	4335      	orrs	r5, r6
20000176:	042e      	lsls	r6, r5, #16
20000178:	432e      	orrs	r6, r5
2000017a:	4066      	eors	r6, r4
2000017c:	7815      	ldrb	r5, [r2, #0]
2000017e:	5d5d      	ldrb	r5, [r3, r5]
20000180:	3202      	adds	r2, #2
20000182:	00ed      	lsls	r5, r5, #3
20000184:	4475      	add	r5, lr
20000186:	6829      	ldr	r1, [r5, #0]
20000188:	4031      	ands	r1, r6
2000018a:	4061      	eors	r1, r4
2000018c:	c002      	stmia	r0!, {r1}
2000018e:	9a02      	ldr	r2, [sp, #8]
20000190:	2f04      	cmp	r7, #4
20000192:	d8db      	bhi.n	2000014c <RenderAText_OutLoop>
20000194:	bc10      	pop	{r4}
20000196:	46a0      	mov	r8, r4
20000198:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
2000019a:	08b9      	lsrs	r1, r7, #2
2000019c:	008d      	lsls	r5, r1, #2
2000019e:	1b76      	subs	r6, r6, r5
200001a0:	9603      	str	r6, [sp, #12]
200001a2:	3901      	subs	r1, #1

200001a4 <RenderAText_InLoop>:
200001a4:	7856      	ldrb	r6, [r2, #1]
200001a6:	4645      	mov	r5, r8
200001a8:	0934      	lsrs	r4, r6, #4
200001aa:	5d2c      	ldrb	r4, [r5, r4]
200001ac:	0736      	lsls	r6, r6, #28
200001ae:	0f36      	lsrs	r6, r6, #28
200001b0:	5dae      	ldrb	r6, [r5, r6]
200001b2:	0225      	lsls	r5, r4, #8
200001b4:	4325      	orrs	r5, r4
200001b6:	042c      	lsls	r4, r5, #16
200001b8:	432c      	orrs	r4, r5
200001ba:	0235      	lsls	r5, r6, #8
200001bc:	4335      	orrs	r5, r6
200001be:	042e      	lsls	r6, r5, #16
200001c0:	432e      	orrs	r6, r5
200001c2:	4066      	eors	r6, r4
200001c4:	7815      	ldrb	r5, [r2, #0]
200001c6:	5d5d      	ldrb	r5, [r3, r5]
200001c8:	3202      	adds	r2, #2
200001ca:	00ed      	lsls	r5, r5, #3
200001cc:	4475      	add	r5, lr
200001ce:	682f      	ldr	r7, [r5, #0]
200001d0:	4037      	ands	r7, r6
200001d2:	4067      	eors	r7, r4
200001d4:	c080      	stmia	r0!, {r7}
200001d6:	686f      	ldr	r7, [r5, #4]
200001d8:	4037      	ands	r7, r6
200001da:	4067      	eors	r7, r4
200001dc:	c080      	stmia	r0!, {r7}
200001de:	3902      	subs	r1, #2
200001e0:	d8e0      	bhi.n	200001a4 <RenderAText_InLoop>
200001e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
200001e4:	d0ba      	beq.n	2000015c <RenderAText_Last>
200001e6:	9a02      	ldr	r2, [sp, #8]
200001e8:	e7b0      	b.n	2000014c <RenderAText_OutLoop>
200001ea:	46c0      	nop			; (mov r8, r8)

200001ec <RenderAText_Addr>:
200001ec:	200218d8 	.word	0x200218d8

200001f0 <RenderAText_pSioBase>:
200001f0:	d0000000 	.word	0xd0000000

200001f4 <RenderAttrib8>:
200001f4:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
200001f6:	4644      	mov	r4, r8
200001f8:	b410      	push	{r4}
200001fa:	9c08      	ldr	r4, [sp, #32]
200001fc:	8925      	ldrh	r5, [r4, #8]
200001fe:	2703      	movs	r7, #3
20000200:	43bd      	bics	r5, r7
20000202:	9508      	str	r5, [sp, #32]
20000204:	43b9      	bics	r1, r7
20000206:	43bb      	bics	r3, r7
20000208:	9302      	str	r3, [sp, #8]
2000020a:	08d3      	lsrs	r3, r2, #3
2000020c:	8865      	ldrh	r5, [r4, #2]
2000020e:	436b      	muls	r3, r5
20000210:	6967      	ldr	r7, [r4, #20]
20000212:	443b      	add	r3, r7
20000214:	436a      	muls	r2, r5
20000216:	68e5      	ldr	r5, [r4, #12]
20000218:	442a      	add	r2, r5
2000021a:	9201      	str	r2, [sp, #4]
2000021c:	1a9b      	subs	r3, r3, r2
2000021e:	08ce      	lsrs	r6, r1, #3
20000220:	4432      	add	r2, r6
20000222:	69a5      	ldr	r5, [r4, #24]
20000224:	46a8      	mov	r8, r5
20000226:	4d39      	ldr	r5, [pc, #228]	; (2000030c <RenderAttrib8_Addr>)
20000228:	46ae      	mov	lr, r5
2000022a:	074e      	lsls	r6, r1, #29
2000022c:	d520      	bpl.n	20000270 <RenderAttrib8+0x7c>
2000022e:	5cd6      	ldrb	r6, [r2, r3]
20000230:	4645      	mov	r5, r8
20000232:	0934      	lsrs	r4, r6, #4
20000234:	5d2c      	ldrb	r4, [r5, r4]
20000236:	0736      	lsls	r6, r6, #28
20000238:	0f36      	lsrs	r6, r6, #28
2000023a:	5dae      	ldrb	r6, [r5, r6]
2000023c:	0225      	lsls	r5, r4, #8
2000023e:	4325      	orrs	r5, r4
20000240:	042c      	lsls	r4, r5, #16
20000242:	432c      	orrs	r4, r5
20000244:	0235      	lsls	r5, r6, #8
20000246:	4335      	orrs	r5, r6
20000248:	042e      	lsls	r6, r5, #16
2000024a:	432e      	orrs	r6, r5
2000024c:	4066      	eors	r6, r4
2000024e:	7815      	ldrb	r5, [r2, #0]
20000250:	3201      	adds	r2, #1
20000252:	00ed      	lsls	r5, r5, #3
20000254:	4475      	add	r5, lr
20000256:	686f      	ldr	r7, [r5, #4]
20000258:	4037      	ands	r7, r6
2000025a:	4067      	eors	r7, r4
2000025c:	c080      	stmia	r0!, {r7}
2000025e:	3104      	adds	r1, #4
20000260:	9f08      	ldr	r7, [sp, #32]
20000262:	42b9      	cmp	r1, r7
20000264:	d301      	bcc.n	2000026a <RenderAttrib8+0x76>
20000266:	2100      	movs	r1, #0
20000268:	9a01      	ldr	r2, [sp, #4]
2000026a:	9f02      	ldr	r7, [sp, #8]
2000026c:	3f04      	subs	r7, #4
2000026e:	9702      	str	r7, [sp, #8]
20000270:	9f08      	ldr	r7, [sp, #32]
20000272:	1a7f      	subs	r7, r7, r1

20000274 <RenderAttrib8_OutLoop>:
20000274:	9e02      	ldr	r6, [sp, #8]
20000276:	42b7      	cmp	r7, r6
20000278:	d900      	bls.n	2000027c <RenderAttrib8_OutLoop+0x8>
2000027a:	4637      	mov	r7, r6
2000027c:	2f08      	cmp	r7, #8
2000027e:	d21f      	bcs.n	200002c0 <RenderAttrib8_Last+0x3c>
20000280:	2f04      	cmp	r7, #4
20000282:	d31a      	bcc.n	200002ba <RenderAttrib8_Last+0x36>

20000284 <RenderAttrib8_Last>:
20000284:	5cd6      	ldrb	r6, [r2, r3]
20000286:	4645      	mov	r5, r8
20000288:	0934      	lsrs	r4, r6, #4
2000028a:	5d2c      	ldrb	r4, [r5, r4]
2000028c:	0736      	lsls	r6, r6, #28
2000028e:	0f36      	lsrs	r6, r6, #28
20000290:	5dae      	ldrb	r6, [r5, r6]
20000292:	0225      	lsls	r5, r4, #8
20000294:	4325      	orrs	r5, r4
20000296:	042c      	lsls	r4, r5, #16
20000298:	432c      	orrs	r4, r5
2000029a:	0235      	lsls	r5, r6, #8
2000029c:	4335      	orrs	r5, r6
2000029e:	042e      	lsls	r6, r5, #16
200002a0:	432e      	orrs	r6, r5
200002a2:	4066      	eors	r6, r4
200002a4:	7815      	ldrb	r5, [r2, #0]
200002a6:	3201      	adds	r2, #1
200002a8:	00ed      	lsls	r5, r5, #3
200002aa:	4475      	add	r5, lr
200002ac:	6829      	ldr	r1, [r5, #0]
200002ae:	4031      	ands	r1, r6
200002b0:	4061      	eors	r1, r4
200002b2:	c002      	stmia	r0!, {r1}
200002b4:	9a01      	ldr	r2, [sp, #4]
200002b6:	2f04      	cmp	r7, #4
200002b8:	d8dc      	bhi.n	20000274 <RenderAttrib8_OutLoop>
200002ba:	bc10      	pop	{r4}
200002bc:	46a0      	mov	r8, r4
200002be:	bdfc      	pop	{r2, r3, r4, r5, r6, r7, pc}
200002c0:	08b9      	lsrs	r1, r7, #2
200002c2:	008d      	lsls	r5, r1, #2
200002c4:	1b76      	subs	r6, r6, r5
200002c6:	9602      	str	r6, [sp, #8]
200002c8:	3901      	subs	r1, #1

200002ca <RenderAttrib8_InLoop>:
200002ca:	5cd6      	ldrb	r6, [r2, r3]
200002cc:	4645      	mov	r5, r8
200002ce:	0934      	lsrs	r4, r6, #4
200002d0:	5d2c      	ldrb	r4, [r5, r4]
200002d2:	0736      	lsls	r6, r6, #28
200002d4:	0f36      	lsrs	r6, r6, #28
200002d6:	5dae      	ldrb	r6, [r5, r6]
200002d8:	0225      	lsls	r5, r4, #8
200002da:	4325      	orrs	r5, r4
200002dc:	042c      	lsls	r4, r5, #16
200002de:	432c      	orrs	r4, r5
200002e0:	0235      	lsls	r5, r6, #8
200002e2:	4335      	orrs	r5, r6
200002e4:	042e      	lsls	r6, r5, #16
200002e6:	432e      	orrs	r6, r5
200002e8:	4066      	eors	r6, r4
200002ea:	7817      	ldrb	r7, [r2, #0]
200002ec:	3201      	adds	r2, #1
200002ee:	00ff      	lsls	r7, r7, #3
200002f0:	4477      	add	r7, lr
200002f2:	683d      	ldr	r5, [r7, #0]
200002f4:	4035      	ands	r5, r6
200002f6:	4065      	eors	r5, r4
200002f8:	687f      	ldr	r7, [r7, #4]
200002fa:	4037      	ands	r7, r6
200002fc:	4067      	eors	r7, r4
200002fe:	c0a0      	stmia	r0!, {r5, r7}
20000300:	3902      	subs	r1, #2
20000302:	d8e2      	bhi.n	200002ca <RenderAttrib8_InLoop>
20000304:	9f08      	ldr	r7, [sp, #32]
20000306:	d0bd      	beq.n	20000284 <RenderAttrib8_Last>
20000308:	9a01      	ldr	r2, [sp, #4]
2000030a:	e7b3      	b.n	20000274 <RenderAttrib8_OutLoop>

2000030c <RenderAttrib8_Addr>:
2000030c:	200218d8 	.word	0x200218d8

20000310 <MemSet4>:
20000310:	b5f0      	push	{r4, r5, r6, r7, lr}
20000312:	460b      	mov	r3, r1
20000314:	460c      	mov	r4, r1
20000316:	460d      	mov	r5, r1
20000318:	460e      	mov	r6, r1
2000031a:	460f      	mov	r7, r1
2000031c:	e004      	b.n	20000328 <MemSet4+0x18>
2000031e:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000320:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000322:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000324:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000326:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000328:	3a1e      	subs	r2, #30
2000032a:	daf8      	bge.n	2000031e <MemSet4+0xe>
2000032c:	321e      	adds	r2, #30
2000032e:	e000      	b.n	20000332 <MemSet4+0x22>
20000330:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000332:	3a06      	subs	r2, #6
20000334:	dafc      	bge.n	20000330 <MemSet4+0x20>
20000336:	3206      	adds	r2, #6
20000338:	e000      	b.n	2000033c <MemSet4+0x2c>
2000033a:	c002      	stmia	r0!, {r1}
2000033c:	3a01      	subs	r2, #1
2000033e:	dafc      	bge.n	2000033a <MemSet4+0x2a>
20000340:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

20000344 <RenderCText>:
20000344:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000346:	9c08      	ldr	r4, [sp, #32]
20000348:	4e40      	ldr	r6, [pc, #256]	; (2000044c <RenderCText_pSioBase>)
2000034a:	6632      	str	r2, [r6, #96]	; 0x60
2000034c:	8a62      	ldrh	r2, [r4, #18]
2000034e:	6672      	str	r2, [r6, #100]	; 0x64
20000350:	8925      	ldrh	r5, [r4, #8]
20000352:	2703      	movs	r7, #3
20000354:	43bd      	bics	r5, r7
20000356:	9508      	str	r5, [sp, #32]
20000358:	43b9      	bics	r1, r7
2000035a:	43bb      	bics	r3, r7
2000035c:	9302      	str	r3, [sp, #8]
2000035e:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000360:	6f32      	ldr	r2, [r6, #112]	; 0x70
20000362:	022d      	lsls	r5, r5, #8
20000364:	6963      	ldr	r3, [r4, #20]
20000366:	442b      	add	r3, r5
20000368:	8865      	ldrh	r5, [r4, #2]
2000036a:	436a      	muls	r2, r5
2000036c:	68e5      	ldr	r5, [r4, #12]
2000036e:	442a      	add	r2, r5
20000370:	9201      	str	r2, [sp, #4]
20000372:	08ce      	lsrs	r6, r1, #3
20000374:	4432      	add	r2, r6
20000376:	4432      	add	r2, r6
20000378:	4432      	add	r2, r6
2000037a:	4d33      	ldr	r5, [pc, #204]	; (20000448 <RenderCText_Addr>)
2000037c:	46ae      	mov	lr, r5
2000037e:	074e      	lsls	r6, r1, #29
20000380:	d51c      	bpl.n	200003bc <RenderCText+0x78>
20000382:	7815      	ldrb	r5, [r2, #0]
20000384:	5d5d      	ldrb	r5, [r3, r5]
20000386:	7854      	ldrb	r4, [r2, #1]
20000388:	0227      	lsls	r7, r4, #8
2000038a:	4327      	orrs	r7, r4
2000038c:	043c      	lsls	r4, r7, #16
2000038e:	433c      	orrs	r4, r7
20000390:	7896      	ldrb	r6, [r2, #2]
20000392:	3203      	adds	r2, #3
20000394:	0237      	lsls	r7, r6, #8
20000396:	4337      	orrs	r7, r6
20000398:	043e      	lsls	r6, r7, #16
2000039a:	433e      	orrs	r6, r7
2000039c:	4066      	eors	r6, r4
2000039e:	00ed      	lsls	r5, r5, #3
200003a0:	4475      	add	r5, lr
200003a2:	686f      	ldr	r7, [r5, #4]
200003a4:	4037      	ands	r7, r6
200003a6:	4067      	eors	r7, r4
200003a8:	c080      	stmia	r0!, {r7}
200003aa:	3104      	adds	r1, #4
200003ac:	9f08      	ldr	r7, [sp, #32]
200003ae:	42b9      	cmp	r1, r7
200003b0:	d301      	bcc.n	200003b6 <RenderCText+0x72>
200003b2:	2100      	movs	r1, #0
200003b4:	9a01      	ldr	r2, [sp, #4]
200003b6:	9f02      	ldr	r7, [sp, #8]
200003b8:	3f04      	subs	r7, #4
200003ba:	9702      	str	r7, [sp, #8]
200003bc:	9f08      	ldr	r7, [sp, #32]
200003be:	1a7f      	subs	r7, r7, r1

200003c0 <RenderCText_OutLoop>:
200003c0:	9e02      	ldr	r6, [sp, #8]
200003c2:	42b7      	cmp	r7, r6
200003c4:	d900      	bls.n	200003c8 <RenderCText_OutLoop+0x8>
200003c6:	4637      	mov	r7, r6
200003c8:	2f08      	cmp	r7, #8
200003ca:	d219      	bcs.n	20000400 <RenderCText_Last+0x30>
200003cc:	2f04      	cmp	r7, #4
200003ce:	d316      	bcc.n	200003fe <RenderCText_Last+0x2e>

200003d0 <RenderCText_Last>:
200003d0:	7815      	ldrb	r5, [r2, #0]
200003d2:	5d5d      	ldrb	r5, [r3, r5]
200003d4:	7854      	ldrb	r4, [r2, #1]
200003d6:	0221      	lsls	r1, r4, #8
200003d8:	4321      	orrs	r1, r4
200003da:	040c      	lsls	r4, r1, #16
200003dc:	430c      	orrs	r4, r1
200003de:	7896      	ldrb	r6, [r2, #2]
200003e0:	3203      	adds	r2, #3
200003e2:	0231      	lsls	r1, r6, #8
200003e4:	4331      	orrs	r1, r6
200003e6:	040e      	lsls	r6, r1, #16
200003e8:	430e      	orrs	r6, r1
200003ea:	4066      	eors	r6, r4
200003ec:	00ed      	lsls	r5, r5, #3
200003ee:	4475      	add	r5, lr
200003f0:	6829      	ldr	r1, [r5, #0]
200003f2:	4031      	ands	r1, r6
200003f4:	4061      	eors	r1, r4
200003f6:	c002      	stmia	r0!, {r1}
200003f8:	9a01      	ldr	r2, [sp, #4]
200003fa:	2f04      	cmp	r7, #4
200003fc:	d8e0      	bhi.n	200003c0 <RenderCText_OutLoop>
200003fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000400:	08b9      	lsrs	r1, r7, #2
20000402:	008d      	lsls	r5, r1, #2
20000404:	1b76      	subs	r6, r6, r5
20000406:	9602      	str	r6, [sp, #8]
20000408:	3901      	subs	r1, #1

2000040a <RenderCText_InLoop>:
2000040a:	7815      	ldrb	r5, [r2, #0]
2000040c:	5d5d      	ldrb	r5, [r3, r5]
2000040e:	7854      	ldrb	r4, [r2, #1]
20000410:	0227      	lsls	r7, r4, #8
20000412:	4327      	orrs	r7, r4
20000414:	043c      	lsls	r4, r7, #16
20000416:	433c      	orrs	r4, r7
20000418:	7896      	ldrb	r6, [r2, #2]
2000041a:	3203      	adds	r2, #3
2000041c:	0237      	lsls	r7, r6, #8
2000041e:	4337      	orrs	r7, r6
20000420:	043e      	lsls	r6, r7, #16
20000422:	433e      	orrs	r6, r7
20000424:	4066      	eors	r6, r4
20000426:	00ed      	lsls	r5, r5, #3
20000428:	4475      	add	r5, lr
2000042a:	682f      	ldr	r7, [r5, #0]
2000042c:	4037      	ands	r7, r6
2000042e:	4067      	eors	r7, r4
20000430:	c080      	stmia	r0!, {r7}
20000432:	686f      	ldr	r7, [r5, #4]
20000434:	4037      	ands	r7, r6
20000436:	4067      	eors	r7, r4
20000438:	c080      	stmia	r0!, {r7}
2000043a:	3902      	subs	r1, #2
2000043c:	d8e5      	bhi.n	2000040a <RenderCText_InLoop>
2000043e:	9f08      	ldr	r7, [sp, #32]
20000440:	d0c6      	beq.n	200003d0 <RenderCText_Last>
20000442:	9a01      	ldr	r2, [sp, #4]
20000444:	e7bc      	b.n	200003c0 <RenderCText_OutLoop>
20000446:	46c0      	nop			; (mov r8, r8)

20000448 <RenderCText_Addr>:
20000448:	200218d8 	.word	0x200218d8

2000044c <RenderCText_pSioBase>:
2000044c:	d0000000 	.word	0xd0000000

20000450 <RenderDText>:
20000450:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000452:	4644      	mov	r4, r8
20000454:	b410      	push	{r4}
20000456:	9c09      	ldr	r4, [sp, #36]	; 0x24
20000458:	4e68      	ldr	r6, [pc, #416]	; (200005fc <RenderDText_pSioBase>)
2000045a:	6632      	str	r2, [r6, #96]	; 0x60
2000045c:	7ce2      	ldrb	r2, [r4, #19]
2000045e:	6672      	str	r2, [r6, #100]	; 0x64
20000460:	8925      	ldrh	r5, [r4, #8]
20000462:	2703      	movs	r7, #3
20000464:	43bd      	bics	r5, r7
20000466:	9509      	str	r5, [sp, #36]	; 0x24
20000468:	43b9      	bics	r1, r7
2000046a:	43bb      	bics	r3, r7
2000046c:	9303      	str	r3, [sp, #12]
2000046e:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000470:	6f32      	ldr	r2, [r6, #112]	; 0x70
20000472:	022d      	lsls	r5, r5, #8
20000474:	6963      	ldr	r3, [r4, #20]
20000476:	442b      	add	r3, r5
20000478:	4698      	mov	r8, r3
2000047a:	8865      	ldrh	r5, [r4, #2]
2000047c:	436a      	muls	r2, r5
2000047e:	68e5      	ldr	r5, [r4, #12]
20000480:	442a      	add	r2, r5
20000482:	9202      	str	r2, [sp, #8]
20000484:	69a3      	ldr	r3, [r4, #24]
20000486:	9301      	str	r3, [sp, #4]
20000488:	08ce      	lsrs	r6, r1, #3
2000048a:	00b6      	lsls	r6, r6, #2
2000048c:	4433      	add	r3, r6
2000048e:	090e      	lsrs	r6, r1, #4
20000490:	4432      	add	r2, r6
20000492:	7ca4      	ldrb	r4, [r4, #18]
20000494:	0225      	lsls	r5, r4, #8
20000496:	4325      	orrs	r5, r4
20000498:	042c      	lsls	r4, r5, #16
2000049a:	432c      	orrs	r4, r5
2000049c:	4d56      	ldr	r5, [pc, #344]	; (200005f8 <RenderDText_Addr>)
2000049e:	46ae      	mov	lr, r5
200004a0:	070e      	lsls	r6, r1, #28
200004a2:	d037      	beq.n	20000514 <RenderDText+0xc4>
200004a4:	0f35      	lsrs	r5, r6, #28
200004a6:	2610      	movs	r6, #16
200004a8:	1b76      	subs	r6, r6, r5
200004aa:	1989      	adds	r1, r1, r6
200004ac:	9f03      	ldr	r7, [sp, #12]
200004ae:	1bbf      	subs	r7, r7, r6
200004b0:	9703      	str	r7, [sp, #12]
200004b2:	b402      	push	{r1}
200004b4:	7817      	ldrb	r7, [r2, #0]
200004b6:	3201      	adds	r2, #1
200004b8:	4447      	add	r7, r8
200004ba:	783f      	ldrb	r7, [r7, #0]
200004bc:	cb40      	ldmia	r3!, {r6}
200004be:	4066      	eors	r6, r4
200004c0:	00ff      	lsls	r7, r7, #3
200004c2:	4477      	add	r7, lr
200004c4:	6839      	ldr	r1, [r7, #0]
200004c6:	4031      	ands	r1, r6
200004c8:	4061      	eors	r1, r4
200004ca:	2d04      	cmp	r5, #4
200004cc:	d806      	bhi.n	200004dc <RenderDText+0x8c>
200004ce:	0c09      	lsrs	r1, r1, #16
200004d0:	7001      	strb	r1, [r0, #0]
200004d2:	7041      	strb	r1, [r0, #1]
200004d4:	0a09      	lsrs	r1, r1, #8
200004d6:	7081      	strb	r1, [r0, #2]
200004d8:	70c1      	strb	r1, [r0, #3]
200004da:	3004      	adds	r0, #4
200004dc:	cb40      	ldmia	r3!, {r6}
200004de:	4066      	eors	r6, r4
200004e0:	6879      	ldr	r1, [r7, #4]
200004e2:	4031      	ands	r1, r6
200004e4:	4061      	eors	r1, r4
200004e6:	2d08      	cmp	r5, #8
200004e8:	d806      	bhi.n	200004f8 <RenderDText+0xa8>
200004ea:	7001      	strb	r1, [r0, #0]
200004ec:	7041      	strb	r1, [r0, #1]
200004ee:	0a09      	lsrs	r1, r1, #8
200004f0:	7081      	strb	r1, [r0, #2]
200004f2:	70c1      	strb	r1, [r0, #3]
200004f4:	0209      	lsls	r1, r1, #8
200004f6:	3004      	adds	r0, #4
200004f8:	0c09      	lsrs	r1, r1, #16
200004fa:	7001      	strb	r1, [r0, #0]
200004fc:	7041      	strb	r1, [r0, #1]
200004fe:	0a09      	lsrs	r1, r1, #8
20000500:	7081      	strb	r1, [r0, #2]
20000502:	70c1      	strb	r1, [r0, #3]
20000504:	3004      	adds	r0, #4
20000506:	bc02      	pop	{r1}
20000508:	9f09      	ldr	r7, [sp, #36]	; 0x24
2000050a:	42b9      	cmp	r1, r7
2000050c:	d302      	bcc.n	20000514 <RenderDText+0xc4>
2000050e:	2100      	movs	r1, #0
20000510:	9a02      	ldr	r2, [sp, #8]
20000512:	9b01      	ldr	r3, [sp, #4]
20000514:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000516:	1a7f      	subs	r7, r7, r1

20000518 <RenderDText_OutLoop>:
20000518:	9e03      	ldr	r6, [sp, #12]
2000051a:	42b7      	cmp	r7, r6
2000051c:	d900      	bls.n	20000520 <RenderDText_OutLoop+0x8>
2000051e:	4637      	mov	r7, r6
20000520:	2f10      	cmp	r7, #16
20000522:	d232      	bcs.n	2000058a <RenderDText_Last+0x60>
20000524:	2f04      	cmp	r7, #4
20000526:	d32d      	bcc.n	20000584 <RenderDText_Last+0x5a>
20000528:	4639      	mov	r1, r7

2000052a <RenderDText_Last>:
2000052a:	b480      	push	{r7}
2000052c:	7817      	ldrb	r7, [r2, #0]
2000052e:	3201      	adds	r2, #1
20000530:	4447      	add	r7, r8
20000532:	783f      	ldrb	r7, [r7, #0]
20000534:	cb40      	ldmia	r3!, {r6}
20000536:	4066      	eors	r6, r4
20000538:	00ff      	lsls	r7, r7, #3
2000053a:	4477      	add	r7, lr
2000053c:	683d      	ldr	r5, [r7, #0]
2000053e:	4035      	ands	r5, r6
20000540:	4065      	eors	r5, r4
20000542:	7005      	strb	r5, [r0, #0]
20000544:	7045      	strb	r5, [r0, #1]
20000546:	0a2d      	lsrs	r5, r5, #8
20000548:	7085      	strb	r5, [r0, #2]
2000054a:	70c5      	strb	r5, [r0, #3]
2000054c:	3004      	adds	r0, #4
2000054e:	2904      	cmp	r1, #4
20000550:	d913      	bls.n	2000057a <RenderDText_Last+0x50>
20000552:	0a2d      	lsrs	r5, r5, #8
20000554:	7005      	strb	r5, [r0, #0]
20000556:	7045      	strb	r5, [r0, #1]
20000558:	0a2d      	lsrs	r5, r5, #8
2000055a:	7085      	strb	r5, [r0, #2]
2000055c:	70c5      	strb	r5, [r0, #3]
2000055e:	3004      	adds	r0, #4
20000560:	2908      	cmp	r1, #8
20000562:	d90a      	bls.n	2000057a <RenderDText_Last+0x50>
20000564:	cb40      	ldmia	r3!, {r6}
20000566:	4066      	eors	r6, r4
20000568:	687f      	ldr	r7, [r7, #4]
2000056a:	4037      	ands	r7, r6
2000056c:	4067      	eors	r7, r4
2000056e:	7007      	strb	r7, [r0, #0]
20000570:	7047      	strb	r7, [r0, #1]
20000572:	0a3f      	lsrs	r7, r7, #8
20000574:	7087      	strb	r7, [r0, #2]
20000576:	70c7      	strb	r7, [r0, #3]
20000578:	3004      	adds	r0, #4
2000057a:	bc80      	pop	{r7}
2000057c:	9a02      	ldr	r2, [sp, #8]
2000057e:	9b01      	ldr	r3, [sp, #4]
20000580:	2f10      	cmp	r7, #16
20000582:	d2c9      	bcs.n	20000518 <RenderDText_OutLoop>
20000584:	bc10      	pop	{r4}
20000586:	46a0      	mov	r8, r4
20000588:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
2000058a:	08b9      	lsrs	r1, r7, #2
2000058c:	008d      	lsls	r5, r1, #2
2000058e:	1b76      	subs	r6, r6, r5
20000590:	9603      	str	r6, [sp, #12]
20000592:	3903      	subs	r1, #3

20000594 <RenderDText_InLoop>:
20000594:	7817      	ldrb	r7, [r2, #0]
20000596:	3201      	adds	r2, #1
20000598:	4447      	add	r7, r8
2000059a:	783f      	ldrb	r7, [r7, #0]
2000059c:	cb40      	ldmia	r3!, {r6}
2000059e:	4066      	eors	r6, r4
200005a0:	00ff      	lsls	r7, r7, #3
200005a2:	4477      	add	r7, lr
200005a4:	683d      	ldr	r5, [r7, #0]
200005a6:	4035      	ands	r5, r6
200005a8:	4065      	eors	r5, r4
200005aa:	7005      	strb	r5, [r0, #0]
200005ac:	7045      	strb	r5, [r0, #1]
200005ae:	0a2d      	lsrs	r5, r5, #8
200005b0:	7085      	strb	r5, [r0, #2]
200005b2:	70c5      	strb	r5, [r0, #3]
200005b4:	0a2d      	lsrs	r5, r5, #8
200005b6:	7105      	strb	r5, [r0, #4]
200005b8:	7145      	strb	r5, [r0, #5]
200005ba:	0a2d      	lsrs	r5, r5, #8
200005bc:	7185      	strb	r5, [r0, #6]
200005be:	71c5      	strb	r5, [r0, #7]
200005c0:	3008      	adds	r0, #8
200005c2:	cb40      	ldmia	r3!, {r6}
200005c4:	4066      	eors	r6, r4
200005c6:	687f      	ldr	r7, [r7, #4]
200005c8:	4037      	ands	r7, r6
200005ca:	4067      	eors	r7, r4
200005cc:	7007      	strb	r7, [r0, #0]
200005ce:	7047      	strb	r7, [r0, #1]
200005d0:	0a3f      	lsrs	r7, r7, #8
200005d2:	7087      	strb	r7, [r0, #2]
200005d4:	70c7      	strb	r7, [r0, #3]
200005d6:	0a3f      	lsrs	r7, r7, #8
200005d8:	7107      	strb	r7, [r0, #4]
200005da:	7147      	strb	r7, [r0, #5]
200005dc:	0a3f      	lsrs	r7, r7, #8
200005de:	7187      	strb	r7, [r0, #6]
200005e0:	71c7      	strb	r7, [r0, #7]
200005e2:	3008      	adds	r0, #8
200005e4:	3904      	subs	r1, #4
200005e6:	d8d5      	bhi.n	20000594 <RenderDText_InLoop>
200005e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
200005ea:	3103      	adds	r1, #3
200005ec:	0089      	lsls	r1, r1, #2
200005ee:	d19c      	bne.n	2000052a <RenderDText_Last>
200005f0:	9a02      	ldr	r2, [sp, #8]
200005f2:	9b01      	ldr	r3, [sp, #4]
200005f4:	e790      	b.n	20000518 <RenderDText_OutLoop>
200005f6:	46c0      	nop			; (mov r8, r8)

200005f8 <RenderDText_Addr>:
200005f8:	200218d8 	.word	0x200218d8

200005fc <RenderDText_pSioBase>:
200005fc:	d0000000 	.word	0xd0000000

20000600 <RenderFastSprite>:
20000600:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000602:	6817      	ldr	r7, [r2, #0]
20000604:	46be      	mov	lr, r7
20000606:	8c17      	ldrh	r7, [r2, #32]
20000608:	9701      	str	r7, [sp, #4]
2000060a:	8ad2      	ldrh	r2, [r2, #22]
2000060c:	2100      	movs	r1, #0
2000060e:	9f01      	ldr	r7, [sp, #4]
20000610:	3f01      	subs	r7, #1
20000612:	d332      	bcc.n	2000067a <RenderFastSprite+0x7a>
20000614:	9701      	str	r7, [sp, #4]
20000616:	4677      	mov	r7, lr
20000618:	cf08      	ldmia	r7!, {r3}
2000061a:	46be      	mov	lr, r7
2000061c:	8a5f      	ldrh	r7, [r3, #18]
2000061e:	b23f      	sxth	r7, r7
20000620:	9c00      	ldr	r4, [sp, #0]
20000622:	1be4      	subs	r4, r4, r7
20000624:	d4f3      	bmi.n	2000060e <RenderFastSprite+0xe>
20000626:	8adf      	ldrh	r7, [r3, #22]
20000628:	42bc      	cmp	r4, r7
2000062a:	daf0      	bge.n	2000060e <RenderFastSprite+0xe>
2000062c:	685f      	ldr	r7, [r3, #4]
2000062e:	5d3d      	ldrb	r5, [r7, r4]
20000630:	00ad      	lsls	r5, r5, #2
20000632:	689f      	ldr	r7, [r3, #8]
20000634:	5d3e      	ldrb	r6, [r7, r4]
20000636:	00b6      	lsls	r6, r6, #2
20000638:	8b1f      	ldrh	r7, [r3, #24]
2000063a:	437c      	muls	r4, r7
2000063c:	681f      	ldr	r7, [r3, #0]
2000063e:	443c      	add	r4, r7
20000640:	8a1b      	ldrh	r3, [r3, #16]
20000642:	b21b      	sxth	r3, r3
20000644:	195b      	adds	r3, r3, r5
20000646:	1acf      	subs	r7, r1, r3
20000648:	dd02      	ble.n	20000650 <RenderFastSprite+0x50>
2000064a:	19ed      	adds	r5, r5, r7
2000064c:	1bf6      	subs	r6, r6, r7
2000064e:	460b      	mov	r3, r1
20000650:	1ad7      	subs	r7, r2, r3
20000652:	42be      	cmp	r6, r7
20000654:	dd00      	ble.n	20000658 <RenderFastSprite+0x58>
20000656:	463e      	mov	r6, r7
20000658:	2703      	movs	r7, #3
2000065a:	43bb      	bics	r3, r7
2000065c:	43bd      	bics	r5, r7
2000065e:	43be      	bics	r6, r7
20000660:	ddd5      	ble.n	2000060e <RenderFastSprite+0xe>
20000662:	1a5f      	subs	r7, r3, r1
20000664:	dd04      	ble.n	20000670 <RenderFastSprite+0x70>
20000666:	08bf      	lsrs	r7, r7, #2
20000668:	c080      	stmia	r0!, {r7}
2000066a:	9f02      	ldr	r7, [sp, #8]
2000066c:	c080      	stmia	r0!, {r7}
2000066e:	4619      	mov	r1, r3
20000670:	1967      	adds	r7, r4, r5
20000672:	08b4      	lsrs	r4, r6, #2
20000674:	c090      	stmia	r0!, {r4, r7}
20000676:	1989      	adds	r1, r1, r6
20000678:	e7c9      	b.n	2000060e <RenderFastSprite+0xe>
2000067a:	1a52      	subs	r2, r2, r1
2000067c:	d902      	bls.n	20000684 <RenderFastSprite+0x84>
2000067e:	0892      	lsrs	r2, r2, #2
20000680:	9b02      	ldr	r3, [sp, #8]
20000682:	c00c      	stmia	r0!, {r2, r3}
20000684:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

20000688 <RenderFText>:
20000688:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
2000068a:	9c08      	ldr	r4, [sp, #32]
2000068c:	4e3a      	ldr	r6, [pc, #232]	; (20000778 <RenderFText_pSioBase>)
2000068e:	6632      	str	r2, [r6, #96]	; 0x60
20000690:	8a62      	ldrh	r2, [r4, #18]
20000692:	6672      	str	r2, [r6, #100]	; 0x64
20000694:	8925      	ldrh	r5, [r4, #8]
20000696:	2703      	movs	r7, #3
20000698:	43bd      	bics	r5, r7
2000069a:	9508      	str	r5, [sp, #32]
2000069c:	43b9      	bics	r1, r7
2000069e:	43bb      	bics	r3, r7
200006a0:	9302      	str	r3, [sp, #8]
200006a2:	6f75      	ldr	r5, [r6, #116]	; 0x74
200006a4:	6f32      	ldr	r2, [r6, #112]	; 0x70
200006a6:	022d      	lsls	r5, r5, #8
200006a8:	6963      	ldr	r3, [r4, #20]
200006aa:	442b      	add	r3, r5
200006ac:	8865      	ldrh	r5, [r4, #2]
200006ae:	436a      	muls	r2, r5
200006b0:	68e5      	ldr	r5, [r4, #12]
200006b2:	442a      	add	r2, r5
200006b4:	9201      	str	r2, [sp, #4]
200006b6:	08ce      	lsrs	r6, r1, #3
200006b8:	0076      	lsls	r6, r6, #1
200006ba:	4432      	add	r2, r6
200006bc:	7e24      	ldrb	r4, [r4, #24]
200006be:	0225      	lsls	r5, r4, #8
200006c0:	4325      	orrs	r5, r4
200006c2:	042c      	lsls	r4, r5, #16
200006c4:	432c      	orrs	r4, r5
200006c6:	4d2b      	ldr	r5, [pc, #172]	; (20000774 <RenderFText_Addr>)
200006c8:	46ae      	mov	lr, r5
200006ca:	074e      	lsls	r6, r1, #29
200006cc:	d517      	bpl.n	200006fe <RenderFText+0x76>
200006ce:	7815      	ldrb	r5, [r2, #0]
200006d0:	5d5d      	ldrb	r5, [r3, r5]
200006d2:	7856      	ldrb	r6, [r2, #1]
200006d4:	3202      	adds	r2, #2
200006d6:	0237      	lsls	r7, r6, #8
200006d8:	4337      	orrs	r7, r6
200006da:	043e      	lsls	r6, r7, #16
200006dc:	433e      	orrs	r6, r7
200006de:	4066      	eors	r6, r4
200006e0:	00ed      	lsls	r5, r5, #3
200006e2:	4475      	add	r5, lr
200006e4:	686f      	ldr	r7, [r5, #4]
200006e6:	4037      	ands	r7, r6
200006e8:	4067      	eors	r7, r4
200006ea:	c080      	stmia	r0!, {r7}
200006ec:	3104      	adds	r1, #4
200006ee:	9f08      	ldr	r7, [sp, #32]
200006f0:	42b9      	cmp	r1, r7
200006f2:	d301      	bcc.n	200006f8 <RenderFText+0x70>
200006f4:	2100      	movs	r1, #0
200006f6:	9a01      	ldr	r2, [sp, #4]
200006f8:	9f02      	ldr	r7, [sp, #8]
200006fa:	3f04      	subs	r7, #4
200006fc:	9702      	str	r7, [sp, #8]
200006fe:	9f08      	ldr	r7, [sp, #32]
20000700:	1a7f      	subs	r7, r7, r1

20000702 <RenderFText_OutLoop>:
20000702:	9e02      	ldr	r6, [sp, #8]
20000704:	42b7      	cmp	r7, r6
20000706:	d900      	bls.n	2000070a <RenderFText_OutLoop+0x8>
20000708:	4637      	mov	r7, r6
2000070a:	2f08      	cmp	r7, #8
2000070c:	d214      	bcs.n	20000738 <RenderFText_Last+0x26>
2000070e:	2f04      	cmp	r7, #4
20000710:	d311      	bcc.n	20000736 <RenderFText_Last+0x24>

20000712 <RenderFText_Last>:
20000712:	7815      	ldrb	r5, [r2, #0]
20000714:	5d5d      	ldrb	r5, [r3, r5]
20000716:	7856      	ldrb	r6, [r2, #1]
20000718:	3202      	adds	r2, #2
2000071a:	0231      	lsls	r1, r6, #8
2000071c:	4331      	orrs	r1, r6
2000071e:	040e      	lsls	r6, r1, #16
20000720:	430e      	orrs	r6, r1
20000722:	4066      	eors	r6, r4
20000724:	00ed      	lsls	r5, r5, #3
20000726:	4475      	add	r5, lr
20000728:	6829      	ldr	r1, [r5, #0]
2000072a:	4031      	ands	r1, r6
2000072c:	4061      	eors	r1, r4
2000072e:	c002      	stmia	r0!, {r1}
20000730:	9a01      	ldr	r2, [sp, #4]
20000732:	2f04      	cmp	r7, #4
20000734:	d8e5      	bhi.n	20000702 <RenderFText_OutLoop>
20000736:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000738:	08b9      	lsrs	r1, r7, #2
2000073a:	008d      	lsls	r5, r1, #2
2000073c:	1b76      	subs	r6, r6, r5
2000073e:	9602      	str	r6, [sp, #8]
20000740:	3901      	subs	r1, #1

20000742 <RenderFText_InLoop>:
20000742:	7815      	ldrb	r5, [r2, #0]
20000744:	5d5d      	ldrb	r5, [r3, r5]
20000746:	7856      	ldrb	r6, [r2, #1]
20000748:	3202      	adds	r2, #2
2000074a:	0237      	lsls	r7, r6, #8
2000074c:	4337      	orrs	r7, r6
2000074e:	043e      	lsls	r6, r7, #16
20000750:	433e      	orrs	r6, r7
20000752:	4066      	eors	r6, r4
20000754:	00ed      	lsls	r5, r5, #3
20000756:	4475      	add	r5, lr
20000758:	682f      	ldr	r7, [r5, #0]
2000075a:	4037      	ands	r7, r6
2000075c:	4067      	eors	r7, r4
2000075e:	c080      	stmia	r0!, {r7}
20000760:	686f      	ldr	r7, [r5, #4]
20000762:	4037      	ands	r7, r6
20000764:	4067      	eors	r7, r4
20000766:	c080      	stmia	r0!, {r7}
20000768:	3902      	subs	r1, #2
2000076a:	d8ea      	bhi.n	20000742 <RenderFText_InLoop>
2000076c:	9f08      	ldr	r7, [sp, #32]
2000076e:	d0d0      	beq.n	20000712 <RenderFText_Last>
20000770:	9a01      	ldr	r2, [sp, #4]
20000772:	e7c6      	b.n	20000702 <RenderFText_OutLoop>

20000774 <RenderFText_Addr>:
20000774:	200218d8 	.word	0x200218d8

20000778 <RenderFText_pSioBase>:
20000778:	d0000000 	.word	0xd0000000

2000077c <RenderGraph1>:
2000077c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000077e:	9c06      	ldr	r4, [sp, #24]
20000780:	8925      	ldrh	r5, [r4, #8]
20000782:	2703      	movs	r7, #3
20000784:	43bd      	bics	r5, r7
20000786:	9506      	str	r5, [sp, #24]
20000788:	43b9      	bics	r1, r7
2000078a:	43bb      	bics	r3, r7
2000078c:	9300      	str	r3, [sp, #0]
2000078e:	8865      	ldrh	r5, [r4, #2]
20000790:	436a      	muls	r2, r5
20000792:	68e5      	ldr	r5, [r4, #12]
20000794:	442a      	add	r2, r5
20000796:	4696      	mov	lr, r2
20000798:	08ca      	lsrs	r2, r1, #3
2000079a:	4472      	add	r2, lr
2000079c:	7d66      	ldrb	r6, [r4, #21]
2000079e:	0237      	lsls	r7, r6, #8
200007a0:	4337      	orrs	r7, r6
200007a2:	043e      	lsls	r6, r7, #16
200007a4:	433e      	orrs	r6, r7
200007a6:	7d24      	ldrb	r4, [r4, #20]
200007a8:	0225      	lsls	r5, r4, #8
200007aa:	4325      	orrs	r5, r4
200007ac:	042c      	lsls	r4, r5, #16
200007ae:	432c      	orrs	r4, r5
200007b0:	4066      	eors	r6, r4
200007b2:	4b20      	ldr	r3, [pc, #128]	; (20000834 <RenderGraph1_Addr>)
200007b4:	074d      	lsls	r5, r1, #29
200007b6:	d510      	bpl.n	200007da <RenderGraph1+0x5e>
200007b8:	7815      	ldrb	r5, [r2, #0]
200007ba:	3201      	adds	r2, #1
200007bc:	00ed      	lsls	r5, r5, #3
200007be:	441d      	add	r5, r3
200007c0:	686f      	ldr	r7, [r5, #4]
200007c2:	4037      	ands	r7, r6
200007c4:	4067      	eors	r7, r4
200007c6:	c080      	stmia	r0!, {r7}
200007c8:	3104      	adds	r1, #4
200007ca:	9f06      	ldr	r7, [sp, #24]
200007cc:	42b9      	cmp	r1, r7
200007ce:	d301      	bcc.n	200007d4 <RenderGraph1+0x58>
200007d0:	2100      	movs	r1, #0
200007d2:	4672      	mov	r2, lr
200007d4:	9f00      	ldr	r7, [sp, #0]
200007d6:	3f04      	subs	r7, #4
200007d8:	9700      	str	r7, [sp, #0]
200007da:	9f06      	ldr	r7, [sp, #24]
200007dc:	1a7f      	subs	r7, r7, r1

200007de <RenderGraph1_OutLoop>:
200007de:	9d00      	ldr	r5, [sp, #0]
200007e0:	42af      	cmp	r7, r5
200007e2:	d900      	bls.n	200007e6 <RenderGraph1_OutLoop+0x8>
200007e4:	462f      	mov	r7, r5
200007e6:	2f08      	cmp	r7, #8
200007e8:	d20d      	bcs.n	20000806 <RenderGraph1_Last+0x18>
200007ea:	2f04      	cmp	r7, #4
200007ec:	d30a      	bcc.n	20000804 <RenderGraph1_Last+0x16>

200007ee <RenderGraph1_Last>:
200007ee:	7815      	ldrb	r5, [r2, #0]
200007f0:	3201      	adds	r2, #1
200007f2:	00ed      	lsls	r5, r5, #3
200007f4:	441d      	add	r5, r3
200007f6:	6829      	ldr	r1, [r5, #0]
200007f8:	4031      	ands	r1, r6
200007fa:	4061      	eors	r1, r4
200007fc:	c002      	stmia	r0!, {r1}
200007fe:	4672      	mov	r2, lr
20000800:	2f04      	cmp	r7, #4
20000802:	d8ec      	bhi.n	200007de <RenderGraph1_OutLoop>
20000804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20000806:	08b9      	lsrs	r1, r7, #2
20000808:	008f      	lsls	r7, r1, #2
2000080a:	1bed      	subs	r5, r5, r7
2000080c:	9500      	str	r5, [sp, #0]
2000080e:	3901      	subs	r1, #1

20000810 <RenderGraph1_InLoop>:
20000810:	7815      	ldrb	r5, [r2, #0]
20000812:	3201      	adds	r2, #1
20000814:	00ed      	lsls	r5, r5, #3
20000816:	441d      	add	r5, r3
20000818:	682f      	ldr	r7, [r5, #0]
2000081a:	4037      	ands	r7, r6
2000081c:	4067      	eors	r7, r4
2000081e:	c080      	stmia	r0!, {r7}
20000820:	686f      	ldr	r7, [r5, #4]
20000822:	4037      	ands	r7, r6
20000824:	4067      	eors	r7, r4
20000826:	c080      	stmia	r0!, {r7}
20000828:	3902      	subs	r1, #2
2000082a:	d8f1      	bhi.n	20000810 <RenderGraph1_InLoop>
2000082c:	9f06      	ldr	r7, [sp, #24]
2000082e:	d0de      	beq.n	200007ee <RenderGraph1_Last>
20000830:	4672      	mov	r2, lr
20000832:	e7d4      	b.n	200007de <RenderGraph1_OutLoop>

20000834 <RenderGraph1_Addr>:
20000834:	200218d8 	.word	0x200218d8

20000838 <RenderGraph2>:
20000838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000083a:	9c06      	ldr	r4, [sp, #24]
2000083c:	8927      	ldrh	r7, [r4, #8]
2000083e:	2603      	movs	r6, #3
20000840:	43b7      	bics	r7, r6
20000842:	43b1      	bics	r1, r6
20000844:	43b3      	bics	r3, r6
20000846:	9300      	str	r3, [sp, #0]
20000848:	8865      	ldrh	r5, [r4, #2]
2000084a:	436a      	muls	r2, r5
2000084c:	68e5      	ldr	r5, [r4, #12]
2000084e:	442a      	add	r2, r5
20000850:	4696      	mov	lr, r2
20000852:	088e      	lsrs	r6, r1, #2
20000854:	4432      	add	r2, r6
20000856:	6963      	ldr	r3, [r4, #20]
20000858:	1a7e      	subs	r6, r7, r1

2000085a <RenderGraph2_OutLoop>:
2000085a:	9c00      	ldr	r4, [sp, #0]
2000085c:	42a6      	cmp	r6, r4
2000085e:	d900      	bls.n	20000862 <RenderGraph2_OutLoop+0x8>
20000860:	4626      	mov	r6, r4
20000862:	2e04      	cmp	r6, #4
20000864:	d200      	bcs.n	20000868 <RenderGraph2_OutLoop+0xe>
20000866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20000868:	08b1      	lsrs	r1, r6, #2
2000086a:	008e      	lsls	r6, r1, #2
2000086c:	1ba4      	subs	r4, r4, r6
2000086e:	9400      	str	r4, [sp, #0]
20000870:	0849      	lsrs	r1, r1, #1
20000872:	d306      	bcc.n	20000882 <RenderGraph2_InLoop>
20000874:	7814      	ldrb	r4, [r2, #0]
20000876:	3201      	adds	r2, #1
20000878:	00a4      	lsls	r4, r4, #2
2000087a:	591d      	ldr	r5, [r3, r4]
2000087c:	c020      	stmia	r0!, {r5}
2000087e:	4209      	tst	r1, r1
20000880:	d009      	beq.n	20000896 <RenderGraph2_EndLoop>

20000882 <RenderGraph2_InLoop>:
20000882:	7814      	ldrb	r4, [r2, #0]
20000884:	00a4      	lsls	r4, r4, #2
20000886:	591d      	ldr	r5, [r3, r4]
20000888:	7854      	ldrb	r4, [r2, #1]
2000088a:	3202      	adds	r2, #2
2000088c:	00a4      	lsls	r4, r4, #2
2000088e:	591e      	ldr	r6, [r3, r4]
20000890:	c060      	stmia	r0!, {r5, r6}
20000892:	3901      	subs	r1, #1
20000894:	d1f5      	bne.n	20000882 <RenderGraph2_InLoop>

20000896 <RenderGraph2_EndLoop>:
20000896:	463e      	mov	r6, r7
20000898:	4672      	mov	r2, lr
2000089a:	e7de      	b.n	2000085a <RenderGraph2_OutLoop>

2000089c <RenderGraph4>:
2000089c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000089e:	9c06      	ldr	r4, [sp, #24]
200008a0:	8927      	ldrh	r7, [r4, #8]
200008a2:	2603      	movs	r6, #3
200008a4:	43b7      	bics	r7, r6
200008a6:	9706      	str	r7, [sp, #24]
200008a8:	43b1      	bics	r1, r6
200008aa:	43b3      	bics	r3, r6
200008ac:	9300      	str	r3, [sp, #0]
200008ae:	8865      	ldrh	r5, [r4, #2]
200008b0:	436a      	muls	r2, r5
200008b2:	68e5      	ldr	r5, [r4, #12]
200008b4:	442a      	add	r2, r5
200008b6:	4696      	mov	lr, r2
200008b8:	084e      	lsrs	r6, r1, #1
200008ba:	4432      	add	r2, r6
200008bc:	6963      	ldr	r3, [r4, #20]
200008be:	9e06      	ldr	r6, [sp, #24]
200008c0:	1a76      	subs	r6, r6, r1

200008c2 <RenderGraph4_OutLoop>:
200008c2:	9c00      	ldr	r4, [sp, #0]
200008c4:	42a6      	cmp	r6, r4
200008c6:	d900      	bls.n	200008ca <RenderGraph4_OutLoop+0x8>
200008c8:	4626      	mov	r6, r4
200008ca:	2e04      	cmp	r6, #4
200008cc:	d200      	bcs.n	200008d0 <RenderGraph4_OutLoop+0xe>
200008ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
200008d0:	08b1      	lsrs	r1, r6, #2
200008d2:	008e      	lsls	r6, r1, #2
200008d4:	1ba4      	subs	r4, r4, r6
200008d6:	9400      	str	r4, [sp, #0]
200008d8:	0849      	lsrs	r1, r1, #1
200008da:	d30b      	bcc.n	200008f4 <RenderGraph4_InLoop>
200008dc:	7814      	ldrb	r4, [r2, #0]
200008de:	0064      	lsls	r4, r4, #1
200008e0:	5b1d      	ldrh	r5, [r3, r4]
200008e2:	7854      	ldrb	r4, [r2, #1]
200008e4:	3202      	adds	r2, #2
200008e6:	0064      	lsls	r4, r4, #1
200008e8:	5b1e      	ldrh	r6, [r3, r4]
200008ea:	0436      	lsls	r6, r6, #16
200008ec:	4335      	orrs	r5, r6
200008ee:	c020      	stmia	r0!, {r5}
200008f0:	4209      	tst	r1, r1
200008f2:	d013      	beq.n	2000091c <RenderGraph4_EndLoop>

200008f4 <RenderGraph4_InLoop>:
200008f4:	7814      	ldrb	r4, [r2, #0]
200008f6:	0064      	lsls	r4, r4, #1
200008f8:	5b1d      	ldrh	r5, [r3, r4]
200008fa:	7854      	ldrb	r4, [r2, #1]
200008fc:	0064      	lsls	r4, r4, #1
200008fe:	5b1e      	ldrh	r6, [r3, r4]
20000900:	0436      	lsls	r6, r6, #16
20000902:	4335      	orrs	r5, r6
20000904:	7894      	ldrb	r4, [r2, #2]
20000906:	0064      	lsls	r4, r4, #1
20000908:	5b1e      	ldrh	r6, [r3, r4]
2000090a:	78d4      	ldrb	r4, [r2, #3]
2000090c:	3204      	adds	r2, #4
2000090e:	0064      	lsls	r4, r4, #1
20000910:	5b1f      	ldrh	r7, [r3, r4]
20000912:	043f      	lsls	r7, r7, #16
20000914:	433e      	orrs	r6, r7
20000916:	c060      	stmia	r0!, {r5, r6}
20000918:	3901      	subs	r1, #1
2000091a:	d1eb      	bne.n	200008f4 <RenderGraph4_InLoop>

2000091c <RenderGraph4_EndLoop>:
2000091c:	9e06      	ldr	r6, [sp, #24]
2000091e:	4672      	mov	r2, lr
20000920:	e7cf      	b.n	200008c2 <RenderGraph4_OutLoop>

20000922 <RenderGrad1>:
20000922:	2200      	movs	r2, #0

20000924 <RenderGrad2>:
20000924:	07d2      	lsls	r2, r2, #31
20000926:	0fd2      	lsrs	r2, r2, #31

20000928 <RenderGraph8>:
20000928:	b5f0      	push	{r4, r5, r6, r7, lr}
2000092a:	9c05      	ldr	r4, [sp, #20]
2000092c:	8927      	ldrh	r7, [r4, #8]
2000092e:	2603      	movs	r6, #3
20000930:	43b7      	bics	r7, r6
20000932:	43b1      	bics	r1, r6
20000934:	43b3      	bics	r3, r6
20000936:	8865      	ldrh	r5, [r4, #2]
20000938:	436a      	muls	r2, r5
2000093a:	68e5      	ldr	r5, [r4, #12]
2000093c:	1954      	adds	r4, r2, r5
2000093e:	1862      	adds	r2, r4, r1
20000940:	1a79      	subs	r1, r7, r1
20000942:	421b      	tst	r3, r3
20000944:	d008      	beq.n	20000958 <RenderGraph8+0x30>
20000946:	4299      	cmp	r1, r3
20000948:	d900      	bls.n	2000094c <RenderGraph8+0x24>
2000094a:	4619      	mov	r1, r3
2000094c:	1a5b      	subs	r3, r3, r1
2000094e:	0889      	lsrs	r1, r1, #2
20000950:	c006      	stmia	r0!, {r1, r2}
20000952:	4639      	mov	r1, r7
20000954:	4622      	mov	r2, r4
20000956:	e7f4      	b.n	20000942 <RenderGraph8+0x1a>
20000958:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

2000095c <RenderGraph8Mat>:
2000095c:	b5f0      	push	{r4, r5, r6, r7, lr}
2000095e:	0859      	lsrs	r1, r3, #1
20000960:	4249      	negs	r1, r1
20000962:	468e      	mov	lr, r1
20000964:	089f      	lsrs	r7, r3, #2
20000966:	9c05      	ldr	r4, [sp, #20]
20000968:	8961      	ldrh	r1, [r4, #10]
2000096a:	0849      	lsrs	r1, r1, #1
2000096c:	4249      	negs	r1, r1
2000096e:	1889      	adds	r1, r1, r2
20000970:	468c      	mov	ip, r1
20000972:	8b21      	ldrh	r1, [r4, #24]
20000974:	8b62      	ldrh	r2, [r4, #26]
20000976:	4b2c      	ldr	r3, [pc, #176]	; (20000a28 <RenderGraph8Mat_Interp>)
20000978:	68e6      	ldr	r6, [r4, #12]
2000097a:	611e      	str	r6, [r3, #16]
2000097c:	4e2b      	ldr	r6, [pc, #172]	; (20000a2c <RenderGraph8Mat_Ctrl>)
2000097e:	1a76      	subs	r6, r6, r1
20000980:	014d      	lsls	r5, r1, #5
20000982:	432e      	orrs	r6, r5
20000984:	3901      	subs	r1, #1
20000986:	188d      	adds	r5, r1, r2
20000988:	02ad      	lsls	r5, r5, #10
2000098a:	432e      	orrs	r6, r5
2000098c:	631e      	str	r6, [r3, #48]	; 0x30
2000098e:	4e27      	ldr	r6, [pc, #156]	; (20000a2c <RenderGraph8Mat_Ctrl>)
20000990:	0289      	lsls	r1, r1, #10
20000992:	430e      	orrs	r6, r1
20000994:	62de      	str	r6, [r3, #44]	; 0x2c
20000996:	6964      	ldr	r4, [r4, #20]
20000998:	6825      	ldr	r5, [r4, #0]
2000099a:	609d      	str	r5, [r3, #8]
2000099c:	68e6      	ldr	r6, [r4, #12]
2000099e:	60de      	str	r6, [r3, #12]
200009a0:	4672      	mov	r2, lr
200009a2:	4355      	muls	r5, r2
200009a4:	4372      	muls	r2, r6
200009a6:	6861      	ldr	r1, [r4, #4]
200009a8:	4666      	mov	r6, ip
200009aa:	4371      	muls	r1, r6
200009ac:	186d      	adds	r5, r5, r1
200009ae:	68a1      	ldr	r1, [r4, #8]
200009b0:	186d      	adds	r5, r5, r1
200009b2:	601d      	str	r5, [r3, #0]
200009b4:	6921      	ldr	r1, [r4, #16]
200009b6:	4371      	muls	r1, r6
200009b8:	1852      	adds	r2, r2, r1
200009ba:	6961      	ldr	r1, [r4, #20]
200009bc:	1852      	adds	r2, r2, r1
200009be:	605a      	str	r2, [r3, #4]
200009c0:	087f      	lsrs	r7, r7, #1
200009c2:	d30e      	bcc.n	200009e2 <RenderGraph8Mat+0x86>
200009c4:	69dc      	ldr	r4, [r3, #28]
200009c6:	7826      	ldrb	r6, [r4, #0]
200009c8:	69dc      	ldr	r4, [r3, #28]
200009ca:	7825      	ldrb	r5, [r4, #0]
200009cc:	022d      	lsls	r5, r5, #8
200009ce:	432e      	orrs	r6, r5
200009d0:	69dc      	ldr	r4, [r3, #28]
200009d2:	7825      	ldrb	r5, [r4, #0]
200009d4:	042d      	lsls	r5, r5, #16
200009d6:	432e      	orrs	r6, r5
200009d8:	69dc      	ldr	r4, [r3, #28]
200009da:	7825      	ldrb	r5, [r4, #0]
200009dc:	062d      	lsls	r5, r5, #24
200009de:	432e      	orrs	r6, r5
200009e0:	c040      	stmia	r0!, {r6}
200009e2:	423f      	tst	r7, r7
200009e4:	d01e      	beq.n	20000a24 <RenderGraph8Mat+0xc8>
200009e6:	69dc      	ldr	r4, [r3, #28]
200009e8:	7821      	ldrb	r1, [r4, #0]
200009ea:	69dc      	ldr	r4, [r3, #28]
200009ec:	7824      	ldrb	r4, [r4, #0]
200009ee:	0224      	lsls	r4, r4, #8
200009f0:	4321      	orrs	r1, r4
200009f2:	69dc      	ldr	r4, [r3, #28]
200009f4:	7824      	ldrb	r4, [r4, #0]
200009f6:	0424      	lsls	r4, r4, #16
200009f8:	4321      	orrs	r1, r4
200009fa:	69dc      	ldr	r4, [r3, #28]
200009fc:	7824      	ldrb	r4, [r4, #0]
200009fe:	0624      	lsls	r4, r4, #24
20000a00:	4321      	orrs	r1, r4
20000a02:	69dc      	ldr	r4, [r3, #28]
20000a04:	7822      	ldrb	r2, [r4, #0]
20000a06:	69dc      	ldr	r4, [r3, #28]
20000a08:	7824      	ldrb	r4, [r4, #0]
20000a0a:	0224      	lsls	r4, r4, #8
20000a0c:	4322      	orrs	r2, r4
20000a0e:	69dc      	ldr	r4, [r3, #28]
20000a10:	7824      	ldrb	r4, [r4, #0]
20000a12:	0424      	lsls	r4, r4, #16
20000a14:	4322      	orrs	r2, r4
20000a16:	69dc      	ldr	r4, [r3, #28]
20000a18:	7824      	ldrb	r4, [r4, #0]
20000a1a:	0624      	lsls	r4, r4, #24
20000a1c:	4322      	orrs	r2, r4
20000a1e:	c006      	stmia	r0!, {r1, r2}
20000a20:	3f01      	subs	r7, #1
20000a22:	d1e0      	bne.n	200009e6 <RenderGraph8Mat+0x8a>
20000a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000a26:	46c0      	nop			; (mov r8, r8)

20000a28 <RenderGraph8Mat_Interp>:
20000a28:	d00000c0 	.word	0xd00000c0

20000a2c <RenderGraph8Mat_Ctrl>:
20000a2c:	0004000c 	.word	0x0004000c

20000a30 <RenderGraph8Persp>:
20000a30:	b5f0      	push	{r4, r5, r6, r7, lr}
20000a32:	9c05      	ldr	r4, [sp, #20]
20000a34:	8961      	ldrh	r1, [r4, #10]
20000a36:	1a52      	subs	r2, r2, r1
20000a38:	4694      	mov	ip, r2
20000a3a:	030e      	lsls	r6, r1, #12
20000a3c:	4d38      	ldr	r5, [pc, #224]	; (20000b20 <RenderGraph8Persp_pSioBase>)
20000a3e:	662e      	str	r6, [r5, #96]	; 0x60
20000a40:	8a66      	ldrh	r6, [r4, #18]
20000a42:	1852      	adds	r2, r2, r1
20000a44:	18b6      	adds	r6, r6, r2
20000a46:	3601      	adds	r6, #1
20000a48:	666e      	str	r6, [r5, #100]	; 0x64
20000a4a:	085d      	lsrs	r5, r3, #1
20000a4c:	426d      	negs	r5, r5
20000a4e:	46ae      	mov	lr, r5
20000a50:	089f      	lsrs	r7, r3, #2
20000a52:	8b21      	ldrh	r1, [r4, #24]
20000a54:	8b62      	ldrh	r2, [r4, #26]
20000a56:	4b33      	ldr	r3, [pc, #204]	; (20000b24 <RenderGraph8Persp_Interp>)
20000a58:	68e6      	ldr	r6, [r4, #12]
20000a5a:	611e      	str	r6, [r3, #16]
20000a5c:	4e32      	ldr	r6, [pc, #200]	; (20000b28 <RenderGraph8Persp_Ctrl>)
20000a5e:	1a76      	subs	r6, r6, r1
20000a60:	014d      	lsls	r5, r1, #5
20000a62:	432e      	orrs	r6, r5
20000a64:	3901      	subs	r1, #1
20000a66:	188d      	adds	r5, r1, r2
20000a68:	02ad      	lsls	r5, r5, #10
20000a6a:	432e      	orrs	r6, r5
20000a6c:	631e      	str	r6, [r3, #48]	; 0x30
20000a6e:	4e2e      	ldr	r6, [pc, #184]	; (20000b28 <RenderGraph8Persp_Ctrl>)
20000a70:	0289      	lsls	r1, r1, #10
20000a72:	430e      	orrs	r6, r1
20000a74:	62de      	str	r6, [r3, #44]	; 0x2c
20000a76:	6964      	ldr	r4, [r4, #20]
20000a78:	4929      	ldr	r1, [pc, #164]	; (20000b20 <RenderGraph8Persp_pSioBase>)
20000a7a:	6f09      	ldr	r1, [r1, #112]	; 0x70
20000a7c:	6825      	ldr	r5, [r4, #0]
20000a7e:	434d      	muls	r5, r1
20000a80:	132d      	asrs	r5, r5, #12
20000a82:	609d      	str	r5, [r3, #8]
20000a84:	68e6      	ldr	r6, [r4, #12]
20000a86:	434e      	muls	r6, r1
20000a88:	1336      	asrs	r6, r6, #12
20000a8a:	60de      	str	r6, [r3, #12]
20000a8c:	4672      	mov	r2, lr
20000a8e:	4355      	muls	r5, r2
20000a90:	4372      	muls	r2, r6
20000a92:	468e      	mov	lr, r1
20000a94:	6866      	ldr	r6, [r4, #4]
20000a96:	4371      	muls	r1, r6
20000a98:	1309      	asrs	r1, r1, #12
20000a9a:	4666      	mov	r6, ip
20000a9c:	4371      	muls	r1, r6
20000a9e:	186d      	adds	r5, r5, r1
20000aa0:	68a1      	ldr	r1, [r4, #8]
20000aa2:	186d      	adds	r5, r5, r1
20000aa4:	601d      	str	r5, [r3, #0]
20000aa6:	6921      	ldr	r1, [r4, #16]
20000aa8:	4675      	mov	r5, lr
20000aaa:	4369      	muls	r1, r5
20000aac:	1309      	asrs	r1, r1, #12
20000aae:	4371      	muls	r1, r6
20000ab0:	1852      	adds	r2, r2, r1
20000ab2:	6961      	ldr	r1, [r4, #20]
20000ab4:	1852      	adds	r2, r2, r1
20000ab6:	605a      	str	r2, [r3, #4]
20000ab8:	087f      	lsrs	r7, r7, #1
20000aba:	d30e      	bcc.n	20000ada <RenderGraph8Persp+0xaa>
20000abc:	69dc      	ldr	r4, [r3, #28]
20000abe:	7826      	ldrb	r6, [r4, #0]
20000ac0:	69dc      	ldr	r4, [r3, #28]
20000ac2:	7825      	ldrb	r5, [r4, #0]
20000ac4:	022d      	lsls	r5, r5, #8
20000ac6:	432e      	orrs	r6, r5
20000ac8:	69dc      	ldr	r4, [r3, #28]
20000aca:	7825      	ldrb	r5, [r4, #0]
20000acc:	042d      	lsls	r5, r5, #16
20000ace:	432e      	orrs	r6, r5
20000ad0:	69dc      	ldr	r4, [r3, #28]
20000ad2:	7825      	ldrb	r5, [r4, #0]
20000ad4:	062d      	lsls	r5, r5, #24
20000ad6:	432e      	orrs	r6, r5
20000ad8:	c040      	stmia	r0!, {r6}
20000ada:	423f      	tst	r7, r7
20000adc:	d01e      	beq.n	20000b1c <RenderGraph8Persp+0xec>
20000ade:	69dc      	ldr	r4, [r3, #28]
20000ae0:	7821      	ldrb	r1, [r4, #0]
20000ae2:	69dc      	ldr	r4, [r3, #28]
20000ae4:	7824      	ldrb	r4, [r4, #0]
20000ae6:	0224      	lsls	r4, r4, #8
20000ae8:	4321      	orrs	r1, r4
20000aea:	69dc      	ldr	r4, [r3, #28]
20000aec:	7824      	ldrb	r4, [r4, #0]
20000aee:	0424      	lsls	r4, r4, #16
20000af0:	4321      	orrs	r1, r4
20000af2:	69dc      	ldr	r4, [r3, #28]
20000af4:	7824      	ldrb	r4, [r4, #0]
20000af6:	0624      	lsls	r4, r4, #24
20000af8:	4321      	orrs	r1, r4
20000afa:	69dc      	ldr	r4, [r3, #28]
20000afc:	7822      	ldrb	r2, [r4, #0]
20000afe:	69dc      	ldr	r4, [r3, #28]
20000b00:	7824      	ldrb	r4, [r4, #0]
20000b02:	0224      	lsls	r4, r4, #8
20000b04:	4322      	orrs	r2, r4
20000b06:	69dc      	ldr	r4, [r3, #28]
20000b08:	7824      	ldrb	r4, [r4, #0]
20000b0a:	0424      	lsls	r4, r4, #16
20000b0c:	4322      	orrs	r2, r4
20000b0e:	69dc      	ldr	r4, [r3, #28]
20000b10:	7824      	ldrb	r4, [r4, #0]
20000b12:	0624      	lsls	r4, r4, #24
20000b14:	4322      	orrs	r2, r4
20000b16:	c006      	stmia	r0!, {r1, r2}
20000b18:	3f01      	subs	r7, #1
20000b1a:	d1e0      	bne.n	20000ade <RenderGraph8Persp+0xae>
20000b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000b1e:	46c0      	nop			; (mov r8, r8)

20000b20 <RenderGraph8Persp_pSioBase>:
20000b20:	d0000000 	.word	0xd0000000

20000b24 <RenderGraph8Persp_Interp>:
20000b24:	d00000c0 	.word	0xd00000c0

20000b28 <RenderGraph8Persp_Ctrl>:
20000b28:	0004000c 	.word	0x0004000c

20000b2c <RenderGText>:
20000b2c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000b2e:	4644      	mov	r4, r8
20000b30:	b410      	push	{r4}
20000b32:	9c09      	ldr	r4, [sp, #36]	; 0x24
20000b34:	4e3a      	ldr	r6, [pc, #232]	; (20000c20 <RenderGText_pSioBase>)
20000b36:	6632      	str	r2, [r6, #96]	; 0x60
20000b38:	8a62      	ldrh	r2, [r4, #18]
20000b3a:	6672      	str	r2, [r6, #100]	; 0x64
20000b3c:	8925      	ldrh	r5, [r4, #8]
20000b3e:	2703      	movs	r7, #3
20000b40:	43bd      	bics	r5, r7
20000b42:	9509      	str	r5, [sp, #36]	; 0x24
20000b44:	43b9      	bics	r1, r7
20000b46:	43bb      	bics	r3, r7
20000b48:	9303      	str	r3, [sp, #12]
20000b4a:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000b4c:	6f32      	ldr	r2, [r6, #112]	; 0x70
20000b4e:	022d      	lsls	r5, r5, #8
20000b50:	6963      	ldr	r3, [r4, #20]
20000b52:	442b      	add	r3, r5
20000b54:	4698      	mov	r8, r3
20000b56:	8865      	ldrh	r5, [r4, #2]
20000b58:	436a      	muls	r2, r5
20000b5a:	68e5      	ldr	r5, [r4, #12]
20000b5c:	442a      	add	r2, r5
20000b5e:	9202      	str	r2, [sp, #8]
20000b60:	69a3      	ldr	r3, [r4, #24]
20000b62:	9301      	str	r3, [sp, #4]
20000b64:	440b      	add	r3, r1
20000b66:	08ce      	lsrs	r6, r1, #3
20000b68:	4432      	add	r2, r6
20000b6a:	7ca4      	ldrb	r4, [r4, #18]
20000b6c:	0225      	lsls	r5, r4, #8
20000b6e:	4325      	orrs	r5, r4
20000b70:	042c      	lsls	r4, r5, #16
20000b72:	432c      	orrs	r4, r5
20000b74:	4d29      	ldr	r5, [pc, #164]	; (20000c1c <RenderGText_Addr>)
20000b76:	46ae      	mov	lr, r5
20000b78:	074e      	lsls	r6, r1, #29
20000b7a:	d515      	bpl.n	20000ba8 <RenderGText+0x7c>
20000b7c:	7815      	ldrb	r5, [r2, #0]
20000b7e:	3201      	adds	r2, #1
20000b80:	4445      	add	r5, r8
20000b82:	782d      	ldrb	r5, [r5, #0]
20000b84:	cb40      	ldmia	r3!, {r6}
20000b86:	4066      	eors	r6, r4
20000b88:	00ed      	lsls	r5, r5, #3
20000b8a:	4475      	add	r5, lr
20000b8c:	686f      	ldr	r7, [r5, #4]
20000b8e:	4037      	ands	r7, r6
20000b90:	4067      	eors	r7, r4
20000b92:	c080      	stmia	r0!, {r7}
20000b94:	3104      	adds	r1, #4
20000b96:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000b98:	42b9      	cmp	r1, r7
20000b9a:	d302      	bcc.n	20000ba2 <RenderGText+0x76>
20000b9c:	2100      	movs	r1, #0
20000b9e:	9a02      	ldr	r2, [sp, #8]
20000ba0:	9b01      	ldr	r3, [sp, #4]
20000ba2:	9f03      	ldr	r7, [sp, #12]
20000ba4:	3f04      	subs	r7, #4
20000ba6:	9703      	str	r7, [sp, #12]
20000ba8:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000baa:	1a7f      	subs	r7, r7, r1

20000bac <RenderGText_OutLoop>:
20000bac:	9e03      	ldr	r6, [sp, #12]
20000bae:	42b7      	cmp	r7, r6
20000bb0:	d900      	bls.n	20000bb4 <RenderGText_OutLoop+0x8>
20000bb2:	4637      	mov	r7, r6
20000bb4:	2f08      	cmp	r7, #8
20000bb6:	d214      	bcs.n	20000be2 <RenderGText_Last+0x26>
20000bb8:	2f04      	cmp	r7, #4
20000bba:	d30f      	bcc.n	20000bdc <RenderGText_Last+0x20>

20000bbc <RenderGText_Last>:
20000bbc:	7815      	ldrb	r5, [r2, #0]
20000bbe:	3201      	adds	r2, #1
20000bc0:	4445      	add	r5, r8
20000bc2:	782d      	ldrb	r5, [r5, #0]
20000bc4:	cb40      	ldmia	r3!, {r6}
20000bc6:	4066      	eors	r6, r4
20000bc8:	00ed      	lsls	r5, r5, #3
20000bca:	4475      	add	r5, lr
20000bcc:	6829      	ldr	r1, [r5, #0]
20000bce:	4031      	ands	r1, r6
20000bd0:	4061      	eors	r1, r4
20000bd2:	c002      	stmia	r0!, {r1}
20000bd4:	9a02      	ldr	r2, [sp, #8]
20000bd6:	9b01      	ldr	r3, [sp, #4]
20000bd8:	2f04      	cmp	r7, #4
20000bda:	d8e7      	bhi.n	20000bac <RenderGText_OutLoop>
20000bdc:	bc10      	pop	{r4}
20000bde:	46a0      	mov	r8, r4
20000be0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000be2:	08b9      	lsrs	r1, r7, #2
20000be4:	008d      	lsls	r5, r1, #2
20000be6:	1b76      	subs	r6, r6, r5
20000be8:	9603      	str	r6, [sp, #12]
20000bea:	3901      	subs	r1, #1

20000bec <RenderGText_InLoop>:
20000bec:	7817      	ldrb	r7, [r2, #0]
20000bee:	3201      	adds	r2, #1
20000bf0:	4447      	add	r7, r8
20000bf2:	783f      	ldrb	r7, [r7, #0]
20000bf4:	cb40      	ldmia	r3!, {r6}
20000bf6:	4066      	eors	r6, r4
20000bf8:	00ff      	lsls	r7, r7, #3
20000bfa:	4477      	add	r7, lr
20000bfc:	683d      	ldr	r5, [r7, #0]
20000bfe:	4035      	ands	r5, r6
20000c00:	4065      	eors	r5, r4
20000c02:	cb40      	ldmia	r3!, {r6}
20000c04:	4066      	eors	r6, r4
20000c06:	687f      	ldr	r7, [r7, #4]
20000c08:	4037      	ands	r7, r6
20000c0a:	4067      	eors	r7, r4
20000c0c:	c0a0      	stmia	r0!, {r5, r7}
20000c0e:	3902      	subs	r1, #2
20000c10:	d8ec      	bhi.n	20000bec <RenderGText_InLoop>
20000c12:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000c14:	d0d2      	beq.n	20000bbc <RenderGText_Last>
20000c16:	9a02      	ldr	r2, [sp, #8]
20000c18:	9b01      	ldr	r3, [sp, #4]
20000c1a:	e7c7      	b.n	20000bac <RenderGText_OutLoop>

20000c1c <RenderGText_Addr>:
20000c1c:	200218d8 	.word	0x200218d8

20000c20 <RenderGText_pSioBase>:
20000c20:	d0000000 	.word	0xd0000000

20000c24 <RenderLevel>:
20000c24:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000c26:	9c08      	ldr	r4, [sp, #32]
20000c28:	8925      	ldrh	r5, [r4, #8]
20000c2a:	2703      	movs	r7, #3
20000c2c:	43bd      	bics	r5, r7
20000c2e:	9508      	str	r5, [sp, #32]
20000c30:	43b9      	bics	r1, r7
20000c32:	43bb      	bics	r3, r7
20000c34:	9302      	str	r3, [sp, #8]
20000c36:	8965      	ldrh	r5, [r4, #10]
20000c38:	3d01      	subs	r5, #1
20000c3a:	1aad      	subs	r5, r5, r2
20000c3c:	7e23      	ldrb	r3, [r4, #24]
20000c3e:	9300      	str	r3, [sp, #0]
20000c40:	68e2      	ldr	r2, [r4, #12]
20000c42:	9201      	str	r2, [sp, #4]
20000c44:	440a      	add	r2, r1
20000c46:	7d66      	ldrb	r6, [r4, #21]
20000c48:	0233      	lsls	r3, r6, #8
20000c4a:	4333      	orrs	r3, r6
20000c4c:	041e      	lsls	r6, r3, #16
20000c4e:	431e      	orrs	r6, r3
20000c50:	7d24      	ldrb	r4, [r4, #20]
20000c52:	0223      	lsls	r3, r4, #8
20000c54:	4323      	orrs	r3, r4
20000c56:	041c      	lsls	r4, r3, #16
20000c58:	431c      	orrs	r4, r3
20000c5a:	4066      	eors	r6, r4
20000c5c:	4b4c      	ldr	r3, [pc, #304]	; (20000d90 <RenderLevel_Addr>)
20000c5e:	469e      	mov	lr, r3
20000c60:	9f08      	ldr	r7, [sp, #32]
20000c62:	1a7f      	subs	r7, r7, r1
20000c64:	2f04      	cmp	r7, #4
20000c66:	d801      	bhi.n	20000c6c <RenderLevel_OutLoop>
20000c68:	9f08      	ldr	r7, [sp, #32]
20000c6a:	e007      	b.n	20000c7c <RenderLevel_Last>

20000c6c <RenderLevel_OutLoop>:
20000c6c:	9b02      	ldr	r3, [sp, #8]
20000c6e:	429f      	cmp	r7, r3
20000c70:	d900      	bls.n	20000c74 <RenderLevel_OutLoop+0x8>
20000c72:	461f      	mov	r7, r3
20000c74:	2f08      	cmp	r7, #8
20000c76:	d231      	bcs.n	20000cdc <RenderLevel_Last2+0x30>
20000c78:	2f04      	cmp	r7, #4
20000c7a:	d32e      	bcc.n	20000cda <RenderLevel_Last2+0x2e>

20000c7c <RenderLevel_Last>:
20000c7c:	9b00      	ldr	r3, [sp, #0]
20000c7e:	429d      	cmp	r5, r3
20000c80:	d314      	bcc.n	20000cac <RenderLevel_Last2>
20000c82:	2100      	movs	r1, #0
20000c84:	7813      	ldrb	r3, [r2, #0]
20000c86:	42ab      	cmp	r3, r5
20000c88:	4149      	adcs	r1, r1
20000c8a:	7853      	ldrb	r3, [r2, #1]
20000c8c:	42ab      	cmp	r3, r5
20000c8e:	4149      	adcs	r1, r1
20000c90:	7893      	ldrb	r3, [r2, #2]
20000c92:	42ab      	cmp	r3, r5
20000c94:	4149      	adcs	r1, r1
20000c96:	78d3      	ldrb	r3, [r2, #3]
20000c98:	42ab      	cmp	r3, r5
20000c9a:	4149      	adcs	r1, r1
20000c9c:	3204      	adds	r2, #4
20000c9e:	00c9      	lsls	r1, r1, #3
20000ca0:	4471      	add	r1, lr
20000ca2:	6849      	ldr	r1, [r1, #4]
20000ca4:	4031      	ands	r1, r6
20000ca6:	4061      	eors	r1, r4
20000ca8:	c002      	stmia	r0!, {r1}
20000caa:	e013      	b.n	20000cd4 <RenderLevel_Last2+0x28>

20000cac <RenderLevel_Last2>:
20000cac:	2100      	movs	r1, #0
20000cae:	7813      	ldrb	r3, [r2, #0]
20000cb0:	429d      	cmp	r5, r3
20000cb2:	4149      	adcs	r1, r1
20000cb4:	7853      	ldrb	r3, [r2, #1]
20000cb6:	429d      	cmp	r5, r3
20000cb8:	4149      	adcs	r1, r1
20000cba:	7893      	ldrb	r3, [r2, #2]
20000cbc:	429d      	cmp	r5, r3
20000cbe:	4149      	adcs	r1, r1
20000cc0:	78d3      	ldrb	r3, [r2, #3]
20000cc2:	429d      	cmp	r5, r3
20000cc4:	4149      	adcs	r1, r1
20000cc6:	3204      	adds	r2, #4
20000cc8:	00c9      	lsls	r1, r1, #3
20000cca:	4471      	add	r1, lr
20000ccc:	6849      	ldr	r1, [r1, #4]
20000cce:	4031      	ands	r1, r6
20000cd0:	4061      	eors	r1, r4
20000cd2:	c002      	stmia	r0!, {r1}
20000cd4:	9a01      	ldr	r2, [sp, #4]
20000cd6:	2f04      	cmp	r7, #4
20000cd8:	d8c8      	bhi.n	20000c6c <RenderLevel_OutLoop>
20000cda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000cdc:	08b9      	lsrs	r1, r7, #2
20000cde:	008f      	lsls	r7, r1, #2
20000ce0:	1bdb      	subs	r3, r3, r7
20000ce2:	9302      	str	r3, [sp, #8]
20000ce4:	3901      	subs	r1, #1
20000ce6:	9b00      	ldr	r3, [sp, #0]
20000ce8:	429d      	cmp	r5, r3
20000cea:	d328      	bcc.n	20000d3e <RenderLevel_InLoopBot>

20000cec <RenderLevel_InLoopTop>:
20000cec:	2700      	movs	r7, #0
20000cee:	7813      	ldrb	r3, [r2, #0]
20000cf0:	42ab      	cmp	r3, r5
20000cf2:	417f      	adcs	r7, r7
20000cf4:	7853      	ldrb	r3, [r2, #1]
20000cf6:	42ab      	cmp	r3, r5
20000cf8:	417f      	adcs	r7, r7
20000cfa:	7893      	ldrb	r3, [r2, #2]
20000cfc:	42ab      	cmp	r3, r5
20000cfe:	417f      	adcs	r7, r7
20000d00:	78d3      	ldrb	r3, [r2, #3]
20000d02:	42ab      	cmp	r3, r5
20000d04:	417f      	adcs	r7, r7
20000d06:	7913      	ldrb	r3, [r2, #4]
20000d08:	42ab      	cmp	r3, r5
20000d0a:	417f      	adcs	r7, r7
20000d0c:	7953      	ldrb	r3, [r2, #5]
20000d0e:	42ab      	cmp	r3, r5
20000d10:	417f      	adcs	r7, r7
20000d12:	7993      	ldrb	r3, [r2, #6]
20000d14:	42ab      	cmp	r3, r5
20000d16:	417f      	adcs	r7, r7
20000d18:	79d3      	ldrb	r3, [r2, #7]
20000d1a:	42ab      	cmp	r3, r5
20000d1c:	417f      	adcs	r7, r7
20000d1e:	3208      	adds	r2, #8
20000d20:	00ff      	lsls	r7, r7, #3
20000d22:	4477      	add	r7, lr
20000d24:	683b      	ldr	r3, [r7, #0]
20000d26:	4033      	ands	r3, r6
20000d28:	4063      	eors	r3, r4
20000d2a:	687f      	ldr	r7, [r7, #4]
20000d2c:	4037      	ands	r7, r6
20000d2e:	4067      	eors	r7, r4
20000d30:	c088      	stmia	r0!, {r3, r7}
20000d32:	3902      	subs	r1, #2
20000d34:	d8da      	bhi.n	20000cec <RenderLevel_InLoopTop>
20000d36:	9f08      	ldr	r7, [sp, #32]
20000d38:	d0a0      	beq.n	20000c7c <RenderLevel_Last>
20000d3a:	9a01      	ldr	r2, [sp, #4]
20000d3c:	e796      	b.n	20000c6c <RenderLevel_OutLoop>

20000d3e <RenderLevel_InLoopBot>:
20000d3e:	2700      	movs	r7, #0
20000d40:	7813      	ldrb	r3, [r2, #0]
20000d42:	429d      	cmp	r5, r3
20000d44:	417f      	adcs	r7, r7
20000d46:	7853      	ldrb	r3, [r2, #1]
20000d48:	429d      	cmp	r5, r3
20000d4a:	417f      	adcs	r7, r7
20000d4c:	7893      	ldrb	r3, [r2, #2]
20000d4e:	429d      	cmp	r5, r3
20000d50:	417f      	adcs	r7, r7
20000d52:	78d3      	ldrb	r3, [r2, #3]
20000d54:	429d      	cmp	r5, r3
20000d56:	417f      	adcs	r7, r7
20000d58:	7913      	ldrb	r3, [r2, #4]
20000d5a:	429d      	cmp	r5, r3
20000d5c:	417f      	adcs	r7, r7
20000d5e:	7953      	ldrb	r3, [r2, #5]
20000d60:	429d      	cmp	r5, r3
20000d62:	417f      	adcs	r7, r7
20000d64:	7993      	ldrb	r3, [r2, #6]
20000d66:	429d      	cmp	r5, r3
20000d68:	417f      	adcs	r7, r7
20000d6a:	79d3      	ldrb	r3, [r2, #7]
20000d6c:	429d      	cmp	r5, r3
20000d6e:	417f      	adcs	r7, r7
20000d70:	3208      	adds	r2, #8
20000d72:	00ff      	lsls	r7, r7, #3
20000d74:	4477      	add	r7, lr
20000d76:	683b      	ldr	r3, [r7, #0]
20000d78:	4033      	ands	r3, r6
20000d7a:	4063      	eors	r3, r4
20000d7c:	687f      	ldr	r7, [r7, #4]
20000d7e:	4037      	ands	r7, r6
20000d80:	4067      	eors	r7, r4
20000d82:	c088      	stmia	r0!, {r3, r7}
20000d84:	3902      	subs	r1, #2
20000d86:	d8da      	bhi.n	20000d3e <RenderLevel_InLoopBot>
20000d88:	9f08      	ldr	r7, [sp, #32]
20000d8a:	d0d5      	beq.n	20000d38 <RenderLevel_InLoopTop+0x4c>
20000d8c:	9a01      	ldr	r2, [sp, #4]
20000d8e:	e76d      	b.n	20000c6c <RenderLevel_OutLoop>

20000d90 <RenderLevel_Addr>:
20000d90:	200218d8 	.word	0x200218d8

20000d94 <RenderLevelGrad>:
20000d94:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000d96:	9c08      	ldr	r4, [sp, #32]
20000d98:	8925      	ldrh	r5, [r4, #8]
20000d9a:	2703      	movs	r7, #3
20000d9c:	43bd      	bics	r5, r7
20000d9e:	9508      	str	r5, [sp, #32]
20000da0:	43b9      	bics	r1, r7
20000da2:	43bb      	bics	r3, r7
20000da4:	9302      	str	r3, [sp, #8]
20000da6:	8965      	ldrh	r5, [r4, #10]
20000da8:	3d01      	subs	r5, #1
20000daa:	1aad      	subs	r5, r5, r2
20000dac:	68e2      	ldr	r2, [r4, #12]
20000dae:	9201      	str	r2, [sp, #4]
20000db0:	440a      	add	r2, r1
20000db2:	6966      	ldr	r6, [r4, #20]
20000db4:	5d76      	ldrb	r6, [r6, r5]
20000db6:	0233      	lsls	r3, r6, #8
20000db8:	4333      	orrs	r3, r6
20000dba:	041e      	lsls	r6, r3, #16
20000dbc:	431e      	orrs	r6, r3
20000dbe:	69a4      	ldr	r4, [r4, #24]
20000dc0:	5d64      	ldrb	r4, [r4, r5]
20000dc2:	0223      	lsls	r3, r4, #8
20000dc4:	4323      	orrs	r3, r4
20000dc6:	041c      	lsls	r4, r3, #16
20000dc8:	431c      	orrs	r4, r3
20000dca:	4066      	eors	r6, r4
20000dcc:	4b2a      	ldr	r3, [pc, #168]	; (20000e78 <RenderLevelGrad_Addr>)
20000dce:	469e      	mov	lr, r3
20000dd0:	9f08      	ldr	r7, [sp, #32]
20000dd2:	1a7f      	subs	r7, r7, r1
20000dd4:	2f04      	cmp	r7, #4
20000dd6:	d801      	bhi.n	20000ddc <RenderLevelGrad_OutLoop>
20000dd8:	9f08      	ldr	r7, [sp, #32]
20000dda:	e007      	b.n	20000dec <RenderLevelGrad_Last>

20000ddc <RenderLevelGrad_OutLoop>:
20000ddc:	9b02      	ldr	r3, [sp, #8]
20000dde:	429f      	cmp	r7, r3
20000de0:	d900      	bls.n	20000de4 <RenderLevelGrad_OutLoop+0x8>
20000de2:	461f      	mov	r7, r3
20000de4:	2f08      	cmp	r7, #8
20000de6:	d219      	bcs.n	20000e1c <RenderLevelGrad_Last+0x30>
20000de8:	2f04      	cmp	r7, #4
20000dea:	d316      	bcc.n	20000e1a <RenderLevelGrad_Last+0x2e>

20000dec <RenderLevelGrad_Last>:
20000dec:	2100      	movs	r1, #0
20000dee:	7813      	ldrb	r3, [r2, #0]
20000df0:	42ab      	cmp	r3, r5
20000df2:	4149      	adcs	r1, r1
20000df4:	7853      	ldrb	r3, [r2, #1]
20000df6:	42ab      	cmp	r3, r5
20000df8:	4149      	adcs	r1, r1
20000dfa:	7893      	ldrb	r3, [r2, #2]
20000dfc:	42ab      	cmp	r3, r5
20000dfe:	4149      	adcs	r1, r1
20000e00:	78d3      	ldrb	r3, [r2, #3]
20000e02:	42ab      	cmp	r3, r5
20000e04:	4149      	adcs	r1, r1
20000e06:	3204      	adds	r2, #4
20000e08:	00c9      	lsls	r1, r1, #3
20000e0a:	4471      	add	r1, lr
20000e0c:	6849      	ldr	r1, [r1, #4]
20000e0e:	4031      	ands	r1, r6
20000e10:	4061      	eors	r1, r4
20000e12:	c002      	stmia	r0!, {r1}
20000e14:	9a01      	ldr	r2, [sp, #4]
20000e16:	2f04      	cmp	r7, #4
20000e18:	d8e0      	bhi.n	20000ddc <RenderLevelGrad_OutLoop>
20000e1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000e1c:	08b9      	lsrs	r1, r7, #2
20000e1e:	008f      	lsls	r7, r1, #2
20000e20:	1bdb      	subs	r3, r3, r7
20000e22:	9302      	str	r3, [sp, #8]
20000e24:	3901      	subs	r1, #1

20000e26 <RenderLevelGrad_InLoopTop>:
20000e26:	2700      	movs	r7, #0
20000e28:	7813      	ldrb	r3, [r2, #0]
20000e2a:	42ab      	cmp	r3, r5
20000e2c:	417f      	adcs	r7, r7
20000e2e:	7853      	ldrb	r3, [r2, #1]
20000e30:	42ab      	cmp	r3, r5
20000e32:	417f      	adcs	r7, r7
20000e34:	7893      	ldrb	r3, [r2, #2]
20000e36:	42ab      	cmp	r3, r5
20000e38:	417f      	adcs	r7, r7
20000e3a:	78d3      	ldrb	r3, [r2, #3]
20000e3c:	42ab      	cmp	r3, r5
20000e3e:	417f      	adcs	r7, r7
20000e40:	7913      	ldrb	r3, [r2, #4]
20000e42:	42ab      	cmp	r3, r5
20000e44:	417f      	adcs	r7, r7
20000e46:	7953      	ldrb	r3, [r2, #5]
20000e48:	42ab      	cmp	r3, r5
20000e4a:	417f      	adcs	r7, r7
20000e4c:	7993      	ldrb	r3, [r2, #6]
20000e4e:	42ab      	cmp	r3, r5
20000e50:	417f      	adcs	r7, r7
20000e52:	79d3      	ldrb	r3, [r2, #7]
20000e54:	42ab      	cmp	r3, r5
20000e56:	417f      	adcs	r7, r7
20000e58:	3208      	adds	r2, #8
20000e5a:	00ff      	lsls	r7, r7, #3
20000e5c:	4477      	add	r7, lr
20000e5e:	683b      	ldr	r3, [r7, #0]
20000e60:	4033      	ands	r3, r6
20000e62:	4063      	eors	r3, r4
20000e64:	687f      	ldr	r7, [r7, #4]
20000e66:	4037      	ands	r7, r6
20000e68:	4067      	eors	r7, r4
20000e6a:	c088      	stmia	r0!, {r3, r7}
20000e6c:	3902      	subs	r1, #2
20000e6e:	d8da      	bhi.n	20000e26 <RenderLevelGrad_InLoopTop>
20000e70:	9f08      	ldr	r7, [sp, #32]
20000e72:	d0bb      	beq.n	20000dec <RenderLevelGrad_Last>
20000e74:	9a01      	ldr	r2, [sp, #4]
20000e76:	e7b1      	b.n	20000ddc <RenderLevelGrad_OutLoop>

20000e78 <RenderLevelGrad_Addr>:
20000e78:	200218d8 	.word	0x200218d8

20000e7c <RenderMText>:
20000e7c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000e7e:	9c08      	ldr	r4, [sp, #32]
20000e80:	4e34      	ldr	r6, [pc, #208]	; (20000f54 <RenderMText_pSioBase>)
20000e82:	6632      	str	r2, [r6, #96]	; 0x60
20000e84:	8a62      	ldrh	r2, [r4, #18]
20000e86:	6672      	str	r2, [r6, #100]	; 0x64
20000e88:	8925      	ldrh	r5, [r4, #8]
20000e8a:	2703      	movs	r7, #3
20000e8c:	43bd      	bics	r5, r7
20000e8e:	9508      	str	r5, [sp, #32]
20000e90:	43b9      	bics	r1, r7
20000e92:	43bb      	bics	r3, r7
20000e94:	9302      	str	r3, [sp, #8]
20000e96:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000e98:	6f32      	ldr	r2, [r6, #112]	; 0x70
20000e9a:	022d      	lsls	r5, r5, #8
20000e9c:	6963      	ldr	r3, [r4, #20]
20000e9e:	442b      	add	r3, r5
20000ea0:	8865      	ldrh	r5, [r4, #2]
20000ea2:	436a      	muls	r2, r5
20000ea4:	68e5      	ldr	r5, [r4, #12]
20000ea6:	442a      	add	r2, r5
20000ea8:	9201      	str	r2, [sp, #4]
20000eaa:	08ce      	lsrs	r6, r1, #3
20000eac:	4432      	add	r2, r6
20000eae:	7e66      	ldrb	r6, [r4, #25]
20000eb0:	0237      	lsls	r7, r6, #8
20000eb2:	4337      	orrs	r7, r6
20000eb4:	043e      	lsls	r6, r7, #16
20000eb6:	433e      	orrs	r6, r7
20000eb8:	7e24      	ldrb	r4, [r4, #24]
20000eba:	0225      	lsls	r5, r4, #8
20000ebc:	4325      	orrs	r5, r4
20000ebe:	042c      	lsls	r4, r5, #16
20000ec0:	432c      	orrs	r4, r5
20000ec2:	4066      	eors	r6, r4
20000ec4:	4d22      	ldr	r5, [pc, #136]	; (20000f50 <RenderMText_Addr>)
20000ec6:	46ae      	mov	lr, r5
20000ec8:	074d      	lsls	r5, r1, #29
20000eca:	d511      	bpl.n	20000ef0 <RenderMText+0x74>
20000ecc:	7815      	ldrb	r5, [r2, #0]
20000ece:	5d5d      	ldrb	r5, [r3, r5]
20000ed0:	3201      	adds	r2, #1
20000ed2:	00ed      	lsls	r5, r5, #3
20000ed4:	4475      	add	r5, lr
20000ed6:	686f      	ldr	r7, [r5, #4]
20000ed8:	4037      	ands	r7, r6
20000eda:	4067      	eors	r7, r4
20000edc:	c080      	stmia	r0!, {r7}
20000ede:	3104      	adds	r1, #4
20000ee0:	9f08      	ldr	r7, [sp, #32]
20000ee2:	42b9      	cmp	r1, r7
20000ee4:	d301      	bcc.n	20000eea <RenderMText+0x6e>
20000ee6:	2100      	movs	r1, #0
20000ee8:	9a01      	ldr	r2, [sp, #4]
20000eea:	9f02      	ldr	r7, [sp, #8]
20000eec:	3f04      	subs	r7, #4
20000eee:	9702      	str	r7, [sp, #8]
20000ef0:	9f08      	ldr	r7, [sp, #32]
20000ef2:	1a7f      	subs	r7, r7, r1

20000ef4 <RenderMText_OutLoop>:
20000ef4:	9d02      	ldr	r5, [sp, #8]
20000ef6:	42af      	cmp	r7, r5
20000ef8:	d900      	bls.n	20000efc <RenderMText_OutLoop+0x8>
20000efa:	462f      	mov	r7, r5
20000efc:	2f08      	cmp	r7, #8
20000efe:	d20e      	bcs.n	20000f1e <RenderMText_Last+0x1a>
20000f00:	2f04      	cmp	r7, #4
20000f02:	d30b      	bcc.n	20000f1c <RenderMText_Last+0x18>

20000f04 <RenderMText_Last>:
20000f04:	7815      	ldrb	r5, [r2, #0]
20000f06:	5d5d      	ldrb	r5, [r3, r5]
20000f08:	3201      	adds	r2, #1
20000f0a:	00ed      	lsls	r5, r5, #3
20000f0c:	4475      	add	r5, lr
20000f0e:	6829      	ldr	r1, [r5, #0]
20000f10:	4031      	ands	r1, r6
20000f12:	4061      	eors	r1, r4
20000f14:	c002      	stmia	r0!, {r1}
20000f16:	9a01      	ldr	r2, [sp, #4]
20000f18:	2f04      	cmp	r7, #4
20000f1a:	d8eb      	bhi.n	20000ef4 <RenderMText_OutLoop>
20000f1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000f1e:	08b9      	lsrs	r1, r7, #2
20000f20:	008f      	lsls	r7, r1, #2
20000f22:	1bed      	subs	r5, r5, r7
20000f24:	9502      	str	r5, [sp, #8]
20000f26:	3901      	subs	r1, #1

20000f28 <RenderMText_InLoop>:
20000f28:	7815      	ldrb	r5, [r2, #0]
20000f2a:	5d5d      	ldrb	r5, [r3, r5]
20000f2c:	3201      	adds	r2, #1
20000f2e:	00ed      	lsls	r5, r5, #3
20000f30:	4475      	add	r5, lr
20000f32:	682f      	ldr	r7, [r5, #0]
20000f34:	4037      	ands	r7, r6
20000f36:	4067      	eors	r7, r4
20000f38:	c080      	stmia	r0!, {r7}
20000f3a:	686f      	ldr	r7, [r5, #4]
20000f3c:	4037      	ands	r7, r6
20000f3e:	4067      	eors	r7, r4
20000f40:	c080      	stmia	r0!, {r7}
20000f42:	3902      	subs	r1, #2
20000f44:	d8f0      	bhi.n	20000f28 <RenderMText_InLoop>
20000f46:	9f08      	ldr	r7, [sp, #32]
20000f48:	d0dc      	beq.n	20000f04 <RenderMText_Last>
20000f4a:	9a01      	ldr	r2, [sp, #4]
20000f4c:	e7d2      	b.n	20000ef4 <RenderMText_OutLoop>
20000f4e:	46c0      	nop			; (mov r8, r8)

20000f50 <RenderMText_Addr>:
20000f50:	200218d8 	.word	0x200218d8

20000f54 <RenderMText_pSioBase>:
20000f54:	d0000000 	.word	0xd0000000

20000f58 <RenderOscil>:
20000f58:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000f5a:	9c08      	ldr	r4, [sp, #32]
20000f5c:	8925      	ldrh	r5, [r4, #8]
20000f5e:	2703      	movs	r7, #3
20000f60:	43bd      	bics	r5, r7
20000f62:	9508      	str	r5, [sp, #32]
20000f64:	43b9      	bics	r1, r7
20000f66:	43bb      	bics	r3, r7
20000f68:	9302      	str	r3, [sp, #8]
20000f6a:	8965      	ldrh	r5, [r4, #10]
20000f6c:	3d01      	subs	r5, #1
20000f6e:	1aad      	subs	r5, r5, r2
20000f70:	7e23      	ldrb	r3, [r4, #24]
20000f72:	469e      	mov	lr, r3
20000f74:	68e2      	ldr	r2, [r4, #12]
20000f76:	9201      	str	r2, [sp, #4]
20000f78:	440a      	add	r2, r1
20000f7a:	7d66      	ldrb	r6, [r4, #21]
20000f7c:	0233      	lsls	r3, r6, #8
20000f7e:	4333      	orrs	r3, r6
20000f80:	041e      	lsls	r6, r3, #16
20000f82:	431e      	orrs	r6, r3
20000f84:	7d24      	ldrb	r4, [r4, #20]
20000f86:	0223      	lsls	r3, r4, #8
20000f88:	4323      	orrs	r3, r4
20000f8a:	041c      	lsls	r4, r3, #16
20000f8c:	431c      	orrs	r4, r3
20000f8e:	4066      	eors	r6, r4
20000f90:	9f08      	ldr	r7, [sp, #32]
20000f92:	1a7f      	subs	r7, r7, r1
20000f94:	2f04      	cmp	r7, #4
20000f96:	d801      	bhi.n	20000f9c <RenderOscil_OutLoop>
20000f98:	9f08      	ldr	r7, [sp, #32]
20000f9a:	e007      	b.n	20000fac <RenderOscil_Last>

20000f9c <RenderOscil_OutLoop>:
20000f9c:	9b02      	ldr	r3, [sp, #8]
20000f9e:	429f      	cmp	r7, r3
20000fa0:	d900      	bls.n	20000fa4 <RenderOscil_OutLoop+0x8>
20000fa2:	461f      	mov	r7, r3
20000fa4:	2f08      	cmp	r7, #8
20000fa6:	d21e      	bcs.n	20000fe6 <RenderOscil_Last+0x3a>
20000fa8:	2f04      	cmp	r7, #4
20000faa:	d31b      	bcc.n	20000fe4 <RenderOscil_Last+0x38>

20000fac <RenderOscil_Last>:
20000fac:	2100      	movs	r1, #0
20000fae:	7813      	ldrb	r3, [r2, #0]
20000fb0:	1b5b      	subs	r3, r3, r5
20000fb2:	459e      	cmp	lr, r3
20000fb4:	4149      	adcs	r1, r1
20000fb6:	7853      	ldrb	r3, [r2, #1]
20000fb8:	1b5b      	subs	r3, r3, r5
20000fba:	459e      	cmp	lr, r3
20000fbc:	4149      	adcs	r1, r1
20000fbe:	7893      	ldrb	r3, [r2, #2]
20000fc0:	1b5b      	subs	r3, r3, r5
20000fc2:	459e      	cmp	lr, r3
20000fc4:	4149      	adcs	r1, r1
20000fc6:	78d3      	ldrb	r3, [r2, #3]
20000fc8:	1b5b      	subs	r3, r3, r5
20000fca:	459e      	cmp	lr, r3
20000fcc:	4149      	adcs	r1, r1
20000fce:	3204      	adds	r2, #4
20000fd0:	00c9      	lsls	r1, r1, #3
20000fd2:	4b20      	ldr	r3, [pc, #128]	; (20001054 <RenderOscil_Addr>)
20000fd4:	4419      	add	r1, r3
20000fd6:	6849      	ldr	r1, [r1, #4]
20000fd8:	4031      	ands	r1, r6
20000fda:	4061      	eors	r1, r4
20000fdc:	c002      	stmia	r0!, {r1}
20000fde:	9a01      	ldr	r2, [sp, #4]
20000fe0:	2f04      	cmp	r7, #4
20000fe2:	d8db      	bhi.n	20000f9c <RenderOscil_OutLoop>
20000fe4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000fe6:	08b9      	lsrs	r1, r7, #2
20000fe8:	008f      	lsls	r7, r1, #2
20000fea:	1bdb      	subs	r3, r3, r7
20000fec:	9302      	str	r3, [sp, #8]
20000fee:	3901      	subs	r1, #1

20000ff0 <RenderOscil_InLoop>:
20000ff0:	2700      	movs	r7, #0
20000ff2:	7813      	ldrb	r3, [r2, #0]
20000ff4:	1b5b      	subs	r3, r3, r5
20000ff6:	459e      	cmp	lr, r3
20000ff8:	417f      	adcs	r7, r7
20000ffa:	7853      	ldrb	r3, [r2, #1]
20000ffc:	1b5b      	subs	r3, r3, r5
20000ffe:	459e      	cmp	lr, r3
20001000:	417f      	adcs	r7, r7
20001002:	7893      	ldrb	r3, [r2, #2]
20001004:	1b5b      	subs	r3, r3, r5
20001006:	459e      	cmp	lr, r3
20001008:	417f      	adcs	r7, r7
2000100a:	78d3      	ldrb	r3, [r2, #3]
2000100c:	1b5b      	subs	r3, r3, r5
2000100e:	459e      	cmp	lr, r3
20001010:	417f      	adcs	r7, r7
20001012:	7913      	ldrb	r3, [r2, #4]
20001014:	1b5b      	subs	r3, r3, r5
20001016:	459e      	cmp	lr, r3
20001018:	417f      	adcs	r7, r7
2000101a:	7953      	ldrb	r3, [r2, #5]
2000101c:	1b5b      	subs	r3, r3, r5
2000101e:	459e      	cmp	lr, r3
20001020:	417f      	adcs	r7, r7
20001022:	7993      	ldrb	r3, [r2, #6]
20001024:	1b5b      	subs	r3, r3, r5
20001026:	459e      	cmp	lr, r3
20001028:	417f      	adcs	r7, r7
2000102a:	79d3      	ldrb	r3, [r2, #7]
2000102c:	1b5b      	subs	r3, r3, r5
2000102e:	459e      	cmp	lr, r3
20001030:	417f      	adcs	r7, r7
20001032:	3208      	adds	r2, #8
20001034:	00ff      	lsls	r7, r7, #3
20001036:	4b07      	ldr	r3, [pc, #28]	; (20001054 <RenderOscil_Addr>)
20001038:	441f      	add	r7, r3
2000103a:	683b      	ldr	r3, [r7, #0]
2000103c:	4033      	ands	r3, r6
2000103e:	4063      	eors	r3, r4
20001040:	687f      	ldr	r7, [r7, #4]
20001042:	4037      	ands	r7, r6
20001044:	4067      	eors	r7, r4
20001046:	c088      	stmia	r0!, {r3, r7}
20001048:	3902      	subs	r1, #2
2000104a:	d8d1      	bhi.n	20000ff0 <RenderOscil_InLoop>
2000104c:	9f08      	ldr	r7, [sp, #32]
2000104e:	d0ad      	beq.n	20000fac <RenderOscil_Last>
20001050:	9a01      	ldr	r2, [sp, #4]
20001052:	e7a3      	b.n	20000f9c <RenderOscil_OutLoop>

20001054 <RenderOscil_Addr>:
20001054:	200218d8 	.word	0x200218d8

20001058 <RenderOscLine>:
20001058:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
2000105a:	9c07      	ldr	r4, [sp, #28]
2000105c:	8925      	ldrh	r5, [r4, #8]
2000105e:	086d      	lsrs	r5, r5, #1
20001060:	9507      	str	r5, [sp, #28]
20001062:	0849      	lsrs	r1, r1, #1
20001064:	085b      	lsrs	r3, r3, #1
20001066:	9301      	str	r3, [sp, #4]
20001068:	8965      	ldrh	r5, [r4, #10]
2000106a:	3d01      	subs	r5, #1
2000106c:	1aad      	subs	r5, r5, r2
2000106e:	46ae      	mov	lr, r5
20001070:	68e2      	ldr	r2, [r4, #12]
20001072:	9200      	str	r2, [sp, #0]
20001074:	440a      	add	r2, r1
20001076:	7d66      	ldrb	r6, [r4, #21]
20001078:	0237      	lsls	r7, r6, #8
2000107a:	433e      	orrs	r6, r7
2000107c:	7d24      	ldrb	r4, [r4, #20]
2000107e:	0227      	lsls	r7, r4, #8
20001080:	433c      	orrs	r4, r7
20001082:	9f07      	ldr	r7, [sp, #28]
20001084:	1a79      	subs	r1, r7, r1

20001086 <RenderOscLine_OutLoop>:
20001086:	9b01      	ldr	r3, [sp, #4]
20001088:	4299      	cmp	r1, r3
2000108a:	d900      	bls.n	2000108e <RenderOscLine_OutLoop+0x8>
2000108c:	4619      	mov	r1, r3
2000108e:	2900      	cmp	r1, #0
20001090:	d01b      	beq.n	200010ca <RenderOscLine_Stop>
20001092:	1a5b      	subs	r3, r3, r1
20001094:	9301      	str	r3, [sp, #4]
20001096:	7815      	ldrb	r5, [r2, #0]

20001098 <RenderOscLine_InLoop>:
20001098:	7813      	ldrb	r3, [r2, #0]
2000109a:	3201      	adds	r2, #1
2000109c:	4627      	mov	r7, r4
2000109e:	4573      	cmp	r3, lr
200010a0:	d00a      	beq.n	200010b8 <RenderOscLine_InLoop+0x20>
200010a2:	d303      	bcc.n	200010ac <RenderOscLine_InLoop+0x14>
200010a4:	42ab      	cmp	r3, r5
200010a6:	d901      	bls.n	200010ac <RenderOscLine_InLoop+0x14>
200010a8:	45ae      	cmp	lr, r5
200010aa:	d805      	bhi.n	200010b8 <RenderOscLine_InLoop+0x20>
200010ac:	42ab      	cmp	r3, r5
200010ae:	d204      	bcs.n	200010ba <RenderOscLine_InLoop+0x22>
200010b0:	4573      	cmp	r3, lr
200010b2:	d202      	bcs.n	200010ba <RenderOscLine_InLoop+0x22>
200010b4:	45ae      	cmp	lr, r5
200010b6:	d200      	bcs.n	200010ba <RenderOscLine_InLoop+0x22>
200010b8:	4637      	mov	r7, r6
200010ba:	8007      	strh	r7, [r0, #0]
200010bc:	3002      	adds	r0, #2
200010be:	461d      	mov	r5, r3
200010c0:	3901      	subs	r1, #1
200010c2:	d1e9      	bne.n	20001098 <RenderOscLine_InLoop>
200010c4:	9907      	ldr	r1, [sp, #28]
200010c6:	9a00      	ldr	r2, [sp, #0]
200010c8:	e7dd      	b.n	20001086 <RenderOscLine_OutLoop>

200010ca <RenderOscLine_Stop>:
200010ca:	bdfc      	pop	{r2, r3, r4, r5, r6, r7, pc}

200010cc <RenderOscLine_Addr>:
200010cc:	200218d8 	.word	0x200218d8

200010d0 <RenderPersp>:
200010d0:	b5f0      	push	{r4, r5, r6, r7, lr}
200010d2:	4e41      	ldr	r6, [pc, #260]	; (200011d8 <RenderPersp_pSioBase>)
200010d4:	8b15      	ldrh	r5, [r2, #24]
200010d6:	7f54      	ldrb	r4, [r2, #29]
200010d8:	b264      	sxtb	r4, r4
200010da:	00a4      	lsls	r4, r4, #2
200010dc:	d107      	bne.n	200010ee <RenderPersp+0x1e>
200010de:	086d      	lsrs	r5, r5, #1
200010e0:	1b49      	subs	r1, r1, r5
200010e2:	468c      	mov	ip, r1
200010e4:	2501      	movs	r5, #1
200010e6:	6675      	str	r5, [r6, #100]	; 0x64
200010e8:	032d      	lsls	r5, r5, #12
200010ea:	6635      	str	r5, [r6, #96]	; 0x60
200010ec:	e009      	b.n	20001102 <RenderPersp+0x32>
200010ee:	d502      	bpl.n	200010f6 <RenderPersp+0x26>
200010f0:	1a69      	subs	r1, r5, r1
200010f2:	3901      	subs	r1, #1
200010f4:	4264      	negs	r4, r4
200010f6:	1b4f      	subs	r7, r1, r5
200010f8:	46bc      	mov	ip, r7
200010fa:	032d      	lsls	r5, r5, #12
200010fc:	6635      	str	r5, [r6, #96]	; 0x60
200010fe:	1909      	adds	r1, r1, r4
20001100:	6671      	str	r1, [r6, #100]	; 0x64
20001102:	8ad3      	ldrh	r3, [r2, #22]
20001104:	085d      	lsrs	r5, r3, #1
20001106:	426d      	negs	r5, r5
20001108:	46ae      	mov	lr, r5
2000110a:	089f      	lsrs	r7, r3, #2
2000110c:	7f91      	ldrb	r1, [r2, #30]
2000110e:	7fd4      	ldrb	r4, [r2, #31]
20001110:	4b32      	ldr	r3, [pc, #200]	; (200011dc <RenderPersp_Interp>)
20001112:	6816      	ldr	r6, [r2, #0]
20001114:	611e      	str	r6, [r3, #16]
20001116:	4e32      	ldr	r6, [pc, #200]	; (200011e0 <RenderPersp_Ctrl>)
20001118:	1a76      	subs	r6, r6, r1
2000111a:	014d      	lsls	r5, r1, #5
2000111c:	432e      	orrs	r6, r5
2000111e:	3901      	subs	r1, #1
20001120:	190d      	adds	r5, r1, r4
20001122:	02ad      	lsls	r5, r5, #10
20001124:	432e      	orrs	r6, r5
20001126:	631e      	str	r6, [r3, #48]	; 0x30
20001128:	4e2d      	ldr	r6, [pc, #180]	; (200011e0 <RenderPersp_Ctrl>)
2000112a:	0289      	lsls	r1, r1, #10
2000112c:	430e      	orrs	r6, r1
2000112e:	62de      	str	r6, [r3, #44]	; 0x2c
20001130:	6854      	ldr	r4, [r2, #4]
20001132:	4929      	ldr	r1, [pc, #164]	; (200011d8 <RenderPersp_pSioBase>)
20001134:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001136:	6825      	ldr	r5, [r4, #0]
20001138:	434d      	muls	r5, r1
2000113a:	132d      	asrs	r5, r5, #12
2000113c:	609d      	str	r5, [r3, #8]
2000113e:	68e6      	ldr	r6, [r4, #12]
20001140:	434e      	muls	r6, r1
20001142:	1336      	asrs	r6, r6, #12
20001144:	60de      	str	r6, [r3, #12]
20001146:	4672      	mov	r2, lr
20001148:	4355      	muls	r5, r2
2000114a:	4372      	muls	r2, r6
2000114c:	468e      	mov	lr, r1
2000114e:	6866      	ldr	r6, [r4, #4]
20001150:	4371      	muls	r1, r6
20001152:	1309      	asrs	r1, r1, #12
20001154:	4666      	mov	r6, ip
20001156:	4371      	muls	r1, r6
20001158:	186d      	adds	r5, r5, r1
2000115a:	68a1      	ldr	r1, [r4, #8]
2000115c:	186d      	adds	r5, r5, r1
2000115e:	601d      	str	r5, [r3, #0]
20001160:	6921      	ldr	r1, [r4, #16]
20001162:	4675      	mov	r5, lr
20001164:	4369      	muls	r1, r5
20001166:	1309      	asrs	r1, r1, #12
20001168:	4371      	muls	r1, r6
2000116a:	1852      	adds	r2, r2, r1
2000116c:	6961      	ldr	r1, [r4, #20]
2000116e:	1852      	adds	r2, r2, r1
20001170:	605a      	str	r2, [r3, #4]
20001172:	087f      	lsrs	r7, r7, #1
20001174:	d30e      	bcc.n	20001194 <RenderPersp+0xc4>
20001176:	69dc      	ldr	r4, [r3, #28]
20001178:	7826      	ldrb	r6, [r4, #0]
2000117a:	69dc      	ldr	r4, [r3, #28]
2000117c:	7825      	ldrb	r5, [r4, #0]
2000117e:	022d      	lsls	r5, r5, #8
20001180:	432e      	orrs	r6, r5
20001182:	69dc      	ldr	r4, [r3, #28]
20001184:	7825      	ldrb	r5, [r4, #0]
20001186:	042d      	lsls	r5, r5, #16
20001188:	432e      	orrs	r6, r5
2000118a:	69dc      	ldr	r4, [r3, #28]
2000118c:	7825      	ldrb	r5, [r4, #0]
2000118e:	062d      	lsls	r5, r5, #24
20001190:	432e      	orrs	r6, r5
20001192:	c040      	stmia	r0!, {r6}
20001194:	423f      	tst	r7, r7
20001196:	d01e      	beq.n	200011d6 <RenderPersp+0x106>
20001198:	69dc      	ldr	r4, [r3, #28]
2000119a:	7821      	ldrb	r1, [r4, #0]
2000119c:	69dc      	ldr	r4, [r3, #28]
2000119e:	7824      	ldrb	r4, [r4, #0]
200011a0:	0224      	lsls	r4, r4, #8
200011a2:	4321      	orrs	r1, r4
200011a4:	69dc      	ldr	r4, [r3, #28]
200011a6:	7824      	ldrb	r4, [r4, #0]
200011a8:	0424      	lsls	r4, r4, #16
200011aa:	4321      	orrs	r1, r4
200011ac:	69dc      	ldr	r4, [r3, #28]
200011ae:	7824      	ldrb	r4, [r4, #0]
200011b0:	0624      	lsls	r4, r4, #24
200011b2:	4321      	orrs	r1, r4
200011b4:	69dc      	ldr	r4, [r3, #28]
200011b6:	7822      	ldrb	r2, [r4, #0]
200011b8:	69dc      	ldr	r4, [r3, #28]
200011ba:	7824      	ldrb	r4, [r4, #0]
200011bc:	0224      	lsls	r4, r4, #8
200011be:	4322      	orrs	r2, r4
200011c0:	69dc      	ldr	r4, [r3, #28]
200011c2:	7824      	ldrb	r4, [r4, #0]
200011c4:	0424      	lsls	r4, r4, #16
200011c6:	4322      	orrs	r2, r4
200011c8:	69dc      	ldr	r4, [r3, #28]
200011ca:	7824      	ldrb	r4, [r4, #0]
200011cc:	0624      	lsls	r4, r4, #24
200011ce:	4322      	orrs	r2, r4
200011d0:	c006      	stmia	r0!, {r1, r2}
200011d2:	3f01      	subs	r7, #1
200011d4:	d1e0      	bne.n	20001198 <RenderPersp+0xc8>
200011d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

200011d8 <RenderPersp_pSioBase>:
200011d8:	d0000000 	.word	0xd0000000

200011dc <RenderPersp_Interp>:
200011dc:	d00000c0 	.word	0xd00000c0

200011e0 <RenderPersp_Ctrl>:
200011e0:	0004000c 	.word	0x0004000c

200011e4 <RenderPersp2>:
200011e4:	b5f0      	push	{r4, r5, r6, r7, lr}
200011e6:	4e3c      	ldr	r6, [pc, #240]	; (200012d8 <RenderPersp_pSioBase>)
200011e8:	8b15      	ldrh	r5, [r2, #24]
200011ea:	7f54      	ldrb	r4, [r2, #29]
200011ec:	b264      	sxtb	r4, r4
200011ee:	00a4      	lsls	r4, r4, #2
200011f0:	d107      	bne.n	20001202 <RenderPersp2+0x1e>
200011f2:	086d      	lsrs	r5, r5, #1
200011f4:	1b49      	subs	r1, r1, r5
200011f6:	468c      	mov	ip, r1
200011f8:	2501      	movs	r5, #1
200011fa:	6675      	str	r5, [r6, #100]	; 0x64
200011fc:	032d      	lsls	r5, r5, #12
200011fe:	6635      	str	r5, [r6, #96]	; 0x60
20001200:	e009      	b.n	20001216 <RenderPersp2+0x32>
20001202:	d502      	bpl.n	2000120a <RenderPersp2+0x26>
20001204:	1a69      	subs	r1, r5, r1
20001206:	3901      	subs	r1, #1
20001208:	4264      	negs	r4, r4
2000120a:	1b4f      	subs	r7, r1, r5
2000120c:	46bc      	mov	ip, r7
2000120e:	032d      	lsls	r5, r5, #12
20001210:	6635      	str	r5, [r6, #96]	; 0x60
20001212:	1909      	adds	r1, r1, r4
20001214:	6671      	str	r1, [r6, #100]	; 0x64
20001216:	8ad3      	ldrh	r3, [r2, #22]
20001218:	085d      	lsrs	r5, r3, #1
2000121a:	426d      	negs	r5, r5
2000121c:	46ae      	mov	lr, r5
2000121e:	089f      	lsrs	r7, r3, #2
20001220:	7f91      	ldrb	r1, [r2, #30]
20001222:	7fd4      	ldrb	r4, [r2, #31]
20001224:	4b2d      	ldr	r3, [pc, #180]	; (200012dc <RenderPersp_Interp>)
20001226:	6816      	ldr	r6, [r2, #0]
20001228:	611e      	str	r6, [r3, #16]
2000122a:	4e2d      	ldr	r6, [pc, #180]	; (200012e0 <RenderPersp_Ctrl>)
2000122c:	1a76      	subs	r6, r6, r1
2000122e:	014d      	lsls	r5, r1, #5
20001230:	432e      	orrs	r6, r5
20001232:	3901      	subs	r1, #1
20001234:	190d      	adds	r5, r1, r4
20001236:	02ad      	lsls	r5, r5, #10
20001238:	432e      	orrs	r6, r5
2000123a:	631e      	str	r6, [r3, #48]	; 0x30
2000123c:	4e28      	ldr	r6, [pc, #160]	; (200012e0 <RenderPersp_Ctrl>)
2000123e:	0289      	lsls	r1, r1, #10
20001240:	430e      	orrs	r6, r1
20001242:	62de      	str	r6, [r3, #44]	; 0x2c
20001244:	6854      	ldr	r4, [r2, #4]
20001246:	4924      	ldr	r1, [pc, #144]	; (200012d8 <RenderPersp_pSioBase>)
20001248:	6f09      	ldr	r1, [r1, #112]	; 0x70
2000124a:	6825      	ldr	r5, [r4, #0]
2000124c:	434d      	muls	r5, r1
2000124e:	12ed      	asrs	r5, r5, #11
20001250:	609d      	str	r5, [r3, #8]
20001252:	106d      	asrs	r5, r5, #1
20001254:	68e6      	ldr	r6, [r4, #12]
20001256:	434e      	muls	r6, r1
20001258:	12f6      	asrs	r6, r6, #11
2000125a:	60de      	str	r6, [r3, #12]
2000125c:	1076      	asrs	r6, r6, #1
2000125e:	4672      	mov	r2, lr
20001260:	4355      	muls	r5, r2
20001262:	4372      	muls	r2, r6
20001264:	468e      	mov	lr, r1
20001266:	6866      	ldr	r6, [r4, #4]
20001268:	4371      	muls	r1, r6
2000126a:	1309      	asrs	r1, r1, #12
2000126c:	4666      	mov	r6, ip
2000126e:	4371      	muls	r1, r6
20001270:	186d      	adds	r5, r5, r1
20001272:	68a1      	ldr	r1, [r4, #8]
20001274:	186d      	adds	r5, r5, r1
20001276:	601d      	str	r5, [r3, #0]
20001278:	6921      	ldr	r1, [r4, #16]
2000127a:	4675      	mov	r5, lr
2000127c:	4369      	muls	r1, r5
2000127e:	1309      	asrs	r1, r1, #12
20001280:	4371      	muls	r1, r6
20001282:	1852      	adds	r2, r2, r1
20001284:	6961      	ldr	r1, [r4, #20]
20001286:	1852      	adds	r2, r2, r1
20001288:	605a      	str	r2, [r3, #4]
2000128a:	087f      	lsrs	r7, r7, #1
2000128c:	d30a      	bcc.n	200012a4 <RenderPersp2+0xc0>
2000128e:	69dc      	ldr	r4, [r3, #28]
20001290:	7821      	ldrb	r1, [r4, #0]
20001292:	020c      	lsls	r4, r1, #8
20001294:	4321      	orrs	r1, r4
20001296:	69dc      	ldr	r4, [r3, #28]
20001298:	7824      	ldrb	r4, [r4, #0]
2000129a:	0424      	lsls	r4, r4, #16
2000129c:	4321      	orrs	r1, r4
2000129e:	0224      	lsls	r4, r4, #8
200012a0:	4321      	orrs	r1, r4
200012a2:	c002      	stmia	r0!, {r1}
200012a4:	423f      	tst	r7, r7
200012a6:	d016      	beq.n	200012d6 <RenderPersp2+0xf2>
200012a8:	69dc      	ldr	r4, [r3, #28]
200012aa:	7821      	ldrb	r1, [r4, #0]
200012ac:	020c      	lsls	r4, r1, #8
200012ae:	4321      	orrs	r1, r4
200012b0:	69dc      	ldr	r4, [r3, #28]
200012b2:	7824      	ldrb	r4, [r4, #0]
200012b4:	0424      	lsls	r4, r4, #16
200012b6:	4321      	orrs	r1, r4
200012b8:	0224      	lsls	r4, r4, #8
200012ba:	4321      	orrs	r1, r4
200012bc:	69dc      	ldr	r4, [r3, #28]
200012be:	7822      	ldrb	r2, [r4, #0]
200012c0:	0214      	lsls	r4, r2, #8
200012c2:	4322      	orrs	r2, r4
200012c4:	69dc      	ldr	r4, [r3, #28]
200012c6:	7824      	ldrb	r4, [r4, #0]
200012c8:	0424      	lsls	r4, r4, #16
200012ca:	4322      	orrs	r2, r4
200012cc:	0224      	lsls	r4, r4, #8
200012ce:	4322      	orrs	r2, r4
200012d0:	c006      	stmia	r0!, {r1, r2}
200012d2:	3f01      	subs	r7, #1
200012d4:	d1e8      	bne.n	200012a8 <RenderPersp2+0xc4>
200012d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

200012d8 <RenderPersp_pSioBase>:
200012d8:	d0000000 	.word	0xd0000000

200012dc <RenderPersp_Interp>:
200012dc:	d00000c0 	.word	0xd00000c0

200012e0 <RenderPersp_Ctrl>:
200012e0:	0004000c 	.word	0x0004000c

200012e4 <RenderPlane2>:
200012e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200012e6:	9c06      	ldr	r4, [sp, #24]
200012e8:	8927      	ldrh	r7, [r4, #8]
200012ea:	2603      	movs	r6, #3
200012ec:	43b7      	bics	r7, r6
200012ee:	9706      	str	r7, [sp, #24]
200012f0:	43b1      	bics	r1, r6
200012f2:	43b3      	bics	r3, r6
200012f4:	9300      	str	r3, [sp, #0]
200012f6:	8865      	ldrh	r5, [r4, #2]
200012f8:	436a      	muls	r2, r5
200012fa:	68e5      	ldr	r5, [r4, #12]
200012fc:	442a      	add	r2, r5
200012fe:	4696      	mov	lr, r2
20001300:	08ce      	lsrs	r6, r1, #3
20001302:	4432      	add	r2, r6
20001304:	6963      	ldr	r3, [r4, #20]
20001306:	69a7      	ldr	r7, [r4, #24]
20001308:	074d      	lsls	r5, r1, #29
2000130a:	d512      	bpl.n	20001332 <RenderPlane2+0x4e>
2000130c:	7815      	ldrb	r5, [r2, #0]
2000130e:	5cd6      	ldrb	r6, [r2, r3]
20001310:	3201      	adds	r2, #1
20001312:	0736      	lsls	r6, r6, #28
20001314:	0db6      	lsrs	r6, r6, #22
20001316:	072d      	lsls	r5, r5, #28
20001318:	0ead      	lsrs	r5, r5, #26
2000131a:	4335      	orrs	r5, r6
2000131c:	597d      	ldr	r5, [r7, r5]
2000131e:	c020      	stmia	r0!, {r5}
20001320:	3104      	adds	r1, #4
20001322:	9e06      	ldr	r6, [sp, #24]
20001324:	42b1      	cmp	r1, r6
20001326:	d301      	bcc.n	2000132c <RenderPlane2+0x48>
20001328:	2100      	movs	r1, #0
2000132a:	4672      	mov	r2, lr
2000132c:	9e00      	ldr	r6, [sp, #0]
2000132e:	3e04      	subs	r6, #4
20001330:	9600      	str	r6, [sp, #0]
20001332:	9e06      	ldr	r6, [sp, #24]
20001334:	1a76      	subs	r6, r6, r1

20001336 <RenderPlane2_OutLoop>:
20001336:	9c00      	ldr	r4, [sp, #0]
20001338:	42a6      	cmp	r6, r4
2000133a:	d900      	bls.n	2000133e <RenderPlane2_OutLoop+0x8>
2000133c:	4626      	mov	r6, r4
2000133e:	2e08      	cmp	r6, #8
20001340:	d20f      	bcs.n	20001362 <RenderPlane2_Last+0x1c>
20001342:	2e04      	cmp	r6, #4
20001344:	d30c      	bcc.n	20001360 <RenderPlane2_Last+0x1a>

20001346 <RenderPlane2_Last>:
20001346:	7815      	ldrb	r5, [r2, #0]
20001348:	5cd4      	ldrb	r4, [r2, r3]
2000134a:	3201      	adds	r2, #1
2000134c:	0924      	lsrs	r4, r4, #4
2000134e:	0224      	lsls	r4, r4, #8
20001350:	432c      	orrs	r4, r5
20001352:	0924      	lsrs	r4, r4, #4
20001354:	00a4      	lsls	r4, r4, #2
20001356:	593c      	ldr	r4, [r7, r4]
20001358:	c010      	stmia	r0!, {r4}
2000135a:	4672      	mov	r2, lr
2000135c:	2e04      	cmp	r6, #4
2000135e:	d8ea      	bhi.n	20001336 <RenderPlane2_OutLoop>
20001360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20001362:	08b1      	lsrs	r1, r6, #2
20001364:	008e      	lsls	r6, r1, #2
20001366:	1ba4      	subs	r4, r4, r6
20001368:	9400      	str	r4, [sp, #0]
2000136a:	3901      	subs	r1, #1

2000136c <RenderPlane2_InLoop>:
2000136c:	7815      	ldrb	r5, [r2, #0]
2000136e:	5cd6      	ldrb	r6, [r2, r3]
20001370:	3201      	adds	r2, #1
20001372:	0934      	lsrs	r4, r6, #4
20001374:	0224      	lsls	r4, r4, #8
20001376:	432c      	orrs	r4, r5
20001378:	0924      	lsrs	r4, r4, #4
2000137a:	00a4      	lsls	r4, r4, #2
2000137c:	593c      	ldr	r4, [r7, r4]
2000137e:	0736      	lsls	r6, r6, #28
20001380:	0db6      	lsrs	r6, r6, #22
20001382:	072d      	lsls	r5, r5, #28
20001384:	0ead      	lsrs	r5, r5, #26
20001386:	4335      	orrs	r5, r6
20001388:	597d      	ldr	r5, [r7, r5]
2000138a:	c030      	stmia	r0!, {r4, r5}
2000138c:	3902      	subs	r1, #2
2000138e:	d8ed      	bhi.n	2000136c <RenderPlane2_InLoop>

20001390 <RenderPlane2_EndLoop>:
20001390:	9e06      	ldr	r6, [sp, #24]
20001392:	d0d8      	beq.n	20001346 <RenderPlane2_Last>
20001394:	4672      	mov	r2, lr
20001396:	e7ce      	b.n	20001336 <RenderPlane2_OutLoop>

20001398 <RenderProgress>:
20001398:	b5f0      	push	{r4, r5, r6, r7, lr}
2000139a:	9c05      	ldr	r4, [sp, #20]
2000139c:	0889      	lsrs	r1, r1, #2
2000139e:	68e5      	ldr	r5, [r4, #12]
200013a0:	5caa      	ldrb	r2, [r5, r2]
200013a2:	089b      	lsrs	r3, r3, #2
200013a4:	8927      	ldrh	r7, [r4, #8]
200013a6:	08bf      	lsrs	r7, r7, #2
200013a8:	46be      	mov	lr, r7
200013aa:	69a5      	ldr	r5, [r4, #24]
200013ac:	6964      	ldr	r4, [r4, #20]
200013ae:	421b      	tst	r3, r3
200013b0:	d017      	beq.n	200013e2 <RenderProgress+0x4a>
200013b2:	4677      	mov	r7, lr
200013b4:	1a7f      	subs	r7, r7, r1
200013b6:	429f      	cmp	r7, r3
200013b8:	d900      	bls.n	200013bc <RenderProgress+0x24>
200013ba:	461f      	mov	r7, r3
200013bc:	1bdb      	subs	r3, r3, r7
200013be:	4291      	cmp	r1, r2
200013c0:	d208      	bcs.n	200013d4 <RenderProgress+0x3c>
200013c2:	1a56      	subs	r6, r2, r1
200013c4:	42be      	cmp	r6, r7
200013c6:	d900      	bls.n	200013ca <RenderProgress+0x32>
200013c8:	463e      	mov	r6, r7
200013ca:	1bbf      	subs	r7, r7, r6
200013cc:	c040      	stmia	r0!, {r6}
200013ce:	1866      	adds	r6, r4, r1
200013d0:	c040      	stmia	r0!, {r6}
200013d2:	4611      	mov	r1, r2
200013d4:	423f      	tst	r7, r7
200013d6:	d002      	beq.n	200013de <RenderProgress+0x46>
200013d8:	c080      	stmia	r0!, {r7}
200013da:	186e      	adds	r6, r5, r1
200013dc:	c040      	stmia	r0!, {r6}
200013de:	2100      	movs	r1, #0
200013e0:	e7e5      	b.n	200013ae <RenderProgress+0x16>
200013e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

200013e4 <RenderSprite>:
200013e4:	b5f0      	push	{r4, r5, r6, r7, lr}
200013e6:	6817      	ldr	r7, [r2, #0]
200013e8:	8ad6      	ldrh	r6, [r2, #22]
200013ea:	8c12      	ldrh	r2, [r2, #32]
200013ec:	3a01      	subs	r2, #1
200013ee:	d324      	bcc.n	2000143a <RenderSprite+0x56>
200013f0:	b407      	push	{r0, r1, r2}
200013f2:	cf08      	ldmia	r7!, {r3}
200013f4:	8a5c      	ldrh	r4, [r3, #18]
200013f6:	b224      	sxth	r4, r4
200013f8:	1b09      	subs	r1, r1, r4
200013fa:	d41c      	bmi.n	20001436 <RenderSprite+0x52>
200013fc:	8adc      	ldrh	r4, [r3, #22]
200013fe:	42a1      	cmp	r1, r4
20001400:	da19      	bge.n	20001436 <RenderSprite+0x52>
20001402:	685c      	ldr	r4, [r3, #4]
20001404:	5c65      	ldrb	r5, [r4, r1]
20001406:	689c      	ldr	r4, [r3, #8]
20001408:	5c62      	ldrb	r2, [r4, r1]
2000140a:	8b1c      	ldrh	r4, [r3, #24]
2000140c:	4361      	muls	r1, r4
2000140e:	681c      	ldr	r4, [r3, #0]
20001410:	4421      	add	r1, r4
20001412:	8a1c      	ldrh	r4, [r3, #16]
20001414:	b224      	sxth	r4, r4
20001416:	7b1b      	ldrb	r3, [r3, #12]
20001418:	1964      	adds	r4, r4, r5
2000141a:	d502      	bpl.n	20001422 <RenderSprite+0x3e>
2000141c:	1b2d      	subs	r5, r5, r4
2000141e:	1912      	adds	r2, r2, r4
20001420:	2400      	movs	r4, #0
20001422:	1949      	adds	r1, r1, r5
20001424:	1b35      	subs	r5, r6, r4
20001426:	42aa      	cmp	r2, r5
20001428:	dd00      	ble.n	2000142c <RenderSprite+0x48>
2000142a:	462a      	mov	r2, r5
2000142c:	4212      	tst	r2, r2
2000142e:	dd02      	ble.n	20001436 <RenderSprite+0x52>
20001430:	1900      	adds	r0, r0, r4
20001432:	f000 fc11 	bl	20001c58 <BlitKey>
20001436:	bc07      	pop	{r0, r1, r2}
20001438:	e7d8      	b.n	200013ec <RenderSprite+0x8>
2000143a:	bdf0      	pop	{r4, r5, r6, r7, pc}

2000143c <RenderTile>:
2000143c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
2000143e:	9c08      	ldr	r4, [sp, #32]
20001440:	4d2f      	ldr	r5, [pc, #188]	; (20001500 <RenderTile_pSioBase>)
20001442:	662a      	str	r2, [r5, #96]	; 0x60
20001444:	69a2      	ldr	r2, [r4, #24]
20001446:	666a      	str	r2, [r5, #100]	; 0x64
20001448:	8927      	ldrh	r7, [r4, #8]
2000144a:	2603      	movs	r6, #3
2000144c:	43b7      	bics	r7, r6
2000144e:	9700      	str	r7, [sp, #0]
20001450:	43b1      	bics	r1, r6
20001452:	43b3      	bics	r3, r6
20001454:	9301      	str	r3, [sp, #4]
20001456:	8a63      	ldrh	r3, [r4, #18]
20001458:	9302      	str	r3, [sp, #8]
2000145a:	6f6e      	ldr	r6, [r5, #116]	; 0x74
2000145c:	6f2f      	ldr	r7, [r5, #112]	; 0x70
2000145e:	6629      	str	r1, [r5, #96]	; 0x60
20001460:	666b      	str	r3, [r5, #100]	; 0x64
20001462:	435a      	muls	r2, r3
20001464:	8863      	ldrh	r3, [r4, #2]
20001466:	435f      	muls	r7, r3
20001468:	68e3      	ldr	r3, [r4, #12]
2000146a:	18ff      	adds	r7, r7, r3
2000146c:	46be      	mov	lr, r7
2000146e:	9b02      	ldr	r3, [sp, #8]
20001470:	435e      	muls	r6, r3
20001472:	6964      	ldr	r4, [r4, #20]
20001474:	19a4      	adds	r4, r4, r6
20001476:	6f6e      	ldr	r6, [r5, #116]	; 0x74
20001478:	6f2d      	ldr	r5, [r5, #112]	; 0x70
2000147a:	197f      	adds	r7, r7, r5
2000147c:	4236      	tst	r6, r6
2000147e:	d011      	beq.n	200014a4 <RenderTile+0x68>
20001480:	1b9d      	subs	r5, r3, r6
20001482:	1949      	adds	r1, r1, r5
20001484:	9b01      	ldr	r3, [sp, #4]
20001486:	1b5b      	subs	r3, r3, r5
20001488:	9301      	str	r3, [sp, #4]
2000148a:	08ad      	lsrs	r5, r5, #2
2000148c:	c020      	stmia	r0!, {r5}
2000148e:	783b      	ldrb	r3, [r7, #0]
20001490:	3701      	adds	r7, #1
20001492:	4353      	muls	r3, r2
20001494:	4423      	add	r3, r4
20001496:	4433      	add	r3, r6
20001498:	c008      	stmia	r0!, {r3}
2000149a:	9b00      	ldr	r3, [sp, #0]
2000149c:	4299      	cmp	r1, r3
2000149e:	d301      	bcc.n	200014a4 <RenderTile+0x68>
200014a0:	2100      	movs	r1, #0
200014a2:	4677      	mov	r7, lr
200014a4:	9b00      	ldr	r3, [sp, #0]
200014a6:	1a5d      	subs	r5, r3, r1
200014a8:	9b01      	ldr	r3, [sp, #4]

200014aa <RenderTile_OutLoop>:
200014aa:	429d      	cmp	r5, r3
200014ac:	d900      	bls.n	200014b0 <RenderTile_OutLoop+0x6>
200014ae:	461d      	mov	r5, r3
200014b0:	9902      	ldr	r1, [sp, #8]
200014b2:	428d      	cmp	r5, r1
200014b4:	d20e      	bcs.n	200014d4 <RenderTile_Last+0x18>
200014b6:	2d04      	cmp	r5, #4
200014b8:	d30b      	bcc.n	200014d2 <RenderTile_Last+0x16>
200014ba:	4629      	mov	r1, r5

200014bc <RenderTile_Last>:
200014bc:	088e      	lsrs	r6, r1, #2
200014be:	c040      	stmia	r0!, {r6}
200014c0:	783e      	ldrb	r6, [r7, #0]
200014c2:	3701      	adds	r7, #1
200014c4:	4356      	muls	r6, r2
200014c6:	4426      	add	r6, r4
200014c8:	c040      	stmia	r0!, {r6}
200014ca:	4677      	mov	r7, lr
200014cc:	9e02      	ldr	r6, [sp, #8]
200014ce:	42b5      	cmp	r5, r6
200014d0:	d2eb      	bcs.n	200014aa <RenderTile_OutLoop>
200014d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
200014d4:	08a9      	lsrs	r1, r5, #2
200014d6:	008d      	lsls	r5, r1, #2
200014d8:	1b5b      	subs	r3, r3, r5
200014da:	9d02      	ldr	r5, [sp, #8]
200014dc:	08ad      	lsrs	r5, r5, #2
200014de:	1b49      	subs	r1, r1, r5
200014e0:	3101      	adds	r1, #1

200014e2 <RenderTile_InLoop>:
200014e2:	783e      	ldrb	r6, [r7, #0]
200014e4:	3701      	adds	r7, #1
200014e6:	4356      	muls	r6, r2
200014e8:	4426      	add	r6, r4
200014ea:	c060      	stmia	r0!, {r5, r6}
200014ec:	1b49      	subs	r1, r1, r5
200014ee:	d8f8      	bhi.n	200014e2 <RenderTile_InLoop>
200014f0:	1949      	adds	r1, r1, r5
200014f2:	3901      	subs	r1, #1
200014f4:	9d00      	ldr	r5, [sp, #0]
200014f6:	0089      	lsls	r1, r1, #2
200014f8:	d1e0      	bne.n	200014bc <RenderTile_Last>
200014fa:	4677      	mov	r7, lr
200014fc:	e7d5      	b.n	200014aa <RenderTile_OutLoop>
200014fe:	46c0      	nop			; (mov r8, r8)

20001500 <RenderTile_pSioBase>:
20001500:	d0000000 	.word	0xd0000000

20001504 <RenderTile2>:
20001504:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
20001506:	9c07      	ldr	r4, [sp, #28]
20001508:	4d2c      	ldr	r5, [pc, #176]	; (200015bc <RenderTile_pSioBase>)
2000150a:	662a      	str	r2, [r5, #96]	; 0x60
2000150c:	8b22      	ldrh	r2, [r4, #24]
2000150e:	666a      	str	r2, [r5, #100]	; 0x64
20001510:	8927      	ldrh	r7, [r4, #8]
20001512:	2603      	movs	r6, #3
20001514:	43b7      	bics	r7, r6
20001516:	9700      	str	r7, [sp, #0]
20001518:	43b1      	bics	r1, r6
2000151a:	43b3      	bics	r3, r6
2000151c:	9301      	str	r3, [sp, #4]
2000151e:	8a63      	ldrh	r3, [r4, #18]
20001520:	6f6e      	ldr	r6, [r5, #116]	; 0x74
20001522:	6f2f      	ldr	r7, [r5, #112]	; 0x70
20001524:	6629      	str	r1, [r5, #96]	; 0x60
20001526:	666b      	str	r3, [r5, #100]	; 0x64
20001528:	8862      	ldrh	r2, [r4, #2]
2000152a:	4357      	muls	r7, r2
2000152c:	68e2      	ldr	r2, [r4, #12]
2000152e:	18bf      	adds	r7, r7, r2
20001530:	46be      	mov	lr, r7
20001532:	8b62      	ldrh	r2, [r4, #26]
20001534:	4356      	muls	r6, r2
20001536:	6964      	ldr	r4, [r4, #20]
20001538:	19a4      	adds	r4, r4, r6
2000153a:	6f6e      	ldr	r6, [r5, #116]	; 0x74
2000153c:	6f2d      	ldr	r5, [r5, #112]	; 0x70
2000153e:	197f      	adds	r7, r7, r5
20001540:	4236      	tst	r6, r6
20001542:	d011      	beq.n	20001568 <RenderTile2+0x64>
20001544:	1b9d      	subs	r5, r3, r6
20001546:	1949      	adds	r1, r1, r5
20001548:	9a01      	ldr	r2, [sp, #4]
2000154a:	1b52      	subs	r2, r2, r5
2000154c:	9201      	str	r2, [sp, #4]
2000154e:	08ad      	lsrs	r5, r5, #2
20001550:	c020      	stmia	r0!, {r5}
20001552:	783a      	ldrb	r2, [r7, #0]
20001554:	3701      	adds	r7, #1
20001556:	435a      	muls	r2, r3
20001558:	4422      	add	r2, r4
2000155a:	4432      	add	r2, r6
2000155c:	c004      	stmia	r0!, {r2}
2000155e:	9a00      	ldr	r2, [sp, #0]
20001560:	4291      	cmp	r1, r2
20001562:	d301      	bcc.n	20001568 <RenderTile2+0x64>
20001564:	2100      	movs	r1, #0
20001566:	4677      	mov	r7, lr
20001568:	9a00      	ldr	r2, [sp, #0]
2000156a:	1a55      	subs	r5, r2, r1
2000156c:	9a01      	ldr	r2, [sp, #4]

2000156e <RenderTile_OutLoop>:
2000156e:	4295      	cmp	r5, r2
20001570:	d900      	bls.n	20001574 <RenderTile_OutLoop+0x6>
20001572:	4615      	mov	r5, r2
20001574:	429d      	cmp	r5, r3
20001576:	d20d      	bcs.n	20001594 <RenderTile_Last+0x16>
20001578:	2d04      	cmp	r5, #4
2000157a:	d30a      	bcc.n	20001592 <RenderTile_Last+0x14>
2000157c:	4629      	mov	r1, r5

2000157e <RenderTile_Last>:
2000157e:	088e      	lsrs	r6, r1, #2
20001580:	c040      	stmia	r0!, {r6}
20001582:	783e      	ldrb	r6, [r7, #0]
20001584:	3701      	adds	r7, #1
20001586:	435e      	muls	r6, r3
20001588:	4426      	add	r6, r4
2000158a:	c040      	stmia	r0!, {r6}
2000158c:	4677      	mov	r7, lr
2000158e:	429d      	cmp	r5, r3
20001590:	d2ed      	bcs.n	2000156e <RenderTile_OutLoop>
20001592:	bdfc      	pop	{r2, r3, r4, r5, r6, r7, pc}
20001594:	08a9      	lsrs	r1, r5, #2
20001596:	008d      	lsls	r5, r1, #2
20001598:	1b52      	subs	r2, r2, r5
2000159a:	089d      	lsrs	r5, r3, #2
2000159c:	1b49      	subs	r1, r1, r5
2000159e:	3101      	adds	r1, #1

200015a0 <RenderTile_InLoop>:
200015a0:	783e      	ldrb	r6, [r7, #0]
200015a2:	3701      	adds	r7, #1
200015a4:	435e      	muls	r6, r3
200015a6:	4426      	add	r6, r4
200015a8:	c060      	stmia	r0!, {r5, r6}
200015aa:	1b49      	subs	r1, r1, r5
200015ac:	d8f8      	bhi.n	200015a0 <RenderTile_InLoop>
200015ae:	1949      	adds	r1, r1, r5
200015b0:	3901      	subs	r1, #1
200015b2:	9d00      	ldr	r5, [sp, #0]
200015b4:	0089      	lsls	r1, r1, #2
200015b6:	d1e2      	bne.n	2000157e <RenderTile_Last>
200015b8:	4677      	mov	r7, lr
200015ba:	e7d8      	b.n	2000156e <RenderTile_OutLoop>

200015bc <RenderTile_pSioBase>:
200015bc:	d0000000 	.word	0xd0000000

200015c0 <RenderTilePersp>:
200015c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200015c2:	9c06      	ldr	r4, [sp, #24]
200015c4:	4e5c      	ldr	r6, [pc, #368]	; (20001738 <RenderTilePersp_pSioBase>)
200015c6:	8965      	ldrh	r5, [r4, #10]
200015c8:	7ce1      	ldrb	r1, [r4, #19]
200015ca:	b249      	sxtb	r1, r1
200015cc:	0089      	lsls	r1, r1, #2
200015ce:	d107      	bne.n	200015e0 <RenderTilePersp+0x20>
200015d0:	086d      	lsrs	r5, r5, #1
200015d2:	1b52      	subs	r2, r2, r5
200015d4:	4694      	mov	ip, r2
200015d6:	2501      	movs	r5, #1
200015d8:	6675      	str	r5, [r6, #100]	; 0x64
200015da:	032d      	lsls	r5, r5, #12
200015dc:	6635      	str	r5, [r6, #96]	; 0x60
200015de:	e009      	b.n	200015f4 <RenderTilePersp+0x34>
200015e0:	d502      	bpl.n	200015e8 <RenderTilePersp+0x28>
200015e2:	1aaa      	subs	r2, r5, r2
200015e4:	3a01      	subs	r2, #1
200015e6:	4249      	negs	r1, r1
200015e8:	1b57      	subs	r7, r2, r5
200015ea:	46bc      	mov	ip, r7
200015ec:	032d      	lsls	r5, r5, #12
200015ee:	6635      	str	r5, [r6, #96]	; 0x60
200015f0:	1852      	adds	r2, r2, r1
200015f2:	6672      	str	r2, [r6, #100]	; 0x64
200015f4:	085d      	lsrs	r5, r3, #1
200015f6:	426d      	negs	r5, r5
200015f8:	46ae      	mov	lr, r5
200015fa:	089f      	lsrs	r7, r3, #2
200015fc:	4b4f      	ldr	r3, [pc, #316]	; (2000173c <RenderTilePersp_Interp>)
200015fe:	68e6      	ldr	r6, [r4, #12]
20001600:	611e      	str	r6, [r3, #16]
20001602:	4e4f      	ldr	r6, [pc, #316]	; (20001740 <RenderTilePersp_Ctrl>)
20001604:	7ca1      	ldrb	r1, [r4, #18]
20001606:	9100      	str	r1, [sp, #0]
20001608:	1876      	adds	r6, r6, r1
2000160a:	78a2      	ldrb	r2, [r4, #2]
2000160c:	1e55      	subs	r5, r2, #1
2000160e:	02ad      	lsls	r5, r5, #10
20001610:	432e      	orrs	r6, r5
20001612:	62de      	str	r6, [r3, #44]	; 0x2c
20001614:	1ab6      	subs	r6, r6, r2
20001616:	0152      	lsls	r2, r2, #5
20001618:	4316      	orrs	r6, r2
2000161a:	78e2      	ldrb	r2, [r4, #3]
2000161c:	0292      	lsls	r2, r2, #10
2000161e:	18b6      	adds	r6, r6, r2
20001620:	631e      	str	r6, [r3, #48]	; 0x30
20001622:	6966      	ldr	r6, [r4, #20]
20001624:	651e      	str	r6, [r3, #80]	; 0x50
20001626:	4e46      	ldr	r6, [pc, #280]	; (20001740 <RenderTilePersp_Ctrl>)
20001628:	1e4d      	subs	r5, r1, #1
2000162a:	02ad      	lsls	r5, r5, #10
2000162c:	432e      	orrs	r6, r5
2000162e:	66de      	str	r6, [r3, #108]	; 0x6c
20001630:	1a76      	subs	r6, r6, r1
20001632:	014d      	lsls	r5, r1, #5
20001634:	432e      	orrs	r6, r5
20001636:	0289      	lsls	r1, r1, #10
20001638:	1876      	adds	r6, r6, r1
2000163a:	671e      	str	r6, [r3, #112]	; 0x70
2000163c:	69a4      	ldr	r4, [r4, #24]
2000163e:	493e      	ldr	r1, [pc, #248]	; (20001738 <RenderTilePersp_pSioBase>)
20001640:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001642:	6825      	ldr	r5, [r4, #0]
20001644:	434d      	muls	r5, r1
20001646:	132d      	asrs	r5, r5, #12
20001648:	609d      	str	r5, [r3, #8]
2000164a:	649d      	str	r5, [r3, #72]	; 0x48
2000164c:	68e6      	ldr	r6, [r4, #12]
2000164e:	434e      	muls	r6, r1
20001650:	1336      	asrs	r6, r6, #12
20001652:	60de      	str	r6, [r3, #12]
20001654:	64de      	str	r6, [r3, #76]	; 0x4c
20001656:	4672      	mov	r2, lr
20001658:	4355      	muls	r5, r2
2000165a:	4372      	muls	r2, r6
2000165c:	468e      	mov	lr, r1
2000165e:	6866      	ldr	r6, [r4, #4]
20001660:	4371      	muls	r1, r6
20001662:	1309      	asrs	r1, r1, #12
20001664:	4666      	mov	r6, ip
20001666:	4371      	muls	r1, r6
20001668:	186d      	adds	r5, r5, r1
2000166a:	68a1      	ldr	r1, [r4, #8]
2000166c:	186d      	adds	r5, r5, r1
2000166e:	601d      	str	r5, [r3, #0]
20001670:	641d      	str	r5, [r3, #64]	; 0x40
20001672:	6921      	ldr	r1, [r4, #16]
20001674:	4675      	mov	r5, lr
20001676:	4369      	muls	r1, r5
20001678:	1309      	asrs	r1, r1, #12
2000167a:	4371      	muls	r1, r6
2000167c:	1852      	adds	r2, r2, r1
2000167e:	6961      	ldr	r1, [r4, #20]
20001680:	1852      	adds	r2, r2, r1
20001682:	605a      	str	r2, [r3, #4]
20001684:	645a      	str	r2, [r3, #68]	; 0x44
20001686:	9e00      	ldr	r6, [sp, #0]
20001688:	0076      	lsls	r6, r6, #1
2000168a:	087f      	lsrs	r7, r7, #1
2000168c:	d31a      	bcc.n	200016c4 <RenderTilePersp+0x104>
2000168e:	69dc      	ldr	r4, [r3, #28]
20001690:	7824      	ldrb	r4, [r4, #0]
20001692:	40b4      	lsls	r4, r6
20001694:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001696:	5d29      	ldrb	r1, [r5, r4]
20001698:	69dc      	ldr	r4, [r3, #28]
2000169a:	7824      	ldrb	r4, [r4, #0]
2000169c:	40b4      	lsls	r4, r6
2000169e:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016a0:	5d2c      	ldrb	r4, [r5, r4]
200016a2:	0224      	lsls	r4, r4, #8
200016a4:	4321      	orrs	r1, r4
200016a6:	69dc      	ldr	r4, [r3, #28]
200016a8:	7824      	ldrb	r4, [r4, #0]
200016aa:	40b4      	lsls	r4, r6
200016ac:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016ae:	5d2c      	ldrb	r4, [r5, r4]
200016b0:	0424      	lsls	r4, r4, #16
200016b2:	4321      	orrs	r1, r4
200016b4:	69dc      	ldr	r4, [r3, #28]
200016b6:	7824      	ldrb	r4, [r4, #0]
200016b8:	40b4      	lsls	r4, r6
200016ba:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016bc:	5d2c      	ldrb	r4, [r5, r4]
200016be:	0624      	lsls	r4, r4, #24
200016c0:	4321      	orrs	r1, r4
200016c2:	c002      	stmia	r0!, {r1}
200016c4:	423f      	tst	r7, r7
200016c6:	d036      	beq.n	20001736 <RenderTilePersp+0x176>
200016c8:	69dc      	ldr	r4, [r3, #28]
200016ca:	7824      	ldrb	r4, [r4, #0]
200016cc:	40b4      	lsls	r4, r6
200016ce:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016d0:	5d29      	ldrb	r1, [r5, r4]
200016d2:	69dc      	ldr	r4, [r3, #28]
200016d4:	7824      	ldrb	r4, [r4, #0]
200016d6:	40b4      	lsls	r4, r6
200016d8:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016da:	5d2c      	ldrb	r4, [r5, r4]
200016dc:	0224      	lsls	r4, r4, #8
200016de:	4321      	orrs	r1, r4
200016e0:	69dc      	ldr	r4, [r3, #28]
200016e2:	7824      	ldrb	r4, [r4, #0]
200016e4:	40b4      	lsls	r4, r6
200016e6:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016e8:	5d2c      	ldrb	r4, [r5, r4]
200016ea:	0424      	lsls	r4, r4, #16
200016ec:	4321      	orrs	r1, r4
200016ee:	69dc      	ldr	r4, [r3, #28]
200016f0:	7824      	ldrb	r4, [r4, #0]
200016f2:	40b4      	lsls	r4, r6
200016f4:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016f6:	5d2c      	ldrb	r4, [r5, r4]
200016f8:	0624      	lsls	r4, r4, #24
200016fa:	4321      	orrs	r1, r4
200016fc:	69dc      	ldr	r4, [r3, #28]
200016fe:	7824      	ldrb	r4, [r4, #0]
20001700:	40b4      	lsls	r4, r6
20001702:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001704:	5d2a      	ldrb	r2, [r5, r4]
20001706:	69dc      	ldr	r4, [r3, #28]
20001708:	7824      	ldrb	r4, [r4, #0]
2000170a:	40b4      	lsls	r4, r6
2000170c:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000170e:	5d2c      	ldrb	r4, [r5, r4]
20001710:	0224      	lsls	r4, r4, #8
20001712:	4322      	orrs	r2, r4
20001714:	69dc      	ldr	r4, [r3, #28]
20001716:	7824      	ldrb	r4, [r4, #0]
20001718:	40b4      	lsls	r4, r6
2000171a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000171c:	5d2c      	ldrb	r4, [r5, r4]
2000171e:	0424      	lsls	r4, r4, #16
20001720:	4322      	orrs	r2, r4
20001722:	69dc      	ldr	r4, [r3, #28]
20001724:	7824      	ldrb	r4, [r4, #0]
20001726:	40b4      	lsls	r4, r6
20001728:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000172a:	5d2c      	ldrb	r4, [r5, r4]
2000172c:	0624      	lsls	r4, r4, #24
2000172e:	4322      	orrs	r2, r4
20001730:	c006      	stmia	r0!, {r1, r2}
20001732:	3f01      	subs	r7, #1
20001734:	d1c8      	bne.n	200016c8 <RenderTilePersp+0x108>
20001736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

20001738 <RenderTilePersp_pSioBase>:
20001738:	d0000000 	.word	0xd0000000

2000173c <RenderTilePersp_Interp>:
2000173c:	d0000080 	.word	0xd0000080

20001740 <RenderTilePersp_Ctrl>:
20001740:	0004000c 	.word	0x0004000c

20001744 <RenderTilePersp15>:
20001744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001746:	9c06      	ldr	r4, [sp, #24]
20001748:	4e57      	ldr	r6, [pc, #348]	; (200018a8 <RenderTilePersp_pSioBase>)
2000174a:	8965      	ldrh	r5, [r4, #10]
2000174c:	7ce1      	ldrb	r1, [r4, #19]
2000174e:	b249      	sxtb	r1, r1
20001750:	0089      	lsls	r1, r1, #2
20001752:	d107      	bne.n	20001764 <RenderTilePersp15+0x20>
20001754:	086d      	lsrs	r5, r5, #1
20001756:	1b52      	subs	r2, r2, r5
20001758:	4694      	mov	ip, r2
2000175a:	2501      	movs	r5, #1
2000175c:	6675      	str	r5, [r6, #100]	; 0x64
2000175e:	032d      	lsls	r5, r5, #12
20001760:	6635      	str	r5, [r6, #96]	; 0x60
20001762:	e009      	b.n	20001778 <RenderTilePersp15+0x34>
20001764:	d502      	bpl.n	2000176c <RenderTilePersp15+0x28>
20001766:	1aaa      	subs	r2, r5, r2
20001768:	3a01      	subs	r2, #1
2000176a:	4249      	negs	r1, r1
2000176c:	1b57      	subs	r7, r2, r5
2000176e:	46bc      	mov	ip, r7
20001770:	032d      	lsls	r5, r5, #12
20001772:	6635      	str	r5, [r6, #96]	; 0x60
20001774:	1852      	adds	r2, r2, r1
20001776:	6672      	str	r2, [r6, #100]	; 0x64
20001778:	085d      	lsrs	r5, r3, #1
2000177a:	426d      	negs	r5, r5
2000177c:	46ae      	mov	lr, r5
2000177e:	089f      	lsrs	r7, r3, #2
20001780:	4b4a      	ldr	r3, [pc, #296]	; (200018ac <RenderTilePersp_Interp>)
20001782:	68e6      	ldr	r6, [r4, #12]
20001784:	611e      	str	r6, [r3, #16]
20001786:	4e4a      	ldr	r6, [pc, #296]	; (200018b0 <RenderTilePersp_Ctrl>)
20001788:	7ca1      	ldrb	r1, [r4, #18]
2000178a:	9100      	str	r1, [sp, #0]
2000178c:	1876      	adds	r6, r6, r1
2000178e:	78a2      	ldrb	r2, [r4, #2]
20001790:	1e55      	subs	r5, r2, #1
20001792:	02ad      	lsls	r5, r5, #10
20001794:	432e      	orrs	r6, r5
20001796:	62de      	str	r6, [r3, #44]	; 0x2c
20001798:	1ab6      	subs	r6, r6, r2
2000179a:	0152      	lsls	r2, r2, #5
2000179c:	4316      	orrs	r6, r2
2000179e:	78e2      	ldrb	r2, [r4, #3]
200017a0:	0292      	lsls	r2, r2, #10
200017a2:	18b6      	adds	r6, r6, r2
200017a4:	631e      	str	r6, [r3, #48]	; 0x30
200017a6:	6966      	ldr	r6, [r4, #20]
200017a8:	651e      	str	r6, [r3, #80]	; 0x50
200017aa:	4e41      	ldr	r6, [pc, #260]	; (200018b0 <RenderTilePersp_Ctrl>)
200017ac:	1e4d      	subs	r5, r1, #1
200017ae:	02ad      	lsls	r5, r5, #10
200017b0:	432e      	orrs	r6, r5
200017b2:	66de      	str	r6, [r3, #108]	; 0x6c
200017b4:	1a76      	subs	r6, r6, r1
200017b6:	014d      	lsls	r5, r1, #5
200017b8:	432e      	orrs	r6, r5
200017ba:	0289      	lsls	r1, r1, #10
200017bc:	1876      	adds	r6, r6, r1
200017be:	671e      	str	r6, [r3, #112]	; 0x70
200017c0:	69a4      	ldr	r4, [r4, #24]
200017c2:	4939      	ldr	r1, [pc, #228]	; (200018a8 <RenderTilePersp_pSioBase>)
200017c4:	6f09      	ldr	r1, [r1, #112]	; 0x70
200017c6:	6825      	ldr	r5, [r4, #0]
200017c8:	434d      	muls	r5, r1
200017ca:	132d      	asrs	r5, r5, #12
200017cc:	106a      	asrs	r2, r5, #1
200017ce:	1952      	adds	r2, r2, r5
200017d0:	609a      	str	r2, [r3, #8]
200017d2:	649a      	str	r2, [r3, #72]	; 0x48
200017d4:	68e6      	ldr	r6, [r4, #12]
200017d6:	434e      	muls	r6, r1
200017d8:	1336      	asrs	r6, r6, #12
200017da:	1072      	asrs	r2, r6, #1
200017dc:	1992      	adds	r2, r2, r6
200017de:	60da      	str	r2, [r3, #12]
200017e0:	64da      	str	r2, [r3, #76]	; 0x4c
200017e2:	4672      	mov	r2, lr
200017e4:	4355      	muls	r5, r2
200017e6:	4372      	muls	r2, r6
200017e8:	468e      	mov	lr, r1
200017ea:	6866      	ldr	r6, [r4, #4]
200017ec:	4371      	muls	r1, r6
200017ee:	1309      	asrs	r1, r1, #12
200017f0:	4666      	mov	r6, ip
200017f2:	4371      	muls	r1, r6
200017f4:	186d      	adds	r5, r5, r1
200017f6:	68a1      	ldr	r1, [r4, #8]
200017f8:	186d      	adds	r5, r5, r1
200017fa:	601d      	str	r5, [r3, #0]
200017fc:	641d      	str	r5, [r3, #64]	; 0x40
200017fe:	6921      	ldr	r1, [r4, #16]
20001800:	4675      	mov	r5, lr
20001802:	4369      	muls	r1, r5
20001804:	1309      	asrs	r1, r1, #12
20001806:	4371      	muls	r1, r6
20001808:	1852      	adds	r2, r2, r1
2000180a:	6961      	ldr	r1, [r4, #20]
2000180c:	1852      	adds	r2, r2, r1
2000180e:	605a      	str	r2, [r3, #4]
20001810:	645a      	str	r2, [r3, #68]	; 0x44
20001812:	9e00      	ldr	r6, [sp, #0]
20001814:	0076      	lsls	r6, r6, #1
20001816:	087f      	lsrs	r7, r7, #1
20001818:	d315      	bcc.n	20001846 <RenderTilePersp15+0x102>
2000181a:	69dc      	ldr	r4, [r3, #28]
2000181c:	7824      	ldrb	r4, [r4, #0]
2000181e:	40b4      	lsls	r4, r6
20001820:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001822:	5d29      	ldrb	r1, [r5, r4]
20001824:	69dc      	ldr	r4, [r3, #28]
20001826:	7824      	ldrb	r4, [r4, #0]
20001828:	40b4      	lsls	r4, r6
2000182a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000182c:	5d2c      	ldrb	r4, [r5, r4]
2000182e:	0224      	lsls	r4, r4, #8
20001830:	4321      	orrs	r1, r4
20001832:	69dc      	ldr	r4, [r3, #28]
20001834:	7824      	ldrb	r4, [r4, #0]
20001836:	40b4      	lsls	r4, r6
20001838:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000183a:	5d2c      	ldrb	r4, [r5, r4]
2000183c:	0424      	lsls	r4, r4, #16
2000183e:	4321      	orrs	r1, r4
20001840:	0224      	lsls	r4, r4, #8
20001842:	4321      	orrs	r1, r4
20001844:	c002      	stmia	r0!, {r1}
20001846:	423f      	tst	r7, r7
20001848:	d02c      	beq.n	200018a4 <RenderTilePersp15+0x160>
2000184a:	69dc      	ldr	r4, [r3, #28]
2000184c:	7824      	ldrb	r4, [r4, #0]
2000184e:	40b4      	lsls	r4, r6
20001850:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001852:	5d29      	ldrb	r1, [r5, r4]
20001854:	69dc      	ldr	r4, [r3, #28]
20001856:	7824      	ldrb	r4, [r4, #0]
20001858:	40b4      	lsls	r4, r6
2000185a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000185c:	5d2c      	ldrb	r4, [r5, r4]
2000185e:	0224      	lsls	r4, r4, #8
20001860:	4321      	orrs	r1, r4
20001862:	69dc      	ldr	r4, [r3, #28]
20001864:	7824      	ldrb	r4, [r4, #0]
20001866:	40b4      	lsls	r4, r6
20001868:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000186a:	5d2c      	ldrb	r4, [r5, r4]
2000186c:	0424      	lsls	r4, r4, #16
2000186e:	4321      	orrs	r1, r4
20001870:	0224      	lsls	r4, r4, #8
20001872:	4321      	orrs	r1, r4
20001874:	69dc      	ldr	r4, [r3, #28]
20001876:	7824      	ldrb	r4, [r4, #0]
20001878:	40b4      	lsls	r4, r6
2000187a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000187c:	5d2a      	ldrb	r2, [r5, r4]
2000187e:	69dc      	ldr	r4, [r3, #28]
20001880:	7824      	ldrb	r4, [r4, #0]
20001882:	40b4      	lsls	r4, r6
20001884:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001886:	5d2c      	ldrb	r4, [r5, r4]
20001888:	0224      	lsls	r4, r4, #8
2000188a:	4322      	orrs	r2, r4
2000188c:	69dc      	ldr	r4, [r3, #28]
2000188e:	7824      	ldrb	r4, [r4, #0]
20001890:	40b4      	lsls	r4, r6
20001892:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001894:	5d2c      	ldrb	r4, [r5, r4]
20001896:	0424      	lsls	r4, r4, #16
20001898:	4322      	orrs	r2, r4
2000189a:	0224      	lsls	r4, r4, #8
2000189c:	4322      	orrs	r2, r4
2000189e:	c006      	stmia	r0!, {r1, r2}
200018a0:	3f01      	subs	r7, #1
200018a2:	d1d2      	bne.n	2000184a <RenderTilePersp15+0x106>
200018a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
200018a6:	46c0      	nop			; (mov r8, r8)

200018a8 <RenderTilePersp_pSioBase>:
200018a8:	d0000000 	.word	0xd0000000

200018ac <RenderTilePersp_Interp>:
200018ac:	d0000080 	.word	0xd0000080

200018b0 <RenderTilePersp_Ctrl>:
200018b0:	0004000c 	.word	0x0004000c

200018b4 <RenderTilePersp2>:
200018b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200018b6:	9c06      	ldr	r4, [sp, #24]
200018b8:	4e4e      	ldr	r6, [pc, #312]	; (200019f4 <RenderTilePersp_pSioBase>)
200018ba:	8965      	ldrh	r5, [r4, #10]
200018bc:	7ce1      	ldrb	r1, [r4, #19]
200018be:	b249      	sxtb	r1, r1
200018c0:	0089      	lsls	r1, r1, #2
200018c2:	d107      	bne.n	200018d4 <RenderTilePersp2+0x20>
200018c4:	086d      	lsrs	r5, r5, #1
200018c6:	1b52      	subs	r2, r2, r5
200018c8:	4694      	mov	ip, r2
200018ca:	2501      	movs	r5, #1
200018cc:	6675      	str	r5, [r6, #100]	; 0x64
200018ce:	032d      	lsls	r5, r5, #12
200018d0:	6635      	str	r5, [r6, #96]	; 0x60
200018d2:	e009      	b.n	200018e8 <RenderTilePersp2+0x34>
200018d4:	d502      	bpl.n	200018dc <RenderTilePersp2+0x28>
200018d6:	1aaa      	subs	r2, r5, r2
200018d8:	3a01      	subs	r2, #1
200018da:	4249      	negs	r1, r1
200018dc:	1b57      	subs	r7, r2, r5
200018de:	46bc      	mov	ip, r7
200018e0:	032d      	lsls	r5, r5, #12
200018e2:	6635      	str	r5, [r6, #96]	; 0x60
200018e4:	1852      	adds	r2, r2, r1
200018e6:	6672      	str	r2, [r6, #100]	; 0x64
200018e8:	085d      	lsrs	r5, r3, #1
200018ea:	426d      	negs	r5, r5
200018ec:	46ae      	mov	lr, r5
200018ee:	089f      	lsrs	r7, r3, #2
200018f0:	4b41      	ldr	r3, [pc, #260]	; (200019f8 <RenderTilePersp_Interp>)
200018f2:	68e6      	ldr	r6, [r4, #12]
200018f4:	611e      	str	r6, [r3, #16]
200018f6:	4e41      	ldr	r6, [pc, #260]	; (200019fc <RenderTilePersp_Ctrl>)
200018f8:	7ca1      	ldrb	r1, [r4, #18]
200018fa:	9100      	str	r1, [sp, #0]
200018fc:	1876      	adds	r6, r6, r1
200018fe:	78a2      	ldrb	r2, [r4, #2]
20001900:	1e55      	subs	r5, r2, #1
20001902:	02ad      	lsls	r5, r5, #10
20001904:	432e      	orrs	r6, r5
20001906:	62de      	str	r6, [r3, #44]	; 0x2c
20001908:	1ab6      	subs	r6, r6, r2
2000190a:	0152      	lsls	r2, r2, #5
2000190c:	4316      	orrs	r6, r2
2000190e:	78e2      	ldrb	r2, [r4, #3]
20001910:	0292      	lsls	r2, r2, #10
20001912:	18b6      	adds	r6, r6, r2
20001914:	631e      	str	r6, [r3, #48]	; 0x30
20001916:	6966      	ldr	r6, [r4, #20]
20001918:	651e      	str	r6, [r3, #80]	; 0x50
2000191a:	4e38      	ldr	r6, [pc, #224]	; (200019fc <RenderTilePersp_Ctrl>)
2000191c:	1e4d      	subs	r5, r1, #1
2000191e:	02ad      	lsls	r5, r5, #10
20001920:	432e      	orrs	r6, r5
20001922:	66de      	str	r6, [r3, #108]	; 0x6c
20001924:	1a76      	subs	r6, r6, r1
20001926:	014d      	lsls	r5, r1, #5
20001928:	432e      	orrs	r6, r5
2000192a:	0289      	lsls	r1, r1, #10
2000192c:	1876      	adds	r6, r6, r1
2000192e:	671e      	str	r6, [r3, #112]	; 0x70
20001930:	69a4      	ldr	r4, [r4, #24]
20001932:	4930      	ldr	r1, [pc, #192]	; (200019f4 <RenderTilePersp_pSioBase>)
20001934:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001936:	6825      	ldr	r5, [r4, #0]
20001938:	434d      	muls	r5, r1
2000193a:	12ed      	asrs	r5, r5, #11
2000193c:	609d      	str	r5, [r3, #8]
2000193e:	649d      	str	r5, [r3, #72]	; 0x48
20001940:	106d      	asrs	r5, r5, #1
20001942:	68e6      	ldr	r6, [r4, #12]
20001944:	434e      	muls	r6, r1
20001946:	12f6      	asrs	r6, r6, #11
20001948:	60de      	str	r6, [r3, #12]
2000194a:	64de      	str	r6, [r3, #76]	; 0x4c
2000194c:	1076      	asrs	r6, r6, #1
2000194e:	4672      	mov	r2, lr
20001950:	4355      	muls	r5, r2
20001952:	4372      	muls	r2, r6
20001954:	468e      	mov	lr, r1
20001956:	6866      	ldr	r6, [r4, #4]
20001958:	4371      	muls	r1, r6
2000195a:	1309      	asrs	r1, r1, #12
2000195c:	4666      	mov	r6, ip
2000195e:	4371      	muls	r1, r6
20001960:	186d      	adds	r5, r5, r1
20001962:	68a1      	ldr	r1, [r4, #8]
20001964:	186d      	adds	r5, r5, r1
20001966:	601d      	str	r5, [r3, #0]
20001968:	641d      	str	r5, [r3, #64]	; 0x40
2000196a:	6921      	ldr	r1, [r4, #16]
2000196c:	4675      	mov	r5, lr
2000196e:	4369      	muls	r1, r5
20001970:	1309      	asrs	r1, r1, #12
20001972:	4371      	muls	r1, r6
20001974:	1852      	adds	r2, r2, r1
20001976:	6961      	ldr	r1, [r4, #20]
20001978:	1852      	adds	r2, r2, r1
2000197a:	605a      	str	r2, [r3, #4]
2000197c:	645a      	str	r2, [r3, #68]	; 0x44
2000197e:	9e00      	ldr	r6, [sp, #0]
20001980:	0076      	lsls	r6, r6, #1
20001982:	087f      	lsrs	r7, r7, #1
20001984:	d310      	bcc.n	200019a8 <RenderTilePersp2+0xf4>
20001986:	69dc      	ldr	r4, [r3, #28]
20001988:	7824      	ldrb	r4, [r4, #0]
2000198a:	40b4      	lsls	r4, r6
2000198c:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000198e:	5d29      	ldrb	r1, [r5, r4]
20001990:	020c      	lsls	r4, r1, #8
20001992:	4321      	orrs	r1, r4
20001994:	69dc      	ldr	r4, [r3, #28]
20001996:	7824      	ldrb	r4, [r4, #0]
20001998:	40b4      	lsls	r4, r6
2000199a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000199c:	5d2c      	ldrb	r4, [r5, r4]
2000199e:	0424      	lsls	r4, r4, #16
200019a0:	4321      	orrs	r1, r4
200019a2:	0224      	lsls	r4, r4, #8
200019a4:	4321      	orrs	r1, r4
200019a6:	c002      	stmia	r0!, {r1}
200019a8:	423f      	tst	r7, r7
200019aa:	d022      	beq.n	200019f2 <RenderTilePersp2+0x13e>
200019ac:	69dc      	ldr	r4, [r3, #28]
200019ae:	7824      	ldrb	r4, [r4, #0]
200019b0:	40b4      	lsls	r4, r6
200019b2:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019b4:	5d29      	ldrb	r1, [r5, r4]
200019b6:	020c      	lsls	r4, r1, #8
200019b8:	4321      	orrs	r1, r4
200019ba:	69dc      	ldr	r4, [r3, #28]
200019bc:	7824      	ldrb	r4, [r4, #0]
200019be:	40b4      	lsls	r4, r6
200019c0:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019c2:	5d2c      	ldrb	r4, [r5, r4]
200019c4:	0424      	lsls	r4, r4, #16
200019c6:	4321      	orrs	r1, r4
200019c8:	0224      	lsls	r4, r4, #8
200019ca:	4321      	orrs	r1, r4
200019cc:	69dc      	ldr	r4, [r3, #28]
200019ce:	7824      	ldrb	r4, [r4, #0]
200019d0:	40b4      	lsls	r4, r6
200019d2:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019d4:	5d2a      	ldrb	r2, [r5, r4]
200019d6:	0214      	lsls	r4, r2, #8
200019d8:	4322      	orrs	r2, r4
200019da:	69dc      	ldr	r4, [r3, #28]
200019dc:	7824      	ldrb	r4, [r4, #0]
200019de:	40b4      	lsls	r4, r6
200019e0:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019e2:	5d2c      	ldrb	r4, [r5, r4]
200019e4:	0424      	lsls	r4, r4, #16
200019e6:	4322      	orrs	r2, r4
200019e8:	0224      	lsls	r4, r4, #8
200019ea:	4322      	orrs	r2, r4
200019ec:	c006      	stmia	r0!, {r1, r2}
200019ee:	3f01      	subs	r7, #1
200019f0:	d1dc      	bne.n	200019ac <RenderTilePersp2+0xf8>
200019f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

200019f4 <RenderTilePersp_pSioBase>:
200019f4:	d0000000 	.word	0xd0000000

200019f8 <RenderTilePersp_Interp>:
200019f8:	d0000080 	.word	0xd0000080

200019fc <RenderTilePersp_Ctrl>:
200019fc:	0004000c 	.word	0x0004000c

20001a00 <RenderTilePersp3>:
20001a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001a02:	9c06      	ldr	r4, [sp, #24]
20001a04:	4e48      	ldr	r6, [pc, #288]	; (20001b28 <RenderTilePersp_pSioBase>)
20001a06:	8965      	ldrh	r5, [r4, #10]
20001a08:	7ce1      	ldrb	r1, [r4, #19]
20001a0a:	b249      	sxtb	r1, r1
20001a0c:	0089      	lsls	r1, r1, #2
20001a0e:	d107      	bne.n	20001a20 <RenderTilePersp3+0x20>
20001a10:	086d      	lsrs	r5, r5, #1
20001a12:	1b52      	subs	r2, r2, r5
20001a14:	4694      	mov	ip, r2
20001a16:	2501      	movs	r5, #1
20001a18:	6675      	str	r5, [r6, #100]	; 0x64
20001a1a:	032d      	lsls	r5, r5, #12
20001a1c:	6635      	str	r5, [r6, #96]	; 0x60
20001a1e:	e009      	b.n	20001a34 <RenderTilePersp3+0x34>
20001a20:	d502      	bpl.n	20001a28 <RenderTilePersp3+0x28>
20001a22:	1aaa      	subs	r2, r5, r2
20001a24:	3a01      	subs	r2, #1
20001a26:	4249      	negs	r1, r1
20001a28:	1b57      	subs	r7, r2, r5
20001a2a:	46bc      	mov	ip, r7
20001a2c:	032d      	lsls	r5, r5, #12
20001a2e:	6635      	str	r5, [r6, #96]	; 0x60
20001a30:	1852      	adds	r2, r2, r1
20001a32:	6672      	str	r2, [r6, #100]	; 0x64
20001a34:	085d      	lsrs	r5, r3, #1
20001a36:	426d      	negs	r5, r5
20001a38:	46ae      	mov	lr, r5
20001a3a:	089f      	lsrs	r7, r3, #2
20001a3c:	4b3b      	ldr	r3, [pc, #236]	; (20001b2c <RenderTilePersp_Interp>)
20001a3e:	68e6      	ldr	r6, [r4, #12]
20001a40:	611e      	str	r6, [r3, #16]
20001a42:	4e3b      	ldr	r6, [pc, #236]	; (20001b30 <RenderTilePersp_Ctrl>)
20001a44:	7ca1      	ldrb	r1, [r4, #18]
20001a46:	9100      	str	r1, [sp, #0]
20001a48:	1876      	adds	r6, r6, r1
20001a4a:	78a2      	ldrb	r2, [r4, #2]
20001a4c:	1e55      	subs	r5, r2, #1
20001a4e:	02ad      	lsls	r5, r5, #10
20001a50:	432e      	orrs	r6, r5
20001a52:	62de      	str	r6, [r3, #44]	; 0x2c
20001a54:	1ab6      	subs	r6, r6, r2
20001a56:	0152      	lsls	r2, r2, #5
20001a58:	4316      	orrs	r6, r2
20001a5a:	78e2      	ldrb	r2, [r4, #3]
20001a5c:	0292      	lsls	r2, r2, #10
20001a5e:	18b6      	adds	r6, r6, r2
20001a60:	631e      	str	r6, [r3, #48]	; 0x30
20001a62:	6966      	ldr	r6, [r4, #20]
20001a64:	651e      	str	r6, [r3, #80]	; 0x50
20001a66:	4e32      	ldr	r6, [pc, #200]	; (20001b30 <RenderTilePersp_Ctrl>)
20001a68:	1e4d      	subs	r5, r1, #1
20001a6a:	02ad      	lsls	r5, r5, #10
20001a6c:	432e      	orrs	r6, r5
20001a6e:	66de      	str	r6, [r3, #108]	; 0x6c
20001a70:	1a76      	subs	r6, r6, r1
20001a72:	014d      	lsls	r5, r1, #5
20001a74:	432e      	orrs	r6, r5
20001a76:	0289      	lsls	r1, r1, #10
20001a78:	1876      	adds	r6, r6, r1
20001a7a:	671e      	str	r6, [r3, #112]	; 0x70
20001a7c:	69a4      	ldr	r4, [r4, #24]
20001a7e:	492a      	ldr	r1, [pc, #168]	; (20001b28 <RenderTilePersp_pSioBase>)
20001a80:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001a82:	6825      	ldr	r5, [r4, #0]
20001a84:	434d      	muls	r5, r1
20001a86:	132d      	asrs	r5, r5, #12
20001a88:	006a      	lsls	r2, r5, #1
20001a8a:	1952      	adds	r2, r2, r5
20001a8c:	609a      	str	r2, [r3, #8]
20001a8e:	649a      	str	r2, [r3, #72]	; 0x48
20001a90:	68e6      	ldr	r6, [r4, #12]
20001a92:	434e      	muls	r6, r1
20001a94:	1336      	asrs	r6, r6, #12
20001a96:	0072      	lsls	r2, r6, #1
20001a98:	1992      	adds	r2, r2, r6
20001a9a:	60da      	str	r2, [r3, #12]
20001a9c:	64da      	str	r2, [r3, #76]	; 0x4c
20001a9e:	4672      	mov	r2, lr
20001aa0:	4355      	muls	r5, r2
20001aa2:	4372      	muls	r2, r6
20001aa4:	468e      	mov	lr, r1
20001aa6:	6866      	ldr	r6, [r4, #4]
20001aa8:	4371      	muls	r1, r6
20001aaa:	1309      	asrs	r1, r1, #12
20001aac:	4666      	mov	r6, ip
20001aae:	4371      	muls	r1, r6
20001ab0:	186d      	adds	r5, r5, r1
20001ab2:	68a1      	ldr	r1, [r4, #8]
20001ab4:	186d      	adds	r5, r5, r1
20001ab6:	601d      	str	r5, [r3, #0]
20001ab8:	641d      	str	r5, [r3, #64]	; 0x40
20001aba:	6921      	ldr	r1, [r4, #16]
20001abc:	4675      	mov	r5, lr
20001abe:	4369      	muls	r1, r5
20001ac0:	1309      	asrs	r1, r1, #12
20001ac2:	4371      	muls	r1, r6
20001ac4:	1852      	adds	r2, r2, r1
20001ac6:	6961      	ldr	r1, [r4, #20]
20001ac8:	1852      	adds	r2, r2, r1
20001aca:	605a      	str	r2, [r3, #4]
20001acc:	645a      	str	r2, [r3, #68]	; 0x44
20001ace:	9e00      	ldr	r6, [sp, #0]
20001ad0:	0076      	lsls	r6, r6, #1
20001ad2:	087f      	lsrs	r7, r7, #1
20001ad4:	d309      	bcc.n	20001aea <RenderTilePersp3+0xea>
20001ad6:	69dc      	ldr	r4, [r3, #28]
20001ad8:	7824      	ldrb	r4, [r4, #0]
20001ada:	40b4      	lsls	r4, r6
20001adc:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001ade:	5d29      	ldrb	r1, [r5, r4]
20001ae0:	020c      	lsls	r4, r1, #8
20001ae2:	4321      	orrs	r1, r4
20001ae4:	040c      	lsls	r4, r1, #16
20001ae6:	4321      	orrs	r1, r4
20001ae8:	c002      	stmia	r0!, {r1}
20001aea:	423f      	tst	r7, r7
20001aec:	d01b      	beq.n	20001b26 <RenderTilePersp3+0x126>
20001aee:	69dc      	ldr	r4, [r3, #28]
20001af0:	7824      	ldrb	r4, [r4, #0]
20001af2:	40b4      	lsls	r4, r6
20001af4:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001af6:	5d29      	ldrb	r1, [r5, r4]
20001af8:	020c      	lsls	r4, r1, #8
20001afa:	4321      	orrs	r1, r4
20001afc:	69dc      	ldr	r4, [r3, #28]
20001afe:	7824      	ldrb	r4, [r4, #0]
20001b00:	40b4      	lsls	r4, r6
20001b02:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001b04:	5d2c      	ldrb	r4, [r5, r4]
20001b06:	0424      	lsls	r4, r4, #16
20001b08:	4321      	orrs	r1, r4
20001b0a:	0224      	lsls	r4, r4, #8
20001b0c:	4321      	orrs	r1, r4
20001b0e:	69dc      	ldr	r4, [r3, #28]
20001b10:	7824      	ldrb	r4, [r4, #0]
20001b12:	40b4      	lsls	r4, r6
20001b14:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001b16:	5d2a      	ldrb	r2, [r5, r4]
20001b18:	0214      	lsls	r4, r2, #8
20001b1a:	4322      	orrs	r2, r4
20001b1c:	0414      	lsls	r4, r2, #16
20001b1e:	4322      	orrs	r2, r4
20001b20:	c006      	stmia	r0!, {r1, r2}
20001b22:	3f01      	subs	r7, #1
20001b24:	d1e3      	bne.n	20001aee <RenderTilePersp3+0xee>
20001b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

20001b28 <RenderTilePersp_pSioBase>:
20001b28:	d0000000 	.word	0xd0000000

20001b2c <RenderTilePersp_Interp>:
20001b2c:	d0000080 	.word	0xd0000080

20001b30 <RenderTilePersp_Ctrl>:
20001b30:	0004000c 	.word	0x0004000c

20001b34 <RenderTilePersp4>:
20001b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001b36:	9c06      	ldr	r4, [sp, #24]
20001b38:	4e44      	ldr	r6, [pc, #272]	; (20001c4c <RenderTilePersp_pSioBase>)
20001b3a:	8965      	ldrh	r5, [r4, #10]
20001b3c:	7ce1      	ldrb	r1, [r4, #19]
20001b3e:	b249      	sxtb	r1, r1
20001b40:	0089      	lsls	r1, r1, #2
20001b42:	d107      	bne.n	20001b54 <RenderTilePersp4+0x20>
20001b44:	086d      	lsrs	r5, r5, #1
20001b46:	1b52      	subs	r2, r2, r5
20001b48:	4694      	mov	ip, r2
20001b4a:	2501      	movs	r5, #1
20001b4c:	6675      	str	r5, [r6, #100]	; 0x64
20001b4e:	032d      	lsls	r5, r5, #12
20001b50:	6635      	str	r5, [r6, #96]	; 0x60
20001b52:	e009      	b.n	20001b68 <RenderTilePersp4+0x34>
20001b54:	d502      	bpl.n	20001b5c <RenderTilePersp4+0x28>
20001b56:	1aaa      	subs	r2, r5, r2
20001b58:	3a01      	subs	r2, #1
20001b5a:	4249      	negs	r1, r1
20001b5c:	1b57      	subs	r7, r2, r5
20001b5e:	46bc      	mov	ip, r7
20001b60:	032d      	lsls	r5, r5, #12
20001b62:	6635      	str	r5, [r6, #96]	; 0x60
20001b64:	1852      	adds	r2, r2, r1
20001b66:	6672      	str	r2, [r6, #100]	; 0x64
20001b68:	085d      	lsrs	r5, r3, #1
20001b6a:	426d      	negs	r5, r5
20001b6c:	46ae      	mov	lr, r5
20001b6e:	089f      	lsrs	r7, r3, #2
20001b70:	4b37      	ldr	r3, [pc, #220]	; (20001c50 <RenderTilePersp_Interp>)
20001b72:	68e6      	ldr	r6, [r4, #12]
20001b74:	611e      	str	r6, [r3, #16]
20001b76:	4e37      	ldr	r6, [pc, #220]	; (20001c54 <RenderTilePersp_Ctrl>)
20001b78:	7ca1      	ldrb	r1, [r4, #18]
20001b7a:	9100      	str	r1, [sp, #0]
20001b7c:	1876      	adds	r6, r6, r1
20001b7e:	78a2      	ldrb	r2, [r4, #2]
20001b80:	1e55      	subs	r5, r2, #1
20001b82:	02ad      	lsls	r5, r5, #10
20001b84:	432e      	orrs	r6, r5
20001b86:	62de      	str	r6, [r3, #44]	; 0x2c
20001b88:	1ab6      	subs	r6, r6, r2
20001b8a:	0152      	lsls	r2, r2, #5
20001b8c:	4316      	orrs	r6, r2
20001b8e:	78e2      	ldrb	r2, [r4, #3]
20001b90:	0292      	lsls	r2, r2, #10
20001b92:	18b6      	adds	r6, r6, r2
20001b94:	631e      	str	r6, [r3, #48]	; 0x30
20001b96:	6966      	ldr	r6, [r4, #20]
20001b98:	651e      	str	r6, [r3, #80]	; 0x50
20001b9a:	4e2e      	ldr	r6, [pc, #184]	; (20001c54 <RenderTilePersp_Ctrl>)
20001b9c:	1e4d      	subs	r5, r1, #1
20001b9e:	02ad      	lsls	r5, r5, #10
20001ba0:	432e      	orrs	r6, r5
20001ba2:	66de      	str	r6, [r3, #108]	; 0x6c
20001ba4:	1a76      	subs	r6, r6, r1
20001ba6:	014d      	lsls	r5, r1, #5
20001ba8:	432e      	orrs	r6, r5
20001baa:	0289      	lsls	r1, r1, #10
20001bac:	1876      	adds	r6, r6, r1
20001bae:	671e      	str	r6, [r3, #112]	; 0x70
20001bb0:	69a4      	ldr	r4, [r4, #24]
20001bb2:	4926      	ldr	r1, [pc, #152]	; (20001c4c <RenderTilePersp_pSioBase>)
20001bb4:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001bb6:	6825      	ldr	r5, [r4, #0]
20001bb8:	434d      	muls	r5, r1
20001bba:	12ad      	asrs	r5, r5, #10
20001bbc:	609d      	str	r5, [r3, #8]
20001bbe:	649d      	str	r5, [r3, #72]	; 0x48
20001bc0:	10ad      	asrs	r5, r5, #2
20001bc2:	68e6      	ldr	r6, [r4, #12]
20001bc4:	434e      	muls	r6, r1
20001bc6:	12b6      	asrs	r6, r6, #10
20001bc8:	60de      	str	r6, [r3, #12]
20001bca:	64de      	str	r6, [r3, #76]	; 0x4c
20001bcc:	10b6      	asrs	r6, r6, #2
20001bce:	4672      	mov	r2, lr
20001bd0:	4355      	muls	r5, r2
20001bd2:	4372      	muls	r2, r6
20001bd4:	468e      	mov	lr, r1
20001bd6:	6866      	ldr	r6, [r4, #4]
20001bd8:	4371      	muls	r1, r6
20001bda:	1309      	asrs	r1, r1, #12
20001bdc:	4666      	mov	r6, ip
20001bde:	4371      	muls	r1, r6
20001be0:	186d      	adds	r5, r5, r1
20001be2:	68a1      	ldr	r1, [r4, #8]
20001be4:	186d      	adds	r5, r5, r1
20001be6:	601d      	str	r5, [r3, #0]
20001be8:	641d      	str	r5, [r3, #64]	; 0x40
20001bea:	6921      	ldr	r1, [r4, #16]
20001bec:	4675      	mov	r5, lr
20001bee:	4369      	muls	r1, r5
20001bf0:	1309      	asrs	r1, r1, #12
20001bf2:	4371      	muls	r1, r6
20001bf4:	1852      	adds	r2, r2, r1
20001bf6:	6961      	ldr	r1, [r4, #20]
20001bf8:	1852      	adds	r2, r2, r1
20001bfa:	605a      	str	r2, [r3, #4]
20001bfc:	645a      	str	r2, [r3, #68]	; 0x44
20001bfe:	9e00      	ldr	r6, [sp, #0]
20001c00:	0076      	lsls	r6, r6, #1
20001c02:	087f      	lsrs	r7, r7, #1
20001c04:	d309      	bcc.n	20001c1a <RenderTilePersp4+0xe6>
20001c06:	69dc      	ldr	r4, [r3, #28]
20001c08:	7824      	ldrb	r4, [r4, #0]
20001c0a:	40b4      	lsls	r4, r6
20001c0c:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001c0e:	5d29      	ldrb	r1, [r5, r4]
20001c10:	020c      	lsls	r4, r1, #8
20001c12:	4321      	orrs	r1, r4
20001c14:	040c      	lsls	r4, r1, #16
20001c16:	4321      	orrs	r1, r4
20001c18:	c002      	stmia	r0!, {r1}
20001c1a:	423f      	tst	r7, r7
20001c1c:	d014      	beq.n	20001c48 <RenderTilePersp4+0x114>
20001c1e:	69dc      	ldr	r4, [r3, #28]
20001c20:	7824      	ldrb	r4, [r4, #0]
20001c22:	40b4      	lsls	r4, r6
20001c24:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001c26:	5d29      	ldrb	r1, [r5, r4]
20001c28:	020c      	lsls	r4, r1, #8
20001c2a:	4321      	orrs	r1, r4
20001c2c:	040c      	lsls	r4, r1, #16
20001c2e:	4321      	orrs	r1, r4
20001c30:	69dc      	ldr	r4, [r3, #28]
20001c32:	7824      	ldrb	r4, [r4, #0]
20001c34:	40b4      	lsls	r4, r6
20001c36:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001c38:	5d2a      	ldrb	r2, [r5, r4]
20001c3a:	0214      	lsls	r4, r2, #8
20001c3c:	4322      	orrs	r2, r4
20001c3e:	0414      	lsls	r4, r2, #16
20001c40:	4322      	orrs	r2, r4
20001c42:	c006      	stmia	r0!, {r1, r2}
20001c44:	3f01      	subs	r7, #1
20001c46:	d1ea      	bne.n	20001c1e <RenderTilePersp4+0xea>
20001c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20001c4a:	46c0      	nop			; (mov r8, r8)

20001c4c <RenderTilePersp_pSioBase>:
20001c4c:	d0000000 	.word	0xd0000000

20001c50 <RenderTilePersp_Interp>:
20001c50:	d0000080 	.word	0xd0000080

20001c54 <RenderTilePersp_Ctrl>:
20001c54:	0004000c 	.word	0x0004000c

20001c58 <BlitKey>:
20001c58:	b510      	push	{r4, lr}
20001c5a:	4686      	mov	lr, r0
20001c5c:	08d4      	lsrs	r4, r2, #3
20001c5e:	00e4      	lsls	r4, r4, #3
20001c60:	4062      	eors	r2, r4
20001c62:	4420      	add	r0, r4
20001c64:	4421      	add	r1, r4
20001c66:	a413      	add	r4, pc, #76	; (adr r4, 20001cb4 <BlitKey+0x5c>)
20001c68:	00d2      	lsls	r2, r2, #3
20001c6a:	1aa4      	subs	r4, r4, r2
20001c6c:	3401      	adds	r4, #1
20001c6e:	4720      	bx	r4
20001c70:	3808      	subs	r0, #8
20001c72:	3908      	subs	r1, #8
20001c74:	79cc      	ldrb	r4, [r1, #7]
20001c76:	429c      	cmp	r4, r3
20001c78:	d000      	beq.n	20001c7c <BlitKey+0x24>
20001c7a:	71c4      	strb	r4, [r0, #7]
20001c7c:	798c      	ldrb	r4, [r1, #6]
20001c7e:	429c      	cmp	r4, r3
20001c80:	d000      	beq.n	20001c84 <BlitKey+0x2c>
20001c82:	7184      	strb	r4, [r0, #6]
20001c84:	794c      	ldrb	r4, [r1, #5]
20001c86:	429c      	cmp	r4, r3
20001c88:	d000      	beq.n	20001c8c <BlitKey+0x34>
20001c8a:	7144      	strb	r4, [r0, #5]
20001c8c:	790c      	ldrb	r4, [r1, #4]
20001c8e:	429c      	cmp	r4, r3
20001c90:	d000      	beq.n	20001c94 <BlitKey+0x3c>
20001c92:	7104      	strb	r4, [r0, #4]
20001c94:	78cc      	ldrb	r4, [r1, #3]
20001c96:	429c      	cmp	r4, r3
20001c98:	d000      	beq.n	20001c9c <BlitKey+0x44>
20001c9a:	70c4      	strb	r4, [r0, #3]
20001c9c:	788c      	ldrb	r4, [r1, #2]
20001c9e:	429c      	cmp	r4, r3
20001ca0:	d000      	beq.n	20001ca4 <BlitKey+0x4c>
20001ca2:	7084      	strb	r4, [r0, #2]
20001ca4:	784c      	ldrb	r4, [r1, #1]
20001ca6:	429c      	cmp	r4, r3
20001ca8:	d000      	beq.n	20001cac <BlitKey+0x54>
20001caa:	7044      	strb	r4, [r0, #1]
20001cac:	780c      	ldrb	r4, [r1, #0]
20001cae:	429c      	cmp	r4, r3
20001cb0:	d000      	beq.n	20001cb4 <BlitKey+0x5c>
20001cb2:	7004      	strb	r4, [r0, #0]
20001cb4:	4570      	cmp	r0, lr
20001cb6:	d8db      	bhi.n	20001c70 <BlitKey+0x18>
20001cb8:	bd10      	pop	{r4, pc}
20001cba:	46c0      	nop			; (mov r8, r8)

20001cbc <Render>:
20001cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
20001cbe:	b085      	sub	sp, #20
20001cc0:	9001      	str	r0, [sp, #4]
20001cc2:	9102      	str	r1, [sp, #8]
20001cc4:	9304      	str	r3, [sp, #16]
20001cc6:	4c31      	ldr	r4, [pc, #196]	; (20001d8c <Render_pScreenAddr>)
20001cc8:	6824      	ldr	r4, [r4, #0]
20001cca:	2c00      	cmp	r4, #0
20001ccc:	d055      	beq.n	20001d7a <Render_Clear>
20001cce:	8825      	ldrh	r5, [r4, #0]
20001cd0:	422d      	tst	r5, r5
20001cd2:	d052      	beq.n	20001d7a <Render_Clear>
20001cd4:	3404      	adds	r4, #4

20001cd6 <Render_StripLoop>:
20001cd6:	8823      	ldrh	r3, [r4, #0]
20001cd8:	429a      	cmp	r2, r3
20001cda:	d304      	bcc.n	20001ce6 <Render_StripOK>
20001cdc:	1ad2      	subs	r2, r2, r3
20001cde:	34e4      	adds	r4, #228	; 0xe4
20001ce0:	3d01      	subs	r5, #1
20001ce2:	d1f8      	bne.n	20001cd6 <Render_StripLoop>
20001ce4:	e049      	b.n	20001d7a <Render_Clear>

20001ce6 <Render_StripOK>:
20001ce6:	9203      	str	r2, [sp, #12]
20001ce8:	8865      	ldrh	r5, [r4, #2]
20001cea:	422d      	tst	r5, r5
20001cec:	d045      	beq.n	20001d7a <Render_Clear>
20001cee:	3404      	adds	r4, #4

20001cf0 <Render_SegmLoop>:
20001cf0:	9a04      	ldr	r2, [sp, #16]
20001cf2:	4212      	tst	r2, r2
20001cf4:	d041      	beq.n	20001d7a <Render_Clear>
20001cf6:	8823      	ldrh	r3, [r4, #0]
20001cf8:	4293      	cmp	r3, r2
20001cfa:	d300      	bcc.n	20001cfe <Render_SegmLoop+0xe>
20001cfc:	4613      	mov	r3, r2
20001cfe:	421b      	tst	r3, r3
20001d00:	d038      	beq.n	20001d74 <Render_SegmNext>
20001d02:	1ad2      	subs	r2, r2, r3
20001d04:	9204      	str	r2, [sp, #16]
20001d06:	88e2      	ldrh	r2, [r4, #6]
20001d08:	b212      	sxth	r2, r2
20001d0a:	9903      	ldr	r1, [sp, #12]
20001d0c:	440a      	add	r2, r1
20001d0e:	7c61      	ldrb	r1, [r4, #17]
20001d10:	4209      	tst	r1, r1
20001d12:	d000      	beq.n	20001d16 <Render_SegmLoop+0x26>
20001d14:	1052      	asrs	r2, r2, #1
20001d16:	8961      	ldrh	r1, [r4, #10]
20001d18:	1a52      	subs	r2, r2, r1
20001d1a:	d5fd      	bpl.n	20001d18 <Render_SegmLoop+0x28>
20001d1c:	1852      	adds	r2, r2, r1
20001d1e:	d4fd      	bmi.n	20001d1c <Render_SegmLoop+0x2c>
20001d20:	88a1      	ldrh	r1, [r4, #4]
20001d22:	b209      	sxth	r1, r1
20001d24:	8920      	ldrh	r0, [r4, #8]
20001d26:	1a09      	subs	r1, r1, r0
20001d28:	d5fd      	bpl.n	20001d26 <Render_SegmLoop+0x36>
20001d2a:	1809      	adds	r1, r1, r0
20001d2c:	d4fd      	bmi.n	20001d2a <Render_SegmLoop+0x3a>
20001d2e:	7c20      	ldrb	r0, [r4, #16]
20001d30:	4200      	tst	r0, r0
20001d32:	d10d      	bne.n	20001d50 <Render_SegmLoop+0x60>
20001d34:	0852      	lsrs	r2, r2, #1
20001d36:	6961      	ldr	r1, [r4, #20]
20001d38:	d300      	bcc.n	20001d3c <Render_SegmLoop+0x4c>
20001d3a:	69a1      	ldr	r1, [r4, #24]
20001d3c:	089a      	lsrs	r2, r3, #2
20001d3e:	9e01      	ldr	r6, [sp, #4]
20001d40:	c604      	stmia	r6!, {r2}
20001d42:	9802      	ldr	r0, [sp, #8]
20001d44:	c601      	stmia	r6!, {r0}
20001d46:	9601      	str	r6, [sp, #4]
20001d48:	f7fe fae2 	bl	20000310 <MemSet4>
20001d4c:	9002      	str	r0, [sp, #8]
20001d4e:	e011      	b.n	20001d74 <Render_SegmNext>
20001d50:	9400      	str	r4, [sp, #0]
20001d52:	a710      	add	r7, pc, #64	; (adr r7, 20001d94 <Render_FncAddr>)
20001d54:	0086      	lsls	r6, r0, #2
20001d56:	59bf      	ldr	r7, [r7, r6]
20001d58:	2806      	cmp	r0, #6
20001d5a:	d803      	bhi.n	20001d64 <Render_SegmLoop+0x74>
20001d5c:	9801      	ldr	r0, [sp, #4]
20001d5e:	47b8      	blx	r7
20001d60:	9001      	str	r0, [sp, #4]
20001d62:	e007      	b.n	20001d74 <Render_SegmNext>
20001d64:	0898      	lsrs	r0, r3, #2
20001d66:	9e01      	ldr	r6, [sp, #4]
20001d68:	c601      	stmia	r6!, {r0}
20001d6a:	9802      	ldr	r0, [sp, #8]
20001d6c:	c601      	stmia	r6!, {r0}
20001d6e:	9601      	str	r6, [sp, #4]
20001d70:	47b8      	blx	r7
20001d72:	9002      	str	r0, [sp, #8]

20001d74 <Render_SegmNext>:
20001d74:	341c      	adds	r4, #28
20001d76:	3d01      	subs	r5, #1
20001d78:	d1ba      	bne.n	20001cf0 <Render_SegmLoop>

20001d7a <Render_Clear>:
20001d7a:	9801      	ldr	r0, [sp, #4]
20001d7c:	9904      	ldr	r1, [sp, #16]
20001d7e:	0889      	lsrs	r1, r1, #2
20001d80:	d001      	beq.n	20001d86 <Render_Clear+0xc>
20001d82:	4a03      	ldr	r2, [pc, #12]	; (20001d90 <Render_LineBuf0Addr>)
20001d84:	c006      	stmia	r0!, {r1, r2}
20001d86:	b005      	add	sp, #20
20001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
20001d8a:	46c0      	nop			; (mov r8, r8)

20001d8c <Render_pScreenAddr>:
20001d8c:	200027e4 	.word	0x200027e4

20001d90 <Render_LineBuf0Addr>:
20001d90:	200201b8 	.word	0x200201b8

20001d94 <Render_FncAddr>:
20001d94:	20000311 	.word	0x20000311
20001d98:	20000929 	.word	0x20000929
20001d9c:	2000143d 	.word	0x2000143d
20001da0:	20001505 	.word	0x20001505
20001da4:	20001399 	.word	0x20001399
20001da8:	20000923 	.word	0x20000923
20001dac:	20000925 	.word	0x20000925
20001db0:	2000089d 	.word	0x2000089d
20001db4:	20000839 	.word	0x20000839
20001db8:	2000077d 	.word	0x2000077d
20001dbc:	20000e7d 	.word	0x20000e7d
20001dc0:	200000c1 	.word	0x200000c1
20001dc4:	20000689 	.word	0x20000689
20001dc8:	20000345 	.word	0x20000345
20001dcc:	20000b2d 	.word	0x20000b2d
20001dd0:	20000451 	.word	0x20000451
20001dd4:	20000c25 	.word	0x20000c25
20001dd8:	20000d95 	.word	0x20000d95
20001ddc:	20000f59 	.word	0x20000f59
20001de0:	20001059 	.word	0x20001059
20001de4:	200012e5 	.word	0x200012e5
20001de8:	200001f5 	.word	0x200001f5
20001dec:	2000095d 	.word	0x2000095d
20001df0:	20000a31 	.word	0x20000a31
20001df4:	200015c1 	.word	0x200015c1
20001df8:	20001745 	.word	0x20001745
20001dfc:	200018b5 	.word	0x200018b5
20001e00:	20001a01 	.word	0x20001a01
20001e04:	20001b35 	.word	0x20001b35

20001e08 <flash_init_boot2_copyout>:
    if (boot2_copyout_valid)
20001e08:	4808      	ldr	r0, [pc, #32]	; (20001e2c <flash_init_boot2_copyout+0x24>)
static void __no_inline_not_in_flash_func(flash_init_boot2_copyout)() {
20001e0a:	b510      	push	{r4, lr}
    if (boot2_copyout_valid)
20001e0c:	7803      	ldrb	r3, [r0, #0]
20001e0e:	2b00      	cmp	r3, #0
20001e10:	d10a      	bne.n	20001e28 <flash_init_boot2_copyout+0x20>
20001e12:	2380      	movs	r3, #128	; 0x80
20001e14:	4906      	ldr	r1, [pc, #24]	; (20001e30 <flash_init_boot2_copyout+0x28>)
    for (int i = 0; i < BOOT2_SIZE_WORDS; ++i)
20001e16:	4a07      	ldr	r2, [pc, #28]	; (20001e34 <flash_init_boot2_copyout+0x2c>)
20001e18:	055b      	lsls	r3, r3, #21
        boot2_copyout[i] = ((uint32_t *)XIP_BASE)[i];
20001e1a:	681c      	ldr	r4, [r3, #0]
20001e1c:	50cc      	str	r4, [r1, r3]
    for (int i = 0; i < BOOT2_SIZE_WORDS; ++i)
20001e1e:	3304      	adds	r3, #4
20001e20:	4293      	cmp	r3, r2
20001e22:	d1fa      	bne.n	20001e1a <flash_init_boot2_copyout+0x12>
    boot2_copyout_valid = true;
20001e24:	2301      	movs	r3, #1
20001e26:	7003      	strb	r3, [r0, #0]
}
20001e28:	bd10      	pop	{r4, pc}
20001e2a:	46c0      	nop			; (mov r8, r8)
20001e2c:	20023b88 	.word	0x20023b88
20001e30:	1002335c 	.word	0x1002335c
20001e34:	10000100 	.word	0x10000100

20001e38 <flash_enable_xip_via_boot2>:
static void __no_inline_not_in_flash_func(flash_enable_xip_via_boot2)() {
20001e38:	b510      	push	{r4, lr}
    ((void (*)(void))boot2_copyout+1)();
20001e3a:	4b02      	ldr	r3, [pc, #8]	; (20001e44 <flash_enable_xip_via_boot2+0xc>)
20001e3c:	3301      	adds	r3, #1
20001e3e:	4798      	blx	r3
}
20001e40:	bd10      	pop	{r4, pc}
20001e42:	46c0      	nop			; (mov r8, r8)
20001e44:	2002335c 	.word	0x2002335c

20001e48 <flash_cs_force.constprop.0>:
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
20001e48:	4b03      	ldr	r3, [pc, #12]	; (20001e58 <flash_cs_force.constprop.0+0x10>)
20001e4a:	681a      	ldr	r2, [r3, #0]
20001e4c:	23c0      	movs	r3, #192	; 0xc0
20001e4e:	009b      	lsls	r3, r3, #2
20001e50:	4393      	bics	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
20001e52:	4a02      	ldr	r2, [pc, #8]	; (20001e5c <flash_cs_force.constprop.0+0x14>)
20001e54:	6013      	str	r3, [r2, #0]
}
20001e56:	4770      	bx	lr
20001e58:	4001800c 	.word	0x4001800c
20001e5c:	4001900c 	.word	0x4001900c

20001e60 <flash_cs_force.constprop.1>:
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
20001e60:	4b05      	ldr	r3, [pc, #20]	; (20001e78 <flash_cs_force.constprop.1+0x18>)
20001e62:	681a      	ldr	r2, [r3, #0]
20001e64:	2380      	movs	r3, #128	; 0x80
20001e66:	009b      	lsls	r3, r3, #2
20001e68:	4053      	eors	r3, r2
20001e6a:	22c0      	movs	r2, #192	; 0xc0
20001e6c:	0092      	lsls	r2, r2, #2
20001e6e:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
20001e70:	4a02      	ldr	r2, [pc, #8]	; (20001e7c <flash_cs_force.constprop.1+0x1c>)
20001e72:	6013      	str	r3, [r2, #0]
20001e74:	4770      	bx	lr
20001e76:	46c0      	nop			; (mov r8, r8)
20001e78:	4001800c 	.word	0x4001800c
20001e7c:	4001900c 	.word	0x4001900c

20001e80 <flash_do_cmd.constprop.0>:
static void __no_inline_not_in_flash_func(flash_do_cmd)(const uint8_t *txbuf, uint8_t *rxbuf, size_t count) {
20001e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001e82:	46ce      	mov	lr, r9
20001e84:	4647      	mov	r7, r8
20001e86:	4681      	mov	r9, r0
20001e88:	b580      	push	{r7, lr}
    void (*connect_internal_flash)(void) = (void(*)(void))rom_func_lookup(rom_table_code('I', 'F'));
20001e8a:	4823      	ldr	r0, [pc, #140]	; (20001f18 <flash_do_cmd.constprop.0+0x98>)
static void __no_inline_not_in_flash_func(flash_do_cmd)(const uint8_t *txbuf, uint8_t *rxbuf, size_t count) {
20001e8c:	000e      	movs	r6, r1
    void (*connect_internal_flash)(void) = (void(*)(void))rom_func_lookup(rom_table_code('I', 'F'));
20001e8e:	f000 fbef 	bl	20002670 <__rom_func_lookup_veneer>
20001e92:	0005      	movs	r5, r0
    void (*flash_exit_xip)(void) = (void(*)(void))rom_func_lookup(rom_table_code('E', 'X'));
20001e94:	4821      	ldr	r0, [pc, #132]	; (20001f1c <flash_do_cmd.constprop.0+0x9c>)
20001e96:	f000 fbeb 	bl	20002670 <__rom_func_lookup_veneer>
20001e9a:	0004      	movs	r4, r0
    void (*flash_flush_cache)(void) = (void(*)(void))rom_func_lookup(rom_table_code('F', 'C'));
20001e9c:	4820      	ldr	r0, [pc, #128]	; (20001f20 <flash_do_cmd.constprop.0+0xa0>)
20001e9e:	f000 fbe7 	bl	20002670 <__rom_func_lookup_veneer>
20001ea2:	4680      	mov	r8, r0
    flash_init_boot2_copyout();
20001ea4:	f7ff ffb0 	bl	20001e08 <flash_init_boot2_copyout>
    connect_internal_flash();
20001ea8:	47a8      	blx	r5
    flash_exit_xip();
20001eaa:	47a0      	blx	r4
    flash_cs_force(0);
20001eac:	f7ff ffd8 	bl	20001e60 <flash_cs_force.constprop.1>
        uint32_t flags = ssi_hw->sr;
20001eb0:	21c0      	movs	r1, #192	; 0xc0
    size_t rx_remaining = count;
20001eb2:	240d      	movs	r4, #13
    size_t tx_remaining = count;
20001eb4:	220d      	movs	r2, #13
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
20001eb6:	2708      	movs	r7, #8
        bool can_put = !!(flags & SSI_SR_TFNF_BITS);
20001eb8:	2002      	movs	r0, #2
        uint32_t flags = ssi_hw->sr;
20001eba:	0549      	lsls	r1, r1, #21
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
20001ebc:	003d      	movs	r5, r7
        uint32_t flags = ssi_hw->sr;
20001ebe:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
20001ec0:	401d      	ands	r5, r3
        if (can_put && tx_remaining && rx_remaining - tx_remaining < max_in_flight) {
20001ec2:	4218      	tst	r0, r3
20001ec4:	d00b      	beq.n	20001ede <flash_do_cmd.constprop.0+0x5e>
20001ec6:	2a00      	cmp	r2, #0
20001ec8:	d009      	beq.n	20001ede <flash_do_cmd.constprop.0+0x5e>
20001eca:	1aa3      	subs	r3, r4, r2
20001ecc:	2b0d      	cmp	r3, #13
20001ece:	d81e      	bhi.n	20001f0e <flash_do_cmd.constprop.0+0x8e>
            ssi_hw->dr0 = *txbuf++;
20001ed0:	464b      	mov	r3, r9
20001ed2:	781b      	ldrb	r3, [r3, #0]
            --tx_remaining;
20001ed4:	3a01      	subs	r2, #1
            ssi_hw->dr0 = *txbuf++;
20001ed6:	660b      	str	r3, [r1, #96]	; 0x60
20001ed8:	2301      	movs	r3, #1
20001eda:	469c      	mov	ip, r3
20001edc:	44e1      	add	r9, ip
        if (can_get && rx_remaining) {
20001ede:	0013      	movs	r3, r2
20001ee0:	2d00      	cmp	r5, #0
20001ee2:	d10b      	bne.n	20001efc <flash_do_cmd.constprop.0+0x7c>
    while (tx_remaining || rx_remaining) {
20001ee4:	4323      	orrs	r3, r4
20001ee6:	2b00      	cmp	r3, #0
20001ee8:	d1e8      	bne.n	20001ebc <flash_do_cmd.constprop.0+0x3c>
    flash_cs_force(1);
20001eea:	f7ff ffad 	bl	20001e48 <flash_cs_force.constprop.0>
    flash_flush_cache();
20001eee:	47c0      	blx	r8
    flash_enable_xip_via_boot2();
20001ef0:	f7ff ffa2 	bl	20001e38 <flash_enable_xip_via_boot2>
}
20001ef4:	bcc0      	pop	{r6, r7}
20001ef6:	46b9      	mov	r9, r7
20001ef8:	46b0      	mov	r8, r6
20001efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (can_get && rx_remaining) {
20001efc:	2c00      	cmp	r4, #0
20001efe:	d0f2      	beq.n	20001ee6 <flash_do_cmd.constprop.0+0x66>
            *rxbuf++ = ssi_hw->dr0;
20001f00:	6e0b      	ldr	r3, [r1, #96]	; 0x60
            --rx_remaining;
20001f02:	3c01      	subs	r4, #1
            *rxbuf++ = ssi_hw->dr0;
20001f04:	7033      	strb	r3, [r6, #0]
    while (tx_remaining || rx_remaining) {
20001f06:	0023      	movs	r3, r4
            *rxbuf++ = ssi_hw->dr0;
20001f08:	3601      	adds	r6, #1
    while (tx_remaining || rx_remaining) {
20001f0a:	4313      	orrs	r3, r2
20001f0c:	e7eb      	b.n	20001ee6 <flash_do_cmd.constprop.0+0x66>
        if (can_get && rx_remaining) {
20001f0e:	2d00      	cmp	r5, #0
20001f10:	d0d4      	beq.n	20001ebc <flash_do_cmd.constprop.0+0x3c>
20001f12:	2c00      	cmp	r4, #0
20001f14:	d0d2      	beq.n	20001ebc <flash_do_cmd.constprop.0+0x3c>
20001f16:	e7f3      	b.n	20001f00 <flash_do_cmd.constprop.0+0x80>
20001f18:	00004649 	.word	0x00004649
20001f1c:	00005845 	.word	0x00005845
20001f20:	00004346 	.word	0x00004346

20001f24 <mutex_enter_blocking>:

void __time_critical_func(mutex_enter_blocking)(mutex_t *mtx) {
20001f24:	b510      	push	{r4, lr}
    assert(mtx->core.spin_lock);
    bool block = true;
    do {
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001f26:	6802      	ldr	r2, [r0, #0]
    *lock = 0;
20001f28:	2400      	movs	r4, #0
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001f2a:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20001f2e:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20001f30:	6813      	ldr	r3, [r2, #0]
20001f32:	2b00      	cmp	r3, #0
20001f34:	d0fc      	beq.n	20001f30 <mutex_enter_blocking+0xc>
    __asm volatile ("dmb");
20001f36:	f3bf 8f5f 	dmb	sy
        if (mtx->owner < 0) {
20001f3a:	7903      	ldrb	r3, [r0, #4]
20001f3c:	2b7f      	cmp	r3, #127	; 0x7f
20001f3e:	d80b      	bhi.n	20001f58 <mutex_enter_blocking+0x34>
            mtx->owner = get_core_num();
            block = false;
        }
        spin_unlock(mtx->core.spin_lock, save);
20001f40:	6803      	ldr	r3, [r0, #0]
20001f42:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20001f46:	601c      	str	r4, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20001f48:	f381 8810 	msr	PRIMASK, r1
    __asm volatile ("wfe");
20001f4c:	bf20      	wfe
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001f4e:	6802      	ldr	r2, [r0, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001f50:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20001f54:	b672      	cpsid	i
inline static void spin_lock_unsafe_blocking(spin_lock_t *lock) {
20001f56:	e7eb      	b.n	20001f30 <mutex_enter_blocking+0xc>
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
20001f58:	23d0      	movs	r3, #208	; 0xd0
20001f5a:	061b      	lsls	r3, r3, #24
            mtx->owner = get_core_num();
20001f5c:	681b      	ldr	r3, [r3, #0]
20001f5e:	7103      	strb	r3, [r0, #4]
        spin_unlock(mtx->core.spin_lock, save);
20001f60:	6803      	ldr	r3, [r0, #0]
    __asm volatile ("dmb");
20001f62:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20001f66:	2200      	movs	r2, #0
20001f68:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20001f6a:	f381 8810 	msr	PRIMASK, r1
        if (block) {
            __wfe();
        }
    } while (block);
}
20001f6e:	bd10      	pop	{r4, pc}

20001f70 <mutex_try_enter>:

bool __time_critical_func(mutex_try_enter)(mutex_t *mtx, uint32_t *owner_out) {
20001f70:	0003      	movs	r3, r0
    bool entered;
    uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001f72:	6800      	ldr	r0, [r0, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001f74:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
20001f78:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20001f7a:	6802      	ldr	r2, [r0, #0]
20001f7c:	2a00      	cmp	r2, #0
20001f7e:	d0fc      	beq.n	20001f7a <mutex_try_enter+0xa>
    __asm volatile ("dmb");
20001f80:	f3bf 8f5f 	dmb	sy
    if (mtx->owner < 0) {
20001f84:	2204      	movs	r2, #4
20001f86:	569a      	ldrsb	r2, [r3, r2]
20001f88:	2a00      	cmp	r2, #0
20001f8a:	db0b      	blt.n	20001fa4 <mutex_try_enter+0x34>
        mtx->owner = get_core_num();
        entered = true;
    } else {
        if (owner_out) *owner_out = mtx->owner;
20001f8c:	2900      	cmp	r1, #0
20001f8e:	d00f      	beq.n	20001fb0 <mutex_try_enter+0x40>
        entered = false;
20001f90:	2000      	movs	r0, #0
        if (owner_out) *owner_out = mtx->owner;
20001f92:	600a      	str	r2, [r1, #0]
    }
    spin_unlock(mtx->core.spin_lock, save);
20001f94:	681b      	ldr	r3, [r3, #0]
20001f96:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20001f9a:	2200      	movs	r2, #0
20001f9c:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20001f9e:	f38c 8810 	msr	PRIMASK, ip
    return entered;
}
20001fa2:	4770      	bx	lr
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
20001fa4:	22d0      	movs	r2, #208	; 0xd0
20001fa6:	0612      	lsls	r2, r2, #24
        mtx->owner = get_core_num();
20001fa8:	6812      	ldr	r2, [r2, #0]
        entered = true;
20001faa:	2001      	movs	r0, #1
        mtx->owner = get_core_num();
20001fac:	711a      	strb	r2, [r3, #4]
        entered = true;
20001fae:	e7f1      	b.n	20001f94 <mutex_try_enter+0x24>
        entered = false;
20001fb0:	2000      	movs	r0, #0
20001fb2:	e7ef      	b.n	20001f94 <mutex_try_enter+0x24>

20001fb4 <mutex_enter_timeout_ms>:

bool __time_critical_func(mutex_enter_timeout_ms)(mutex_t *mtx, uint32_t timeout_ms) {
20001fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
20001fb6:	46c6      	mov	lr, r8
20001fb8:	b500      	push	{lr}
20001fba:	000c      	movs	r4, r1
20001fbc:	4680      	mov	r8, r0
    update_us_since_boot(&t, time_us_64());
20001fbe:	f000 fb5f 	bl	20002680 <__time_us_64_veneer>
    uint64_t delayed = base + ms * 1000ull;
20001fc2:	22fa      	movs	r2, #250	; 0xfa
    update_us_since_boot(&t, time_us_64());
20001fc4:	0006      	movs	r6, r0
20001fc6:	000f      	movs	r7, r1
    uint64_t delayed = base + ms * 1000ull;
20001fc8:	0020      	movs	r0, r4
20001fca:	2300      	movs	r3, #0
20001fcc:	2100      	movs	r1, #0
20001fce:	0092      	lsls	r2, r2, #2
20001fd0:	f000 fb46 	bl	20002660 <____wrap___aeabi_lmul_veneer>
20001fd4:	1980      	adds	r0, r0, r6
20001fd6:	4179      	adcs	r1, r7
20001fd8:	0004      	movs	r4, r0
20001fda:	000d      	movs	r5, r1
    if (delayed < base) {
20001fdc:	428f      	cmp	r7, r1
20001fde:	d830      	bhi.n	20002042 <mutex_enter_timeout_ms+0x8e>
20001fe0:	d02d      	beq.n	2000203e <mutex_enter_timeout_ms+0x8a>
    *lock = 0;
20001fe2:	2600      	movs	r6, #0

bool __time_critical_func(mutex_enter_block_until)(mutex_t *mtx, absolute_time_t until) {
    assert(mtx->core.spin_lock);
    bool block = true;
    do {
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001fe4:	4643      	mov	r3, r8
20001fe6:	681a      	ldr	r2, [r3, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001fe8:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20001fec:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20001fee:	6813      	ldr	r3, [r2, #0]
20001ff0:	2b00      	cmp	r3, #0
20001ff2:	d0fc      	beq.n	20001fee <mutex_enter_timeout_ms+0x3a>
    __asm volatile ("dmb");
20001ff4:	f3bf 8f5f 	dmb	sy
        if (mtx->owner < 0) {
20001ff8:	4643      	mov	r3, r8
20001ffa:	791b      	ldrb	r3, [r3, #4]
20001ffc:	2b7f      	cmp	r3, #127	; 0x7f
20001ffe:	d80e      	bhi.n	2000201e <mutex_enter_timeout_ms+0x6a>
            mtx->owner = get_core_num();
            block = false;
        }
        spin_unlock(mtx->core.spin_lock, save);
20002000:	4643      	mov	r3, r8
20002002:	681b      	ldr	r3, [r3, #0]
20002004:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20002008:	601e      	str	r6, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
2000200a:	f381 8810 	msr	PRIMASK, r1
        if (block) {
            if (best_effort_wfe_or_timeout(until)) {
2000200e:	0020      	movs	r0, r4
20002010:	0029      	movs	r1, r5
20002012:	f000 fb45 	bl	200026a0 <__best_effort_wfe_or_timeout_veneer>
20002016:	2800      	cmp	r0, #0
20002018:	d0e4      	beq.n	20001fe4 <mutex_enter_timeout_ms+0x30>
                return false;
2000201a:	2000      	movs	r0, #0
2000201c:	e00c      	b.n	20002038 <mutex_enter_timeout_ms+0x84>
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
2000201e:	23d0      	movs	r3, #208	; 0xd0
            mtx->owner = get_core_num();
20002020:	4642      	mov	r2, r8
20002022:	061b      	lsls	r3, r3, #24
20002024:	681b      	ldr	r3, [r3, #0]
20002026:	7113      	strb	r3, [r2, #4]
        spin_unlock(mtx->core.spin_lock, save);
20002028:	6813      	ldr	r3, [r2, #0]
    __asm volatile ("dmb");
2000202a:	f3bf 8f5f 	dmb	sy
    *lock = 0;
2000202e:	2200      	movs	r2, #0
20002030:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20002032:	f381 8810 	msr	PRIMASK, r1
            }
        }
    } while (block);
    return true;
20002036:	2001      	movs	r0, #1
}
20002038:	bc80      	pop	{r7}
2000203a:	46b8      	mov	r8, r7
2000203c:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000203e:	4286      	cmp	r6, r0
20002040:	d9cf      	bls.n	20001fe2 <mutex_enter_timeout_ms+0x2e>
        delayed = (uint64_t)-1;
20002042:	2401      	movs	r4, #1
20002044:	4264      	negs	r4, r4
20002046:	17e5      	asrs	r5, r4, #31
20002048:	e7cb      	b.n	20001fe2 <mutex_enter_timeout_ms+0x2e>
2000204a:	46c0      	nop			; (mov r8, r8)

2000204c <mutex_exit>:
}

void __time_critical_func(mutex_exit)(mutex_t *mtx) {
    uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
2000204c:	6802      	ldr	r2, [r0, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
2000204e:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20002052:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20002054:	6813      	ldr	r3, [r2, #0]
20002056:	2b00      	cmp	r3, #0
20002058:	d0fc      	beq.n	20002054 <mutex_exit+0x8>
    __asm volatile ("dmb");
2000205a:	f3bf 8f5f 	dmb	sy
    assert(mtx->owner >= 0);
    mtx->owner = -1;
2000205e:	23ff      	movs	r3, #255	; 0xff
20002060:	7103      	strb	r3, [r0, #4]
    __asm volatile ("sev");
20002062:	bf40      	sev
    __sev();
    spin_unlock(mtx->core.spin_lock, save);
20002064:	6803      	ldr	r3, [r0, #0]
    __asm volatile ("dmb");
20002066:	f3bf 8f5f 	dmb	sy
    *lock = 0;
2000206a:	2200      	movs	r2, #0
2000206c:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
2000206e:	f381 8810 	msr	PRIMASK, r1
}
20002072:	4770      	bx	lr

20002074 <_Z13VgaBufProcessv>:
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
20002074:	22a0      	movs	r2, #160	; 0xa0
{
20002076:	b5f0      	push	{r4, r5, r6, r7, lr}
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
20002078:	2102      	movs	r1, #2
{
2000207a:	46de      	mov	lr, fp
2000207c:	4657      	mov	r7, sl
2000207e:	464e      	mov	r6, r9
20002080:	4645      	mov	r5, r8
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
20002082:	4b7d      	ldr	r3, [pc, #500]	; (20002278 <_Z13VgaBufProcessv+0x204>)
20002084:	05d2      	lsls	r2, r2, #23
{
20002086:	b5e0      	push	{r5, r6, r7, lr}
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
20002088:	50d1      	str	r1, [r2, r3]
	BufInx = bufinx ^ 1;
2000208a:	2301      	movs	r3, #1
	int bufinx = BufInx;
2000208c:	497b      	ldr	r1, [pc, #492]	; (2000227c <_Z13VgaBufProcessv+0x208>)
	hw_divider_save_state(&DividerState);
2000208e:	487c      	ldr	r0, [pc, #496]	; (20002280 <_Z13VgaBufProcessv+0x20c>)
	int bufinx = BufInx;
20002090:	680f      	ldr	r7, [r1, #0]
{
20002092:	b083      	sub	sp, #12
	BufInx = bufinx ^ 1;
20002094:	407b      	eors	r3, r7
20002096:	600b      	str	r3, [r1, #0]
        dma_channel_hw_addr(channel)->al3_read_addr_trig = (uintptr_t) read_addr;
20002098:	4b7a      	ldr	r3, [pc, #488]	; (20002284 <_Z13VgaBufProcessv+0x210>)
2000209a:	681b      	ldr	r3, [r3, #0]
2000209c:	63d3      	str	r3, [r2, #60]	; 0x3c
	hw_divider_save_state(&DividerState);
2000209e:	f000 faf7 	bl	20002690 <__hw_divider_save_state_veneer>
	int line = ScanLine;	// current scanline
200020a2:	4b79      	ldr	r3, [pc, #484]	; (20002288 <_Z13VgaBufProcessv+0x214>)
	if (line > CurVmode.vtot) // last scanline?
200020a4:	4979      	ldr	r1, [pc, #484]	; (2000228c <_Z13VgaBufProcessv+0x218>)
	int line = ScanLine;	// current scanline
200020a6:	681a      	ldr	r2, [r3, #0]
	if (line > CurVmode.vtot) // last scanline?
200020a8:	8d88      	ldrh	r0, [r1, #44]	; 0x2c
	line++; 		// new current scanline
200020aa:	3201      	adds	r2, #1
	if (line > CurVmode.vtot) // last scanline?
200020ac:	4290      	cmp	r0, r2
200020ae:	da04      	bge.n	200020ba <_Z13VgaBufProcessv+0x46>
		Frame++;	// increment frame counter
200020b0:	4877      	ldr	r0, [pc, #476]	; (20002290 <_Z13VgaBufProcessv+0x21c>)
200020b2:	6802      	ldr	r2, [r0, #0]
200020b4:	3201      	adds	r2, #1
200020b6:	6002      	str	r2, [r0, #0]
		line = 1; 	// restart scanline
200020b8:	2201      	movs	r2, #1
	ScanLine = line;	// store new scanline
200020ba:	601a      	str	r2, [r3, #0]
	u8 linetype = ScanlineType[line];
200020bc:	4b75      	ldr	r3, [pc, #468]	; (20002294 <_Z13VgaBufProcessv+0x220>)
	switch (linetype)
200020be:	5c9b      	ldrb	r3, [r3, r2]
200020c0:	3b06      	subs	r3, #6
200020c2:	b2db      	uxtb	r3, r3
200020c4:	2b04      	cmp	r3, #4
200020c6:	d862      	bhi.n	2000218e <_Z13VgaBufProcessv+0x11a>
200020c8:	4873      	ldr	r0, [pc, #460]	; (20002298 <_Z13VgaBufProcessv+0x224>)
200020ca:	009b      	lsls	r3, r3, #2
200020cc:	58c3      	ldr	r3, [r0, r3]
200020ce:	469f      	mov	pc, r3
		y0 = line - CurVmode.vfirst1;
200020d0:	2340      	movs	r3, #64	; 0x40
		y0 = line - CurVmode.vfirst2;
200020d2:	5acb      	ldrh	r3, [r1, r3]
200020d4:	1ad2      	subs	r2, r2, r3
		if (CurVmode.dbly) y0 >>= 1;
200020d6:	2355      	movs	r3, #85	; 0x55
200020d8:	5ccb      	ldrb	r3, [r1, r3]
200020da:	2b00      	cmp	r3, #0
200020dc:	d000      	beq.n	200020e0 <_Z13VgaBufProcessv+0x6c>
200020de:	1052      	asrs	r2, r2, #1
		y0 = (y0 << 1) + 1;
200020e0:	0052      	lsls	r2, r2, #1
200020e2:	1c53      	adds	r3, r2, #1
		VSync = False;	// not vsync
200020e4:	2200      	movs	r2, #0
		y0 = (y0 << 1) + 1;
200020e6:	9300      	str	r3, [sp, #0]
		VSync = False;	// not vsync
200020e8:	4b6c      	ldr	r3, [pc, #432]	; (2000229c <_Z13VgaBufProcessv+0x228>)
200020ea:	701a      	strb	r2, [r3, #0]
	if (y0 >= 0)
200020ec:	9b00      	ldr	r3, [sp, #0]
200020ee:	2b00      	cmp	r3, #0
200020f0:	db25      	blt.n	2000213e <_Z13VgaBufProcessv+0xca>
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
200020f2:	4c6b      	ldr	r4, [pc, #428]	; (200022a0 <_Z13VgaBufProcessv+0x22c>)
    dma_hw->abort = 1u << channel;
200020f4:	21a0      	movs	r1, #160	; 0xa0
		for (layer = 1; layer < LAYERS; layer++)
200020f6:	2301      	movs	r3, #1
200020f8:	46a4      	mov	ip, r4
200020fa:	46bb      	mov	fp, r7
    return timer_hw->timerawl;
200020fc:	4a69      	ldr	r2, [pc, #420]	; (200022a4 <_Z13VgaBufProcessv+0x230>)
200020fe:	486a      	ldr	r0, [pc, #424]	; (200022a8 <_Z13VgaBufProcessv+0x234>)
20002100:	4690      	mov	r8, r2
	if (y0 >= 0)
20002102:	4d6a      	ldr	r5, [pc, #424]	; (200022ac <_Z13VgaBufProcessv+0x238>)
20002104:	4a6a      	ldr	r2, [pc, #424]	; (200022b0 <_Z13VgaBufProcessv+0x23c>)
20002106:	05c9      	lsls	r1, r1, #23
			if (CtrlBufNext[layer] == NULL) continue;
20002108:	4e5e      	ldr	r6, [pc, #376]	; (20002284 <_Z13VgaBufProcessv+0x210>)
2000210a:	009c      	lsls	r4, r3, #2
2000210c:	5934      	ldr	r4, [r6, r4]
2000210e:	9401      	str	r4, [sp, #4]
20002110:	2c00      	cmp	r4, #0
20002112:	d00e      	beq.n	20002132 <_Z13VgaBufProcessv+0xbe>
			if (!s->on || (s->w <= 0) || (y0 < s->y) || (y0 >= s->y + s->h)) continue;
20002114:	7b84      	ldrb	r4, [r0, #14]
20002116:	2c00      	cmp	r4, #0
20002118:	d00b      	beq.n	20002132 <_Z13VgaBufProcessv+0xbe>
2000211a:	8844      	ldrh	r4, [r0, #2]
2000211c:	2c00      	cmp	r4, #0
2000211e:	d008      	beq.n	20002132 <_Z13VgaBufProcessv+0xbe>
20002120:	2400      	movs	r4, #0
20002122:	5f07      	ldrsh	r7, [r0, r4]
20002124:	9e00      	ldr	r6, [sp, #0]
20002126:	42b7      	cmp	r7, r6
20002128:	dc03      	bgt.n	20002132 <_Z13VgaBufProcessv+0xbe>
2000212a:	8884      	ldrh	r4, [r0, #4]
2000212c:	19e4      	adds	r4, r4, r7
2000212e:	42b4      	cmp	r4, r6
20002130:	dc31      	bgt.n	20002196 <_Z13VgaBufProcessv+0x122>
		for (layer = 1; layer < LAYERS; layer++)
20002132:	3301      	adds	r3, #1
20002134:	3518      	adds	r5, #24
20002136:	3024      	adds	r0, #36	; 0x24
20002138:	2b04      	cmp	r3, #4
2000213a:	d1e5      	bne.n	20002108 <_Z13VgaBufProcessv+0x94>
2000213c:	465f      	mov	r7, fp
}
2000213e:	0038      	movs	r0, r7
20002140:	b003      	add	sp, #12
20002142:	bcf0      	pop	{r4, r5, r6, r7}
20002144:	46bb      	mov	fp, r7
20002146:	46b2      	mov	sl, r6
20002148:	46a9      	mov	r9, r5
2000214a:	46a0      	mov	r8, r4
2000214c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		y0 = line - CurVmode.vfirst2;
2000214e:	234e      	movs	r3, #78	; 0x4e
20002150:	e7bf      	b.n	200020d2 <_Z13VgaBufProcessv+0x5e>
		y0 = line - CurVmode.vfirst1;
20002152:	2340      	movs	r3, #64	; 0x40
20002154:	5acb      	ldrh	r3, [r1, r3]
20002156:	1ad2      	subs	r2, r2, r3
		if (CurVmode.dbly) y0 >>= 1;
20002158:	2355      	movs	r3, #85	; 0x55
		y0 = line - CurVmode.vfirst1;
2000215a:	9200      	str	r2, [sp, #0]
		if (CurVmode.dbly) y0 >>= 1;
2000215c:	5ccb      	ldrb	r3, [r1, r3]
2000215e:	2b00      	cmp	r3, #0
20002160:	d001      	beq.n	20002166 <_Z13VgaBufProcessv+0xf2>
20002162:	1053      	asrs	r3, r2, #1
20002164:	9300      	str	r3, [sp, #0]
		VSync = False;	// not vsync
20002166:	2200      	movs	r2, #0
20002168:	4b4c      	ldr	r3, [pc, #304]	; (2000229c <_Z13VgaBufProcessv+0x228>)
2000216a:	701a      	strb	r2, [r3, #0]
		break;
2000216c:	e7be      	b.n	200020ec <_Z13VgaBufProcessv+0x78>
		y0 = line - CurVmode.vfirst1;
2000216e:	2340      	movs	r3, #64	; 0x40
		y0 = line - CurVmode.vfirst2;
20002170:	5acb      	ldrh	r3, [r1, r3]
20002172:	1ad2      	subs	r2, r2, r3
		if (CurVmode.dbly) y0 >>= 1;
20002174:	2355      	movs	r3, #85	; 0x55
20002176:	5ccb      	ldrb	r3, [r1, r3]
20002178:	2b00      	cmp	r3, #0
2000217a:	d000      	beq.n	2000217e <_Z13VgaBufProcessv+0x10a>
2000217c:	1052      	asrs	r2, r2, #1
		y0 <<= 1;
2000217e:	0053      	lsls	r3, r2, #1
		VSync = False;	// not vsync
20002180:	2200      	movs	r2, #0
		y0 <<= 1;
20002182:	9300      	str	r3, [sp, #0]
		VSync = False;	// not vsync
20002184:	4b45      	ldr	r3, [pc, #276]	; (2000229c <_Z13VgaBufProcessv+0x228>)
20002186:	701a      	strb	r2, [r3, #0]
		break;
20002188:	e7b0      	b.n	200020ec <_Z13VgaBufProcessv+0x78>
		y0 = line - CurVmode.vfirst2;
2000218a:	234e      	movs	r3, #78	; 0x4e
2000218c:	e7f0      	b.n	20002170 <_Z13VgaBufProcessv+0xfc>
		VSync = True;	// vsync
2000218e:	2201      	movs	r2, #1
20002190:	4b42      	ldr	r3, [pc, #264]	; (2000229c <_Z13VgaBufProcessv+0x228>)
20002192:	701a      	strb	r2, [r3, #0]
	if (y0 >= 0)
20002194:	e7d3      	b.n	2000213e <_Z13VgaBufProcessv+0xca>
20002196:	4644      	mov	r4, r8
20002198:	6aa4      	ldr	r4, [r4, #40]	; 0x28
2000219a:	46a2      	mov	sl, r4
2000219c:	1d2c      	adds	r4, r5, #4
2000219e:	46a1      	mov	r9, r4
				if (a <= CurLayerProg.maxidle+LAYER_OFFSET) break;
200021a0:	4c44      	ldr	r4, [pc, #272]	; (200022b4 <_Z13VgaBufProcessv+0x240>)
200021a2:	7b67      	ldrb	r7, [r4, #13]
200021a4:	464c      	mov	r4, r9
200021a6:	4699      	mov	r9, r3
200021a8:	0003      	movs	r3, r0
200021aa:	4650      	mov	r0, sl
200021ac:	469a      	mov	sl, r3
200021ae:	0023      	movs	r3, r4
200021b0:	e004      	b.n	200021bc <_Z13VgaBufProcessv+0x148>
200021b2:	4644      	mov	r4, r8
200021b4:	6aa4      	ldr	r4, [r4, #40]	; 0x28
			} while ((u32)(time_us_32() - t1) < (u32)10); // wait max. 10 us, low resolution can take long time
200021b6:	1a24      	subs	r4, r4, r0
200021b8:	2c09      	cmp	r4, #9
200021ba:	d804      	bhi.n	200021c6 <_Z13VgaBufProcessv+0x152>
				if (a <= CurLayerProg.maxidle+LAYER_OFFSET) break;
200021bc:	261f      	movs	r6, #31
				u8 a = *(volatile u8*)&VGA_PIO->sm[sm].addr & 0x1f;
200021be:	781c      	ldrb	r4, [r3, #0]
				if (a <= CurLayerProg.maxidle+LAYER_OFFSET) break;
200021c0:	4034      	ands	r4, r6
200021c2:	42a7      	cmp	r7, r4
200021c4:	d3f5      	bcc.n	200021b2 <_Z13VgaBufProcessv+0x13e>
200021c6:	464b      	mov	r3, r9
200021c8:	2701      	movs	r7, #1
200021ca:	005c      	lsls	r4, r3, #1
200021cc:	4650      	mov	r0, sl
			dma_channel_abort(VGA_DMA_PIO(layer));
200021ce:	46a2      	mov	sl, r4
200021d0:	3401      	adds	r4, #1
200021d2:	40a7      	lsls	r7, r4
200021d4:	508f      	str	r7, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
200021d6:	588c      	ldr	r4, [r1, r2]
200021d8:	423c      	tst	r4, r7
200021da:	d1fc      	bne.n	200021d6 <_Z13VgaBufProcessv+0x162>
    dma_hw->abort = 1u << channel;
200021dc:	2401      	movs	r4, #1
200021de:	4656      	mov	r6, sl
200021e0:	40b4      	lsls	r4, r6
200021e2:	4699      	mov	r9, r3
200021e4:	508c      	str	r4, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
200021e6:	588b      	ldr	r3, [r1, r2]
200021e8:	4223      	tst	r3, r4
200021ea:	d1fc      	bne.n	200021e6 <_Z13VgaBufProcessv+0x172>
    dma_hw->abort = 1u << channel;
200021ec:	003b      	movs	r3, r7
200021ee:	508f      	str	r7, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
200021f0:	588f      	ldr	r7, [r1, r2]
200021f2:	423b      	tst	r3, r7
200021f4:	d1fc      	bne.n	200021f0 <_Z13VgaBufProcessv+0x17c>
    dma_hw->abort = 1u << channel;
200021f6:	464b      	mov	r3, r9
200021f8:	508c      	str	r4, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
200021fa:	588f      	ldr	r7, [r1, r2]
200021fc:	423c      	tst	r4, r7
200021fe:	d1fc      	bne.n	200021fa <_Z13VgaBufProcessv+0x186>
20002200:	2701      	movs	r7, #1
20002202:	4664      	mov	r4, ip
20002204:	409f      	lsls	r7, r3
20002206:	4666      	mov	r6, ip
20002208:	6824      	ldr	r4, [r4, #0]
    pio->sm[sm].instr = instr;
2000220a:	449a      	add	sl, r3
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
2000220c:	43bc      	bics	r4, r7
2000220e:	6034      	str	r4, [r6, #0]
20002210:	2480      	movs	r4, #128	; 0x80
20002212:	2680      	movs	r6, #128	; 0x80
20002214:	0164      	lsls	r4, r4, #5
20002216:	432c      	orrs	r4, r5
20002218:	0636      	lsls	r6, r6, #24
2000221a:	6026      	str	r6, [r4, #0]
2000221c:	6026      	str	r6, [r4, #0]
    pio->ctrl |= 1u << (PIO_CTRL_SM_RESTART_LSB + sm);
2000221e:	4664      	mov	r4, ip
20002220:	2601      	movs	r6, #1
20002222:	6824      	ldr	r4, [r4, #0]
20002224:	46a1      	mov	r9, r4
20002226:	1d1c      	adds	r4, r3, #4
20002228:	40a6      	lsls	r6, r4
2000222a:	0034      	movs	r4, r6
2000222c:	464e      	mov	r6, r9
2000222e:	4334      	orrs	r4, r6
20002230:	4666      	mov	r6, ip
20002232:	6034      	str	r4, [r6, #0]
20002234:	261f      	movs	r6, #31
20002236:	4c1f      	ldr	r4, [pc, #124]	; (200022b4 <_Z13VgaBufProcessv+0x240>)
20002238:	7ae4      	ldrb	r4, [r4, #11]
2000223a:	4034      	ands	r4, r6
2000223c:	0026      	movs	r6, r4
    pio->sm[sm].instr = instr;
2000223e:	4654      	mov	r4, sl
20002240:	00e4      	lsls	r4, r4, #3
20002242:	46a2      	mov	sl, r4
20002244:	4c1c      	ldr	r4, [pc, #112]	; (200022b8 <_Z13VgaBufProcessv+0x244>)
20002246:	46a1      	mov	r9, r4
20002248:	44ca      	add	sl, r9
2000224a:	4654      	mov	r4, sl
2000224c:	6026      	str	r6, [r4, #0]
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
2000224e:	4664      	mov	r4, ip
20002250:	6824      	ldr	r4, [r4, #0]
20002252:	261f      	movs	r6, #31
20002254:	43bc      	bics	r4, r7
20002256:	4327      	orrs	r7, r4
20002258:	4664      	mov	r4, ip
2000225a:	6027      	str	r7, [r4, #0]
2000225c:	4c15      	ldr	r4, [pc, #84]	; (200022b4 <_Z13VgaBufProcessv+0x240>)
2000225e:	7b24      	ldrb	r4, [r4, #12]
20002260:	4034      	ands	r4, r6
    pio->sm[sm].instr = instr;
20002262:	4656      	mov	r6, sl
20002264:	6034      	str	r4, [r6, #0]
    return &dma_hw->ch[channel];
20002266:	26a0      	movs	r6, #160	; 0xa0
20002268:	05f6      	lsls	r6, r6, #23
2000226a:	46b1      	mov	r9, r6
2000226c:	01dc      	lsls	r4, r3, #7
        dma_channel_hw_addr(channel)->al3_read_addr_trig = (uintptr_t) read_addr;
2000226e:	9e01      	ldr	r6, [sp, #4]
20002270:	444c      	add	r4, r9
20002272:	63e6      	str	r6, [r4, #60]	; 0x3c
20002274:	e75d      	b.n	20002132 <_Z13VgaBufProcessv+0xbe>
20002276:	46c0      	nop			; (mov r8, r8)
20002278:	0000040c 	.word	0x0000040c
2000227c:	2000326c 	.word	0x2000326c
20002280:	200047f8 	.word	0x200047f8
20002284:	20004750 	.word	0x20004750
20002288:	200220d8 	.word	0x200220d8
2000228c:	2000479c 	.word	0x2000479c
20002290:	20005008 	.word	0x20005008
20002294:	200220dc 	.word	0x200220dc
20002298:	101acb90 	.word	0x101acb90
2000229c:	20023b84 	.word	0x20023b84
200022a0:	50200000 	.word	0x50200000
200022a4:	40054000 	.word	0x40054000
200022a8:	20020160 	.word	0x20020160
200022ac:	502000e8 	.word	0x502000e8
200022b0:	00000444 	.word	0x00000444
200022b4:	2000476c 	.word	0x2000476c
200022b8:	502000d8 	.word	0x502000d8

200022bc <_Z12VgaBufRenderPmS_Phi>:
{
200022bc:	b5f0      	push	{r4, r5, r6, r7, lr}
200022be:	46de      	mov	lr, fp
200022c0:	4657      	mov	r7, sl
200022c2:	464e      	mov	r6, r9
200022c4:	4645      	mov	r5, r8
200022c6:	4699      	mov	r9, r3
	*cbuf++ = 4; // send 4x u32
200022c8:	2304      	movs	r3, #4
{
200022ca:	0004      	movs	r4, r0
200022cc:	4693      	mov	fp, r2
200022ce:	b5e0      	push	{r5, r6, r7, lr}
	*cbuf++ = 4; // send 4x u32
200022d0:	6003      	str	r3, [r0, #0]
	*cbuf++ = (u32)LineBufHsBp; // HSYNC + back porch
200022d2:	4b8b      	ldr	r3, [pc, #556]	; (20002500 <_Z12VgaBufRenderPmS_Phi+0x244>)
{
200022d4:	000e      	movs	r6, r1
	*cbuf++ = (u32)LineBufHsBp; // HSYNC + back porch
200022d6:	6063      	str	r3, [r4, #4]
	cbuf = Render(cbuf, dbuf, y0, CurVmode.width);
200022d8:	4b8a      	ldr	r3, [pc, #552]	; (20002504 <_Z12VgaBufRenderPmS_Phi+0x248>)
200022da:	464a      	mov	r2, r9
200022dc:	881b      	ldrh	r3, [r3, #0]
{
200022de:	b085      	sub	sp, #20
	cbuf = Render(cbuf, dbuf, y0, CurVmode.width);
200022e0:	4659      	mov	r1, fp
	*cbuf++ = (u32)LineBufHsBp; // HSYNC + back porch
200022e2:	3008      	adds	r0, #8
	cbuf = Render(cbuf, dbuf, y0, CurVmode.width);
200022e4:	f7ff fcea 	bl	20001cbc <Render>
	*cbuf++ = 1; // send 1x u32
200022e8:	2301      	movs	r3, #1
200022ea:	6003      	str	r3, [r0, #0]
	*cbuf++ = (u32)&LineBufFp; // front porch
200022ec:	3307      	adds	r3, #7
200022ee:	469c      	mov	ip, r3
200022f0:	4484      	add	ip, r0
200022f2:	4663      	mov	r3, ip
200022f4:	9300      	str	r3, [sp, #0]
200022f6:	4b84      	ldr	r3, [pc, #528]	; (20002508 <_Z12VgaBufRenderPmS_Phi+0x24c>)
200022f8:	4c84      	ldr	r4, [pc, #528]	; (2000250c <_Z12VgaBufRenderPmS_Phi+0x250>)
200022fa:	6043      	str	r3, [r0, #4]
	for (layer = 1; layer < LAYERS; layer++)
200022fc:	4b84      	ldr	r3, [pc, #528]	; (20002510 <_Z12VgaBufRenderPmS_Phi+0x254>)
200022fe:	4f85      	ldr	r7, [pc, #532]	; (20002514 <_Z12VgaBufRenderPmS_Phi+0x258>)
20002300:	4698      	mov	r8, r3
20002302:	4b85      	ldr	r3, [pc, #532]	; (20002518 <_Z12VgaBufRenderPmS_Phi+0x25c>)
20002304:	4d85      	ldr	r5, [pc, #532]	; (2000251c <_Z12VgaBufRenderPmS_Phi+0x260>)
20002306:	469a      	mov	sl, r3
		switch(mode)
20002308:	464b      	mov	r3, r9
2000230a:	46b1      	mov	r9, r6
2000230c:	4656      	mov	r6, sl
2000230e:	469a      	mov	sl, r3
		cbuf0 += CtrlBufSize[layer-1];
20002310:	6823      	ldr	r3, [r4, #0]
20002312:	009b      	lsls	r3, r3, #2
20002314:	4499      	add	r9, r3
		dbuf += LineBufSize[layer-1];
20002316:	4643      	mov	r3, r8
20002318:	681b      	ldr	r3, [r3, #0]
2000231a:	469c      	mov	ip, r3
		CtrlBufNext[layer] = NULL;
2000231c:	2300      	movs	r3, #0
2000231e:	607b      	str	r3, [r7, #4]
		int mode = LayerModeInx[layer];
20002320:	7873      	ldrb	r3, [r6, #1]
		dbuf += LineBufSize[layer-1];
20002322:	44e3      	add	fp, ip
		if (mode == LAYERMODE_BASE) continue;
20002324:	2b00      	cmp	r3, #0
20002326:	d038      	beq.n	2000239a <_Z12VgaBufRenderPmS_Phi+0xde>
		if (!s->on || (s->w <= 0) || (y0 < s->y) || (y0 >= s->y + s->h)) continue;
20002328:	2222      	movs	r2, #34	; 0x22
2000232a:	5caa      	ldrb	r2, [r5, r2]
2000232c:	2a00      	cmp	r2, #0
2000232e:	d034      	beq.n	2000239a <_Z12VgaBufRenderPmS_Phi+0xde>
20002330:	8aea      	ldrh	r2, [r5, #22]
20002332:	2a00      	cmp	r2, #0
20002334:	d031      	beq.n	2000239a <_Z12VgaBufRenderPmS_Phi+0xde>
20002336:	2114      	movs	r1, #20
20002338:	5e6a      	ldrsh	r2, [r5, r1]
2000233a:	4552      	cmp	r2, sl
2000233c:	dc2d      	bgt.n	2000239a <_Z12VgaBufRenderPmS_Phi+0xde>
2000233e:	8b29      	ldrh	r1, [r5, #24]
20002340:	1889      	adds	r1, r1, r2
20002342:	4551      	cmp	r1, sl
20002344:	dd29      	ble.n	2000239a <_Z12VgaBufRenderPmS_Phi+0xde>
		int y = y0 - s->y;
20002346:	4651      	mov	r1, sl
20002348:	1a8a      	subs	r2, r1, r2
2000234a:	9203      	str	r2, [sp, #12]
		CtrlBufNext[layer] = cbuf2;
2000234c:	464a      	mov	r2, r9
		*cbuf2++ = 1;
2000234e:	4649      	mov	r1, r9
		CtrlBufNext[layer] = cbuf2;
20002350:	607a      	str	r2, [r7, #4]
		*cbuf2++ = 1;
20002352:	2201      	movs	r2, #1
20002354:	600a      	str	r2, [r1, #0]
		*cbuf2++ = (u32)dbuf2;
20002356:	4659      	mov	r1, fp
20002358:	464a      	mov	r2, r9
2000235a:	6051      	str	r1, [r2, #4]
		*(u32*)dbuf2 = BYTESWAP(s->init);
2000235c:	68aa      	ldr	r2, [r5, #8]
		switch(mode)
2000235e:	3b06      	subs	r3, #6
20002360:	ba12      	rev	r2, r2
		*(u32*)dbuf2 = BYTESWAP(s->init);
20002362:	c104      	stmia	r1!, {r2}
		switch(mode)
20002364:	b2db      	uxtb	r3, r3
		*(u32*)dbuf2 = BYTESWAP(s->init);
20002366:	9101      	str	r1, [sp, #4]
		switch(mode)
20002368:	2b0c      	cmp	r3, #12
2000236a:	d900      	bls.n	2000236e <_Z12VgaBufRenderPmS_Phi+0xb2>
2000236c:	e094      	b.n	20002498 <_Z12VgaBufRenderPmS_Phi+0x1dc>
2000236e:	4a6c      	ldr	r2, [pc, #432]	; (20002520 <_Z12VgaBufRenderPmS_Phi+0x264>)
20002370:	009b      	lsls	r3, r3, #2
20002372:	58d3      	ldr	r3, [r2, r3]
20002374:	469f      	mov	pc, r3
				MemSet4((u32*)dbuf2, s->keycol, s->w/4);
20002376:	8aea      	ldrh	r2, [r5, #22]
20002378:	68e9      	ldr	r1, [r5, #12]
2000237a:	0892      	lsrs	r2, r2, #2
2000237c:	9801      	ldr	r0, [sp, #4]
2000237e:	f7fd ffc7 	bl	20000310 <MemSet4>
				cbuf2 = RenderFastSprite(cbuf2, y, s, dbuf2);
20002382:	4648      	mov	r0, r9
20002384:	002a      	movs	r2, r5
20002386:	9b01      	ldr	r3, [sp, #4]
20002388:	9903      	ldr	r1, [sp, #12]
2000238a:	3008      	adds	r0, #8
2000238c:	f7fe f938 	bl	20000600 <RenderFastSprite>
20002390:	9002      	str	r0, [sp, #8]
		*cbuf2++ = 0; // end mark
20002392:	2200      	movs	r2, #0
20002394:	9b02      	ldr	r3, [sp, #8]
20002396:	601a      	str	r2, [r3, #0]
		*cbuf2++ = 0; // end mark
20002398:	605a      	str	r2, [r3, #4]
	for (layer = 1; layer < LAYERS; layer++)
2000239a:	2304      	movs	r3, #4
2000239c:	469c      	mov	ip, r3
2000239e:	4b61      	ldr	r3, [pc, #388]	; (20002524 <_Z12VgaBufRenderPmS_Phi+0x268>)
200023a0:	3404      	adds	r4, #4
200023a2:	44e0      	add	r8, ip
200023a4:	3704      	adds	r7, #4
200023a6:	3601      	adds	r6, #1
200023a8:	3524      	adds	r5, #36	; 0x24
200023aa:	42a3      	cmp	r3, r4
200023ac:	d1b0      	bne.n	20002310 <_Z12VgaBufRenderPmS_Phi+0x54>
}
200023ae:	9800      	ldr	r0, [sp, #0]
200023b0:	b005      	add	sp, #20
200023b2:	bcf0      	pop	{r4, r5, r6, r7}
200023b4:	46bb      	mov	fp, r7
200023b6:	46b2      	mov	sl, r6
200023b8:	46a9      	mov	r9, r5
200023ba:	46a0      	mov	r8, r4
200023bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				int x = s->x; // destination coordinate X
200023be:	2112      	movs	r1, #18
200023c0:	5e6b      	ldrsh	r3, [r5, r1]
				int w = s->w; // destination width
200023c2:	8aea      	ldrh	r2, [r5, #22]
				if (x < 0)
200023c4:	2b00      	cmp	r3, #0
200023c6:	da00      	bge.n	200023ca <_Z12VgaBufRenderPmS_Phi+0x10e>
200023c8:	e07d      	b.n	200024c6 <_Z12VgaBufRenderPmS_Phi+0x20a>
					if (x + w > CurVmode.width)
200023ca:	494e      	ldr	r1, [pc, #312]	; (20002504 <_Z12VgaBufRenderPmS_Phi+0x248>)
200023cc:	18d0      	adds	r0, r2, r3
200023ce:	8809      	ldrh	r1, [r1, #0]
200023d0:	468c      	mov	ip, r1
					x = 0;
200023d2:	2100      	movs	r1, #0
					if (x + w > CurVmode.width)
200023d4:	4560      	cmp	r0, ip
200023d6:	dd01      	ble.n	200023dc <_Z12VgaBufRenderPmS_Phi+0x120>
						w = CurVmode.width - x; // limit W
200023d8:	4662      	mov	r2, ip
200023da:	1ad2      	subs	r2, r2, r3
				w = ALIGN4(w);
200023dc:	2303      	movs	r3, #3
200023de:	0010      	movs	r0, r2
200023e0:	4398      	bics	r0, r3
				if (w <= 0)
200023e2:	2800      	cmp	r0, #0
200023e4:	dd36      	ble.n	20002454 <_Z12VgaBufRenderPmS_Phi+0x198>
					*cbuf2++ = w/4;
200023e6:	464b      	mov	r3, r9
200023e8:	1092      	asrs	r2, r2, #2
200023ea:	609a      	str	r2, [r3, #8]
					*cbuf2++ = (u32)&dbuf2[x];
200023ec:	2310      	movs	r3, #16
200023ee:	9801      	ldr	r0, [sp, #4]
200023f0:	444b      	add	r3, r9
200023f2:	4684      	mov	ip, r0
200023f4:	9302      	str	r3, [sp, #8]
200023f6:	464b      	mov	r3, r9
200023f8:	4461      	add	r1, ip
200023fa:	60d9      	str	r1, [r3, #12]
					RenderPersp(dbuf2, y, s);
200023fc:	002a      	movs	r2, r5
200023fe:	9903      	ldr	r1, [sp, #12]
20002400:	f7fe fe66 	bl	200010d0 <RenderPersp>
20002404:	e7c5      	b.n	20002392 <_Z12VgaBufRenderPmS_Phi+0xd6>
				*cbuf2++ = s->trans;
20002406:	464a      	mov	r2, r9
20002408:	8a2b      	ldrh	r3, [r5, #16]
2000240a:	6093      	str	r3, [r2, #8]
				*cbuf2++ = (u32)dbuf2;
2000240c:	2310      	movs	r3, #16
2000240e:	444b      	add	r3, r9
20002410:	9302      	str	r3, [sp, #8]
20002412:	9b01      	ldr	r3, [sp, #4]
20002414:	60d3      	str	r3, [r2, #12]
				MemSet4((u32*)dbuf2, s->keycol, s->w/4);
20002416:	8aea      	ldrh	r2, [r5, #22]
20002418:	68e9      	ldr	r1, [r5, #12]
2000241a:	0018      	movs	r0, r3
2000241c:	0892      	lsrs	r2, r2, #2
2000241e:	f7fd ff77 	bl	20000310 <MemSet4>
				RenderSprite(dbuf2, y, s);
20002422:	002a      	movs	r2, r5
20002424:	9903      	ldr	r1, [sp, #12]
20002426:	9801      	ldr	r0, [sp, #4]
20002428:	f7fe ffdc 	bl	200013e4 <RenderSprite>
			break;
2000242c:	e7b1      	b.n	20002392 <_Z12VgaBufRenderPmS_Phi+0xd6>
				int x = s->x; // destination coordinate X
2000242e:	2112      	movs	r1, #18
20002430:	5e6b      	ldrsh	r3, [r5, r1]
				int w = s->w; // destination width
20002432:	8aea      	ldrh	r2, [r5, #22]
				if (x < 0)
20002434:	2b00      	cmp	r3, #0
20002436:	db3a      	blt.n	200024ae <_Z12VgaBufRenderPmS_Phi+0x1f2>
					if (x + w > CurVmode.width)
20002438:	4932      	ldr	r1, [pc, #200]	; (20002504 <_Z12VgaBufRenderPmS_Phi+0x248>)
2000243a:	18d0      	adds	r0, r2, r3
2000243c:	8809      	ldrh	r1, [r1, #0]
2000243e:	468c      	mov	ip, r1
					x = 0;
20002440:	2100      	movs	r1, #0
					if (x + w > CurVmode.width)
20002442:	4560      	cmp	r0, ip
20002444:	dd01      	ble.n	2000244a <_Z12VgaBufRenderPmS_Phi+0x18e>
						w = CurVmode.width - x; // limit W
20002446:	4662      	mov	r2, ip
20002448:	1ad2      	subs	r2, r2, r3
				w = ALIGN4(w);
2000244a:	2303      	movs	r3, #3
2000244c:	0010      	movs	r0, r2
2000244e:	4398      	bics	r0, r3
				if (w <= 0)
20002450:	2800      	cmp	r0, #0
20002452:	dc44      	bgt.n	200024de <_Z12VgaBufRenderPmS_Phi+0x222>
					*cbuf2++ = 1;
20002454:	2301      	movs	r3, #1
20002456:	464a      	mov	r2, r9
20002458:	6093      	str	r3, [r2, #8]
					*cbuf2++ = (u32)dbuf2;
2000245a:	330f      	adds	r3, #15
2000245c:	444b      	add	r3, r9
2000245e:	9302      	str	r3, [sp, #8]
20002460:	464b      	mov	r3, r9
20002462:	9a01      	ldr	r2, [sp, #4]
20002464:	60da      	str	r2, [r3, #12]
					*(u32*)dbuf2 = s->keycol;
20002466:	465b      	mov	r3, fp
20002468:	68ea      	ldr	r2, [r5, #12]
2000246a:	605a      	str	r2, [r3, #4]
2000246c:	e791      	b.n	20002392 <_Z12VgaBufRenderPmS_Phi+0xd6>
				int n = row[y+1] - row[y];
2000246e:	9a03      	ldr	r2, [sp, #12]
				u16* row = (u16*)s->par;
20002470:	6869      	ldr	r1, [r5, #4]
				int n = row[y+1] - row[y];
20002472:	3201      	adds	r2, #1
20002474:	0052      	lsls	r2, r2, #1
20002476:	188b      	adds	r3, r1, r2
20002478:	5a8a      	ldrh	r2, [r1, r2]
				*cbuf2++ = n;
2000247a:	4649      	mov	r1, r9
				int n = row[y+1] - row[y];
2000247c:	3b02      	subs	r3, #2
2000247e:	881b      	ldrh	r3, [r3, #0]
20002480:	1ad2      	subs	r2, r2, r3
				*cbuf2++ = n;
20002482:	608a      	str	r2, [r1, #8]
				*cbuf2++ = (u32)&s->img[row[y]*4];
20002484:	2210      	movs	r2, #16
20002486:	444a      	add	r2, r9
20002488:	9202      	str	r2, [sp, #8]
2000248a:	009b      	lsls	r3, r3, #2
				*cbuf2++ = (u32)&s->img[y*s->wb];
2000248c:	682a      	ldr	r2, [r5, #0]
2000248e:	4694      	mov	ip, r2
20002490:	464a      	mov	r2, r9
20002492:	4463      	add	r3, ip
20002494:	60d3      	str	r3, [r2, #12]
			break;
20002496:	e77c      	b.n	20002392 <_Z12VgaBufRenderPmS_Phi+0xd6>
				*cbuf2++ = s->trans;
20002498:	464a      	mov	r2, r9
2000249a:	8a2b      	ldrh	r3, [r5, #16]
2000249c:	6093      	str	r3, [r2, #8]
				*cbuf2++ = (u32)&s->img[y*s->wb];
2000249e:	2310      	movs	r3, #16
200024a0:	444b      	add	r3, r9
200024a2:	9a03      	ldr	r2, [sp, #12]
200024a4:	9302      	str	r3, [sp, #8]
200024a6:	8b6b      	ldrh	r3, [r5, #26]
200024a8:	435a      	muls	r2, r3
200024aa:	0013      	movs	r3, r2
200024ac:	e7ee      	b.n	2000248c <_Z12VgaBufRenderPmS_Phi+0x1d0>
					x = ALIGN4(x+4098) - 4096; // round X to 4-pixels
200024ae:	491e      	ldr	r1, [pc, #120]	; (20002528 <_Z12VgaBufRenderPmS_Phi+0x26c>)
200024b0:	468c      	mov	ip, r1
200024b2:	2103      	movs	r1, #3
200024b4:	4463      	add	r3, ip
200024b6:	438b      	bics	r3, r1
200024b8:	491c      	ldr	r1, [pc, #112]	; (2000252c <_Z12VgaBufRenderPmS_Phi+0x270>)
200024ba:	1859      	adds	r1, r3, r1
					w += x;	// decrease W
200024bc:	1852      	adds	r2, r2, r1
					x = -x; // start offset of X
200024be:	2180      	movs	r1, #128	; 0x80
200024c0:	0149      	lsls	r1, r1, #5
200024c2:	1ac9      	subs	r1, r1, r3
200024c4:	e7c1      	b.n	2000244a <_Z12VgaBufRenderPmS_Phi+0x18e>
					x = ALIGN4(x+4098) - 4096; // round X to 4-pixels
200024c6:	4918      	ldr	r1, [pc, #96]	; (20002528 <_Z12VgaBufRenderPmS_Phi+0x26c>)
200024c8:	468c      	mov	ip, r1
200024ca:	2103      	movs	r1, #3
200024cc:	4463      	add	r3, ip
200024ce:	438b      	bics	r3, r1
200024d0:	4916      	ldr	r1, [pc, #88]	; (2000252c <_Z12VgaBufRenderPmS_Phi+0x270>)
200024d2:	1859      	adds	r1, r3, r1
					w += x;	// decrease W
200024d4:	1852      	adds	r2, r2, r1
					x = -x; // start offset of X
200024d6:	2180      	movs	r1, #128	; 0x80
200024d8:	0149      	lsls	r1, r1, #5
200024da:	1ac9      	subs	r1, r1, r3
200024dc:	e77e      	b.n	200023dc <_Z12VgaBufRenderPmS_Phi+0x120>
					*cbuf2++ = w/4;
200024de:	464b      	mov	r3, r9
200024e0:	1092      	asrs	r2, r2, #2
200024e2:	609a      	str	r2, [r3, #8]
					*cbuf2++ = (u32)&dbuf2[x];
200024e4:	2310      	movs	r3, #16
200024e6:	9801      	ldr	r0, [sp, #4]
200024e8:	444b      	add	r3, r9
200024ea:	4684      	mov	ip, r0
200024ec:	9302      	str	r3, [sp, #8]
200024ee:	464b      	mov	r3, r9
200024f0:	4461      	add	r1, ip
200024f2:	60d9      	str	r1, [r3, #12]
					RenderPersp2(dbuf2, y, s);
200024f4:	002a      	movs	r2, r5
200024f6:	9903      	ldr	r1, [sp, #12]
200024f8:	f7fe fe74 	bl	200011e4 <RenderPersp2>
200024fc:	e749      	b.n	20002392 <_Z12VgaBufRenderPmS_Phi+0xd6>
200024fe:	46c0      	nop			; (mov r8, r8)
20002500:	20021884 	.word	0x20021884
20002504:	2000479c 	.word	0x2000479c
20002508:	20021880 	.word	0x20021880
2000250c:	200027b0 	.word	0x200027b0
20002510:	200027c0 	.word	0x200027c0
20002514:	20004750 	.word	0x20004750
20002518:	20020124 	.word	0x20020124
2000251c:	2002014c 	.word	0x2002014c
20002520:	101acba4 	.word	0x101acba4
20002524:	200027bc 	.word	0x200027bc
20002528:	00001002 	.word	0x00001002
2000252c:	fffff000 	.word	0xfffff000

20002530 <VgaLine>:
{
20002530:	b570      	push	{r4, r5, r6, lr}
	int bufinx = VgaBufProcess();
20002532:	f7ff fd9f 	bl	20002074 <_Z13VgaBufProcessv>
	if (bufinx == 0)
20002536:	2800      	cmp	r0, #0
20002538:	d013      	beq.n	20002562 <VgaLine+0x32>
		cbuf = CtrlBuf2;
2000253a:	4838      	ldr	r0, [pc, #224]	; (2000261c <VgaLine+0xec>)
		dbuf = LineBuf2;
2000253c:	4a38      	ldr	r2, [pc, #224]	; (20002620 <VgaLine+0xf0>)
	CtrlBufNext[0] = cbuf;
2000253e:	4b39      	ldr	r3, [pc, #228]	; (20002624 <VgaLine+0xf4>)
	if (line > CurVmode.vtot) line = 1;
20002540:	4d39      	ldr	r5, [pc, #228]	; (20002628 <VgaLine+0xf8>)
	CtrlBufNext[0] = cbuf;
20002542:	6018      	str	r0, [r3, #0]
	int line = ScanLine;	// current scanline
20002544:	4b39      	ldr	r3, [pc, #228]	; (2000262c <VgaLine+0xfc>)
	if (line > CurVmode.vtot) line = 1;
20002546:	8da9      	ldrh	r1, [r5, #44]	; 0x2c
	int line = ScanLine;	// current scanline
20002548:	681b      	ldr	r3, [r3, #0]
	line++; // next line to render
2000254a:	3301      	adds	r3, #1
	if (line > CurVmode.vtot) line = 1;
2000254c:	4299      	cmp	r1, r3
2000254e:	da00      	bge.n	20002552 <VgaLine+0x22>
20002550:	2301      	movs	r3, #1
	u8 linetype = ScanlineType[line];
20002552:	4937      	ldr	r1, [pc, #220]	; (20002630 <VgaLine+0x100>)
	switch (linetype)
20002554:	5ccc      	ldrb	r4, [r1, r3]
20002556:	2c0a      	cmp	r4, #10
20002558:	d85e      	bhi.n	20002618 <VgaLine+0xe8>
2000255a:	4936      	ldr	r1, [pc, #216]	; (20002634 <VgaLine+0x104>)
2000255c:	00a4      	lsls	r4, r4, #2
2000255e:	5909      	ldr	r1, [r1, r4]
20002560:	468f      	mov	pc, r1
		cbuf = CtrlBuf1;
20002562:	4835      	ldr	r0, [pc, #212]	; (20002638 <VgaLine+0x108>)
		dbuf = LineBuf1;
20002564:	4a35      	ldr	r2, [pc, #212]	; (2000263c <VgaLine+0x10c>)
20002566:	e7ea      	b.n	2000253e <VgaLine+0xe>
		y0 = line - CurVmode.vfirst1;
20002568:	2140      	movs	r1, #64	; 0x40
		y0 = line - CurVmode.vfirst2;
2000256a:	5a69      	ldrh	r1, [r5, r1]
2000256c:	1a5b      	subs	r3, r3, r1
		if (CurVmode.dbly) y0 >>= 1;
2000256e:	2155      	movs	r1, #85	; 0x55
20002570:	5c69      	ldrb	r1, [r5, r1]
20002572:	2900      	cmp	r1, #0
20002574:	d000      	beq.n	20002578 <VgaLine+0x48>
20002576:	105b      	asrs	r3, r3, #1
		y0 = (y0 << 1) + 1;
20002578:	005b      	lsls	r3, r3, #1
2000257a:	3301      	adds	r3, #1
		cbuf = VgaBufRender(cbuf, cbuf0, dbuf, y0);
2000257c:	0001      	movs	r1, r0
2000257e:	f7ff fe9d 	bl	200022bc <_Z12VgaBufRenderPmS_Phi>
20002582:	0003      	movs	r3, r0
	*cbuf++ = 0; // end mark
20002584:	2200      	movs	r2, #0
	hw_divider_restore_state(&DividerState);
20002586:	482e      	ldr	r0, [pc, #184]	; (20002640 <VgaLine+0x110>)
	*cbuf++ = 0; // end mark
20002588:	601a      	str	r2, [r3, #0]
	*cbuf++ = 0; // end mark
2000258a:	605a      	str	r2, [r3, #4]
	hw_divider_restore_state(&DividerState);
2000258c:	f000 f860 	bl	20002650 <__hw_divider_restore_state_veneer>
}
20002590:	bd70      	pop	{r4, r5, r6, pc}
		y0 = line - CurVmode.vfirst2;
20002592:	214e      	movs	r1, #78	; 0x4e
20002594:	e7e9      	b.n	2000256a <VgaLine+0x3a>
		*cbuf++ = 2; // send 2x u32
20002596:	2302      	movs	r3, #2
		*cbuf++ = 4;	// send 4x u32
20002598:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)&LineBufSync[0]; // half + half
2000259a:	0003      	movs	r3, r0
2000259c:	4a29      	ldr	r2, [pc, #164]	; (20002644 <VgaLine+0x114>)
2000259e:	3308      	adds	r3, #8
200025a0:	6042      	str	r2, [r0, #4]
		break;
200025a2:	e7ef      	b.n	20002584 <VgaLine+0x54>
		*cbuf++ = 4;	// send 4x u32
200025a4:	2304      	movs	r3, #4
200025a6:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)&LineBufSync[4]; // VSYNC
200025a8:	0003      	movs	r3, r0
200025aa:	4a26      	ldr	r2, [pc, #152]	; (20002644 <VgaLine+0x114>)
200025ac:	3308      	adds	r3, #8
200025ae:	3210      	adds	r2, #16
200025b0:	6042      	str	r2, [r0, #4]
		break;
200025b2:	e7e7      	b.n	20002584 <VgaLine+0x54>
		*cbuf++ = 4;	// send 4x u32
200025b4:	2304      	movs	r3, #4
200025b6:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)&LineBufSync[6]; // VSYNC + half
200025b8:	0003      	movs	r3, r0
200025ba:	4a22      	ldr	r2, [pc, #136]	; (20002644 <VgaLine+0x114>)
200025bc:	3308      	adds	r3, #8
200025be:	3218      	adds	r2, #24
200025c0:	6042      	str	r2, [r0, #4]
		break;
200025c2:	e7df      	b.n	20002584 <VgaLine+0x54>
		*cbuf++ = 4;	// send 4x u32
200025c4:	2304      	movs	r3, #4
200025c6:	e7e7      	b.n	20002598 <VgaLine+0x68>
		*cbuf++ = 4;	// send 4x u32
200025c8:	2304      	movs	r3, #4
200025ca:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)&LineBufSync[2]; // half + VSYNC
200025cc:	0003      	movs	r3, r0
200025ce:	4a1d      	ldr	r2, [pc, #116]	; (20002644 <VgaLine+0x114>)
200025d0:	3308      	adds	r3, #8
200025d2:	3208      	adds	r2, #8
200025d4:	6042      	str	r2, [r0, #4]
		break;
200025d6:	e7d5      	b.n	20002584 <VgaLine+0x54>
		*cbuf++ = 2; // send 2x u32
200025d8:	2302      	movs	r3, #2
200025da:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)LineBufDark; // dark
200025dc:	0003      	movs	r3, r0
200025de:	4a1a      	ldr	r2, [pc, #104]	; (20002648 <VgaLine+0x118>)
200025e0:	3308      	adds	r3, #8
200025e2:	6042      	str	r2, [r0, #4]
		break;
200025e4:	e7ce      	b.n	20002584 <VgaLine+0x54>
		y0 = line - CurVmode.vfirst1;
200025e6:	2140      	movs	r1, #64	; 0x40
200025e8:	5a69      	ldrh	r1, [r5, r1]
200025ea:	1a5b      	subs	r3, r3, r1
		if (CurVmode.dbly) y0 >>= 1;
200025ec:	2155      	movs	r1, #85	; 0x55
200025ee:	5c69      	ldrb	r1, [r5, r1]
200025f0:	2900      	cmp	r1, #0
200025f2:	d0c3      	beq.n	2000257c <VgaLine+0x4c>
200025f4:	105b      	asrs	r3, r3, #1
		cbuf = VgaBufRender(cbuf, cbuf0, dbuf, y0);
200025f6:	e7c1      	b.n	2000257c <VgaLine+0x4c>
		y0 = line - CurVmode.vfirst1;
200025f8:	2140      	movs	r1, #64	; 0x40
		y0 = line - CurVmode.vfirst2;
200025fa:	5a69      	ldrh	r1, [r5, r1]
200025fc:	1a5b      	subs	r3, r3, r1
		if (CurVmode.dbly) y0 >>= 1;
200025fe:	2155      	movs	r1, #85	; 0x55
20002600:	5c69      	ldrb	r1, [r5, r1]
20002602:	2900      	cmp	r1, #0
20002604:	d000      	beq.n	20002608 <VgaLine+0xd8>
20002606:	105b      	asrs	r3, r3, #1
		y0 <<= 1;
20002608:	005b      	lsls	r3, r3, #1
		cbuf = VgaBufRender(cbuf, cbuf0, dbuf, y0);
2000260a:	0001      	movs	r1, r0
2000260c:	f7ff fe56 	bl	200022bc <_Z12VgaBufRenderPmS_Phi>
20002610:	0003      	movs	r3, r0
		break;
20002612:	e7b7      	b.n	20002584 <VgaLine+0x54>
		y0 = line - CurVmode.vfirst2;
20002614:	214e      	movs	r1, #78	; 0x4e
20002616:	e7f0      	b.n	200025fa <VgaLine+0xca>
	switch (linetype)
20002618:	0003      	movs	r3, r0
2000261a:	e7b3      	b.n	20002584 <VgaLine+0x54>
2000261c:	20003cf0 	.word	0x20003cf0
20002620:	20020e58 	.word	0x20020e58
20002624:	20004750 	.word	0x20004750
20002628:	2000479c 	.word	0x2000479c
2000262c:	200220d8 	.word	0x200220d8
20002630:	200220dc 	.word	0x200220dc
20002634:	101acbd8 	.word	0x101acbd8
20002638:	20003290 	.word	0x20003290
2000263c:	20020438 	.word	0x20020438
20002640:	200047f8 	.word	0x200047f8
20002644:	20021894 	.word	0x20021894
20002648:	20021878 	.word	0x20021878

2000264c <__aeabi_idiv0>:
2000264c:	4770      	bx	lr
2000264e:	46c0      	nop			; (mov r8, r8)

20002650 <__hw_divider_restore_state_veneer>:
20002650:	b401      	push	{r0}
20002652:	4802      	ldr	r0, [pc, #8]	; (2000265c <__hw_divider_restore_state_veneer+0xc>)
20002654:	4684      	mov	ip, r0
20002656:	bc01      	pop	{r0}
20002658:	4760      	bx	ip
2000265a:	bf00      	nop
2000265c:	100007bd 	.word	0x100007bd

20002660 <____wrap___aeabi_lmul_veneer>:
20002660:	b401      	push	{r0}
20002662:	4802      	ldr	r0, [pc, #8]	; (2000266c <____wrap___aeabi_lmul_veneer+0xc>)
20002664:	4684      	mov	ip, r0
20002666:	bc01      	pop	{r0}
20002668:	4760      	bx	ip
2000266a:	bf00      	nop
2000266c:	1000094d 	.word	0x1000094d

20002670 <__rom_func_lookup_veneer>:
20002670:	b401      	push	{r0}
20002672:	4802      	ldr	r0, [pc, #8]	; (2000267c <__rom_func_lookup_veneer+0xc>)
20002674:	4684      	mov	ip, r0
20002676:	bc01      	pop	{r0}
20002678:	4760      	bx	ip
2000267a:	bf00      	nop
2000267c:	10000981 	.word	0x10000981

20002680 <__time_us_64_veneer>:
20002680:	b401      	push	{r0}
20002682:	4802      	ldr	r0, [pc, #8]	; (2000268c <__time_us_64_veneer+0xc>)
20002684:	4684      	mov	ip, r0
20002686:	bc01      	pop	{r0}
20002688:	4760      	bx	ip
2000268a:	bf00      	nop
2000268c:	10002b61 	.word	0x10002b61

20002690 <__hw_divider_save_state_veneer>:
20002690:	b401      	push	{r0}
20002692:	4802      	ldr	r0, [pc, #8]	; (2000269c <__hw_divider_save_state_veneer+0xc>)
20002694:	4684      	mov	ip, r0
20002696:	bc01      	pop	{r0}
20002698:	4760      	bx	ip
2000269a:	bf00      	nop
2000269c:	100007a1 	.word	0x100007a1

200026a0 <__best_effort_wfe_or_timeout_veneer>:
200026a0:	b401      	push	{r0}
200026a2:	4802      	ldr	r0, [pc, #8]	; (200026ac <__best_effort_wfe_or_timeout_veneer+0xc>)
200026a4:	4684      	mov	ip, r0
200026a6:	bc01      	pop	{r0}
200026a8:	4760      	bx	ip
200026aa:	bf00      	nop
200026ac:	10002a4d 	.word	0x10002a4d

200026b0 <aeabi_bits_funcs>:
200026b0:	00003350 	.word	0x00003350
200026b4:	0000334c 	.word	0x0000334c
200026b8:	00003354 	.word	0x00003354
200026bc:	00003352 	.word	0x00003352

200026c0 <aeabi_bits_funcs_end>:
200026c0:	00000000 	.word	0x00000000
200026c4:	00010000 	.word	0x00010000
	...
200026d0:	00020000 	.word	0x00020000
	...
200026dc:	00030000 	.word	0x00030000
	...
200026e8:	00ff0000 	.word	0x00ff0000
200026ec:	00000000 	.word	0x00000000

200026f0 <irq_handler_chain_first_slot>:
200026f0:	b500      	push	{lr}
200026f2:	6848      	ldr	r0, [r1, #4]
200026f4:	3101      	adds	r1, #1
200026f6:	468e      	mov	lr, r1
200026f8:	4700      	bx	r0

200026fa <irq_handler_chain_remove_tail>:
200026fa:	4670      	mov	r0, lr
200026fc:	3809      	subs	r0, #9
200026fe:	4901      	ldr	r1, [pc, #4]	; (20002704 <irq_handler_chain_remove_tail+0xa>)
20002700:	4788      	blx	r1
20002702:	bd00      	pop	{pc}
20002704:	1000135d 	.word	0x1000135d

20002708 <aeabi_mem_funcs>:
20002708:	0000534d 	.word	0x0000534d
2000270c:	0000434d 	.word	0x0000434d
20002710:	00003453 	.word	0x00003453
20002714:	00003443 	.word	0x00003443

20002718 <stdio_usb>:
20002718:	10001fcd 00000000 10001f65 00000000     ........e.......
20002728:	00000100                                ....

2000272c <striped_spin_lock_num>:
2000272c:	00000010                                ....

20002730 <_usbd_qdef>:
20002730:	20023284 000c0010 00000000 00000000     .2. ............
	...

20002750 <ep_dir_string>:
20002750:	100070fc 10007100                       .p...q..

20002758 <PageText>:
20002758:	101ab490 101ab518 101ab668 101ab750     ........h...P...
20002768:	101ab818 101ab8c8 101ab9cc 101abb60     ............`...
20002778:	101abcec 101abe00 101abf2c 101ac0a0     ........,.......
20002788:	101ac140 101ac23c 101ac3e0 101ac550     @...<.......P...
20002798:	101ac698 101ac738 101ac824 101ac8d4     ....8...$.......
200027a8:	101ac9b8 101aca3c                       ....<...

200027b0 <CtrlBufSize>:
200027b0:	000000a6 000000a6 000000a6 000000a6     ................

200027c0 <LineBufSize>:
200027c0:	00000288 00000288 00000288 00000288     ................

200027d0 <LayerNumPin>:
200027d0:	08080808                                ....

200027d4 <DefPal16>:
200027d4:	16140200 b6a8a2a0 5f5d4b49 fffdebe9     ........IK]_....

200027e4 <pScreen>:
200027e4:	20022398                                .#. 

200027e8 <_impure_ptr>:
200027e8:	200027f0 00000000                       .'. ....

200027f0 <impure_data>:
200027f0:	00000000 20002adc 20002b44 20002bac     .....*. D+. .+. 
	...
20002898:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200028a8:	0005deec 0000000b 00000000 00000000     ................
	...

20002c18 <__malloc_av_>:
	...
20002c20:	20002c18 20002c18 20002c20 20002c20     .,. .,.  ,.  ,. 
20002c30:	20002c28 20002c28 20002c30 20002c30     (,. (,. 0,. 0,. 
20002c40:	20002c38 20002c38 20002c40 20002c40     8,. 8,. @,. @,. 
20002c50:	20002c48 20002c48 20002c50 20002c50     H,. H,. P,. P,. 
20002c60:	20002c58 20002c58 20002c60 20002c60     X,. X,. `,. `,. 
20002c70:	20002c68 20002c68 20002c70 20002c70     h,. h,. p,. p,. 
20002c80:	20002c78 20002c78 20002c80 20002c80     x,. x,. .,. .,. 
20002c90:	20002c88 20002c88 20002c90 20002c90     .,. .,. .,. .,. 
20002ca0:	20002c98 20002c98 20002ca0 20002ca0     .,. .,. .,. .,. 
20002cb0:	20002ca8 20002ca8 20002cb0 20002cb0     .,. .,. .,. .,. 
20002cc0:	20002cb8 20002cb8 20002cc0 20002cc0     .,. .,. .,. .,. 
20002cd0:	20002cc8 20002cc8 20002cd0 20002cd0     .,. .,. .,. .,. 
20002ce0:	20002cd8 20002cd8 20002ce0 20002ce0     .,. .,. .,. .,. 
20002cf0:	20002ce8 20002ce8 20002cf0 20002cf0     .,. .,. .,. .,. 
20002d00:	20002cf8 20002cf8 20002d00 20002d00     .,. .,. .-. .-. 
20002d10:	20002d08 20002d08 20002d10 20002d10     .-. .-. .-. .-. 
20002d20:	20002d18 20002d18 20002d20 20002d20     .-. .-.  -.  -. 
20002d30:	20002d28 20002d28 20002d30 20002d30     (-. (-. 0-. 0-. 
20002d40:	20002d38 20002d38 20002d40 20002d40     8-. 8-. @-. @-. 
20002d50:	20002d48 20002d48 20002d50 20002d50     H-. H-. P-. P-. 
20002d60:	20002d58 20002d58 20002d60 20002d60     X-. X-. `-. `-. 
20002d70:	20002d68 20002d68 20002d70 20002d70     h-. h-. p-. p-. 
20002d80:	20002d78 20002d78 20002d80 20002d80     x-. x-. .-. .-. 
20002d90:	20002d88 20002d88 20002d90 20002d90     .-. .-. .-. .-. 
20002da0:	20002d98 20002d98 20002da0 20002da0     .-. .-. .-. .-. 
20002db0:	20002da8 20002da8 20002db0 20002db0     .-. .-. .-. .-. 
20002dc0:	20002db8 20002db8 20002dc0 20002dc0     .-. .-. .-. .-. 
20002dd0:	20002dc8 20002dc8 20002dd0 20002dd0     .-. .-. .-. .-. 
20002de0:	20002dd8 20002dd8 20002de0 20002de0     .-. .-. .-. .-. 
20002df0:	20002de8 20002de8 20002df0 20002df0     .-. .-. .-. .-. 
20002e00:	20002df8 20002df8 20002e00 20002e00     .-. .-. ... ... 
20002e10:	20002e08 20002e08 20002e10 20002e10     ... ... ... ... 
20002e20:	20002e18 20002e18 20002e20 20002e20     ... ...  ..  .. 
20002e30:	20002e28 20002e28 20002e30 20002e30     (.. (.. 0.. 0.. 
20002e40:	20002e38 20002e38 20002e40 20002e40     8.. 8.. @.. @.. 
20002e50:	20002e48 20002e48 20002e50 20002e50     H.. H.. P.. P.. 
20002e60:	20002e58 20002e58 20002e60 20002e60     X.. X.. `.. `.. 
20002e70:	20002e68 20002e68 20002e70 20002e70     h.. h.. p.. p.. 
20002e80:	20002e78 20002e78 20002e80 20002e80     x.. x.. ... ... 
20002e90:	20002e88 20002e88 20002e90 20002e90     ... ... ... ... 
20002ea0:	20002e98 20002e98 20002ea0 20002ea0     ... ... ... ... 
20002eb0:	20002ea8 20002ea8 20002eb0 20002eb0     ... ... ... ... 
20002ec0:	20002eb8 20002eb8 20002ec0 20002ec0     ... ... ... ... 
20002ed0:	20002ec8 20002ec8 20002ed0 20002ed0     ... ... ... ... 
20002ee0:	20002ed8 20002ed8 20002ee0 20002ee0     ... ... ... ... 
20002ef0:	20002ee8 20002ee8 20002ef0 20002ef0     ... ... ... ... 
20002f00:	20002ef8 20002ef8 20002f00 20002f00     ... ... ./. ./. 
20002f10:	20002f08 20002f08 20002f10 20002f10     ./. ./. ./. ./. 
20002f20:	20002f18 20002f18 20002f20 20002f20     ./. ./.  /.  /. 
20002f30:	20002f28 20002f28 20002f30 20002f30     (/. (/. 0/. 0/. 
20002f40:	20002f38 20002f38 20002f40 20002f40     8/. 8/. @/. @/. 
20002f50:	20002f48 20002f48 20002f50 20002f50     H/. H/. P/. P/. 
20002f60:	20002f58 20002f58 20002f60 20002f60     X/. X/. `/. `/. 
20002f70:	20002f68 20002f68 20002f70 20002f70     h/. h/. p/. p/. 
20002f80:	20002f78 20002f78 20002f80 20002f80     x/. x/. ./. ./. 
20002f90:	20002f88 20002f88 20002f90 20002f90     ./. ./. ./. ./. 
20002fa0:	20002f98 20002f98 20002fa0 20002fa0     ./. ./. ./. ./. 
20002fb0:	20002fa8 20002fa8 20002fb0 20002fb0     ./. ./. ./. ./. 
20002fc0:	20002fb8 20002fb8 20002fc0 20002fc0     ./. ./. ./. ./. 
20002fd0:	20002fc8 20002fc8 20002fd0 20002fd0     ./. ./. ./. ./. 
20002fe0:	20002fd8 20002fd8 20002fe0 20002fe0     ./. ./. ./. ./. 
20002ff0:	20002fe8 20002fe8 20002ff0 20002ff0     ./. ./. ./. ./. 
20003000:	20002ff8 20002ff8 20003000 20003000     ./. ./. .0. .0. 
20003010:	20003008 20003008 20003010 20003010     .0. .0. .0. .0. 

20003020 <__malloc_sbrk_base>:
20003020:	ffffffff                                ....

20003024 <__malloc_trim_threshold>:
20003024:	00020000                                ....

20003028 <print_mutex>:
	...

20003030 <__mutex_array_end>:
20003030:	10000925 	.word	0x10000925
20003034:	1000030d 	.word	0x1000030d
20003038:	10000ef9 	.word	0x10000ef9
2000303c:	10000fb9 	.word	0x10000fb9

20003040 <__frame_dummy_init_array_entry>:
20003040:	100002ed 10002d21                       ....!-..
